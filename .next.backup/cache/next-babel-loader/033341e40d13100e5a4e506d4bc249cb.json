{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { FormControl, FormLabel, FormHelperText, Input, Stack, Box, Flex, Textarea, Button } from '@chakra-ui/core';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport Loader from 'react-loader';\nimport { usePapaParse } from 'react-papaparse';\nexport default function Batch() {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: batchName,\n    1: setBatchName\n  } = useState(\"\");\n  const {\n    0: imageBaseUrl,\n    1: setImageBaseUrl\n  } = useState(\"\");\n  const {\n    0: inscriptionBaseUrl,\n    1: setInscriptionBaseUrl\n  } = useState(\"\");\n  const {\n    0: addressType,\n    1: setAddressType\n  } = useState(\"\");\n  const {\n    0: titleTemplate,\n    1: setTitleTemplate\n  } = useState(\"\");\n  const {\n    0: descriptionTemplate,\n    1: setDescriptionTemplate\n  } = useState(\"\");\n  const {\n    0: total,\n    1: setTotal\n  } = useState(\"\");\n  const {\n    0: batchData,\n    1: setBatchData\n  } = useState(\"\");\n  const {\n    0: batchDataJson,\n    1: setBatchDataJson\n  } = useState(\"\");\n  const {\n    0: batchId,\n    1: setBatchId\n  } = useState(query.batch_id || \"\");\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    readString,\n    jsonToCSV\n  } = usePapaParse();\n  useEffect(() => {\n    if (batchId && !batchName) {\n      getBatch();\n    }\n  }, []);\n\n  const getBatch = async () => {\n    var requestOptions = {\n      method: 'GET',\n      redirect: 'follow'\n    };\n    fetch(EMBLEM_API + `/batch?batchId=${batchId}`, requestOptions).then(async response => {\n      let record = await response.json();\n      setState({\n        loaded: true\n      });\n      setBatchName(record.batch_name);\n      setImageBaseUrl(record.image_base_url);\n      setInscriptionBaseUrl(record.inscription_base_url);\n      setAddressType(record.address_type);\n      setTitleTemplate(record.title_template);\n      setDescriptionTemplate(record.description_template);\n      let parsedJson = JSON.parse(record.data);\n      setBatchDataJson(parsedJson);\n      let csvData = jsonToCSV(parsedJson);\n      setBatchData(csvData);\n      setTotal((parsedJson.length - 1).toString());\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    let jsonData = await csvToJson(batchData);\n    const serializedForm = {\n      batchName,\n      imageBaseUrl,\n      inscriptionBaseUrl,\n      addressType,\n      titleTemplate,\n      descriptionTemplate,\n      total,\n      batchId,\n      batchData: jsonData.data\n    };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm)\n    }).then(async response => {\n      let data = await response.json();\n\n      if (data.id) {\n        setBatchId(data.id);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  function csvToJson(data) {\n    return new Promise((resolve, reject) => {\n      readString(data, {\n        worker: true,\n        complete: results => {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  function isValidBatchData() {\n    if (!batchDataJson) return false;\n    let hasRows = batchDataJson.length > 1;\n    if (!hasRows) return false; // return hasRows\n    // let hasRows = batchDataJson.length > 1\n\n    let correctColumns = batchDataJson[0].length == 4; // return correctColumns && hasRows\n\n    let correctHeaders = batchDataJson[0][0] == 'asset_number' && batchDataJson[0][1] == 'inscription_number' && batchDataJson[0][2] == 'inscription_hash' && batchDataJson[0][3] == 'to';\n    return hasRows && correctColumns && correctHeaders;\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"batch-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, \"Batch Name\"), __jsx(Input, {\n    type: \"text\",\n    id: \"batch-name\",\n    \"aria-describedby\": \"batch-name-text\",\n    value: batchName,\n    onChange: e => setBatchName(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }), __jsx(FormHelperText, {\n    id: \"batch-name-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, \"Give it a unique name for this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"image-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }, \"Image Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"image-base-url\",\n    \"aria-describedby\": \"image-base-url-text\",\n    value: imageBaseUrl,\n    onChange: e => setImageBaseUrl(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }), __jsx(FormHelperText, {\n    id: \"image-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, \"Enter the base url for the images in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"inscription-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, \"Inscription Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"inscription-base-url\",\n    \"aria-describedby\": \"inscription-base-url-text\",\n    value: inscriptionBaseUrl,\n    onChange: e => setInscriptionBaseUrl(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }), __jsx(FormHelperText, {\n    id: \"inscription-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, \"Enter the base url for the inscriptions in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"address-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, \"Address Type\"), __jsx(Input, {\n    type: \"text\",\n    id: \"address-type\",\n    \"aria-describedby\": \"address-type-text\",\n    value: addressType,\n    onChange: e => setAddressType(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }), __jsx(FormHelperText, {\n    id: \"address-type-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, \"Enter the address type for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"title-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }, \"Title Template\"), __jsx(Textarea, {\n    id: \"title-template\",\n    size: \"lg\",\n    \"aria-describedby\": \"title-template-text\",\n    minLength: 3,\n    maxLength: 4024,\n    value: titleTemplate,\n    onChange: e => setTitleTemplate(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }), __jsx(FormHelperText, {\n    id: \"title-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, \"Enter the title template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }, \"Description Template\"), __jsx(Textarea, {\n    id: \"description-template\",\n    size: \"lg\",\n    \"aria-describedby\": \"description-template-text\",\n    minLength: 3,\n    maxLength: 1024,\n    value: descriptionTemplate,\n    onChange: e => setDescriptionTemplate(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }\n  }), __jsx(FormHelperText, {\n    id: \"description-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }, \"Enter the description template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }, \"Total\"), __jsx(Input, {\n    isDisabled: true,\n    type: \"number\",\n    id: \"total\",\n    \"aria-describedby\": \"total-text\",\n    value: total,\n    onChange: e => setTotal(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }), __jsx(FormHelperText, {\n    id: \"total-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }\n  }, \"Enter the total number of items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  }, \"Records\"), __jsx(Textarea, {\n    id: \"records\",\n    size: \"lg\",\n    \"aria-describedby\": \"records-text\",\n    minLength: 3,\n    value: batchData,\n    onChange: async e => {\n      setBatchData(e.target.value);\n      let jsonData = await csvToJson(e.target.value);\n      setBatchDataJson(jsonData.data);\n      setTotal(jsonData.data.length > 1 ? (jsonData.data.length - 1).toString() : '0');\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  }), __jsx(FormHelperText, {\n    id: \"records-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }\n  }, \"Enter the CSV rows from the helper spreadsheet\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    isDisabled: !isValidBatchData(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 11\n    }\n  }, \"Submit\"))))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx"],"names":["FormControl","FormLabel","FormHelperText","Input","Stack","Box","Flex","Textarea","Button","useRouter","useEffect","useState","EMBLEM_API","Loader","usePapaParse","Batch","query","batchName","setBatchName","imageBaseUrl","setImageBaseUrl","inscriptionBaseUrl","setInscriptionBaseUrl","addressType","setAddressType","titleTemplate","setTitleTemplate","descriptionTemplate","setDescriptionTemplate","total","setTotal","batchData","setBatchData","batchDataJson","setBatchDataJson","batchId","setBatchId","batch_id","state","setState","loaded","readString","jsonToCSV","getBatch","requestOptions","method","redirect","fetch","then","response","record","json","batch_name","image_base_url","inscription_base_url","address_type","title_template","description_template","parsedJson","JSON","parse","data","csvData","length","toString","catch","err","console","log","handleSubmit","event","preventDefault","myHeaders","Headers","append","jsonData","csvToJson","serializedForm","headers","body","stringify","id","Promise","resolve","reject","worker","complete","results","isValidBatchData","hasRows","correctColumns","correctHeaders","e","target","value"],"mappings":"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","sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Stack,\n  Box,\n  Flex,\n  Textarea,\n  Button\n} from '@chakra-ui/core'\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport Loader from 'react-loader'\nimport { usePapaParse } from 'react-papaparse';\n\nexport default function Batch() {\n  const { query } = useRouter()\n  const [batchName, setBatchName] = useState(\"\");\n  const [imageBaseUrl, setImageBaseUrl] = useState(\"\");\n  const [inscriptionBaseUrl, setInscriptionBaseUrl] = useState(\"\");\n  const [addressType, setAddressType] = useState(\"\");\n  const [titleTemplate, setTitleTemplate] = useState(\"\");\n  const [descriptionTemplate, setDescriptionTemplate] = useState(\"\");\n  const [total, setTotal] = useState(\"\");\n  const [batchData, setBatchData] = useState(\"\");\n  const [batchDataJson, setBatchDataJson] = useState(\"\");\n  const [batchId, setBatchId] = useState(query.batch_id || \"\")\n  const [state, setState] = useState({ loaded: false })\n  const { readString, jsonToCSV } = usePapaParse();\n\n\n  useEffect(() => {\n    if (batchId && !batchName) {\n      getBatch()\n    }    \n  }, [])\n\n  const getBatch = async ()=>{\n    var requestOptions: any = {\n      method: 'GET',\n      redirect: 'follow'\n    };\n    \n    fetch(EMBLEM_API + `/batch?batchId=${batchId}`, requestOptions).then(async(response)=> {\n      let record = await response.json()\n      setState({loaded: true})\n      setBatchName(record.batch_name)\n      setImageBaseUrl(record.image_base_url)\n      setInscriptionBaseUrl(record.inscription_base_url)\n      setAddressType(record.address_type)\n      setTitleTemplate(record.title_template)\n      setDescriptionTemplate(record.description_template)\n      let parsedJson = JSON.parse(record.data)\n      setBatchDataJson(parsedJson)\n      let csvData = jsonToCSV(parsedJson)\n      setBatchData(csvData)\n      setTotal((parsedJson.length -1).toString())\n    }).catch(err=>{\n      console.log(err)\n    })\n  }\n\n\n  \n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    let jsonData: any = await csvToJson(batchData)\n    const serializedForm = {\n        batchName,\n        imageBaseUrl,\n        inscriptionBaseUrl,\n        addressType,\n        titleTemplate,\n        descriptionTemplate,\n        total, \n        batchId,\n        batchData: jsonData.data\n        \n      };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm),\n    }).then(async(response)=> {\n        let data = await response.json()\n        if (data.id) {\n          setBatchId(data.id)\n        }\n      }).catch(err=>{\n        console.log(err)\n      })\n  };\n\n  function csvToJson(data) {\n    return new Promise((resolve, reject) => {\n        readString(data, {\n            worker: true,\n            complete: (results: any) => {\n                resolve(results);\n            }\n        });\n    });\n  }\n\n  function isValidBatchData(){\n    if (!batchDataJson) return false\n    let hasRows = batchDataJson.length > 1\n    if (!hasRows) return false\n    // return hasRows\n    // let hasRows = batchDataJson.length > 1\n    let correctColumns = batchDataJson[0].length == 4\n    // return correctColumns && hasRows\n    let correctHeaders = batchDataJson[0][0] == 'asset_number' && batchDataJson[0][1] == 'inscription_number' && batchDataJson[0][2] == 'inscription_hash' && batchDataJson[0][3] == 'to'\n    return hasRows && correctColumns && correctHeaders\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n      <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">    \n          <form onSubmit={handleSubmit}>\n        <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n          <FormControl isRequired>\n            <FormLabel htmlFor=\"batch-name\">Batch Name</FormLabel>\n            <Input\n              type=\"text\"\n              id=\"batch-name\"\n              aria-describedby=\"batch-name-text\"\n              value={batchName}\n              onChange={(e) => setBatchName(e.target.value)}\n              autoComplete=\"off\"\n            />\n            <FormHelperText id=\"batch-name-text\">Give it a unique name for this batch.</FormHelperText>\n          </FormControl>\n          \n          <FormControl isRequired>\n            <FormLabel htmlFor=\"image-base-url\">Image Base Url</FormLabel>\n            <Input\n              type=\"text\"\n              id=\"image-base-url\"\n              aria-describedby=\"image-base-url-text\"\n              value={imageBaseUrl}\n              onChange={(e) => setImageBaseUrl(e.target.value)}\n              autoComplete=\"off\"\n            />\n            <FormHelperText id=\"image-base-url-text\">\n              Enter the base url for the images in this batch.\n            </FormHelperText>\n          </FormControl>\n\n          <FormControl isRequired>\n            <FormLabel htmlFor=\"inscription-base-url\">Inscription Base Url</FormLabel>\n            <Input\n              type=\"text\"\n              id=\"inscription-base-url\"\n              aria-describedby=\"inscription-base-url-text\"\n              value={inscriptionBaseUrl}\n              onChange={(e) => setInscriptionBaseUrl(e.target.value)}\n              autoComplete=\"off\"\n            />\n            <FormHelperText id=\"inscription-base-url-text\">\n              Enter the base url for the inscriptions in this batch.\n            </FormHelperText>\n          </FormControl>\n\n          <FormControl isRequired>\n            <FormLabel htmlFor=\"address-type\">Address Type</FormLabel>\n            <Input\n              type=\"text\"\n              id=\"address-type\"\n              aria-describedby=\"address-type-text\"\n              value={addressType}\n              onChange={(e) => setAddressType(e.target.value)}\n              autoComplete=\"off\"\n            />\n            <FormHelperText id=\"address-type-text\">\n              Enter the address type for the items in this batch.\n            </FormHelperText>\n          </FormControl>\n\n          <FormControl isRequired>\n            <FormLabel htmlFor=\"title-template\">Title Template</FormLabel>\n            <Textarea\n                id=\"title-template\"\n                size=\"lg\"\n                aria-describedby=\"title-template-text\"\n                minLength={3}\n                maxLength={4024}\n                value={titleTemplate}\n                onChange={(e) => setTitleTemplate(e.target.value)}\n                autoComplete=\"off\"\n            />\n            <FormHelperText id=\"title-template-text\">\n              Enter the title template for the items in this batch.\n            </FormHelperText>\n          </FormControl>\n\n          <FormControl isRequired>\n            <FormLabel htmlFor=\"description-template\">Description Template</FormLabel>\n            <Textarea\n                id=\"description-template\"\n                size=\"lg\"\n                aria-describedby=\"description-template-text\"\n                minLength={3}\n                maxLength={1024}\n                value={descriptionTemplate}\n                onChange={(e) => setDescriptionTemplate(e.target.value)}\n                autoComplete=\"off\"\n            />\n            <FormHelperText id=\"description-template-text\">\n              Enter the description template for the items in this batch.\n            </FormHelperText>\n          </FormControl>\n\n          <FormControl isRequired>\n            <FormLabel htmlFor=\"total\">Total</FormLabel>\n            <Input\n              isDisabled={true}\n              type=\"number\"\n              id=\"total\"\n              aria-describedby=\"total-text\"\n              value={total}\n              onChange={(e) => setTotal(e.target.value)}\n              autoComplete=\"off\"\n            />\n            <FormHelperText id=\"total-text\">\n              Enter the total number of items in this batch.\n            </FormHelperText>\n          </FormControl>\n\n          <FormControl isRequired>\n            <FormLabel htmlFor=\"description-template\">Records</FormLabel>\n            <Textarea\n                id=\"records\"\n                size=\"lg\"\n                aria-describedby=\"records-text\"\n                minLength={3}\n                value={batchData}\n                onChange={async (e) => {\n                  setBatchData(e.target.value)\n                  let jsonData: any = await csvToJson(e.target.value)\n                  setBatchDataJson(jsonData.data)\n                  setTotal(jsonData.data.length > 1 ? (jsonData.data.length -1).toString(): '0')\n                }}\n                autoComplete=\"off\"\n            />\n            <FormHelperText id=\"records-text\">\n              Enter the CSV rows from the helper spreadsheet\n            </FormHelperText>\n          </FormControl>\n        </Stack>\n        <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n          <Button mt={4} type=\"submit\" isDisabled={!isValidBatchData()} >\n            Submit\n          </Button>\n        </Stack>\n          </form>\n        </Box>\n    </Flex>\n   </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}