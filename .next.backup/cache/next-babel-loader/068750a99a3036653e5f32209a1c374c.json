{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport BackgroundVideo from './BackgroundVideo';\nimport { Flex, IconButton, useDisclosure, Badge, LightMode, Stack, Box, Button } from '@chakra-ui/core';\nimport { useWeb3React } from '@web3-react/core';\nimport dynamic from 'next/dynamic';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport { useEagerConnect, useQueryParameters, useUSDETHPrice } from '../hooks';\nimport { useTransactions, useFirstToken, useSecondToken, useShowUSD } from '../context';\nimport ColorBox from './ColorBox';\nimport Account from './Account';\nimport { TransactionToast } from './TransactionToast';\nimport TokenBalance from './TokenBalance';\nimport { WETH, ChainId } from '@uniswap/sdk';\nimport WalletConnect from './WalletConnect';\nimport { QueryParameters } from '../constants';\nvar Settings = dynamic(function () {\n  return import('./Settings');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./Settings')];\n    },\n    modules: ['./Settings']\n  }\n});\nexport default function Layout(_ref) {\n  var children = _ref.children;\n\n  var _useWeb3React = useWeb3React(),\n      chainId = _useWeb3React.chainId,\n      account = _useWeb3React.account;\n\n  var isTestnet = typeof chainId === 'number' && chainId !== 1;\n\n  var _useDisclosure = useDisclosure(),\n      isOpenSettings = _useDisclosure.isOpen,\n      onOpenSettings = _useDisclosure.onOpen,\n      onCloseSettings = _useDisclosure.onClose;\n\n  var _useFirstToken = useFirstToken(),\n      _useFirstToken2 = _slicedToArray(_useFirstToken, 1),\n      firstToken = _useFirstToken2[0];\n\n  var _useSecondToken = useSecondToken(),\n      _useSecondToken2 = _slicedToArray(_useSecondToken, 1),\n      secondToken = _useSecondToken2[0];\n\n  var _useShowUSD = useShowUSD(),\n      _useShowUSD2 = _slicedToArray(_useShowUSD, 2),\n      showUSD = _useShowUSD2[0],\n      setShowUSD = _useShowUSD2[1];\n\n  var _useTransactions = useTransactions(),\n      _useTransactions2 = _slicedToArray(_useTransactions, 1),\n      transactions = _useTransactions2[0]; // automatically try connecting to the injected connector on pageload\n\n\n  var triedToEagerConnect = useEagerConnect();\n  var queryParameters = useQueryParameters();\n  var requiredChainId = queryParameters[QueryParameters.CHAIN];\n  var USDETHPrice = useUSDETHPrice();\n\n  var handleNavigationclick = function handleNavigationclick() {\n    console.log(location.pathname);\n    var pieces = location.pathname.split('/');\n    pieces.pop();\n\n    if (location.pathname.includes('vaultlist')) {\n      location.href = location.origin + pieces.join('/') + '/create';\n    } else {\n      location.href = location.origin + pieces.join('/') + '/vaultlist';\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Settings, {\n    isOpen: isOpenSettings,\n    onClose: onCloseSettings\n  }), __jsx(BackgroundVideo, null), __jsx(ColorBox, {\n    as: Flex,\n    flexDirection: \"column\",\n    borderColor: \"orange.500\",\n    borderWidth: isTestnet ? '.5rem' : '0',\n    minHeight: \"100vh\",\n    maxHeight: \"100vh\"\n  }, __jsx(Flex, {\n    justifyContent: \"space-between\",\n    flexShrink: 0,\n    overflowX: \"auto\",\n    p: \"1rem\"\n  }, __jsx(Stack, {\n    spacing: 0,\n    direction: \"row\"\n  }, __jsx(IconButton, {\n    m: 2,\n    icon: \"settings\",\n    variant: \"ghost\",\n    onClick: onOpenSettings,\n    \"aria-label\": \"Settings\"\n  }), __jsx(Button, {\n    m: 2,\n    variant: \"ghost\",\n    onClick: handleNavigationclick\n  }, ' ', location.pathname.includes('vaultlist') ? 'Create Vault' : 'My Vaults')), __jsx(Account, {\n    triedToEagerConnect: triedToEagerConnect\n  })), __jsx(Stack, {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    m: isTestnet ? '1.5rem' : '1rem',\n    mt: isTestnet ? '5rem' : '4.5rem',\n    alignItems: \"flex-end\",\n    spacing: \"1rem\",\n    zIndex: 2\n  }, typeof account !== 'string' ? !triedToEagerConnect || (typeof chainId === 'number' ? chainId !== ChainId.MAINNET : typeof requiredChainId === 'number' && requiredChainId !== ChainId.MAINNET) ? null : __jsx(Box, null, __jsx(WalletConnect, null)) : [firstToken, secondToken].filter(function (token) {\n    return token;\n  }).filter(function (token) {\n    return !(token === null || token === void 0 ? void 0 : token.equals(WETH[token.chainId]));\n  }).map(function (token) {\n    return __jsx(Box, {\n      key: token === null || token === void 0 ? void 0 : token.address\n    }, __jsx(TokenBalance, {\n      token: token\n    }));\n  })), __jsx(Flex, {\n    flexGrow: 1,\n    direction: \"column\",\n    overflow: \"auto\"\n  }, children), __jsx(Flex, {\n    minHeight: \"1.5rem\"\n  }, typeof chainId === 'number' && __jsx(LightMode, null, __jsx(Badge, {\n    variant: \"solid\",\n    variantColor: isTestnet ? 'orange' : undefined,\n    fontSize: \"1rem\",\n    style: {\n      borderTopLeftRadius: 0,\n      borderBottomRightRadius: 0,\n      borderBottomLeftRadius: 0\n    }\n  }, CHAIN_ID_NAMES[chainId]))), transactions.length > 0 && __jsx(Stack, {\n    position: \"absolute\",\n    bottom: 0,\n    right: 0,\n    m: isTestnet ? '1.5rem' : '1rem',\n    alignItems: \"flex-end\",\n    spacing: \"1rem\",\n    zIndex: 2\n  }, transactions.filter(function (transaction) {\n    return transaction.chainId === chainId;\n  }).map(function (_ref2) {\n    var hash = _ref2.hash;\n    return __jsx(Box, {\n      key: hash\n    }, __jsx(TransactionToast, {\n      hash: hash\n    }));\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}