{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Find.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// import { Box, Flex, Text, Link, Image, Stack, Spinner, useColorMode } from '@chakra-ui/core'\nimport { Box, Flex, Text, Link, Stack, Button, Checkbox, CheckboxGroup, Radio, RadioGroup, Input, useColorMode } from '@chakra-ui/core';\nimport { HStack, VStack } from '@chakra-ui/react';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Embed from './Embed'; // import Select from \"react-dropdown-select\";\n\nimport PropTypes from 'prop-types';\nimport ReactSelect, { components, createFilter } from 'react-select';\nexport default function Find() {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: pagePosition,\n    1: setPagePosition\n  } = useState(Number(query.start) || 0);\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: true\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    0: shouldFetchData,\n    1: setShouldFetchData\n  } = useState(false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(0);\n  const {\n    0: q,\n    1: setQ\n  } = useState(query && Object.keys(query).length > 0);\n  const {\n    0: hideClaimed,\n    1: setHideClaimed\n  } = useState(false);\n  const {\n    0: hideUnminted,\n    1: setHideUnminted\n  } = useState(false);\n  const {\n    0: assetName,\n    1: setAssetName\n  } = useState(query.name);\n  const {\n    0: tempAssetName,\n    1: setTempAssetName\n  } = useState(assetName || '');\n  const {\n    0: coin,\n    1: setCoin\n  } = useState(query.coin);\n  const {\n    0: tempCoin,\n    1: setTempCoin\n  } = useState(coin || '');\n  const {\n    0: project,\n    1: setProject\n  } = useState(query.project);\n  const {\n    0: tempProject,\n    1: setTempProject\n  } = useState(project || '');\n  const {\n    0: projects,\n    1: setProjects\n  } = useState([]);\n  const {\n    0: loadedProjects,\n    1: setLoadedProjects\n  } = useState(false);\n  const {\n    0: assets,\n    1: setAssets\n  } = useState([]);\n  const {\n    0: loadedAssets,\n    1: setLoadedAssets\n  } = useState(false);\n  const {\n    0: searchType,\n    1: setSearchType\n  } = useState(query.searchType || 'filter');\n  const {\n    0: tempSearchType,\n    1: setTempSearchType\n  } = useState(searchType.toString());\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState(query.vaultName);\n  const {\n    0: tempVaultName,\n    1: setTempVaultName\n  } = useState(vaultName || '');\n  const {\n    0: vaultDescription,\n    1: setVaultDescription\n  } = useState(query.vaultDescription);\n  const {\n    0: tempVaultDescription,\n    1: setTempVaultDescription\n  } = useState(vaultDescription);\n  const {\n    0: network,\n    1: setNetwork\n  } = useState(query.network || null);\n  const {\n    0: balanceChecks,\n    1: setBalanceChecks\n  } = useState(Object.keys(query).filter(key => {\n    return key !== \"vaultName\" && key !== \"vaultDescription\" && key !== \"searchType\";\n  }));\n  const {\n    0: metadataChecks,\n    1: setMetadataChecks\n  } = useState(Object.keys(query).filter(key => {\n    return key !== \"name\" && key !== \"coin\" && key !== \"project\" && key !== \"searchType\";\n  }));\n  const {\n    0: selectedItems,\n    1: setSelectedItems\n  } = useState([]);\n\n  const CustomOption = _ref => {\n    let {\n      children\n    } = _ref,\n        props = _objectWithoutProperties(_ref, [\"children\"]);\n\n    // eslint-disable-next-line no-unused-vars\n    const _props$innerProps = props.innerProps,\n          {\n      onMouseMove,\n      onMouseOver\n    } = _props$innerProps,\n          rest = _objectWithoutProperties(_props$innerProps, [\"onMouseMove\", \"onMouseOver\"]);\n\n    const newProps = _objectSpread(_objectSpread({}, props), {}, {\n      innerProps: rest\n    });\n\n    return __jsx(components.Option, _extends({}, newProps, {\n      className: \"custom-option\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }), children);\n  };\n\n  CustomOption.propTypes = {\n    innerProps: PropTypes.object.isRequired,\n    children: PropTypes.node.isRequired\n  };\n  const PAGE_SIZE = 20;\n\n  const getProjects = async () => {\n    try {\n      const response = await fetch(EMBLEM_API + '/search/projects', {\n        method: 'GET',\n        headers: {\n          service: 'evmetadata'\n        }\n      });\n      let jsonData = await response.json();\n      let formatted = [];\n      jsonData.sort().forEach(item => {\n        formatted.push({\n          value: item,\n          label: item\n        });\n      });\n      setProjects(formatted);\n    } catch (error) {}\n  };\n\n  const getAssets = async () => {\n    try {\n      const response = await fetch(EMBLEM_API + '/search/assets', {\n        method: 'GET',\n        headers: {\n          service: 'evmetadata'\n        }\n      });\n      let jsonData = await response.json();\n      let formatted = [];\n      jsonData.sort().forEach(item => {\n        formatted.push({\n          value: item,\n          label: item\n        });\n      });\n      setAssets(formatted); // console.log(formatted)\n    } catch (error) {}\n  };\n\n  const getVaults = async () => {\n    let body = {};\n\n    if (metadataChecks.length > 0) {\n      body.metadata = {};\n      metadataChecks.forEach(key => {\n        if (key == \"vaultDescription\") {\n          body.metadata[\"description\"] = tempVaultDescription;\n        }\n\n        if (key == \"vaultName\") {\n          body.metadata[\"name\"] = tempVaultName;\n        }\n      });\n    }\n\n    if (balanceChecks.length > 0) {\n      body.balance = {};\n      balanceChecks.forEach(key => {\n        if (key == \"name\") {\n          body.balance[\"name\"] = tempAssetName;\n        }\n\n        if (key == \"coin\") {\n          body.balance[\"coin\"] = tempCoin;\n        }\n\n        if (key == \"project\") {\n          body.balance[\"project\"] = tempProject;\n        }\n      });\n    }\n\n    try {\n      const response = await fetch(EMBLEM_API + '/find/' + tempSearchType + '?start=' + offset + '&size=' + PAGE_SIZE, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify(body)\n      });\n      let jsonData = await response.json();\n      console.log('------ vaults', jsonData);\n      jsonData.length == 0 || jsonData.length < PAGE_SIZE ? setHasMore(false) : setHasMore(true);\n      setVaults(vaults.concat(jsonData));\n      setState({\n        loaded: true\n      });\n      setLoadingApi(false);\n    } catch (error) {}\n  };\n\n  const fetchData = async () => {\n    console.log(offset, PAGE_SIZE, offset + PAGE_SIZE);\n    setOffset(offset + PAGE_SIZE);\n    setShouldFetchData(true);\n  };\n\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  useEffect(() => {\n    if (q && account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [account, acct]);\n  const {\n    0: chain,\n    1: setChain\n  } = useState(chainId);\n  useEffect(() => {\n    if (q && chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    // console.log('here', chainId, chain, account, state)\n    if (q && !account && !state.loaded) {\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    if (shouldFetchData) {\n      console.log('here 1');\n      setShouldFetchData(false);\n      setLoadingApi(true);\n      getVaults();\n    } else {\n      console.log('no fetch');\n    }\n  }, [shouldFetchData]);\n  useEffect(() => {\n    if (q && vaults.length == 0 && !loadingApi) {\n      console.log('here 2');\n      setShouldFetchData(true); // getVaults()\n    } else {\n      console.log('no fetch', q, vaults);\n    }\n  }, [q, vaults]);\n  useEffect(() => {\n    if (projects.length == 0 && !loadedProjects) {\n      setLoadedProjects(true);\n      getProjects();\n    }\n  });\n  useEffect(() => {\n    if (assets.length == 0 && !loadedAssets) {\n      setLoadedAssets(true);\n      getAssets();\n    }\n  });\n  let blockchains = [{\n    value: \"POLYGON\",\n    label: \"Polygon (Matic)\"\n  }, {\n    value: \"XCP\",\n    label: \"Counterparty\"\n  }, {\n    value: \"BTC\",\n    label: \"Bitcoin\"\n  }, {\n    value: \"BCH\",\n    label: \"Bitcoin Cash\"\n  }, {\n    value: \"DGB\",\n    label: \"Digibyte\"\n  }, {\n    value: \"DOGE\",\n    label: \"Dogecoin\"\n  }, {\n    value: \"ETH\",\n    label: \"Ethereum\"\n  }, {\n    value: \"FTM\",\n    label: \"Fantom\"\n  }, {\n    value: \"LTC\",\n    label: \"Litecoin\"\n  }, {\n    value: \"NMC\",\n    label: \"Namecoin\"\n  }, {\n    value: \"OMNI\",\n    label: \"Omni\"\n  }, {\n    value: \"xDai\",\n    label: \"xDai\"\n  }, {\n    value: \"XDP\",\n    label: \"Doge Party\"\n  }, {\n    value: \"XMP\",\n    label: \"Mona Party\"\n  }, {\n    value: \"XTZ\",\n    label: \"Tezos\"\n  }]; //   <option key=\"4\" value=\"BCH\">Bitcoin Cash</option>\n  //   <option key=\"5\" value=\"DGB\">Digibyte</option>\n  //   <option key=\"6\" value=\"DOGE\">Dogecoin</option>\n  //   <option key=\"7\" value=\"ETH\">Ethereum</option>\n  //   <option key=\"8\" value=\"FTM\">Fantom</option>\n  //   <option key=\"9\" value=\"LTC\">Litecoin</option>\n  //   <option key=\"10\" value=\"NMC\">Namecoin</option>\n  //   <option key=\"12\" value=\"xDai\">xDai</option>\n  //   <option key=\"13\" value=\"OMNI\">Omni</option>\n  //   <option key=\"14\" value=\"XDP\">Doge Party</option>\n  //   <option key=\"15\" value=\"XMP\">Mona Party</option>\n  //   <option key=\"16\" value=\"XTZ\">Tezos</option>\n\n  function addOrRemoveBalanceFilter(target) {\n    if (balanceChecks.includes(target)) {\n      setBalanceChecks(balanceChecks.filter(item => item !== target));\n    } else {\n      setBalanceChecks(balanceChecks.concat(target));\n    }\n\n    console.log('balance checks', balanceChecks);\n  }\n\n  function addOrRemoveMetadataFilter(target) {\n    if (metadataChecks.includes(target)) {\n      setMetadataChecks(metadataChecks.filter(item => item !== target));\n    } else {\n      setMetadataChecks(metadataChecks.concat(target));\n    }\n\n    console.log('metadata checks', metadataChecks);\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 21\n    }\n  }) : '', __jsx(VStack, {\n    width: \"100%\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }\n  }, __jsx(RadioGroup, {\n    onChange: e => {\n      setTempSearchType(e.target.value);\n    },\n    defaultValue: tempSearchType,\n    value: tempSearchType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    spacing: 4,\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 11\n    }\n  }, __jsx(Radio, {\n    isChecked: tempSearchType == \"filter\" ? true : false,\n    value: \"filter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 13\n    }\n  }, \"Filter (AND)\"), __jsx(Radio, {\n    isChecked: tempSearchType === \"or\" ? true : false,\n    value: \"or\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 13\n    }\n  }, \"Search (OR)\"))), __jsx(CheckboxGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }\n  }, __jsx(HStack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 11\n    }\n  }, __jsx(Checkbox, {\n    isDisabled: metadataChecks.length > 0,\n    key: \"check1\",\n    isChecked: balanceChecks.includes('name'),\n    value: \"name\",\n    onChange: e => {\n      addOrRemoveBalanceFilter(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 13\n    }\n  }, \"Asset Name\"), __jsx(Checkbox, {\n    isDisabled: metadataChecks.length > 0,\n    key: \"check2\",\n    isChecked: balanceChecks.includes('coin'),\n    value: \"coin\",\n    onChange: e => {\n      addOrRemoveBalanceFilter(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }\n  }, \"Blockchain\"), __jsx(Checkbox, {\n    isDisabled: metadataChecks.length > 0,\n    key: \"check3\",\n    isChecked: balanceChecks.includes('project'),\n    value: \"project\",\n    onChange: e => {\n      addOrRemoveBalanceFilter(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 13\n    }\n  }, \"Project\"), __jsx(Checkbox, {\n    isDisabled: balanceChecks.length > 0,\n    key: \"check4\",\n    isChecked: metadataChecks.includes('vaultName'),\n    value: \"vaultName\",\n    onChange: e => {\n      addOrRemoveMetadataFilter(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }\n  }, \"Vault Name\"), __jsx(Checkbox, {\n    isDisabled: balanceChecks.length > 0,\n    key: \"check5\",\n    isChecked: metadataChecks.includes('vaultDescription'),\n    value: \"vaultDescription\",\n    onChange: e => {\n      addOrRemoveMetadataFilter(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }\n  }, \"Vault Description\"), __jsx(Checkbox, {\n    isChecked: hideClaimed == true,\n    key: \"check6\",\n    value: \"hideClaimed\",\n    onChange: e => {\n      setHideClaimed(!hideClaimed);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 13\n    }\n  }, \"Hide Claimed\"), __jsx(Checkbox, {\n    isChecked: hideUnminted == true,\n    key: \"check6\",\n    value: \"hideUnminted\",\n    onChange: e => {\n      setHideUnminted(!hideUnminted);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 13\n    }\n  }, \"Hide Un-Minted\"))), balanceChecks.map((check, index) => {\n    return __jsx(VStack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 13\n      }\n    }, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 15\n      }\n    }, index == 0 ? null : tempSearchType == \"or\" ? \"or\" : \"and\", \" \", check == \"coin\" ? \"from Blockchain\" : check == \"name\" ? \"within balances for the Asset Name of\" : \"of the Project\"), check == \"name\" ? // <Input value={tempAssetName} onChange={(e) => setTempAssetName(e.target.value)} ></Input>\n    __jsx(ReactSelect, {\n      onChange: e => setTempAssetName(e.value),\n      defaultValue: assets.filter(asset => {\n        return asset.value == tempAssetName;\n      })[0],\n      components: {\n        Option: CustomOption\n      },\n      classNamePrefix: \"custom-select\",\n      filterOption: createFilter({\n        ignoreAccents: false\n      }),\n      options: assets,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }\n    }) : check == \"coin\" ? __jsx(ReactSelect, {\n      onChange: e => setTempCoin(e.value),\n      defaultValue: blockchains.filter(asset => {\n        return asset.value == tempCoin;\n      })[0],\n      components: {\n        Option: CustomOption\n      },\n      classNamePrefix: \"custom-select\",\n      filterOption: createFilter({\n        ignoreAccents: false\n      }),\n      options: blockchains,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }\n    }) // <Select value={tempCoin} onChange={(e)=>{setTempCoin(e.target.value)}}>\n    //   <option key=\"1\" value=\"POLYGON\">Polygon (Matic)</option>\n    //   <option key=\"2\" value=\"XCP\">Counterparty</option>\n    //   <option key=\"3\" value=\"BTC\">Bitcoin</option>\n    //   <option key=\"4\" value=\"BCH\">Bitcoin Cash</option>\n    //   <option key=\"5\" value=\"DGB\">Digibyte</option>\n    //   <option key=\"6\" value=\"DOGE\">Dogecoin</option>\n    //   <option key=\"7\" value=\"ETH\">Ethereum</option>\n    //   <option key=\"8\" value=\"FTM\">Fantom</option>\n    //   <option key=\"9\" value=\"LTC\">Litecoin</option>\n    //   <option key=\"10\" value=\"NMC\">Namecoin</option>\n    //   <option key=\"11\" value=\"OMNI\">Omni</option>\n    //   <option key=\"12\" value=\"xDai\">xDai</option>\n    //   <option key=\"13\" value=\"OMNI\">Omni</option>\n    //   <option key=\"14\" value=\"XDP\">Doge Party</option>\n    //   <option key=\"15\" value=\"XMP\">Mona Party</option>\n    //   <option key=\"16\" value=\"XTZ\">Tezos</option>\n    // </Select>\n    : check == \"project\" ? __jsx(ReactSelect, {\n      onChange: e => setTempProject(e.value),\n      defaultValue: projects.filter(asset => {\n        return asset.value == tempProject;\n      })[0],\n      components: {\n        Option: CustomOption\n      },\n      classNamePrefix: \"custom-select\",\n      filterOption: createFilter({\n        ignoreAccents: false\n      }),\n      options: projects,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 17\n      }\n    }) // <Select value={tempProject} onChange={(e)=>{setTempProject(e.target.value)}}>\n    //   {projects.map((project, index)=>{\n    //     return (<option key={\"project-\"+index} value={project}>{project}</option>)\n    //   })}\n    // </Select>\n    : null);\n  }), metadataChecks.map((check, index) => {\n    return __jsx(VStack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 13\n      }\n    }, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 15\n      }\n    }, index == 0 ? null : tempSearchType == \"or\" ? \"or\" : \"and\", \" \", check == \"vaultName\" ? \"within vault name\" : check == \"vaultDescription\" ? \"within vault description\" : null), check == \"vaultName\" ? __jsx(Input, {\n      value: tempVaultName,\n      onChange: e => setTempVaultName(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 17\n      }\n    }) : check == \"vaultDescription\" ? __jsx(Input, {\n      value: tempVaultDescription,\n      onChange: e => setTempVaultDescription(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 17\n      }\n    }) : null);\n  }), __jsx(Button, {\n    m: 2,\n    isDisabled: balanceChecks.length < 1 && metadataChecks.length < 1,\n    onClick: () => {\n      setOffset(0);\n      setState({\n        loaded: false\n      });\n      setVaults([]);\n      setQ(true);\n      let loc = location.href.split('?')[0] + '?';\n      metadataChecks.forEach(key => {\n        if (key == \"vaultDescription\") {\n          loc = loc + key + '=' + tempVaultDescription + \"&\";\n        }\n\n        if (key == \"vaultName\") {\n          loc = loc + key + '=' + tempVaultName + \"&\";\n        }\n      });\n      balanceChecks.forEach(key => {\n        console.log(key);\n\n        if (key == \"name\") {\n          loc = loc + key + '=' + tempAssetName + \"&\";\n        }\n\n        if (key == \"coin\") {\n          loc = loc + key + '=' + tempCoin + \"&\";\n        }\n\n        if (key == \"project\") {\n          loc = loc + key + '=' + tempProject + \"&\";\n        }\n      });\n\n      if (tempSearchType) {\n        loc = loc + \"searchType=\" + tempSearchType + \"&\";\n      } // let loc = location.href.split('?')[0]+\"?q=\"+temp_q +  \"&network=\" + network\n\n\n      console.log(\"SEARCH\", loc);\n      window.history.pushState('', 'Title', loc);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 11\n    }\n  }, \"Search\")), q ? __jsx(InfiniteScroll, {\n    className: \"infinite-scroll\",\n    scrollableTarget: \"shannon-container\" // height={200}\n    ,\n    dataLength: vaults.length //This is important field to render the next data\n    ,\n    next: fetchData,\n    hasMore: hasMore,\n    loader: __jsx(Refreshing, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 19\n      }\n    }),\n    endMessage: __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 13\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 15\n      }\n    }, \"Yay! You have seen it all\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 9\n    }\n  }, __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 11\n    }\n  }, vaults.length ? vaults.map((vault, index) => {\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n    let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId;\n    const flexSettings = {\n      flex: '1',\n      minW: '200px',\n      maxW: '200px',\n      borderWidth: '1px',\n      // color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    const redirect = function () {\n      setLoadingApi(true);\n      location.href = url;\n    };\n\n    if (hideClaimed && vault.status == 'claimed' || hideUnminted && !vault.live) {\n      return null;\n    } else {\n      return __jsx(Link, {\n        href: url,\n        className: \"vaultLink\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 23\n        }\n      }, __jsx(Box, _extends({\n        className: \"NFT newest\",\n        key: index\n      }, flexSettings, {\n        onClick: redirect,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 25\n        }\n      }), __jsx(Text, {\n        fontWeight: \"semibold\",\n        textAlign: \"center\",\n        mt: 2,\n        pl: 2,\n        isTruncated: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 27\n        }\n      }, vault.name, !vault.private && vault.totalValue > 0 ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 27\n        }\n      }, __jsx(Embed, {\n        className: \"d-block w-100 NFT-newest-image\",\n        url: vault.image,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 29\n        }\n      })), __jsx(Box, {\n        d: \"flex\",\n        alignItems: \"baseline\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 27\n        }\n      }), __jsx(Stack, {\n        align: \"center\",\n        mt: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 27\n        }\n      }, vault.status == 'claimed' ? __jsx(Text, {\n        color: \"green.500\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 58\n        }\n      }, \"CLAIMED\") : null, __jsx(Text, {\n        fontSize: \"xs\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 29\n        }\n      }, \"Id: \", vault.tokenId))));\n    }\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 15\n    }\n  }, \"YOU DON'T SEEM TO HAVE ANY VAULTS.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 17\n    }\n  }, \"CREATE ONE HERE!\")))) : null);\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Find.tsx"],"names":["Box","Flex","Text","Link","Stack","Button","Checkbox","CheckboxGroup","Radio","RadioGroup","Input","useColorMode","HStack","VStack","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","EMBLEM_API","InfiniteScroll","Embed","PropTypes","ReactSelect","components","createFilter","Find","query","pagePosition","setPagePosition","Number","start","account","chainId","vaults","setVaults","state","setState","loaded","loadingApi","setLoadingApi","address","setAddress","experimental","setExperimental","colorMode","shouldFetchData","setShouldFetchData","hasMore","setHasMore","offset","setOffset","q","setQ","Object","keys","length","hideClaimed","setHideClaimed","hideUnminted","setHideUnminted","assetName","setAssetName","name","tempAssetName","setTempAssetName","coin","setCoin","tempCoin","setTempCoin","project","setProject","tempProject","setTempProject","projects","setProjects","loadedProjects","setLoadedProjects","assets","setAssets","loadedAssets","setLoadedAssets","searchType","setSearchType","tempSearchType","setTempSearchType","toString","vaultName","setVaultName","tempVaultName","setTempVaultName","vaultDescription","setVaultDescription","tempVaultDescription","setTempVaultDescription","network","setNetwork","balanceChecks","setBalanceChecks","filter","key","metadataChecks","setMetadataChecks","selectedItems","setSelectedItems","CustomOption","children","props","innerProps","onMouseMove","onMouseOver","rest","newProps","propTypes","object","isRequired","node","PAGE_SIZE","getProjects","response","fetch","method","headers","service","jsonData","json","formatted","sort","forEach","item","push","value","label","error","getAssets","getVaults","body","metadata","balance","JSON","stringify","console","log","concat","fetchData","acct","setAcct","chain","setChain","blockchains","addOrRemoveBalanceFilter","target","includes","addOrRemoveMetadataFilter","e","map","check","index","asset","Option","ignoreAccents","loc","location","href","split","window","history","pushState","textAlign","vault","pieces","pathname","pop","url","origin","join","tokenId","flexSettings","flex","minW","maxW","borderWidth","mx","mb","rounded","overflow","borderColor","status","cursor","redirect","live","private","totalValue","image"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,IAA1B,EAAuCC,KAAvC,EAA8CC,MAA9C,EAA8EC,QAA9E,EAAwFC,aAAxF,EAAuGC,KAAvG,EAA8GC,UAA9G,EAA0HC,KAA1H,EAAiJC,YAAjJ,QAAqK,iBAArK;AACA,SAAQC,MAAR,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAAoBC,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,IAAsBC,UAAtB,EAAkCC,YAAlC,QAAsD,cAAtD;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAYZ,SAAS,EAA3B;AACA,QAAM;AAAA,OAACa,YAAD;AAAA,OAAeC;AAAf,MAAkCX,QAAQ,CAACY,MAAM,CAACH,KAAK,CAACI,KAAP,CAAN,IAAuB,CAAxB,CAAhD;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBjB,YAAY,EAAzC;AACA,QAAM;AAAA,OAACkB,MAAD;AAAA,OAASC;AAAT,MAAsBjB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACkB,KAAD;AAAA,OAAQC;AAAR,MAAoBnB,QAAQ,CAAC;AAAEoB,IAAAA,MAAM,EAAE;AAAV,GAAD,CAAlC;AACA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BtB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAACuB,OAAD;AAAA,OAAUC;AAAV,MAAwBxB,QAAQ,CAACS,KAAK,CAACc,OAAP,CAAtC;AACA,QAAM;AAAA,OAACE,YAAD;AAAA,OAAeC;AAAf,MAAkC1B,QAAQ,CAACS,KAAK,CAACgB,YAAP,CAAhD;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAgBnC,YAAY,EAAlC;AACA,QAAM;AAAA,OAACoC,eAAD;AAAA,OAAkBC;AAAlB,MAAwC7B,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM;AAAA,OAAC8B,OAAD;AAAA,OAAUC;AAAV,MAAwB/B,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACgC,MAAD;AAAA,OAASC;AAAT,MAAsBjC,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM;AAAA,OAACkC,CAAD;AAAA,OAAIC;AAAJ,MAAYnC,QAAQ,CAACS,KAAK,IAAI2B,MAAM,CAACC,IAAP,CAAY5B,KAAZ,EAAmB6B,MAAnB,GAA4B,CAAtC,CAA1B;AACA,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCxC,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAA,OAACyC,YAAD;AAAA,OAAeC;AAAf,MAAkC1C,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAM;AAAA,OAAC2C,SAAD;AAAA,OAAYC;AAAZ,MAA4B5C,QAAQ,CAACS,KAAK,CAACoC,IAAP,CAA1C;AACA,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoC/C,QAAQ,CAAC2C,SAAS,IAAI,EAAd,CAAlD;AAEA,QAAM;AAAA,OAACK,IAAD;AAAA,OAAOC;AAAP,MAAkBjD,QAAQ,CAACS,KAAK,CAACuC,IAAP,CAAhC;AACA,QAAM;AAAA,OAACE,QAAD;AAAA,OAAWC;AAAX,MAA0BnD,QAAQ,CAACgD,IAAI,IAAI,EAAT,CAAxC;AAEA,QAAM;AAAA,OAACI,OAAD;AAAA,OAAUC;AAAV,MAAwBrD,QAAQ,CAACS,KAAK,CAAC2C,OAAP,CAAtC;AACA,QAAM;AAAA,OAACE,WAAD;AAAA,OAAcC;AAAd,MAAgCvD,QAAQ,CAACoD,OAAO,IAAI,EAAZ,CAA9C;AAEA,QAAM;AAAA,OAACI,QAAD;AAAA,OAAWC;AAAX,MAA0BzD,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAAC0D,cAAD;AAAA,OAAiBC;AAAjB,MAAsC3D,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAM;AAAA,OAAC4D,MAAD;AAAA,OAASC;AAAT,MAAsB7D,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAAC8D,YAAD;AAAA,OAAeC;AAAf,MAAkC/D,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAM;AAAA,OAACgE,UAAD;AAAA,OAAaC;AAAb,MAA8BjE,QAAQ,CAACS,KAAK,CAACuD,UAAN,IAAoB,QAArB,CAA5C;AACA,QAAM;AAAA,OAACE,cAAD;AAAA,OAAiBC;AAAjB,MAAsCnE,QAAQ,CAACgE,UAAU,CAACI,QAAX,EAAD,CAApD;AAEA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BtE,QAAQ,CAACS,KAAK,CAAC4D,SAAP,CAA1C;AACA,QAAM;AAAA,OAACE,aAAD;AAAA,OAAgBC;AAAhB,MAAoCxE,QAAQ,CAACqE,SAAS,IAAI,EAAd,CAAlD;AAEA,QAAM;AAAA,OAACI,gBAAD;AAAA,OAAmBC;AAAnB,MAA0C1E,QAAQ,CAACS,KAAK,CAACgE,gBAAP,CAAxD;AACA,QAAM;AAAA,OAACE,oBAAD;AAAA,OAAuBC;AAAvB,MAAkD5E,QAAQ,CAACyE,gBAAD,CAAhE;AAEA,QAAM;AAAA,OAACI,OAAD;AAAA,OAAUC;AAAV,MAAwB9E,QAAQ,CAACS,KAAK,CAACoE,OAAN,IAAiB,IAAlB,CAAtC;AAEA,QAAM;AAAA,OAACE,aAAD;AAAA,OAAgBC;AAAhB,MAAoChF,QAAQ,CAACoC,MAAM,CAACC,IAAP,CAAY5B,KAAZ,EAAmBwE,MAAnB,CAA0BC,GAAG,IAAE;AAAC,WAAOA,GAAG,KAAK,WAAR,IAAuBA,GAAG,KAAK,kBAA/B,IAAqDA,GAAG,KAAK,YAApE;AAAiF,GAAjH,CAAD,CAAlD;AACA,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCpF,QAAQ,CAACoC,MAAM,CAACC,IAAP,CAAY5B,KAAZ,EAAmBwE,MAAnB,CAA0BC,GAAG,IAAE;AAAC,WAAOA,GAAG,KAAK,MAAR,IAAkBA,GAAG,KAAK,MAA1B,IAAoCA,GAAG,KAAK,SAA5C,IAAyDA,GAAG,KAAK,YAAxE;AAAqF,GAArH,CAAD,CAApD;AAEA,QAAM;AAAA,OAACG,aAAD;AAAA,OAAgBC;AAAhB,MAAoCtF,QAAQ,CAAS,EAAT,CAAlD;;AAEA,QAAMuF,YAAY,GAAG,QAA4B;AAAA,QAA3B;AAAEC,MAAAA;AAAF,KAA2B;AAAA,QAAZC,KAAY;;AAC/C;AACA,8BAA8CA,KAAK,CAACC,UAApD;AAAA,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,KAAN;AAAA,UAAqCC,IAArC;;AACA,UAAMC,QAAa,mCAAQL,KAAR;AAAeC,MAAAA,UAAU,EAAEG;AAA3B,MAAnB;;AACA,WACE,MAAC,UAAD,CAAY,MAAZ,eACIC,QADJ;AAEA,MAAA,SAAS,EAAC,eAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAIGN,QAJH,CADF;AAQD,GAZD;;AAcAD,EAAAA,YAAY,CAACQ,SAAb,GAAyB;AACvBL,IAAAA,UAAU,EAAEtF,SAAS,CAAC4F,MAAV,CAAiBC,UADN;AAEvBT,IAAAA,QAAQ,EAAEpF,SAAS,CAAC8F,IAAV,CAAeD;AAFF,GAAzB;AAUA,QAAME,SAAS,GAAG,EAAlB;;AAEA,QAAMC,WAAW,GAAG,YAAY;AAC9B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACrG,UAAU,GAAG,kBAAd,EAAkC;AAC5DsG,QAAAA,MAAM,EAAE,KADoD;AAE5DC,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE;AADF;AAFmD,OAAlC,CAA5B;AAMA,UAAIC,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAAT,EAArB;AACA,UAAIC,SAAS,GAAG,EAAhB;AACAF,MAAAA,QAAQ,CAACG,IAAT,GAAgBC,OAAhB,CAAwBC,IAAI,IAAE;AAC5BH,QAAAA,SAAS,CAACI,IAAV,CAAe;AACbC,UAAAA,KAAK,EAAEF,IADM;AAEbG,UAAAA,KAAK,EAAEH;AAFM,SAAf;AAID,OALD;AAMAtD,MAAAA,WAAW,CAACmD,SAAD,CAAX;AACD,KAhBD,CAgBE,OAAOO,KAAP,EAAc,CAAE;AACnB,GAlBD;;AAoBA,QAAMC,SAAS,GAAG,YAAY;AAC5B,QAAI;AACF,YAAMf,QAAQ,GAAG,MAAMC,KAAK,CAACrG,UAAU,GAAG,gBAAd,EAAgC;AAC1DsG,QAAAA,MAAM,EAAE,KADkD;AAE1DC,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE;AADF;AAFiD,OAAhC,CAA5B;AAMA,UAAIC,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAAT,EAArB;AACA,UAAIC,SAAS,GAAG,EAAhB;AACAF,MAAAA,QAAQ,CAACG,IAAT,GAAgBC,OAAhB,CAAwBC,IAAI,IAAE;AAC5BH,QAAAA,SAAS,CAACI,IAAV,CAAe;AACbC,UAAAA,KAAK,EAAEF,IADM;AAEbG,UAAAA,KAAK,EAAEH;AAFM,SAAf;AAID,OALD;AAMAlD,MAAAA,SAAS,CAAC+C,SAAD,CAAT,CAfE,CAgBF;AACD,KAjBD,CAiBE,OAAOO,KAAP,EAAc,CAAE;AACnB,GAnBD;;AAqBA,QAAME,SAAS,GAAG,YAAY;AAC5B,QAAIC,IAAS,GAAG,EAAhB;;AACA,QAAInC,cAAc,CAAC7C,MAAf,GAAwB,CAA5B,EAA+B;AAC7BgF,MAAAA,IAAI,CAACC,QAAL,GAAgB,EAAhB;AACApC,MAAAA,cAAc,CAAC2B,OAAf,CAAuB5B,GAAG,IAAI;AAC5B,YAAIA,GAAG,IAAI,kBAAX,EAA+B;AAC7BoC,UAAAA,IAAI,CAACC,QAAL,CAAc,aAAd,IAA+B5C,oBAA/B;AACD;;AACD,YAAIO,GAAG,IAAI,WAAX,EAAwB;AACtBoC,UAAAA,IAAI,CAACC,QAAL,CAAc,MAAd,IAAwBhD,aAAxB;AACD;AACF,OAPD;AASD;;AACD,QAAIQ,aAAa,CAACzC,MAAd,GAAuB,CAA3B,EAA8B;AAC5BgF,MAAAA,IAAI,CAACE,OAAL,GAAe,EAAf;AACAzC,MAAAA,aAAa,CAAC+B,OAAd,CAAsB5B,GAAG,IAAI;AAC3B,YAAIA,GAAG,IAAI,MAAX,EAAmB;AACjBoC,UAAAA,IAAI,CAACE,OAAL,CAAa,MAAb,IAAuB1E,aAAvB;AACD;;AACD,YAAIoC,GAAG,IAAI,MAAX,EAAmB;AACjBoC,UAAAA,IAAI,CAACE,OAAL,CAAa,MAAb,IAAuBtE,QAAvB;AACD;;AACD,YAAIgC,GAAG,IAAI,SAAX,EAAsB;AACpBoC,UAAAA,IAAI,CAACE,OAAL,CAAa,SAAb,IAA0BlE,WAA1B;AACD;AACF,OAVD;AAWD;;AACD,QAAI;AACF,YAAM+C,QAAQ,GAAG,MAAMC,KAAK,CAACrG,UAAU,GAAG,QAAb,GAAsBiE,cAAtB,GAAqC,SAArC,GAA+ClC,MAA/C,GAAsD,QAAtD,GAA+DmE,SAAhE,EAA2E;AACrGI,QAAAA,MAAM,EAAE,MAD6F;AAErGC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,OAAO,EAAE;AAFF,SAF4F;AAMrGa,QAAAA,IAAI,EAAEG,IAAI,CAACC,SAAL,CAAeJ,IAAf;AAN+F,OAA3E,CAA5B;AAQA,UAAIZ,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAAT,EAArB;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BlB,QAA7B;AACAA,MAAAA,QAAQ,CAACpE,MAAT,IAAmB,CAAnB,IAAwBoE,QAAQ,CAACpE,MAAT,GAAkB6D,SAA1C,GAAsDpE,UAAU,CAAC,KAAD,CAAhE,GAA0EA,UAAU,CAAC,IAAD,CAApF;AACAd,MAAAA,SAAS,CAACD,MAAM,CAAC6G,MAAP,CAAcnB,QAAd,CAAD,CAAT;AACAvF,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAR;AACAE,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAfD,CAeE,OAAO6F,KAAP,EAAc,CAAE;AACnB,GA5CD;;AA8CA,QAAMW,SAAS,GAAG,YAAU;AAC1BH,IAAAA,OAAO,CAACC,GAAR,CAAY5F,MAAZ,EAAoBmE,SAApB,EAA+BnE,MAAM,GAACmE,SAAtC;AACAlE,IAAAA,SAAS,CAACD,MAAM,GAACmE,SAAR,CAAT;AACAtE,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,GAJD;;AAMA,QAAM;AAAA,OAACkG,IAAD;AAAA,OAAOC;AAAP,MAAkBhI,QAAQ,CAAC,EAAD,CAAhC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImC,CAAC,IAAIpB,OAAL,IAAgBiH,IAAI,IAAIjH,OAA5B,EAAqC;AACnCkH,MAAAA,OAAO,CAAClH,OAAD,CAAP;AACAK,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAR;AACAiG,MAAAA,SAAS;AACV;AACF,GANQ,EAMN,CAACvG,OAAD,EAAUiH,IAAV,CANM,CAAT;AAQA,QAAM;AAAA,OAACE,KAAD;AAAA,OAAQC;AAAR,MAAoBlI,QAAQ,CAACe,OAAD,CAAlC;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImC,CAAC,IAAInB,OAAL,IAAgBkH,KAAK,IAAIlH,OAA7B,EAAsC;AACpCmH,MAAAA,QAAQ,CAACnH,OAAD,CAAR;AACAI,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAR;AACAiG,MAAAA,SAAS;AACV;AACF,GANQ,EAMN,CAACtG,OAAD,EAAUkH,KAAV,CANM,CAAT;AAQAlI,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAImC,CAAC,IAAI,CAACpB,OAAN,IAAiB,CAACI,KAAK,CAACE,MAA5B,EAAoC;AAClCD,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAR;AACAiG,MAAAA,SAAS;AACV;AACF,GANQ,EAMN,CAACtG,OAAD,EAAUkH,KAAV,CANM,CAAT;AAQAlI,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI6B,eAAJ,EAAqB;AACnB+F,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA/F,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAP,MAAAA,aAAa,CAAC,IAAD,CAAb;AACA+F,MAAAA,SAAS;AACV,KALD,MAKO;AACLM,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD;AACF,GATQ,EASN,CAAChG,eAAD,CATM,CAAT;AAWA7B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImC,CAAC,IAAIlB,MAAM,CAACsB,MAAP,IAAiB,CAAtB,IAA2B,CAACjB,UAAhC,EAA4C;AAC1CsG,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA/F,MAAAA,kBAAkB,CAAC,IAAD,CAAlB,CAF0C,CAG1C;AACD,KAJD,MAIO;AACL8F,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB1F,CAAxB,EAA2BlB,MAA3B;AACD;AACF,GARQ,EAQN,CAACkB,CAAD,EAAIlB,MAAJ,CARM,CAAT;AAUAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyD,QAAQ,CAAClB,MAAT,IAAmB,CAAnB,IAAwB,CAACoB,cAA7B,EAA6C;AAC3CC,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAyC,MAAAA,WAAW;AACZ;AACF,GALQ,CAAT;AAOArG,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI6D,MAAM,CAACtB,MAAP,IAAiB,CAAjB,IAAsB,CAACwB,YAA3B,EAAyC;AACvCC,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAqD,MAAAA,SAAS;AACV;AACF,GALQ,CAAT;AAOA,MAAIe,WAAW,GAAG,CAChB;AAAClB,IAAAA,KAAK,EAAE,SAAR;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GADgB,EAEhB;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAFgB,EAGhB;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAHgB,EAIhB;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAJgB,EAKhB;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GALgB,EAMhB;AAACD,IAAAA,KAAK,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GANgB,EAOhB;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAPgB,EAQhB;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GARgB,EAShB;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GATgB,EAUhB;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAVgB,EAWhB;AAACD,IAAAA,KAAK,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GAXgB,EAYhB;AAACD,IAAAA,KAAK,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GAZgB,EAahB;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAbgB,EAchB;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAdgB,EAehB;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAfgB,CAAlB,CApO6B,CAsP3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEF,WAASkB,wBAAT,CAAkCC,MAAlC,EAA0C;AACxC,QAAItD,aAAa,CAACuD,QAAd,CAAuBD,MAAvB,CAAJ,EAAoC;AAClCrD,MAAAA,gBAAgB,CAACD,aAAa,CAACE,MAAd,CAAqB8B,IAAI,IAAIA,IAAI,KAAKsB,MAAtC,CAAD,CAAhB;AACD,KAFD,MAEO;AACLrD,MAAAA,gBAAgB,CAACD,aAAa,CAAC8C,MAAd,CAAqBQ,MAArB,CAAD,CAAhB;AACD;;AACDV,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6B7C,aAA7B;AACD;;AAED,WAASwD,yBAAT,CAAmCF,MAAnC,EAA2C;AACzC,QAAIlD,cAAc,CAACmD,QAAf,CAAwBD,MAAxB,CAAJ,EAAqC;AACnCjD,MAAAA,iBAAiB,CAACD,cAAc,CAACF,MAAf,CAAsB8B,IAAI,IAAIA,IAAI,KAAKsB,MAAvC,CAAD,CAAjB;AACD,KAFD,MAEO;AACLjD,MAAAA,iBAAiB,CAACD,cAAc,CAAC0C,MAAf,CAAsBQ,MAAtB,CAAD,CAAjB;AACD;;AACDV,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BzC,cAA9B;AACD;;AAED,SACE,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAEjE,KAAK,CAACE,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,UAAU,GAAG,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAoB,EADjC,EAEE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,MAAd;AAAqB,IAAA,KAAK,EAAC,QAA3B;AAAoC,IAAA,cAAc,EAAC,QAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,QAAQ,EAAGmH,CAAD,IAAK;AAAErE,MAAAA,iBAAiB,CAACqE,CAAC,CAACH,MAAF,CAASpB,KAAV,CAAjB;AAAmC,KAAhE;AAAkE,IAAA,YAAY,EAAE/C,cAAhF;AAAgG,IAAA,KAAK,EAAEA,cAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAE,CAAhB;AAAmB,IAAA,SAAS,EAAC,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAEA,cAAc,IAAI,QAAlB,GAA4B,IAA5B,GAAmC,KAArD;AAA4D,IAAA,KAAK,EAAC,QAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAEA,cAAc,KAAK,IAAnB,GAAyB,IAAzB,GAAgC,KAAlD;AAAyD,IAAA,KAAK,EAAC,IAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,CADF,CADF,EAOE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,UAAU,EAAEiB,cAAc,CAAC7C,MAAf,GAAwB,CAA9C;AAAiD,IAAA,GAAG,EAAC,QAArD;AAA8D,IAAA,SAAS,EAAEyC,aAAa,CAACuD,QAAd,CAAuB,MAAvB,CAAzE;AAAyG,IAAA,KAAK,EAAC,MAA/G;AAAsH,IAAA,QAAQ,EAAGE,CAAD,IAAK;AAACJ,MAAAA,wBAAwB,CAACI,CAAC,CAACH,MAAF,CAASpB,KAAV,CAAxB;AAAyC,KAA/K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE,MAAC,QAAD;AAAU,IAAA,UAAU,EAAE9B,cAAc,CAAC7C,MAAf,GAAwB,CAA9C;AAAiD,IAAA,GAAG,EAAC,QAArD;AAA8D,IAAA,SAAS,EAAEyC,aAAa,CAACuD,QAAd,CAAuB,MAAvB,CAAzE;AAAyG,IAAA,KAAK,EAAC,MAA/G;AAAsH,IAAA,QAAQ,EAAGE,CAAD,IAAK;AAACJ,MAAAA,wBAAwB,CAACI,CAAC,CAACH,MAAF,CAASpB,KAAV,CAAxB;AAAyC,KAA/K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGE,MAAC,QAAD;AAAU,IAAA,UAAU,EAAE9B,cAAc,CAAC7C,MAAf,GAAwB,CAA9C;AAAiD,IAAA,GAAG,EAAC,QAArD;AAA8D,IAAA,SAAS,EAAEyC,aAAa,CAACuD,QAAd,CAAuB,SAAvB,CAAzE;AAA4G,IAAA,KAAK,EAAC,SAAlH;AAA4H,IAAA,QAAQ,EAAGE,CAAD,IAAK;AAACJ,MAAAA,wBAAwB,CAACI,CAAC,CAACH,MAAF,CAASpB,KAAV,CAAxB;AAAyC,KAArL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,EAIE,MAAC,QAAD;AAAU,IAAA,UAAU,EAAElC,aAAa,CAACzC,MAAd,GAAuB,CAA7C;AAAgD,IAAA,GAAG,EAAC,QAApD;AAA6D,IAAA,SAAS,EAAE6C,cAAc,CAACmD,QAAf,CAAwB,WAAxB,CAAxE;AAA8G,IAAA,KAAK,EAAC,WAApH;AAAgI,IAAA,QAAQ,EAAGE,CAAD,IAAK;AAACD,MAAAA,yBAAyB,CAACC,CAAC,CAACH,MAAF,CAASpB,KAAV,CAAzB;AAA0C,KAA1L;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,EAKE,MAAC,QAAD;AAAU,IAAA,UAAU,EAAElC,aAAa,CAACzC,MAAd,GAAuB,CAA7C;AAAgD,IAAA,GAAG,EAAC,QAApD;AAA6D,IAAA,SAAS,EAAE6C,cAAc,CAACmD,QAAf,CAAwB,kBAAxB,CAAxE;AAAqH,IAAA,KAAK,EAAC,kBAA3H;AAA8I,IAAA,QAAQ,EAAGE,CAAD,IAAK;AAACD,MAAAA,yBAAyB,CAACC,CAAC,CAACH,MAAF,CAASpB,KAAV,CAAzB;AAA0C,KAAxM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBALF,EAME,MAAC,QAAD;AAAU,IAAA,SAAS,EAAE1E,WAAW,IAAI,IAApC;AAA0C,IAAA,GAAG,EAAC,QAA9C;AAAuD,IAAA,KAAK,EAAC,aAA7D;AAA2E,IAAA,QAAQ,EAAGiG,CAAD,IAAK;AAAChG,MAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AAA6B,KAAxH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,EAOE,MAAC,QAAD;AAAU,IAAA,SAAS,EAAEE,YAAY,IAAI,IAArC;AAA2C,IAAA,GAAG,EAAC,QAA/C;AAAwD,IAAA,KAAK,EAAC,cAA9D;AAA6E,IAAA,QAAQ,EAAG+F,CAAD,IAAK;AAAC9F,MAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AAA+B,KAA5H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF,CADF,CAPF,EAmBGsC,aAAa,CAAC0D,GAAd,CAAkB,CAACC,KAAD,EAAQC,KAAR,KAAgB;AACjC,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOA,KAAK,IAAI,CAAT,GAAa,IAAb,GAAqBzE,cAAc,IAAI,IAAlB,GAAwB,IAAxB,GAA8B,KAA1D,OAAmEwE,KAAK,IAAI,MAAT,GAAkB,iBAAlB,GAAqCA,KAAK,IAAE,MAAP,GAAgB,uCAAhB,GAAyD,gBAAjK,CADF,EAEGA,KAAK,IAAI,MAAT,GACC;AACA,UAAC,WAAD;AACE,MAAA,QAAQ,EAAGF,CAAD,IAAYzF,gBAAgB,CAACyF,CAAC,CAACvB,KAAH,CADxC;AAEE,MAAA,YAAY,EAAErD,MAAM,CAACqB,MAAP,CAAc2D,KAAK,IAAE;AAAC,eAAOA,KAAK,CAAC3B,KAAN,IAAenE,aAAtB;AAAoC,OAA1D,EAA4D,CAA5D,CAFhB;AAGE,MAAA,UAAU,EAAE;AAAE+F,QAAAA,MAAM,EAAEtD;AAAV,OAHd;AAIE,MAAA,eAAe,EAAC,eAJlB;AAKE,MAAA,YAAY,EAAEhF,YAAY,CAAC;AAAEuI,QAAAA,aAAa,EAAE;AAAjB,OAAD,CAL5B;AAME,MAAA,OAAO,EAAElF,MANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,GAUG8E,KAAK,IAAI,MAAT,GACF,MAAC,WAAD;AACE,MAAA,QAAQ,EAAGF,CAAD,IAAYrF,WAAW,CAACqF,CAAC,CAACvB,KAAH,CADnC;AAEE,MAAA,YAAY,EAAEkB,WAAW,CAAClD,MAAZ,CAAmB2D,KAAK,IAAE;AAAC,eAAOA,KAAK,CAAC3B,KAAN,IAAe/D,QAAtB;AAA+B,OAA1D,EAA4D,CAA5D,CAFhB;AAGE,MAAA,UAAU,EAAE;AAAE2F,QAAAA,MAAM,EAAEtD;AAAV,OAHd;AAIE,MAAA,eAAe,EAAC,eAJlB;AAKE,MAAA,YAAY,EAAEhF,YAAY,CAAC;AAAEuI,QAAAA,aAAa,EAAE;AAAjB,OAAD,CAL5B;AAME,MAAA,OAAO,EAAEX,WANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADE,CASF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BE,MA2BAO,KAAK,IAAI,SAAT,GACF,MAAC,WAAD;AACE,MAAA,QAAQ,EAAGF,CAAD,IAAYjF,cAAc,CAACiF,CAAC,CAACvB,KAAH,CADtC;AAEE,MAAA,YAAY,EAAEzD,QAAQ,CAACyB,MAAT,CAAgB2D,KAAK,IAAE;AAAC,eAAOA,KAAK,CAAC3B,KAAN,IAAe3D,WAAtB;AAAkC,OAA1D,EAA4D,CAA5D,CAFhB;AAGE,MAAA,UAAU,EAAE;AAAEuF,QAAAA,MAAM,EAAEtD;AAAV,OAHd;AAIE,MAAA,eAAe,EAAC,eAJlB;AAKE,MAAA,YAAY,EAAEhF,YAAY,CAAC;AAAEuI,QAAAA,aAAa,EAAE;AAAjB,OAAD,CAL5B;AAME,MAAA,OAAO,EAAEtF,QANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADE,CASF;AACA;AACA;AACA;AACA;AAbE,MAcA,IArDN,CADF;AAyDD,GA1DA,CAnBH,EA8EG2B,cAAc,CAACsD,GAAf,CAAmB,CAACC,KAAD,EAAQC,KAAR,KAAgB;AAClC,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOA,KAAK,IAAI,CAAT,GAAa,IAAb,GAAqBzE,cAAc,IAAI,IAAlB,GAAwB,IAAxB,GAA8B,KAA1D,OAAmEwE,KAAK,IAAI,WAAT,GAAuB,mBAAvB,GAA4CA,KAAK,IAAE,kBAAP,GAA4B,0BAA5B,GAAwD,IAAvK,CADF,EAEGA,KAAK,IAAI,WAAT,GACC,MAAC,KAAD;AAAO,MAAA,KAAK,EAAEnE,aAAd;AAA6B,MAAA,QAAQ,EAAGiE,CAAD,IAAOhE,gBAAgB,CAACgE,CAAC,CAACH,MAAF,CAASpB,KAAV,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAEGyB,KAAK,IAAG,kBAAR,GACF,MAAC,KAAD;AAAO,MAAA,KAAK,EAAE/D,oBAAd;AAAoC,MAAA,QAAQ,EAAG6D,CAAD,IAAO5D,uBAAuB,CAAC4D,CAAC,CAACH,MAAF,CAASpB,KAAV,CAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADE,GAEA,IANN,CADF;AASE,GAVH,CA9EH,EAyFI,MAAC,MAAD;AACI,IAAA,CAAC,EAAE,CADP;AAEI,IAAA,UAAU,EAAElC,aAAa,CAACzC,MAAd,GAAuB,CAAvB,IAA4B6C,cAAc,CAAC7C,MAAf,GAAwB,CAFpE;AAGI,IAAA,OAAO,EAAE,MAAM;AACbL,MAAAA,SAAS,CAAC,CAAD,CAAT;AACAd,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAR;AACAH,MAAAA,SAAS,CAAC,EAAD,CAAT;AACAkB,MAAAA,IAAI,CAAC,IAAD,CAAJ;AACA,UAAI4G,GAAG,GAAGC,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,IAA8B,GAAxC;AACA/D,MAAAA,cAAc,CAAC2B,OAAf,CAAuB5B,GAAG,IAAI;AAC5B,YAAIA,GAAG,IAAI,kBAAX,EAA+B;AAC7B6D,UAAAA,GAAG,GAAGA,GAAG,GAAG7D,GAAN,GAAY,GAAZ,GAAkBP,oBAAlB,GAAyC,GAA/C;AACD;;AACD,YAAIO,GAAG,IAAI,WAAX,EAAwB;AACtB6D,UAAAA,GAAG,GAAGA,GAAG,GAAG7D,GAAN,GAAY,GAAZ,GAAkBX,aAAlB,GAAkC,GAAxC;AACD;AACF,OAPD;AAQAQ,MAAAA,aAAa,CAAC+B,OAAd,CAAsB5B,GAAG,IAAI;AAC3ByC,QAAAA,OAAO,CAACC,GAAR,CAAY1C,GAAZ;;AACA,YAAIA,GAAG,IAAI,MAAX,EAAmB;AACjB6D,UAAAA,GAAG,GAAGA,GAAG,GAAG7D,GAAN,GAAY,GAAZ,GAAkBpC,aAAlB,GAAkC,GAAxC;AACD;;AACD,YAAIoC,GAAG,IAAI,MAAX,EAAmB;AACjB6D,UAAAA,GAAG,GAAGA,GAAG,GAAG7D,GAAN,GAAY,GAAZ,GAAkBhC,QAAlB,GAA6B,GAAnC;AACD;;AACD,YAAIgC,GAAG,IAAI,SAAX,EAAsB;AACpB6D,UAAAA,GAAG,GAAGA,GAAG,GAAG7D,GAAN,GAAY,GAAZ,GAAkB5B,WAAlB,GAAgC,GAAtC;AACD;AACF,OAXD;;AAYA,UAAIY,cAAJ,EAAoB;AAClB6E,QAAAA,GAAG,GAAGA,GAAG,GAAG,aAAN,GAAsB7E,cAAtB,GAAuC,GAA7C;AACD,OA5BY,CA6Bb;;;AACAyD,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBmB,GAAtB;AACAI,MAAAA,MAAM,CAACC,OAAP,CAAeC,SAAf,CAAyB,EAAzB,EAA6B,OAA7B,EAAsCN,GAAtC;AACD,KAnCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzFJ,CAFF,EAmIG7G,CAAC,GACA,MAAC,cAAD;AACE,IAAA,SAAS,EAAC,iBADZ;AAEE,IAAA,gBAAgB,EAAC,mBAFnB,CAGE;AAHF;AAIE,IAAA,UAAU,EAAElB,MAAM,CAACsB,MAJrB,CAI6B;AAJ7B;AAKE,IAAA,IAAI,EAAEwF,SALR;AAME,IAAA,OAAO,EAAEhG,OANX;AAOE,IAAA,MAAM,EAAE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPV;AAQE,IAAA,UAAU,EACR;AAAG,MAAA,KAAK,EAAE;AAAEwH,QAAAA,SAAS,EAAE;AAAb,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,CATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcE,MAAC,IAAD;AAAM,IAAA,CAAC,EAAC,MAAR;AAAe,IAAA,OAAO,EAAC,QAAvB;AAAgC,IAAA,QAAQ,EAAC,MAAzC;AAAgD,IAAA,EAAE,EAAE,EAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGtI,MAAM,CAACsB,MAAP,GACCtB,MAAM,CAACyH,GAAP,CAAW,CAACc,KAAD,EAAQZ,KAAR,KAAkB;AAC3B,QAAIa,MAAM,GAAGR,QAAQ,CAACS,QAAT,CAAkBP,KAAlB,CAAwB,GAAxB,CAAb;AACAM,IAAAA,MAAM,CAACE,GAAP;AACA,QAAIC,GAAG,GAAGX,QAAQ,CAACY,MAAT,GAAkBJ,MAAM,CAACK,IAAP,CAAY,GAAZ,CAAlB,GAAqC,UAArC,GAAkDN,KAAK,CAACO,OAAlE;AACA,UAAMC,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE,GADa;AAEnBC,MAAAA,IAAI,EAAE,OAFa;AAGnBC,MAAAA,IAAI,EAAE,OAHa;AAInBC,MAAAA,WAAW,EAAE,KAJM;AAKnB;AACAC,MAAAA,EAAE,EAAE,GANe;AAOnBC,MAAAA,EAAE,EAAE,GAPe;AAQnBC,MAAAA,OAAO,EAAE,IARU;AASnBC,MAAAA,QAAQ,EAAE,QATS;AAUnBC,MAAAA,WAAW,EAAEjB,KAAK,CAACkB,MAAN,IAAgB,SAAhB,GAA4B,kBAA5B,GAAiD,EAV3C;AAWnBC,MAAAA,MAAM,EAAE;AAXW,KAArB;;AAaA,UAAMC,QAAQ,GAAG,YAAY;AAC3BrJ,MAAAA,aAAa,CAAC,IAAD,CAAb;AACA0H,MAAAA,QAAQ,CAACC,IAAT,GAAgBU,GAAhB;AACD,KAHD;;AAIA,QAAIpH,WAAW,IAAIgH,KAAK,CAACkB,MAAN,IAAgB,SAA/B,IAA4ChI,YAAY,IAAI,CAAC8G,KAAK,CAACqB,IAAvE,EAA6E;AAC3E,aAAO,IAAP;AACD,KAFD,MAEO;AACH,aACE,MAAC,IAAD;AAAM,QAAA,IAAI,EAAEjB,GAAZ;AAAiB,QAAA,SAAS,EAAC,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,GAAD;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,GAAG,EAAEhB;AAAjC,SAA4CoB,YAA5C;AAA0D,QAAA,OAAO,EAAEY,QAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACE,MAAC,IAAD;AAAM,QAAA,UAAU,EAAC,UAAjB;AAA4B,QAAA,SAAS,EAAC,QAAtC;AAA+C,QAAA,EAAE,EAAE,CAAnD;AAAsD,QAAA,EAAE,EAAE,CAA1D;AAA6D,QAAA,WAAW,EAAE,IAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGpB,KAAK,CAAC1G,IADT,EAEG,CAAC0G,KAAK,CAACsB,OAAP,IAAkBtB,KAAK,CAACuB,UAAN,GAAmB,CAArC,GAAyC,SAASvB,KAAK,CAACuB,UAAxD,GAAqE,IAFxE,CADF,EAKE,MAAC,KAAD;AAAO,QAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,KAAD;AAAO,QAAA,SAAS,EAAC,gCAAjB;AAAkD,QAAA,GAAG,EAAEvB,KAAK,CAACwB,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CALF,EAQE,MAAC,GAAD;AAAK,QAAA,CAAC,EAAC,MAAP;AAAc,QAAA,UAAU,EAAC,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,EAYE,MAAC,KAAD;AAAO,QAAA,KAAK,EAAC,QAAb;AAAsB,QAAA,EAAE,EAAE,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGxB,KAAK,CAACkB,MAAN,IAAgB,SAAhB,GAA4B,MAAC,IAAD;AAAM,QAAA,KAAK,EAAC,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA5B,GAAqE,IADxE,EAEE,MAAC,IAAD;AAAM,QAAA,QAAQ,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAyBlB,KAAK,CAACO,OAA/B,CAFF,CAZF,CADF,CADF;AAqBH;AACF,GA9CD,CADD,GAkDC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACqC,GADrC,EAEE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,SAAZ;AAAsB,IAAA,IAAI,EAAC,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF,CAnDJ,CAdF,CADA,GA4EE,IA/MN,CADF;AAmND","sourcesContent":["// import { Box, Flex, Text, Link, Image, Stack, Spinner, useColorMode } from '@chakra-ui/core'\nimport { Box, Flex, Text, Link, Image, Stack, Button, FormControl, FormLabel, Checkbox, CheckboxGroup, Radio, RadioGroup, Input, FormHelperText, useColorMode } from '@chakra-ui/core'\nimport {HStack, VStack } from '@chakra-ui/react'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { Component, useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Embed from './Embed'\n// import Select from \"react-dropdown-select\";\nimport PropTypes from 'prop-types';\nimport ReactSelect, { components, createFilter } from 'react-select';\n\nexport default function Find() {\n  const { query } = useRouter()\n  const [pagePosition, setPagePosition] = useState(Number(query.start) || 0)\n  const { account, chainId } = useWeb3React()\n  const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: true })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [address, setAddress] = useState(query.address)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const { colorMode } = useColorMode()\n  const [shouldFetchData, setShouldFetchData] = useState(false)\n  const [hasMore, setHasMore] = useState(true)\n  const [offset, setOffset] = useState(0)\n  const [q, setQ] = useState(query && Object.keys(query).length > 0)\n  const [hideClaimed, setHideClaimed] = useState(false)\n  const [hideUnminted, setHideUnminted] = useState(false)\n\n  const [assetName, setAssetName] = useState(query.name)\n  const [tempAssetName, setTempAssetName] = useState(assetName || '')\n\n  const [coin, setCoin] = useState(query.coin)\n  const [tempCoin, setTempCoin] = useState(coin || '')\n\n  const [project, setProject] = useState(query.project)\n  const [tempProject, setTempProject] = useState(project || '')\n\n  const [projects, setProjects] = useState([])\n  const [loadedProjects, setLoadedProjects] = useState(false)\n\n  const [assets, setAssets] = useState([])\n  const [loadedAssets, setLoadedAssets] = useState(false)\n\n  const [searchType, setSearchType] = useState(query.searchType || 'filter')\n  const [tempSearchType, setTempSearchType] = useState(searchType.toString())\n\n  const [vaultName, setVaultName] = useState(query.vaultName)\n  const [tempVaultName, setTempVaultName] = useState(vaultName || '')\n\n  const [vaultDescription, setVaultDescription] = useState(query.vaultDescription)\n  const [tempVaultDescription, setTempVaultDescription] = useState(vaultDescription)\n\n  const [network, setNetwork] = useState(query.network || null)\n  \n  const [balanceChecks, setBalanceChecks] = useState(Object.keys(query).filter(key=>{return key !== \"vaultName\" && key !== \"vaultDescription\" && key !== \"searchType\"}))\n  const [metadataChecks, setMetadataChecks] = useState(Object.keys(query).filter(key=>{return key !== \"name\" && key !== \"coin\" && key !== \"project\" && key !== \"searchType\"}))\n\n  const [selectedItems, setSelectedItems] = useState<Item[]>([]);\n\n  const CustomOption = ({ children, ...props }) => {\n    // eslint-disable-next-line no-unused-vars\n    const { onMouseMove, onMouseOver, ...rest } = props.innerProps;\n    const newProps: any = { ...props, innerProps: rest };\n    return (\n      <components.Option \n      {...newProps}\n      className=\"custom-option\"\n      >\n        {children}\n      </components.Option>\n    );\n  };\n  \n  CustomOption.propTypes = {\n    innerProps: PropTypes.object.isRequired,\n    children: PropTypes.node.isRequired\n  };\n\n  interface Item {\n    label: string;\n    value: string;\n  }\n\n  const PAGE_SIZE = 20\n\n  const getProjects = async () => { \n    try {\n      const response = await fetch(EMBLEM_API + '/search/projects', {\n        method: 'GET',\n        headers: {\n          service: 'evmetadata'\n        }\n      })\n      let jsonData = await response.json()\n      let formatted = []\n      jsonData.sort().forEach(item=>{\n        formatted.push({\n          value: item,\n          label: item\n        })\n      })\n      setProjects(formatted)\n    } catch (error) {}\n  }\n\n  const getAssets = async () => { \n    try {\n      const response = await fetch(EMBLEM_API + '/search/assets', {\n        method: 'GET',\n        headers: {\n          service: 'evmetadata'\n        }\n      })\n      let jsonData = await response.json()\n      let formatted = []\n      jsonData.sort().forEach(item=>{\n        formatted.push({\n          value: item,\n          label: item\n        })\n      })\n      setAssets(formatted)\n      // console.log(formatted)\n    } catch (error) {}\n  }\n\n  const getVaults = async () => {    \n    let body: any = {}\n    if (metadataChecks.length > 0) {\n      body.metadata = {}\n      metadataChecks.forEach(key => {\n        if (key == \"vaultDescription\") {\n          body.metadata[\"description\"] = tempVaultDescription\n        }\n        if (key == \"vaultName\") {\n          body.metadata[\"name\"] = tempVaultName\n        }\n      })\n      \n    }\n    if (balanceChecks.length > 0) {\n      body.balance = {}\n      balanceChecks.forEach(key => {\n        if (key == \"name\") {\n          body.balance[\"name\"] = tempAssetName\n        }\n        if (key == \"coin\") {\n          body.balance[\"coin\"] = tempCoin\n        }\n        if (key == \"project\") {\n          body.balance[\"project\"] = tempProject\n        }\n      })\n    }\n    try {\n      const response = await fetch(EMBLEM_API + '/find/'+tempSearchType+'?start='+offset+'&size='+PAGE_SIZE, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify(body)\n      })\n      let jsonData = await response.json()\n      console.log('------ vaults', jsonData)\n      jsonData.length == 0 || jsonData.length < PAGE_SIZE ? setHasMore(false) : setHasMore(true)\n      setVaults(vaults.concat(jsonData))\n      setState({ loaded: true })\n      setLoadingApi(false)\n    } catch (error) {}\n  }\n\n  const fetchData = async() =>{\n    console.log(offset, PAGE_SIZE, offset+PAGE_SIZE)\n    setOffset(offset+PAGE_SIZE)\n    setShouldFetchData(true)\n  }  \n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (q && account && acct != account) {\n      setAcct(account)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (q && chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    // console.log('here', chainId, chain, account, state)\n    if (q && !account && !state.loaded) {      \n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {    \n    if (shouldFetchData) {\n      console.log('here 1')\n      setShouldFetchData(false)\n      setLoadingApi(true)\n      getVaults()\n    } else {\n      console.log('no fetch')\n    }\n  }, [shouldFetchData])\n\n  useEffect(() => {\n    if (q && vaults.length == 0 && !loadingApi) {\n      console.log('here 2')\n      setShouldFetchData(true)\n      // getVaults()\n    } else {\n      console.log('no fetch', q, vaults)\n    }\n  }, [q, vaults])\n\n  useEffect(() => {\n    if (projects.length == 0 && !loadedProjects) {      \n      setLoadedProjects(true)\n      getProjects()\n    }\n  })\n\n  useEffect(() => {\n    if (assets.length == 0 && !loadedAssets) {      \n      setLoadedAssets(true)\n      getAssets()\n    }\n  })\n\n  let blockchains = [\n    {value: \"POLYGON\", label: \"Polygon (Matic)\"},\n    {value: \"XCP\", label: \"Counterparty\"},\n    {value: \"BTC\", label: \"Bitcoin\"},\n    {value: \"BCH\", label: \"Bitcoin Cash\"},\n    {value: \"DGB\", label: \"Digibyte\"},\n    {value: \"DOGE\", label: \"Dogecoin\"},\n    {value: \"ETH\", label: \"Ethereum\"},\n    {value: \"FTM\", label: \"Fantom\"},\n    {value: \"LTC\", label: \"Litecoin\"},\n    {value: \"NMC\", label: \"Namecoin\"},\n    {value: \"OMNI\", label: \"Omni\"},\n    {value: \"xDai\", label: \"xDai\"},\n    {value: \"XDP\", label: \"Doge Party\"},\n    {value: \"XMP\", label: \"Mona Party\"},\n    {value: \"XTZ\", label: \"Tezos\"}\n  ]\n\n    //   <option key=\"4\" value=\"BCH\">Bitcoin Cash</option>\n    //   <option key=\"5\" value=\"DGB\">Digibyte</option>\n    //   <option key=\"6\" value=\"DOGE\">Dogecoin</option>\n    //   <option key=\"7\" value=\"ETH\">Ethereum</option>\n    //   <option key=\"8\" value=\"FTM\">Fantom</option>\n    //   <option key=\"9\" value=\"LTC\">Litecoin</option>\n    //   <option key=\"10\" value=\"NMC\">Namecoin</option>\n    //   <option key=\"12\" value=\"xDai\">xDai</option>\n    //   <option key=\"13\" value=\"OMNI\">Omni</option>\n    //   <option key=\"14\" value=\"XDP\">Doge Party</option>\n    //   <option key=\"15\" value=\"XMP\">Mona Party</option>\n    //   <option key=\"16\" value=\"XTZ\">Tezos</option>\n\n  function addOrRemoveBalanceFilter(target) {\n    if (balanceChecks.includes(target)) {\n      setBalanceChecks(balanceChecks.filter(item => item !== target))\n    } else {\n      setBalanceChecks(balanceChecks.concat(target))\n    }\n    console.log('balance checks',balanceChecks)\n  }\n\n  function addOrRemoveMetadataFilter(target) {\n    if (metadataChecks.includes(target)) {\n      setMetadataChecks(metadataChecks.filter(item => item !== target))\n    } else {\n      setMetadataChecks(metadataChecks.concat(target))\n    }\n    console.log('metadata checks',metadataChecks)\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n      <VStack width=\"100%\" align=\"center\" justifyContent=\"center\" >\n        <RadioGroup onChange={(e)=>{ setTempSearchType(e.target.value) }} defaultValue={tempSearchType} value={tempSearchType}>\n          <Stack spacing={4} direction=\"row\">                \n            <Radio isChecked={tempSearchType == \"filter\"? true : false} value=\"filter\">Filter (AND)</Radio>\n            <Radio isChecked={tempSearchType === \"or\"? true : false} value=\"or\">Search (OR)</Radio>\n          </Stack>\n        </RadioGroup>\n        <CheckboxGroup>\n          <HStack>\n            <Checkbox isDisabled={metadataChecks.length > 0} key=\"check1\" isChecked={balanceChecks.includes('name')} value=\"name\" onChange={(e)=>{addOrRemoveBalanceFilter(e.target.value)}} >Asset Name</Checkbox>\n            <Checkbox isDisabled={metadataChecks.length > 0} key=\"check2\" isChecked={balanceChecks.includes('coin')} value=\"coin\" onChange={(e)=>{addOrRemoveBalanceFilter(e.target.value)}} >Blockchain</Checkbox>\n            <Checkbox isDisabled={metadataChecks.length > 0} key=\"check3\" isChecked={balanceChecks.includes('project')} value=\"project\" onChange={(e)=>{addOrRemoveBalanceFilter(e.target.value)}} >Project</Checkbox>\n            <Checkbox isDisabled={balanceChecks.length > 0} key=\"check4\" isChecked={metadataChecks.includes('vaultName')} value=\"vaultName\" onChange={(e)=>{addOrRemoveMetadataFilter(e.target.value)}} >Vault Name</Checkbox>\n            <Checkbox isDisabled={balanceChecks.length > 0} key=\"check5\" isChecked={metadataChecks.includes('vaultDescription')} value=\"vaultDescription\" onChange={(e)=>{addOrRemoveMetadataFilter(e.target.value)}} >Vault Description</Checkbox>\n            <Checkbox isChecked={hideClaimed == true} key=\"check6\" value=\"hideClaimed\" onChange={(e)=>{setHideClaimed(!hideClaimed)}} >Hide Claimed</Checkbox>\n            <Checkbox isChecked={hideUnminted == true} key=\"check6\" value=\"hideUnminted\" onChange={(e)=>{setHideUnminted(!hideUnminted)}} >Hide Un-Minted</Checkbox>\n\n          </HStack>\n        </CheckboxGroup>\n        {balanceChecks.map((check, index)=>{\n          return (\n            <VStack>\n              <Text>{index == 0 ? null : (tempSearchType == \"or\"? \"or\": \"and\")} {check == \"coin\" ? \"from Blockchain\": check==\"name\" ? \"within balances for the Asset Name of\": \"of the Project\"}</Text>\n              {check == \"name\" ? (\n                // <Input value={tempAssetName} onChange={(e) => setTempAssetName(e.target.value)} ></Input>\n                <ReactSelect\n                  onChange={(e: any) => setTempAssetName(e.value)}\n                  defaultValue={assets.filter(asset=>{return asset.value == tempAssetName})[0]}\n                  components={{ Option: CustomOption }}\n                  classNamePrefix=\"custom-select\"\n                  filterOption={createFilter({ ignoreAccents: false })}\n                  options={assets}\n                />\n              ) : check == \"coin\" ? (                \n                <ReactSelect\n                  onChange={(e: any) => setTempCoin(e.value)}\n                  defaultValue={blockchains.filter(asset=>{return asset.value == tempCoin})[0]}\n                  components={{ Option: CustomOption }}\n                  classNamePrefix=\"custom-select\"\n                  filterOption={createFilter({ ignoreAccents: false })}\n                  options={blockchains}\n                />\n                // <Select value={tempCoin} onChange={(e)=>{setTempCoin(e.target.value)}}>\n                //   <option key=\"1\" value=\"POLYGON\">Polygon (Matic)</option>\n                //   <option key=\"2\" value=\"XCP\">Counterparty</option>\n                //   <option key=\"3\" value=\"BTC\">Bitcoin</option>\n                //   <option key=\"4\" value=\"BCH\">Bitcoin Cash</option>\n                //   <option key=\"5\" value=\"DGB\">Digibyte</option>\n                //   <option key=\"6\" value=\"DOGE\">Dogecoin</option>\n                //   <option key=\"7\" value=\"ETH\">Ethereum</option>\n                //   <option key=\"8\" value=\"FTM\">Fantom</option>\n                //   <option key=\"9\" value=\"LTC\">Litecoin</option>\n                //   <option key=\"10\" value=\"NMC\">Namecoin</option>\n                //   <option key=\"11\" value=\"OMNI\">Omni</option>\n                //   <option key=\"12\" value=\"xDai\">xDai</option>\n                //   <option key=\"13\" value=\"OMNI\">Omni</option>\n                //   <option key=\"14\" value=\"XDP\">Doge Party</option>\n                //   <option key=\"15\" value=\"XMP\">Mona Party</option>\n                //   <option key=\"16\" value=\"XTZ\">Tezos</option>\n                // </Select>\n              ) : check == \"project\" ? (\n                <ReactSelect\n                  onChange={(e: any) => setTempProject(e.value)}\n                  defaultValue={projects.filter(asset=>{return asset.value == tempProject})[0]}\n                  components={{ Option: CustomOption }}\n                  classNamePrefix=\"custom-select\"\n                  filterOption={createFilter({ ignoreAccents: false })}\n                  options={projects}\n                />\n                // <Select value={tempProject} onChange={(e)=>{setTempProject(e.target.value)}}>\n                //   {projects.map((project, index)=>{\n                //     return (<option key={\"project-\"+index} value={project}>{project}</option>)\n                //   })}\n                // </Select>\n              ) : null}\n            </VStack>\n          )\n        })}\n        {metadataChecks.map((check, index)=>{\n          return (\n            <VStack>\n              <Text>{index == 0 ? null : (tempSearchType == \"or\"? \"or\": \"and\")} {check == \"vaultName\" ? \"within vault name\": check==\"vaultDescription\" ? \"within vault description\": null}</Text>\n              {check == \"vaultName\" ? (\n                <Input value={tempVaultName} onChange={(e) => setTempVaultName(e.target.value)}></Input>\n              ) : check== \"vaultDescription\" ? (\n                <Input value={tempVaultDescription} onChange={(e) => setTempVaultDescription(e.target.value)}></Input>\n              ) : null}              \n            </VStack>\n          )})}\n          <Button\n              m={2}\n              isDisabled={balanceChecks.length < 1 && metadataChecks.length < 1}\n              onClick={() => {\n                setOffset(0)\n                setState({ loaded: false })\n                setVaults([])                \n                setQ(true)\n                let loc = location.href.split('?')[0] + '?'\n                metadataChecks.forEach(key => {\n                  if (key == \"vaultDescription\") {\n                    loc = loc + key + '=' + tempVaultDescription + \"&\"\n                  }\n                  if (key == \"vaultName\") {\n                    loc = loc + key + '=' + tempVaultName + \"&\"\n                  }\n                })\n                balanceChecks.forEach(key => {\n                  console.log(key)\n                  if (key == \"name\") {\n                    loc = loc + key + '=' + tempAssetName + \"&\"\n                  }\n                  if (key == \"coin\") {\n                    loc = loc + key + '=' + tempCoin + \"&\"\n                  }\n                  if (key == \"project\") {\n                    loc = loc + key + '=' + tempProject + \"&\"\n                  }\n                })\n                if (tempSearchType) {\n                  loc = loc + \"searchType=\" + tempSearchType + \"&\"\n                }\n                // let loc = location.href.split('?')[0]+\"?q=\"+temp_q +  \"&network=\" + network\n                console.log(\"SEARCH\", loc)\n                window.history.pushState('', 'Title', loc);\n              }}\n            >Search\n          </Button>\n      </VStack>\n            \n      {q? (\n        <InfiniteScroll\n          className=\"infinite-scroll\"\n          scrollableTarget=\"shannon-container\"\n          // height={200}\n          dataLength={vaults.length} //This is important field to render the next data\n          next={fetchData}\n          hasMore={hasMore}\n          loader={<Refreshing />}\n          endMessage={\n            <p style={{ textAlign: 'center' }}>\n              <b>Yay! You have seen it all</b> \n            </p>\n          }\n        >\n          <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\" mt={10}>        \n            {vaults.length ? (\n              vaults.map((vault, index) => {\n                let pieces = location.pathname.split('/')\n                pieces.pop()\n                let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId\n                const flexSettings = {\n                  flex: '1',\n                  minW: '200px',\n                  maxW: '200px',\n                  borderWidth: '1px',\n                  // color: 'white',\n                  mx: '6',\n                  mb: '6',\n                  rounded: 'lg',\n                  overflow: 'hidden',\n                  borderColor: vault.status == 'claimed' ? 'green !important' : '',\n                  cursor: 'pointer',\n                }\n                const redirect = function () {\n                  setLoadingApi(true)\n                  location.href = url\n                }\n                if (hideClaimed && vault.status == 'claimed' || hideUnminted && !vault.live) {\n                  return null\n                } else {\n                    return (\n                      <Link href={url} className=\"vaultLink\">\n                        <Box className=\"NFT newest\" key={index} {...flexSettings} onClick={redirect}>\n                          <Text fontWeight=\"semibold\" textAlign=\"center\" mt={2} pl={2} isTruncated={true}>\n                            {vault.name}\n                            {!vault.private && vault.totalValue > 0 ? ': ~$' + vault.totalValue : null}\n                          </Text>\n                          <Stack align=\"center\">\n                            <Embed className=\"d-block w-100 NFT-newest-image\" url={vault.image}/>\n                          </Stack>\n                          <Box d=\"flex\" alignItems=\"baseline\">\n                            \n                          </Box>\n                          \n                          <Stack align=\"center\" mt={3}>\n                            {vault.status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                            <Text fontSize=\"xs\">Id: {vault.tokenId}</Text>\n                          </Stack>\n                        </Box>\n                      </Link>\n                    )\n                }\n              })\n              \n            ) : (\n              <Text>\n                YOU DON'T SEEM TO HAVE ANY VAULTS.{' '}\n                <Link color=\"#638cd8\" href=\"../create\">\n                  CREATE ONE HERE!\n                </Link>\n              </Text>\n            )}\n            \n          </Flex>\n        </InfiniteScroll>\n      ) : null}\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}