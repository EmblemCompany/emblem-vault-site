{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx\",\n    _s4 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Text, Stack, Button, useColorMode, Select, Input, Box, useDisclosure, Link } from '@chakra-ui/core';\n// import { Accordion } from 'react-bootstrap';\nimport copy from 'copy-to-clipboard';\nimport { COLOR, contractAddresses } from '../constants';\nimport { useWeb3React } from '@web3-react/core';\nimport { ExplorerTXType, formatEtherscanLink, NETWORK_SHORTNAMES } from '../utils'; // import { useContract } from '../hooks'\n\nimport { Contract } from '@ethersproject/contracts';\nimport { TransactionToast } from './TransactionToast';\nimport Embed from './Embed';\nexport var EMBLEM_API = 'https://api.emblemvault.io';\nexport default function OfferModal(_ref) {\n  _s4();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$(),\n      _s3 = $RefreshSig$(),\n      _this = this;\n\n  var isOpen = _ref.isOpen,\n      onClose = _ref.onClose,\n      tokenId = _ref.tokenId,\n      mine = _ref.mine;\n\n  //   const address = addrAddr\n  //   const coin = addrCoin\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useState = useState(false),\n      copied = _useState[0],\n      setCopied = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      loaded = _useState3[0],\n      setLoaded = _useState3[1];\n\n  var _useState4 = useState({\n    address: '',\n    balance: 0,\n    tokenType: '',\n    name: ''\n  }),\n      offeringToken = _useState4[0],\n      setOfferingToken = _useState4[1];\n\n  var _useState5 = useState([]),\n      tokenBalances = _useState5[0],\n      setTokenBalances = _useState5[1];\n\n  var _useState6 = useState(0),\n      offeringTokenBalance = _useState6[0],\n      setOfferingTokenBalance = _useState6[1];\n\n  var _useState7 = useState(''),\n      acct = _useState7[0],\n      setAcct = _useState7[1];\n\n  var _useState8 = useState(0),\n      decimals = _useState8[0],\n      setDecimals = _useState8[1];\n\n  var _useState9 = useState(0),\n      allowance = _useState9[0],\n      setAllowance = _useState9[1];\n\n  var _useState10 = useState(false),\n      approvedForAll = _useState10[0],\n      setApprovedForAll = _useState10[1];\n\n  var _useState11 = useState(0),\n      offerAmount = _useState11[0],\n      setOfferAmount = _useState11[1];\n\n  var _useState12 = useState(0),\n      offerTokenId = _useState12[0],\n      setOfferTokenId = _useState12[1];\n\n  var _useState13 = useState([]),\n      offers = _useState13[0],\n      setOffers = _useState13[1];\n\n  var _useState14 = useState([]),\n      myOffers = _useState14[0],\n      setMyOffers = _useState14[1];\n\n  var _useState15 = useState(null),\n      hash = _useState15[0],\n      setHash = _useState15[1];\n\n  var _useState16 = useState([]),\n      selectedNFTs = _useState16[0],\n      setSelectedNFTs = _useState16[1];\n\n  var _useState17 = useState(0),\n      makeOfferPrice = _useState17[0],\n      setMakeOfferPrice = _useState17[1];\n\n  var _useState18 = useState(false),\n      payToMakeOffer = _useState18[0],\n      setPayToMakeOffer = _useState18[1];\n\n  var _useState19 = useState(0),\n      acceptOfferPrice = _useState19[0],\n      setAcceptOfferPrice = _useState19[1];\n\n  var _useState20 = useState(false),\n      payToAcceptOffer = _useState20[0],\n      setPayToAcceptOffer = _useState20[1];\n\n  var _useState21 = useState(null),\n      paymentToken = _useState21[0],\n      setPaymentToken = _useState21[1];\n\n  var _useState22 = useState(0),\n      paymentDecimals = _useState22[0],\n      setPaymentDecimals = _useState22[1];\n\n  var _useDisclosure = useDisclosure(),\n      isDetailOpen = _useDisclosure.isOpen,\n      onDetailToggle = _useDisclosure.onToggle;\n\n  var _useState23 = useState(false),\n      takePercentageOfERC20 = _useState23[0],\n      setTakePercentageOfERC20 = _useState23[1];\n\n  var _useState24 = useState(0),\n      percentageOfERC20 = _useState24[0],\n      setPercentageOfERC20 = _useState24[1]; // const [offeringTokenId, setOfferingTokenId] = useState()\n\n\n  var getMetadata = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(uri, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // alert(0)\n              uri = uri.replace('http://104.154.252.216', 'https://api.emblemvault.io/s:evmetadata');\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch(uri, {\n                method: 'GET',\n                headers: {// redirect:'follow'\n                }\n              });\n\n            case 4:\n              responce = _context.sent;\n              _context.next = 7;\n              return responce.json();\n\n            case 7:\n              jsonData = _context.sent;\n              return _context.abrupt(\"return\", cb(jsonData));\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              return _context.abrupt(\"return\", cb(false));\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 11]]);\n    }));\n\n    return function getMetadata(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getErc20Contract = function getErc20Contract(address) {\n    _s();\n\n    console.log(\"contract\", address);\n    return useContract(address, contractAddresses.covalAbi, true);\n  };\n\n  _s(getErc20Contract, \"OieRxpBRupXKKSB/Daj7yBGbdgo=\", false, function () {\n    return [useContract];\n  });\n\n  var getVaultContract = function getVaultContract() {\n    _s2();\n\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  };\n\n  _s2(getVaultContract, \"OieRxpBRupXKKSB/Daj7yBGbdgo=\", false, function () {\n    return [useContract];\n  });\n\n  var getTradeContract = function getTradeContract() {\n    _s3();\n\n    return useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true);\n  };\n\n  _s3(getTradeContract, \"OieRxpBRupXKKSB/Daj7yBGbdgo=\", false, function () {\n    return [useContract];\n  });\n\n  var useContract = function useContract(address, ABI) {\n    var withSigner = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return new Contract(address, ABI, withSigner ? library.getSigner(account).connectUnchecked() : library);\n  };\n\n  useEffect(function () {\n    if (account && acct != account) {\n      setAcct(account);\n      setLoaded(false);\n    }\n  }, [account, acct]);\n  useEffect(function () {\n    if (copied) {\n      var timeout = setTimeout(function () {\n        setCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [copied]);\n  useEffect(function () {\n    if (!loaded && !loading) {\n      setLoading(true);\n      getBalances(account, /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(balances) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  setTokenBalances(balances);\n                  getOfferContractInfo();\n                  setLoaded(true);\n                  setLoading(false);\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n  });\n\n  var handleApprove = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(address) {\n      var _decimals,\n          contract,\n          _args3 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _decimals = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : decimals;\n              contract = getErc20Contract(address);\n              console.log('decimals', decimals);\n              _context3.next = 5;\n              return contract.approve(contractAddresses.nftrade[chainId], offeringTokenBalance * Math.pow(10, +_decimals)).then(function (_ref5) {\n                var hash = _ref5.hash;\n                setHash(hash);\n              });\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function handleApprove(_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var handleApproveForAll = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var address,\n          contract,\n          _args4 = arguments;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              address = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : null;\n              contract = getVaultContract(address);\n              _context4.next = 4;\n              return contract.setApprovalForAll(contractAddresses.nftrade[chainId], true).then(function (_ref7) {\n                var hash = _ref7.hash;\n                setHash(hash);\n              });\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function handleApproveForAll() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var getApprovedForAll = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var address,\n          contract,\n          approved,\n          _args5 = arguments;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              address = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : null;\n              contract = getVaultContract(address);\n              _context5.next = 4;\n              return contract.isApprovedForAll(account, contractAddresses.nftrade[chainId]);\n\n            case 4:\n              approved = _context5.sent;\n              // console.log('---approved', approved)\n              setApprovedForAll(approved);\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function getApprovedForAll() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var getNFTContractInfo = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(address) {\n      var contract, count, nftCollection, getSingleNFT, _getSingleNFT;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _getSingleNFT = function _getSingleNFT3() {\n                _getSingleNFT = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(index, cb) {\n                  var nftInfo;\n                  return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          _context6.next = 2;\n                          return contract.tokenOfOwnerByIndex(account, index);\n\n                        case 2:\n                          nftInfo = _context6.sent;\n                          nftCollection.push(nftInfo.toNumber());\n\n                          if (!(index + 1 >= count)) {\n                            _context6.next = 8;\n                            break;\n                          }\n\n                          return _context6.abrupt(\"return\", cb());\n\n                        case 8:\n                          return _context6.abrupt(\"return\", getSingleNFT(index + 1, cb));\n\n                        case 9:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, _callee6);\n                }));\n                return _getSingleNFT.apply(this, arguments);\n              };\n\n              getSingleNFT = function _getSingleNFT2(_x6, _x7) {\n                return _getSingleNFT.apply(this, arguments);\n              };\n\n              contract = getVaultContract(address);\n              _context7.next = 5;\n              return contract.balanceOf(account);\n\n            case 5:\n              count = _context7.sent;\n              // console.log('--------------- NFT Info', account, 'owns', count.toNumber())\n              nftCollection = [];\n              getSingleNFT(0, function () {\n                // console.log(\"GOT ALL NFTs\", nftCollection)\n                setSelectedNFTs(nftCollection);\n              });\n\n            case 8:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function getNFTContractInfo(_x5) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var makeOffer = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n              _context8.next = 3;\n              return contract.addOffer(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount * Math.pow(10, +decimals)).then(function (_ref11) {\n                var hash = _ref11.hash;\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function makeOffer() {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n\n  var withdrawOffer = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(index) {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n              _context9.next = 3;\n              return contract.withdrawOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(function (_ref13) {\n                var hash = _ref13.hash;\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function withdrawOffer(_x8) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  var rejectOffer = /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(index) {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n              _context10.next = 3;\n              return contract.rejectOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(function (_ref15) {\n                var hash = _ref15.hash;\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function rejectOffer(_x9) {\n      return _ref14.apply(this, arguments);\n    };\n  }();\n\n  var acceptOffer = /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(index) {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n              _context11.next = 3;\n              return contract.acceptOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(function (_ref17) {\n                var hash = _ref17.hash;\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    return function acceptOffer(_x10) {\n      return _ref16.apply(this, arguments);\n    };\n  }();\n\n  var getTokenContractInfo = /*#__PURE__*/function () {\n    var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(address) {\n      var contract, _dec;\n\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              contract = getErc20Contract(address); // console.log(contract)\n\n              _context12.next = 3;\n              return contract.decimals();\n\n            case 3:\n              _dec = _context12.sent;\n              setDecimals(_dec);\n              _context12.t0 = setAllowance;\n              _context12.next = 8;\n              return contract.allowance(account, contractAddresses.nftrade[chainId]).then(function (balance) {\n                return (balance * Math.pow(10, -_dec)).toString();\n              });\n\n            case 8:\n              _context12.t1 = _context12.sent;\n              (0, _context12.t0)(_context12.t1);\n              _context12.t2 = setOfferingTokenBalance;\n              _context12.next = 13;\n              return contract.balanceOf(account).then(function (balance) {\n                return (balance * Math.pow(10, -_dec)).toString();\n              });\n\n            case 13:\n              _context12.t3 = _context12.sent;\n              (0, _context12.t2)(_context12.t3);\n\n            case 15:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    return function getTokenContractInfo(_x11) {\n      return _ref18.apply(this, arguments);\n    };\n  }();\n\n  var getOfferContractInfo = /*#__PURE__*/function () {\n    var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n      var contract, _paymentToken, offerCount, _payToMakeOffer, _makeOfferPrice, _payToAcceptOffer, _acceptOfferPrice, tokenContract, _takePercentageOfERC20, _percentageOfERC20, getSingleOffer, _getSingleOffer;\n\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _getSingleOffer = function _getSingleOffer3() {\n                _getSingleOffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(index, offers, myOffers, cb) {\n                  var _offer, offer, _tokenContract, tokenName, tokenDecimals, tokenSymbol, nftContract, tokenMetadata, finished;\n\n                  return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n                    while (1) {\n                      switch (_context13.prev = _context13.next) {\n                        case 0:\n                          finished = function _finished() {\n                            if (index + 1 >= offerCount) {\n                              return cb(offers, myOffers);\n                            } else {\n                              return getSingleOffer(index + 1, offers, myOffers, cb);\n                            }\n                          };\n\n                          _context13.next = 3;\n                          return contract.getOffer(contractAddresses.emblemVault[chainId], tokenId, index);\n\n                        case 3:\n                          _offer = _context13.sent;\n                          console.log('-------', _offer);\n\n                          if (!(_offer.token !== \"0x0000000000000000000000000000000000000000\")) {\n                            _context13.next = 40;\n                            break;\n                          }\n\n                          offer = {\n                            tokenId: _offer.tokenId.toNumber(),\n                            _from: _offer._from,\n                            token: _offer.token,\n                            amount: _offer.amount\n                          };\n                          _tokenContract = getErc20Contract(offer.token);\n                          _context13.next = 10;\n                          return _tokenContract.name();\n\n                        case 10:\n                          tokenName = _context13.sent;\n                          console.log('----- name ----', tokenName);\n                          offer.name = tokenName;\n                          offer.index = index;\n                          offer.address = offer.token;\n                          console.log('----- offer tokenid ----', _offer.tokenId.toNumber());\n\n                          if (!(_offer.tokenId.toNumber() == 0)) {\n                            _context13.next = 31;\n                            break;\n                          }\n\n                          _context13.next = 19;\n                          return _tokenContract.decimals();\n\n                        case 19:\n                          tokenDecimals = _context13.sent;\n                          _context13.next = 22;\n                          return _tokenContract.symbol();\n\n                        case 22:\n                          tokenSymbol = _context13.sent;\n                          offer.symbol = tokenSymbol;\n                          offer.decimals = tokenDecimals;\n                          offer.amount = offer.amount.toNumber() * Math.pow(10, -tokenDecimals);\n                          offers.push(offer);\n\n                          if (offer._from == account) {\n                            myOffers.push(offer);\n                          }\n\n                          finished();\n                          _context13.next = 38;\n                          break;\n\n                        case 31:\n                          nftContract = getVaultContract(offer.token);\n                          _context13.next = 34;\n                          return nftContract.tokenURI(offer.tokenId);\n\n                        case 34:\n                          tokenMetadata = _context13.sent;\n                          tokenMetadata = tokenMetadata.replace('ipfs://', 'https://gateway.ipfs.io/');\n                          console.log('---------URI---------', tokenMetadata);\n                          getMetadata(tokenMetadata, function (metadata) {\n                            console.log('metadata', metadata);\n                            offer.metadata = metadata;\n                            offer.amount = _offer.amount.toNumber();\n                            offer.tokenId = _offer.tokenId.toNumber();\n                            offers.push(offer);\n\n                            if (offer._from == account) {\n                              myOffers.push(offer);\n                            }\n\n                            finished();\n                          });\n\n                        case 38:\n                          _context13.next = 42;\n                          break;\n\n                        case 40:\n                          console.log('----- wtf -----');\n                          finished();\n\n                        case 42:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }\n                  }, _callee13);\n                }));\n                return _getSingleOffer.apply(this, arguments);\n              };\n\n              getSingleOffer = function _getSingleOffer2(_x12, _x13, _x14, _x15) {\n                return _getSingleOffer.apply(this, arguments);\n              };\n\n              contract = getTradeContract();\n              _context14.next = 5;\n              return contract.paymentAddress();\n\n            case 5:\n              _paymentToken = _context14.sent;\n              setPaymentToken(_paymentToken);\n              _context14.next = 9;\n              return getTokenContractInfo(_paymentToken);\n\n            case 9:\n              _context14.next = 11;\n              return contract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId);\n\n            case 11:\n              offerCount = _context14.sent.toNumber();\n              _context14.next = 14;\n              return contract.payToMakeOffer();\n\n            case 14:\n              _payToMakeOffer = _context14.sent;\n              setPayToMakeOffer(_payToMakeOffer);\n              _context14.next = 18;\n              return contract.makeOfferPrice();\n\n            case 18:\n              _makeOfferPrice = _context14.sent.toNumber();\n              setMakeOfferPrice(_makeOfferPrice);\n              _context14.next = 22;\n              return contract.payToAcceptOffer();\n\n            case 22:\n              _payToAcceptOffer = _context14.sent;\n              setPayToAcceptOffer(_payToAcceptOffer);\n              _context14.next = 26;\n              return contract.acceptOfferPrice();\n\n            case 26:\n              _acceptOfferPrice = _context14.sent.toNumber();\n              setAcceptOfferPrice(_acceptOfferPrice);\n              tokenContract = getErc20Contract(_paymentToken);\n              _context14.next = 31;\n              return contract.takePercentageOfERC20();\n\n            case 31:\n              _takePercentageOfERC20 = _context14.sent;\n              setTakePercentageOfERC20(_takePercentageOfERC20);\n              _context14.next = 35;\n              return contract.percentageFee();\n\n            case 35:\n              _percentageOfERC20 = _context14.sent;\n              setPercentageOfERC20(_percentageOfERC20);\n              console.log('-----%', _takePercentageOfERC20, _percentageOfERC20);\n              _context14.t0 = console;\n              _context14.next = 41;\n              return tokenContract.decimals();\n\n            case 41:\n              _context14.t1 = _context14.sent;\n\n              _context14.t0.log.call(_context14.t0, 'dec', _context14.t1);\n\n              _context14.t2 = setPaymentDecimals;\n              _context14.next = 46;\n              return tokenContract.decimals();\n\n            case 46:\n              _context14.t3 = _context14.sent;\n              (0, _context14.t2)(_context14.t3);\n              console.log('_paymentToken', _paymentToken);\n              getApprovedForAll();\n              console.log('--------- payment ---------', _payToMakeOffer, _makeOfferPrice, _payToAcceptOffer, _acceptOfferPrice, _paymentToken, allowance);\n              console.log('------ offer count ------', offerCount); // let offers = []\n              // let myOffers = []\n\n              if (offerCount > 0) {\n                getSingleOffer(0, [], [], function (offers, myOffers) {\n                  setOffers(offers);\n                  setMyOffers(myOffers);\n                  console.log('offers', offers, myOffers);\n                });\n              }\n\n            case 53:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    return function getOfferContractInfo() {\n      return _ref19.apply(this, arguments);\n    };\n  }();\n\n  var getBalances = /*#__PURE__*/function () {\n    var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              if (!mine) {\n                _context15.next = 2;\n                break;\n              }\n\n              return _context15.abrupt(\"return\", cb([]));\n\n            case 2:\n              _context15.next = 4;\n              return fetch(EMBLEM_API + '/' + NETWORK_SHORTNAMES[chainId] + '/balance/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 4:\n              responce = _context15.sent;\n              _context15.next = 7;\n              return responce.json();\n\n            case 7:\n              jsonData = _context15.sent;\n              return _context15.abrupt(\"return\", cb(jsonData.values));\n\n            case 9:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15);\n    }));\n\n    return function getBalances(_x16, _x17) {\n      return _ref20.apply(this, arguments);\n    };\n  }();\n\n  function copyWithFlag(content) {\n    copy(content);\n    setCopied(true);\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    color: COLOR[colorMode],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 11\n    }\n  }, !mine ? 'Make' : null, \" Offer\", mine ? 's' : null, \" for: \", tokenId)), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 9\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 9\n    }\n  }, !mine ? __jsx(Stack, {\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 17\n    }\n  }, __jsx(Stack, {\n    mt: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 21\n    }\n  }, \"Choose your Offer Token\"), __jsx(Select, {\n    w: \"100%\",\n    value: offeringToken.address,\n    onChange: function onChange(e) {\n      if (e.target.value !== '0') {\n        var token = tokenBalances.filter(function (item) {\n          return item.address == e.target.value;\n        })[0];\n        setOfferingToken(token);\n        setOfferTokenId(0);\n        token.tokenType == \"ERC-20\" ? getTokenContractInfo(token.address) : getNFTContractInfo(token.address);\n        console.log(tokenBalances.filter(function (item) {\n          return item.address == e.target.value;\n        })[0]);\n        console.log(e.target.value);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 21\n    }\n  }, __jsx(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 25\n    }\n  }, \"Choose a Token\"), tokenBalances.map(function (coin, index) {\n    if (coin.tokenType !== 'native') return __jsx(\"option\", {\n      value: coin.address,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 29\n      }\n    }, coin.name);\n  })), offeringToken.balance > 0 && offeringToken.tokenType == \"ERC-20\" && allowance > 0 ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 29\n    }\n  }, \"Max: \", offeringTokenBalance), __jsx(Input, {\n    onChange: function onChange(e) {\n      return setOfferAmount(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 29\n    }\n  })) : null), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 21\n    }\n  }, offeringToken.tokenType == 'ERC-20' ? offeringTokenBalance > 0 && allowance == 0 ? __jsx(Button, {\n    onClick: function onClick() {\n      handleApprove(offeringToken.address);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 29\n    }\n  }, \"Approve offer of \", offeringToken.name) : offeringToken && offeringTokenBalance == 0 ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 29\n    }\n  }, \"Insufficient Balance\") : __jsx(Button, {\n    onClick: function onClick() {\n      makeOffer();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 29\n    }\n  }, \"Make Offer\") : selectedNFTs.length > 0 ? __jsx(Select, {\n    width: \"100%\",\n    onChange: function onChange(e) {\n      if (e.target.value !== '0') {\n        // console.log(\"Picked TokenID: \", e.target.value, offeringToken)\n        setOfferTokenId(Number(e.target.value));\n        getApprovedForAll(offeringToken.address);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 25\n    }\n  }, __jsx(\"option\", {\n    key: -1,\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 27\n    }\n  }, \"Select TokenId\"), selectedNFTs.map(function (tokenId, index) {\n    return __jsx(\"option\", {\n      key: index,\n      value: tokenId,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 29\n      }\n    }, tokenId);\n  })) : null, offeringToken.name && offeringToken.tokenType != \"ERC-20\" && !approvedForAll && offerTokenId != 0 ? __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      handleApproveForAll(offeringToken.address);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 23\n    }\n  }, \"Approve \", offeringToken.name) : offeringToken.name && offeringToken.tokenType != \"ERC-20\" && approvedForAll ? __jsx(Button, {\n    onClick: function onClick() {\n      makeOffer();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 23\n    }\n  }, \"Make Offer\") : null), payToMakeOffer ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 23\n    }\n  }, \" Cost: \", acceptOfferPrice * Math.pow(10, -paymentDecimals), \" $Coval to make offers\") : null, takePercentageOfERC20 && offeringToken.tokenType != \"ERC-20\" ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 82\n    }\n  }, \"Takes a %\") : null, __jsx(Stack, {\n    maxHeight: \"200px\",\n    overflow: \"scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 21\n    }\n  }, myOffers.length > 0 ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 25\n    }\n  }, \"My Offers\") : null, payToMakeOffer && offeringTokenBalance > 0 && allowance * Math.pow(10, +paymentDecimals) < makeOfferPrice ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: function onClick() {\n      handleApprove(paymentToken, paymentDecimals);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 31\n    }\n  }, \"Approve spending \")) : offeringToken && offeringTokenBalance < makeOfferPrice * Math.pow(10, -paymentDecimals) ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 31\n    }\n  }, \"Insufficient Balance\") : null, myOffers.map(function (offer, index) {\n    return __jsx(Box, {\n      borderRadius: \"0.25rem\",\n      borderWidth: 1,\n      p: 2,\n      mb: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 33\n      }\n    }, __jsx(Text, {\n      fontSize: \"bold\",\n      color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 37\n      }\n    }, offer.amount > 0 ? offer.amount : null, __jsx(Link, {\n      ml: 3,\n      color: colorMode == \"dark\" ? \"white\" : \"black\",\n      href: formatEtherscanLink(ExplorerTXType.Token, [chainId, offer.token]),\n      isExternal: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 39\n      }\n    }, offer.name), offer.amount < 1 ? '[' + offer.tokenId + ']' : null), __jsx(Button, {\n      onClick: function onClick() {\n        withdrawOffer(offer.index);\n      },\n      m: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 39\n      }\n    }, \"Withdraw Offer\"), offer.metadata ? __jsx(Box, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 43\n      }\n    }, __jsx(Embed, {\n      className: \"\",\n      url: offer.metadata.image.replace('ipfs://', 'https://gateway.ipfs.io/'),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 45\n      }\n    })) : null);\n  }))) : null, mine ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 17\n    }\n  }, !approvedForAll ? __jsx(Button, {\n    onClick: function onClick() {\n      handleApproveForAll();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 21\n    }\n  }, \"Allow accepting of Offers\") : null, __jsx(Stack, {\n    direction: \"column\",\n    maxHeight: \"200px\",\n    overflow: \"scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 19\n    }\n  }, payToAcceptOffer && offeringTokenBalance > 0 && allowance * Math.pow(10, +paymentDecimals) < acceptOfferPrice ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 31\n    }\n  }, \"Cost: \", acceptOfferPrice * Math.pow(10, -paymentDecimals), \" $Coval to accept offers\"), __jsx(Button, {\n    onClick: function onClick() {\n      handleApprove(paymentToken, paymentDecimals);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 31\n    }\n  }, \"Approve spending \")) : offeringToken && offeringTokenBalance < acceptOfferPrice * Math.pow(10, -paymentDecimals) ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 31\n    }\n  }, \"Insufficient Balance\") : null, offers.map(function (offer, index) {\n    return __jsx(Box, {\n      borderRadius: \"0.25rem\",\n      borderWidth: 1,\n      p: 2,\n      mb: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 33\n      }\n    }, __jsx(Text, {\n      fontSize: \"bold\",\n      color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 37\n      }\n    }, offer.amount > 0 ? offer.amount : null, __jsx(Link, {\n      ml: 3,\n      color: colorMode == \"dark\" ? \"white\" : \"black\",\n      href: formatEtherscanLink(ExplorerTXType.Token, [chainId, offer.token]),\n      isExternal: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 39\n      }\n    }, offer.name), offer.amount < 1 ? '[' + offer.tokenId + ']' : null), __jsx(Text, {\n      color: colorMode == \"dark\" ? \"#baaa94\" : \"gray\",\n      fontSize: \"xs\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 37\n      }\n    }, \"From:\", __jsx(Link, {\n      ml: 3,\n      color: colorMode == \"dark\" ? \"white\" : \"darkgray\",\n      href: formatEtherscanLink(ExplorerTXType.Account, [chainId, offer._from]),\n      isExternal: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 39\n      }\n    }, offer._from)), __jsx(Button, {\n      onClick: function onClick() {\n        rejectOffer(offer.index);\n      },\n      m: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 37\n      }\n    }, \"Reject Offer\"), approvedForAll ? __jsx(Button, {\n      onClick: function onClick() {\n        acceptOffer(offer.index);\n      },\n      m: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 43\n      }\n    }, \"Accept Offer\") : null, offer.metadata ? __jsx(Box, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 43\n      }\n    }, __jsx(Embed, {\n      className: \"\",\n      url: offer.metadata.image.replace('ipfs://', 'https://gateway.ipfs.io/'),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 45\n      }\n    })) : null);\n  }))) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      setHash(null);\n      setLoaded(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 11\n    }\n  }) : null), __jsx(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s4(OfferModal, \"oy9W2kXZxqcUSFlfBURworru1/g=\", false, function () {\n  return [useColorMode, useWeb3React, useDisclosure];\n});\n\n_c = OfferModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"OfferModal\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx"],"names":["React","useEffect","useState","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","Text","Stack","Button","useColorMode","Select","Input","Box","useDisclosure","Link","copy","COLOR","contractAddresses","useWeb3React","ExplorerTXType","formatEtherscanLink","NETWORK_SHORTNAMES","Contract","TransactionToast","Embed","EMBLEM_API","OfferModal","isOpen","onClose","tokenId","mine","colorMode","account","chainId","library","copied","setCopied","loading","setLoading","loaded","setLoaded","address","balance","tokenType","name","offeringToken","setOfferingToken","tokenBalances","setTokenBalances","offeringTokenBalance","setOfferingTokenBalance","acct","setAcct","decimals","setDecimals","allowance","setAllowance","approvedForAll","setApprovedForAll","offerAmount","setOfferAmount","offerTokenId","setOfferTokenId","offers","setOffers","myOffers","setMyOffers","hash","setHash","selectedNFTs","setSelectedNFTs","makeOfferPrice","setMakeOfferPrice","payToMakeOffer","setPayToMakeOffer","acceptOfferPrice","setAcceptOfferPrice","payToAcceptOffer","setPayToAcceptOffer","paymentToken","setPaymentToken","paymentDecimals","setPaymentDecimals","isDetailOpen","onDetailToggle","onToggle","takePercentageOfERC20","setTakePercentageOfERC20","percentageOfERC20","setPercentageOfERC20","getMetadata","uri","cb","replace","fetch","method","headers","responce","json","jsonData","getErc20Contract","console","log","useContract","covalAbi","getVaultContract","emblemVault","emblemAbi","getTradeContract","nftrade","nftradeAbi","ABI","withSigner","getSigner","connectUnchecked","timeout","setTimeout","clearTimeout","getBalances","balances","getOfferContractInfo","handleApprove","_decimals","contract","approve","Math","pow","then","handleApproveForAll","setApprovalForAll","getApprovedForAll","isApprovedForAll","approved","getNFTContractInfo","getSingleNFT","index","tokenOfOwnerByIndex","nftInfo","nftCollection","push","toNumber","count","balanceOf","makeOffer","addOffer","withdrawOffer","rejectOffer","acceptOffer","getTokenContractInfo","_dec","toString","getSingleOffer","finished","offerCount","getOffer","_offer","token","offer","_from","amount","tokenContract","tokenName","tokenDecimals","symbol","tokenSymbol","nftContract","tokenURI","tokenMetadata","metadata","paymentAddress","_paymentToken","getOfferCount","_payToMakeOffer","_makeOfferPrice","_payToAcceptOffer","_acceptOfferPrice","_takePercentageOfERC20","percentageFee","_percentageOfERC20","service","values","copyWithFlag","content","e","target","value","filter","item","map","coin","length","Number","Token","image","Account"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Text,\n  Stack,\n  Button,\n  useColorMode,\n  Select,\n  Input,\n  Image,\n  Box,\n  Collapse,\n  useDisclosure,\n  Link,\n  \n} from '@chakra-ui/core'\nimport {\n  // Accordion,\n  AccordionItem,\n  AccordionPanel,\n  AccordionIcon,\n  AccordionButton,\n} from \"@chakra-ui/react\"\n// import { Accordion } from 'react-bootstrap';\nimport copy from 'copy-to-clipboard'\nimport QRCode from 'qrcode.react'\nimport { COLOR, contractAddresses } from '../constants'\nimport { useWeb3React } from '@web3-react/core'\nimport { ExplorerTXType, formatEtherscanLink, NETWORK_SHORTNAMES } from '../utils'\n// import { useContract } from '../hooks'\nimport { useTokenBalance, useTokenAllowance, useETHBalance } from '../data'\nimport { Contract, ContractInterface } from '@ethersproject/contracts'\nimport { HStack } from '@chakra-ui/react'\nimport { TransactionToast } from './TransactionToast'\nimport { addTokenToWallet } from '../public/web3'\nimport Embed from './Embed'\nimport Accordion from 'react-bootstrap/esm/Accordion'\nimport { Card } from 'react-bootstrap'\nexport const EMBLEM_API = 'https://api.emblemvault.io'\nimport { EXPLORER_PREFIXES } from '../utils'\n\nexport default function OfferModal({\n  isOpen,\n  onClose,\n  tokenId,\n  mine,\n}: {\n  isOpen: boolean\n  onClose: () => void\n  tokenId\n  mine: boolean\n}): JSX.Element {\n//   const address = addrAddr\n//   const coin = addrCoin\n\n  const { colorMode } = useColorMode()\n  const { account, chainId, library } = useWeb3React()\n  const [copied, setCopied] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loaded, setLoaded] = useState(false)\n  const [offeringToken, setOfferingToken] = useState({address:'', balance: 0, tokenType:'', name: ''})\n  const [tokenBalances, setTokenBalances] = useState([])\n  const [offeringTokenBalance, setOfferingTokenBalance] = useState(0)\n  const [acct, setAcct] = useState('')\n  const [decimals, setDecimals] = useState(0)\n  const [allowance, setAllowance] = useState(0)\n  const [approvedForAll, setApprovedForAll] = useState(false)\n  const [offerAmount, setOfferAmount] = useState(0)\n  const [offerTokenId, setOfferTokenId] = useState(0)\n  const [offers, setOffers] = useState([])\n  const [myOffers, setMyOffers] = useState([])\n  const [hash, setHash] = useState(null)\n  const [selectedNFTs, setSelectedNFTs] = useState([])\n  const [makeOfferPrice, setMakeOfferPrice] = useState(0)\n  const [payToMakeOffer, setPayToMakeOffer] = useState(false)\n  const [acceptOfferPrice, setAcceptOfferPrice] = useState(0)\n  const [payToAcceptOffer, setPayToAcceptOffer] = useState(false)\n  const [paymentToken, setPaymentToken] = useState(null)\n  const [paymentDecimals, setPaymentDecimals] = useState(0)\n  const { isOpen: isDetailOpen, onToggle: onDetailToggle } = useDisclosure()\n  const [takePercentageOfERC20, setTakePercentageOfERC20] = useState(false)\n  const [percentageOfERC20, setPercentageOfERC20] = useState(0)\n  // const [offeringTokenId, setOfferingTokenId] = useState()\n  \n  const getMetadata = async function(uri, cb){\n    // alert(0)\n    uri = uri.replace('http://104.154.252.216','https://api.emblemvault.io/s:evmetadata')\n    let responce\n    try {\n        responce = await fetch(uri, {\n        method: 'GET',\n        headers: {\n          // redirect:'follow'\n        },\n      })\n      let jsonData = await responce.json()\n      return cb(jsonData)\n    } catch(err){\n      // alert(0)\n      return cb(false)\n    }\n  }\n\n  const getErc20Contract = (address) =>{\n    console.log(\"contract\", address)\n    return useContract(address, contractAddresses.covalAbi, true)\n  }\n\n  const getVaultContract = (address = null) =>{\n    return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n  }\n\n  const getTradeContract = ()=>{\n    return useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true)\n  }\n\n  const useContract = (address?: string, ABI?: ContractInterface, withSigner = false): Contract | undefined => {\n    return new Contract(address, ABI, withSigner ? library.getSigner(account).connectUnchecked() : library)\n  }\n\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setLoaded(false)\n    }\n  }, [account, acct])\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [copied])\n\n  useEffect(() => {\n      if (!loaded && !loading) {\n        setLoading(true)\n        getBalances(account, async balances =>{\n            setTokenBalances(balances)\n            getOfferContractInfo()\n            setLoaded(true)\n            setLoading(false)            \n        })\n\n      }\n  })\n\n  const handleApprove = async(address, _decimals = decimals)=>{\n    let contract = getErc20Contract(address)\n    console.log('decimals', decimals)\n    await contract.approve(contractAddresses.nftrade[chainId], (offeringTokenBalance * Math.pow(10, +_decimals))).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const handleApproveForAll = async(address = null)=>{\n    let contract = getVaultContract(address)\n    await contract.setApprovalForAll(contractAddresses.nftrade[chainId], true).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n  const getApprovedForAll = async(address = null)=>{\n    let contract = getVaultContract(address)\n    let approved = await contract.isApprovedForAll(account, contractAddresses.nftrade[chainId])\n    // console.log('---approved', approved)\n    setApprovedForAll(approved)\n  }\n\n  const getNFTContractInfo = async(address)=>{\n    let contract = getVaultContract(address)\n    let count = await contract.balanceOf(account)\n    // console.log('--------------- NFT Info', account, 'owns', count.toNumber())\n    let nftCollection = []\n    getSingleNFT(0, ()=>{\n      // console.log(\"GOT ALL NFTs\", nftCollection)\n      setSelectedNFTs(nftCollection)\n    })\n    async function getSingleNFT(index, cb) {\n        let nftInfo =  await contract.tokenOfOwnerByIndex(account, index)\n        nftCollection.push(nftInfo.toNumber())\n        if (index +1 >= count) {\n          return cb()\n      } else {\n          return getSingleNFT(index +1, cb)\n      }\n    }\n  }\n\n  const makeOffer = async()=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.addOffer(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals)).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const withdrawOffer = async(index)=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.withdrawOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const rejectOffer = async(index)=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.rejectOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n  }\n\n  const acceptOffer = async(index)=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.acceptOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const getTokenContractInfo = async (address)=>{\n    let contract = getErc20Contract(address)\n    // console.log(contract)\n    let _dec = await contract.decimals()\n    setDecimals(_dec)\n    setAllowance(\n        await contract\n        .allowance(account, contractAddresses.nftrade[chainId])\n        .then(balance=>(balance * Math.pow(10, -_dec)).toString())\n    )\n    setOfferingTokenBalance(\n        await contract\n        .balanceOf(account)\n        .then(balance=>(balance * Math.pow(10, -_dec)).toString())\n    )\n  }\n\n  const getOfferContractInfo = async ()=>{\n    let contract = getTradeContract()\n    let _paymentToken = await contract.paymentAddress()\n    setPaymentToken(_paymentToken)\n    await getTokenContractInfo(_paymentToken)\n    let offerCount = (await contract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId)).toNumber()\n    let _payToMakeOffer = await contract.payToMakeOffer()\n    setPayToMakeOffer(_payToMakeOffer)\n    let _makeOfferPrice = (await contract.makeOfferPrice()).toNumber()\n    setMakeOfferPrice(_makeOfferPrice)\n    let _payToAcceptOffer = await contract.payToAcceptOffer()\n    setPayToAcceptOffer(_payToAcceptOffer)\n    let _acceptOfferPrice = (await contract.acceptOfferPrice()).toNumber()\n    setAcceptOfferPrice(_acceptOfferPrice)\n    let tokenContract = getErc20Contract(_paymentToken)\n    let _takePercentageOfERC20 = await contract.takePercentageOfERC20()\n    setTakePercentageOfERC20(_takePercentageOfERC20)\n    let _percentageOfERC20 = await contract.percentageFee()\n    setPercentageOfERC20(_percentageOfERC20)\n    console.log('-----%', _takePercentageOfERC20, _percentageOfERC20)\n    console.log('dec',await tokenContract.decimals())\n    setPaymentDecimals(await tokenContract.decimals())\n    console.log('_paymentToken', _paymentToken)\n    getApprovedForAll()\n  \n    console.log('--------- payment ---------', _payToMakeOffer, _makeOfferPrice, _payToAcceptOffer, _acceptOfferPrice, _paymentToken, allowance)\n    \n    console.log('------ offer count ------', offerCount)\n    \n    // let offers = []\n    // let myOffers = []\n    if (offerCount > 0) {\n        getSingleOffer(0, [], [], (offers, myOffers)=>{\n            setOffers(offers)\n            setMyOffers(myOffers)\n            console.log('offers', offers, myOffers)\n        })\n    }\n    async function getSingleOffer(index, offers, myOffers, cb) {\n        let _offer = await contract.getOffer(contractAddresses.emblemVault[chainId], tokenId, index)\n        console.log('-------', _offer)\n        if (_offer.token !== \"0x0000000000000000000000000000000000000000\") {\n            let offer: any = {tokenId: _offer.tokenId.toNumber(), _from: _offer._from, token: _offer.token, amount: _offer.amount}\n            let tokenContract = getErc20Contract(offer.token)\n            \n            let tokenName = await tokenContract.name()\n            console.log('----- name ----', tokenName)\n            offer.name = tokenName\n            offer.index = index            \n            offer.address = offer.token\n            console.log('----- offer tokenid ----', _offer.tokenId.toNumber())\n            if (_offer.tokenId.toNumber() == 0) {\n              let tokenDecimals = await tokenContract.decimals()\n              let tokenSymbol = await tokenContract.symbol()\n              offer.symbol = tokenSymbol\n              offer.decimals = tokenDecimals\n              offer.amount = offer.amount.toNumber() * Math.pow(10,-tokenDecimals)\n              offers.push(offer)\n              if (offer._from == account) {\n                myOffers.push(offer)\n              }\n              finished()\n            } else {\n              let nftContract = getVaultContract(offer.token)\n              let tokenMetadata= await nftContract.tokenURI(offer.tokenId)\n              tokenMetadata = tokenMetadata.replace('ipfs://', 'https://gateway.ipfs.io/')\n              console.log('---------URI---------', tokenMetadata)\n              getMetadata(tokenMetadata, (metadata)=>{\n                console.log('metadata', metadata)\n                offer.metadata = metadata\n                offer.amount = _offer.amount.toNumber()\n                offer.tokenId = _offer.tokenId.toNumber()\n                offers.push(offer)\n                if (offer._from == account) {\n                  myOffers.push(offer)\n                }\n                finished()\n              })\n            }\n        } else {\n          console.log('----- wtf -----')\n          finished()\n        }      \n        function finished() {\n          if (index +1 >= offerCount) {\n            return cb(offers, myOffers)\n          } else {\n              return getSingleOffer(index +1, offers, myOffers, cb)\n          }\n        }\n        \n    }\n    // console.log(offerCount)\n  }\n\n  const getBalances = async (address, cb) => {\n    if (mine) return cb([])\n    const responce = await fetch(EMBLEM_API + '/'+NETWORK_SHORTNAMES[chainId]+'/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData.values)\n  }\n\n  function copyWithFlag(content: string): void {\n    copy(content)\n    setCopied(true)\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent color={COLOR[colorMode]}>\n        <ModalHeader>\n          <Text>{!mine? ('Make'): null} Offer{mine? ('s'): null} for: {tokenId}</Text>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n            {!mine? (\n                <Stack direction=\"column\">\n                    <Stack mt=\"6\">\n                    <Text>Choose your Offer Token</Text>\n                  {/* <Text>{account} network: {NETWORK_SHORTNAMES[chainId]}</Text> */}\n                    <Select w=\"100%\" value={offeringToken.address}\n                        onChange={(e) => {\n                            if (e.target.value !== '0') {\n                                let token = tokenBalances.filter((item)=>{return item.address == e.target.value})[0]\n                                setOfferingToken(token)\n                                setOfferTokenId(0)\n                                token.tokenType ==\"ERC-20\" ? getTokenContractInfo(token.address) : getNFTContractInfo(token.address)\n                                console.log(tokenBalances.filter((item)=>{return item.address == e.target.value})[0])\n                                console.log(e.target.value)\n                            }\n                        }}\n                    >\n                        <option value=\"0\" >Choose a Token</option>\n                        {tokenBalances.map((coin, index) => {\n                            if (coin.tokenType !== 'native')\n                            return (\n                            <option value={coin.address}>{coin.name}</option>\n                            )\n                        })}\n                    </Select>\n                    {offeringToken.balance > 0 && offeringToken.tokenType==\"ERC-20\" && allowance > 0 ? (\n                        <>\n                            <Text>Max: {offeringTokenBalance}</Text>    \n                            <Input onChange={(e) => setOfferAmount(e.target.value)}></Input>\n                        </>\n                    ) : null}\n                                  \n                </Stack>\n                    <Stack direction=\"row\" justify=\"center\">\n                    {offeringToken.tokenType =='ERC-20' ? (\n                        offeringTokenBalance > 0 && allowance == 0 ? (\n                            <Button onClick={()=>{handleApprove(offeringToken.address)}}>Approve offer of {offeringToken.name}</Button>\n                        ) : offeringToken && offeringTokenBalance == 0 ? (\n                            <Text>Insufficient Balance</Text>\n                        ) : (\n                            <Button onClick={()=>{makeOffer()}}>Make Offer</Button>\n                        )\n                    ) : (\n                      selectedNFTs.length > 0 ? (\n                        <Select\n                        width=\"100%\"\n                        onChange={(e) => {\n                          if (e.target.value !== '0') {\n                              // console.log(\"Picked TokenID: \", e.target.value, offeringToken)\n                              setOfferTokenId(Number(e.target.value))\n                              getApprovedForAll(offeringToken.address)\n                          }\n                        }}>\n                          <option key={-1} value=\"0\">Select TokenId</option>\n                          {selectedNFTs.map((tokenId, index) => {\n                            return (\n                            <option key={index} value={tokenId}>{tokenId}</option>\n                            )\n                        })}\n                        </Select>\n                        \n                      ) : null\n                    )}\n                    {offeringToken.name && offeringToken.tokenType !=\"ERC-20\" && !approvedForAll && offerTokenId != 0? (\n                      <Button width=\"100%\" onClick={()=>{handleApproveForAll(offeringToken.address)}}>Approve {offeringToken.name}</Button>\n                    ): offeringToken.name && offeringToken.tokenType !=\"ERC-20\" && approvedForAll? (\n                      <Button onClick={()=>{makeOffer()}}>Make Offer</Button>\n                    ): null}                    \n                  {/* <Button onClick={() => copyWithFlag('address')}>\n                    {copied ? <Text>Copied!</Text> : <Text isTruncated>{'address'}</Text>}\n                  </Button> */}\n                </Stack>\n                {payToMakeOffer ? (\n                      <Text> Cost: {acceptOfferPrice * Math.pow(10, -paymentDecimals)} $Coval to make offers</Text>\n                ) : null}\n                {\n                  takePercentageOfERC20 && offeringToken.tokenType !=\"ERC-20\" ? (<Text>Takes a %</Text>) : null\n                }\n                    \n                    <Stack maxHeight = \"200px\" overflow=\"scroll\">\n                      { myOffers.length > 0 ? (\n                        <Text>My Offers</Text>\n                      ) : null }                        \n                        {payToMakeOffer && offeringTokenBalance > 0 && allowance * Math.pow(10, +paymentDecimals) < makeOfferPrice ? (\n                            <>\n                              {/* <Text>Cost: {makeOfferPrice * Math.pow(10, -paymentDecimals)} $Coval to make offers</Text> */}\n                              <Button onClick={()=>{handleApprove(paymentToken, paymentDecimals)}}>Approve spending </Button>\n                            </>\n                          ) : offeringToken && offeringTokenBalance < makeOfferPrice * Math.pow(10, -paymentDecimals)  ? (\n                              <Text>Insufficient Balance</Text>\n                          ) : null}\n                        { myOffers.map((offer, index) => {\n                              return (\n                                <Box borderRadius=\"0.25rem\" borderWidth={1} p={2} mb={2}>\n                                {/* <Card key={index}> */}\n                                  {/* <Card.Header color=\"black\"> */}\n                                    {/* <Accordion.Toggle as={Button} eventKey=\"1\" color=\"darkslategray\"> */}\n\n                                    {/* <Text color=\"black\">{offer.name} {offer.amount > 0 ? offer.amount: offer.tokenId}</Text> */}\n                                    <Text fontSize=\"bold\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"} >{offer.amount > 0 ? offer.amount : null}\n                                      <Link ml={3} color={colorMode==\"dark\"? \"white\": \"black\"} href={formatEtherscanLink(ExplorerTXType.Token, [chainId as number, offer.token])} isExternal>\n                                        {offer.name}\n                                      </Link>\n                                    {offer.amount < 1 ? '['+offer.tokenId+']': null}\n                                    </Text>\n                                    {/* </Accordion.Toggle> */}\n                                  {/* </Card.Header> */}\n                                  {/* <Accordion.Collapse eventKey=\"1\"> */}\n                                    {/* <Card.Body> */}\n                                      <Button onClick={() =>{withdrawOffer(offer.index)}} m={2}>Withdraw Offer</Button>\n                                        {offer.metadata? (                                            \n                                          <Box >\n                                            <Embed className=\"\" url={offer.metadata.image.replace('ipfs://','https://gateway.ipfs.io/')}/>\n                                          </Box>\n                                      ) : null}\n                                    {/* </Card.Body> */}\n                                  {/* </Accordion.Collapse> */}\n                                {/* </Card> */}\n                                </Box>\n                              )\n                        })}\n                        \n                    </Stack>\n                </Stack>\n            ) : null}\n\n            {mine? (\n                <Box>\n                  {!approvedForAll ? (\n                    <Button onClick={()=>{handleApproveForAll()}}>Allow accepting of Offers</Button>\n                  ) : null}\n                \n                  <Stack direction=\"column\" maxHeight = \"200px\" overflow=\"scroll\">\n                   \n                    {/* {offers.length > 0 ? (<Text>Offers</Text>) : null } */}\n                        \n                        {payToAcceptOffer && offeringTokenBalance > 0 && allowance  * Math.pow(10, +paymentDecimals) < acceptOfferPrice ? (\n                            <>\n                              <Text>Cost: {acceptOfferPrice * Math.pow(10, -paymentDecimals)} $Coval to accept offers</Text>\n                              <Button onClick={()=>{handleApprove(paymentToken, paymentDecimals)}}>Approve spending </Button>\n                            </>\n                          ) : offeringToken && offeringTokenBalance < acceptOfferPrice * Math.pow(10, -paymentDecimals)  ? (\n                              <Text>Insufficient Balance</Text>\n                          ) : null}\n                          \n                        { offers.map((offer, index) => {\n                              return (\n                                <Box borderRadius=\"0.25rem\" borderWidth={1} p={2} mb={2}>\n                                    <Text fontSize=\"bold\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"} >{offer.amount > 0 ? offer.amount : null}\n                                      <Link ml={3} color={colorMode==\"dark\"? \"white\": \"black\"} href={formatEtherscanLink(ExplorerTXType.Token, [chainId as number, offer.token])} isExternal>\n                                        {offer.name}\n                                      </Link>\n                                    {offer.amount < 1 ? '['+offer.tokenId+']': null}\n                                    </Text>\n\n                                    <Text color={colorMode==\"dark\" ? \"#baaa94\": \"gray\"} fontSize=\"xs\">\n                                      From: \n                                      <Link ml={3} color={colorMode==\"dark\"? \"white\": \"darkgray\"} href={formatEtherscanLink(ExplorerTXType.Account, [chainId as number, offer._from])} isExternal>\n                                      {offer._from}\n                                      </Link>\n                                    </Text>\n                                    \n                                    <Button onClick={() =>{rejectOffer(offer.index)}} m={2}>Reject Offer</Button>\n                                      {approvedForAll ? (\n                                          <Button onClick={() =>{acceptOffer(offer.index)}} m={2}>Accept Offer</Button>\n                                      ) : null} \n                                        {offer.metadata? (                                            \n                                          <Box >\n                                            <Embed className=\"\" url={offer.metadata.image.replace('ipfs://','https://gateway.ipfs.io/')}/>\n                                          </Box>\n                                      ) : null}\n                                </Box>\n                              )\n                              \n                        })}\n                </Stack>\n                </Box>\n            ) : null }\n          {hash ? (\n          <TransactionToast\n                hash={hash}\n                onComplete={() => {\n                    setHash(null)\n                    setLoaded(false)\n                }}\n            />\n          ) : null }\n        </ModalBody>\n        <ModalFooter></ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}