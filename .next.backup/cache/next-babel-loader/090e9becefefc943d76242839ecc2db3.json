{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { FormControl, FormLabel, FormHelperText, Input, Stack, Box, Flex, Textarea, Button } from '@chakra-ui/core';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport Loader from 'react-loader';\nexport default function Batch() {\n  _s();\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(\"\"),\n      batchName = _useState[0],\n      setBatchName = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      imageBaseUrl = _useState2[0],\n      setImageBaseUrl = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      inscriptionBaseUrl = _useState3[0],\n      setInscriptionBaseUrl = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      addressType = _useState4[0],\n      setAddressType = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      titleTemplate = _useState5[0],\n      setTitleTemplate = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      descriptionTemplate = _useState6[0],\n      setDescriptionTemplate = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      total = _useState7[0],\n      setTotal = _useState7[1];\n\n  var _useState8 = useState(\"\"),\n      data = _useState8[0],\n      setData = _useState8[1];\n\n  var _useState9 = useState(query.batch_id || \"\"),\n      batchId = _useState9[0],\n      setBatchId = _useState9[1];\n\n  var _useState10 = useState({\n    loaded: true,\n    \"private\": false\n  }),\n      state = _useState10[0],\n      setState = _useState10[1];\n\n  useEffect(function () {\n    if (batchId && !batchName) {\n      getBatch();\n    }\n  }, []);\n\n  var getBatch = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              requestOptions = {\n                method: 'GET',\n                redirect: 'follow'\n              };\n              fetch(EMBLEM_API + \"/batch?batchId=\".concat(batchId), requestOptions).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n                  var record;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return response.json();\n\n                        case 2:\n                          record = _context.sent;\n                          setBatchName(record.batch_name);\n\n                        case 4:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getBatch() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    var serializedForm = {\n      batchName: batchName,\n      imageBaseUrl: imageBaseUrl,\n      inscriptionBaseUrl: inscriptionBaseUrl,\n      addressType: addressType,\n      titleTemplate: titleTemplate,\n      descriptionTemplate: descriptionTemplate,\n      total: total,\n      batchId: batchId\n    };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm)\n    }).then( /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context3.sent;\n\n                if (data.id) {\n                  setBatchId(data.id);\n                }\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }())[\"catch\"](function (err) {\n      console.log(err);\n    });\n  };\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"batch-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, \"Batch Name\"), __jsx(Input, {\n    type: \"text\",\n    id: \"batch-name\",\n    \"aria-describedby\": \"batch-name-text\",\n    value: batchName,\n    onChange: function onChange(e) {\n      return setBatchName(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"batch-name-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"Give it a unique name for this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"image-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, \"Image Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"image-base-url\",\n    \"aria-describedby\": \"image-base-url-text\",\n    value: imageBaseUrl,\n    onChange: function onChange(e) {\n      return setImageBaseUrl(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"image-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, \"Enter the base url for the images in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"inscription-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, \"Inscription Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"inscription-base-url\",\n    \"aria-describedby\": \"inscription-base-url-text\",\n    value: inscriptionBaseUrl,\n    onChange: function onChange(e) {\n      return setInscriptionBaseUrl(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"inscription-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, \"Enter the base url for the inscriptions in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"address-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, \"Address Type\"), __jsx(Input, {\n    type: \"text\",\n    id: \"address-type\",\n    \"aria-describedby\": \"address-type-text\",\n    value: addressType,\n    onChange: function onChange(e) {\n      return setAddressType(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"address-type-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, \"Enter the address type for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"title-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, \"Title Template\"), __jsx(Textarea, {\n    id: \"title-template\",\n    size: \"lg\",\n    \"aria-describedby\": \"title-template-text\",\n    minLength: 3,\n    maxLength: 4024,\n    value: titleTemplate,\n    onChange: function onChange(e) {\n      return setTitleTemplate(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"title-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, \"Enter the title template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, \"Description Template\"), __jsx(Textarea, {\n    id: \"description-template\",\n    size: \"lg\",\n    \"aria-describedby\": \"description-template-text\",\n    minLength: 3,\n    maxLength: 1024,\n    value: descriptionTemplate,\n    onChange: function onChange(e) {\n      return setDescriptionTemplate(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"description-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, \"Enter the description template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, \"Total\"), __jsx(Input, {\n    type: \"number\",\n    id: \"total\",\n    \"aria-describedby\": \"total-text\",\n    value: total,\n    onChange: function onChange(e) {\n      return setTotal(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"total-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 11\n    }\n  }, \"Enter the total number of items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }\n  }, \"Records\"), __jsx(Textarea, {\n    id: \"records\",\n    size: \"lg\",\n    \"aria-describedby\": \"records-text\",\n    minLength: 3,\n    maxLength: 1024,\n    value: descriptionTemplate,\n    onChange: function onChange(e) {\n      return setData(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"records-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, \"Enter the CSV rows from the helper spreadsheet\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, \"Submit\"))))));\n}\n\n_s(Batch, \"gPURn/H7czM5Dd66b01bFgCJrXE=\", false, function () {\n  return [useRouter];\n});\n\n_c = Batch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Batch\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx"],"names":["FormControl","FormLabel","FormHelperText","Input","Stack","Box","Flex","Textarea","Button","useRouter","useEffect","useState","EMBLEM_API","Loader","Batch","query","batchName","setBatchName","imageBaseUrl","setImageBaseUrl","inscriptionBaseUrl","setInscriptionBaseUrl","addressType","setAddressType","titleTemplate","setTitleTemplate","descriptionTemplate","setDescriptionTemplate","total","setTotal","data","setData","batch_id","batchId","setBatchId","loaded","state","setState","getBatch","requestOptions","method","redirect","fetch","then","response","json","record","batch_name","err","console","log","handleSubmit","event","preventDefault","myHeaders","Headers","append","serializedForm","headers","body","JSON","stringify","id","e","target","value"],"mappings":"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","sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Stack,\n  Box,\n  Flex,\n  Textarea,\n  Button\n} from '@chakra-ui/core'\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport Loader from 'react-loader'\n\nexport default function Batch() {\n  const { query } = useRouter()\n  const [batchName, setBatchName] = useState(\"\");\n  const [imageBaseUrl, setImageBaseUrl] = useState(\"\");\n  const [inscriptionBaseUrl, setInscriptionBaseUrl] = useState(\"\");\n  const [addressType, setAddressType] = useState(\"\");\n  const [titleTemplate, setTitleTemplate] = useState(\"\");\n  const [descriptionTemplate, setDescriptionTemplate] = useState(\"\");\n  const [total, setTotal] = useState(\"\");\n  const [data, setData] = useState(\"\");\n  const [batchId, setBatchId] = useState(query.batch_id || \"\")\n  const [state, setState] = useState({ loaded: true, private: false })\n\n\n  useEffect(() => {\n    if (batchId && !batchName) {\n      getBatch()\n    }    \n  }, [])\n\n  const getBatch = async ()=>{\n    var requestOptions: any = {\n      method: 'GET',\n      redirect: 'follow'\n    };\n    \n    fetch(EMBLEM_API + `/batch?batchId=${batchId}`, requestOptions).then(async(response)=> {\n      let record = await response.json()\n      setBatchName(record.batch_name)\n    }).catch(err=>{\n      console.log(err)\n    })\n  }\n  \n  const handleSubmit = (event) => {\n    event.preventDefault()\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    \n    const serializedForm = {\n        batchName,\n        imageBaseUrl,\n        inscriptionBaseUrl,\n        addressType,\n        titleTemplate,\n        descriptionTemplate,\n        total, \n        batchId\n      };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm),\n    }).then(async(response)=> {\n        let data = await response.json()\n        if (data.id) {\n          setBatchId(data.id)\n        }\n      }).catch(err=>{\n        console.log(err)\n      })\n  };\n\n  return (\n    <Loader loaded={state.loaded}>\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n    <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n    \n        <form onSubmit={handleSubmit}>\n      <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"batch-name\">Batch Name</FormLabel>\n          <Input\n            type=\"text\"\n            id=\"batch-name\"\n            aria-describedby=\"batch-name-text\"\n            value={batchName}\n            onChange={(e) => setBatchName(e.target.value)}\n            autoComplete=\"off\"\n          />\n          <FormHelperText id=\"batch-name-text\">Give it a unique name for this batch.</FormHelperText>\n        </FormControl>\n        \n        <FormControl isRequired>\n          <FormLabel htmlFor=\"image-base-url\">Image Base Url</FormLabel>\n          <Input\n            type=\"text\"\n            id=\"image-base-url\"\n            aria-describedby=\"image-base-url-text\"\n            value={imageBaseUrl}\n            onChange={(e) => setImageBaseUrl(e.target.value)}\n            autoComplete=\"off\"\n          />\n          <FormHelperText id=\"image-base-url-text\">\n            Enter the base url for the images in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"inscription-base-url\">Inscription Base Url</FormLabel>\n          <Input\n            type=\"text\"\n            id=\"inscription-base-url\"\n            aria-describedby=\"inscription-base-url-text\"\n            value={inscriptionBaseUrl}\n            onChange={(e) => setInscriptionBaseUrl(e.target.value)}\n            autoComplete=\"off\"\n          />\n          <FormHelperText id=\"inscription-base-url-text\">\n            Enter the base url for the inscriptions in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"address-type\">Address Type</FormLabel>\n          <Input\n            type=\"text\"\n            id=\"address-type\"\n            aria-describedby=\"address-type-text\"\n            value={addressType}\n            onChange={(e) => setAddressType(e.target.value)}\n            autoComplete=\"off\"\n          />\n          <FormHelperText id=\"address-type-text\">\n            Enter the address type for the items in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"title-template\">Title Template</FormLabel>\n          <Textarea\n              id=\"title-template\"\n              size=\"lg\"\n              aria-describedby=\"title-template-text\"\n              minLength={3}\n              maxLength={4024}\n              value={titleTemplate}\n              onChange={(e) => setTitleTemplate(e.target.value)}\n              autoComplete=\"off\"\n          />\n          <FormHelperText id=\"title-template-text\">\n            Enter the title template for the items in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"description-template\">Description Template</FormLabel>\n          <Textarea\n              id=\"description-template\"\n              size=\"lg\"\n              aria-describedby=\"description-template-text\"\n              minLength={3}\n              maxLength={1024}\n              value={descriptionTemplate}\n              onChange={(e) => setDescriptionTemplate(e.target.value)}\n              autoComplete=\"off\"\n          />\n          <FormHelperText id=\"description-template-text\">\n            Enter the description template for the items in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"total\">Total</FormLabel>\n          <Input\n            type=\"number\"\n            id=\"total\"\n            aria-describedby=\"total-text\"\n            value={total}\n            onChange={(e) => setTotal(e.target.value)}\n            autoComplete=\"off\"\n          />\n          <FormHelperText id=\"total-text\">\n            Enter the total number of items in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"description-template\">Records</FormLabel>\n          <Textarea\n              id=\"records\"\n              size=\"lg\"\n              aria-describedby=\"records-text\"\n              minLength={3}\n              maxLength={1024}\n              value={descriptionTemplate}\n              onChange={(e) => setData(e.target.value)}\n              autoComplete=\"off\"\n          />\n          <FormHelperText id=\"records-text\">\n            Enter the CSV rows from the helper spreadsheet\n          </FormHelperText>\n        </FormControl>\n      </Stack>\n      <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n        <Button mt={4} type=\"submit\">\n          Submit\n        </Button>\n      </Stack>\n        </form>\n      </Box>\n   </Flex>\n   </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}