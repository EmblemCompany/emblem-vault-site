{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Leaderboard.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text, Link, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nlet _totalValueLocked = 0;\nexport default function LeaderBoard() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: loadingOwners,\n    1: setLoadingOwners\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: owners,\n    1: setOwners\n  } = useState([]);\n  const {\n    0: calculatedValue,\n    1: setCalculatedValue\n  } = useState(0);\n  const {\n    0: totalValueLocked,\n    1: setTotalValueLocked\n  } = useState(0);\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  const getOwners = async () => {\n    setState({\n      loaded: true\n    });\n\n    if (!loadingOwners) {\n      setOwners([]);\n      setLoadingOwners(true);\n    } else {\n      return;\n    }\n\n    let totalSupply = await emblemContract.totalSupply();\n    console.log(totalSupply);\n    getTokensByIndex(Number(totalSupply.toString()), 0, () => {\n      function compare(a, b) {\n        if (a.value > b.value) return -1;\n        if (b.value > a.value) return 1;\n        return 0;\n      }\n\n      console.log('sorted owners', owners.sort(compare));\n      setLoadingOwners(false);\n    });\n  };\n\n  const getValueForNft = async (tokenId, cb) => {\n    try {\n      const response = await fetch(EMBLEM_API + '/value/' + tokenId, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        }\n      });\n      const jsonData = await response.json();\n      return cb(jsonData.value || 0);\n    } catch (err) {\n      return cb(0);\n    }\n  };\n\n  async function getTokensByIndex(count, index, cb) {\n    let tokenId = await emblemContract.tokenByIndex(index);\n    console.log('tokenId', tokenId.toString(), index);\n    getOwner(tokenId.toString(), () => {\n      if (count - 1 < index + 1) {\n        return cb();\n      } else {\n        return getTokensByIndex(count, index + 1, cb);\n      }\n    });\n  }\n\n  async function getOwner(tokenId, cb) {\n    let owner = await emblemContract.ownerOf(tokenId);\n\n    if (owner === '0x0000000000000000000000000000000000000000' || owner.toLowerCase() === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180') {\n      return cb();\n    }\n\n    if (owners.filter(item => {\n      return item.address === owner;\n    }).length < 1) {\n      getValueForNft(tokenId, value => {\n        setCalculatedValue(value);\n        console.log(\"tokenId Value\", tokenId, value);\n        owners.push({\n          address: owner,\n          value: value,\n          vaults: [{\n            tokenId: tokenId,\n            value: value\n          }]\n        });\n        setOwners(owners);\n      });\n    } else {\n      getValueForNft(tokenId, value => {\n        setCalculatedValue(value);\n        console.log(\"tokenId Value\", tokenId, value);\n        owners.filter(item => {\n          return item.address === owner;\n        })[0].vaults.push({\n          address: owner,\n          tokenId: tokenId.toString(),\n          value: owners.filter(item => {\n            return item.address === owner;\n          })[0].value\n        });\n        setOwners(owners);\n      });\n    }\n\n    return cb();\n  } // const saveCache = (owners) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_leader', JSON.stringify(owners)) // Save new state for later\n  // }\n\n\n  const {\n    0: chain,\n    1: setChain\n  } = useState(chainId);\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getOwners();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    account && chainId ? getOwners() : setState({\n      loaded: true\n    });\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, loadingOwners ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 24\n    }\n  }) : '', __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \"Total Value Locked: $\", totalValueLocked), owners.map(item => {\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n    let url = location.origin + pieces.join('/') + '/vaultlist?address=' + item.address;\n    return __jsx(Link, {\n      href: url,\n      key: item.address,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }, \"Address: \", item.address, \" Vaults: \", item.vaults.length, \" TVL: \", item.value);\n  }))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Leaderboard.tsx"],"names":["Flex","Text","Link","Stack","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","EMBLEM_API","contractAddresses","useContract","_totalValueLocked","LeaderBoard","query","account","chainId","vaults","setVaults","state","setState","loaded","loadingApi","setLoadingApi","loadingOwners","setLoadingOwners","address","setAddress","owners","setOwners","calculatedValue","setCalculatedValue","totalValueLocked","setTotalValueLocked","emblemContract","emblemVault","emblemAbi","getOwners","totalSupply","console","log","getTokensByIndex","Number","toString","compare","a","b","value","sort","getValueForNft","tokenId","cb","response","fetch","method","headers","service","jsonData","json","err","count","index","tokenByIndex","getOwner","owner","ownerOf","toLowerCase","filter","item","length","push","chain","setChain","map","pieces","location","pathname","split","pop","url","origin","join"],"mappings":";;;AAAA,SAAcA,IAAd,EAAoBC,IAApB,EAA0BC,IAA1B,EAAuCC,KAAvC,QAA6D,iBAA7D;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA,SAASC,UAAT,EAAmCC,iBAAnC,QAA4D,cAA5D;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,IAAIC,iBAAiB,GAAG,CAAxB;AACA,eAAe,SAASC,WAAT,GAAuB;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAYT,SAAS,EAA3B;AACA,QAAM;AAAEU,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBV,YAAY,EAAzC;AACA,QAAM;AAAA,OAACW,MAAD;AAAA,OAASC;AAAT,MAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACW,KAAD;AAAA,OAAQC;AAAR,MAAoBZ,QAAQ,CAAC;AAAEa,IAAAA,MAAM,EAAE;AAAV,GAAD,CAAlC;AACA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8Bf,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAACgB,aAAD;AAAA,OAAgBC;AAAhB,MAAoCjB,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM;AAAA,OAACkB,OAAD;AAAA,OAAUC;AAAV,MAAwBnB,QAAQ,CAACM,KAAK,CAACY,OAAP,CAAtC;AACA,QAAM;AAAA,OAACE,MAAD;AAAA,OAASC;AAAT,MAAsBrB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACsB,eAAD;AAAA,OAAkBC;AAAlB,MAAwCvB,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAM;AAAA,OAACwB,gBAAD;AAAA,OAAmBC;AAAnB,MAA0CzB,QAAQ,CAAC,CAAD,CAAxD;AAGA,QAAM0B,cAAc,GAAGvB,WAAW,CAACD,iBAAiB,CAACyB,WAAlB,CAA8BnB,OAA9B,CAAD,EAAyCN,iBAAiB,CAAC0B,SAA3D,EAAsE,IAAtE,CAAlC;;AAEA,QAAMC,SAAS,GAAG,YAAY;AAC5BjB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAD,CAAR;;AACA,QAAI,CAACG,aAAL,EAAoB;AAClBK,MAAAA,SAAS,CAAC,EAAD,CAAT;AACAJ,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KAHD,MAGO;AACL;AACD;;AACD,QAAIa,WAAW,GAAG,MAAOJ,cAAD,CAA6BI,WAA7B,EAAxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACAG,IAAAA,gBAAgB,CAACC,MAAM,CAACJ,WAAW,CAACK,QAAZ,EAAD,CAAP,EAAiC,CAAjC,EAAoC,MAAM;AACxD,eAASC,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AACrB,YAAID,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAhB,EAAuB,OAAO,CAAC,CAAR;AACvB,YAAID,CAAC,CAACC,KAAF,GAAUF,CAAC,CAACE,KAAhB,EAAuB,OAAO,CAAP;AACvB,eAAO,CAAP;AACD;;AACDR,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BZ,MAAM,CAACoB,IAAP,CAAYJ,OAAZ,CAA7B;AACAnB,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,KARe,CAAhB;AASD,GAnBD;;AAqBA,QAAMwB,cAAc,GAAG,OAAOC,OAAP,EAAgBC,EAAhB,KAAsB;AAC3C,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC5C,UAAU,GAAG,SAAb,GAAyByC,OAA1B,EAAmC;AAC7DI,QAAAA,MAAM,EAAE,KADqD;AAE7DC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,OAAO,EAAE;AAFF;AAFoD,OAAnC,CAA5B;AAOA,YAAMC,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAvB;AACA,aAAOP,EAAE,CAACM,QAAQ,CAACV,KAAT,IAAkB,CAAnB,CAAT;AACD,KAVD,CAUE,OAAMY,GAAN,EAAU;AAAE,aAAOR,EAAE,CAAC,CAAD,CAAT;AAAiB;AAChC,GAZD;;AAcA,iBAAeV,gBAAf,CAAgCmB,KAAhC,EAAuCC,KAAvC,EAA8CV,EAA9C,EAAkD;AAChD,QAAID,OAAO,GAAG,MAAOhB,cAAD,CAA6B4B,YAA7B,CAA0CD,KAA1C,CAApB;AACAtB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBU,OAAO,CAACP,QAAR,EAAvB,EAA2CkB,KAA3C;AACAE,IAAAA,QAAQ,CAACb,OAAO,CAACP,QAAR,EAAD,EAAqB,MAAI;AAC/B,UAAIiB,KAAK,GAAG,CAAR,GAAYC,KAAK,GAAG,CAAxB,EAA2B;AACvB,eAAOV,EAAE,EAAT;AACD,OAFH,MAES;AACL,eAAOV,gBAAgB,CAACmB,KAAD,EAAQC,KAAK,GAAG,CAAhB,EAAmBV,EAAnB,CAAvB;AACD;AACJ,KANO,CAAR;AAOD;;AAED,iBAAeY,QAAf,CAAwBb,OAAxB,EAAiCC,EAAjC,EAAqC;AACnC,QAAIa,KAAK,GAAG,MAAO9B,cAAD,CAA6B+B,OAA7B,CAAqCf,OAArC,CAAlB;;AACA,QAAIc,KAAK,KAAK,4CAAV,IAA0DA,KAAK,CAACE,WAAN,OAAwB,4CAAtF,EAAoI;AAClI,aAAOf,EAAE,EAAT;AACD;;AACD,QAAIvB,MAAM,CAACuC,MAAP,CAAcC,IAAI,IAAE;AAAC,aAAOA,IAAI,CAAC1C,OAAL,KAAiBsC,KAAxB;AAA8B,KAAnD,EAAqDK,MAArD,GAA8D,CAAlE,EAAqE;AACnEpB,MAAAA,cAAc,CAACC,OAAD,EAAUH,KAAK,IAAE;AAC7BhB,QAAAA,kBAAkB,CAACgB,KAAD,CAAlB;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BU,OAA7B,EAAsCH,KAAtC;AACAnB,QAAAA,MAAM,CAAC0C,IAAP,CAAY;AAAC5C,UAAAA,OAAO,EAAEsC,KAAV;AAAiBjB,UAAAA,KAAK,EAAEA,KAAxB;AAA+B9B,UAAAA,MAAM,EAAE,CAAC;AAAEiC,YAAAA,OAAO,EAAEA,OAAX;AAAoBH,YAAAA,KAAK,EAAEA;AAA3B,WAAD;AAAvC,SAAZ;AACAlB,QAAAA,SAAS,CAACD,MAAD,CAAT;AACD,OALa,CAAd;AAMD,KAPD,MAOO;AACLqB,MAAAA,cAAc,CAACC,OAAD,EAAUH,KAAK,IAAE;AAC7BhB,QAAAA,kBAAkB,CAACgB,KAAD,CAAlB;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BU,OAA7B,EAAsCH,KAAtC;AACAnB,QAAAA,MAAM,CAACuC,MAAP,CAAcC,IAAI,IAAE;AAAC,iBAAOA,IAAI,CAAC1C,OAAL,KAAiBsC,KAAxB;AAA8B,SAAnD,EAAqD,CAArD,EAAwD/C,MAAxD,CAA+DqD,IAA/D,CAAoE;AAAE5C,UAAAA,OAAO,EAAEsC,KAAX;AAAkBd,UAAAA,OAAO,EAAEA,OAAO,CAACP,QAAR,EAA3B;AAA+CI,UAAAA,KAAK,EAAEnB,MAAM,CAACuC,MAAP,CAAcC,IAAI,IAAE;AAAC,mBAAOA,IAAI,CAAC1C,OAAL,KAAiBsC,KAAxB;AAA8B,WAAnD,EAAqD,CAArD,EAAwDjB;AAA9G,SAApE;AACAlB,QAAAA,SAAS,CAACD,MAAD,CAAT;AACD,OALa,CAAd;AAMD;;AACD,WAAOuB,EAAE,EAAT;AACD,GAnFmC,CAqFpC;AACA;AACA;;;AAEA,QAAM;AAAA,OAACoB,KAAD;AAAA,OAAQC;AAAR,MAAoBhE,QAAQ,CAACQ,OAAD,CAAlC;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,OAAO,IAAIuD,KAAK,IAAIvD,OAAxB,EAAiC;AAC/BwD,MAAAA,QAAQ,CAACxD,OAAD,CAAR;AACAI,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAR;AACAgB,MAAAA,SAAS;AACV;AACF,GANQ,EAMN,CAACrB,OAAD,EAAUuD,KAAV,CANM,CAAT;AAQAhE,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,OAAO,IAAIC,OAAX,GAAqBqB,SAAS,EAA9B,GAAmCjB,QAAQ,CAAC;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAD,CAA3C;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAEF,KAAK,CAACE,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,aAAa,GAAG,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAoB,EADpC,EAEE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAC,QAAzB;AAAkC,IAAA,cAAc,EAAC,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAA4BQ,gBAA5B,CADF,EAEGJ,MAAM,CAAC6C,GAAP,CAAYL,IAAD,IAAU;AACpB,QAAIM,MAAM,GAAGC,QAAQ,CAACC,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,CAAb;AACAH,IAAAA,MAAM,CAACI,GAAP;AACA,QAAIC,GAAG,GAAGJ,QAAQ,CAACK,MAAT,GAAkBN,MAAM,CAACO,IAAP,CAAY,GAAZ,CAAlB,GAAqC,qBAArC,GAA6Db,IAAI,CAAC1C,OAA5E;AACA,WACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAEqD,GAAZ;AAAiB,MAAA,GAAG,EAAEX,IAAI,CAAC1C,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA8C0C,IAAI,CAAC1C,OAAnD,eAAqE0C,IAAI,CAACnD,MAAL,CAAYoD,MAAjF,YAA+FD,IAAI,CAACrB,KAApG,CADF;AAGD,GAPA,CAFH,CADF,CAFF,CADF;AAkBD","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Spinner } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\nlet _totalValueLocked = 0\nexport default function LeaderBoard() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [loadingOwners, setLoadingOwners] = useState(false)\n  const [address, setAddress] = useState(query.address)\n  const [owners, setOwners] = useState([])\n  const [calculatedValue, setCalculatedValue] = useState(0)\n  const [totalValueLocked, setTotalValueLocked] = useState(0)\n\n\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const getOwners = async () => {\n    setState({ loaded: true })\n    if (!loadingOwners) {\n      setOwners([])\n      setLoadingOwners(true)\n    } else {\n      return\n    }\n    let totalSupply = await (emblemContract as Contract).totalSupply()\n    console.log(totalSupply)\n    getTokensByIndex(Number(totalSupply.toString()), 0, () => {\n      function compare(a, b) {\n        if (a.value > b.value) return -1;\n        if (b.value > a.value) return 1;      \n        return 0;\n      }\n      console.log('sorted owners', owners.sort(compare))      \n      setLoadingOwners(false)\n    })\n  }\n\n  const getValueForNft = async (tokenId, cb) =>{\n    try {\n      const response = await fetch(EMBLEM_API + '/value/' + tokenId, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n      })\n      const jsonData = await response.json()\n      return cb(jsonData.value || 0)\n    } catch(err){ return cb(0)    }\n  }\n\n  async function getTokensByIndex(count, index, cb) {\n    let tokenId = await (emblemContract as Contract).tokenByIndex(index)\n    console.log('tokenId', tokenId.toString(), index)\n    getOwner(tokenId.toString(), ()=>{\n      if (count - 1 < index + 1) {\n          return cb()\n        } else {\n          return getTokensByIndex(count, index + 1, cb)\n        }\n    })\n  }\n\n  async function getOwner(tokenId, cb) {\n    let owner = await (emblemContract as Contract).ownerOf(tokenId)\n    if (owner === '0x0000000000000000000000000000000000000000' || owner.toLowerCase() === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180') {\n      return cb()\n    }\n    if (owners.filter(item=>{return item.address === owner}).length < 1) {\n      getValueForNft(tokenId, value=>{\n        setCalculatedValue(value)\n        console.log(\"tokenId Value\", tokenId, value)\n        owners.push({address: owner, value: value, vaults: [{ tokenId: tokenId, value: value}]})\n        setOwners(owners)\n      })\n    } else {\n      getValueForNft(tokenId, value=>{\n        setCalculatedValue(value)\n        console.log(\"tokenId Value\", tokenId, value)\n        owners.filter(item=>{return item.address === owner})[0].vaults.push({ address: owner, tokenId: tokenId.toString(), value: owners.filter(item=>{return item.address === owner})[0].value })\n        setOwners(owners)\n      })\n    }\n    return cb()\n  }\n\n  // const saveCache = (owners) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_leader', JSON.stringify(owners)) // Save new state for later\n  // }\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      getOwners()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    account && chainId ? getOwners() : setState({ loaded: true })\n  }, [])\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingOwners ? <Refreshing /> : ''}\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n        <Stack>\n          <Text>Total Value Locked: ${totalValueLocked}</Text>\n          {owners.map((item) => {\n            let pieces = location.pathname.split('/')\n            pieces.pop()\n            let url = location.origin + pieces.join('/') + '/vaultlist?address=' + item.address\n            return (            \n              <Link href={url} key={item.address}>Address: {item.address} Vaults: {item.vaults.length} TVL: {item.value}</Link>\n            )\n          })}\n        </Stack>        \n      </Flex>\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}