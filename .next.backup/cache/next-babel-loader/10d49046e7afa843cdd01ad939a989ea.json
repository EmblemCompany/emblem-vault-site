{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { FormControl, FormLabel, FormHelperText, Input, Stack, Box, Flex, Text, Textarea, Button, Link, Select } from '@chakra-ui/core';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport Loader from 'react-loader';\nimport { usePapaParse } from 'react-papaparse';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nexport default function Batch() {\n  _s();\n\n  var _this = this;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState('configure'),\n      status = _useState[0],\n      setStatus = _useState[1];\n\n  var _useState2 = useState([]),\n      batches = _useState2[0],\n      setBatches = _useState2[1];\n\n  var _useState3 = useState(-1),\n      demoIndex = _useState3[0],\n      setDemoIndex = _useState3[1];\n\n  var _useState4 = useState(query.action || 'list'),\n      action = _useState4[0],\n      setAction = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      batchName = _useState5[0],\n      setBatchName = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      imageBaseUrl = _useState6[0],\n      setImageBaseUrl = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      inscriptionBaseUrl = _useState7[0],\n      setInscriptionBaseUrl = _useState7[1];\n\n  var _useState8 = useState(\"\"),\n      addressType = _useState8[0],\n      setAddressType = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      titleTemplate = _useState9[0],\n      setTitleTemplate = _useState9[1];\n\n  var _useState10 = useState(\"\"),\n      descriptionTemplate = _useState10[0],\n      setDescriptionTemplate = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      total = _useState11[0],\n      setTotal = _useState11[1];\n\n  var _useState12 = useState(\"\"),\n      batchData = _useState12[0],\n      setBatchData = _useState12[1];\n\n  var _useState13 = useState([]),\n      batchDataJson = _useState13[0],\n      setBatchDataJson = _useState13[1];\n\n  var _useState14 = useState(query.batch_id || \"\"),\n      batchId = _useState14[0],\n      setBatchId = _useState14[1];\n\n  var _useState15 = useState({\n    loaded: false\n  }),\n      state = _useState15[0],\n      setState = _useState15[1];\n\n  var _usePapaParse = usePapaParse(),\n      readString = _usePapaParse.readString,\n      jsonToCSV = _usePapaParse.jsonToCSV;\n\n  useEffect(function () {\n    if (!state.loaded && batchId && !batchName) {\n      getBatch();\n    } else if (!state.loaded && !batchId && !batchName && action == 'list') {\n      getBatches();\n    } else {\n      setState({\n        loaded: true\n      });\n    }\n  }, []);\n\n  var getBatch = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/batch?batchId=\".concat(batchId), requestOptions).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n                  var record, parsedJson, csvData;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return response.json();\n\n                        case 2:\n                          record = _context.sent;\n                          setState({\n                            loaded: true\n                          });\n                          setBatchName(record.batch_name);\n                          setImageBaseUrl(record.image_base_url);\n                          setInscriptionBaseUrl(record.inscription_base_url);\n                          setAddressType(record.address_type);\n                          setStatus(record.status);\n                          setTitleTemplate(record.title_template);\n                          setDescriptionTemplate(record.description_template);\n                          parsedJson = JSON.parse(record.data);\n                          setBatchDataJson(parsedJson);\n                          csvData = jsonToCSV(parsedJson);\n                          setBatchData(csvData);\n                          setTotal((parsedJson.length - 1).toString());\n\n                        case 16:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getBatch() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getBatches = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/batches\", requestOptions).then( /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response) {\n                  var records;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return response.json();\n\n                        case 2:\n                          records = _context3.sent;\n                          console.log(records);\n                          setBatches(records);\n                          setState({\n                            loaded: true\n                          });\n\n                        case 6:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function (_x2) {\n                  return _ref4.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function getBatches() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var startBatch = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var myHeaders, raw, requestOptions;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append(\"Content-Type\", \"application/json\");\n              raw = JSON.stringify({\n                \"batchId\": batchId\n              });\n              requestOptions = {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw\n              };\n              fetch(EMBLEM_API + \"/startBatch\", requestOptions).then( /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(response) {\n                  var results;\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return response.json();\n\n                        case 2:\n                          results = _context5.sent;\n                          location.href = \"/?action=view&batch_id=\" + batchId;\n\n                        case 4:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n\n                return function (_x3) {\n                  return _ref6.apply(this, arguments);\n                };\n              }());\n\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function startBatch() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(event) {\n      var myHeaders, jsonData, serializedForm;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              event.preventDefault();\n              myHeaders = new Headers();\n              myHeaders.append(\"Content-Type\", \"application/json\");\n              _context8.next = 5;\n              return csvToJson(batchData);\n\n            case 5:\n              jsonData = _context8.sent;\n              serializedForm = {\n                batchName: batchName,\n                imageBaseUrl: imageBaseUrl,\n                inscriptionBaseUrl: inscriptionBaseUrl,\n                addressType: addressType,\n                titleTemplate: titleTemplate,\n                descriptionTemplate: descriptionTemplate,\n                total: total,\n                batchId: batchId,\n                batchData: jsonData.data\n              };\n              fetch(EMBLEM_API + '/addBatch', {\n                method: 'POST',\n                headers: myHeaders,\n                body: JSON.stringify(serializedForm)\n              }).then( /*#__PURE__*/function () {\n                var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(response) {\n                  var data;\n                  return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          _context7.next = 2;\n                          return response.json();\n\n                        case 2:\n                          data = _context7.sent;\n\n                          if (data.id) {\n                            setBatchId(data.id);\n                          }\n\n                        case 4:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }));\n\n                return function (_x5) {\n                  return _ref8.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 8:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function handleSubmit(_x4) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  function csvToJson(data) {\n    return new Promise(function (resolve, reject) {\n      readString(data, {\n        worker: true,\n        complete: function complete(results) {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  function parseTemplate(index, template) {\n    var tokens = listTokens(template);\n    var modifiedTitle = template;\n    tokens.forEach(function (item) {\n      var value = item == 'batch_name' ? batchName : item == 'asset_number' ? batchDataJson[index][0] : item == 'inscription_number' ? batchDataJson[index][1] : item == 'inscription_base_url' ? inscriptionBaseUrl : item == 'inscription_hash' ? batchDataJson[index][2] : '';\n      modifiedTitle = modifiedTitle.replace(item, value);\n    });\n    modifiedTitle = modifiedTitle.replaceAll('{', '').replaceAll('}', '');\n    return modifiedTitle;\n  }\n\n  function parseImage(index) {\n    return imageBaseUrl + batchDataJson[index][2];\n  }\n\n  function parseTo(index) {\n    return batchDataJson[index][3];\n  }\n\n  function listTokens(str) {\n    var regex = /\\{(.*?)\\}/g;\n    var result;\n    var items = [];\n\n    while (result = regex.exec(str)) {\n      items = items.concat(result[1].split(','));\n    }\n\n    return items;\n  }\n\n  function isValidBatchData() {\n    if (!batchDataJson) return false;\n    var hasRows = batchDataJson.length > 1;\n    if (!hasRows) return false;\n    var correctColumns = batchDataJson[0].length == 4;\n    var correctHeaders = batchDataJson[0][0] == 'asset_number' && batchDataJson[0][1] == 'inscription_number' && batchDataJson[0][2] == 'inscription_hash' && batchDataJson[0][3] == 'to';\n    var batchNotStarted = status == 'configure';\n    return hasRows && correctColumns && correctHeaders && batchNotStarted;\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  }, action && (action == 'edit' || action == 'add') ? __jsx(React.Fragment, null, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 15\n    }\n  }, __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }\n  }, \" All Batch Jobs\"), batchId ? __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=view&batch_id=\" + batchId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 19\n    }\n  }, \" View Job\") : null), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 19\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"batch-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 23\n    }\n  }, \"Batch Name\"), __jsx(Input, {\n    type: \"text\",\n    id: \"batch-name\",\n    \"aria-describedby\": \"batch-name-text\",\n    value: batchName,\n    onChange: function onChange(e) {\n      return setBatchName(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"batch-name-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 23\n    }\n  }, \"Give it a unique name for this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"image-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 23\n    }\n  }, \"Image Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"image-base-url\",\n    \"aria-describedby\": \"image-base-url-text\",\n    value: imageBaseUrl,\n    onChange: function onChange(e) {\n      return setImageBaseUrl(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"image-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 23\n    }\n  }, \"Enter the base url for the images in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"inscription-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 23\n    }\n  }, \"Inscription Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"inscription-base-url\",\n    \"aria-describedby\": \"inscription-base-url-text\",\n    value: inscriptionBaseUrl,\n    onChange: function onChange(e) {\n      return setInscriptionBaseUrl(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"inscription-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 23\n    }\n  }, \"Enter the base url for the inscriptions in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"address-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 23\n    }\n  }, \"Address Type\"), __jsx(Input, {\n    type: \"text\",\n    id: \"address-type\",\n    \"aria-describedby\": \"address-type-text\",\n    value: addressType,\n    onChange: function onChange(e) {\n      return setAddressType(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"address-type-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 23\n    }\n  }, \"Enter the address type for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"title-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 23\n    }\n  }, \"Title Template\"), __jsx(Textarea, {\n    id: \"title-template\",\n    fontSize: 'xx-small',\n    size: \"lg\",\n    \"aria-describedby\": \"title-template-text\",\n    minLength: 3,\n    maxLength: 4024,\n    value: titleTemplate,\n    onChange: function onChange(e) {\n      return setTitleTemplate(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"title-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 23\n    }\n  }, \"Enter the title template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 23\n    }\n  }, \"Description Template\"), __jsx(Textarea, {\n    id: \"description-template\",\n    fontSize: 'xx-small',\n    size: \"lg\",\n    \"aria-describedby\": \"description-template-text\",\n    minLength: 3,\n    maxLength: 1024,\n    value: descriptionTemplate,\n    onChange: function onChange(e) {\n      return setDescriptionTemplate(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"description-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 23\n    }\n  }, \"Enter the description template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 23\n    }\n  }, \"Total\"), __jsx(Input, {\n    isDisabled: true,\n    type: \"number\",\n    id: \"total\",\n    \"aria-describedby\": \"total-text\",\n    value: total,\n    onChange: function onChange(e) {\n      return setTotal(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"total-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 23\n    }\n  }, \"Enter the total number of items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 23\n    }\n  }, \"Records\"), __jsx(Textarea, {\n    id: \"records\",\n    size: \"lg\",\n    fontSize: 'xx-small',\n    \"aria-describedby\": \"records-text\",\n    minLength: 3,\n    value: batchData,\n    onChange: /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(e) {\n        var jsonData;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                setBatchData(e.target.value);\n                _context9.next = 3;\n                return csvToJson(e.target.value);\n\n              case 3:\n                jsonData = _context9.sent;\n                setBatchDataJson(jsonData.data);\n                setTotal(jsonData.data.length > 1 ? (jsonData.data.length - 1).toString() : '0');\n\n              case 6:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      return function (_x6) {\n        return _ref9.apply(this, arguments);\n      };\n    }(),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"records-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 23\n    }\n  }, \"Enter the CSV rows from the helper spreadsheet\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"15px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 19\n    }\n  }, __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    isDisabled: !isValidBatchData(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 21\n    }\n  }, \"Save Batch Job\"), __jsx(Button, {\n    mt: 4,\n    isDisabled: !isValidBatchData() || status == \"running\",\n    onClick: startBatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 21\n    }\n  }, \"Start Batch Job\")), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"15px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 19\n    }\n  }, isValidBatchData() ? __jsx(Select, {\n    id: \"type-selector\",\n    w: \"100%\",\n    value: demoIndex,\n    onChange: function onChange(e) {\n      setDemoIndex(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 23\n    }\n  }, __jsx(\"option\", {\n    value: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 25\n    }\n  }, \"Select # to preview\"), batchDataJson.map(function (item, index) {\n    console.log(item);\n\n    if (index > 0) {\n      return __jsx(\"option\", {\n        value: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 31\n        }\n      }, parseTemplate(index, titleTemplate));\n    }\n  })) : null), __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 19\n    }\n  }, demoIndex && demoIndex > -1 ? __jsx(React.Fragment, null, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 25\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: parseTemplate(demoIndex, descriptionTemplate),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 27\n    }\n  })), __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: parseImage(demoIndex),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 25\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 25\n    }\n  }, \"Vault For: \", parseTo(demoIndex))) : null))))) : action == 'list' ? __jsx(Box, {\n    maxW: \"lg\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 11\n    }\n  }, batches.length > 0 ? batches.map(function (item, index) {\n    return __jsx(Stack, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 17\n      }\n    }, __jsx(Link, {\n      margin: \"10px\",\n      href: \"/batch?action=edit&batch_id=\" + item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 19\n      }\n    }, \" \", item.batch_name, \" (\", item.status, \")\"));\n  }) : null, __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 11\n    }\n  }, \" Add New Batch\")) : null));\n}\n\n_s(Batch, \"Rx2/PFW41kxoDlpKjSKBof5jDGM=\", false, function () {\n  return [useRouter, usePapaParse];\n});\n\n_c = Batch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Batch\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx"],"names":["FormControl","FormLabel","FormHelperText","Input","Stack","Box","Flex","Text","Textarea","Button","Link","Select","useRouter","useEffect","useState","EMBLEM_API","Loader","usePapaParse","ReactMarkdown","gfm","Embed","Batch","query","status","setStatus","batches","setBatches","demoIndex","setDemoIndex","action","setAction","batchName","setBatchName","imageBaseUrl","setImageBaseUrl","inscriptionBaseUrl","setInscriptionBaseUrl","addressType","setAddressType","titleTemplate","setTitleTemplate","descriptionTemplate","setDescriptionTemplate","total","setTotal","batchData","setBatchData","batchDataJson","setBatchDataJson","batch_id","batchId","setBatchId","loaded","state","setState","readString","jsonToCSV","getBatch","getBatches","requestOptions","method","fetch","then","response","json","record","batch_name","image_base_url","inscription_base_url","address_type","title_template","description_template","parsedJson","JSON","parse","data","csvData","length","toString","err","console","log","records","startBatch","myHeaders","Headers","append","raw","stringify","headers","body","results","location","href","handleSubmit","event","preventDefault","csvToJson","jsonData","serializedForm","id","Promise","resolve","reject","worker","complete","parseTemplate","index","template","tokens","listTokens","modifiedTitle","forEach","item","value","replace","replaceAll","parseImage","parseTo","str","regex","result","items","exec","concat","split","isValidBatchData","hasRows","correctColumns","correctHeaders","batchNotStarted","e","target","Number","map"],"mappings":"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","sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Stack,\n  Box,\n  Flex,\n  Text,\n  Textarea,\n  Button,\n  Link,\n  Select\n} from '@chakra-ui/core'\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport Loader from 'react-loader'\nimport { usePapaParse } from 'react-papaparse';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm'\nimport Embed from './Embed';\n\nexport default function Batch() {\n  const { query } = useRouter()\n  const [status, setStatus] = useState('configure')\n  const [batches, setBatches] = useState([])\n  const [demoIndex, setDemoIndex] = useState(-1)\n  const [action, setAction] = useState(query.action || 'list')\n  const [batchName, setBatchName] = useState(\"\");\n  const [imageBaseUrl, setImageBaseUrl] = useState(\"\");\n  const [inscriptionBaseUrl, setInscriptionBaseUrl] = useState(\"\");\n  const [addressType, setAddressType] = useState(\"\");\n  const [titleTemplate, setTitleTemplate] = useState(\"\");\n  const [descriptionTemplate, setDescriptionTemplate] = useState(\"\");\n  const [total, setTotal] = useState(\"\");\n  const [batchData, setBatchData] = useState(\"\");\n  const [batchDataJson, setBatchDataJson] = useState([]);\n  const [batchId, setBatchId] = useState(query.batch_id || \"\")\n  const [state, setState] = useState({ loaded: false })\n  const { readString, jsonToCSV } = usePapaParse();\n\n\n  useEffect(() => {\n    if (!state.loaded && batchId && !batchName) {\n      getBatch()\n    } else if (!state.loaded && !batchId && !batchName && action == 'list') {\n      getBatches()\n    } else {\n      setState({ loaded: true })\n    }\n  }, [])\n\n  const getBatch = async () => {\n    var requestOptions: any = {\n      method: 'GET'\n    };\n\n    fetch(EMBLEM_API + `/batch?batchId=${batchId}`, requestOptions).then(async (response) => {\n      let record = await response.json()\n      setState({ loaded: true })\n      setBatchName(record.batch_name)\n      setImageBaseUrl(record.image_base_url)\n      setInscriptionBaseUrl(record.inscription_base_url)\n      setAddressType(record.address_type)\n      setStatus(record.status)\n      setTitleTemplate(record.title_template)\n      setDescriptionTemplate(record.description_template)\n      let parsedJson = JSON.parse(record.data)\n      setBatchDataJson(parsedJson)\n      let csvData = jsonToCSV(parsedJson)\n      setBatchData(csvData)\n      setTotal((parsedJson.length - 1).toString())\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const getBatches = async () => {\n    var requestOptions: any = {\n      method: 'GET'\n    };\n\n    fetch(EMBLEM_API + `/batches`, requestOptions).then(async (response) => {\n      let records = await response.json()\n      console.log(records)\n      setBatches(records)\n      setState({ loaded: true })\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const startBatch = async () =>{\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    var raw = JSON.stringify({\n      \"batchId\": batchId\n    });\n\n    var requestOptions: any = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n    };\n\n    fetch(EMBLEM_API + \"/startBatch\", requestOptions).then(async (response) => {\n      let results = await response.json()\n      location.href=\"/?action=view&batch_id=\"+batchId\n    })\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    let jsonData: any = await csvToJson(batchData)\n    const serializedForm = {\n      batchName,\n      imageBaseUrl,\n      inscriptionBaseUrl,\n      addressType,\n      titleTemplate,\n      descriptionTemplate,\n      total,\n      batchId,\n      batchData: jsonData.data\n\n    };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm),\n    }).then(async (response) => {\n      let data = await response.json()\n      if (data.id) {\n        setBatchId(data.id)\n      }\n    }).catch(err => {\n      console.log(err)\n    })\n  };\n\n  function csvToJson(data) {\n    return new Promise((resolve, reject) => {\n      readString(data, {\n        worker: true,\n        complete: (results: any) => {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  function parseTemplate(index, template){\n    let tokens = listTokens(template)\n    let modifiedTitle = template\n    tokens.forEach((item)=>{\n      let value = \n      item == 'batch_name'? batchName:\n      item == 'asset_number'? batchDataJson[index][0]:\n      item == 'inscription_number'? batchDataJson[index][1]:\n      item == 'inscription_base_url'? inscriptionBaseUrl:\n      item == 'inscription_hash'? batchDataJson[index][2]:\n      ''\n      modifiedTitle = modifiedTitle.replace(item, value)\n    })\n    modifiedTitle = modifiedTitle.replaceAll('{', '').replaceAll('}', '')\n    return modifiedTitle\n  }\n\n  function parseImage(index) {\n    return imageBaseUrl + batchDataJson[index][2]\n  }\n\n  function parseTo(index) {\n    return batchDataJson[index][3]\n  }\n\n  function listTokens(str) {\n    let regex = /\\{(.*?)\\}/g;\n    let result;\n    let items = [];\n    \n    while (result = regex.exec(str)) {\n      items = items.concat(result[1].split(','))\n    }\n  \n    return items;\n  }\n\n  function isValidBatchData() {\n    if (!batchDataJson) return false\n    let hasRows = batchDataJson.length > 1\n    if (!hasRows) return false\n    let correctColumns = batchDataJson[0].length == 4\n    let correctHeaders = batchDataJson[0][0] == 'asset_number' && batchDataJson[0][1] == 'inscription_number' && batchDataJson[0][2] == 'inscription_hash' && batchDataJson[0][3] == 'to'\n    let batchNotStarted = status == 'configure'\n    return hasRows && correctColumns && correctHeaders && batchNotStarted\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n        {action && (action == 'edit' || action == 'add') ? (\n          <>\n            <Stack>\n              <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n              <Stack>\n                <Link margin=\"10px\" href={\"/batch?action=list\"}> All Batch Jobs</Link>\n                {batchId? (\n                  <Link margin=\"10px\" href={\"/batch?action=view&batch_id=\"+batchId}> View Job</Link>\n                ): null}                \n              </Stack>\n                <form onSubmit={handleSubmit}>\n                  <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"batch-name\">Batch Name</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"batch-name\"\n                        aria-describedby=\"batch-name-text\"\n                        value={batchName}\n                        onChange={(e) => setBatchName(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"batch-name-text\">Give it a unique name for this batch.</FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"image-base-url\">Image Base Url</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"image-base-url\"\n                        aria-describedby=\"image-base-url-text\"\n                        value={imageBaseUrl}\n                        onChange={(e) => setImageBaseUrl(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"image-base-url-text\">\n                        Enter the base url for the images in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"inscription-base-url\">Inscription Base Url</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"inscription-base-url\"\n                        aria-describedby=\"inscription-base-url-text\"\n                        value={inscriptionBaseUrl}\n                        onChange={(e) => setInscriptionBaseUrl(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"inscription-base-url-text\">\n                        Enter the base url for the inscriptions in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"address-type\">Address Type</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"address-type\"\n                        aria-describedby=\"address-type-text\"\n                        value={addressType}\n                        onChange={(e) => setAddressType(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"address-type-text\">\n                        Enter the address type for the items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"title-template\">Title Template</FormLabel>\n                      <Textarea\n                        id=\"title-template\"\n                        fontSize={'xx-small'}\n                        size=\"lg\"\n                        aria-describedby=\"title-template-text\"\n                        minLength={3}\n                        maxLength={4024}\n                        value={titleTemplate}\n                        onChange={(e) => setTitleTemplate(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"title-template-text\">\n                        Enter the title template for the items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"description-template\">Description Template</FormLabel>\n                      <Textarea\n                        id=\"description-template\"\n                        fontSize={'xx-small'}\n                        size=\"lg\"\n                        aria-describedby=\"description-template-text\"\n                        minLength={3}\n                        maxLength={1024}\n                        value={descriptionTemplate}\n                        onChange={(e) => setDescriptionTemplate(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"description-template-text\">\n                        Enter the description template for the items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"total\">Total</FormLabel>\n                      <Input\n                        isDisabled={true}\n                        type=\"number\"\n                        id=\"total\"\n                        aria-describedby=\"total-text\"\n                        value={total}\n                        onChange={(e) => setTotal(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"total-text\">\n                        Enter the total number of items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"description-template\">Records</FormLabel>\n                      <Textarea\n                        id=\"records\"\n                        size=\"lg\"\n                        fontSize={'xx-small'}\n                        aria-describedby=\"records-text\"\n                        minLength={3}\n                        value={batchData}\n                        onChange={async (e) => {\n                          setBatchData(e.target.value)\n                          let jsonData: any = await csvToJson(e.target.value)\n                          setBatchDataJson(jsonData.data)\n                          setTotal(jsonData.data.length > 1 ? (jsonData.data.length - 1).toString() : '0')\n                        }}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"records-text\">\n                        Enter the CSV rows from the helper spreadsheet\n                      </FormHelperText>\n                    </FormControl>\n                  </Stack>\n                  <Stack direction=\"row\" align=\"flex-start\" padding=\"15px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <Button mt={4} type=\"submit\" isDisabled={!isValidBatchData()} >\n                      Save Batch Job\n                    </Button>\n                    <Button mt={4} isDisabled={!isValidBatchData() || status == \"running\"} onClick={startBatch}>\n                      Start Batch Job\n                    </Button>\n                  </Stack>\n                  <Stack direction=\"row\" align=\"flex-start\" padding=\"15px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    {isValidBatchData()? (\n                      <Select id=\"type-selector\" w=\"100%\" value={demoIndex}\n                      onChange={(e)=>{\n                        setDemoIndex(Number(e.target.value))\n                      }}\n                      >\n                        <option value=\"-1\" >Select # to preview</option>\n                        {batchDataJson.map((item, index)=>{\n                          console.log(item)\n                          if (index > 0) {\n                            return (\n                              <option value={index}>{parseTemplate(index, titleTemplate)}</option> \n                            )\n                          }\n                        })}\n                      </Select>\n                    ): null}                  \n                  </Stack>\n                  <Stack>\n                    {demoIndex && demoIndex > -1 ? (\n                      <>\n                        <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" className=\"md\">\n                          <ReactMarkdown plugins={[gfm]} children={parseTemplate(demoIndex, descriptionTemplate)} />\n                        </Text>\n                        <Embed className=\"d-block w-100 NFT-image\" url={parseImage(demoIndex)}/>\n                        <Text>Vault For: {parseTo(demoIndex)}</Text>\n                      </>\n                    ) : null}\n                  </Stack>\n                </form>\n              </Box>\n            </Stack>\n          </>\n        ) : action == 'list'? (\n          <Box maxW=\"lg\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n            {batches.length> 0 ? batches.map((item, index)=>{\n              return (\n                <Stack>\n                  <Link margin=\"10px\" href={\"/batch?action=edit&batch_id=\"+item.id}> {item.batch_name} ({item.status})</Link>\n                </Stack>\n              )\n            }):null}\n          <Link margin=\"10px\" href={\"/batch?action=add\"}> Add New Batch</Link>\n          </Box>\n        ): null}\n        \n      </Flex>\n\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}