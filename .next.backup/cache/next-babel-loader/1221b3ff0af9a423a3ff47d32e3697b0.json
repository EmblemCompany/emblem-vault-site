{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Image, Stack, Button, Input } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { HStack, VStack, Circle, Divider } from '@chakra-ui/react';\nexport default function PnL() {\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useState = useState({\n    loaded: true\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(false),\n      loadingApi = _useState2[0],\n      setLoadingApi = _useState2[1];\n\n  var _useState3 = useState([]),\n      stats = _useState3[0],\n      setStats = _useState3[1];\n\n  var _useState4 = useState(query.address || null),\n      address = _useState4[0],\n      setAddress = _useState4[1];\n\n  var _useState5 = useState(0),\n      offset = _useState5[0],\n      setOffset = _useState5[1];\n\n  var _useState6 = useState(10),\n      limit = _useState6[0],\n      setLimit = _useState6[1];\n\n  var _useState7 = useState(address ? true : false),\n      shouldFetchData = _useState7[0],\n      setShouldFetchData = _useState7[1];\n\n  var _useState8 = useState(true),\n      hasMore = _useState8[0],\n      setHasMore = _useState8[1];\n\n  var _useState9 = useState(false),\n      buttonDisabled = _useState9[0],\n      setButtonDisabled = _useState9[1];\n\n  useEffect(function () {\n    if (state.loaded == false && !loadingApi && address) {\n      setLoadingApi(false);\n      getPnL();\n    }\n  }, []);\n  useEffect(function () {\n    if (shouldFetchData && address) {\n      console.log(\"Should load api after setting consts\", offset);\n      setShouldFetchData(false);\n      getPnL();\n    } else {\n      console.log(\"wtf\");\n    }\n  }, [shouldFetchData, offset]);\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('setting new offset to', offset + limit);\n              setOffset(offset + limit);\n              setShouldFetchData(true);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getPnL = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              setButtonDisabled(true);\n              console.log(\"getting logs\");\n              fetch('https://api.emblemvault.io/s:osautomate/offer/' + address + '?limit=' + limit + '&offset=' + offset, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              }).then( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {\n                  var jsonData;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          setLoadingApi(false); // setState({ loaded: true })\n\n                          _context2.next = 3;\n                          return response.json();\n\n                        case 3:\n                          jsonData = _context2.sent;\n                          setStats(stats.concat(jsonData.intelligences));\n                          setButtonDisabled(false);\n                          console.log(jsonData);\n\n                          if (jsonData.intelligences.length == 0) {\n                            setHasMore(false);\n                          }\n\n                        case 8:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x) {\n                  return _ref3.apply(this, arguments);\n                };\n              }());\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getPnL() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Loader, {\n    loaded: state.loaded\n  }, loadingApi ? __jsx(Refreshing, null) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10\n  }, __jsx(Stack, {\n    align: \"center\",\n    w: \"100%\"\n  }, __jsx(HStack, {\n    w: \"20%\",\n    mt: 2\n  }, __jsx(Input, {\n    placeholder: \"Address: 0x...\",\n    w: \"100%\",\n    onChange: function onChange(e) {\n      setAddress(e.target.value);\n    },\n    value: address\n  }), __jsx(Button, {\n    isDisabled: buttonDisabled,\n    onClick: function onClick() {\n      setShouldFetchData(true);\n      setStats([]);\n    }\n  }, \"Generate\")), buttonDisabled ? __jsx(Refreshing, null) : '', stats.length > 0 ? __jsx(React.Fragment, null, __jsx(InfiniteScroll, {\n    className: \"infinite-scroll\",\n    scrollableTarget: \"shannon-container\" // height={200}\n    ,\n    dataLength: stats.length //This is important field to render the next data\n    ,\n    next: fetchData,\n    hasMore: hasMore,\n    loader: __jsx(Refreshing, null),\n    endMessage: __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(\"b\", null, \"Yay! You have seen it all\"))\n  }, stats.map(function (item, index) {\n    return __jsx(React.Fragment, null, __jsx(Stack, {\n      direction: \"row\",\n      h: \"35px\",\n      p: 2\n    }, __jsx(Divider, {\n      orientation: \"vertical\"\n    })), __jsx(HStack, {\n      key: \"container-\" + index,\n      p: 2,\n      m: 5,\n      \"border-width\": 1\n    }, __jsx(Box, {\n      className: \"coin-image-container\",\n      m: 2,\n      \"min-width\": \"40px\"\n    }, item.image ? __jsx(Image, {\n      width: \"50px\",\n      src: item.image\n    }) : __jsx(Circle, {\n      size: \"40px\",\n      bg: \"gray\",\n      color: \"white\",\n      isTruncated: true\n    }, item.collection[0])), __jsx(VStack, {\n      p: \"10px\",\n      w: \"100%\"\n    }, __jsx(HStack, {\n      w: \"100%\"\n    }, __jsx(Text, {\n      \"float\": \"left\",\n      pb: 2,\n      width: \"100%\",\n      fontWeight: \"bold\",\n      isTruncated: true\n    }, item.collection, \" : \", item.name ? item.name : '#' + item.tokenId)), __jsx(HStack, {\n      w: \"100%\",\n      pt: 5,\n      spacing: \"4px\",\n      className: \"coin-display-row\"\n    }, __jsx(Text, {\n      position: \"relative\",\n      fontSize: \"xs\",\n      width: \"15%\",\n      color: \"gray\"\n    }, \"Purchased for \", item.totalCost, \" \\u039E\"), __jsx(Text, {\n      width: \"25%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }, item.offerAmount > 0 ? 'Best Offer: ' + item.offerAmount.toFixed(4) + ' Ξ' : 'No Offers'), __jsx(Text, {\n      width: \"25%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }, item.forSale ? 'For Sale: ' + item.salePrice + ' Ξ' : 'Not for sale'), __jsx(Text, {\n      width: \"15%\",\n      \"text-align\": \"center\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }, \"Floor: \", item.floor, \" \\u039E\")), __jsx(HStack, {\n      w: \"100%\",\n      pt: 5,\n      spacing: \"4px\",\n      className: \"coin-display-row\"\n    }, __jsx(Text, {\n      position: \"relative\",\n      fontSize: \"xs\",\n      width: \"15%\",\n      color: \"gray\"\n    }), __jsx(Text, {\n      width: \"25%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }, item.offerPnL ? 'Offer / Cost △ : ' + (item.offerPnL || 0).toFixed(4) + ' Ξ' : ''), __jsx(Text, {\n      width: \"25%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }, item.forSale ? 'If Sold Profit: ' + item.salePnL.toFixed(4) + ' Ξ' : ''), __jsx(Text, {\n      width: \"15%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }), __jsx(Text, {\n      width: \"15%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    })), __jsx(HStack, {\n      w: \"100%\",\n      pt: 5,\n      spacing: \"4px\",\n      className: \"coin-display-row\"\n    }, __jsx(Text, {\n      position: \"relative\",\n      fontSize: \"xs\",\n      width: \"15%\",\n      color: \"gray\"\n    }), __jsx(Text, {\n      width: \"25%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }, item.offerVsFloor ? 'Offer / Floor △: ' + item.offerVsFloor.toFixed(4) + ' Ξ' : ''), __jsx(Text, {\n      width: \"25%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }, item.forSale ? 'Sale / Floor △: ' + item.saleVsFloor.toFixed(4) + ' Ξ' : ''), __jsx(Text, {\n      width: \"15%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }), __jsx(Text, {\n      width: \"15%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    })))));\n  }))) : null)));\n}","map":null,"metadata":{},"sourceType":"module"}