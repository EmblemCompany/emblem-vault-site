{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Vault.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, useDisclosure } from '@chakra-ui/core';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { validImage } from '../utils';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport Tilt from 'react-tilt';\nvar AddrModal = dynamic(_c = function _c() {\n  return import('./AddrModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./AddrModal')];\n    },\n    modules: ['./AddrModal']\n  }\n});\n_c2 = AddrModal;\nvar KeysModal = dynamic(_c3 = function _c3() {\n  return import('./KeysModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./KeysModal')];\n    },\n    modules: ['./KeysModal']\n  }\n});\n_c4 = KeysModal;\nexport default function Vault() {\n  _s();\n\n  var _this = this;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query,\n      pathname = _useRouter.pathname,\n      replace = _useRouter.replace;\n\n  var _useState = useState(query.id),\n      tokenId = _useState[0],\n      setTokenId = _useState[1];\n\n  var _useState2 = useState(''),\n      vaultName = _useState2[0],\n      setVaultName = _useState2[1];\n\n  var _useState3 = useState(''),\n      vaultDesc = _useState3[0],\n      setVaultDesc = _useState3[1];\n\n  var _useState4 = useState(''),\n      vaultImage = _useState4[0],\n      setVaultImage = _useState4[1];\n\n  var _useState5 = useState([]),\n      vaultValues = _useState5[0],\n      setVaultValues = _useState5[1];\n\n  var _useState6 = useState([]),\n      vaultAddresses = _useState6[0],\n      setVaultAddresses = _useState6[1];\n\n  var _useState7 = useState(false),\n      vaultPrivacy = _useState7[0],\n      setVaultPrivacy = _useState7[1];\n\n  var _useState8 = useState(null),\n      vaultChainId = _useState8[0],\n      setVaultChainId = _useState8[1];\n\n  var _useState9 = useState(null),\n      hash = _useState9[0],\n      setHash = _useState9[1];\n\n  var _useState10 = useState(''),\n      currCoin = _useState10[0],\n      setCurrCoin = _useState10[1];\n\n  var _useState11 = useState(''),\n      currAddr = _useState11[0],\n      setCurrAddr = _useState11[1];\n\n  var _useState12 = useState({\n    loaded: false\n  }),\n      state = _useState12[0],\n      setState = _useState12[1];\n\n  var _useState13 = useState(false),\n      allowed = _useState13[0],\n      setAllowed = _useState13[1];\n\n  var _useState14 = useState(false),\n      mine = _useState14[0],\n      setMine = _useState14[1];\n\n  var _useState15 = useState(false),\n      claiming = _useState15[0],\n      setClaiming = _useState15[1];\n\n  var _useState16 = useState('claimed'),\n      status = _useState16[0],\n      setStatus = _useState16[1];\n\n  var _useState17 = useState(null),\n      claimedBy = _useState17[0],\n      setClaimedBy = _useState17[1];\n\n  var _useState18 = useState(''),\n      mnemonic = _useState18[0],\n      setMnemonic = _useState18[1];\n\n  var _useState19 = useState(''),\n      privKeyBTC = _useState19[0],\n      setPrivKeyBTC = _useState19[1];\n\n  var _useState20 = useState(''),\n      privKeyETH = _useState20[0],\n      setPrivKeyETH = _useState20[1];\n\n  var _useState21 = useState(false),\n      loadingApi = _useState21[0],\n      setLoadingApi = _useState21[1];\n\n  var _useState22 = useState(''),\n      decryptedEffect = _useState22[0],\n      setDecryptedEffect = _useState22[1];\n\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  var _useDisclosure = useDisclosure(),\n      isOpenAddrModal = _useDisclosure.isOpen,\n      onOpenAddrModal = _useDisclosure.onOpen,\n      onCloseAddrModal = _useDisclosure.onClose;\n\n  var _useDisclosure2 = useDisclosure(),\n      isOpenKeysModal = _useDisclosure2.isOpen,\n      onOpenKeysModal = _useDisclosure2.onOpen,\n      onCloseKeysModal = _useDisclosure2.onClose;\n\n  var getVault = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              loadCache();\n              _context.next = 3;\n              return fetch(EMBLEM_API + '/meta/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 3:\n              responce = _context.sent;\n              _context.next = 6;\n              return responce.json();\n\n            case 6:\n              jsonData = _context.sent;\n              console.log(jsonData);\n              setStates(jsonData);\n              saveCache(jsonData);\n              setLoadingApi(false);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getVault() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var setStates = function setStates(jsonData) {\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setVaultDesc(jsonData.description);\n    setVaultValues(jsonData.values);\n    setVaultDesc(jsonData.description);\n    setVaultAddresses(jsonData.addresses);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : 4);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    }\n\n    setState({\n      loaded: true\n    });\n    var isPvt = jsonData.addresses.filter(function (item) {\n      return item.address.includes('private:');\n    }).length > 0;\n    console.log(\"pvt\", isPvt);\n    setVaultPrivacy(isPvt);\n  };\n\n  var loadCache = function loadCache() {\n    var vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  var saveCache = function saveCache(vault) {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  var getKeys = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature\n              });\n              _context2.next = 7;\n              return fetch(EMBLEM_API + '/verify/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context2.sent;\n              _context2.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context2.sent;\n              return _context2.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getKeys(_x, _x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var owner;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return emblemContract.ownerOf(tokenId);\n\n            case 2:\n              owner = _context3.sent;\n              setMine(owner === account);\n\n              if (mine) {\n                setAllowed(true);\n              }\n\n              console.log('status', status, 'claimedBy', claimedBy);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getContractStates() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleApprove = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(function (_ref5) {\n                var hash = _ref5.hash;\n                setHash(hash);\n              });\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function handleApprove() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var handleSign = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n              library.getSigner(account).signMessage('Claim: ' + tokenId).then(function (signature) {\n                getKeys(signature, tokenId, function (result) {\n                  // alert('Mnemonic: ' + result.decrypted.phrase)\n                  setMnemonic(result.decrypted.phrase);\n                  setPrivKeyBTC('BTC KEY');\n                  setPrivKeyETH('ETH KEY');\n                  onOpenKeysModal();\n                  console.log(result.decrypted);\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function handleSign() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var handleClaim = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(function (_ref8) {\n                var hash = _ref8.hash;\n                setClaiming(true);\n                setTimeout(function () {\n                  setHash(hash);\n                  handleSign();\n                  onOpenKeysModal();\n                }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n              });\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function handleClaim() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var startDecryptEffect = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var theLetters, ctnt, speed, increment, clen, si, stri, block, fixed, nextFrame;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              nextFrame = function _nextFrame(pos) {\n                for (var i = 0; i < clen - stri; i++) {\n                  //Random number\n                  var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n                  var letter = theLetters.charAt(num);\n                  block = block + letter;\n                }\n\n                if (si == increment - 1) {\n                  stri++;\n                }\n\n                if (si == increment) {\n                  // Add a letter; \n                  // every speed*10 ms\n                  fixed = fixed + ctnt.charAt(stri - 1);\n                  si = 0;\n                } // $(\"#output\").html(fixed + block);\n\n\n                setDecryptedEffect(fixed + block);\n                block = \"\";\n              };\n\n              theLetters = \"abcdefghijklmnopqrstuvwxyz\"; //You can customize what letters it will cycle through\n\n              ctnt = \"Decrypting\"; // Your text goes here\n\n              speed = 5; // ms per frame\n\n              increment = 8; // frames per step. Must be >2\n\n              clen = ctnt.length;\n              si = 0;\n              stri = 0;\n              block = \"\";\n              fixed = \"\";\n\n              (function rustle(i) {\n                setTimeout(function () {\n                  if (--i) {\n                    rustle(i);\n                  }\n\n                  nextFrame(i);\n                  si = si + 1;\n                }, speed);\n              })(clen * increment + 1);\n\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function startDecryptEffect() {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getVault();\n  }, []);\n  useEffect(function () {\n    console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId);\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null;\n  });\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n');\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(pass) {\n    startDecryptEffect();\n    console.log(pass);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }\n  }), __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 22\n    }\n  }) : '', __jsx(Tilt, {\n    className: \"Tilt\",\n    options: {\n      max: 5,\n      scale: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, vaultChainId != chainId ? __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"orange.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 15\n    }\n  }, \"Vault is on a different network than you are.\") : null, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }\n  }, vaultName), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }\n  }, __jsx(Image, {\n    src: validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png',\n    width: \"250px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 15\n    }\n  })), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 17\n    }\n  }, splitDescription(vaultDesc)))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 19\n    }\n  }, \"Current Contents:\"), vaultPrivacy ? __jsx(React.Fragment, null, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 23\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: function onChange(e) {\n      return tryDecrypt(e.target.value);\n    },\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 23\n    }\n  })) : vaultValues.length ? vaultValues.map(function (coin) {\n    return __jsx(Text, {\n      key: coin.name,\n      isTruncated: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 25\n      }\n    }, coin.name, \": \", coin.balance);\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 21\n    }\n  }, \"Nothing in here! Fill 'er up!\"))), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"center\",\n    spacing: \"1rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 17\n    }\n  }, __jsx(ButtonGroup, {\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 19\n    }\n  }, vaultAddresses.map(function (addr) {\n    return __jsx(Button, {\n      key: addr.address,\n      onClick: function onClick() {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 25\n      }\n    }, \"Put \", addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin, \" In\");\n  })))) : null, status === 'claimed' && claimedBy === account ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 19\n    }\n  }, \"Get Keys\")) : __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 17\n    }\n  }, __jsx(Button, _extends({\n    width: \"100%\",\n    as: \"a\"\n  }, {\n    href: 'https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + contractAddresses.emblemVault[vaultChainId] + '/' + tokenId,\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 19\n    }\n  }), mine ? 'Sell/Gift/Send' : 'Make an Offer')), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 15\n    }\n  }, mine ? __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      if (allowed) {\n        handleClaim();\n      } else {\n        handleApprove();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 19\n    }\n  }, allowed ? 'Claim' : 'Approve') : ''))))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      if (claiming) {\n        setHash(null);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 11\n    }\n  }) : null));\n}\n\n_s(Vault, \"TsvCgF8wJisffmvpFP592ud3nw4=\", false, function () {\n  return [useWeb3React, useRouter, useContract, useDisclosure, useDisclosure];\n});\n\n_c5 = Vault;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"AddrModal$dynamic\");\n$RefreshReg$(_c2, \"AddrModal\");\n$RefreshReg$(_c3, \"KeysModal$dynamic\");\n$RefreshReg$(_c4, \"KeysModal\");\n$RefreshReg$(_c5, \"Vault\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Vault.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","useDisclosure","useWeb3React","useEffect","useState","useRouter","Refreshing","Loader","dynamic","validImage","TransactionToast","EMBLEM_API","BURN_ADDRESS","contractAddresses","useContract","Tilt","AddrModal","KeysModal","Vault","account","chainId","library","query","pathname","replace","id","tokenId","setTokenId","vaultName","setVaultName","vaultDesc","setVaultDesc","vaultImage","setVaultImage","vaultValues","setVaultValues","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultChainId","setVaultChainId","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","loaded","state","setState","allowed","setAllowed","mine","setMine","claiming","setClaiming","status","setStatus","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","emblemContract","emblemVault","emblemAbi","isOpenAddrModal","isOpen","onOpenAddrModal","onOpen","onCloseAddrModal","onClose","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","getVault","loadCache","fetch","method","headers","service","responce","json","jsonData","console","log","setStates","saveCache","name","image","description","values","addresses","network","isPvt","filter","item","address","includes","length","vault","JSON","parse","localStorage","getItem","setItem","stringify","getKeys","signature","cb","myHeaders","Headers","append","toString","raw","body","redirect","getContractStates","ownerOf","owner","handleApprove","setApprovalForAll","vaultHandler","then","handleSign","getSigner","signMessage","result","decrypted","phrase","handleClaim","transferFrom","setTimeout","startDecryptEffect","nextFrame","pos","i","clen","stri","num","Math","floor","theLetters","random","letter","charAt","block","si","increment","fixed","ctnt","speed","rustle","splitDescription","words","desc","split","trim","tryDecrypt","pass","max","scale","e","target","value","map","coin","balance","addr","href","rel"],"mappings":"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","sourcesContent":["import { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, useDisclosure, Spinner } from '@chakra-ui/core'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { validImage } from '../utils'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\n\nexport default function Vault() {\n  const { account, chainId, library } = useWeb3React()\n  const { query, pathname, replace } = useRouter()\n  const [tokenId, setTokenId] = useState(query.id)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [allowed, setAllowed] = useState(false)\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n\n  const getVault = async () => {\n    loadCache()\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    console.log(jsonData)\n    setStates(jsonData)\n    saveCache(jsonData)\n    setLoadingApi(false)\n  }\n\n  const setStates = (jsonData)=>{\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setVaultDesc(jsonData.description)\n    setVaultValues(jsonData.values)\n    setVaultDesc(jsonData.description)\n    setVaultAddresses(jsonData.addresses)\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : 4)\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    setState({ loaded: true })\n    let isPvt = jsonData.addresses.filter(item=>{return item.address.includes('private:')}).length > 0\n    console.log(\"pvt\", isPvt)\n    setVaultPrivacy(isPvt)\n  }\n\n  const loadCache = ()=>{\n    let vault = JSON.parse(localStorage.getItem(account + '_'+ chainId+'_' + tokenId +'_vault')) // Load vaults from storage before updating from server!\n    if (vault) {\n      setState({ loaded: true })\n      setStates(vault)\n      setLoadingApi(true)\n    }\n  }\n\n  const saveCache = (vault)=>{\n    localStorage.setItem(account + '_'+ chainId+'_' + tokenId +'_vault', JSON.stringify(vault))  // Save new state for later\n  }\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/verify/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    let owner = await emblemContract.ownerOf(tokenId)\n    setMine(owner === account)\n    if (mine) {\n      setAllowed(true)\n    }\n    console.log('status', status, 'claimedBy', claimedBy)\n  }\n\n  const handleApprove = async () => {\n    emblemContract\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + tokenId)\n      .then((signature) => {\n        getKeys(signature, tokenId, (result) => {\n          // alert('Mnemonic: ' + result.decrypted.phrase)\n          setMnemonic(result.decrypted.phrase)\n          setPrivKeyBTC('BTC KEY')\n          setPrivKeyETH('ETH KEY')\n          onOpenKeysModal()\n          console.log(result.decrypted)\n        })\n      })\n  }\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({ hash }: { hash: string }) => {\n      setClaiming(true)\n      setTimeout(() => {\n        setHash(hash)\n        handleSign()\n        onOpenKeysModal()\n      }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    })\n  }\n\n  const startDecryptEffect = async ()=>{\n    var theLetters = \"abcdefghijklmnopqrstuvwxyz\"; //You can customize what letters it will cycle through\n    var ctnt = \"Decrypting\"; // Your text goes here\n    var speed = 5; // ms per frame\n    var increment = 8; // frames per step. Must be >2\n\n        \n    var clen = ctnt.length;       \n    var si = 0;\n    var stri = 0;\n    var block = \"\";\n    var fixed = \"\";\n    (function rustle (i) {          \n      setTimeout(function () {\n        if (--i){rustle(i);}\n        nextFrame(i);\n        si = si + 1;        \n      }, speed);\n      })(clen*increment+1); \n      function nextFrame(pos){\n        for (var i=0; i<clen-stri; i++) {\n          //Random number\n          var num = Math.floor(theLetters.length * Math.random());\n          //Get random letter\n          var letter = theLetters.charAt(num);\n          block = block + letter;\n        }\n        if (si == (increment-1)){\n          stri++;\n        }\n        if (si == increment){\n        // Add a letter; \n        // every speed*10 ms\n        fixed = fixed +  ctnt.charAt(stri - 1);\n        si = 0;\n        }\n        // $(\"#output\").html(fixed + block);\n        setDecryptedEffect(fixed + block)\n        block = \"\";\n      }\n  }\n\n  useEffect(() => {\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null\n  })\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n')\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(pass) {\n    startDecryptEffect()\n    console.log(pass)\n  }\n\n  return (\n    <>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n      />\n\n      <Loader loaded={state.loaded}>\n      {loadingApi ? (<Refreshing/>) : ''}\n      <Tilt className=\"Tilt\" options={{ max : 5, scale: 1 }}  >      \n        <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n          <Box\n            maxW=\"sm\"\n            borderWidth=\"1px\"\n            borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n            rounded=\"lg\"\n            overflow=\"hidden\"\n            alignItems=\"center\"\n          >\n            {vaultChainId != chainId ? (\n              <Box\n                mt=\"1\"\n                fontWeight=\"semibold\"\n                as=\"h3\"\n                lineHeight=\"tight\"\n                p={2}\n                textAlign=\"center\"\n                textTransform=\"uppercase\"\n                alignItems=\"center\"\n                color=\"orange.500\"\n              >\n                Vault is on a different network than you are.\n              </Box>\n            ) : null}\n            <Box\n              mt=\"1\"\n              fontWeight=\"semibold\"\n              as=\"h3\"\n              lineHeight=\"tight\"\n              p={2}\n              textAlign=\"center\"\n              textTransform=\"uppercase\"\n              alignItems=\"center\"\n            >\n              {vaultName}\n            </Box>\n            <Stack align=\"center\">\n              <Image\n                src={validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png'}\n                width=\"250px\"\n              />\n            </Stack>\n            <Stack align=\"center\">\n              <Box mt=\"1\" ml=\"4\" lineHeight=\"tight\">\n                <Text as=\"h4\" ml=\"4\" mr=\"4\">\n                  {splitDescription(vaultDesc)}\n                </Text>\n              </Box>\n            </Stack>\n            <Box p=\"6\">\n              <Box d=\"flex\" alignItems=\"baseline\">\n                <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                  <Text as=\"h4\" fontWeight=\"semibold\">\n                    Current Contents:\n                  </Text>\n                  {vaultPrivacy ? (\n                    <>\n                      <Text pb={2} color={decryptedEffect? 'green.500': null } >{decryptedEffect? decryptedEffect : 'Contents hidden. Enter password to unlock.'}</Text>\n                      <Input\n                        type=\"password\"\n                        id=\"vault-password\"\n                        onChange={(e) => tryDecrypt(e.target.value)}\n                        aria-describedby=\"password-helper-text\"\n                      />\n                    </>\n                  ) : vaultValues.length ? (\n                    vaultValues.map((coin) => {\n                      return (\n                        <Text key={coin.name} isTruncated>\n                          {coin.name}: {coin.balance}\n                        </Text>\n                      )\n                    })\n                  ) : (\n                    <Text>Nothing in here! Fill 'er up!</Text>\n                  )}\n                </Box>\n              </Box>\n              {!vaultPrivacy ? (\n              <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                <Stack direction=\"row\" align=\"center\" spacing=\"1rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                  <ButtonGroup spacing={4}>\n                    {vaultAddresses.map((addr) => {\n                      return (\n                        <Button\n                          key={addr.address}\n                          onClick={() => {\n                            setCurrCoin(addr.coin)\n                            setCurrAddr(addr.address)\n                            onOpenAddrModal()\n                          }}\n                        >\n                          Put {addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin} In\n                        </Button>\n                      )\n                    })}\n                  </ButtonGroup>\n                </Stack>\n              </Box> ) : null }\n              {status === 'claimed' && claimedBy === account ? (\n                <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                  <Button width=\"100%\" onClick={handleSign}>\n                    Get Keys\n                  </Button>\n                </Box>\n              ) : (\n                <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                  <Button\n                    width=\"100%\"\n                    as=\"a\"\n                    {...{\n                      href:\n                        'https://' +\n                        (vaultChainId == 4 ? 'rinkeby.' : '') +\n                        'opensea.io/assets/' +\n                        contractAddresses.emblemVault[vaultChainId] +\n                        '/' +\n                        tokenId,\n                      target: '_blank',\n                      rel: 'noopener noreferrer',\n                    }}\n                  >\n                    {mine ? 'Sell/Gift/Send' : 'Make an Offer'}\n                  </Button>\n                </Box>\n              )}\n              <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                {mine ? (\n                  <Button\n                    width=\"100%\"\n                    onClick={() => {\n                      if (allowed) {\n                        handleClaim()\n                      } else {\n                        handleApprove()\n                      }\n                    }}\n                  >\n                    {allowed ? 'Claim' : 'Approve'}\n                  </Button>\n                ) : (\n                  ''\n                )}\n              </Box>\n            </Box>\n          </Box>\n        </Flex>\n      </Tilt>\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming) {\n                setHash(null)\n              }\n            }}\n          />\n        ) : null}\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}