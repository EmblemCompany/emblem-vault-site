{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/PnL.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nexport default function PnL() {\n  _s();\n\n  var _this = this;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useState = useState({\n    loaded: false\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(false),\n      loadingApi = _useState2[0],\n      setLoadingApi = _useState2[1];\n\n  var _useState3 = useState([]),\n      stats = _useState3[0],\n      setStats = _useState3[1];\n\n  var _useState4 = useState(query.address || \"0x3B31925EeC78dA3CF15c4503604c13b0eEBC57e5\"),\n      address = _useState4[0],\n      setAddress = _useState4[1];\n\n  var _useState5 = useState(0),\n      offset = _useState5[0],\n      setOffset = _useState5[1];\n\n  var _useState6 = useState(10),\n      limit = _useState6[0],\n      setLimit = _useState6[1];\n\n  var _useState7 = useState(false),\n      shouldFetchData = _useState7[0],\n      setShouldFetchData = _useState7[1];\n\n  useEffect(function () {\n    if (state.loaded == false && !loadingApi) {\n      setLoadingApi(false);\n      getPnL();\n    }\n  }, []);\n  useEffect(function () {\n    if (shouldFetchData) {\n      console.log(\"Should load api after setting consts\", offset);\n      setShouldFetchData(false);\n      getPnL();\n    } else {\n      console.log(\"wtf\");\n    }\n  }, [shouldFetchData, offset]);\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('setting new offset to', offset + limit);\n              setOffset(offset + limit);\n              setShouldFetchData(true);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getPnL = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log(\"getting logs\");\n              fetch('https://api.emblemvault.io/s:osautomate/offer/' + address + '?limit=' + limit + '&offset=' + offset, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              }).then( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {\n                  var jsonData;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          setLoadingApi(false);\n                          setState({\n                            loaded: true\n                          });\n                          _context2.next = 4;\n                          return response.json();\n\n                        case 4:\n                          jsonData = _context2.sent;\n                          setStats(stats.concat(jsonData.intelligences));\n                          console.log(jsonData);\n                          console.log(stats.length, offset, limit);\n\n                        case 8:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x) {\n                  return _ref3.apply(this, arguments);\n                };\n              }());\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getPnL() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, stats.length > 0 ? __jsx(React.Fragment, null, __jsx(InfiniteScroll, {\n    height: 200,\n    dataLength: stats.length //This is important field to render the next data\n    ,\n    next: fetchData,\n    hasMore: true,\n    loader: __jsx(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }, \"Loading...\"),\n    endMessage: __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 19\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, \"Yay! You have seen it all\")) // below props only if you need pull down functionality\n    // refreshFunction={this.refresh}\n    // pullDownToRefresh\n    // pullDownToRefreshThreshold={50}\n    // pullDownToRefreshContent={\n    //   <h3 style={{ textAlign: 'center' }}>&#8595; Pull down to refresh</h3>\n    // }\n    // releaseToRefreshContent={\n    //   <h3 style={{ textAlign: 'center' }}>&#8593; Release to refresh</h3>\n    // }\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, stats.map(function (item, index) {\n    return __jsx(Text, {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 27\n      }\n    }, item.collection, \" : \", item.name);\n  }))) : null)));\n}\n\n_s(PnL, \"Tl18Z6a3H/ifo+Mlhx8pZeW4Gf4=\", false, function () {\n  return [useRouter, useWeb3React];\n});\n\n_c = PnL;\n\nvar _c;\n\n$RefreshReg$(_c, \"PnL\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/PnL.tsx"],"names":["Flex","Text","Stack","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","InfiniteScroll","PnL","query","account","chainId","loaded","state","setState","loadingApi","setLoadingApi","stats","setStats","address","setAddress","offset","setOffset","limit","setLimit","shouldFetchData","setShouldFetchData","getPnL","console","log","fetchData","fetch","method","headers","then","response","json","jsonData","concat","intelligences","length","textAlign","map","item","index","collection","name"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\n\nexport default function PnL() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [stats, setStats] = useState([])\n  const [address, setAddress] = useState(query.address || \"0x3B31925EeC78dA3CF15c4503604c13b0eEBC57e5\")\n  const [offset, setOffset] = useState(0)\n  const [limit, setLimit] = useState(10)\n  const [shouldFetchData, setShouldFetchData] = useState(false)\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  useEffect(() => {\n    if (state.loaded == false && !loadingApi) {\n      setLoadingApi(false)\n      getPnL()\n    }\n  }, [])\n\n  useEffect(() => {\n    if (shouldFetchData) {\n      console.log(\"Should load api after setting consts\", offset)\n      setShouldFetchData(false)\n      getPnL()\n    } else {\n      console.log(\"wtf\")\n    }\n  }, [shouldFetchData, offset])\n\n  const fetchData = async() =>{\n    console.log('setting new offset to', offset+limit)\n    setOffset(offset+limit)\n    setShouldFetchData(true)\n  }\n\n  const getPnL = async() =>{\n    console.log(\"getting logs\")\n    fetch('https://api.emblemvault.io/s:osautomate/offer/'+address+'?limit='+limit+'&offset='+offset, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(async function (response) {\n      setLoadingApi(false)\n      setState({ loaded: true })\n      let jsonData = await response.json()\n      setStats(stats.concat(jsonData.intelligences))\n      console.log(jsonData)\n      console.log(stats.length, offset, limit)\n    })\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Stack align=\"center\">\n          {stats.length > 0? (\n            <>\n              {/* <Text>Total Offers in USD: ${stats.offers.toFixed(2)}</Text>\n              <Text>Total Number of offers: ${stats.offerCount.toFixed(2)}</Text> */}\n              <InfiniteScroll\n                height={200}\n                dataLength={stats.length} //This is important field to render the next data\n                next={fetchData}\n                hasMore={true}\n                loader={<h4>Loading...</h4>}\n                endMessage={\n                  <p style={{ textAlign: 'center' }}>\n                    <b>Yay! You have seen it all</b> \n                  </p>\n                }\n                // below props only if you need pull down functionality\n                // refreshFunction={this.refresh}\n                // pullDownToRefresh\n                // pullDownToRefreshThreshold={50}\n                // pullDownToRefreshContent={\n                //   <h3 style={{ textAlign: 'center' }}>&#8595; Pull down to refresh</h3>\n                // }\n                // releaseToRefreshContent={\n                //   <h3 style={{ textAlign: 'center' }}>&#8593; Release to refresh</h3>\n                // }\n              >\n                {stats.map((item, index)=>{\n                  return (<Text key={index}>{item.collection} : {item.name}</Text>)\n                })}\n              </InfiniteScroll>\n            </>\n          ) : null }\n        </Stack>\n      </Flex>\n     \n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}