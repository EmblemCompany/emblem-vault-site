{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Account.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, Suspense, useRef, useLayoutEffect } from 'react';\nimport { Button, Stack, Box, IconButton } from '@chakra-ui/react';\nimport { useWeb3React } from '@web3-react/core';\nimport { UserRejectedRequestError } from '@web3-react/injected-connector';\nimport MetaMaskOnboarding from '@metamask/onboarding';\nimport { formatEtherscanLink, ExplorerTXType, shortenHex } from '../utils';\nimport { injected, getNetwork } from '../connectors';\nimport { useETHBalance } from '../data';\nimport ErrorBoundary from './ErrorBoundary';\nimport { useQueryParameters, useUSDETHPrice } from '../hooks';\nimport { QueryParameters } from '../constants';\nimport { useShowUSD } from '../context';\n\nfunction ETHBalance() {\n  _s();\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account;\n\n  var _useETHBalance = useETHBalance(account, true),\n      data = _useETHBalance.data;\n\n  var _useShowUSD = useShowUSD(),\n      _useShowUSD2 = _slicedToArray(_useShowUSD, 1),\n      showUSD = _useShowUSD2[0];\n\n  var USDETHPrice = useUSDETHPrice();\n  return __jsx(Button, {\n    variant: \"outline\",\n    cursor: \"default\",\n    tabIndex: -1,\n    _hover: {},\n    _active: {},\n    _focus: {},\n    style: {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n      borderRight: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, \"\\u039E\", ' ', showUSD && USDETHPrice ? \"$\".concat(data.multiply(USDETHPrice).toFixed(2, {\n    groupSeparator: ','\n  })) : data.toSignificant(4, {\n    groupSeparator: ','\n  }));\n}\n\n_s(ETHBalance, \"MXQl8xJA6AG9kPTqCH+q2ZjTvfY=\", false, function () {\n  return [useWeb3React, useETHBalance, useShowUSD, useUSDETHPrice];\n});\n\n_c = ETHBalance;\nexport default function Account(_ref) {\n  _s2();\n\n  var _library$provider;\n\n  var triedToEagerConnect = _ref.triedToEagerConnect;\n\n  var _useWeb3React2 = useWeb3React(),\n      active = _useWeb3React2.active,\n      error = _useWeb3React2.error,\n      activate = _useWeb3React2.activate,\n      library = _useWeb3React2.library,\n      chainId = _useWeb3React2.chainId,\n      account = _useWeb3React2.account,\n      setError = _useWeb3React2.setError; // initialize metamask onboarding\n\n\n  var onboarding = useRef();\n  useLayoutEffect(function () {\n    onboarding.current = new MetaMaskOnboarding();\n  }, []); // automatically try connecting to the network connector where applicable\n\n  var queryParameters = useQueryParameters();\n  var requiredChainId = queryParameters[QueryParameters.CHAIN];\n  useEffect(function () {\n    if (triedToEagerConnect && !active && !error) {\n      activate(getNetwork(requiredChainId));\n    }\n  }, [triedToEagerConnect, active, error, requiredChainId, activate]); // manage connecting state for injected connector\n\n  var _useState = useState(false),\n      connecting = _useState[0],\n      setConnecting = _useState[1];\n\n  useEffect(function () {\n    if (active || error) {\n      var _onboarding$current;\n\n      setConnecting(false);\n      (_onboarding$current = onboarding.current) === null || _onboarding$current === void 0 ? void 0 : _onboarding$current.stopOnboarding();\n    }\n  }, [active, error]);\n\n  var _useState2 = useState(''),\n      ENSName = _useState2[0],\n      setENSName = _useState2[1];\n\n  useEffect(function () {\n    if (library && account) {\n      var stale = false;\n      library.lookupAddress(account).then(function (name) {\n        if (!stale && typeof name === 'string') {\n          setENSName(name);\n        }\n      })[\"catch\"](function () {}); // eslint-disable-line @typescript-eslint/no-empty-function\n\n      return function () {\n        stale = true;\n        setENSName('');\n      };\n    }\n  }, [library, account, chainId]);\n\n  if (error) {\n    return null;\n  } else if (!triedToEagerConnect) {\n    return null;\n  } else if (typeof account !== 'string') {\n    var _window, _window2;\n\n    return __jsx(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, MetaMaskOnboarding.isMetaMaskInstalled() || (_window = window) !== null && _window !== void 0 && _window.ethereum || (_window2 = window) !== null && _window2 !== void 0 && _window2.web3 ? __jsx(Button, {\n      isLoading: connecting,\n      leftIcon: MetaMaskOnboarding.isMetaMaskInstalled() ? 'metamask' : undefined,\n      onClick: function onClick() {\n        setConnecting(true);\n        activate(injected, undefined, true)[\"catch\"](function (error) {\n          // ignore the error if it's a user rejected request\n          if (error instanceof UserRejectedRequestError) {\n            setConnecting(false);\n          } else {\n            setError(error);\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }, MetaMaskOnboarding.isMetaMaskInstalled() ? 'Connect to MetaMask' : 'Connect to Wallet') : __jsx(Button, {\n      leftIcon: 'metamask',\n      onClick: function onClick() {\n        var _onboarding$current2;\n\n        return (_onboarding$current2 = onboarding.current) === null || _onboarding$current2 === void 0 ? void 0 : _onboarding$current2.startOnboarding();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, \"Install Metamask\"));\n  }\n\n  var leftIcon; // check walletconnect first because sometime metamask can be installed but we're still using walletconnect\n\n  if (library !== null && library !== void 0 && (_library$provider = library.provider) !== null && _library$provider !== void 0 && _library$provider.isWalletConnect) {\n    leftIcon = 'walletconnect';\n  } else if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n    leftIcon = 'metamask';\n  }\n\n  return __jsx(Stack, {\n    direction: \"row\",\n    spacing: 0,\n    whiteSpace: \"nowrap\",\n    m: 0,\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, __jsx(ErrorBoundary, {\n    fallback: __jsx(IconButton, {\n      variant: \"outline\",\n      icon: \"warning\",\n      \"aria-label\": \"Failed\",\n      isDisabled: true,\n      cursor: \"default !important\",\n      _hover: {},\n      _active: {},\n      style: {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0,\n        borderRight: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, __jsx(Suspense, {\n    fallback: __jsx(Button, {\n      variant: \"outline\",\n      isLoading: true,\n      cursor: \"default !important\",\n      _hover: {},\n      _active: {},\n      style: {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0,\n        borderRight: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, __jsx(ETHBalance, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }))), __jsx(Button, {\n    as: \"a\",\n    leftIcon: leftIcon ? leftIcon : undefined,\n    rightIcon: \"external-link\",\n    style: {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    },\n    href: formatEtherscanLink(ExplorerTXType.Account, [chainId, account]),\n    target: '_blank',\n    rel: 'noopener noreferrer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, ENSName || \"\".concat(shortenHex(account, 4))));\n}\n\n_s2(Account, \"p0uorTcMQigMW0VPh7V+OvCC4VM=\", false, function () {\n  return [useWeb3React, useQueryParameters];\n});\n\n_c2 = Account;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ETHBalance\");\n$RefreshReg$(_c2, \"Account\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Account.tsx"],"names":["useState","useEffect","Suspense","useRef","useLayoutEffect","Button","Stack","Box","IconButton","useWeb3React","UserRejectedRequestError","MetaMaskOnboarding","formatEtherscanLink","ExplorerTXType","shortenHex","injected","getNetwork","useETHBalance","ErrorBoundary","useQueryParameters","useUSDETHPrice","QueryParameters","useShowUSD","ETHBalance","account","data","showUSD","USDETHPrice","borderTopRightRadius","borderBottomRightRadius","borderRight","multiply","toFixed","groupSeparator","toSignificant","Account","triedToEagerConnect","active","error","activate","library","chainId","setError","onboarding","current","queryParameters","requiredChainId","CHAIN","connecting","setConnecting","stopOnboarding","ENSName","setENSName","stale","lookupAddress","then","name","isMetaMaskInstalled","window","ethereum","web3","undefined","startOnboarding","leftIcon","provider","isWalletConnect","borderTopLeftRadius","borderBottomLeftRadius","href","target","rel"],"mappings":"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","sourcesContent":["import { useState, useEffect, Suspense, useRef, useLayoutEffect } from 'react'\nimport { Button, Stack, Box, IconButton } from '@chakra-ui/react'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { useWeb3React } from '@web3-react/core'\nimport { UserRejectedRequestError } from '@web3-react/injected-connector'\nimport MetaMaskOnboarding from '@metamask/onboarding'\nimport { TokenAmount } from '@uniswap/sdk'\n\nimport { formatEtherscanLink, ExplorerTXType, shortenHex } from '../utils'\nimport { injected, getNetwork } from '../connectors'\nimport { useETHBalance } from '../data'\nimport ErrorBoundary from './ErrorBoundary'\nimport { useQueryParameters, useUSDETHPrice } from '../hooks'\nimport { QueryParameters } from '../constants'\nimport { useShowUSD } from '../context'\n\nfunction ETHBalance(): JSX.Element {\n  const { account } = useWeb3React()\n  const { data } = useETHBalance(account, true)\n\n  const [showUSD] = useShowUSD()\n  const USDETHPrice = useUSDETHPrice()\n\n  return (\n    <Button\n      variant=\"outline\"\n      cursor=\"default\"\n      tabIndex={-1}\n      _hover={{}}\n      _active={{}}\n      _focus={{}}\n      style={{ borderTopRightRadius: 0, borderBottomRightRadius: 0, borderRight: 'none' }}\n    >\n      Ξ{' '}\n      {showUSD && USDETHPrice\n        ? `$${(data as TokenAmount).multiply(USDETHPrice).toFixed(2, { groupSeparator: ',' })}`\n        : (data as TokenAmount).toSignificant(4, { groupSeparator: ',' })}\n    </Button>\n  )\n}\n\nexport default function Account({ triedToEagerConnect }: { triedToEagerConnect: boolean }): JSX.Element | null {\n  const { active, error, activate, library, chainId, account, setError } = useWeb3React<Web3Provider>()\n\n  // initialize metamask onboarding\n  const onboarding = useRef<MetaMaskOnboarding>()\n  useLayoutEffect(() => {\n    onboarding.current = new MetaMaskOnboarding()\n  }, [])\n\n  // automatically try connecting to the network connector where applicable\n  const queryParameters = useQueryParameters()\n  const requiredChainId = queryParameters[QueryParameters.CHAIN]\n  useEffect(() => {\n    if (triedToEagerConnect && !active && !error) {\n      activate(getNetwork(requiredChainId))\n    }\n  }, [triedToEagerConnect, active, error, requiredChainId, activate])\n\n  // manage connecting state for injected connector\n  const [connecting, setConnecting] = useState(false)\n  useEffect(() => {\n    if (active || error) {\n      setConnecting(false)\n      onboarding.current?.stopOnboarding()\n    }\n  }, [active, error])\n\n  const [ENSName, setENSName] = useState<string>('')\n  useEffect(() => {\n    if (library && account) {\n      let stale = false\n      library\n        .lookupAddress(account)\n        .then((name) => {\n          if (!stale && typeof name === 'string') {\n            setENSName(name)\n          }\n        })\n        .catch(() => {}) // eslint-disable-line @typescript-eslint/no-empty-function\n      return (): void => {\n        stale = true\n        setENSName('')\n      }\n    }\n  }, [library, account, chainId])\n\n  if (error) {\n    return null\n  } else if (!triedToEagerConnect) {\n    return null\n  } else if (typeof account !== 'string') {\n    return (\n      <Box>\n        {/* eslint-disable-next-line @typescript-eslint/no-explicit-any */}\n        {MetaMaskOnboarding.isMetaMaskInstalled() || (window as any)?.ethereum || (window as any)?.web3 ? (\n          <Button\n            isLoading={connecting}\n            leftIcon={MetaMaskOnboarding.isMetaMaskInstalled() ? ('metamask' as 'edit') : undefined}\n            onClick={(): void => {\n              setConnecting(true)\n              activate(injected, undefined, true).catch((error) => {\n                // ignore the error if it's a user rejected request\n                if (error instanceof UserRejectedRequestError) {\n                  setConnecting(false)\n                } else {\n                  setError(error)\n                }\n              })\n            }}\n          >\n            {MetaMaskOnboarding.isMetaMaskInstalled() ? 'Connect to MetaMask' : 'Connect to Wallet'}\n          </Button>\n        ) : (\n          <Button leftIcon={'metamask' as 'edit'} onClick={() => onboarding.current?.startOnboarding()}>\n            Install Metamask\n          </Button>\n        )}\n      </Box>\n    )\n  }\n\n  let leftIcon: string | undefined\n  // check walletconnect first because sometime metamask can be installed but we're still using walletconnect\n  if ((library?.provider as { isWalletConnect: boolean })?.isWalletConnect) {\n    leftIcon = 'walletconnect'\n  } else if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n    leftIcon = 'metamask'\n  }\n\n  return (\n    <Stack direction=\"row\" spacing={0} whiteSpace=\"nowrap\" m={0} shouldWrapChildren>\n      <ErrorBoundary\n        fallback={\n          <IconButton\n            variant=\"outline\"\n            icon=\"warning\"\n            aria-label=\"Failed\"\n            isDisabled\n            cursor=\"default !important\"\n            _hover={{}}\n            _active={{}}\n            style={{ borderTopRightRadius: 0, borderBottomRightRadius: 0, borderRight: 'none' }}\n          />\n        }\n      >\n        <Suspense\n          fallback={\n            <Button\n              variant=\"outline\"\n              isLoading\n              cursor=\"default !important\"\n              _hover={{}}\n              _active={{}}\n              style={{ borderTopRightRadius: 0, borderBottomRightRadius: 0, borderRight: 'none' }}\n            >\n              {null}\n            </Button>\n          }\n        >\n          <ETHBalance />\n        </Suspense>\n      </ErrorBoundary>\n\n      <Button\n        as=\"a\"\n        leftIcon={leftIcon ? (leftIcon as 'edit') : undefined}\n        rightIcon=\"external-link\"\n        style={{ borderTopLeftRadius: 0, borderBottomLeftRadius: 0 }}\n        {...{\n          href: formatEtherscanLink(ExplorerTXType.Account, [chainId as number, account]),\n          target: '_blank',\n          rel: 'noopener noreferrer',\n        }}\n      >\n        {ENSName || `${shortenHex(account, 4)}`}\n      </Button>\n    </Stack>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}