{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Text, Stack, Button, useColorMode, Select, Input, Image } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR, contractAddresses } from '../constants';\nimport { useWeb3React } from '@web3-react/core';\nimport { NETWORK_SHORTNAMES } from '../utils'; // import { useContract } from '../hooks'\n\nimport { Contract } from '@ethersproject/contracts';\nimport { HStack } from '@chakra-ui/react';\nimport { TransactionToast } from './TransactionToast';\nimport { addTokenToWallet } from '../public/web3';\nexport const EMBLEM_API = 'https://api.emblemvault.io';\nexport default function OfferModal({\n  isOpen,\n  onClose,\n  tokenId,\n  mine\n}) {\n  //   const address = addrAddr\n  //   const coin = addrCoin\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    0: copied,\n    1: setCopied\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n  const {\n    0: offeringToken,\n    1: setOfferingToken\n  } = useState({\n    address: '',\n    balance: 0,\n    tokenType: '',\n    name: ''\n  });\n  const {\n    0: tokenBalances,\n    1: setTokenBalances\n  } = useState([]);\n  const {\n    0: offeringTokenBalance,\n    1: setOfferingTokenBalance\n  } = useState(0);\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  const {\n    0: decimals,\n    1: setDecimals\n  } = useState(0);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(0);\n  const {\n    0: approvedForAll,\n    1: setApprovedForAll\n  } = useState(false);\n  const {\n    0: offerAmount,\n    1: setOfferAmount\n  } = useState(0);\n  const {\n    0: offerTokenId,\n    1: setOfferTokenId\n  } = useState(0);\n  const {\n    0: offers,\n    1: setOffers\n  } = useState([]);\n  const {\n    0: myOffers,\n    1: setMyOffers\n  } = useState([]);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: selectedNFTs,\n    1: setSelectedNFTs\n  } = useState([]); // const [offeringTokenId, setOfferingTokenId] = useState()\n\n  const getMetadata = async function (uri, cb) {\n    // alert(0)\n    const responce = await fetch(uri, {\n      method: 'GET',\n      headers: {// redirect:'follow'\n      }\n    });\n    let jsonData = await responce.json();\n    return cb(jsonData);\n  };\n\n  const getErc20Contract = address => {\n    console.log(\"contract\", address);\n    return useContract(address, contractAddresses.covalAbi, true);\n  };\n\n  const getVaultContract = (address = null) => {\n    return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  };\n\n  const getTradeContract = () => {\n    return useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true);\n  };\n\n  const useContract = (address, ABI, withSigner = false) => {\n    return new Contract(address, ABI, withSigner ? library.getSigner(account).connectUnchecked() : library);\n  };\n\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account);\n      setLoaded(false);\n    }\n  }, [account, acct]);\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [copied]);\n  useEffect(() => {\n    if (!loaded && !loading) {\n      setLoading(true);\n      getBalances(account, async balances => {\n        setTokenBalances(balances);\n        getOfferContractInfo();\n        setLoading(false);\n        setLoaded(true);\n      });\n    }\n  });\n\n  const handleApprove = async address => {\n    let contract = getErc20Contract(address);\n    console.log('decimals', decimals);\n    await contract.approve(contractAddresses.nftrade[chainId], offeringTokenBalance * Math.pow(10, +decimals)).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const handleApproveForAll = async (address = null) => {\n    let contract = getVaultContract(address);\n    await contract.setApprovalForAll(contractAddresses.nftrade[chainId], true).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const getApprovedForAll = async (address = null) => {\n    let contract = getVaultContract(address);\n    let approved = await contract.isApprovedForAll(account, contractAddresses.nftrade[chainId]); // console.log('---approved', approved)\n\n    setApprovedForAll(approved);\n  };\n\n  const getNFTContractInfo = async address => {\n    let contract = getVaultContract(address);\n    let count = await contract.balanceOf(account); // console.log('--------------- NFT Info', account, 'owns', count.toNumber())\n\n    let nftCollection = [];\n    getSingleNFT(0, () => {\n      // console.log(\"GOT ALL NFTs\", nftCollection)\n      setSelectedNFTs(nftCollection);\n    });\n\n    async function getSingleNFT(index, cb) {\n      let nftInfo = await contract.tokenOfOwnerByIndex(account, index);\n      nftCollection.push(nftInfo.toNumber());\n\n      if (index + 1 >= count) {\n        return cb();\n      } else {\n        return getSingleNFT(index + 1, cb);\n      }\n    }\n  };\n\n  const makeOffer = async () => {\n    let contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n    await contract.addOffer(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount * Math.pow(10, +decimals)).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const withdrawOffer = async index => {\n    let contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n    await contract.withdrawOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const rejectOffer = async index => {\n    let contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n    await contract.rejectOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const acceptOffer = async index => {\n    let contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n    await contract.acceptOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const getTokenContractInfo = async address => {\n    let contract = getErc20Contract(address); // console.log(contract)\n\n    let _dec = await contract.decimals();\n\n    setDecimals(_dec);\n    setAllowance(await contract.allowance(account, contractAddresses.nftrade[chainId]).then(balance => (balance * Math.pow(10, -_dec)).toString()));\n    setOfferingTokenBalance(await contract.balanceOf(account).then(balance => (balance * Math.pow(10, -_dec)).toString()));\n  };\n\n  const getOfferContractInfo = async () => {\n    let contract = getTradeContract();\n    let offerCount = (await contract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId)).toNumber();\n    console.log('------ offer count ------', offerCount);\n\n    if (mine) {\n      getApprovedForAll();\n    }\n\n    let offers = [];\n    let myOffers = [];\n\n    if (offerCount > 0) {\n      getSingleOffer(0, () => {\n        setOffers(offers);\n        setMyOffers(myOffers);\n        console.log('offers', offers, myOffers);\n      });\n    }\n\n    async function getSingleOffer(index, cb) {\n      let _offer = await contract.getOffer(contractAddresses.emblemVault[chainId], tokenId, index);\n\n      console.log('-------', _offer);\n\n      if (_offer.token !== \"0x0000000000000000000000000000000000000000\") {\n        let offer = {\n          tokenId: _offer.tokenId.toNumber(),\n          _from: _offer._from,\n          token: _offer.token,\n          amount: _offer.amount\n        };\n        let tokenContract = getErc20Contract(offer.token);\n        let tokenName = await tokenContract.name();\n        offer.name = tokenName;\n        offer.index = index;\n        offer.address = offer.token;\n\n        if (_offer.tokenId.toNumber() == 0) {\n          // console.log('---------', 'herererererere')\n          let tokenDecimals = await tokenContract.decimals();\n          let tokenSymbol = await tokenContract.symbol();\n          offer.symbol = tokenSymbol;\n          offer.decimals = tokenDecimals;\n          offer.amount = offer.amount.toNumber() * Math.pow(10, -tokenDecimals);\n          offers.push(offer);\n\n          if (offer._from == account) {\n            myOffers.push(offer);\n          }\n        } else {\n          let nftContract = getVaultContract(offer.token);\n          let tokenMetadata = await nftContract.tokenURI(offer.tokenId);\n          tokenMetadata = tokenMetadata.replace('ipfs://', 'https://gateway.ipfs.io/');\n          console.log('---------URI---------', tokenMetadata);\n          getMetadata(tokenMetadata, metadata => {\n            console.log('metadata', metadata);\n            offer.metadata = metadata;\n            offer.amount = _offer.amount.toNumber();\n            offer.tokenId = _offer.tokenId.toNumber();\n            offers.push(offer);\n\n            if (offer._from == account) {\n              myOffers.push(offer);\n            }\n          });\n        }\n      }\n\n      finished();\n\n      function finished() {\n        if (index + 1 >= offerCount) {\n          return cb();\n        } else {\n          return getSingleOffer(index + 1, cb);\n        }\n      }\n    } // console.log(offerCount)\n\n  };\n\n  const getBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/' + NETWORK_SHORTNAMES[chainId] + '/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json(); // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    // setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n\n    return cb(jsonData.values);\n  };\n\n  function copyWithFlag(content) {\n    copy(content);\n    setCopied(true);\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    color: COLOR[colorMode],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 11\n    }\n  }, !mine ? 'Make' : null, \" Offer\", mine ? 's' : null, \" for: \", tokenId)), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 9\n    }\n  }, !mine ? __jsx(Stack, {\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 17\n    }\n  }, __jsx(Stack, {\n    mt: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 21\n    }\n  }, \"Choose your Offer Token\"), __jsx(Select, {\n    w: \"100%\",\n    value: offeringToken.address,\n    onChange: e => {\n      if (e.target.value !== '0') {\n        let token = tokenBalances.filter(item => {\n          return item.address == e.target.value;\n        })[0];\n        setOfferingToken(token);\n        token.tokenType == \"ERC-20\" ? getTokenContractInfo(token.address) : getNFTContractInfo(token.address);\n        console.log(tokenBalances.filter(item => {\n          return item.address == e.target.value;\n        })[0]);\n        console.log(e.target.value);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 21\n    }\n  }, __jsx(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 25\n    }\n  }, \"Choose a Token\"), tokenBalances.map((coin, index) => {\n    if (coin.tokenType !== 'native') return __jsx(\"option\", {\n      value: coin.address,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 29\n      }\n    }, coin.name);\n  })), offeringToken.balance > 0 && offeringToken.tokenType == \"ERC-20\" && allowance > 0 ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 29\n    }\n  }, \"Max: \", offeringTokenBalance), __jsx(Input, {\n    onChange: e => setOfferAmount(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 29\n    }\n  })) : null), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 21\n    }\n  }, offeringToken.tokenType == 'ERC-20' ? offeringTokenBalance > 0 && allowance == 0 ? __jsx(Button, {\n    onClick: () => {\n      handleApprove(offeringToken.address);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 29\n    }\n  }, \"Approve offer of \", offeringToken.name) : offeringToken && offeringTokenBalance == 0 ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 29\n    }\n  }, \"Insufficient Balance\") : __jsx(Button, {\n    onClick: () => {\n      makeOffer();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 29\n    }\n  }, \"Make Offer\") : selectedNFTs.length > 0 ? __jsx(Select, {\n    width: \"100%\",\n    onChange: e => {\n      if (e.target.value !== '0') {\n        // console.log(\"Picked TokenID: \", e.target.value, offeringToken)\n        setOfferTokenId(Number(e.target.value));\n        getApprovedForAll(offeringToken.address);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 25\n    }\n  }, __jsx(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 27\n    }\n  }, \"Select TokenId\"), selectedNFTs.map((tokenId, index) => {\n    return __jsx(\"option\", {\n      value: tokenId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 29\n      }\n    }, tokenId);\n  })) : null, offeringToken.name && offeringToken.tokenType != \"ERC-20\" && !approvedForAll && offerTokenId != 0 ? __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      handleApproveForAll(offeringToken.address);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 23\n    }\n  }, \"Approve \", offeringToken.name) : offeringToken.name && offeringToken.tokenType != \"ERC-20\" && approvedForAll ? __jsx(Button, {\n    onClick: () => {\n      makeOffer();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 23\n    }\n  }, \"Make Offer\") : null), __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 25\n    }\n  }, \"My Offers\"), myOffers.map((offer, index) => {\n    return __jsx(HStack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 33\n      }\n    }, offer.metadata ? __jsx(Image, {\n      p: \"5px\",\n      className: \"d-block\",\n      src: offer.metadata.image.replace('ipfs://', 'https://gateway.ipfs.io/'),\n      width: \"65px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 40\n      }\n    }) : null, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 37\n      }\n    }, offer.name, \" \", offer.amount > 0 ? offer.amount : offer.tokenId), __jsx(Button, {\n      onClick: () => {\n        withdrawOffer(offer.index);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 37\n      }\n    }, \"Withdraw Offer\"));\n  }))) : null, mine ? __jsx(Stack, {\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 17\n    }\n  }, !approvedForAll ? __jsx(Button, {\n    onClick: () => {\n      handleApproveForAll();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 25\n    }\n  }, \"Allow accepting of Offers\") : null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 21\n    }\n  }, \"Offers\"), offers.map((offer, index) => {\n    return __jsx(HStack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 33\n      }\n    }, offer.metadata ? __jsx(Image, {\n      p: \"5px\",\n      className: \"d-block\",\n      src: offer.metadata.image.replace('ipfs://', 'https://gateway.ipfs.io/'),\n      width: \"65px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 40\n      }\n    }) : null, __jsx(Text, {\n      onClick: () => {\n        addTokenToWallet(offer);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 37\n      }\n    }, offer.name, \" \", offer.amount > 0 ? offer.amount : offer.tokenId), __jsx(Button, {\n      onClick: () => {\n        rejectOffer(offer.index);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 37\n      }\n    }, \"Reject Offer\"), approvedForAll ? __jsx(Button, {\n      onClick: () => {\n        acceptOffer(offer.index);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 41\n      }\n    }, \"Accept Offer\") : null);\n  })) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      setHash(null);\n      setLoaded(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 11\n    }\n  }) : null), __jsx(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx"],"names":["React","useEffect","useState","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","Text","Stack","Button","useColorMode","Select","Input","Image","copy","COLOR","contractAddresses","useWeb3React","NETWORK_SHORTNAMES","Contract","HStack","TransactionToast","addTokenToWallet","EMBLEM_API","OfferModal","isOpen","onClose","tokenId","mine","colorMode","account","chainId","library","copied","setCopied","loading","setLoading","loaded","setLoaded","offeringToken","setOfferingToken","address","balance","tokenType","name","tokenBalances","setTokenBalances","offeringTokenBalance","setOfferingTokenBalance","acct","setAcct","decimals","setDecimals","allowance","setAllowance","approvedForAll","setApprovedForAll","offerAmount","setOfferAmount","offerTokenId","setOfferTokenId","offers","setOffers","myOffers","setMyOffers","hash","setHash","selectedNFTs","setSelectedNFTs","getMetadata","uri","cb","responce","fetch","method","headers","jsonData","json","getErc20Contract","console","log","useContract","covalAbi","getVaultContract","emblemVault","emblemAbi","getTradeContract","nftrade","nftradeAbi","ABI","withSigner","getSigner","connectUnchecked","timeout","setTimeout","clearTimeout","getBalances","balances","getOfferContractInfo","handleApprove","contract","approve","Math","pow","then","handleApproveForAll","setApprovalForAll","getApprovedForAll","approved","isApprovedForAll","getNFTContractInfo","count","balanceOf","nftCollection","getSingleNFT","index","nftInfo","tokenOfOwnerByIndex","push","toNumber","makeOffer","addOffer","withdrawOffer","rejectOffer","acceptOffer","getTokenContractInfo","_dec","toString","offerCount","getOfferCount","getSingleOffer","_offer","getOffer","token","offer","_from","amount","tokenContract","tokenName","tokenDecimals","tokenSymbol","symbol","nftContract","tokenMetadata","tokenURI","replace","metadata","finished","service","values","copyWithFlag","content","e","target","value","filter","item","map","coin","length","Number","image"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Text,\n  Stack,\n  Button,\n  useColorMode,\n  Select,\n  Input,\n  Image\n} from '@chakra-ui/core'\nimport copy from 'copy-to-clipboard'\nimport QRCode from 'qrcode.react'\nimport { COLOR, contractAddresses } from '../constants'\nimport { useWeb3React } from '@web3-react/core'\nimport { NETWORK_SHORTNAMES } from '../utils'\n// import { useContract } from '../hooks'\nimport { useTokenBalance, useTokenAllowance, useETHBalance } from '../data'\nimport { Contract, ContractInterface } from '@ethersproject/contracts'\nimport { HStack } from '@chakra-ui/react'\nimport { TransactionToast } from './TransactionToast'\nimport { addTokenToWallet } from '../public/web3'\nexport const EMBLEM_API = 'https://api.emblemvault.io'\n\nexport default function OfferModal({\n  isOpen,\n  onClose,\n  tokenId,\n  mine,\n}: {\n  isOpen: boolean\n  onClose: () => void\n  tokenId\n  mine: boolean\n}): JSX.Element {\n//   const address = addrAddr\n//   const coin = addrCoin\n\n  const { colorMode } = useColorMode()\n  const { account, chainId, library } = useWeb3React()\n  const [copied, setCopied] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loaded, setLoaded] = useState(false)\n  const [offeringToken, setOfferingToken] = useState({address:'', balance: 0, tokenType:'', name: ''})\n  const [tokenBalances, setTokenBalances] = useState([])\n  const [offeringTokenBalance, setOfferingTokenBalance] = useState(0)\n  const [acct, setAcct] = useState('')\n  const [decimals, setDecimals] = useState(0)\n  const [allowance, setAllowance] = useState(0)\n  const [approvedForAll, setApprovedForAll] = useState(false)\n  const [offerAmount, setOfferAmount] = useState(0)\n  const [offerTokenId, setOfferTokenId] = useState(0)\n  const [offers, setOffers] = useState([])\n  const [myOffers, setMyOffers] = useState([])\n  const [hash, setHash] = useState(null)\n  const [selectedNFTs, setSelectedNFTs] = useState([])\n  // const [offeringTokenId, setOfferingTokenId] = useState()\n  \n  const getMetadata = async function(uri, cb){\n    // alert(0)\n    const responce = await fetch(uri, {\n      method: 'GET',\n      headers: {\n        // redirect:'follow'\n      },\n    })\n    let jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getErc20Contract = (address) =>{\n    console.log(\"contract\", address)\n    return useContract(address, contractAddresses.covalAbi, true)\n  }\n\n  const getVaultContract = (address = null) =>{\n    return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n  }\n\n  const getTradeContract = ()=>{\n    return useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true)\n  }\n\n  const useContract = (address?: string, ABI?: ContractInterface, withSigner = false): Contract | undefined => {\n    return new Contract(address, ABI, withSigner ? library.getSigner(account).connectUnchecked() : library)\n  }\n\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setLoaded(false)\n    }\n  }, [account, acct])\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [copied])\n\n  useEffect(() => {\n      if (!loaded && !loading) {\n        setLoading(true)\n        getBalances(account, async balances =>{\n            setTokenBalances(balances)\n            getOfferContractInfo()\n            setLoading(false)\n            setLoaded(true)\n        })\n\n      }\n  })\n\n  const handleApprove = async(address)=>{\n    let contract = getErc20Contract(address)\n    console.log('decimals', decimals)\n    await contract.approve(contractAddresses.nftrade[chainId], (offeringTokenBalance * Math.pow(10, +decimals))).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const handleApproveForAll = async(address = null)=>{\n    let contract = getVaultContract(address)\n    await contract.setApprovalForAll(contractAddresses.nftrade[chainId], true).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n  const getApprovedForAll = async(address = null)=>{\n    let contract = getVaultContract(address)\n    let approved = await contract.isApprovedForAll(account, contractAddresses.nftrade[chainId])\n    // console.log('---approved', approved)\n    setApprovedForAll(approved)\n  }\n\n  const getNFTContractInfo = async(address)=>{\n    let contract = getVaultContract(address)\n    let count = await contract.balanceOf(account)\n    // console.log('--------------- NFT Info', account, 'owns', count.toNumber())\n    let nftCollection = []\n    getSingleNFT(0, ()=>{\n      // console.log(\"GOT ALL NFTs\", nftCollection)\n      setSelectedNFTs(nftCollection)\n    })\n    async function getSingleNFT(index, cb) {\n        let nftInfo =  await contract.tokenOfOwnerByIndex(account, index)\n        nftCollection.push(nftInfo.toNumber())\n        if (index +1 >= count) {\n          return cb()\n      } else {\n          return getSingleNFT(index +1, cb)\n      }\n    }\n  }\n\n  const makeOffer = async()=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.addOffer(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals)).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const withdrawOffer = async(index)=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.withdrawOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const rejectOffer = async(index)=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.rejectOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n  }\n\n  const acceptOffer = async(index)=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.acceptOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const getTokenContractInfo = async (address)=>{\n    let contract = getErc20Contract(address)\n    // console.log(contract)\n    let _dec = await contract.decimals()\n    setDecimals(_dec)\n    setAllowance(\n        await contract\n        .allowance(account, contractAddresses.nftrade[chainId])\n        .then(balance=>(balance * Math.pow(10, -_dec)).toString())\n    )\n    setOfferingTokenBalance(\n        await contract\n        .balanceOf(account)\n        .then(balance=>(balance * Math.pow(10, -_dec)).toString())\n    )\n  }\n\n  const getOfferContractInfo = async ()=>{\n    let contract = getTradeContract()\n    let offerCount = (await contract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId)).toNumber()\n    console.log('------ offer count ------', offerCount)\n    if (mine) {\n        getApprovedForAll()\n    }\n    let offers = []\n    let myOffers = []\n    if (offerCount > 0) {\n        getSingleOffer(0, ()=>{\n            setOffers(offers)\n            setMyOffers(myOffers)\n            console.log('offers', offers, myOffers)\n        })\n    }\n    async function getSingleOffer(index, cb) {\n        let _offer = await contract.getOffer(contractAddresses.emblemVault[chainId], tokenId, index)\n        console.log('-------', _offer)\n        if (_offer.token !== \"0x0000000000000000000000000000000000000000\") {\n            let offer: any = {tokenId: _offer.tokenId.toNumber(), _from: _offer._from, token: _offer.token, amount: _offer.amount}\n            let tokenContract = getErc20Contract(offer.token)\n            let tokenName = await tokenContract.name()\n            offer.name = tokenName\n            offer.index = index            \n            offer.address = offer.token\n            if (_offer.tokenId.toNumber() == 0) {\n              // console.log('---------', 'herererererere')\n              let tokenDecimals = await tokenContract.decimals()\n              let tokenSymbol = await tokenContract.symbol()\n              offer.symbol = tokenSymbol\n              offer.decimals = tokenDecimals\n              offer.amount = offer.amount.toNumber() * Math.pow(10,-tokenDecimals)\n              offers.push(offer)\n              if (offer._from == account) {\n                myOffers.push(offer)\n              }\n            } else {\n              let nftContract = getVaultContract(offer.token)\n              let tokenMetadata= await nftContract.tokenURI(offer.tokenId)\n              tokenMetadata = tokenMetadata.replace('ipfs://', 'https://gateway.ipfs.io/')\n              console.log('---------URI---------', tokenMetadata)\n              getMetadata(tokenMetadata, (metadata)=>{\n                console.log('metadata', metadata)\n                offer.metadata = metadata\n                offer.amount = _offer.amount.toNumber()\n                offer.tokenId = _offer.tokenId.toNumber()\n                offers.push(offer)\n                if (offer._from == account) {\n                  myOffers.push(offer)\n                }\n              })\n            }\n        }\n        finished()\n        function finished() {\n          if (index +1 >= offerCount) {\n            return cb()\n          } else {\n              return getSingleOffer(index +1, cb)\n          }\n        }\n        \n    }\n    // console.log(offerCount)\n  }\n\n  const getBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/'+NETWORK_SHORTNAMES[chainId]+'/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    // setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n    return cb(jsonData.values)\n  }\n\n  function copyWithFlag(content: string): void {\n    copy(content)\n    setCopied(true)\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent color={COLOR[colorMode]}>\n        <ModalHeader>\n          <Text>{!mine? ('Make'): null} Offer{mine? ('s'): null} for: {tokenId}</Text>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n            {!mine? (\n                <Stack direction=\"column\">\n                    <Stack mt=\"6\">\n                    <Text>Choose your Offer Token</Text>\n                  {/* <Text>{account} network: {NETWORK_SHORTNAMES[chainId]}</Text> */}\n                    <Select w=\"100%\" value={offeringToken.address}\n                        onChange={(e) => {\n                            if (e.target.value !== '0') {\n                                let token = tokenBalances.filter((item)=>{return item.address == e.target.value})[0]\n                                setOfferingToken(token)\n                                token.tokenType ==\"ERC-20\" ? getTokenContractInfo(token.address) : getNFTContractInfo(token.address)\n                                console.log(tokenBalances.filter((item)=>{return item.address == e.target.value})[0])\n                                console.log(e.target.value)\n                            }\n                        }}\n                    >\n                        <option value=\"0\" >Choose a Token</option>\n                        {tokenBalances.map((coin, index) => {\n                            if (coin.tokenType !== 'native')\n                            return (\n                            <option value={coin.address}>{coin.name}</option>\n                            )\n                        })}\n                    </Select>\n                    {offeringToken.balance > 0 && offeringToken.tokenType==\"ERC-20\" && allowance > 0 ? (\n                        <>\n                            <Text>Max: {offeringTokenBalance}</Text>    \n                            <Input onChange={(e) => setOfferAmount(e.target.value)}></Input>\n                        </>\n                    ) : null}\n                                  \n                </Stack>\n                    <Stack direction=\"row\" justify=\"center\">\n                    {offeringToken.tokenType =='ERC-20' ? (\n                        offeringTokenBalance > 0 && allowance == 0 ? (\n                            <Button onClick={()=>{handleApprove(offeringToken.address)}}>Approve offer of {offeringToken.name}</Button>\n                        ) : offeringToken && offeringTokenBalance == 0 ? (\n                            <Text>Insufficient Balance</Text>\n                        ) : (\n                            <Button onClick={()=>{makeOffer()}}>Make Offer</Button>\n                        )\n                    ) : (\n                      selectedNFTs.length > 0 ? (\n                        <Select\n                        width=\"100%\"\n                        onChange={(e) => {\n                          if (e.target.value !== '0') {\n                              // console.log(\"Picked TokenID: \", e.target.value, offeringToken)\n                              setOfferTokenId(Number(e.target.value))\n                              getApprovedForAll(offeringToken.address)\n                          }\n                        }}>\n                          <option value=\"0\">Select TokenId</option>\n                          {selectedNFTs.map((tokenId, index) => {\n                            return (\n                            <option value={tokenId}>{tokenId}</option>\n                            )\n                        })}\n                        </Select>\n                        \n                      ) : null\n                    )}\n                    {offeringToken.name && offeringToken.tokenType !=\"ERC-20\" && !approvedForAll && offerTokenId != 0? (\n                      <Button width=\"100%\" onClick={()=>{handleApproveForAll(offeringToken.address)}}>Approve {offeringToken.name}</Button>\n                    ): offeringToken.name && offeringToken.tokenType !=\"ERC-20\" && approvedForAll? (\n                      <Button onClick={()=>{makeOffer()}}>Make Offer</Button>\n                    ): null}\n                \n                    \n                  {/* <Button onClick={() => copyWithFlag('address')}>\n                    {copied ? <Text>Copied!</Text> : <Text isTruncated>{'address'}</Text>}\n                  </Button> */}\n                </Stack>\n                    <Stack>\n                        <Text>My Offers</Text>\n                        { myOffers.map((offer, index) => {\n                            return (\n                                <HStack>\n                                    {offer.metadata? (\n                                       <Image\n                                        p={\"5px\"}\n                                        className=\"d-block\"\n                                        src={offer.metadata.image.replace('ipfs://','https://gateway.ipfs.io/')}\n                                        width=\"65px\"\n                                      />\n                                    ) : null}\n                                    <Text>{offer.name} {offer.amount > 0 ? offer.amount: offer.tokenId}</Text>\n                                    <Button onClick={() =>{withdrawOffer(offer.index)}}>Withdraw Offer</Button>\n                                </HStack>\n                            )\n                        })}\n                    </Stack>\n                </Stack>\n            ) : null}\n\n            {mine? (\n                <Stack direction=\"column\">\n                    {!approvedForAll ? (\n                        <Button onClick={()=>{handleApproveForAll()}}>Allow accepting of Offers</Button>\n                    ) : null}\n                    <Text>Offers</Text>\n                        { offers.map((offer, index) => {\n                            return (\n                                <HStack>\n                                    {offer.metadata? (\n                                       <Image\n                                        p={\"5px\"}\n                                        className=\"d-block\"\n                                        src={offer.metadata.image.replace('ipfs://','https://gateway.ipfs.io/')}\n                                        width=\"65px\"\n                                      />\n                                    ) : null}\n                                    <Text onClick={() =>{addTokenToWallet(offer)}}>{offer.name} {offer.amount > 0 ?offer.amount : offer.tokenId}</Text>\n                                    <Button onClick={() =>{rejectOffer(offer.index)}}>Reject Offer</Button>\n                                    {approvedForAll ? (\n                                        <Button onClick={() =>{acceptOffer(offer.index)}}>Accept Offer</Button>\n                                    ) : null}                                    \n                                </HStack>\n                            )\n                        })}\n                </Stack>\n            ) : null }\n          {hash ? (\n          <TransactionToast\n                hash={hash}\n                onComplete={() => {\n                    setHash(null)\n                    setLoaded(false)\n                }}\n            />\n          ) : null }\n        </ModalBody>\n        <ModalFooter></ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}