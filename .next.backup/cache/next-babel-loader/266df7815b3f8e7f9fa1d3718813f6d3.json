{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/TradeControls.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport { Box, Button, Select } from '@chakra-ui/core';\nimport { contractAddresses } from '../constants';\nimport { TransactionToast } from './TransactionToast';\nexport class TradeControls extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    async function checkOfferingAllowance(props, tokenId) {\n      debugger;\n      let allowed = await props.nftContract.getApproved(tokenId);\n      this.props.setOfferingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\");\n    }\n\n    async function checkAcceptingAllowance(tokenId) {\n      let allowed = await this.props.nftContract.getApproved(tokenId);\n      this.props.setAcceptingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\");\n    }\n\n    const approveOffer = tokenId => {\n      // debugger\n      console.log(\"checking offer for\", tokenId);\n      this.props.nftContract.approve(contractAddresses.nftrade[this.props.chainId], tokenId && typeof tokenId === \"string\" ? tokenId : this.props.offeringTokenId).then(({\n        hash\n      }) => {\n        this.props.setHash(hash);\n      }); // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    };\n\n    const makeOffer = tokenId => {\n      ;\n      this.props.tradeContract.addOffer(contractAddresses.emblemVault[this.props.chainId], this.props.offeringTokenId, contractAddresses.emblemVault[this.props.chainId], tokenId).then(({\n        hash\n      }) => {\n        this.props.setHash(hash);\n      }); // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    };\n\n    const acceptOffer = () => {\n      ;\n      this.props.tradeContract.acceptOffer(contractAddresses.emblemVault[this.props.chainId], this.props.acceptingTokenId, Number(this.props.acceptingOfferingIndex)).then(({\n        hash\n      }) => {\n        this.props.setHash(hash);\n      }); // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    };\n\n    const rejectOffer = () => {\n      ;\n      this.props.tradeContract.rejectOffer(contractAddresses.emblemVault[this.props.chainId], this.props.acceptingTokenId, Number(this.props.acceptingOfferingIndex)).then(({\n        hash\n      }) => {\n        this.props.setHash(hash);\n      }); // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    };\n\n    const flexSettings = {\n      flex: '1',\n      minW: '300px',\n      maxW: '300px',\n      borderWidth: '1px',\n      color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: this.props.vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n    return __jsx(Box, _extends({}, flexSettings, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }), !this.props.vault.mine ? __jsx(Select, {\n      p: 2,\n      m: 2,\n      w: \"94%\",\n      placeholder: \"Offer NFT\",\n      onChange: e => {\n        let tokenId = e.target.value; // console.log(e.target.value)\n\n        this.props.setOfferingTokenId(tokenId);\n        checkOfferingAllowance(this.props, tokenId);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 35\n      }\n    }, this.props.myVaults.map((vault, index) => {\n      return __jsx(\"option\", {\n        key: index,\n        value: this.props.vault.tokenId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 20\n        }\n      }, vault.name);\n    })) : __jsx(Select, {\n      p: 2,\n      m: 2,\n      w: \"94%\",\n      placeholder: \"Offers\",\n      onChange: e => {\n        let index = e.target.value;\n        console.log(e.target.value);\n        this.props.setAcceptingOfferIndex(index);\n        this.props.setAcceptingTokenId(this.props.vault.tokenId);\n        checkAcceptingAllowance(this.props.vault.tokenId);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }\n    }, this.props.vault.offers.map((offer, index) => {\n      return __jsx(\"option\", {\n        key: index,\n        value: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 22\n        }\n      }, Number(offer.tokenId));\n    })), this.props.offeringTokenId && !this.props.vault.mine ? this.props.offeringTokenAllowed ? __jsx(Button, {\n      m: 2,\n      onClick: () => {\n        makeOffer(this.props.vault.tokenId);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 99\n      }\n    }, \"Make Offer\") : __jsx(Button, {\n      m: 2,\n      w: \"94%\",\n      onClick: approveOffer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 34\n      }\n    }, \"Approve\") : null, this.props.acceptingOfferingIndex && this.props.vault.mine ? this.props.acceptingTokenAllowed ? __jsx(Button, {\n      m: 2,\n      w: \"94%\",\n      onClick: () => {\n        acceptOffer();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 106\n      }\n    }, \"Accept Offer\") : __jsx(Button, {\n      m: 2,\n      onClick: () => {\n        approveOffer(this.props.vault.tokenId);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 36\n      }\n    }, \"Approve\") : null, this.props.acceptingOfferingIndex && this.props.vault.mine ? __jsx(Button, {\n      m: 2,\n      w: \"94%\",\n      onClick: () => {\n        rejectOffer();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 71\n      }\n    }, \"Reject Offer\") : null, this.props.hash ? __jsx(TransactionToast, {\n      hash: this.props.hash,\n      onComplete: () => {\n        this.props.setHash(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }) : null);\n  }\n\n}\nexport default TradeControls;","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/TradeControls.tsx"],"names":["React","Component","Box","Button","Select","contractAddresses","TransactionToast","TradeControls","constructor","props","render","checkOfferingAllowance","tokenId","allowed","nftContract","getApproved","setOfferingTokenAllowed","checkAcceptingAllowance","setAcceptingTokenAllowed","approveOffer","console","log","approve","nftrade","chainId","offeringTokenId","then","hash","setHash","makeOffer","tradeContract","addOffer","emblemVault","acceptOffer","acceptingTokenId","Number","acceptingOfferingIndex","rejectOffer","flexSettings","flex","minW","maxW","borderWidth","color","mx","mb","rounded","overflow","borderColor","vault","status","cursor","mine","e","target","value","setOfferingTokenId","myVaults","map","index","name","setAcceptingOfferIndex","setAcceptingTokenId","offers","offer","offeringTokenAllowed","acceptingTokenAllowed"],"mappings":"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","sourcesContent":["import React, { Component, Dispatch, useState } from 'react'\nimport { Box, Flex, Text, Link, Image, Stack, Button, FormControl, FormLabel, Input, FormHelperText, Select } from '@chakra-ui/core'\nimport { Contract } from '@ethersproject/contracts';\nimport { contractAddresses } from '../constants';\nimport { TransactionToast } from './TransactionToast';\n\n\ntype Vault = {\n  name: string,\n  tokenId: string\n}\ntype PropSettings = {\n  vault: {\n    mine: boolean,\n    status: string,\n    tokenId: string,\n    name: string,\n    offers: Array<Vault>\n  },\n  myVaults: Array<Vault>,\n  nftContract: Contract,\n  tradeContract: Contract,\n  chainId: number,\n  setOfferingTokenAllowed,\n  offeringTokenId,\n  setOfferingTokenId,\n  acceptingOfferingIndex,\n  setAcceptingOfferIndex,\n  offeringTokenAllowed,\n  acceptingTokenAllowed,\n  setAcceptingTokenAllowed,\n  acceptingTokenId,\n  setAcceptingTokenId,\n  hash,\n  setHash\n}\n\n\n\nexport class TradeControls extends Component<PropSettings> {\n\n  constructor(props) {\n    super(props);\n  }\n  render() {\n\n    async function checkOfferingAllowance(props, tokenId) {\n      debugger\n      let allowed = await props.nftContract.getApproved(tokenId)\n\n      this.props.setOfferingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\")\n    }\n\n    async function checkAcceptingAllowance(tokenId) {\n      let allowed = await this.props.nftContract.getApproved(tokenId)\n      this.props.setAcceptingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\")\n    }\n\n    const approveOffer = (tokenId) => {\n      // debugger\n      console.log(\"checking offer for\", tokenId)\n        ; (this.props.nftContract as Contract)\n          .approve(contractAddresses.nftrade[this.props.chainId], (tokenId && typeof tokenId === \"string\" ? tokenId : this.props.offeringTokenId))\n          .then(({ hash }: { hash: string }) => {\n            this.props.setHash(hash)\n          })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    }\n\n    const makeOffer = (tokenId) => {\n      ; (this.props.tradeContract as Contract)\n        .addOffer(contractAddresses.emblemVault[this.props.chainId], this.props.offeringTokenId, contractAddresses.emblemVault[this.props.chainId], tokenId)\n        .then(({ hash }: { hash: string }) => {\n          this.props.setHash(hash)\n        })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    }\n\n    const acceptOffer = () => {\n      ; (this.props.tradeContract as Contract)\n        .acceptOffer(contractAddresses.emblemVault[this.props.chainId], this.props.acceptingTokenId, Number(this.props.acceptingOfferingIndex))\n        .then(({ hash }: { hash: string }) => {\n          this.props.setHash(hash)\n        })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    }\n\n    const rejectOffer = () => {\n      ; (this.props.tradeContract as Contract)\n        .rejectOffer(contractAddresses.emblemVault[this.props.chainId], this.props.acceptingTokenId, Number(this.props.acceptingOfferingIndex))\n        .then(({ hash }: { hash: string }) => {\n          this.props.setHash(hash)\n        })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    }\n\n    const flexSettings = {\n      flex: '1',\n      minW: '300px',\n      maxW: '300px',\n      borderWidth: '1px',\n      color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: this.props.vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer',\n    }\n    \n    return (\n      <Box {...flexSettings}>\n        \n        {!this.props.vault.mine ? <Select p={2} m={2} w=\"94%\" placeholder=\"Offer NFT\" onChange={e => {\n          let tokenId = e.target.value; // console.log(e.target.value)\n\n          this.props.setOfferingTokenId(tokenId);\n          checkOfferingAllowance(this.props, tokenId);\n        }}>\n          {this.props.myVaults.map((vault, index) => {\n            return <option key={index} value={this.props.vault.tokenId}>{vault.name}</option>;\n          })}\n        </Select> : <Select p={2} m={2} w=\"94%\" placeholder=\"Offers\" onChange={e => {\n          let index = e.target.value;\n          console.log(e.target.value);\n          this.props.setAcceptingOfferIndex(index);\n          this.props.setAcceptingTokenId(this.props.vault.tokenId);\n          checkAcceptingAllowance(this.props.vault.tokenId);\n        }}>\n            {this.props.vault.offers.map((offer, index) => {\n              return <option key={index} value={index}>{Number(offer.tokenId)}</option>;\n            })}\n          </Select>}\n        {this.props.offeringTokenId && !this.props.vault.mine ? this.props.offeringTokenAllowed ? <Button m={2} onClick={() => {\n          makeOffer(this.props.vault.tokenId);\n        }}>Make Offer</Button> : <Button m={2} w=\"94%\" onClick={approveOffer}>Approve</Button> : null}\n        {this.props.acceptingOfferingIndex && this.props.vault.mine ? this.props.acceptingTokenAllowed ? <Button m={2} w=\"94%\" onClick={() => {\n          acceptOffer();\n        }}>Accept Offer</Button> : <Button m={2} onClick={() => {\n          approveOffer(this.props.vault.tokenId);\n        }}>Approve</Button> : null}\n        {this.props.acceptingOfferingIndex && this.props.vault.mine ? <Button m={2} w=\"94%\" onClick={() => {\n          rejectOffer();\n        }}>Reject Offer</Button> : null}\n        {this.props.hash ? (\n      <TransactionToast\n          hash={this.props.hash}\n          onComplete={() => {\n            this.props.setHash(null)\n          }}\n        />\n      ): null }\n      </Box>\n    );\n  }\n}\nexport default TradeControls"]},"metadata":{},"sourceType":"module"}