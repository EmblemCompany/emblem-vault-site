{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Find.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// import { Box, Flex, Text, Link, Image, Stack, Spinner, useColorMode } from '@chakra-ui/core'\nimport { Box, Flex, Text, Link, Stack, Button, Checkbox, CheckboxGroup, Radio, RadioGroup, Input, Select, useColorMode } from '@chakra-ui/core';\nimport { HStack, VStack } from '@chakra-ui/react';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Embed from './Embed';\nexport default function Find() {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: pagePosition,\n    1: setPagePosition\n  } = useState(Number(query.start) || 0);\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: true\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    0: shouldFetchData,\n    1: setShouldFetchData\n  } = useState(false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(0);\n  const {\n    0: q,\n    1: setQ\n  } = useState(false);\n  const {\n    0: assetName,\n    1: setAssetName\n  } = useState(query.name);\n  const {\n    0: tempAssetName,\n    1: setTempAssetName\n  } = useState(assetName || '');\n  const {\n    0: coin,\n    1: setCoin\n  } = useState(query.coin);\n  const {\n    0: tempCoin,\n    1: setTempCoin\n  } = useState(coin || '');\n  const {\n    0: project,\n    1: setProject\n  } = useState(query.project);\n  const {\n    0: tempProject,\n    1: setTempProject\n  } = useState(project || '');\n  const {\n    0: projects,\n    1: setProjects\n  } = useState([]);\n  const {\n    0: loadedProjects,\n    1: setLoadedProjects\n  } = useState(false);\n  const {\n    0: searchType,\n    1: setSearchType\n  } = useState(query.searchType || 'filter');\n  const {\n    0: tempSearchType,\n    1: setTempSearchType\n  } = useState(searchType.toString());\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState(query.vaultName);\n  const {\n    0: tempVaultName,\n    1: setTempVaultName\n  } = useState(vaultName || '');\n  const {\n    0: vaultDescription,\n    1: setVaultDescription\n  } = useState(query.vaultDescription);\n  const {\n    0: tempVaultDescription,\n    1: setTempVaultDescription\n  } = useState(vaultDescription);\n  const {\n    0: network,\n    1: setNetwork\n  } = useState(query.network || null);\n  const {\n    0: balanceChecks,\n    1: setBalanceChecks\n  } = useState(Object.keys(query).filter(key => {\n    return key !== \"vaultName\" && key !== \"vaultDescription\" && key !== \"searchType\";\n  }));\n  const {\n    0: metadataChecks,\n    1: setMetadataChecks\n  } = useState(Object.keys(query).filter(key => {\n    return key !== \"name\" && key !== \"coin\" && key !== \"project\" && key !== \"searchType\";\n  }));\n  const PAGE_SIZE = 20;\n\n  const getProjects = async () => {\n    try {\n      const response = await fetch(EMBLEM_API + '/search/projects', {\n        method: 'GET',\n        headers: {\n          service: 'evmetadata'\n        }\n      });\n      let jsonData = await response.json();\n      setProjects(jsonData);\n    } catch (error) {}\n  };\n\n  const getVaults = async () => {\n    let body = {};\n\n    if (metadataChecks.length > 0) {\n      body.metadata = {};\n      metadataChecks.forEach(key => {\n        body.metadata[key] = key == \"vaultDescription\" ? \"description\" : \"name\";\n      });\n    }\n\n    try {\n      const response = await fetch(EMBLEM_API + '/find/' + searchType + '?start=' + offset + '&size=' + PAGE_SIZE, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify(body)\n      });\n      let jsonData = await response.json();\n      console.log('------ vaults', jsonData);\n      jsonData.length == 0 || jsonData.length < PAGE_SIZE ? setHasMore(false) : setHasMore(true);\n      setVaults(vaults.concat(jsonData));\n      setState({\n        loaded: true\n      });\n      setLoadingApi(false);\n    } catch (error) {}\n  };\n\n  const fetchData = async () => {\n    console.log(offset, PAGE_SIZE, offset + PAGE_SIZE);\n    setOffset(offset + PAGE_SIZE);\n    setShouldFetchData(true);\n  };\n\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [account, acct]);\n  const {\n    0: chain,\n    1: setChain\n  } = useState(chainId);\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    // console.log('here', chainId, chain, account, state)\n    if (!account && !state.loaded) {\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    if (shouldFetchData) {\n      console.log('here 1');\n      setShouldFetchData(false);\n      setLoadingApi(true);\n      getVaults();\n    } else {\n      console.log('no fetch');\n    }\n  }, [shouldFetchData]);\n  useEffect(() => {\n    if (q && vaults.length == 0 && !loadingApi) {\n      console.log('here 2');\n      setShouldFetchData(true); // getVaults()\n    } else {\n      console.log('no fetch', q, vaults);\n    }\n  }, [q, vaults]);\n  useEffect(() => {\n    if (projects.length == 0 && !loadedProjects) {\n      setLoadedProjects(true);\n      getProjects();\n    }\n  }); // useEffect(() => {\n  //   if (query.assetName && !balanceChecks.includes('assetName')) {      \n  //     setBalanceChecks(balanceChecks.concat('assetName'))\n  //   }    \n  // })\n  // useEffect(() => {\n  //   if (query.coin && !balanceChecks.includes('coin')) {      \n  //     setBalanceChecks(balanceChecks.concat('coin'))\n  //   }\n  // })\n\n  function addOrRemoveBalanceFilter(target) {\n    if (balanceChecks.includes(target)) {\n      setBalanceChecks(balanceChecks.filter(item => item !== target));\n    } else {\n      setBalanceChecks(balanceChecks.concat(target));\n    }\n\n    console.log('balance checks', balanceChecks);\n  }\n\n  function addOrRemoveMetadataFilter(target) {\n    if (metadataChecks.includes(target)) {\n      setMetadataChecks(metadataChecks.filter(item => item !== target));\n    } else {\n      setMetadataChecks(metadataChecks.concat(target));\n    }\n\n    console.log('metadata checks', metadataChecks);\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  }) : '', __jsx(VStack, {\n    width: \"100%\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, __jsx(RadioGroup, {\n    onChange: e => {\n      setTempSearchType(e.target.value);\n    },\n    defaultValue: tempSearchType,\n    value: tempSearchType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    spacing: 4,\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 11\n    }\n  }, __jsx(Radio, {\n    isChecked: tempSearchType == \"filter\" ? true : false,\n    value: \"filter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }, \"Filter (AND)\"), __jsx(Radio, {\n    isChecked: tempSearchType === \"or\" ? true : false,\n    value: \"or\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, \"Search (OR)\"))), __jsx(CheckboxGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }, __jsx(HStack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, __jsx(Checkbox, {\n    key: \"check1\",\n    isChecked: balanceChecks.includes('name'),\n    value: \"name\",\n    onChange: e => {\n      addOrRemoveBalanceFilter(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, \"Asset Name\"), __jsx(Checkbox, {\n    key: \"check2\",\n    isChecked: balanceChecks.includes('coin'),\n    value: \"coin\",\n    onChange: e => {\n      addOrRemoveBalanceFilter(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, \"Blockchain\"), __jsx(Checkbox, {\n    key: \"check3\",\n    isChecked: balanceChecks.includes('project'),\n    value: \"project\",\n    onChange: e => {\n      addOrRemoveBalanceFilter(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }, \"Project\"), __jsx(Checkbox, {\n    key: \"check4\",\n    isChecked: metadataChecks.includes('vaultName'),\n    value: \"vaultName\",\n    onChange: e => {\n      addOrRemoveMetadataFilter(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, \"Vault Name\"), __jsx(Checkbox, {\n    key: \"check5\",\n    isChecked: metadataChecks.includes('vaultDescription'),\n    value: \"vaultDescription\",\n    onChange: e => {\n      addOrRemoveMetadataFilter(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }, \"Vault Description\"))), balanceChecks.map((check, index) => {\n    return __jsx(VStack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }\n    }, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 15\n      }\n    }, index == 0 ? null : tempSearchType == \"or\" ? \"or\" : \"and\", \" \", check == \"coin\" ? \"from Blockchain\" : check == \"name\" ? \"within balances for the Asset Name of\" : \"of the Project\"), check == \"name\" ? __jsx(Input, {\n      value: tempAssetName,\n      onChange: e => setTempAssetName(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }) : check == \"coin\" ? __jsx(Select, {\n      value: tempCoin,\n      onChange: e => {\n        setTempCoin(e.target.value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }, __jsx(\"option\", {\n      key: \"1\",\n      value: \"POLYGON\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 19\n      }\n    }, \"Polygon (Matic)\"), __jsx(\"option\", {\n      key: \"2\",\n      value: \"XCP\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 19\n      }\n    }, \"Counterparty\"), __jsx(\"option\", {\n      key: \"3\",\n      value: \"BTC\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 19\n      }\n    }, \"Bitcoin\"), __jsx(\"option\", {\n      key: \"4\",\n      value: \"BCH\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 19\n      }\n    }, \"Bitcoin Cash\"), __jsx(\"option\", {\n      key: \"5\",\n      value: \"DGB\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 19\n      }\n    }, \"Digibyte\"), __jsx(\"option\", {\n      key: \"6\",\n      value: \"DOGE\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 19\n      }\n    }, \"Dogecoin\"), __jsx(\"option\", {\n      key: \"7\",\n      value: \"ETH\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 19\n      }\n    }, \"Ethereum\"), __jsx(\"option\", {\n      key: \"8\",\n      value: \"FTM\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 19\n      }\n    }, \"Fantom\"), __jsx(\"option\", {\n      key: \"9\",\n      value: \"LTC\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 19\n      }\n    }, \"Litecoin\"), __jsx(\"option\", {\n      key: \"10\",\n      value: \"NMC\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 19\n      }\n    }, \"Namecoin\"), __jsx(\"option\", {\n      key: \"11\",\n      value: \"OMNI\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 19\n      }\n    }, \"Omni\"), __jsx(\"option\", {\n      key: \"12\",\n      value: \"xDai\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 19\n      }\n    }, \"xDai\"), __jsx(\"option\", {\n      key: \"13\",\n      value: \"OMNI\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 19\n      }\n    }, \"Omni\"), __jsx(\"option\", {\n      key: \"14\",\n      value: \"XDP\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 19\n      }\n    }, \"Doge Party\"), __jsx(\"option\", {\n      key: \"15\",\n      value: \"XMP\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 19\n      }\n    }, \"Mona Party\"), __jsx(\"option\", {\n      key: \"16\",\n      value: \"XTZ\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 19\n      }\n    }, \"Tezos\")) : check == \"project\" ? __jsx(Select, {\n      value: tempProject,\n      onChange: e => {\n        setTempProject(e.target.value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }\n    }, projects.map((project, index) => {\n      return __jsx(\"option\", {\n        key: \"project-\" + index,\n        value: project,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 29\n        }\n      }, project);\n    })) : null);\n  }), metadataChecks.map((check, index) => {\n    return __jsx(VStack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }\n    }, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 15\n      }\n    }, index == 0 ? null : tempSearchType == \"or\" ? \"or\" : \"and\", \" \", check == \"vaultName\" ? \"within vault name\" : check == \"vaultDescription\" ? \"within vault description\" : null), check == \"vaultName\" ? __jsx(Input, {\n      value: tempVaultName,\n      onChange: e => setTempVaultName(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }\n    }) : check == \"vaultDescription\" ? __jsx(Input, {\n      value: tempVaultDescription,\n      onChange: e => setTempVaultDescription(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }\n    }) : null);\n  }), __jsx(Button, {\n    m: 2,\n    isDisabled: balanceChecks.length < 1 && metadataChecks.length < 1,\n    onClick: () => {\n      setOffset(0);\n      setState({\n        loaded: false\n      });\n      setVaults([]);\n      setQ(true); // let loc = location.href.split('?')[0]+\"?q=\"+temp_q +  \"&network=\" + network\n      // window.history.pushState(temp_q, 'Title', loc);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  }, \"Search\")), q ? __jsx(InfiniteScroll, {\n    className: \"infinite-scroll\",\n    scrollableTarget: \"shannon-container\" // height={200}\n    ,\n    dataLength: vaults.length //This is important field to render the next data\n    ,\n    next: fetchData,\n    hasMore: hasMore,\n    loader: __jsx(Refreshing, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 19\n      }\n    }),\n    endMessage: __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 13\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 15\n      }\n    }, \"Yay! You have seen it all\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }\n  }, __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 11\n    }\n  }, vaults.length ? vaults.map((vault, index) => {\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n    let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId;\n    const flexSettings = {\n      flex: '1',\n      minW: '200px',\n      maxW: '200px',\n      borderWidth: '1px',\n      // color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    const redirect = function () {\n      setLoadingApi(true);\n      location.href = url;\n    };\n\n    return __jsx(Box, _extends({\n      className: \"NFT newest\",\n      key: index\n    }, flexSettings, {\n      onClick: redirect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 19\n      }\n    }), __jsx(Text, {\n      fontWeight: \"semibold\",\n      textAlign: \"center\",\n      mt: 2,\n      pl: 2,\n      isTruncated: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 21\n      }\n    }, vault.name, !vault.private && vault.totalValue > 0 ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 21\n      }\n    }, __jsx(Embed, {\n      className: \"d-block w-100 NFT-newest-image\",\n      url: vault.image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 23\n      }\n    })), __jsx(Box, {\n      d: \"flex\",\n      alignItems: \"baseline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 21\n      }\n    }), __jsx(Stack, {\n      align: \"center\",\n      mt: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 21\n      }\n    }, vault.status == 'claimed' ? __jsx(Text, {\n      color: \"green.500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 52\n      }\n    }, \"CLAIMED\") : null, __jsx(Text, {\n      fontSize: \"xs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 23\n      }\n    }, \"Id: \", vault.tokenId)));\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 15\n    }\n  }, \"YOU DON'T SEEM TO HAVE ANY VAULTS.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 17\n    }\n  }, \"CREATE ONE HERE!\")))) : null);\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Find.tsx"],"names":["Box","Flex","Text","Link","Stack","Button","Checkbox","CheckboxGroup","Radio","RadioGroup","Input","Select","useColorMode","HStack","VStack","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","EMBLEM_API","InfiniteScroll","Embed","Find","query","pagePosition","setPagePosition","Number","start","account","chainId","vaults","setVaults","state","setState","loaded","loadingApi","setLoadingApi","address","setAddress","experimental","setExperimental","colorMode","shouldFetchData","setShouldFetchData","hasMore","setHasMore","offset","setOffset","q","setQ","assetName","setAssetName","name","tempAssetName","setTempAssetName","coin","setCoin","tempCoin","setTempCoin","project","setProject","tempProject","setTempProject","projects","setProjects","loadedProjects","setLoadedProjects","searchType","setSearchType","tempSearchType","setTempSearchType","toString","vaultName","setVaultName","tempVaultName","setTempVaultName","vaultDescription","setVaultDescription","tempVaultDescription","setTempVaultDescription","network","setNetwork","balanceChecks","setBalanceChecks","Object","keys","filter","key","metadataChecks","setMetadataChecks","PAGE_SIZE","getProjects","response","fetch","method","headers","service","jsonData","json","error","getVaults","body","length","metadata","forEach","JSON","stringify","console","log","concat","fetchData","acct","setAcct","chain","setChain","addOrRemoveBalanceFilter","target","includes","item","addOrRemoveMetadataFilter","e","value","map","check","index","textAlign","vault","pieces","location","pathname","split","pop","url","origin","join","tokenId","flexSettings","flex","minW","maxW","borderWidth","mx","mb","rounded","overflow","borderColor","status","cursor","redirect","href","private","totalValue","image"],"mappings":"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","sourcesContent":["// import { Box, Flex, Text, Link, Image, Stack, Spinner, useColorMode } from '@chakra-ui/core'\nimport { Box, Flex, Text, Link, Image, Stack, Button, FormControl, FormLabel, Checkbox, CheckboxGroup, Radio, RadioGroup, Input, FormHelperText, Select, useColorMode } from '@chakra-ui/core'\nimport {HStack, VStack } from '@chakra-ui/react'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Embed from './Embed'\n\nexport default function Find() {\n  const { query } = useRouter()\n  const [pagePosition, setPagePosition] = useState(Number(query.start) || 0)\n  const { account, chainId } = useWeb3React()\n  const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: true })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [address, setAddress] = useState(query.address)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const { colorMode } = useColorMode()\n  const [shouldFetchData, setShouldFetchData] = useState(false)\n  const [hasMore, setHasMore] = useState(true)\n  const [offset, setOffset] = useState(0)\n  const [q, setQ] = useState(false)\n\n  const [assetName, setAssetName] = useState(query.name)\n  const [tempAssetName, setTempAssetName] = useState(assetName || '')\n\n  const [coin, setCoin] = useState(query.coin)\n  const [tempCoin, setTempCoin] = useState(coin || '')\n\n  const [project, setProject] = useState(query.project)\n  const [tempProject, setTempProject] = useState(project || '')\n\n  const [projects, setProjects] = useState([])\n  const [loadedProjects, setLoadedProjects] = useState(false)\n\n  const [searchType, setSearchType] = useState(query.searchType || 'filter')\n  const [tempSearchType, setTempSearchType] = useState(searchType.toString())\n\n  const [vaultName, setVaultName] = useState(query.vaultName)\n  const [tempVaultName, setTempVaultName] = useState(vaultName || '')\n\n  const [vaultDescription, setVaultDescription] = useState(query.vaultDescription)\n  const [tempVaultDescription, setTempVaultDescription] = useState(vaultDescription)\n\n  const [network, setNetwork] = useState(query.network || null)\n  \n  const [balanceChecks, setBalanceChecks] = useState(Object.keys(query).filter(key=>{return key !== \"vaultName\" && key !== \"vaultDescription\" && key !== \"searchType\"}))\n  const [metadataChecks, setMetadataChecks] = useState(Object.keys(query).filter(key=>{return key !== \"name\" && key !== \"coin\" && key !== \"project\" && key !== \"searchType\"}))\n\n  const PAGE_SIZE = 20\n\n  const getProjects = async () => { \n    try {\n      const response = await fetch(EMBLEM_API + '/search/projects', {\n        method: 'GET',\n        headers: {\n          service: 'evmetadata'\n        }\n      })\n      let jsonData = await response.json()\n      \n      setProjects(jsonData)\n    } catch (error) {}\n  } \n\n  const getVaults = async () => {    \n    let body: any = {}\n    if (metadataChecks.length > 0) {\n      body.metadata = {}\n      metadataChecks.forEach(key => {\n        body.metadata[key] = key == \"vaultDescription\" ? \"description\" : \"name\"\n      })\n    }\n    try {\n      const response = await fetch(EMBLEM_API + '/find/'+searchType+'?start='+offset+'&size='+PAGE_SIZE, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify(body)\n      })\n      let jsonData = await response.json()\n      console.log('------ vaults', jsonData)\n      jsonData.length == 0 || jsonData.length < PAGE_SIZE ? setHasMore(false) : setHasMore(true)\n      setVaults(vaults.concat(jsonData))\n      setState({ loaded: true })\n      setLoadingApi(false)\n    } catch (error) {}\n  }\n\n  const fetchData = async() =>{\n    console.log(offset, PAGE_SIZE, offset+PAGE_SIZE)\n    setOffset(offset+PAGE_SIZE)\n    setShouldFetchData(true)\n  }  \n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    // console.log('here', chainId, chain, account, state)\n    if (!account && !state.loaded) {      \n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {    \n    if (shouldFetchData) {\n      console.log('here 1')\n      setShouldFetchData(false)\n      setLoadingApi(true)\n      getVaults()\n    } else {\n      console.log('no fetch')\n    }\n  }, [shouldFetchData])\n\n  useEffect(() => {\n    if (q && vaults.length == 0 && !loadingApi) {\n      console.log('here 2')\n      setShouldFetchData(true)\n      // getVaults()\n    } else {\n      console.log('no fetch', q, vaults)\n    }\n  }, [q, vaults])\n\n  useEffect(() => {\n    if (projects.length == 0 && !loadedProjects) {      \n      setLoadedProjects(true)\n      getProjects()\n    }\n  })\n\n  // useEffect(() => {\n  //   if (query.assetName && !balanceChecks.includes('assetName')) {      \n  //     setBalanceChecks(balanceChecks.concat('assetName'))\n  //   }    \n  // })\n\n  // useEffect(() => {\n  //   if (query.coin && !balanceChecks.includes('coin')) {      \n  //     setBalanceChecks(balanceChecks.concat('coin'))\n  //   }\n  // })\n\n  function addOrRemoveBalanceFilter(target) {\n    if (balanceChecks.includes(target)) {\n      setBalanceChecks(balanceChecks.filter(item => item !== target))\n    } else {\n      setBalanceChecks(balanceChecks.concat(target))\n    }\n    console.log('balance checks',balanceChecks)\n  }\n\n  function addOrRemoveMetadataFilter(target) {\n    if (metadataChecks.includes(target)) {\n      setMetadataChecks(metadataChecks.filter(item => item !== target))\n    } else {\n      setMetadataChecks(metadataChecks.concat(target))\n    }\n    console.log('metadata checks',metadataChecks)\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n      <VStack width=\"100%\" align=\"center\" justifyContent=\"center\" >\n        <RadioGroup onChange={(e)=>{ setTempSearchType(e.target.value) }} defaultValue={tempSearchType} value={tempSearchType}>\n          <Stack spacing={4} direction=\"row\">                \n            <Radio isChecked={tempSearchType == \"filter\"? true : false} value=\"filter\">Filter (AND)</Radio>\n            <Radio isChecked={tempSearchType === \"or\"? true : false} value=\"or\">Search (OR)</Radio>\n          </Stack>\n        </RadioGroup>\n        <CheckboxGroup>\n          <HStack>\n            <Checkbox key=\"check1\" isChecked={balanceChecks.includes('name')} value=\"name\" onChange={(e)=>{addOrRemoveBalanceFilter(e.target.value)}} >Asset Name</Checkbox>\n            <Checkbox key=\"check2\" isChecked={balanceChecks.includes('coin')} value=\"coin\" onChange={(e)=>{addOrRemoveBalanceFilter(e.target.value)}} >Blockchain</Checkbox>\n            <Checkbox key=\"check3\" isChecked={balanceChecks.includes('project')} value=\"project\" onChange={(e)=>{addOrRemoveBalanceFilter(e.target.value)}} >Project</Checkbox>\n            <Checkbox key=\"check4\" isChecked={metadataChecks.includes('vaultName')} value=\"vaultName\" onChange={(e)=>{addOrRemoveMetadataFilter(e.target.value)}} >Vault Name</Checkbox>\n            <Checkbox key=\"check5\" isChecked={metadataChecks.includes('vaultDescription')} value=\"vaultDescription\" onChange={(e)=>{addOrRemoveMetadataFilter(e.target.value)}} >Vault Description</Checkbox>\n          </HStack>\n        </CheckboxGroup>\n        {balanceChecks.map((check, index)=>{\n          return (\n            <VStack>\n              <Text>{index == 0 ? null : (tempSearchType == \"or\"? \"or\": \"and\")} {check == \"coin\" ? \"from Blockchain\": check==\"name\" ? \"within balances for the Asset Name of\": \"of the Project\"}</Text>\n              {check == \"name\" ? (\n                <Input value={tempAssetName} onChange={(e) => setTempAssetName(e.target.value)} ></Input>\n              ) : check == \"coin\" ? (\n                <Select value={tempCoin} onChange={(e)=>{setTempCoin(e.target.value)}}>\n                  <option key=\"1\" value=\"POLYGON\">Polygon (Matic)</option>\n                  <option key=\"2\" value=\"XCP\">Counterparty</option>\n                  <option key=\"3\" value=\"BTC\">Bitcoin</option>\n                  <option key=\"4\" value=\"BCH\">Bitcoin Cash</option>\n                  <option key=\"5\" value=\"DGB\">Digibyte</option>\n                  <option key=\"6\" value=\"DOGE\">Dogecoin</option>\n                  <option key=\"7\" value=\"ETH\">Ethereum</option>\n                  <option key=\"8\" value=\"FTM\">Fantom</option>\n                  <option key=\"9\" value=\"LTC\">Litecoin</option>\n                  <option key=\"10\" value=\"NMC\">Namecoin</option>\n                  <option key=\"11\" value=\"OMNI\">Omni</option>\n                  <option key=\"12\" value=\"xDai\">xDai</option>\n                  <option key=\"13\" value=\"OMNI\">Omni</option>\n                  <option key=\"14\" value=\"XDP\">Doge Party</option>\n                  <option key=\"15\" value=\"XMP\">Mona Party</option>\n                  <option key=\"16\" value=\"XTZ\">Tezos</option>\n                </Select>\n              ) : check == \"project\" ? (\n                <Select value={tempProject} onChange={(e)=>{setTempProject(e.target.value)}}>\n                  {projects.map((project, index)=>{\n                    return (<option key={\"project-\"+index} value={project}>{project}</option>)\n                  })}\n                </Select>\n              ) : null}\n            </VStack>\n          )\n        })}\n        {metadataChecks.map((check, index)=>{\n          return (\n            <VStack>\n              <Text>{index == 0 ? null : (tempSearchType == \"or\"? \"or\": \"and\")} {check == \"vaultName\" ? \"within vault name\": check==\"vaultDescription\" ? \"within vault description\": null}</Text>\n              {check == \"vaultName\" ? (\n                <Input value={tempVaultName} onChange={(e) => setTempVaultName(e.target.value)}></Input>\n              ) : check== \"vaultDescription\" ? (\n                <Input value={tempVaultDescription} onChange={(e) => setTempVaultDescription(e.target.value)}></Input>\n              ) : null}              \n            </VStack>\n          )})}\n          <Button\n              m={2}\n              isDisabled={balanceChecks.length < 1 && metadataChecks.length < 1}\n              onClick={() => {\n                setOffset(0)\n                setState({ loaded: false })\n                setVaults([])                \n                setQ(true)\n                // let loc = location.href.split('?')[0]+\"?q=\"+temp_q +  \"&network=\" + network\n                // window.history.pushState(temp_q, 'Title', loc);\n              }}\n            >Search\n          </Button>\n      </VStack>\n            \n      {q? (\n        <InfiniteScroll                \n          className=\"infinite-scroll\"\n          scrollableTarget=\"shannon-container\"\n          // height={200}\n          dataLength={vaults.length} //This is important field to render the next data\n          next={fetchData}\n          hasMore={hasMore}\n          loader={<Refreshing />}\n          endMessage={\n            <p style={{ textAlign: 'center' }}>\n              <b>Yay! You have seen it all</b> \n            </p>\n          }\n        >\n          <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\" mt={10}>        \n            {vaults.length ? (\n              vaults.map((vault, index) => {\n                let pieces = location.pathname.split('/')\n                pieces.pop()\n                let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId\n                const flexSettings = {\n                  flex: '1',\n                  minW: '200px',\n                  maxW: '200px',\n                  borderWidth: '1px',\n                  // color: 'white',\n                  mx: '6',\n                  mb: '6',\n                  rounded: 'lg',\n                  overflow: 'hidden',\n                  borderColor: vault.status == 'claimed' ? 'green !important' : '',\n                  cursor: 'pointer',\n                }\n                const redirect = function () {\n                  setLoadingApi(true)\n                  location.href = url\n                }\n                return (\n                  <Box className=\"NFT newest\" key={index} {...flexSettings} onClick={redirect}>\n                    <Text fontWeight=\"semibold\" textAlign=\"center\" mt={2} pl={2} isTruncated={true}>\n                      {vault.name}\n                      {!vault.private && vault.totalValue > 0 ? ': ~$' + vault.totalValue : null}\n                    </Text>\n                    <Stack align=\"center\">\n                      <Embed className=\"d-block w-100 NFT-newest-image\" url={vault.image}/>\n                    </Stack>\n                    <Box d=\"flex\" alignItems=\"baseline\">\n                      \n                    </Box>\n                    \n                    <Stack align=\"center\" mt={3}>\n                      {vault.status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                      <Text fontSize=\"xs\">Id: {vault.tokenId}</Text>\n                    </Stack>\n                  </Box>\n                )\n              })\n              \n            ) : (\n              <Text>\n                YOU DON'T SEEM TO HAVE ANY VAULTS.{' '}\n                <Link color=\"#638cd8\" href=\"../create\">\n                  CREATE ONE HERE!\n                </Link>\n              </Text>\n            )}\n            \n          </Flex>\n        </InfiniteScroll>\n      ) : null}\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}