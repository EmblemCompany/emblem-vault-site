{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft2.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure, Collapse, FormLabel, useColorMode, Tabs, TabList, Tab, TabPanel, TabPanels } from '@chakra-ui/core';\nimport { HStack } from '@chakra-ui/react'; // import TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\n\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport dynamic from 'next/dynamic';\nimport { isETHAddress } from '../utils';\nimport { Contract } from '@ethersproject/contracts';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport CryptoJS from 'crypto-js';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nimport NFTSlideshow from './embed/NFTSlideshow';\nimport CoinBalance from './partials/CoinBalance';\nimport transakSDK from '@transak/transak-sdk';\nimport Attributes from './partials/Attributes';\nimport { generateWallet } from '@stacks/wallet-sdk';\nimport FetchNodeDetails from \"@toruslabs/fetch-node-details\";\nimport TorusUtils from \"@toruslabs/torus.js\";\nvar API_VERSION = '/v2';\nvar AddrModal = dynamic(_c = function _c() {\n  return import('./AddrModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./AddrModal')];\n    },\n    modules: ['./AddrModal']\n  }\n});\n_c2 = AddrModal;\nvar KeysModal = dynamic(_c3 = function _c3() {\n  return import('./KeysModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./KeysModal')];\n    },\n    modules: ['./KeysModal']\n  }\n});\n_c4 = KeysModal;\nvar OfferModal = dynamic(_c5 = function _c5() {\n  return import('./OfferModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./OfferModal')];\n    },\n    modules: ['./OfferModal']\n  }\n});\n_c6 = OfferModal;\nexport default function Nft2() {\n  _s();\n\n  var _this = this;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(false),\n      approved = _useState[0],\n      setApproved = _useState[1];\n\n  var _useState2 = useState(query.useOldMint),\n      useOldMint = _useState2[0],\n      setUseOldMint = _useState2[1];\n\n  var _useState3 = useState(query.key),\n      mintPassword = _useState3[0],\n      setMintPassword = _useState3[1];\n\n  var _useState4 = useState(query.offer || false),\n      showOffer = _useState4[0],\n      setShowOffer = _useState4[1];\n\n  var _useState5 = useState(query.framed || true),\n      framed = _useState5[0],\n      setFramed = _useState5[1];\n\n  var _useState6 = useState(query.id),\n      tokenId = _useState6[0],\n      setTokenId = _useState6[1];\n\n  var _useState7 = useState(query.experimental),\n      experimental = _useState7[0],\n      setExperimental = _useState7[1];\n\n  var _useState8 = useState(query.noLayout),\n      noLayout = _useState8[0],\n      setNoLayout = _useState8[1];\n\n  var _useState9 = useState(query.slideshowOnly || false),\n      slideshowOnly = _useState9[0],\n      setSlideshowOnly = _useState9[1];\n\n  var _useState10 = useState(''),\n      vaultName = _useState10[0],\n      setVaultName = _useState10[1];\n\n  var _useState11 = useState(''),\n      vaultIPFS = _useState11[0],\n      setVaultIPFS = _useState11[1];\n\n  var _useState12 = useState(''),\n      vaultImageIPFS = _useState12[0],\n      setVaultImageIPFS = _useState12[1];\n\n  var _useState13 = useState(''),\n      vaultCiphertextV2 = _useState13[0],\n      setVaultCiphertextV2 = _useState13[1];\n\n  var _useState14 = useState(''),\n      vaultDesc = _useState14[0],\n      setVaultDesc = _useState14[1];\n\n  var _useState15 = useState(''),\n      vaultImage = _useState15[0],\n      setVaultImage = _useState15[1];\n\n  var _useState16 = useState(''),\n      ownedImage = _useState16[0],\n      setOwnedImage = _useState16[1];\n\n  var _useState17 = useState([]),\n      vaultValues = _useState17[0],\n      setVaultValues = _useState17[1];\n\n  var _useState18 = useState(false),\n      loadedValues = _useState18[0],\n      setLoadedValues = _useState18[1];\n\n  var _useState19 = useState([]),\n      vaultDataValues = _useState19[0],\n      setVaultDataValues = _useState19[1];\n\n  var _useState20 = useState([]),\n      attributes = _useState20[0],\n      setAttributes = _useState20[1];\n\n  var _useState21 = useState([]),\n      vaultAddresses = _useState21[0],\n      setVaultAddresses = _useState21[1];\n\n  var _useState22 = useState(false),\n      vaultPrivacy = _useState22[0],\n      setVaultPrivacy = _useState22[1];\n\n  var _useState23 = useState(0),\n      vaultTotalValue = _useState23[0],\n      setVaultTotalValue = _useState23[1];\n\n  var _useState24 = useState(null),\n      vaultChainId = _useState24[0],\n      setVaultChainId = _useState24[1];\n\n  var _useState25 = useState(null),\n      vaultChain = _useState25[0],\n      setVaultChain = _useState25[1];\n\n  var _useState26 = useState(null),\n      hash = _useState26[0],\n      setHash = _useState26[1];\n\n  var _useState27 = useState(''),\n      currCoin = _useState27[0],\n      setCurrCoin = _useState27[1];\n\n  var _useState28 = useState(''),\n      currAddr = _useState28[0],\n      setCurrAddr = _useState28[1];\n\n  var _useState29 = useState({\n    loaded: false\n  }),\n      state = _useState29[0],\n      setState = _useState29[1];\n\n  var _useState30 = useState(false),\n      mine = _useState30[0],\n      setMine = _useState30[1];\n\n  var _useState31 = useState(false),\n      claiming = _useState31[0],\n      setClaiming = _useState31[1];\n\n  var _useState32 = useState('claimed'),\n      status = _useState32[0],\n      setStatus = _useState32[1];\n\n  var _useState33 = useState(false),\n      sealed = _useState33[0],\n      setSealed = _useState33[1];\n\n  var _useState34 = useState(null),\n      claimedBy = _useState34[0],\n      setClaimedBy = _useState34[1];\n\n  var _useState35 = useState(''),\n      mnemonic = _useState35[0],\n      setMnemonic = _useState35[1];\n\n  var _useState36 = useState(''),\n      privKeyBTC = _useState36[0],\n      setPrivKeyBTC = _useState36[1];\n\n  var _useState37 = useState(''),\n      privKeyETH = _useState37[0],\n      setPrivKeyETH = _useState37[1];\n\n  var _useState38 = useState([]),\n      privValues = _useState38[0],\n      setKeyValues = _useState38[1];\n\n  var _useState39 = useState(false),\n      loadingApi = _useState39[0],\n      setLoadingApi = _useState39[1];\n\n  var _useState40 = useState(''),\n      decryptedEffect = _useState40[0],\n      setDecryptedEffect = _useState40[1];\n\n  var _useState41 = useState(false),\n      decryptedEffectRunning = _useState41[0],\n      setDecryptedEffectRunning = _useState41[1];\n\n  var _useState42 = useState(''),\n      decryptPassword = _useState42[0],\n      setDecryptPassword = _useState42[1];\n\n  var _useState43 = useState(false),\n      invalidVault = _useState43[0],\n      setInvalidVault = _useState43[1];\n\n  var _useState44 = useState(false),\n      hasCheckedNft = _useState44[0],\n      setHasCheckedNft = _useState44[1];\n\n  var _useState45 = useState(false),\n      accepting = _useState45[0],\n      setAccepting = _useState45[1];\n\n  var _useState46 = useState(false),\n      approving = _useState46[0],\n      setApproving = _useState46[1];\n\n  var _useState47 = useState(false),\n      acceptable = _useState47[0],\n      setAcceptable = _useState47[1];\n\n  var _useState48 = useState(''),\n      transferPassword = _useState48[0],\n      setTransferPassword = _useState48[1];\n\n  var _useState49 = useState(false),\n      showTransferPassword = _useState49[0],\n      setShowTransferPassword = _useState49[1];\n\n  var _useState50 = useState(false),\n      preTransfering = _useState50[0],\n      setPreTransfering = _useState50[1];\n\n  var _useState51 = useState(null),\n      transferToAddress = _useState51[0],\n      setTransferToAddress = _useState51[1];\n\n  var _useState52 = useState(false),\n      transfering = _useState52[0],\n      setTransfering = _useState52[1];\n\n  var _useState53 = useState(null),\n      owner = _useState53[0],\n      setOwner = _useState53[1]; // const [torus, setTorus] = useState(initTorus())\n\n\n  var _useState54 = useState(false),\n      live = _useState54[0],\n      setLive = _useState54[1];\n\n  var _useState55 = useState(null),\n      nonce = _useState55[0],\n      setNonce = _useState55[1];\n\n  var _useState56 = useState(null),\n      mintSignature = _useState56[0],\n      setMintSignature = _useState56[1];\n\n  var _useState57 = useState(null),\n      to = _useState57[0],\n      setTo = _useState57[1];\n\n  var _useState58 = useState(false),\n      showVerifyingSignature = _useState58[0],\n      setShowVerifyingSignature = _useState58[1];\n\n  var _useState59 = useState(false),\n      showMakingVaultMsg = _useState59[0],\n      setShowMakingVaultMsg = _useState59[1];\n\n  var _useState60 = useState(false),\n      minting = _useState60[0],\n      setMinting = _useState60[1];\n\n  var _useState61 = useState(false),\n      isCrowdSale = _useState61[0],\n      setIsCrowdSale = _useState61[1];\n\n  var _useState62 = useState(null),\n      alternateContractAddress = _useState62[0],\n      setAlternateContractAddress = _useState62[1];\n\n  var _useState63 = useState({\n    name: '',\n    image: '',\n    metadata: ''\n  }),\n      targetAsset = _useState63[0],\n      setTargetAsset = _useState63[1];\n\n  var _useState64 = useState({\n    name: '',\n    chain: '',\n    4: '',\n    1: '',\n    tokenId: {},\n    serialNumber: {\n      'hex': ''\n    }\n  }),\n      targetContract = _useState64[0],\n      setTargetContract = _useState64[1];\n\n  var _useState65 = useState(false),\n      canCuratedMint = _useState65[0],\n      setCanCuratedMint = _useState65[1];\n\n  var _useState66 = useState({}),\n      curatedMintingParameters = _useState66[0],\n      setCuratedMintingParameters = _useState66[1]; // const [transferImage, setTransferImage] = useState('')\n\n\n  var handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  var vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  var _useDisclosure = useDisclosure(),\n      isOpenAddrModal = _useDisclosure.isOpen,\n      onOpenAddrModal = _useDisclosure.onOpen,\n      onCloseAddrModal = _useDisclosure.onClose;\n\n  var _useDisclosure2 = useDisclosure(),\n      isOpenKeysModal = _useDisclosure2.isOpen,\n      onOpenKeysModal = _useDisclosure2.onOpen,\n      onCloseKeysModal = _useDisclosure2.onClose;\n\n  var _useDisclosure3 = useDisclosure(),\n      isOpenOfferModal = _useDisclosure3.isOpen,\n      onOpenOfferModal = _useDisclosure3.onOpen,\n      onCloseOfferModal = _useDisclosure3.onClose;\n\n  var _useDisclosure4 = useDisclosure(),\n      isOpen = _useDisclosure4.isOpen,\n      onToggle = _useDisclosure4.onToggle;\n\n  var _useDisclosure5 = useDisclosure(),\n      isManageAddressOpen = _useDisclosure5.isOpen,\n      onManageAddressToggle = _useDisclosure5.onToggle;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var transak;\n  var transferImage; // async function initTorus() {\n  //   let _torus = new TorusSdk({\n  //     baseUrl: `${window.location.origin}/serviceworker`,\n  //     enableLogging: true,\n  //     network: \"testnet\", // details for test net\n  //   });\n  //   await _torus.init({skipSw: true, skipInit: true, skipPrefetch: true})\n  //   console.log(\"Initialized Torus\")\n  //   return _torus\n  // }\n\n  var getVaultContract = function getVaultContract() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked());\n  };\n\n  var getCuratedContract = function getCuratedContract() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return new Contract(address, contractAddresses.erc1155Abi, library.getSigner(account).connectUnchecked());\n  };\n\n  var initializeTransak = function initializeTransak(address, coin) {\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',\n      // Your API Key\n      environment: 'PRODUCTION',\n      // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '',\n      // Your customer's wallet address\n      themeColor: '000000',\n      // App theme color\n      fiatCurrency: 'USD',\n      // INR/GBP\n      // fiatAmount: 350,\n      email: '',\n      // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    }); // To get all the events\n\n    transak.on(transak.ALL_EVENTS, function (data) {\n      console.log(data);\n    }); // This will trigger when the user marks payment is made.\n\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, function (orderData) {\n      console.log(orderData);\n      transak.close();\n    });\n    transak.init();\n  };\n\n  var checkLiveliness = function checkLiveliness(tokenId, cb) {\n    fetch(EMBLEM_API + API_VERSION + '/liveliness-curated', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        tokenId: tokenId\n      })\n    }).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context.sent;\n                setLive(data.live);\n                console.log(\"Liveliness check\", data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    return cb();\n  };\n\n  var transferVault = function transferVault() {\n    setTransfering(true);\n    emblemContract.transferFrom(account, transferToAddress, tokenId).then(function (_ref2) {\n      var hash = _ref2.hash;\n      setHash(hash);\n    })[\"catch\"](function (error) {});\n  };\n\n  var delayedMint = function delayedMint() {\n    // setCreating(true)\n    console.log(\"Delayed Minting\");\n    setShowVerifyingSignature(false);\n    setShowMakingVaultMsg(true);\n    setMinting(true);\n    var cipherTextHash = vaultAddresses.filter(function (address) {\n      return address.coin == \"ETH\";\n    })[0].address;\n    handlerContract.buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature).then(function (_ref3) {\n      var hash = _ref3.hash;\n      setTimeout(function () {\n        setHash(hash);\n        setShowMakingVaultMsg(false);\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      setShowMakingVaultMsg(false); // setMinting(false)\n    });\n  };\n\n  var deleteVault = function deleteVault() {\n    library.getSigner(account).signMessage('Delete: ' + tokenId).then(function (signature) {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + API_VERSION + '/delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then( /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {\n          var data;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return response.json();\n\n                case 2:\n                  data = _context2.sent;\n                  location.href = location.href.split(\"/\")[0] + \"/vaults\";\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    });\n  };\n\n  var lazyMintCurated = function lazyMintCurated() {\n    library.getSigner(account).signMessage('Curated Minting: ' + tokenId).then(function (signature) {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + API_VERSION + '/mint-curated', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then( /*#__PURE__*/function () {\n        var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response) {\n          var data;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return response.json();\n\n                case 2:\n                  data = _context3.sent;\n                  console.log(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._payload, data._nonce, data._signature, data.serialNumber);\n                  setCuratedMintingParameters(data);\n                  vaultHandlerContract.buyWithSignedPrice(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._payload, data._nonce, data._signature, data.serialNumber).then(function (_ref6) {\n                    var hash = _ref6.hash;\n                    setTimeout(function () {\n                      setHash(hash);\n                      setShowMakingVaultMsg(true);\n                      setMinting(true);\n                    }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n                  })[\"catch\"](function (error) {\n                    setShowMakingVaultMsg(false);\n                    setMinting(false);\n                  });\n\n                case 6:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref5.apply(this, arguments);\n        };\n      }());\n    });\n  };\n  /* NOT v2 */\n\n\n  var lazyMint = function lazyMint() {\n    library.getSigner(account).signMessage('Delayed Minting: ' + tokenId).then(function (signature) {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + '/lazyMint', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature\n        })\n      }).then( /*#__PURE__*/function () {\n        var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(response) {\n          var data;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return response.json();\n\n                case 2:\n                  data = _context4.sent;\n                  console.log(\"data\", data.data);\n                  setMintSignature(data.data.signature);\n                  setNonce(data.data.nonce);\n                  setShowVerifyingSignature(true); // setCreating(true)\n\n                  setTimeout(function () {\n                    delayedMint();\n                  }, 500);\n\n                case 8:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        return function (_x4) {\n          return _ref7.apply(this, arguments);\n        };\n      }());\n    });\n  };\n\n  var getAllBalances = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(values, tokenId, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return fetch(EMBLEM_API + '/vault/balance/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context5.sent;\n              _context5.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context5.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context5.next = 11;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 11:\n              return _context5.abrupt(\"return\", cb(values));\n\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function getAllBalances(_x5, _x6, _x7) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var handleApproveForall = function handleApproveForall() {\n    setApproving(true);\n\n    if (targetContract.name) {\n      emblemContract = getCuratedContract(targetContract[chainId]);\n      emblemContract.setApprovalForAll(contractAddresses.vaultHandlerV8[chainId], true).then(function (_ref9) {\n        var hash = _ref9.hash;\n        setTimeout(function () {\n          setHash(hash); // setShowMakingVaultMsg(true)\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })[\"catch\"](function (error) {\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(\"tx failed.\", error);\n        } else {\n          setApproving(false); // setShowPreVaultMsg(false)\n        }\n      });\n    } else {\n      emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(function (_ref10) {\n        var hash = _ref10.hash;\n        setTimeout(function () {\n          setHash(hash); // setShowMakingVaultMsg(true)\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })[\"catch\"](function (error) {\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(\"tx failed.\", error);\n        } else {\n          setApproving(false); // setShowPreVaultMsg(false)\n        }\n      });\n    }\n  };\n\n  var getVault = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              console.log('getvault'); // !slideshowOnly ? loadCache() : null\n\n              _context6.next = 3;\n              return fetch(EMBLEM_API + API_VERSION + '/meta/' + tokenId + '?experimental=true', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 3:\n              responce = _context6.sent;\n              _context6.next = 6;\n              return responce.json();\n\n            case 6:\n              jsonData = _context6.sent;\n\n              if (jsonData.collectionAddress) {\n                setIsCrowdSale(true);\n                setAlternateContractAddress(jsonData.collectionAddress);\n              }\n\n              if (!jsonData.name) {\n                setState({\n                  loaded: true\n                });\n                setInvalidVault(true);\n              } else {\n                console.log(\"---------------\", jsonData);\n                setStates(jsonData); // !slideshowOnly? saveCache(jsonData) : null\n\n                setLoadingApi(false);\n                setInvalidVault(false);\n              }\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function getVault() {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  var setStates = function setStates(jsonData) {\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\" + framed : null;\n\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2);\n      console.log(\"ciphertextV2\", jsonData.ciphertextV2);\n    }\n\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setOwnedImage(jsonData.ownedImage || null);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)) : null;\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(function (item) {\n      return item.trait_type === \"key\";\n    })) : null;\n    jsonData.attributes ? setAttributes(jsonData.attributes) : null;\n    setVaultAddresses(jsonData.addresses);\n    setVaultIPFS(jsonData.ipfs || null);\n    setVaultImageIPFS(jsonData.image_ipfs || null);\n    jsonData.targetAsset ? setTargetAsset(jsonData.targetAsset) : null;\n    jsonData.targetContract ? setTargetContract(jsonData.targetContract) : null;\n    jsonData.values && jsonData.targetAsset && jsonData.values.filter(function (item) {\n      return item.coin.toLowerCase() == jsonData.targetContract.chain && item.name == jsonData.targetAsset.name && item.project == jsonData.targetContract.name;\n    }).length > 0 ? setCanCuratedMint(true) : null;\n    setLive(jsonData.live == false ? false : true);\n\n    if (!jsonData.live) {\n      checkLiveliness(tokenId, function () {\n        setLive(true);\n      });\n    }\n\n    setNonce(jsonData.nonce);\n    setMintSignature(jsonData.signature);\n    setTo(jsonData.to);\n    setVaultChain(jsonData.network);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"goerli\" ? 5 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : jsonData.network == \"xdai\" ? 100 : jsonData.network == \"bsc\" ? 56 : jsonData.network == \"fantom\" ? 250 : jsonData.network == \"bitcoin\" ? 0 : jsonData.network == \"aurora\" ? 1313161554 : 97);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    } // console.log('inside getstates. mine is ', mine)\n\n\n    setState({\n      loaded: true\n    });\n    var isPvt = jsonData.addresses.filter(function (item) {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n\n    if (jsonData.sealed) {\n      setSealed(true);\n    } else {\n      setSealed(false);\n    }\n  }; // const getEthBalances = async (address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n  //   setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n  //   // console.log('get eth balances', jsonData.values)\n  //   return cb(jsonData.values)\n  // }\n  // const getBtcBalance = async (values, address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // setVaultValues(values.concat(jsonData.values))\n  //   return cb(values.concat(jsonData.values))\n  // }\n  // const getNftBalance = async (values, address, cb) => {\n  //   // console.log(address)\n  //   const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   if (jsonData.length > 0) {\n  //     // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n  //     return cb(values.concat(jsonData))\n  //   } else {\n  //     return cb(values)\n  //   }\n  // }\n  // const getAllBalances = async (values, tokenId, cb) => {\n  //   // console.log(address)\n  //   const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   console.log('responce', responce, jsonData)\n  //   if (jsonData.balances.length > 0) {      \n  //     return cb(values.concat(jsonData.balances))\n  //   } else {\n  //     return cb(values)\n  //   }\n  // }\n\n\n  var getAllBalancesLive = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(values, tokenId, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!loadedValues) {\n                _context7.next = 2;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", cb(false));\n\n            case 2:\n              setLoadedValues(true);\n              _context7.next = 5;\n              return fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 5:\n              responce = _context7.sent;\n              _context7.next = 8;\n              return responce.json();\n\n            case 8:\n              jsonData = _context7.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context7.next = 14;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 14:\n              return _context7.abrupt(\"return\", cb(values));\n\n            case 15:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function getAllBalancesLive(_x8, _x9, _x10) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalancesByAddress = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(values, ethAddress, btcAddress, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context8.sent;\n              _context8.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context8.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context8.next = 11;\n                break;\n              }\n\n              return _context8.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 11:\n              return _context8.abrupt(\"return\", cb(values));\n\n            case 12:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function getAllBalancesByAddress(_x11, _x12, _x13, _x14) {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  var saveCache = function saveCache(vault) {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  var loadCache = function loadCache() {\n    console.log('cache');\n    var vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  var savePasswordToLocalStorage = function savePasswordToLocalStorage() {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  var loadPasswordFromLocalStorage = function loadPasswordFromLocalStorage() {\n    var storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  }; // const getKeys = async (signature, tokenId, cb) => {\n  //   var myHeaders = new Headers()\n  //   myHeaders.append('chainId', chainId.toString())\n  //   myHeaders.append('service', 'evmetadata')\n  //   myHeaders.append('Content-Type', 'application/json')\n  //   var raw = JSON.stringify({ signature: signature })\n  //   const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n  //     method: 'POST',\n  //     headers: myHeaders,\n  //     body: raw,\n  //     redirect: 'follow',\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log('getKeys response is ', jsonData)\n  //   return cb(jsonData)\n  // }\n\n\n  var getSignedJWT = /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainid', chainId.toString());\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature,\n                tokenId: tokenId\n              });\n              _context9.next = 6;\n              return fetch('https://tor-us-signer-vert.vercel.app/sign', {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 6:\n              responce = _context9.sent;\n              _context9.next = 9;\n              return responce.json();\n\n            case 9:\n              jsonData = _context9.sent;\n              return _context9.abrupt(\"return\", cb(jsonData));\n\n            case 11:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function getSignedJWT(_x15, _x16, _x17) {\n      return _ref14.apply(this, arguments);\n    };\n  }(); // const getRemoteKey = async (tokenId, token, cb)=> {   \n  //   let error = false\n  //   let keys = await (await torus).getTorusKey(\n  //       \"tor-us-signer-vercel\", \n  //       tokenId,\n  //       { verifier_id: tokenId }, \n  //       token, \n  //     ).catch(err=>{\n  //       error = err.message\n  //     })\n  //     if (error) {\n  //       console.log(\"error\", error)\n  //       return cb(false)\n  //     } else {\n  //       return cb(keys)\n  //     }\n  // }\n\n\n  function getTorusKeys(_x18, _x19, _x20) {\n    return _getTorusKeys.apply(this, arguments);\n  }\n\n  function _getTorusKeys() {\n    _getTorusKeys = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(verifierId, idToken, cb) {\n      var fetchNodeDetails, torusUtils, _yield$fetchNodeDetai, torusNodeEndpoints, torusIndexes, _yield$torusUtils$ret, privKey;\n\n      return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              fetchNodeDetails = new FetchNodeDetails({\n                network: \"https://rpc.ankr.com/eth_ropsten\",\n                proxyAddress: \"0x6258c9d6c12ed3edda59a1a6527e469517744aa7\"\n              });\n              torusUtils = new TorusUtils({\n                enableOneKey: true,\n                network: \"testnet\"\n              });\n              _context26.next = 4;\n              return fetchNodeDetails.getNodeDetails({\n                verifier: 'tor-us-signer-vercel',\n                verifierId: verifierId\n              });\n\n            case 4:\n              _yield$fetchNodeDetai = _context26.sent;\n              torusNodeEndpoints = _yield$fetchNodeDetai.torusNodeEndpoints;\n              torusIndexes = _yield$fetchNodeDetai.torusIndexes;\n              _context26.next = 9;\n              return torusUtils.retrieveShares(torusNodeEndpoints, torusIndexes, 'tor-us-signer-vercel', {\n                verifier_id: verifierId\n              }, idToken);\n\n            case 9:\n              _yield$torusUtils$ret = _context26.sent;\n              privKey = _yield$torusUtils$ret.privKey;\n              return _context26.abrupt(\"return\", cb({\n                privateKey: privKey\n              }));\n\n            case 12:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee26);\n    }));\n    return _getTorusKeys.apply(this, arguments);\n  }\n\n  var addAddress = /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(signature, tokenId, coin, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature,\n                coin: coin\n              });\n              _context10.next = 7;\n              return fetch(EMBLEM_API + '/address/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context10.sent;\n              _context10.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context10.sent;\n              return _context10.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function addAddress(_x21, _x22, _x23, _x24) {\n      return _ref15.apply(this, arguments);\n    };\n  }();\n\n  var decryptEmbed = /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature\n              });\n              _context11.next = 7;\n              return fetch(EMBLEM_API + '/embed/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context11.sent;\n              _context11.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context11.sent;\n              return _context11.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    return function decryptEmbed(_x25, _x26, _x27) {\n      return _ref16.apply(this, arguments);\n    };\n  }();\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n      var owned, _owner, finish, _finish;\n\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _finish = function _finish3() {\n                _finish = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n                  var isApproved;\n                  return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n                    while (1) {\n                      switch (_context12.prev = _context12.next) {\n                        case 0:\n                          if (!targetContract[chainId]) {\n                            _context12.next = 6;\n                            break;\n                          }\n\n                          _context12.next = 3;\n                          return emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId]);\n\n                        case 3:\n                          isApproved = _context12.sent;\n                          _context12.next = 9;\n                          break;\n\n                        case 6:\n                          _context12.next = 8;\n                          return emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n\n                        case 8:\n                          isApproved = _context12.sent;\n\n                        case 9:\n                          setApproved(isApproved); // setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n\n                          setOwner(_owner);\n                          setMine(_owner === account);\n                          loadPasswordFromLocalStorage();\n\n                        case 13:\n                        case \"end\":\n                          return _context12.stop();\n                      }\n                    }\n                  }, _callee12);\n                }));\n                return _finish.apply(this, arguments);\n              };\n\n              finish = function _finish2() {\n                return _finish.apply(this, arguments);\n              };\n\n              console.log(\"Contract states\");\n              owned = false;\n              _context13.prev = 4;\n\n              if (!targetContract[chainId]) {\n                _context13.next = 13;\n                break;\n              }\n\n              emblemContract = getCuratedContract(targetContract[chainId]);\n              _context13.next = 9;\n              return emblemContract.getOwnerOfSerial(targetContract.serialNumber);\n\n            case 9:\n              _owner = _context13.sent;\n              console.log(\"--------------------------- owner\", _owner, approved, account, contractAddresses.vaultHandlerV8[chainId]);\n              _context13.next = 16;\n              break;\n\n            case 13:\n              _context13.next = 15;\n              return emblemContract.ownerOf(tokenId);\n\n            case 15:\n              _owner = _context13.sent;\n\n            case 16:\n              finish();\n              _context13.next = 23;\n              break;\n\n            case 19:\n              _context13.prev = 19;\n              _context13.t0 = _context13[\"catch\"](4);\n              _owner = \"0x0000000000000000000000000000000000000000\";\n              finish();\n\n            case 23:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, null, [[4, 19]]);\n    }));\n\n    return function getContractStates() {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    console.log(\"mine?\", mine);\n    console.log(\"claiming?\", claiming);\n    console.log(\"accepting?\", accepting);\n    console.log(\"acceptable\", acceptable);\n    console.log(\"-----\", live, to, account, vaultChainId, chainId, status, showMakingVaultMsg, vaultCiphertextV2);\n  });\n\n  var hasAddress = function hasAddress(coin) {\n    console.log(coin, vaultAddresses.filter(function (address) {\n      return address.coin == coin;\n    }).length > 0);\n    return vaultAddresses.filter(function (address) {\n      return address.coin == coin;\n    }).length > 0;\n  };\n\n  var onRenew = /*#__PURE__*/function () {\n    var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(name) {\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              library.getSigner(account).signMessage('Renew: ' + tokenId).then(function (signature) {\n                var address = vaultAddresses.filter(function (address) {\n                  return address.coin == 'NMC';\n                })[0].address;\n                console.log('signature', signature, name);\n                fetch(EMBLEM_API + '/nmc/renew/' + address, {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    service: 'evmetadata',\n                    chainid: chainId.toString()\n                  },\n                  body: JSON.stringify({\n                    \"tokenId\": tokenId,\n                    \"signature\": signature,\n                    \"name\": name\n                  })\n                }).then( /*#__PURE__*/function () {\n                  var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(response) {\n                    var data;\n                    return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n                      while (1) {\n                        switch (_context14.prev = _context14.next) {\n                          case 0:\n                            _context14.next = 2;\n                            return response.json();\n\n                          case 2:\n                            data = _context14.sent;\n                            console.log(\"Requested Renew\", data);\n\n                          case 4:\n                          case \"end\":\n                            return _context14.stop();\n                        }\n                      }\n                    }, _callee14);\n                  }));\n\n                  return function (_x29) {\n                    return _ref19.apply(this, arguments);\n                  };\n                }());\n              });\n\n            case 1:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15);\n    }));\n\n    return function onRenew(_x28) {\n      return _ref18.apply(this, arguments);\n    };\n  }();\n\n  var handleSign = /*#__PURE__*/function () {\n    var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n      var serialNumber;\n      return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              if (targetContract[chainId]) {\n                emblemContract = getCuratedContract(targetContract[chainId]);\n                serialNumber = targetContract.serialNumber;\n              }\n\n              library.getSigner(account).signMessage('Claim: ' + (targetContract[chainId] ? serialNumber : tokenId)).then(function (signature) {\n                getSignedJWT(signature, tokenId, function (token) {\n                  getTorusKeys(tokenId, token.token, function (keys) {\n                    var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey);\n                    var payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n                    setKeyValues(payload.values);\n                    setMnemonic(payload.phrase);\n                    vaultAddresses.forEach( /*#__PURE__*/function () {\n                      var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(address) {\n                        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n                          while (1) {\n                            switch (_context16.prev = _context16.next) {\n                              case 0:\n                                if (!(address.coin == 'STX')) {\n                                  _context16.next = 6;\n                                  break;\n                                }\n\n                                _context16.next = 3;\n                                return getSTXKey(address, payload.phrase);\n\n                              case 3:\n                                address.key = _context16.sent;\n                                _context16.next = 7;\n                                break;\n\n                              case 6:\n                                address.key = window.phrasePathToKey(payload.phrase, address.path);\n\n                              case 7:\n                                if (address.coin == 'BTC') setPrivKeyBTC(address.key);\n                                if (address.coin == 'ETH') setPrivKeyETH(address.key);\n\n                              case 9:\n                              case \"end\":\n                                return _context16.stop();\n                            }\n                          }\n                        }, _callee16);\n                      }));\n\n                      return function (_x30) {\n                        return _ref21.apply(this, arguments);\n                      };\n                    }()); // setKeyValues(vaultAddresses)\n\n                    onOpenKeysModal();\n                  });\n                }); // }\n              });\n\n            case 2:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17);\n    }));\n\n    return function handleSign() {\n      return _ref20.apply(this, arguments);\n    };\n  }();\n\n  var getSTXKey = /*#__PURE__*/function () {\n    var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(address, phrase) {\n      var wallet, account;\n      return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return generateWallet({\n                secretKey: phrase,\n                password: ''\n              });\n\n            case 2:\n              wallet = _context18.sent;\n              console.log('------ stacks account -', wallet.accounts[0]);\n              account = wallet.accounts[0];\n              address.key = account.stxPrivateKey;\n              return _context18.abrupt(\"return\", address.key);\n\n            case 7:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18);\n    }));\n\n    return function getSTXKey(_x31, _x32) {\n      return _ref22.apply(this, arguments);\n    };\n  }();\n\n  var handleHideAsset = /*#__PURE__*/function () {\n    var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(coin) {\n      return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              library.getSigner(account).signMessage('HideAsset: ' + tokenId).then(function (signature) {\n                console.log(\"----------------------------------------------------------------\", signature);\n                console.log(coin.name, coin.coin, coin.address);\n                hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, function () {\n                  console.log(\"Done hiding coin and getting new balances\");\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19);\n    }));\n\n    return function handleHideAsset(_x33) {\n      return _ref23.apply(this, arguments);\n    };\n  }();\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/' + tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin ? coin : null,\n        \"address\": address ? address : null,\n        \"name\": name ? name : null,\n        \"signature\": signature ? signature : null\n      })\n    }).then( /*#__PURE__*/function () {\n      var _ref24 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context20.sent;\n                console.log(\"-------\", data);\n                getAllBalances([], tokenId, function (values) {\n                  setVaultValues(values);\n                  return cb();\n                });\n\n              case 5:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20);\n      }));\n\n      return function (_x34) {\n        return _ref24.apply(this, arguments);\n      };\n    }());\n  }\n\n  var handleAddressSign = /*#__PURE__*/function () {\n    var _ref25 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(coin) {\n      return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              library.getSigner(account).signMessage('Address: ' + tokenId).then(function (signature) {\n                addAddress(signature, tokenId, coin, function (result) {\n                  getVault();\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21);\n    }));\n\n    return function handleAddressSign(_x35) {\n      return _ref25.apply(this, arguments);\n    };\n  }();\n\n  var handleOwnedEmbed = /*#__PURE__*/function () {\n    var _ref26 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n      return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              library.getSigner(account).signMessage('Embed: ' + tokenId).then(function (signature) {\n                decryptEmbed(signature, tokenId, function (result) {\n                  setVaultImage(result.ownedImage);\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22);\n    }));\n\n    return function handleOwnedEmbed() {\n      return _ref26.apply(this, arguments);\n    };\n  }();\n\n  var handleClaim = /*#__PURE__*/function () {\n    var _ref27 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n      return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              if (targetContract[chainId]) {\n                // emblemContract = getCuratedContract(targetContract[chainId])\n                // let tokenId = await emblemContract.getTokenIdForSerialNumber(targetContract.serialNumber)\n                vaultHandlerContract.claim(targetContract[chainId], targetContract.tokenId).then(function (_ref28) {\n                  var hash = _ref28.hash;\n                  setClaiming(true);\n                  setTimeout(function () {\n                    setHash(hash);\n                  }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n                });\n              } else {\n                emblemContract.burn(tokenId).then(function (_ref29) {\n                  var hash = _ref29.hash;\n                  setClaiming(true);\n                  setTimeout(function () {\n                    setHash(hash);\n                  }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n                });\n              }\n\n            case 1:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee23);\n    }));\n\n    return function handleClaim() {\n      return _ref27.apply(this, arguments);\n    };\n  }();\n\n  var pingClaimLogs = function pingClaimLogs(cb) {\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId=' + chainId.toString() + '_vercel_no_cache=1', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    }).then( /*#__PURE__*/function () {\n      var _ref30 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context24.sent;\n                console.log(\"Log check\", data);\n                return _context24.abrupt(\"return\", cb());\n\n              case 5:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24);\n      }));\n\n      return function (_x36) {\n        return _ref30.apply(this, arguments);\n      };\n    }());\n  };\n\n  var startDecryptEffect = /*#__PURE__*/function () {\n    var _ref31 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {\n      var theLetters, ctnt, speed, increment, clen, si, stri, block, fixed, nextFrame;\n      return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              nextFrame = function _nextFrame(pos) {\n                for (var i = 0; i < clen - stri; i++) {\n                  //Random number\n                  var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n                  var letter = theLetters.charAt(num);\n                  block = block + letter;\n                }\n\n                if (si == increment - 1) {\n                  stri++;\n                }\n\n                if (si == increment) {\n                  // Add a letter;\n                  // every speed*10 ms\n                  fixed = fixed + ctnt.charAt(stri - 1);\n                  si = 0;\n                } // $(\"#output\").html(fixed + block);\n\n\n                setDecryptedEffect(fixed + block);\n                block = '';\n              };\n\n              if (!decryptedEffectRunning) {\n                _context25.next = 3;\n                break;\n              }\n\n              return _context25.abrupt(\"return\");\n\n            case 3:\n              setDecryptedEffectRunning(true);\n              theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n              ctnt = 'Decrypting'; // Your text goes here\n\n              speed = 5; // ms per frame\n\n              increment = 8; // frames per step. Must be >2\n\n              clen = ctnt.length;\n              si = 0;\n              stri = 0;\n              block = '';\n              fixed = '';\n\n              (function rustle(i) {\n                setTimeout(function () {\n                  if (--i) {\n                    rustle(i);\n                  } else {\n                    setDecryptedEffectRunning(false);\n                  }\n\n                  nextFrame(i);\n                  si = si + 1;\n                }, speed);\n              })(clen * increment + 1);\n\n            case 14:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee25);\n    }));\n\n    return function startDecryptEffect() {\n      return _ref31.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    console.log('----');\n    getVault();\n  }, []);\n  useEffect(function () {\n    account && chainId && vaultChainId && chainId == vaultChainId || query.noLayout && query.noLayout == 'true' || query.slideshowOnly && query.slideshowOnly == 'true' ? getContractStates() : null;\n  });\n\n  function splitDescription(words) {\n    var desc = words ? words.split('\\n\\n\\n\\n') : [\" \"];\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    console.log(vaultAddresses);\n    var ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      var ethAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'ETH';\n      })[0].address;\n      var btcAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'BTC';\n      })[0].address;\n      console.log(\"SUCCESS\", vaultAddresses);\n      getAllBalancesByAddress([], ethAddress, btcAddress, function (values) {\n        setVaultValues(values);\n      }); // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {\n      console.log('WTF', err);\n    }\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\");\n    return vaultAddresses;\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(function (item) {\n      if (item.address.includes('private')) {\n        var cipherText = item.address.replace('private:', '');\n        item.address = decrypt(cipherText, key);\n      }\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  function visitOpenSeaLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + (vaultChainId == 137 ? 'matic/' : '') + (alternateContractAddress ? alternateContractAddress : targetContract ? targetContract[chainId] : contractAddresses.emblemVault[vaultChainId]) + '/' + (targetContract ? targetContract.tokenId : tokenId), '_blank');\n  }\n\n  function visitLooksRareLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'looksrare.org/collections/' + (vaultChainId == 137 ? 'matic/' : '') + (alternateContractAddress ? alternateContractAddress : targetContract ? targetContract[chainId] : contractAddresses.emblemVault[vaultChainId]) + '/' + (targetContract ? targetContract.tokenId : tokenId), '_blank');\n  }\n\n  {\n    alternateContractAddress ? emblemContract = getVaultContract(alternateContractAddress ? alternateContractAddress : null) : null;\n  }\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1091,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1092,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1093,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1094,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1095,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1096,\n      columnNumber: 9\n    }\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: \"\\n              // $(\\\".NFT\\\").tilt({    \\n              //     maxTilt: 3\\n              // });\\n              $(\\\".NFT\\\").trigger('mouseenter');\\n              $(\\\".NFT\\\").trigger('mouseclick'), '.NFT';\\n              if (localStorage.getItem(\\\"darkMode\\\") == 'false') {\\n                localStorage.setItem(\\\"darkMode\\\",\\\"true\\\"); location.href = location.href\\n              }\\n              \"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1097,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1112,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    privValues: privValues,\n    addresses: vaultAddresses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1114,\n      columnNumber: 7\n    }\n  }), showOffer ? __jsx(OfferModal, {\n    isOpen: isOpenOfferModal,\n    onClose: onCloseOfferModal,\n    tokenId: tokenId,\n    mine: mine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1124,\n      columnNumber: 9\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1134,\n      columnNumber: 9\n    }\n  }), loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1135,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault && !slideshowOnly ? __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1137,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    className: \"NFT\",\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1138,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"blue.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1149,\n      columnNumber: 17\n    }\n  }, \"Vault Network: \", CHAIN_ID_NAMES[vaultChainId]), __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\" // textTransform=\"uppercase\"\n    ,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1178,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null), __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1191,\n      columnNumber: 17\n    }\n  }, __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1198,\n      columnNumber: 19\n    }\n  }), mine && ownedImage ? __jsx(Button, {\n    onClick: function onClick() {\n      handleOwnedEmbed();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1200,\n      columnNumber: 21\n    }\n  }, \"(OWNED) Show Full Embed\") : null), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1203,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1204,\n      columnNumber: 19\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1205,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    fontSize: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1206,\n      columnNumber: 23\n    }\n  }, vaultChainId == chainId ? __jsx(Link, {\n    href: \"./vaults?address=\" + owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1208,\n      columnNumber: 25\n    }\n  }, \"Owner: \", owner) : null), __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1213,\n      columnNumber: 23\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1214,\n      columnNumber: 25\n    }\n  }))))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1220,\n      columnNumber: 17\n    }\n  }, __jsx(Tabs, {\n    isFitted: true,\n    variant: \"enclosed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1221,\n      columnNumber: 17\n    }\n  }, __jsx(TabList, {\n    mb: \"1em\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1222,\n      columnNumber: 19\n    }\n  }, __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1223,\n      columnNumber: 21\n    }\n  }, \"Balances\"), __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1224,\n      columnNumber: 21\n    }\n  }, \"Attributes\")), __jsx(TabPanels, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1226,\n      columnNumber: 19\n    }\n  }, __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1227,\n      columnNumber: 21\n    }\n  }, vaultPrivacy ? __jsx(Box, {\n    mb: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1229,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1230,\n      columnNumber: 27\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: function onChange(e) {\n      return tryDecrypt(e.target.value);\n    },\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1233,\n      columnNumber: 27\n    }\n  })) : __jsx(Box, {\n    d: \"flex\",\n    backgroundColor: colorMode == \"light\" ? \"gray.100\" : \"gray.700\",\n    alignItems: \"baseline\",\n    className: \"coin-balance-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1241,\n      columnNumber: 25\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1242,\n      columnNumber: 27\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    mt: 2,\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1243,\n      columnNumber: 29\n    }\n  }, \"Current Contents:  \", __jsx(\"button\", {\n    onClick: function onClick() {\n      getAllBalancesLive([], tokenId, function (v) {\n        setLoadedValues(false);\n        setVaultValues(v);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1245,\n      columnNumber: 50\n    }\n  }, \" [Refresh Balances]\")), __jsx(Text, {\n    as: \"p\",\n    color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1254,\n      columnNumber: 29\n    }\n  }, \"$\", Number(vaultTotalValue.toFixed(4)).toLocaleString()), vaultValues.length ? vaultValues.map(function (coin) {\n    return __jsx(Stack, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1258,\n        columnNumber: 35\n      }\n    }, __jsx(CoinBalance, {\n      colorMode: colorMode,\n      coin: coin,\n      mine: status === 'claimed' && claimedBy === account || mine,\n      onRenew: onRenew,\n      hideAsset: handleHideAsset,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1259,\n        columnNumber: 37\n      }\n    }));\n  }) : __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1263,\n      columnNumber: 34\n    }\n  }), vaultDataValues.length ? vaultDataValues.map(function (data) {\n    return __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1267,\n        columnNumber: 35\n      }\n    }, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1271,\n      columnNumber: 31\n    }\n  }, \"Nothing in here! Fill 'er up!\") : null))), __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1277,\n      columnNumber: 21\n    }\n  }, __jsx(Attributes, {\n    colorMode: colorMode,\n    attributes: attributes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1278,\n      columnNumber: 23\n    }\n  })))), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1284,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1285,\n      columnNumber: 23\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1286,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1287,\n      columnNumber: 27\n    }\n  }, \"Deposit Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1288,\n      columnNumber: 27\n    }\n  }, vaultAddresses.map(function (addr) {\n    return __jsx(Button, {\n      className: \"address_nft_button\",\n      ml: 2,\n      mt: 2,\n      \"font-weight\": \"100 !important\",\n      key: addr.address,\n      onClick: function onClick() {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1291,\n        columnNumber: 33\n      }\n    }, addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP' : addr.coin);\n  })), (mine || status === 'claimed') && vaultAddresses.length < 10 ? __jsx(React.Fragment, null, __jsx(\"button\", {\n    className: \"nft_button\",\n    onClick: function onClick() {\n      onManageAddressToggle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1311,\n      columnNumber: 29\n    }\n  }, \"Manage Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1314,\n      columnNumber: 29\n    }\n  }, __jsx(Collapse, {\n    isOpen: isManageAddressOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1315,\n      columnNumber: 31\n    }\n  }, !hasAddress('DOGE') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('DOGE');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1317,\n      columnNumber: 35\n    }\n  }, \"Add DOGE\") : null, !hasAddress('DGB') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('DGB');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1320,\n      columnNumber: 35\n    }\n  }, \"Add Digibyte\") : null, !hasAddress('NMC') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('NMC');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1323,\n      columnNumber: 35\n    }\n  }, \"Add Namecoin\") : null, !hasAddress('LTC') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('LTC');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1326,\n      columnNumber: 35\n    }\n  }, \"Add Litecoin\") : null, !hasAddress('MONA') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('MONA');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1329,\n      columnNumber: 35\n    }\n  }, \"Add Mona\") : null, !hasAddress('TEZOS') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('TEZOS');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1332,\n      columnNumber: 35\n    }\n  }, \"Add Tezos\") : null, !hasAddress('SOLANA') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('SOLANA');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1335,\n      columnNumber: 35\n    }\n  }, \"Add Solana\") : null))) : null))) : null, !(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 4 || vaultChainId === 137) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1347,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"50%\",\n    m: 5,\n    onClick: function onClick() {\n      visitOpenSeaLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1349,\n      columnNumber: 25\n    }\n  }, \"Opensea\"), __jsx(Button, {\n    className: \"nft_button\",\n    width: \"50%\",\n    m: 5,\n    onClick: function onClick() {\n      visitLooksRareLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1357,\n      columnNumber: 25\n    }\n  }, \"LooksRare\"), showOffer ? __jsx(Button, {\n    className: \"\",\n    onClick: function onClick() {\n      onOpenOfferModal();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1366,\n      columnNumber: 27\n    }\n  }, mine ? 'My Offers' : 'Make an Offer', \" (NFT\\xB2NFT)\") : null) : null, !(status === 'claimed') && mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1374,\n      columnNumber: 22\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1375,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: onToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1376,\n      columnNumber: 27\n    }\n  }, \"Transfer Vault\"), __jsx(Collapse, {\n    isOpen: isOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1377,\n      columnNumber: 27\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1378,\n      columnNumber: 29\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"owner-address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1379,\n      columnNumber: 29\n    }\n  }, \"Address\"), __jsx(Input, {\n    mt: 1,\n    type: \"text\",\n    id: \"transferAddress\",\n    value: transferToAddress || '',\n    onChange: function onChange(e) {\n      console.log(\"Transfer to\", e.target.value);\n      setTransferToAddress(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1380,\n      columnNumber: 31\n    }\n  })), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1392,\n      columnNumber: 29\n    }\n  }, __jsx(Button, {\n    isDisabled: !isETHAddress(transferToAddress),\n    onClick: function onClick() {\n      onToggle();\n      transferVault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1393,\n      columnNumber: 31\n    }\n  }, \"Transfer Now\")))))) : null, mine && !acceptable && !approved ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1404,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: function onClick() {\n      if (!approved) {\n        return handleApproveForall();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1405,\n      columnNumber: 23\n    }\n  }, \"Approve Claiming\"))) : null, (showTransferPassword || mintPassword) && acceptable ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1416,\n      columnNumber: 23\n    }\n  }, __jsx(Link, {\n    href: location.protocol + '//' + location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1417,\n      columnNumber: 25\n    }\n  }, \"Copy Gift Link\"), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1418,\n      columnNumber: 25\n    }\n  }, \"Password: \", transferPassword || mintPassword)) : null, !(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1440,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      handleClaim();\n    },\n    isDisabled: claiming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1441,\n      columnNumber: 23\n    }\n  }, claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)')) // || !live && nonce && mintSignature && vaultCiphertextV2 && to == account\n  : status === 'claimed' && claimedBy === account && vaultChainId === chainId ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1453,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1454,\n      columnNumber: 23\n    }\n  }, \"Get Keys\")) : null, !live && to == account && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg ? __jsx(React.Fragment, null, targetContract.name ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: lazyMintCurated,\n    isDisabled: !canCuratedMint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1462,\n      columnNumber: 25\n    }\n  }, \" Mint Vault \") : __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: lazyMint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1464,\n      columnNumber: 25\n    }\n  }, \"Mint Vault \")) : null, (!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: deleteVault,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1469,\n      columnNumber: 19\n    }\n  }, \"Delete Vault \") : null, showVerifyingSignature ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1472,\n      columnNumber: 19\n    }\n  }, \"Verifying Signature ...\") : null, showMakingVaultMsg ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1477,\n      columnNumber: 19\n    }\n  }, \"Minting Vault ...\") : null), vaultIPFS ? __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1483,\n      columnNumber: 19\n    }\n  }, __jsx(HStack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1484,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    target: \"new\",\n    mb: 2,\n    ml: 35,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1485,\n      columnNumber: 23\n    }\n  }, \"View Metadata on IPFS \"), vaultImageIPFS ? __jsx(Link, {\n    mb: 2,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultImageIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1487,\n      columnNumber: 25\n    }\n  }, \"View Image on IPFS \") : null)) : null, sealed ? __jsx(Box, {\n    d: \"flex\",\n    mb: 2,\n    ml: 35,\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1493,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1494,\n      columnNumber: 23\n    }\n  }, \"*This vault is sealed forever.\")) : null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1497,\n      columnNumber: 17\n    }\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1498,\n      columnNumber: 42\n    }\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1501,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1502,\n      columnNumber: 21\n    }\n  }), accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving ? \"Handling Approval Flow ...\" : transfering ? \"Transfering Vault ...\" : minting ? \"Minting Vault\" : \"Generating Gift Link ...\") : null)) : vaultValues.length > 0 && slideshowOnly ? __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1509,\n      columnNumber: 11\n    }\n  }, vaultValues.length && vaultValues.filter(function (item) {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultValues[0].image,\n    items: vaultValues.filter(function (value) {\n      return value.image !== vaultValues[0].image;\n    }).map(function (value) {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1511,\n      columnNumber: 17\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1513,\n      columnNumber: 17\n    }\n  })) : invalidVault ? __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1518,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1519,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1523,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1525,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      if (claiming && !accepting && !preTransfering) {\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account);\n        pingClaimLogs(function () {\n          location.href = location.origin + '/nft?id=' + tokenId;\n        });\n      } else if (preTransfering) {\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        setApproving(false);\n        getVault();\n        setHash(null);\n      } else if (transfering) {\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else if (minting) {\n        checkLiveliness(tokenId, function () {\n          setMinting(false);\n          setLive(true); // setShowMakingVaultMsg(false)\n          // location.href = location.origin + '/nft?id=' + tokenId\n        });\n      } else {\n        console.log('minting', minting);\n        console.log('claiming', claiming);\n        console.log('accepting', accepting);\n        console.log('preTransfering', preTransfering);\n        console.log('approving', approving);\n        console.log(\"Unknown state\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1532,\n      columnNumber: 11\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1578,\n      columnNumber: 9\n    }\n  }));\n}\n\n_s(Nft2, \"gKlNQcfVrDrDYp4nEHG6y2dTU4M=\", false, function () {\n  return [useWeb3React, useRouter, useContract, useContract, useContract, useDisclosure, useDisclosure, useDisclosure, useDisclosure, useDisclosure, useColorMode];\n});\n\n_c7 = Nft2;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"AddrModal$dynamic\");\n$RefreshReg$(_c2, \"AddrModal\");\n$RefreshReg$(_c3, \"KeysModal$dynamic\");\n$RefreshReg$(_c4, \"KeysModal\");\n$RefreshReg$(_c5, \"OfferModal$dynamic\");\n$RefreshReg$(_c6, \"OfferModal\");\n$RefreshReg$(_c7, \"Nft2\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft2.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","Link","Alert","AlertIcon","useDisclosure","Collapse","FormLabel","useColorMode","Tabs","TabList","Tab","TabPanel","TabPanels","HStack","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","dynamic","isETHAddress","Contract","TransactionToast","EMBLEM_API","contractAddresses","useContract","CHAIN_ID_NAMES","CryptoJS","ReactMarkdown","gfm","Embed","NFTSlideshow","CoinBalance","transakSDK","Attributes","generateWallet","FetchNodeDetails","TorusUtils","API_VERSION","AddrModal","KeysModal","OfferModal","Nft2","account","chainId","library","query","approved","setApproved","useOldMint","setUseOldMint","key","mintPassword","setMintPassword","offer","showOffer","setShowOffer","framed","setFramed","id","tokenId","setTokenId","experimental","setExperimental","noLayout","setNoLayout","slideshowOnly","setSlideshowOnly","vaultName","setVaultName","vaultIPFS","setVaultIPFS","vaultImageIPFS","setVaultImageIPFS","vaultCiphertextV2","setVaultCiphertextV2","vaultDesc","setVaultDesc","vaultImage","setVaultImage","ownedImage","setOwnedImage","vaultValues","setVaultValues","loadedValues","setLoadedValues","vaultDataValues","setVaultDataValues","attributes","setAttributes","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","vaultChain","setVaultChain","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","loaded","state","setState","mine","setMine","claiming","setClaiming","status","setStatus","sealed","setSealed","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","privValues","setKeyValues","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","hasCheckedNft","setHasCheckedNft","accepting","setAccepting","approving","setApproving","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","preTransfering","setPreTransfering","transferToAddress","setTransferToAddress","transfering","setTransfering","owner","setOwner","live","setLive","nonce","setNonce","mintSignature","setMintSignature","to","setTo","showVerifyingSignature","setShowVerifyingSignature","showMakingVaultMsg","setShowMakingVaultMsg","minting","setMinting","isCrowdSale","setIsCrowdSale","alternateContractAddress","setAlternateContractAddress","name","image","metadata","targetAsset","setTargetAsset","chain","serialNumber","targetContract","setTargetContract","canCuratedMint","setCanCuratedMint","curatedMintingParameters","setCuratedMintingParameters","handlerContract","vaultHandler","vaultHandlerAbi","vaultHandlerContract","vaultHandlerV8","vaultHandlerV8Abi","emblemContract","emblemVault","emblemAbi","isOpenAddrModal","isOpen","onOpenAddrModal","onOpen","onCloseAddrModal","onClose","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","isOpenOfferModal","onOpenOfferModal","onCloseOfferModal","onToggle","isManageAddressOpen","onManageAddressToggle","colorMode","transak","transferImage","getVaultContract","address","getSigner","connectUnchecked","getCuratedContract","erc1155Abi","initializeTransak","coin","apiKey","environment","defaultCryptoCurrency","walletAddress","themeColor","fiatCurrency","email","redirectURL","hostURL","window","location","origin","widgetHeight","widgetWidth","on","ALL_EVENTS","data","console","log","EVENTS","TRANSAK_ORDER_SUCCESSFUL","orderData","close","init","checkLiveliness","cb","fetch","method","headers","service","chainid","toString","body","JSON","stringify","then","response","json","transferVault","transferFrom","error","delayedMint","cipherTextHash","filter","buyWithSignature","setTimeout","deleteVault","signMessage","signature","href","split","lazyMintCurated","_nftAddress","_payment","_price","_to","_tokenId","_payload","_nonce","_signature","buyWithSignedPrice","lazyMint","getAllBalances","values","responce","jsonData","balances","length","concat","handleApproveForall","setApprovalForAll","code","getVault","collectionAddress","setStates","includes","ciphertextV2","description","totalValue","item","trait_type","addresses","ipfs","image_ipfs","toLowerCase","project","network","isPvt","getAllBalancesLive","getAllBalancesByAddress","ethAddress","btcAddress","saveCache","vault","localStorage","setItem","loadCache","parse","getItem","savePasswordToLocalStorage","loadPasswordFromLocalStorage","storedPw","getSignedJWT","myHeaders","Headers","append","raw","redirect","getTorusKeys","verifierId","idToken","fetchNodeDetails","proxyAddress","torusUtils","enableOneKey","getNodeDetails","verifier","torusNodeEndpoints","torusIndexes","retrieveShares","verifier_id","privKey","privateKey","addAddress","decryptEmbed","getContractStates","finish","isApprovedForAll","isApproved","_owner","owned","getOwnerOfSerial","ownerOf","hasAddress","onRenew","handleSign","token","keys","bytes","AES","decrypt","payload","enc","Utf8","phrase","forEach","getSTXKey","phrasePathToKey","path","secretKey","password","wallet","accounts","stxPrivateKey","handleHideAsset","hideAsset","handleAddressSign","result","handleOwnedEmbed","handleClaim","claim","burn","pingClaimLogs","startDecryptEffect","nextFrame","pos","i","clen","stri","num","Math","floor","theLetters","random","letter","charAt","block","si","increment","fixed","ctnt","speed","rustle","splitDescription","words","desc","trim","tryDecrypt","ciphertext","replace","decryptAddresses","err","getAddresses","cipherText","decryptedData","visitOpenSeaLink","open","visitLooksRareLink","__html","toLocaleString","e","target","value","v","Number","toFixed","map","attribute_key","addr","protocol","host","type","canSwipe"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n  Tooltip,\n  Collapse,\n  FormControl,\n  FormLabel,\n  useColorMode,\n  IconButton,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanel,\n  TabPanels\n} from '@chakra-ui/core'\n\nimport {HStack, VStack, Circle } from '@chakra-ui/react'\n// import TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { isETHAddress, validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\nimport { CHAIN_ID_NAMES } from '../utils'\nimport CryptoJS from 'crypto-js'\nimport { addTokenToWallet, addMany } from '../public/web3'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport Embed from './Embed'\nimport NFTSlideshow from './embed/NFTSlideshow'\nimport CoinBalance from './partials/CoinBalance'\nimport { chakra } from '@chakra-ui/system'\nimport transakSDK from '@transak/transak-sdk'\nimport Attributes from './partials/Attributes';\nimport { getStxAddress, generateWallet } from '@stacks/wallet-sdk';\nimport FetchNodeDetails from \"@toruslabs/fetch-node-details\"\nimport TorusUtils from \"@toruslabs/torus.js\"\n\nconst API_VERSION = '/v2'\n\ndeclare global {\n  interface Window { phraseToKey: any, phrasePathToKey: any }\n}\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\nconst OfferModal = dynamic(() => import('./OfferModal'))\n\nexport default function Nft2() {\n  \n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [approved, setApproved] = useState(false)\n  const [useOldMint, setUseOldMint] = useState(query.useOldMint)\n  const [mintPassword, setMintPassword] = useState(query.key)\n  const [showOffer, setShowOffer] = useState(query.offer || false)\n  const [framed, setFramed] = useState(query.framed || true)\n  const [tokenId, setTokenId] = useState(query.id)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [noLayout, setNoLayout] = useState(query.noLayout)\n  const [slideshowOnly, setSlideshowOnly] = useState(query.slideshowOnly || false)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultIPFS, setVaultIPFS] = useState('')\n  const [vaultImageIPFS, setVaultImageIPFS] = useState('')\n  const [vaultCiphertextV2, setVaultCiphertextV2] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [ownedImage, setOwnedImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [loadedValues, setLoadedValues] = useState(false)\n  const [vaultDataValues, setVaultDataValues] = useState([])\n  const [attributes, setAttributes] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [vaultChain, setVaultChain] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [sealed, setSealed] = useState(false)\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [privValues, setKeyValues] = useState([])\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [hasCheckedNft, setHasCheckedNft] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n  const [preTransfering, setPreTransfering] = useState(false)\n  const [transferToAddress, setTransferToAddress] = useState(null)\n  const [transfering, setTransfering] = useState(false)\n  const [owner, setOwner] = useState(null)\n  // const [torus, setTorus] = useState(initTorus())\n  const [live, setLive] = useState(false)\n  const [nonce, setNonce] = useState(null)\n  const [mintSignature, setMintSignature] = useState(null)\n  const [to, setTo] = useState(null)\n  const [showVerifyingSignature, setShowVerifyingSignature] = useState(false)\n  const [showMakingVaultMsg, setShowMakingVaultMsg] = useState(false)\n  const [minting, setMinting] = useState(false)\n  const [isCrowdSale, setIsCrowdSale] = useState(false)\n  const [alternateContractAddress, setAlternateContractAddress] = useState(null)\n  const [targetAsset, setTargetAsset] = useState({name: '', image: '', metadata: ''})\n  const [targetContract, setTargetContract] = useState({name: '', chain: '', 4: '', 1: '', tokenId: {}, serialNumber: {'hex':''} })\n  const [canCuratedMint, setCanCuratedMint] = useState(false)\n\n  const [curatedMintingParameters, setCuratedMintingParameters] = useState({})\n  // const [transferImage, setTransferImage] = useState('')\n  \n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n  let emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n  const { isOpen: isOpenOfferModal, onOpen: onOpenOfferModal, onClose: onCloseOfferModal } = useDisclosure()\n  const { isOpen, onToggle } = useDisclosure()\n  const { isOpen: isManageAddressOpen, onToggle: onManageAddressToggle } = useDisclosure()\n\n  const { colorMode } = useColorMode()\n\n  let transak\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  let transferImage;\n\n  // async function initTorus() {\n  //   let _torus = new TorusSdk({\n  //     baseUrl: `${window.location.origin}/serviceworker`,\n  //     enableLogging: true,\n  //     network: \"testnet\", // details for test net\n  //   });\n  //   await _torus.init({skipSw: true, skipInit: true, skipPrefetch: true})\n  //   console.log(\"Initialized Torus\")\n  //   return _torus\n  // }\n\n  const getVaultContract = (address = null) =>{\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  const getCuratedContract = (address = null) =>{\n    return new Contract(address, contractAddresses.erc1155Abi, library.getSigner(account).connectUnchecked())\n  }\n\n  const initializeTransak = (address?: string, coin? : string)=>{\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',  // Your API Key\n      environment: 'PRODUCTION', // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '', // Your customer's wallet address\n      themeColor: '000000', // App theme color\n      fiatCurrency: 'USD', // INR/GBP\n      // fiatAmount: 350,\n      email: '', // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    });\n  \n    // To get all the events\n    transak.on(transak.ALL_EVENTS, (data) => {\n      console.log(data)\n    });\n  \n    // This will trigger when the user marks payment is made.\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, (orderData) => {\n      console.log(orderData);\n      transak.close();\n    });\n  \n    transak.init()\n  }\n\n  const checkLiveliness = (tokenId, cb)=>{\n    fetch(EMBLEM_API  + API_VERSION + '/liveliness-curated', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({tokenId: tokenId}),\n    }).then(async function (response) {\n      let data = await response.json()\n      setLive(data.live)\n      console.log(\"Liveliness check\", data)\n    })\n    return cb()\n  }\n\n  const transferVault = () => {\n    setTransfering(true)\n    ;(emblemContract as Contract).transferFrom(account, transferToAddress, tokenId)\n    .then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n    .catch((error: ErrorWithCode) => {})\n  }\n\n  const delayedMint = () => {\n    // setCreating(true)\n      console.log(\"Delayed Minting\")\n      setShowVerifyingSignature(false)\n      setShowMakingVaultMsg(true)\n      setMinting(true)\n      let cipherTextHash = vaultAddresses.filter(address=>{ return address.coin == \"ETH\"})[0].address\n      ;(handlerContract as Contract)\n      .buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n          setShowMakingVaultMsg(false)\n          \n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n          setShowMakingVaultMsg(false)\n          // setMinting(false)\n      })    \n  }\n\n  const deleteVault = () =>{\n    library.getSigner(account)\n      .signMessage('Delete: ' + tokenId)\n      .then((signature) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_API + API_VERSION + '/delete', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata'\n          },\n          body: JSON.stringify({tokenId: tokenId, signature: signature, chainId: chainId.toString()}),\n        }).then(async function (response){\n          let data = await response.json()\n          location.href = location.href.split(\"/\")[0] + \"/vaults\"\n        })\n      })\n  }\n\n  const lazyMintCurated = () =>{\n    library.getSigner(account)\n      .signMessage('Curated Minting: ' + tokenId)\n      .then((signature) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_API + API_VERSION + '/mint-curated', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata'\n          },\n          body: JSON.stringify({tokenId: tokenId, signature: signature, chainId: chainId.toString()}),\n        }).then(async function (response){\n          let data = await response.json()\n          console.log(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._payload, data._nonce, data._signature, data.serialNumber)\n          setCuratedMintingParameters(data)\n          ;(vaultHandlerContract as Contract)\n            .buyWithSignedPrice(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._payload, data._nonce, data._signature, data.serialNumber)\n            .then(({ hash }: { hash: string }) => {\n              setTimeout(() => {\n                setHash(hash)\n                setShowMakingVaultMsg(true)\n                setMinting(true)\n              }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n            })\n            .catch((error: ErrorWithCode) => {\n                setShowMakingVaultMsg(false)\n                setMinting(false)\n            })\n          \n        })\n      })\n  }\n\n  /* NOT v2 */\n  const lazyMint = () =>{\n      library.getSigner(account)\n      .signMessage('Delayed Minting: ' + tokenId)\n      .then((signature) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_API + '/lazyMint', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata',\n            chainid: chainId.toString()\n          },\n          body: JSON.stringify({tokenId: tokenId, signature: signature}),\n        }).then(async function (response) {\n              let data = await response.json()\n              console.log(\"data\", data.data)\n              setMintSignature(data.data.signature)\n              setNonce(data.data.nonce)\n              setShowVerifyingSignature(true)\n              // setCreating(true)\n              setTimeout(()=>{\n                delayedMint()\n              }, 500)\n        })\n      })\n  }\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const handleApproveForall = () => {\n    setApproving(true)\n    if (targetContract.name) {\n      emblemContract = getCuratedContract(targetContract[chainId])\n      emblemContract.setApprovalForAll(contractAddresses.vaultHandlerV8[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n    } else {\n      (emblemContract as Contract)\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n    }\n  }\n\n  const getVault = async () => {\n    console.log('getvault')\n    // !slideshowOnly ? loadCache() : null\n    const responce = await fetch(EMBLEM_API + API_VERSION + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    if (jsonData.collectionAddress){\n      setIsCrowdSale(true)\n      setAlternateContractAddress(jsonData.collectionAddress)\n    }\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      console.log(\"---------------\", jsonData)\n      setStates(jsonData)\n      // !slideshowOnly? saveCache(jsonData) : null\n      setLoadingApi(false)\n      setInvalidVault(false)\n    }\n  }\n\n  const setStates = (jsonData) => {\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\"+framed : null\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2)\n      console.log(\"ciphertextV2\", jsonData.ciphertextV2)\n    }\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setOwnedImage(jsonData.ownedImage || null)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)): null\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(item=>{return item.trait_type === \"key\"})): null\n    jsonData.attributes ? setAttributes(jsonData.attributes): null\n    setVaultAddresses(jsonData.addresses)\n    setVaultIPFS(jsonData.ipfs || null)\n    setVaultImageIPFS(jsonData.image_ipfs || null)\n    jsonData.targetAsset? setTargetAsset(jsonData.targetAsset) : null\n    jsonData.targetContract? setTargetContract(jsonData.targetContract) : null\n    jsonData.values && jsonData.targetAsset && jsonData.values.filter(item=>{\n      return item.coin.toLowerCase() == jsonData.targetContract.chain && \n      item.name == jsonData.targetAsset.name && \n      item.project == jsonData.targetContract.name\n    }).length > 0 ? setCanCuratedMint(true): null\n \n    setLive(jsonData.live == false ? false : true)\n    if (!jsonData.live) {\n      checkLiveliness(tokenId, ()=>{\n        setLive(true)\n      })\n    }\n    setNonce(jsonData.nonce)\n    setMintSignature(jsonData.signature)\n    setTo(jsonData.to)\n    setVaultChain(jsonData.network)\n    setVaultChainId(\n      jsonData.network == 'mainnet' ? 1 : \n      jsonData.network == \"rinkeby\" ? 4 : \n      jsonData.network == \"goerli\" ? 5 : \n      jsonData.network == \"mumbai\" ? 80001 : \n      jsonData.network == \"matic\" ? 137 : \n      jsonData.network == \"xdai\" ? 100 : \n      jsonData.network == \"bsc\" ? 56 : \n      jsonData.network == \"fantom\" ? 250 : \n      jsonData.network == \"bitcoin\" ? 0 : \n      jsonData.network == \"aurora\" ? 1313161554 : \n      97\n    )\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    // console.log('inside getstates. mine is ', mine)\n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)    \n    if (jsonData.sealed) {\n      setSealed(true)\n    } else {\n      setSealed(false)\n    }\n  }\n\n  // const getEthBalances = async (address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n  //   setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n  //   // console.log('get eth balances', jsonData.values)\n  //   return cb(jsonData.values)\n  // }\n\n  // const getBtcBalance = async (values, address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // setVaultValues(values.concat(jsonData.values))\n  //   return cb(values.concat(jsonData.values))\n  // }\n\n  // const getNftBalance = async (values, address, cb) => {\n  //   // console.log(address)\n  //   const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   if (jsonData.length > 0) {\n  //     // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n  //     return cb(values.concat(jsonData))\n  //   } else {\n  //     return cb(values)\n  //   }\n  // }\n\n  // const getAllBalances = async (values, tokenId, cb) => {\n  //   // console.log(address)\n  //   const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n    \n  //   const jsonData = await responce.json()\n  //   console.log('responce', responce, jsonData)\n  //   if (jsonData.balances.length > 0) {      \n  //     return cb(values.concat(jsonData.balances))\n  //   } else {\n  //     return cb(values)\n  //   }\n  // }\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    // setVaultValues([])\n    // console.log(address)\n    if (loadedValues) {\n      return cb(false)\n    }\n    setLoadedValues(true)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true' , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const saveCache = (vault) => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)) // Save new state for later\n  }\n\n  const loadCache = () => {\n    console.log('cache')\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')) // Load vaults from storage before updating from server!\n    if (vault) {\n      setState({ loaded: true })\n      setStates(vault)\n      setLoadingApi(true)\n    }\n  }\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword) // Save new state for later\n  }\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword')\n    storedPw && acceptable ? setMintPassword(storedPw) : null //setMintPassword(null)\n  }\n\n  // const getKeys = async (signature, tokenId, cb) => {\n  //   var myHeaders = new Headers()\n  //   myHeaders.append('chainId', chainId.toString())\n  //   myHeaders.append('service', 'evmetadata')\n  //   myHeaders.append('Content-Type', 'application/json')\n\n  //   var raw = JSON.stringify({ signature: signature })\n  //   const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n  //     method: 'POST',\n  //     headers: myHeaders,\n  //     body: raw,\n  //     redirect: 'follow',\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log('getKeys response is ', jsonData)\n  //   return cb(jsonData)\n  // }\n\n  const getSignedJWT = async (signature, tokenId, cb)=>{\n    var myHeaders = new Headers()\n    myHeaders.append('chainid', chainId.toString())\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, tokenId: tokenId })\n    const responce = await fetch('https://tor-us-signer-vert.vercel.app/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  // const getRemoteKey = async (tokenId, token, cb)=> {   \n  //   let error = false\n  //   let keys = await (await torus).getTorusKey(\n  //       \"tor-us-signer-vercel\", \n  //       tokenId,\n  //       { verifier_id: tokenId }, \n  //       token, \n  //     ).catch(err=>{\n  //       error = err.message\n  //     })\n  //     if (error) {\n  //       console.log(\"error\", error)\n  //       return cb(false)\n  //     } else {\n  //       return cb(keys)\n  //     }\n  // }\n\n  async function getTorusKeys( verifierId, idToken, cb) {\n    const fetchNodeDetails = new FetchNodeDetails({ network: \"https://rpc.ankr.com/eth_ropsten\", proxyAddress: \"0x6258c9d6c12ed3edda59a1a6527e469517744aa7\" });\n    const torusUtils = new TorusUtils({ enableOneKey: true, network: \"testnet\" });\n    const { torusNodeEndpoints, torusIndexes } = await fetchNodeDetails.getNodeDetails({ verifier: 'tor-us-signer-vercel', verifierId });\n    const { privKey } = await torusUtils.retrieveShares(torusNodeEndpoints, torusIndexes, 'tor-us-signer-vercel', { verifier_id: verifierId }, idToken);\n    return cb({privateKey: privKey});\n  }\n\n  const addAddress = async (signature, tokenId, coin, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, coin: coin })\n    const responce = await fetch(EMBLEM_API + '/address/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const decryptEmbed = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    console.log(\"Contract states\")\n    let owned = false\n    let _owner\n    try {\n      if (targetContract[chainId]) {\n        emblemContract = getCuratedContract(targetContract[chainId])\n        _owner = await emblemContract.getOwnerOfSerial(targetContract.serialNumber)\n        console.log(\"--------------------------- owner\", _owner, approved, account, contractAddresses.vaultHandlerV8[chainId])\n      } else {\n        _owner  = await emblemContract.ownerOf(tokenId)\n      }\n      finish()\n    } catch(err){\n      _owner = \"0x0000000000000000000000000000000000000000\"\n      finish()\n    }\n\n    async function finish(){\n      // let acceptable = await handlerContract.getPreTransfer(tokenId)\n      let isApproved\n      if (targetContract[chainId]) {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId])\n      } else {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId])\n      }\n      setApproved(isApproved)\n      // setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n      setOwner(_owner)\n      setMine(_owner === account)\n      loadPasswordFromLocalStorage()\n    }\n    \n  }\n\n  useEffect(()=>{\n    console.log(\"mine?\", mine)\n    console.log(\"claiming?\", claiming)\n    console.log(\"accepting?\", accepting)\n    console.log(\"acceptable\", acceptable)\n    console.log(\"-----\", live, to, account, vaultChainId, chainId, status, showMakingVaultMsg, vaultCiphertextV2)\n  })\n\n  const hasAddress = (coin)=>{\n    console.log(coin, vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0)\n    return vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0\n  }\n\n  const onRenew = async (name) => { \n    library\n      .getSigner(account)\n      .signMessage('Renew: ' + tokenId)\n      .then((signature) => {\n        let address = vaultAddresses.filter(address=>{ return address.coin == 'NMC'})[0].address\n        console.log('signature', signature, name)\n        fetch(EMBLEM_API + '/nmc/renew/' + address, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata',\n            chainid: chainId.toString()\n          },\n          body: JSON.stringify({\n                \"tokenId\": tokenId,\n                \"signature\": signature,\n                \"name\": name\n              })\n        }).then(async function (response) {\n          let data = await response.json()\n          console.log(\"Requested Renew\", data)\n          \n        })\n      })\n  }\n  \n  const handleSign = async () => {\n    let serialNumber\n    if (targetContract[chainId]) {      \n      emblemContract = getCuratedContract(targetContract[chainId])\n      serialNumber = targetContract.serialNumber\n    }\n\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + (targetContract[chainId]? serialNumber: tokenId))\n      .then((signature) => {\n        getSignedJWT(signature, tokenId, (token)=>{\n          getTorusKeys(tokenId, token.token, (keys)=>{\n            var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey)\n            let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)) \n            setKeyValues(payload.values)\n            setMnemonic(payload.phrase)\n            vaultAddresses.forEach(async address=>{\n              if (address.coin == 'STX') {\n                address.key = await getSTXKey(address, payload.phrase)\n              } else {\n                address.key = window.phrasePathToKey(payload.phrase, address.path)\n              }\n              if (address.coin == 'BTC') setPrivKeyBTC(address.key)\n              if (address.coin == 'ETH') setPrivKeyETH(address.key)\n            })\n            // setKeyValues(vaultAddresses)\n            onOpenKeysModal()\n          })          \n        })\n      // }\n    })\n  }\n\n  const getSTXKey = async (address: any, phrase: string)=>{\n    const wallet: any = await generateWallet({\n      secretKey: phrase,\n      password: '',\n    })\n    console.log('------ stacks account -', wallet.accounts[0])\n    const account = wallet.accounts[0];\n    address.key = account.stxPrivateKey\n    return address.key\n  }\n\n  const handleHideAsset = async (coin) => {\n    library\n      .getSigner(account)\n      .signMessage('HideAsset: ' + tokenId)\n      .then((signature) => {\n\n        console.log(\"----------------------------------------------------------------\", signature)\n        console.log(coin.name, coin.coin, coin.address)\n        hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, ()=>{\n          console.log(\"Done hiding coin and getting new balances\")\n        })\n      })\n  }\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/'+tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin? coin: null,\n        \"address\": address? address: null,\n        \"name\": name? name: null,\n        \"signature\": signature? signature: null\n      })\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"-------\", data)\n      getAllBalances([], tokenId, (values)=>{\n        setVaultValues(values)\n        return cb()\n      })\n    }) \n  }\n\n  const handleAddressSign = async (coin: string) => {\n    library\n      .getSigner(account)\n      .signMessage('Address: ' + tokenId)\n      .then((signature) => {\n        addAddress(signature, tokenId, coin, (result) => {\n          getVault()\n        })\n      })\n  }\n\n  const handleOwnedEmbed = async () => {\n    library\n      .getSigner(account)\n      .signMessage('Embed: ' + tokenId)\n      .then((signature) => {\n        decryptEmbed(signature, tokenId, (result) => {\n          setVaultImage(result.ownedImage)\n        })        \n      })\n  }\n\n  const handleClaim = async () => {\n    if (targetContract[chainId]) {\n      // emblemContract = getCuratedContract(targetContract[chainId])\n      // let tokenId = await emblemContract.getTokenIdForSerialNumber(targetContract.serialNumber)\n      vaultHandlerContract.claim(targetContract[chainId], targetContract.tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    } else {\n      emblemContract.burn(tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    }\n  }\n\n  const pingClaimLogs = (cb)=>{\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId='+chainId.toString()+'_vercel_no_cache=1', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"Log check\", data)\n      return cb()\n    })    \n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random())\n        //Get random letter\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      // $(\"#output\").html(fixed + block);\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    console.log('----')\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    (account && chainId && vaultChainId && chainId == vaultChainId) || ((query.noLayout && query.noLayout == 'true') || (query.slideshowOnly && query.slideshowOnly == 'true')) ? getContractStates() : null\n  })\n\n  function splitDescription(words) {\n    var desc = words? words.split('\\n\\n\\n\\n'): [\" \"]\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    console.log(vaultAddresses)\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      let ethAddress = vaultAddresses.filter((item) => {return item.coin === 'ETH'})[0].address\n      let btcAddress = vaultAddresses.filter((item) => {return item.coin === 'BTC'})[0].address\n      console.log(\"SUCCESS\", vaultAddresses)\n      getAllBalancesByAddress([], ethAddress, btcAddress, (values)=>{\n        setVaultValues(values)\n      })\n      // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {console.log('WTF', err)}\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\")\n    return vaultAddresses\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach((item) => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '')\n        item.address = decrypt(cipherText, key)\n      }      \n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  function visitOpenSeaLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : '') +\n      'opensea.io/assets/' + \n      (vaultChainId == 137 ? 'matic/' : '') +\n      (alternateContractAddress? alternateContractAddress : targetContract? targetContract[chainId]: contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      (targetContract? targetContract.tokenId: tokenId)\n    , '_blank')\n  }\n\n  function visitLooksRareLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : '') +\n      'looksrare.org/collections/' + \n      (vaultChainId == 137 ? 'matic/' : '') +\n      (alternateContractAddress? alternateContractAddress : targetContract? targetContract[chainId]: contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      (targetContract? targetContract.tokenId: tokenId) \n    , '_blank')\n  }\n\n  { alternateContractAddress?\n    emblemContract = getVaultContract(alternateContractAddress? alternateContractAddress: null)\n  : null}\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n        <script\n            dangerouslySetInnerHTML={{\n              __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              if (localStorage.getItem(\"darkMode\") == 'false') {\n                localStorage.setItem(\"darkMode\",\"true\"); location.href = location.href\n              }\n              `,\n            }}\n          />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n        privValues={privValues}\n        addresses={vaultAddresses}\n      />\n      {showOffer ? (\n        <OfferModal\n          isOpen={isOpenOfferModal}\n          onClose={onCloseOfferModal}\n          tokenId={tokenId}\n          mine={mine}\n        />\n      ) : null}\n      \n\n      {/* <Loader loaded={state.loaded}> */}\n        <Box height=\"40px\"></Box>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault && !slideshowOnly ? (\n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                className=\"NFT\" \n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"blue.500\"\n                >\n                  Vault Network: {CHAIN_ID_NAMES[vaultChainId]}\n                </Box>\n                {/* {isCrowdSale ? (\n                  <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"red.500\"\n                >\n                  Part of a crowdsale, sealed for 1 week.\n                </Box>\n                ) : null} */}\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  // textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null}\n                </Box>\n                <Stack className=\"NFT-content\" align=\"center\">\n                  {/* { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                      <NFTSlideshow name={vaultName} image={vaultImage} items={vaultValues.map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n                    ) : (\n                      <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n                    )\n                  } */}\n                  <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n                  {mine && ownedImage ? (\n                    <Button onClick={() => {handleOwnedEmbed()}}>(OWNED) Show Full Embed</Button>\n                  ): null}\n                </Stack>\n                <Stack align=\"center\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                    <Stack>\n                      <Text fontSize=\"xs\">\n                      { vaultChainId == chainId ? (\n                        <Link href={\"./vaults?address=\"+owner}>\n                          Owner: {owner}\n                        </Link>\n                      ) : null }\n                      </Text>\n                      <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" className=\"md\">\n                        <ReactMarkdown plugins={[gfm]} children={splitDescription(vaultDesc)} />\n                      </Text>\n                      \n                    </Stack>                    \n                  </Box>                    \n                </Stack>\n                <Box p=\"6\">\n                <Tabs isFitted variant='enclosed'>\n                  <TabList mb='1em'>\n                    <Tab>Balances</Tab>\n                    <Tab>Attributes</Tab>\n                  </TabList>\n                  <TabPanels>\n                    <TabPanel>\n                      {vaultPrivacy ? (\n                        <Box mb={5}>\n                          <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                            {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                          </Text>\n                          <Input\n                            type=\"password\"\n                            id=\"vault-password\"\n                            onChange={(e) => tryDecrypt(e.target.value)}\n                            aria-describedby=\"password-helper-text\"\n                          />\n                        </Box>\n                      ) : (\n                        <Box d=\"flex\" backgroundColor={colorMode == \"light\"? \"gray.100\": \"gray.700\"} alignItems=\"baseline\" className=\"coin-balance-content\">\n                          <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                            <Text as=\"h4\" mt={2} fontWeight=\"semibold\">\n                            \n                              Current Contents:  <button\n                              onClick={() =>{\n                                getAllBalancesLive([], tokenId, (v)=>{\n                                  setLoadedValues(false)\n                                  setVaultValues(v)\n                                })\n                              }}\n                            > [Refresh Balances]</button>\n                            </Text>\n                            <Text as=\"p\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"}>${Number(vaultTotalValue.toFixed(4)).toLocaleString()}</Text>\n                            { vaultValues.length ? (\n                              vaultValues.map((coin) => {\n                                return (  \n                                  <Stack> \n                                    <CoinBalance colorMode={colorMode} coin={coin} mine={(status === 'claimed' && claimedBy === account) || mine} onRenew={onRenew} hideAsset={handleHideAsset}/>\n                                  </Stack>\n                                )\n                              })\n                            ) : (<Refreshing /> ) } \n                            { vaultDataValues.length ? (\n                              vaultDataValues.map((data) => {\n                                return (\n                                  <Text>Data: {data.attribute_key}</Text>\n                                )                        \n                              })\n                            ) : !vaultDataValues.length && !vaultValues.length ? (\n                              <Text>Nothing in here! Fill 'er up!</Text>\n                            ) : null}\n                          </Box>\n                        </Box>\n                      )}\n                  </TabPanel>\n                    <TabPanel>\n                      <Attributes colorMode={colorMode} attributes={attributes}/>\n                      </TabPanel>\n                    </TabPanels>\n                  </Tabs>\n                  \n                  {!vaultPrivacy ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <ButtonGroup justifyContent=\"space-between\" spacing={6}>\n                        <Stack>\n                          <Text>Deposit Addresses</Text>\n                          <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                            {vaultAddresses.map((addr) => {\n                              return (\n                                <Button\n                                  className=\"address_nft_button\"\n                                  \n                                  ml={2}\n                                  mt={2}\n                                  font-weight=\"100 !important\"\n                                  key={addr.address}\n                                  onClick={() => {\n                                    setCurrCoin(addr.coin)\n                                    setCurrAddr(addr.address)\n                                    onOpenAddrModal()\n                                  }}\n                                >\n                                  {addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP': addr.coin}\n                                </Button>\n                              )\n                            })}\n                        </Flex>\n                        {(mine || status === 'claimed') && vaultAddresses.length < 10 ? (\n                          <>\n                            <button className=\"nft_button\" onClick={()=>{\n                              onManageAddressToggle()\n                            }}>Manage Addresses</button>\n                            <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                              <Collapse isOpen={isManageAddressOpen}>\n                                { !hasAddress('DOGE') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('DOGE') }}>Add DOGE</Button>\n                                ) : null }\n                                { !hasAddress('DGB') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('DGB') }}>Add Digibyte</Button>\n                                ) : null }\n                                { !hasAddress('NMC') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('NMC') }}>Add Namecoin</Button>\n                                ) : null }\n                                { !hasAddress('LTC') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('LTC') }}>Add Litecoin</Button>\n                                ) : null }\n                                { !hasAddress('MONA') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('MONA') }}>Add Mona</Button>\n                                ) : null }\n                                { !hasAddress('TEZOS') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('TEZOS') }}>Add Tezos</Button>\n                                ) : null }\n                                { !hasAddress('SOLANA') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('SOLANA') }}>Add Solana</Button>\n                                ) : null }\n                              </Collapse>\n                            </Flex>\n                          </>\n                        ) : null}\n                        </Stack>\n                      </ButtonGroup>\n                    </Box>\n                  ) : null}\n\n                  {!(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 4 || vaultChainId === 137 )? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      {/* <Stack d=\"flex\" width=\"100%\"> */}\n                        <Button\n                          className=\"nft_button\"\n                          width=\"50%\"\n                          m={5}\n                          onClick={() => {visitOpenSeaLink()}}\n                        >\n                          Opensea\n                        </Button>\n                        <Button\n                          className=\"nft_button\"\n                          width=\"50%\"\n                          m={5}\n                          onClick={() => {visitLooksRareLink()}}\n                        >\n                          LooksRare\n                        </Button>\n                        {showOffer? (\n                          <Button className=\"\" onClick={() => { onOpenOfferModal() }}>{mine? ('My Offers') : ('Make an Offer')} (NFT²NFT)</Button>\n                        ) : null}\n                        \n                      {/* </Stack> */}\n                    </Box>\n                  ) : null}\n                  {!(status === 'claimed') && mine && !acceptable?  (\n                    <>\n                     <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\" width=\"100%\">\n                        <Stack direction=\"column\" align=\"center\" width=\"100%\">\n                          <Button className=\"nft_button\" width=\"100%\" onClick={onToggle}>Transfer Vault</Button>\n                          <Collapse isOpen={isOpen}>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                            <FormLabel htmlFor=\"owner-address\">Address</FormLabel>\n                              <Input\n                                mt={1}\n                                type=\"text\"\n                                id=\"transferAddress\"\n                                value={transferToAddress || ''}\n                                onChange={(e) => {                              \n                                  console.log(\"Transfer to\", e.target.value)\n                                  setTransferToAddress(e.target.value)\n                                }}\n                                autoComplete=\"off\"\n                              />\n                            </Box>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                              <Button isDisabled={!isETHAddress(transferToAddress)} onClick={()=>{\n                                onToggle()\n                                transferVault()\n                              }}>Transfer Now</Button> \n                            </Box>\n                          </Collapse>\n                        </Stack>\n                      </Box>\n                    </>\n                  ):null }\n                  {mine && !acceptable && !approved ? (<>\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button \n                        className=\"nft_button\"\n                        width=\"100%\" onClick={() => {\n                        if (!approved) {\n                          return handleApproveForall()\n                        }                                      \n                      }\n                    }>Approve Claiming</Button>\n                    </Box>\n                  </>) : null }\n                  {(showTransferPassword || mintPassword) && acceptable ? (\n                      <Box>\n                        <Link href={location.protocol +'//'+ location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword)}>Copy Gift Link</Link>\n                        <Text>Password: {(transferPassword || mintPassword)}</Text>\n                      </Box>\n                      ) : null}\n                  {/* {acceptable && claimedBy !== account ? (\n                  <>\n                      <Button mt={2} width=\"100%\" onClick={()=>{fireMetaMask()}}>Accept</Button>\n                      <Input\n                        mt={2}\n                        type=\"password\"\n                        id=\"mintPassword\"\n                        minLength={3}\n                        maxLength={200}\n                        value={mintPassword || ''}\n                        onChange={(e) => {\n                          console.log('grrr', e.target.value, mintPassword)\n                          setMintPassword(e.target.value)}\n                        }\n                        autoComplete=\"off\"\n                      />\n                  </>\n                    ) : null} */}\n                  {!(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        onClick={() => {\n                          handleClaim()\n                        }}\n                        isDisabled={claiming}\n                      >\n                        {claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)'}\n                      </Button>\n                    </Box>\n                    // || !live && nonce && mintSignature && vaultCiphertextV2 && to == account\n                  ) : (status === 'claimed' && claimedBy === account && vaultChainId === chainId)  ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={handleSign}>\n                        Get Keys\n                      </Button>\n                    </Box>\n                  ) : null}\n                  {!live && to == account && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg ? (\n                    <>\n                      { targetContract.name ? (\n                        <Button width=\"100%\" mt={5} onClick={lazyMintCurated} isDisabled = {!canCuratedMint}> Mint Vault </Button>\n                      ) : (\n                        <Button width=\"100%\" mt={5} onClick={lazyMint}>Mint Vault </Button>\n                      )}\n                    </>\n                ) : null}\n                {(!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? (\n                  <Button width=\"100%\" mt={5} onClick={deleteVault}>Delete Vault </Button>\n                ) : null}\n                {showVerifyingSignature ? (\n                  <Button isDisabled type=\"submit\">\n                    Verifying Signature ...\n                  </Button>\n                ) : null}\n                {showMakingVaultMsg ? (\n                  <Button isDisabled type=\"submit\">\n                    Minting Vault ...\n                  </Button>\n                ) : null}\n                </Box>\n                {vaultIPFS ? (\n                  <Stack>\n                    <HStack align=\"center\">\n                      <Link target='new' mb={2} ml={35} href={'https://gateway.ipfs.io/ipfs/'+vaultIPFS} isExternal>View Metadata on IPFS </Link>\n                      {vaultImageIPFS? (\n                        <Link mb={2} href={'https://gateway.ipfs.io/ipfs/'+vaultImageIPFS} isExternal>View Image on IPFS </Link>\n                      ) : null}                      \n                    </HStack> \n                  </Stack>\n                ) : null }\n                {sealed ? (\n                    <Box d=\"flex\" mb={2} ml={35} alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Text>*This vault is sealed forever.</Text>\n                    </Box>\n                  ) : null}\n                <Stack direction=\"column\" align=\"center\">\n                  {status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n                {hash ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    { accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving? \"Handling Approval Flow ...\" : transfering? \"Transfering Vault ...\":  minting? \"Minting Vault\" : \"Generating Gift Link ...\"}\n                  </Alert>\n                ) : null}\n              </Box>\n            </Flex>\n        ) : vaultValues.length > 0 && slideshowOnly? (\n          <Stack className=\"NFT-content\" align=\"center\">\n            { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                <NFTSlideshow name={vaultName} image={vaultValues[0].image} items={vaultValues.filter(value=>{return value.image !== vaultValues[0].image}).map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n              ) : (\n                <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n              )\n            }\n          </Stack>\n        ) : invalidVault ? (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        ): null}\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming && !accepting && !preTransfering) {\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                pingClaimLogs(()=>{\n                  location.href = location.origin + '/nft?id=' + tokenId\n                })\n              } else if (preTransfering) {\n                savePasswordToLocalStorage()\n                setShowTransferPassword(true)\n                setPreTransfering(false)\n                setHash(null)                \n              } else if(accepting) {\n                setAccepting(false)                \n                getVault()\n                setHash(null)\n              } else if(approving) {\n                setApproving(false)\n                getVault()\n                setHash(null)\n              } else if(transfering) {\n                setTransfering(false)\n                getVault()\n                setHash(null)\n              } else if(minting) {\n                checkLiveliness(tokenId, ()=>{\n                  setMinting(false)\n                  setLive(true)\n                  // setShowMakingVaultMsg(false)\n                  // location.href = location.origin + '/nft?id=' + tokenId\n                })\n              } else {\n                console.log('minting', minting) \n                console.log('claiming', claiming) \n                console.log('accepting', accepting) \n                console.log('preTransfering', preTransfering)\n                console.log('approving', approving)\n                console.log(\"Unknown state\")\n              }\n            }}\n          />\n        ) : null}\n        <Box height=\"40px\"></Box>\n      {/* </Loader> */}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}