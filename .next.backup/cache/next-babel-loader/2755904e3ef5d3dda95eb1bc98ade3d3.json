{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Vault.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, useDisclosure } from '@chakra-ui/core';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { validImage } from '../utils';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nconst AddrModal = dynamic(() => import('./AddrModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./AddrModal')],\n    modules: ['./AddrModal']\n  }\n});\nconst KeysModal = dynamic(() => import('./KeysModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./KeysModal')],\n    modules: ['./KeysModal']\n  }\n});\nexport default function Vault() {\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    query,\n    pathname,\n    replace\n  } = useRouter();\n  const {\n    0: tokenId,\n    1: setTokenId\n  } = useState(query.id);\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState('');\n  const {\n    0: vaultDesc,\n    1: setVaultDesc\n  } = useState('');\n  const {\n    0: vaultImage,\n    1: setVaultImage\n  } = useState('');\n  const {\n    0: vaultValues,\n    1: setVaultValues\n  } = useState([]);\n  const {\n    0: vaultAddresses,\n    1: setVaultAddresses\n  } = useState([]);\n  const {\n    0: vaultPrivacy,\n    1: setVaultPrivacy\n  } = useState(false);\n  const {\n    0: vaultChainId,\n    1: setVaultChainId\n  } = useState(null);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: currCoin,\n    1: setCurrCoin\n  } = useState('');\n  const {\n    0: currAddr,\n    1: setCurrAddr\n  } = useState('');\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: allowed,\n    1: setAllowed\n  } = useState(false);\n  const {\n    0: mine,\n    1: setMine\n  } = useState(false);\n  const {\n    0: claiming,\n    1: setClaiming\n  } = useState(false);\n  const {\n    0: status,\n    1: setStatus\n  } = useState('claimed');\n  const {\n    0: claimedBy,\n    1: setClaimedBy\n  } = useState(null);\n  const {\n    0: mnemonic,\n    1: setMnemonic\n  } = useState('');\n  const {\n    0: privKeyBTC,\n    1: setPrivKeyBTC\n  } = useState('');\n  const {\n    0: privKeyETH,\n    1: setPrivKeyETH\n  } = useState('');\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  const {\n    isOpen: isOpenAddrModal,\n    onOpen: onOpenAddrModal,\n    onClose: onCloseAddrModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenKeysModal,\n    onOpen: onOpenKeysModal,\n    onClose: onCloseKeysModal\n  } = useDisclosure();\n\n  const getVault = async () => {\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log(jsonData);\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setVaultDesc(jsonData.description);\n    setVaultValues(jsonData.values);\n    setVaultDesc(jsonData.description);\n    setVaultAddresses(jsonData.addresses);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : 4);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    }\n\n    setState({\n      loaded: true\n    });\n    let isPvt = jsonData.addresses.filter(item => {\n      return item.address.includes('private:');\n    }).length > 0;\n    console.log(\"pvt\", isPvt);\n    setVaultPrivacy(isPvt);\n  };\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature\n    });\n    const responce = await fetch(EMBLEM_API + '/verify/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  };\n\n  const getContractStates = async () => {\n    let owner = await emblemContract.ownerOf(tokenId);\n    setMine(owner === account);\n\n    if (mine) {\n      setAllowed(true);\n    }\n\n    console.log('status', status, 'claimedBy', claimedBy);\n  };\n\n  const handleApprove = async () => {\n    emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library.getSigner(account).signMessage('Claim: ' + tokenId).then(signature => {\n      getKeys(signature, tokenId, result => {\n        // alert('Mnemonic: ' + result.decrypted.phrase)\n        setMnemonic(result.decrypted.phrase);\n        setPrivKeyBTC('BTC KEY');\n        setPrivKeyETH('ETH KEY');\n        onOpenKeysModal();\n        console.log(result.decrypted);\n      });\n    });\n  };\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({\n      hash\n    }) => {\n      setClaiming(true);\n      setTimeout(() => {\n        setHash(hash);\n        handleSign();\n        onOpenKeysModal();\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    });\n  };\n\n  useEffect(() => {\n    getVault();\n  }, []);\n  useEffect(() => {\n    console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId);\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null;\n  });\n\n  function splitDescription(words) {\n    var desc = words.split('Emblem Vault Basic');\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(pass) {\n    console.log(pass);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }), __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, vaultChainId != chainId ? __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"orange.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 15\n    }\n  }, \"Your vault is on a different network than you are.\") : null, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  }, vaultName), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }, __jsx(Image, {\n    src: validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png',\n    width: \"250px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 15\n    }\n  })), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  }, splitDescription(vaultDesc)))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 19\n    }\n  }, \"Current Contents:\"), vaultPrivacy ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 23\n    }\n  }, \"Contents hidden. Enter password to unlock.\"), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: e => tryDecrypt(e.target.value),\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 23\n    }\n  })) : vaultValues.length ? vaultValues.map(coin => {\n    return __jsx(Text, {\n      key: coin.name,\n      isTruncated: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 25\n      }\n    }, coin.name, \": \", coin.balance);\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 21\n    }\n  }, \"Nothing in here! Fill 'er up!\"))), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"center\",\n    spacing: \"1rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }\n  }, __jsx(ButtonGroup, {\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 19\n    }\n  }, vaultAddresses.map(addr => {\n    return __jsx(Button, {\n      key: addr.address,\n      onClick: () => {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 25\n      }\n    }, \"Put \", addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin, \" In\");\n  })))) : null, status === 'claimed' && claimedBy === account ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 19\n    }\n  }, \"Get Keys\")) : __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 17\n    }\n  }, __jsx(Button, _extends({\n    width: \"100%\",\n    as: \"a\"\n  }, {\n    href: 'https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + contractAddresses.emblemVault[vaultChainId] + '/' + tokenId,\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 19\n    }\n  }), mine ? 'Sell/Gift/Send' : 'Make an Offer')), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 15\n    }\n  }, mine ? __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      if (allowed) {\n        handleClaim();\n      } else {\n        handleApprove();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 19\n    }\n  }, allowed ? 'Claim' : 'Approve') : '')))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      if (claiming) {\n        alert('Claim tx complete. Now ask server for keys');\n        setHash(null);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 11\n    }\n  }) : null));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Vault.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","useDisclosure","useWeb3React","useEffect","useState","useRouter","Loader","dynamic","validImage","TransactionToast","EMBLEM_API","BURN_ADDRESS","contractAddresses","useContract","AddrModal","KeysModal","Vault","account","chainId","library","query","pathname","replace","tokenId","setTokenId","id","vaultName","setVaultName","vaultDesc","setVaultDesc","vaultImage","setVaultImage","vaultValues","setVaultValues","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultChainId","setVaultChainId","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","state","setState","loaded","allowed","setAllowed","mine","setMine","claiming","setClaiming","status","setStatus","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","handlerContract","vaultHandler","vaultHandlerAbi","emblemContract","emblemVault","emblemAbi","isOpen","isOpenAddrModal","onOpen","onOpenAddrModal","onClose","onCloseAddrModal","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","getVault","responce","fetch","method","headers","service","jsonData","json","console","log","name","image","description","values","addresses","network","isPvt","filter","item","address","includes","length","getKeys","signature","cb","myHeaders","Headers","append","toString","raw","JSON","stringify","body","redirect","getContractStates","owner","ownerOf","handleApprove","setApprovalForAll","then","handleSign","getSigner","signMessage","result","decrypted","phrase","handleClaim","transferFrom","setTimeout","splitDescription","words","desc","split","trim","tryDecrypt","pass","e","target","value","map","coin","balance","addr","href","rel","alert"],"mappings":"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","sourcesContent":["import { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, useDisclosure } from '@chakra-ui/core'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { validImage } from '../utils'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\n\nexport default function Vault() {\n  const { account, chainId, library } = useWeb3React()\n  const { query, pathname, replace } = useRouter()\n  const [tokenId, setTokenId] = useState(query.id)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [allowed, setAllowed] = useState(false)\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n\n  const getVault = async () => {\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    console.log(jsonData)\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setVaultDesc(jsonData.description)\n    setVaultValues(jsonData.values)\n    setVaultDesc(jsonData.description)\n    setVaultAddresses(jsonData.addresses)\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : 4)\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    setState({ loaded: true })\n    let isPvt = jsonData.addresses.filter(item=>{return item.address.includes('private:')}).length > 0\n    console.log(\"pvt\", isPvt)\n    setVaultPrivacy(isPvt)\n  }\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/verify/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    let owner = await emblemContract.ownerOf(tokenId)\n    setMine(owner === account)\n    if (mine) {\n      setAllowed(true)\n    }\n    console.log('status', status, 'claimedBy', claimedBy)\n  }\n\n  const handleApprove = async () => {\n    emblemContract\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + tokenId)\n      .then((signature) => {\n        getKeys(signature, tokenId, (result) => {\n          // alert('Mnemonic: ' + result.decrypted.phrase)\n          setMnemonic(result.decrypted.phrase)\n          setPrivKeyBTC('BTC KEY')\n          setPrivKeyETH('ETH KEY')\n          onOpenKeysModal()\n          console.log(result.decrypted)\n        })\n      })\n  }\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({ hash }: { hash: string }) => {\n      setClaiming(true)\n      setTimeout(() => {\n        setHash(hash)\n        handleSign()\n        onOpenKeysModal()\n      }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    })\n  }\n\n  useEffect(() => {\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null\n  })\n\n  function splitDescription(words) {\n    var desc = words.split('Emblem Vault Basic')\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(pass) {\n    console.log(pass)\n  }\n\n  return (\n    <>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n      />\n\n      <Loader loaded={state.loaded}>\n        <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n          <Box\n            maxW=\"sm\"\n            borderWidth=\"1px\"\n            borderColor={vaultChainId != chainId ? 'orange.500' : null}\n            rounded=\"lg\"\n            overflow=\"hidden\"\n            alignItems=\"center\"\n          >\n            {vaultChainId != chainId ? (\n              <Box\n                mt=\"1\"\n                fontWeight=\"semibold\"\n                as=\"h3\"\n                lineHeight=\"tight\"\n                p={2}\n                textAlign=\"center\"\n                textTransform=\"uppercase\"\n                alignItems=\"center\"\n                color=\"orange.500\"\n              >\n                Your vault is on a different network than you are.\n              </Box>\n            ) : null}\n            <Box\n              mt=\"1\"\n              fontWeight=\"semibold\"\n              as=\"h3\"\n              lineHeight=\"tight\"\n              p={2}\n              textAlign=\"center\"\n              textTransform=\"uppercase\"\n              alignItems=\"center\"\n            >\n              {vaultName}\n            </Box>\n            <Stack align=\"center\">\n              <Image\n                src={validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png'}\n                width=\"250px\"\n              />\n            </Stack>\n            <Stack align=\"center\">\n              <Box mt=\"1\" ml=\"4\" lineHeight=\"tight\">\n                <Text as=\"h4\" ml=\"4\" mr=\"4\">\n                  {splitDescription(vaultDesc)}\n                </Text>\n              </Box>\n            </Stack>\n            <Box p=\"6\">\n              <Box d=\"flex\" alignItems=\"baseline\">\n                <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                  <Text as=\"h4\" fontWeight=\"semibold\">\n                    Current Contents:\n                  </Text>\n                  {vaultPrivacy ? (\n                    <>\n                      <Text>Contents hidden. Enter password to unlock.</Text>\n                      <Input\n                        type=\"password\"\n                        id=\"vault-password\"\n                        onChange={(e) => tryDecrypt(e.target.value)}\n                        aria-describedby=\"password-helper-text\"\n                      />\n                    </>\n                  ) : vaultValues.length ? (\n                    vaultValues.map((coin) => {\n                      return (\n                        <Text key={coin.name} isTruncated>\n                          {coin.name}: {coin.balance}\n                        </Text>\n                      )\n                    })\n                  ) : (\n                    <Text>Nothing in here! Fill 'er up!</Text>\n                  )}\n                </Box>\n              </Box>\n              {!vaultPrivacy ? (\n              <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                <Stack direction=\"row\" align=\"center\" spacing=\"1rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                  <ButtonGroup spacing={4}>\n                    {vaultAddresses.map((addr) => {\n                      return (\n                        <Button\n                          key={addr.address}\n                          onClick={() => {\n                            setCurrCoin(addr.coin)\n                            setCurrAddr(addr.address)\n                            onOpenAddrModal()\n                          }}\n                        >\n                          Put {addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin} In\n                        </Button>\n                      )\n                    })}\n                  </ButtonGroup>\n                </Stack>\n              </Box> ) : null }\n              {status === 'claimed' && claimedBy === account ? (\n                <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                  <Button width=\"100%\" onClick={handleSign}>\n                    Get Keys\n                  </Button>\n                </Box>\n              ) : (\n                <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                  <Button\n                    width=\"100%\"\n                    as=\"a\"\n                    {...{\n                      href:\n                        'https://' +\n                        (vaultChainId == 4 ? 'rinkeby.' : '') +\n                        'opensea.io/assets/' +\n                        contractAddresses.emblemVault[vaultChainId] +\n                        '/' +\n                        tokenId,\n                      target: '_blank',\n                      rel: 'noopener noreferrer',\n                    }}\n                  >\n                    {mine ? 'Sell/Gift/Send' : 'Make an Offer'}\n                  </Button>\n                </Box>\n              )}\n              <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                {mine ? (\n                  <Button\n                    width=\"100%\"\n                    onClick={() => {\n                      if (allowed) {\n                        handleClaim()\n                      } else {\n                        handleApprove()\n                      }\n                    }}\n                  >\n                    {allowed ? 'Claim' : 'Approve'}\n                  </Button>\n                ) : (\n                  ''\n                )}\n              </Box>\n            </Box>\n          </Box>\n        </Flex>\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming) {\n                alert('Claim tx complete. Now ask server for keys')\n                setHash(null)\n              }\n            }}\n          />\n        ) : null}\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}