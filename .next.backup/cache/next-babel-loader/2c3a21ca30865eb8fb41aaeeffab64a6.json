{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Stats.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nexport default function Stats() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React(); // const [vaults, setVaults] = useState([])\n\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false); // const [approving, setApproving] = useState(false)\n  // const [transfering, setTransfering] = useState(false)\n  // const [balance, setBalance] = useState(null)\n  // const [address, setAddress] = useState(query.address)\n  // const [experimental, setExperimental] = useState(query.experimental)\n  // const [decimals, setDecimals] = useState(null)\n  // const [allowance, setAllowance] = useState(null)\n  // const [transferChain, setTransferChain] = useState(0)\n  // const [covalApprovedFor, setIsCovalApproved] = useState(0)\n  // const [hash, setHash] = useState(null)\n  // const [swapAmount, setSwapAmount] = useState(0)\n  // const [isInvalid, setIsInvalid] = useState(false)\n  // const [transferChainChanged, setTransferChainChanged] = useState(true)\n  // const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  // const covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true)\n\n  // const transferToChain = async () => {\n  //   setTransfering(true)\n  //   ;(handlerContract as Contract)\n  //   .transferToChain(transferChain, swapAmount.toString())\n  //   .then(({ hash }: { hash: string }) => {\n  //     setHash(hash)\n  //   })\n  //   .catch((error: ErrorWithCode) => {\n  //     if (error?.code == 4001) {\n  //       setTransfering(false)\n  //     }\n  //   })\n  // }\n  // const getContractStates = async () => {\n  //   setHash(null)\n  //   setDecimals(await covalContract.decimals())\n  //   setAllowance(\n  //     await covalContract\n  //       .allowance(account, contractAddresses.vaultHandler[chainId])\n  //       .then((balance: { toString: () => string }) => balance.toString())\n  //   )\n  //   setBalance(await covalContract.balanceOf(account).then((balance: { toString: () => string }) => balance.toString()))\n  //   if (Number(allowance) >= Number(0)) {      \n  //     setIsCovalApproved(allowance)\n  //   }\n  //   setState({ loaded: true })\n  // }\n  // const approveCovalFlow = () => {\n  //   setApproving(true)\n  //   ;(covalContract as Contract)\n  //     .approve(contractAddresses.vaultHandler[chainId], 10000000 * Math.pow(10, +decimals) )\n  //     .then(({ hash }: { hash: string }) => {\n  //       setHash(hash)\n  //     })\n  //     .catch((error: ErrorWithCode) => {\n  //       if (error?.code == 4001) {\n  //         setApproving(false)\n  //       }\n  //     })\n  // }\n  // const getTransferLogs = async () =>{\n  //   console.log(\"getting logs\")\n  //   fetch(EMBLEM_API + '/web3/transfersOut', {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //       chainid: chainId.toString()\n  //     }\n  //   }).then(async function (response) {\n  //     console.log(\"doing transfers\")\n  //     fetch(EMBLEM_API + '/doTransfers', {\n  //       method: 'GET',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         service: 'evmetadata',\n  //         chainid: chainId.toString()\n  //       }\n  //     }).then(async function (response) {\n  //       getContractStates()\n  //     })\n  //   })\n  // }\n  // function SwapText({ children, ...rest }: BoxProps): JSX.Element {\n  //   return (\n  //     <Text fontSize=\"2xl\" lineHeight={1} py=\"0.3rem\" {...rest}>\n  //       {children}\n  //     </Text>\n  //   )\n  // }\n  // const [acct, setAcct] = useState('')\n  // useEffect(() => {\n  //   if (account && acct != account) {\n  //     setAcct(account)\n  //     setState({ loaded: false })\n  //     getContractStates()\n  //   }\n  // }, [account, acct])\n  // const [chain, setChain] = useState(chainId)\n  // useEffect(() => {\n  //   if (chainId && chain != chainId) {\n  //     setChain(chainId)\n  //     setState({ loaded: false })\n  //     getContractStates()\n  //   }\n  // }, [chainId, chain])\n  useEffect(() => {\n    if (state.loaded == false && !loadingApi) {\n      setLoadingApi(false);\n      getStats();\n    }\n  }, []);\n\n  const getStats = async () => {\n    console.log(\"getting logs\");\n    fetch('https://api.emblemvault.io/s:osautomate/earnings/emblem-vault', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(async function (response) {\n      setLoadingApi(false);\n      setState({\n        loaded: true\n      });\n      let jsonData = await response.json();\n      console.log(jsonData);\n    });\n  };\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, \"Statistics go here\"))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Stats.tsx"],"names":["Flex","Text","Stack","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","Stats","query","account","chainId","state","setState","loaded","loadingApi","setLoadingApi","getStats","console","log","fetch","method","headers","then","response","jsonData","json"],"mappings":";;;AAAA,SAAcA,IAAd,EAAoBC,IAApB,EAAuCC,KAAvC,QAA8H,iBAA9H;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAUA,eAAe,SAASC,KAAT,GAAiB;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAYL,SAAS,EAA3B;AACA,QAAM;AAAEM,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBN,YAAY,EAAzC,CAF8B,CAG9B;;AACA,QAAM;AAAA,OAACO,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC;AAAEO,IAAAA,MAAM,EAAE;AAAV,GAAD,CAAlC;AACA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BT,QAAQ,CAAC,KAAD,CAA5C,CAL8B,CAM9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,KAAK,CAACE,MAAN,IAAgB,KAAhB,IAAyB,CAACC,UAA9B,EAA0C;AACxCC,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAC,MAAAA,QAAQ;AACT;AACF,GALQ,EAKN,EALM,CAAT;;AAOA,QAAMA,QAAQ,GAAG,YAAU;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAC,IAAAA,KAAK,CAAC,+DAAD,EAAkE;AACrEC,MAAAA,MAAM,EAAE,KAD6D;AAErEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAF4D,KAAlE,CAAL,CAKGC,IALH,CAKQ,gBAAgBC,QAAhB,EAA0B;AAChCR,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAH,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAR;AACA,UAAIW,QAAQ,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAArB;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYM,QAAZ;AACD,KAVD;AAWD,GAbD;;AAiBA,SACE,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAEb,KAAK,CAACE,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,UAAU,GAAG,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAoB,EADjC,EAGE,MAAC,IAAD;AAAM,IAAA,CAAC,EAAC,MAAR;AAAe,IAAA,OAAO,EAAC,QAAvB;AAAgC,IAAA,EAAE,EAAE,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,CADF,CAHF,CADF;AAYD","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage, toContractValue, CHAIN_ID_NAMES } from '../utils'\nimport { useContract } from '../hooks'\nimport { Contract } from '@ethersproject/contracts'\nimport { EMBLEM_API, contractAddresses } from '../constants'\nimport { TransactionToast } from './TransactionToast'\nimport { parseUnits } from '@ethersproject/units'\nimport BridgeDeposits from './partials/BridgeDeposits'\n\n\nexport default function Stats() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  // const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  // const [approving, setApproving] = useState(false)\n  // const [transfering, setTransfering] = useState(false)\n  // const [balance, setBalance] = useState(null)\n  // const [address, setAddress] = useState(query.address)\n  // const [experimental, setExperimental] = useState(query.experimental)\n  // const [decimals, setDecimals] = useState(null)\n  // const [allowance, setAllowance] = useState(null)\n  // const [transferChain, setTransferChain] = useState(0)\n  // const [covalApprovedFor, setIsCovalApproved] = useState(0)\n  // const [hash, setHash] = useState(null)\n  // const [swapAmount, setSwapAmount] = useState(0)\n  // const [isInvalid, setIsInvalid] = useState(false)\n  // const [transferChainChanged, setTransferChainChanged] = useState(true)\n  // const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  // const covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true)\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  // const transferToChain = async () => {\n  //   setTransfering(true)\n  //   ;(handlerContract as Contract)\n  //   .transferToChain(transferChain, swapAmount.toString())\n  //   .then(({ hash }: { hash: string }) => {\n  //     setHash(hash)\n  //   })\n  //   .catch((error: ErrorWithCode) => {\n  //     if (error?.code == 4001) {\n  //       setTransfering(false)\n  //     }\n  //   })\n  // }\n\n  // const getContractStates = async () => {\n  //   setHash(null)\n  //   setDecimals(await covalContract.decimals())\n  //   setAllowance(\n  //     await covalContract\n  //       .allowance(account, contractAddresses.vaultHandler[chainId])\n  //       .then((balance: { toString: () => string }) => balance.toString())\n  //   )\n  //   setBalance(await covalContract.balanceOf(account).then((balance: { toString: () => string }) => balance.toString()))\n  //   if (Number(allowance) >= Number(0)) {      \n  //     setIsCovalApproved(allowance)\n  //   }\n  //   setState({ loaded: true })\n  // }\n\n  // const approveCovalFlow = () => {\n  //   setApproving(true)\n  //   ;(covalContract as Contract)\n  //     .approve(contractAddresses.vaultHandler[chainId], 10000000 * Math.pow(10, +decimals) )\n  //     .then(({ hash }: { hash: string }) => {\n  //       setHash(hash)\n  //     })\n  //     .catch((error: ErrorWithCode) => {\n  //       if (error?.code == 4001) {\n  //         setApproving(false)\n  //       }\n  //     })\n  // }\n\n  // const getTransferLogs = async () =>{\n  //   console.log(\"getting logs\")\n  //   fetch(EMBLEM_API + '/web3/transfersOut', {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //       chainid: chainId.toString()\n  //     }\n  //   }).then(async function (response) {\n  //     console.log(\"doing transfers\")\n  //     fetch(EMBLEM_API + '/doTransfers', {\n  //       method: 'GET',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         service: 'evmetadata',\n  //         chainid: chainId.toString()\n  //       }\n  //     }).then(async function (response) {\n  //       getContractStates()\n  //     })\n  //   })\n  // }\n\n  // function SwapText({ children, ...rest }: BoxProps): JSX.Element {\n  //   return (\n  //     <Text fontSize=\"2xl\" lineHeight={1} py=\"0.3rem\" {...rest}>\n  //       {children}\n  //     </Text>\n  //   )\n  // }\n\n  // const [acct, setAcct] = useState('')\n  // useEffect(() => {\n  //   if (account && acct != account) {\n  //     setAcct(account)\n  //     setState({ loaded: false })\n  //     getContractStates()\n  //   }\n  // }, [account, acct])\n\n  // const [chain, setChain] = useState(chainId)\n  // useEffect(() => {\n  //   if (chainId && chain != chainId) {\n  //     setChain(chainId)\n  //     setState({ loaded: false })\n  //     getContractStates()\n  //   }\n  // }, [chainId, chain])\n\n  useEffect(() => {\n    if (state.loaded == false && !loadingApi) {\n      setLoadingApi(false)\n      getStats()\n    }\n  }, [])\n\n  const getStats = async() =>{\n    console.log(\"getting logs\")\n    fetch('https://api.emblemvault.io/s:osautomate/earnings/emblem-vault', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(async function (response) {\n      setLoadingApi(false)\n      setState({ loaded: true })\n      let jsonData = await response.json()\n      console.log(jsonData)\n    })\n  }\n\n\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Stack align=\"center\">\n          <Text>Statistics go here</Text>\n        </Stack>\n      </Flex>\n     \n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}