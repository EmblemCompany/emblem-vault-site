{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft2.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure, Collapse, useColorMode, Tabs, TabList, Tab, TabPanel, TabPanels } from '@chakra-ui/core';\nimport { HStack } from '@chakra-ui/react'; // import TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\n\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { Contract } from '@ethersproject/contracts';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, contractAddresses, SIG_API } from '../constants';\nimport { useContract } from '../hooks';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport CryptoJS from 'crypto-js';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nimport NFTSlideshow from './embed/NFTSlideshow';\nimport CoinBalance from './partials/CoinBalance';\nimport Attributes from './partials/Attributes';\nimport { generateWallet } from '@stacks/wallet-sdk';\nimport FetchNodeDetails from \"@toruslabs/fetch-node-details\";\nimport TorusUtils from \"@toruslabs/torus.js\";\nimport JsonDownloadLink from './JsonDownloadLink';\nvar API_VERSION = '/v2';\nvar AddrModal = dynamic(_c = function _c() {\n  return import('./AddrModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./AddrModal')];\n    },\n    modules: ['./AddrModal']\n  }\n});\n_c2 = AddrModal;\nvar KeysModal = dynamic(_c3 = function _c3() {\n  return import('./KeysModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./KeysModal')];\n    },\n    modules: ['./KeysModal']\n  }\n});\n_c4 = KeysModal;\nvar OfferModal = dynamic(_c5 = function _c5() {\n  return import('./OfferModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./OfferModal')];\n    },\n    modules: ['./OfferModal']\n  }\n});\n_c6 = OfferModal;\nexport default function Nft2() {\n  _s();\n\n  var _this = this;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(false),\n      isCuratedMaster = _useState[0],\n      setIsCuratedMaster = _useState[1];\n\n  var _useState2 = useState(null),\n      decimals = _useState2[0],\n      setDecimals = _useState2[1];\n\n  var _useState3 = useState(null),\n      allowance = _useState3[0],\n      setAllowance = _useState3[1];\n\n  var _useState4 = useState(null),\n      balance = _useState4[0],\n      setBalance = _useState4[1];\n\n  var _useState5 = useState(null),\n      price = _useState5[0],\n      setPrice = _useState5[1];\n\n  var _useState6 = useState(false),\n      isCovalApproved = _useState6[0],\n      setIsCovalApproved = _useState6[1];\n\n  var _useState7 = useState(false),\n      approved = _useState7[0],\n      setApproved = _useState7[1];\n\n  var _useState8 = useState(query.useOldMint),\n      useOldMint = _useState8[0],\n      setUseOldMint = _useState8[1];\n\n  var _useState9 = useState(query.key),\n      mintPassword = _useState9[0],\n      setMintPassword = _useState9[1];\n\n  var _useState10 = useState(query.offer || false),\n      showOffer = _useState10[0],\n      setShowOffer = _useState10[1];\n\n  var _useState11 = useState(query.framed || true),\n      framed = _useState11[0],\n      setFramed = _useState11[1];\n\n  var _useState12 = useState(query.id),\n      tokenId = _useState12[0],\n      setTokenId = _useState12[1];\n\n  var _useState13 = useState(query.experimental),\n      experimental = _useState13[0],\n      setExperimental = _useState13[1];\n\n  var _useState14 = useState(query.noLayout),\n      noLayout = _useState14[0],\n      setNoLayout = _useState14[1];\n\n  var _useState15 = useState(query.slideshowOnly || false),\n      slideshowOnly = _useState15[0],\n      setSlideshowOnly = _useState15[1];\n\n  var _useState16 = useState(''),\n      vaultName = _useState16[0],\n      setVaultName = _useState16[1];\n\n  var _useState17 = useState(''),\n      vaultIPFS = _useState17[0],\n      setVaultIPFS = _useState17[1];\n\n  var _useState18 = useState(''),\n      vaultImageIPFS = _useState18[0],\n      setVaultImageIPFS = _useState18[1];\n\n  var _useState19 = useState(''),\n      vaultCiphertextV2 = _useState19[0],\n      setVaultCiphertextV2 = _useState19[1];\n\n  var _useState20 = useState(''),\n      vaultDesc = _useState20[0],\n      setVaultDesc = _useState20[1];\n\n  var _useState21 = useState(''),\n      vaultImage = _useState21[0],\n      setVaultImage = _useState21[1];\n\n  var _useState22 = useState(''),\n      ownedImage = _useState22[0],\n      setOwnedImage = _useState22[1];\n\n  var _useState23 = useState([]),\n      vaultValues = _useState23[0],\n      setVaultValues = _useState23[1];\n\n  var _useState24 = useState(false),\n      loadedValues = _useState24[0],\n      setLoadedValues = _useState24[1];\n\n  var _useState25 = useState([]),\n      vaultDataValues = _useState25[0],\n      setVaultDataValues = _useState25[1];\n\n  var _useState26 = useState([]),\n      attributes = _useState26[0],\n      setAttributes = _useState26[1];\n\n  var _useState27 = useState([]),\n      vaultAddresses = _useState27[0],\n      setVaultAddresses = _useState27[1];\n\n  var _useState28 = useState(false),\n      vaultPrivacy = _useState28[0],\n      setVaultPrivacy = _useState28[1];\n\n  var _useState29 = useState(0),\n      vaultTotalValue = _useState29[0],\n      setVaultTotalValue = _useState29[1];\n\n  var _useState30 = useState(null),\n      vaultChainId = _useState30[0],\n      setVaultChainId = _useState30[1];\n\n  var _useState31 = useState(null),\n      vaultChain = _useState31[0],\n      setVaultChain = _useState31[1];\n\n  var _useState32 = useState(null),\n      hash = _useState32[0],\n      setHash = _useState32[1];\n\n  var _useState33 = useState(''),\n      currCoin = _useState33[0],\n      setCurrCoin = _useState33[1];\n\n  var _useState34 = useState(''),\n      currAddr = _useState34[0],\n      setCurrAddr = _useState34[1];\n\n  var _useState35 = useState({\n    loaded: false\n  }),\n      state = _useState35[0],\n      setState = _useState35[1];\n\n  var _useState36 = useState(false),\n      mine = _useState36[0],\n      setMine = _useState36[1];\n\n  var _useState37 = useState(false),\n      mineUnMinted = _useState37[0],\n      setMineUnMinted = _useState37[1];\n\n  var _useState38 = useState(false),\n      claiming = _useState38[0],\n      setClaiming = _useState38[1];\n\n  var _useState39 = useState('claimed'),\n      status = _useState39[0],\n      setStatus = _useState39[1];\n\n  var _useState40 = useState(false),\n      sealed = _useState40[0],\n      setSealed = _useState40[1];\n\n  var _useState41 = useState(null),\n      claimedBy = _useState41[0],\n      setClaimedBy = _useState41[1];\n\n  var _useState42 = useState(''),\n      mnemonic = _useState42[0],\n      setMnemonic = _useState42[1];\n\n  var _useState43 = useState(''),\n      privKeyBTC = _useState43[0],\n      setPrivKeyBTC = _useState43[1];\n\n  var _useState44 = useState(''),\n      privKeyETH = _useState44[0],\n      setPrivKeyETH = _useState44[1];\n\n  var _useState45 = useState([]),\n      privValues = _useState45[0],\n      setKeyValues = _useState45[1];\n\n  var _useState46 = useState(false),\n      loadingApi = _useState46[0],\n      setLoadingApi = _useState46[1];\n\n  var _useState47 = useState(''),\n      decryptedEffect = _useState47[0],\n      setDecryptedEffect = _useState47[1];\n\n  var _useState48 = useState(false),\n      decryptedEffectRunning = _useState48[0],\n      setDecryptedEffectRunning = _useState48[1];\n\n  var _useState49 = useState(''),\n      decryptPassword = _useState49[0],\n      setDecryptPassword = _useState49[1];\n\n  var _useState50 = useState(false),\n      invalidVault = _useState50[0],\n      setInvalidVault = _useState50[1];\n\n  var _useState51 = useState(false),\n      hasCheckedNft = _useState51[0],\n      setHasCheckedNft = _useState51[1];\n\n  var _useState52 = useState(false),\n      accepting = _useState52[0],\n      setAccepting = _useState52[1];\n\n  var _useState53 = useState(false),\n      approving = _useState53[0],\n      setApproving = _useState53[1];\n\n  var _useState54 = useState(false),\n      acceptable = _useState54[0],\n      setAcceptable = _useState54[1];\n\n  var _useState55 = useState(''),\n      transferPassword = _useState55[0],\n      setTransferPassword = _useState55[1];\n\n  var _useState56 = useState(false),\n      showTransferPassword = _useState56[0],\n      setShowTransferPassword = _useState56[1];\n\n  var _useState57 = useState(false),\n      preTransfering = _useState57[0],\n      setPreTransfering = _useState57[1];\n\n  var _useState58 = useState(null),\n      transferToAddress = _useState58[0],\n      setTransferToAddress = _useState58[1];\n\n  var _useState59 = useState(false),\n      transfering = _useState59[0],\n      setTransfering = _useState59[1];\n\n  var _useState60 = useState(null),\n      owner = _useState60[0],\n      setOwner = _useState60[1]; // const [torus, setTorus] = useState(initTorus())\n\n\n  var _useState61 = useState(false),\n      live = _useState61[0],\n      setLive = _useState61[1];\n\n  var _useState62 = useState(null),\n      nonce = _useState62[0],\n      setNonce = _useState62[1];\n\n  var _useState63 = useState(null),\n      mintSignature = _useState63[0],\n      setMintSignature = _useState63[1];\n\n  var _useState64 = useState(null),\n      to = _useState64[0],\n      setTo = _useState64[1];\n\n  var _useState65 = useState(false),\n      showVerifyingSignature = _useState65[0],\n      setShowVerifyingSignature = _useState65[1];\n\n  var _useState66 = useState(false),\n      showMakingVaultMsg = _useState66[0],\n      setShowMakingVaultMsg = _useState66[1];\n\n  var _useState67 = useState(false),\n      minting = _useState67[0],\n      setMinting = _useState67[1];\n\n  var _useState68 = useState(false),\n      isCrowdSale = _useState68[0],\n      setIsCrowdSale = _useState68[1];\n\n  var _useState69 = useState(null),\n      alternateContractAddress = _useState69[0],\n      setAlternateContractAddress = _useState69[1];\n\n  var _useState70 = useState({\n    name: '',\n    image: '',\n    metadata: ''\n  }),\n      targetAsset = _useState70[0],\n      setTargetAsset = _useState70[1];\n\n  var _useState71 = useState({\n    name: '',\n    chain: '',\n    4: '',\n    1: '',\n    tokenId: {},\n    serialNumber: {\n      'hex': ''\n    }\n  }),\n      targetContract = _useState71[0],\n      setTargetContract = _useState71[1];\n\n  var _useState72 = useState(false),\n      canCuratedMint = _useState72[0],\n      setCanCuratedMint = _useState72[1];\n\n  var _useState73 = useState(false),\n      mintLockedForever = _useState73[0],\n      setMintLockedForever = _useState73[1];\n\n  var _useState74 = useState({}),\n      rawMetadata = _useState74[0],\n      setRawMetadata = _useState74[1];\n\n  var _useState75 = useState({}),\n      curatedMintingParameters = _useState75[0],\n      setCuratedMintingParameters = _useState75[1];\n\n  var handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  var vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  var covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true);\n\n  var _useDisclosure = useDisclosure(),\n      isOpenAddrModal = _useDisclosure.isOpen,\n      onOpenAddrModal = _useDisclosure.onOpen,\n      onCloseAddrModal = _useDisclosure.onClose;\n\n  var _useDisclosure2 = useDisclosure(),\n      isOpenKeysModal = _useDisclosure2.isOpen,\n      onOpenKeysModal = _useDisclosure2.onOpen,\n      onCloseKeysModal = _useDisclosure2.onClose;\n\n  var _useDisclosure3 = useDisclosure(),\n      isOpenOfferModal = _useDisclosure3.isOpen,\n      onOpenOfferModal = _useDisclosure3.onOpen,\n      onCloseOfferModal = _useDisclosure3.onClose;\n\n  var _useDisclosure4 = useDisclosure(),\n      isOpen = _useDisclosure4.isOpen,\n      onToggle = _useDisclosure4.onToggle;\n\n  var _useDisclosure5 = useDisclosure(),\n      isManageAddressOpen = _useDisclosure5.isOpen,\n      onManageAddressToggle = _useDisclosure5.onToggle;\n\n  var _useDisclosure6 = useDisclosure(),\n      isAdvancedOpen = _useDisclosure6.isOpen,\n      onAdvancedToggle = _useDisclosure6.onToggle;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var getVaultContract = function getVaultContract() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked());\n  };\n\n  var getCuratedContract = function getCuratedContract() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return new Contract(address, contractAddresses.erc1155Abi, library.getSigner(account).connectUnchecked());\n  };\n\n  var checkLiveliness = function checkLiveliness(tokenId, targetContract, cb) {\n    console.log(\"check liveliness next\", targetContract);\n    var endpoint = targetContract && targetContract.name ? EMBLEM_API + API_VERSION + '/liveliness-curated' : EMBLEM_API + '/liveliness';\n    fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        tokenId: tokenId\n      })\n    }).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context.sent;\n                setLive(data.live);\n                console.log(\"Liveliness check\", data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    return cb(false);\n  };\n\n  var deleteVault = function deleteVault() {\n    library.getSigner(account).signMessage('Delete: ' + tokenId).then(function (signature) {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + API_VERSION + '/delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {\n          var data;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return response.json();\n\n                case 2:\n                  data = _context2.sent;\n                  location.href = location.href.split(\"/\")[0] + \"/vaults\";\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    });\n  };\n\n  var lazyMintCurated = function lazyMintCurated() {\n    library.getSigner(account).signMessage('Curated Minting: ' + tokenId).then(function (signature) {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + API_VERSION + '/mint-curated', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response) {\n          var data;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return response.json();\n\n                case 2:\n                  data = _context3.sent;\n                  console.log(\"WTFFFFF\");\n                  console.log(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1);\n                  setCuratedMintingParameters(data);\n                  vaultHandlerContract.buyWithSignedPrice(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1).then(function (_ref4) {\n                    var hash = _ref4.hash;\n                    setTimeout(function () {\n                      setHash(hash);\n                      setShowMakingVaultMsg(true);\n                      setMinting(true);\n                    }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n                  })[\"catch\"](function (error) {\n                    console.log('ERROR', error);\n                    setShowMakingVaultMsg(false);\n                    setMinting(false);\n                  });\n\n                case 7:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    });\n  };\n\n  var getAllBalances = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(values, tokenId, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return fetch(EMBLEM_API + '/vault/balance/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context4.sent;\n              _context4.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context4.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context4.next = 11;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", cb(jsonData.balances));\n\n            case 11:\n              return _context4.abrupt(\"return\", cb(values));\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function getAllBalances(_x4, _x5, _x6) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var handleApproveForall = function handleApproveForall() {\n    setApproving(true);\n\n    if (targetContract.name) {\n      emblemContract = getCuratedContract(targetContract[chainId]);\n      emblemContract.setApprovalForAll(contractAddresses.vaultHandlerV8[chainId], true).then(function (_ref6) {\n        var hash = _ref6.hash;\n        setTimeout(function () {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })[\"catch\"](function (error) {\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(\"tx failed.\", error);\n        } else {\n          setApproving(false);\n        }\n      });\n    } else {\n      emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(function (_ref7) {\n        var hash = _ref7.hash;\n        setTimeout(function () {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })[\"catch\"](function (error) {\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(\"tx failed.\", error);\n        } else {\n          setApproving(false);\n        }\n      });\n    }\n  };\n\n  var getVault = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              console.log('getvault');\n              _context5.next = 3;\n              return fetch(EMBLEM_API + API_VERSION + '/meta/' + tokenId + '?experimental=true', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 3:\n              responce = _context5.sent;\n              _context5.next = 6;\n              return responce.json();\n\n            case 6:\n              jsonData = _context5.sent;\n              setRawMetadata(jsonData);\n\n              if (jsonData.collectionAddress) {\n                setIsCrowdSale(true);\n                setAlternateContractAddress(jsonData.collectionAddress);\n              }\n\n              if (!jsonData.name) {\n                setState({\n                  loaded: true\n                });\n                setInvalidVault(true);\n              } else {\n                console.log(\"--------------- states -\", jsonData);\n                setStates(jsonData);\n                setLoadingApi(false);\n                setInvalidVault(false);\n              }\n\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function getVault() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var setStates = function setStates(jsonData) {\n    if (!jsonData.targetAsset) {\n      location.href = location.origin + '/nft?id=' + tokenId;\n    }\n\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\" + framed : null;\n\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2); // console.log(\"ciphertextV2\", jsonData.ciphertextV2)\n    }\n\n    setMintLockedForever(jsonData.mintLocked && jsonData.mintLockBlock == 0);\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setOwnedImage(jsonData.ownedImage || null);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)) : null;\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(function (item) {\n      return item.trait_type === \"key\";\n    })) : null;\n    jsonData.attributes ? setAttributes(jsonData.attributes) : null;\n    setVaultAddresses(jsonData.addresses);\n    setVaultIPFS(jsonData.ipfs || null);\n    setVaultImageIPFS(jsonData.image_ipfs || null);\n    jsonData.targetContract && jsonData.targetContract.tokenId == tokenId ? setIsCuratedMaster(true) : null;\n    jsonData.targetAsset ? setTargetAsset(jsonData.targetAsset) : null;\n    jsonData.targetContract ? setTargetContract(jsonData.targetContract) : null;\n    jsonData.values && jsonData.targetAsset && jsonData.values.filter(function (item) {\n      return item.coin.toLowerCase() == jsonData.targetContract.chain && item.name == jsonData.targetAsset.name && item.project == jsonData.targetContract.name;\n    }).length > 0 ? setCanCuratedMint(true) : null;\n    setLive(jsonData.live == false ? false : true);\n    setNonce(jsonData.nonce);\n    setMintSignature(jsonData.signature);\n    setTo(jsonData.to);\n    setVaultChain(jsonData.network);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"goerli\" ? 5 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : jsonData.network == \"xdai\" ? 100 : jsonData.network == \"bsc\" ? 56 : jsonData.network == \"fantom\" ? 250 : jsonData.network == \"bitcoin\" ? 0 : jsonData.network == \"aurora\" ? 1313161554 : 97);\n\n    if (!jsonData.live) {\n      console.log(\"check liveliness start\");\n      checkLiveliness(tokenId, jsonData.targetContract, function (isLive) {\n        setLive(isLive);\n      });\n    }\n\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    }\n\n    setState({\n      loaded: true\n    });\n    var isPvt = jsonData.addresses.filter(function (item) {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n\n    if (jsonData.sealed) {\n      setSealed(true);\n    } else {\n      setSealed(false);\n    }\n  };\n\n  var getAllBalancesLive = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(values, tokenId, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!loadedValues) {\n                _context6.next = 2;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", cb(false));\n\n            case 2:\n              setLoadedValues(true);\n              _context6.next = 5;\n              return fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 5:\n              responce = _context6.sent;\n              _context6.next = 8;\n              return responce.json();\n\n            case 8:\n              jsonData = _context6.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context6.next = 14;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 14:\n              return _context6.abrupt(\"return\", cb(values));\n\n            case 15:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function getAllBalancesLive(_x7, _x8, _x9) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalancesByAddress = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(values, ethAddress, btcAddress, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context7.sent;\n              _context7.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context7.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context7.next = 11;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 11:\n              return _context7.abrupt(\"return\", cb(values));\n\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function getAllBalancesByAddress(_x10, _x11, _x12, _x13) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n\n  var savePasswordToLocalStorage = function savePasswordToLocalStorage() {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  var loadPasswordFromLocalStorage = function loadPasswordFromLocalStorage() {\n    var storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  };\n\n  var getSignedJWT = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainid', chainId.toString());\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature,\n                tokenId: tokenId\n              });\n              _context8.next = 6;\n              return fetch(SIG_API + '/sign', {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 6:\n              responce = _context8.sent;\n              _context8.next = 9;\n              return responce.json();\n\n            case 9:\n              jsonData = _context8.sent;\n              return _context8.abrupt(\"return\", cb(jsonData));\n\n            case 11:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function getSignedJWT(_x14, _x15, _x16) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  function getTorusKeys(_x17, _x18, _x19) {\n    return _getTorusKeys.apply(this, arguments);\n  }\n\n  function _getTorusKeys() {\n    _getTorusKeys = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(verifierId, idToken, cb) {\n      var fetchNodeDetails, torusUtils, _yield$fetchNodeDetai, torusNodeEndpoints, torusIndexes, _yield$torusUtils$ret, privKey;\n\n      return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              fetchNodeDetails = new FetchNodeDetails({\n                network: \"mainnet\"\n              });\n              torusUtils = new TorusUtils({\n                enableOneKey: true,\n                network: \"mainnet\"\n              });\n              _context23.next = 4;\n              return fetchNodeDetails.getNodeDetails({\n                verifier: 'tor-us-signer-vercel',\n                verifierId: verifierId\n              });\n\n            case 4:\n              _yield$fetchNodeDetai = _context23.sent;\n              torusNodeEndpoints = _yield$fetchNodeDetai.torusNodeEndpoints;\n              torusIndexes = _yield$fetchNodeDetai.torusIndexes;\n              _context23.next = 9;\n              return torusUtils.retrieveShares(torusNodeEndpoints, torusIndexes, 'tor-us-signer-vercel', {\n                verifier_id: verifierId\n              }, idToken);\n\n            case 9:\n              _yield$torusUtils$ret = _context23.sent;\n              privKey = _yield$torusUtils$ret.privKey;\n              return _context23.abrupt(\"return\", cb({\n                privateKey: privKey\n              }));\n\n            case 12:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee23);\n    }));\n    return _getTorusKeys.apply(this, arguments);\n  }\n\n  var decryptEmbed = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature\n              });\n              _context9.next = 7;\n              return fetch(EMBLEM_API + '/embed/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context9.sent;\n              _context9.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context9.sent;\n              return _context9.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function decryptEmbed(_x20, _x21, _x22) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      var _owner, finish, _finish;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _finish = function _finish3() {\n                _finish = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n                  var isApproved;\n                  return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n                    while (1) {\n                      switch (_context10.prev = _context10.next) {\n                        case 0:\n                          if (!targetContract[chainId]) {\n                            _context10.next = 7;\n                            break;\n                          }\n\n                          _context10.next = 3;\n                          return emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId]);\n\n                        case 3:\n                          isApproved = _context10.sent;\n                          setApproved(isApproved); // console.log(\"@@@@@@@@@@@@@------- checking approved end\", \"approved\", isApproved, \"acceptable\", acceptable, \"mine\", mine)\n                          // console.log(\"price\", price, \"decimals\", decimals, \"allowance\", allowance, \"balance\", balance, \"isCovalApproved\", isCovalApproved)\n\n                          _context10.next = 11;\n                          break;\n\n                        case 7:\n                          _context10.next = 9;\n                          return emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n\n                        case 9:\n                          isApproved = _context10.sent;\n                          setApproved(isApproved);\n\n                        case 11:\n                          setOwner(_owner);\n                          setMine(_owner === account || to === account && _owner === \"0x0000000000000000000000000000000000000000\");\n                          setMineUnMinted(to === account && _owner === \"0x0000000000000000000000000000000000000000\");\n                          loadPasswordFromLocalStorage();\n\n                        case 15:\n                        case \"end\":\n                          return _context10.stop();\n                      }\n                    }\n                  }, _callee10);\n                }));\n                return _finish.apply(this, arguments);\n              };\n\n              finish = function _finish2() {\n                return _finish.apply(this, arguments);\n              };\n\n              _context11.prev = 2;\n\n              if (!targetContract[chainId]) {\n                _context11.next = 27;\n                break;\n              }\n\n              emblemContract = getCuratedContract(targetContract[chainId]);\n              _context11.t0 = setDecimals;\n              _context11.next = 8;\n              return covalContract.decimals();\n\n            case 8:\n              _context11.t1 = _context11.sent;\n              (0, _context11.t0)(_context11.t1);\n              setPrice(250 * Math.pow(10, decimals));\n              _context11.t2 = setAllowance;\n              _context11.next = 14;\n              return covalContract.allowance(account, contractAddresses.vaultHandlerV8[chainId]).then(function (balance) {\n                return balance.toString();\n              });\n\n            case 14:\n              _context11.t3 = _context11.sent;\n              (0, _context11.t2)(_context11.t3);\n              _context11.t4 = setBalance;\n              _context11.next = 19;\n              return covalContract.balanceOf(account).then(function (balance) {\n                return balance.toString();\n              });\n\n            case 19:\n              _context11.t5 = _context11.sent;\n              (0, _context11.t4)(_context11.t5);\n\n              if (Number(allowance) >= Number(price)) {\n                setIsCovalApproved(true);\n              } else {\n                setIsCovalApproved(false);\n              }\n\n              _context11.next = 24;\n              return emblemContract.getOwnerOfSerial(targetContract.serialNumber);\n\n            case 24:\n              _owner = _context11.sent;\n              _context11.next = 30;\n              break;\n\n            case 27:\n              _context11.next = 29;\n              return emblemContract.ownerOf(tokenId);\n\n            case 29:\n              _owner = _context11.sent;\n\n            case 30:\n              finish();\n              _context11.next = 37;\n              break;\n\n            case 33:\n              _context11.prev = 33;\n              _context11.t6 = _context11[\"catch\"](2);\n              _owner = \"0x0000000000000000000000000000000000000000\";\n              finish();\n\n            case 37:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, null, [[2, 33]]);\n    }));\n\n    return function getContractStates() {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  var onRenew = /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(name) {\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              library.getSigner(account).signMessage('Renew: ' + tokenId).then(function (signature) {\n                var address = vaultAddresses.filter(function (address) {\n                  return address.coin == 'NMC';\n                })[0].address;\n                console.log('signature', signature, name);\n                fetch(EMBLEM_API + '/nmc/renew/' + address, {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    service: 'evmetadata',\n                    chainid: chainId.toString()\n                  },\n                  body: JSON.stringify({\n                    \"tokenId\": tokenId,\n                    \"signature\": signature,\n                    \"name\": name\n                  })\n                }).then( /*#__PURE__*/function () {\n                  var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(response) {\n                    var data;\n                    return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n                      while (1) {\n                        switch (_context12.prev = _context12.next) {\n                          case 0:\n                            _context12.next = 2;\n                            return response.json();\n\n                          case 2:\n                            data = _context12.sent;\n                            console.log(\"Requested Renew\", data);\n\n                          case 4:\n                          case \"end\":\n                            return _context12.stop();\n                        }\n                      }\n                    }, _callee12);\n                  }));\n\n                  return function (_x24) {\n                    return _ref15.apply(this, arguments);\n                  };\n                }());\n              });\n\n            case 1:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    return function onRenew(_x23) {\n      return _ref14.apply(this, arguments);\n    };\n  }();\n\n  var approveCovalFlow = function approveCovalFlow() {\n    setApproving(true);\n    var handlerToApprove = targetContract.name ? contractAddresses.vaultHandlerV8[chainId] : contractAddresses.vaultHandler[chainId];\n    covalContract.approve(handlerToApprove, '100000000000000').then(function (_ref16) {\n      var hash = _ref16.hash;\n      setHash(hash);\n    })[\"catch\"](function (error) {\n      if ((error === null || error === void 0 ? void 0 : error.code) == 4001) {\n        setApproving(false);\n      }\n    });\n  };\n\n  var handleSign = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n      var serialNumber;\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              if (targetContract[chainId]) {\n                emblemContract = getCuratedContract(targetContract[chainId]);\n                serialNumber = targetContract.serialNumber;\n              }\n\n              library.getSigner(account).signMessage('Claim: ' + (targetContract[chainId] ? serialNumber : tokenId)).then(function (signature) {\n                setState({\n                  loaded: false\n                });\n\n                if (mineUnMinted && status != \"claimed\" && !mintLockedForever) {\n                  setMintLockedForever(true);\n                }\n\n                getSignedJWT(signature, tokenId, function (token) {\n                  getTorusKeys(tokenId, token.token, function (keys) {\n                    var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey);\n                    var payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n                    setKeyValues(payload.values);\n                    setMnemonic(payload.phrase);\n                    vaultAddresses.forEach( /*#__PURE__*/function () {\n                      var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(address) {\n                        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n                          while (1) {\n                            switch (_context14.prev = _context14.next) {\n                              case 0:\n                                if (!(address.coin == 'STX')) {\n                                  _context14.next = 6;\n                                  break;\n                                }\n\n                                _context14.next = 3;\n                                return getSTXKey(address, payload.phrase);\n\n                              case 3:\n                                address.key = _context14.sent;\n                                _context14.next = 7;\n                                break;\n\n                              case 6:\n                                address.key = window.phrasePathToKey(payload.phrase, address.path);\n\n                              case 7:\n                                if (address.coin == 'BTC') setPrivKeyBTC(address.key);\n                                if (address.coin == 'ETH') setPrivKeyETH(address.key);\n\n                              case 9:\n                              case \"end\":\n                                return _context14.stop();\n                            }\n                          }\n                        }, _callee14);\n                      }));\n\n                      return function (_x25) {\n                        return _ref18.apply(this, arguments);\n                      };\n                    }());\n                    setState({\n                      loaded: true\n                    });\n                    onOpenKeysModal();\n                  });\n                }); // }\n              });\n\n            case 2:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15);\n    }));\n\n    return function handleSign() {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n\n  var getSTXKey = /*#__PURE__*/function () {\n    var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(address, phrase) {\n      var wallet, account;\n      return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return generateWallet({\n                secretKey: phrase,\n                password: ''\n              });\n\n            case 2:\n              wallet = _context16.sent;\n              console.log('------ stacks account -', wallet.accounts[0]);\n              account = wallet.accounts[0];\n              address.key = account.stxPrivateKey;\n              return _context16.abrupt(\"return\", address.key);\n\n            case 7:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16);\n    }));\n\n    return function getSTXKey(_x26, _x27) {\n      return _ref19.apply(this, arguments);\n    };\n  }();\n\n  var handleHideAsset = /*#__PURE__*/function () {\n    var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(coin) {\n      return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              library.getSigner(account).signMessage('HideAsset: ' + tokenId).then(function (signature) {\n                console.log(\"----------------------------------------------------------------\", signature);\n                console.log(coin.name, coin.coin, coin.address);\n                hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, function () {\n                  console.log(\"Done hiding coin and getting new balances\");\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17);\n    }));\n\n    return function handleHideAsset(_x28) {\n      return _ref20.apply(this, arguments);\n    };\n  }();\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/' + tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin ? coin : null,\n        \"address\": address ? address : null,\n        \"name\": name ? name : null,\n        \"signature\": signature ? signature : null\n      })\n    }).then( /*#__PURE__*/function () {\n      var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context18.sent;\n                console.log(\"-------\", data);\n                getAllBalances([], tokenId, function (values) {\n                  setVaultValues(values);\n                  return cb();\n                });\n\n              case 5:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18);\n      }));\n\n      return function (_x29) {\n        return _ref21.apply(this, arguments);\n      };\n    }());\n  }\n\n  var handleOwnedEmbed = /*#__PURE__*/function () {\n    var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n      return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              library.getSigner(account).signMessage('Embed: ' + tokenId).then(function (signature) {\n                decryptEmbed(signature, tokenId, function (result) {\n                  setVaultImage(result.ownedImage);\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19);\n    }));\n\n    return function handleOwnedEmbed() {\n      return _ref22.apply(this, arguments);\n    };\n  }();\n\n  var handleClaim = /*#__PURE__*/function () {\n    var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n      return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              if (targetContract[chainId]) {\n                // emblemContract = getCuratedContract(targetContract[chainId])\n                // let tokenId = await emblemContract.getTokenIdForSerialNumber(targetContract.serialNumber)\n                vaultHandlerContract.claim(targetContract[chainId], targetContract.tokenId).then(function (_ref24) {\n                  var hash = _ref24.hash;\n                  setClaiming(true);\n                  setTimeout(function () {\n                    setHash(hash);\n                  }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n                });\n              } else {\n                emblemContract.burn(tokenId).then(function (_ref25) {\n                  var hash = _ref25.hash;\n                  setClaiming(true);\n                  setTimeout(function () {\n                    setHash(hash);\n                  }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n                });\n              }\n\n            case 1:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20);\n    }));\n\n    return function handleClaim() {\n      return _ref23.apply(this, arguments);\n    };\n  }();\n\n  var pingClaimLogs = function pingClaimLogs(cb) {\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId=' + chainId.toString() + '_vercel_no_cache=1', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    }).then( /*#__PURE__*/function () {\n      var _ref26 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context21.sent;\n                console.log(\"Log check\", data);\n                return _context21.abrupt(\"return\", cb());\n\n              case 5:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21);\n      }));\n\n      return function (_x30) {\n        return _ref26.apply(this, arguments);\n      };\n    }());\n  };\n\n  var startDecryptEffect = /*#__PURE__*/function () {\n    var _ref27 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n      var theLetters, ctnt, speed, increment, clen, si, stri, block, fixed, nextFrame;\n      return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              nextFrame = function _nextFrame(pos) {\n                for (var i = 0; i < clen - stri; i++) {\n                  //Random number\n                  var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n                  var letter = theLetters.charAt(num);\n                  block = block + letter;\n                }\n\n                if (si == increment - 1) {\n                  stri++;\n                }\n\n                if (si == increment) {\n                  // Add a letter;\n                  // every speed*10 ms\n                  fixed = fixed + ctnt.charAt(stri - 1);\n                  si = 0;\n                } // $(\"#output\").html(fixed + block);\n\n\n                setDecryptedEffect(fixed + block);\n                block = '';\n              };\n\n              if (!decryptedEffectRunning) {\n                _context22.next = 3;\n                break;\n              }\n\n              return _context22.abrupt(\"return\");\n\n            case 3:\n              setDecryptedEffectRunning(true);\n              theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n              ctnt = 'Decrypting'; // Your text goes here\n\n              speed = 5; // ms per frame\n\n              increment = 8; // frames per step. Must be >2\n\n              clen = ctnt.length;\n              si = 0;\n              stri = 0;\n              block = '';\n              fixed = '';\n\n              (function rustle(i) {\n                setTimeout(function () {\n                  if (--i) {\n                    rustle(i);\n                  } else {\n                    setDecryptedEffectRunning(false);\n                  }\n\n                  nextFrame(i);\n                  si = si + 1;\n                }, speed);\n              })(clen * increment + 1);\n\n            case 14:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22);\n    }));\n\n    return function startDecryptEffect() {\n      return _ref27.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    console.log('----');\n    getVault();\n  }, []);\n  useEffect(function () {\n    account && chainId && vaultChainId && chainId == vaultChainId || query.noLayout && query.noLayout == 'true' || query.slideshowOnly && query.slideshowOnly == 'true' ? getContractStates() : null;\n  });\n\n  function splitDescription(words) {\n    var desc = words ? words.split('\\n\\n\\n\\n') : [\" \"];\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    console.log(vaultAddresses);\n    var ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      var ethAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'ETH';\n      })[0].address;\n      var btcAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'BTC';\n      })[0].address;\n      console.log(\"SUCCESS\", vaultAddresses);\n      getAllBalancesByAddress([], ethAddress, btcAddress, function (values) {\n        setVaultValues(values);\n      }); // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {\n      console.log('WTF', err);\n    }\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\");\n    return vaultAddresses;\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(function (item) {\n      if (item.address.includes('private')) {\n        var cipherText = item.address.replace('private:', '');\n        item.address = decrypt(cipherText, key);\n      }\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  function visitOpenSeaLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : vaultChainId == 5 ? 'testnets.' : '') + 'opensea.io/assets/' + (vaultChainId == 137 ? 'matic/' : vaultChainId == 5 ? 'goerli/' : '') + (alternateContractAddress ? alternateContractAddress : targetContract[chainId] ? targetContract[chainId] : contractAddresses.emblemVault[vaultChainId]) + '/' + (targetContract ? targetContract.tokenId : tokenId), '_blank');\n  }\n\n  function visitLooksRareLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : vaultChainId == 5 ? 'goerli.' : '') + 'looksrare.org/collections/' + (vaultChainId == 137 ? 'matic/' : '') + (alternateContractAddress ? alternateContractAddress : targetContract ? targetContract[chainId] : contractAddresses.emblemVault[vaultChainId]) + '/' + (targetContract ? targetContract.tokenId : tokenId), '_blank');\n  }\n\n  function visitArcadeLink() {\n    window.open(\"https://app.arcade.xyz/terms/asset/\".concat(targetContract[vaultChainId] ? targetContract[vaultChainId] : contractAddresses.emblemVault[vaultChainId], \"/\").concat(tokenId), '_blank');\n  }\n\n  {\n    alternateContractAddress ? emblemContract = getVaultContract(alternateContractAddress ? alternateContractAddress : null) : null;\n  }\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 884,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 885,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 886,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 887,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 888,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 889,\n      columnNumber: 9\n    }\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: \"\\n              // $(\\\".NFT\\\").tilt({    \\n              //     maxTilt: 3\\n              // });\\n              $(\\\".NFT\\\").trigger('mouseenter');\\n              $(\\\".NFT\\\").trigger('mouseclick'), '.NFT';\\n              if (localStorage.getItem(\\\"darkMode\\\") == 'false') {\\n                localStorage.setItem(\\\"darkMode\\\",\\\"true\\\"); location.href = location.href\\n              }\\n              \"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 890,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 905,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    privValues: privValues,\n    addresses: vaultAddresses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 907,\n      columnNumber: 7\n    }\n  }), showOffer ? __jsx(OfferModal, {\n    isOpen: isOpenOfferModal,\n    onClose: onCloseOfferModal,\n    tokenId: tokenId,\n    mine: mine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 917,\n      columnNumber: 9\n    }\n  }) : null, __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 926,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 927,\n      columnNumber: 9\n    }\n  }), loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 928,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault && !slideshowOnly ? __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 930,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    className: \"NFT\",\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 931,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"blue.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 942,\n      columnNumber: 17\n    }\n  }, \"Vault Network: \", CHAIN_ID_NAMES[vaultChainId]), __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\" // textTransform=\"uppercase\"\n    ,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 956,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null), __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 969,\n      columnNumber: 17\n    }\n  }, __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 970,\n      columnNumber: 19\n    }\n  }), mine && ownedImage ? __jsx(Button, {\n    onClick: function onClick() {\n      handleOwnedEmbed();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 972,\n      columnNumber: 21\n    }\n  }, \"(OWNED) Show Full Embed\") : null), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 975,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 976,\n      columnNumber: 19\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 977,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    fontSize: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 978,\n      columnNumber: 23\n    }\n  }, !isCuratedMaster && vaultChainId == chainId ? __jsx(Link, {\n    href: \"./vaults?address=\" + owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 980,\n      columnNumber: 25\n    }\n  }, \"Owner: \", owner) : null), __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 985,\n      columnNumber: 23\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 986,\n      columnNumber: 25\n    }\n  }))))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 992,\n      columnNumber: 17\n    }\n  }, !isCuratedMaster ? __jsx(Tabs, {\n    isFitted: true,\n    variant: \"enclosed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 994,\n      columnNumber: 21\n    }\n  }, __jsx(TabList, {\n    mb: \"1em\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 995,\n      columnNumber: 23\n    }\n  }, __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 996,\n      columnNumber: 25\n    }\n  }, \"Balances\"), __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 997,\n      columnNumber: 25\n    }\n  }, \"Attributes\")), __jsx(TabPanels, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 999,\n      columnNumber: 23\n    }\n  }, __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1000,\n      columnNumber: 25\n    }\n  }, vaultPrivacy ? __jsx(Box, {\n    mb: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1002,\n      columnNumber: 29\n    }\n  }, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1003,\n      columnNumber: 31\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: function onChange(e) {\n      return tryDecrypt(e.target.value);\n    },\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1006,\n      columnNumber: 31\n    }\n  })) : __jsx(Box, {\n    d: \"flex\",\n    backgroundColor: colorMode == \"light\" ? \"gray.100\" : \"gray.700\",\n    alignItems: \"baseline\",\n    className: \"coin-balance-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1014,\n      columnNumber: 29\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1015,\n      columnNumber: 31\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    mt: 2,\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1016,\n      columnNumber: 33\n    }\n  }, \"Current Contents:  \", __jsx(\"button\", {\n    onClick: function onClick() {\n      getAllBalancesLive([], tokenId, function (v) {\n        setLoadedValues(false);\n        setVaultValues(v);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1018,\n      columnNumber: 54\n    }\n  }, \" [Refresh Balances]\")), __jsx(Text, {\n    as: \"p\",\n    color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1027,\n      columnNumber: 33\n    }\n  }, \"$\", Number(vaultTotalValue.toFixed(4)).toLocaleString()), vaultValues.length ? vaultValues.map(function (coin) {\n    return __jsx(Stack, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1031,\n        columnNumber: 39\n      }\n    }, __jsx(CoinBalance, {\n      colorMode: colorMode,\n      coin: coin,\n      mine: status === 'claimed' && claimedBy === account || mine,\n      onRenew: onRenew,\n      hideAsset: targetAsset.name ? false : handleHideAsset,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032,\n        columnNumber: 41\n      }\n    }));\n  }) : __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1036,\n      columnNumber: 38\n    }\n  }), vaultDataValues.length ? vaultDataValues.map(function (data) {\n    return __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1040,\n        columnNumber: 39\n      }\n    }, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1044,\n      columnNumber: 35\n    }\n  }, \"Nothing in here! Fill 'er up!\") : null))), __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1050,\n      columnNumber: 25\n    }\n  }, __jsx(Attributes, {\n    colorMode: colorMode,\n    attributes: attributes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1051,\n      columnNumber: 27\n    }\n  })))) : null, !isCuratedMaster && !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1058,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1059,\n      columnNumber: 23\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1060,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1061,\n      columnNumber: 27\n    }\n  }, \"Deposit Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1062,\n      columnNumber: 27\n    }\n  }, vaultAddresses.map(function (addr) {\n    return __jsx(Button, {\n      className: \"address_nft_button\",\n      ml: 2,\n      mt: 2,\n      \"font-weight\": \"100 !important\",\n      key: addr.address,\n      onClick: function onClick() {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1065,\n        columnNumber: 33\n      }\n    }, addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP' : addr.coin);\n  }))))) : null, isCuratedMaster || !(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 137) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1089,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: mine && vaultChainId == 1 ? \"33%\" : vaultChainId == 137 ? \"100%\" : \"50%\",\n    m: 2.5,\n    mb: 5,\n    onClick: function onClick() {\n      visitOpenSeaLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1091,\n      columnNumber: 25\n    }\n  }, \"Opensea\"), vaultChainId == 1 ? __jsx(Button, {\n    className: \"nft_button\",\n    width: \"50%\",\n    m: 5,\n    onClick: function onClick() {\n      visitLooksRareLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1101,\n      columnNumber: 27\n    }\n  }, \"LooksRare\") : null, mine && vaultChainId == 1 ? __jsx(Button, {\n    className: \"nft_button\",\n    width: \"33%\",\n    m: 2.5,\n    mb: 5,\n    onClick: function onClick() {\n      visitArcadeLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1112,\n      columnNumber: 28\n    }\n  }, \"Arcade\") : null, showOffer ? __jsx(Button, {\n    className: \"\",\n    onClick: function onClick() {\n      onOpenOfferModal();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1124,\n      columnNumber: 27\n    }\n  }, mine ? 'My Offers' : 'Make an Offer', \" (NFT\\xB2NFT)\") : null) : null, !isCuratedMaster && mine && !acceptable && !approved ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1130,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    backgroundColor: \"#02b402\",\n    color: \"black !important\",\n    fontWeight: \"bold !important\",\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: function onClick() {\n      return handleApproveForall();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1131,\n      columnNumber: 23\n    }\n  }, \" Approve Claiming\"))) : null, !isCovalApproved && approved && !approving && to == account ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: approveCovalFlow,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1144,\n      columnNumber: 21\n    }\n  }, \"Approve Spending Coval\") : null, !isCuratedMaster && !live && !approving && isCovalApproved && to == account && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg ? __jsx(React.Fragment, null, targetContract.name ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: lazyMintCurated,\n    isDisabled: !canCuratedMint || mintLockedForever,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1152,\n      columnNumber: 27\n    }\n  }, mintLockedForever ? 'Mint Locked - keys accessed before mint' : !canCuratedMint ? 'Please load vault to mint' : ' Mint Vault', \" \") : null) : null, !isCuratedMaster && live && !(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed && approved ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1158,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      handleClaim();\n    },\n    isDisabled: claiming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1159,\n      columnNumber: 23\n    }\n  }, claiming ? 'Claiming ...' : 'Unlock Vault (Get Private Keys)')) : !isCuratedMaster && vaultChainId === chainId && (status == 'claimed' || mintLockedForever) && (claimedBy === account || mine) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1170,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1171,\n      columnNumber: 23\n    }\n  }, \"Get Keys\")) : null, __jsx(Stack, {\n    mt: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1178,\n      columnNumber: 17\n    }\n  }, __jsx(React.Fragment, null, __jsx(\"button\", {\n    className: \"nft_button\",\n    onClick: function onClick() {\n      onAdvancedToggle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1180,\n      columnNumber: 21\n    }\n  }, \"Advanced Operations\"), __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1181,\n      columnNumber: 21\n    }\n  }, __jsx(Collapse, {\n    width: \"100%\",\n    isOpen: isAdvancedOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1182,\n      columnNumber: 23\n    }\n  }, !isCuratedMaster && vaultChainId === chainId && ((status == 'claimed' || mintLockedForever) && claimedBy === account || mine) || mineUnMinted && status != \"claimed\" ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1185,\n      columnNumber: 27\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1186,\n      columnNumber: 29\n    }\n  }, mineUnMinted && status != \"claimed\" && !mintLockedForever ? 'Get Keys (Unlocking will prevent minting)' : 'Get Keys')) : null, mine ? __jsx(JsonDownloadLink, {\n    data: rawMetadata,\n    filename: \"EmblemVault-\".concat(tokenId, \".json\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1193,\n      columnNumber: 27\n    }\n  }) : null, (!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: deleteVault,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1197,\n      columnNumber: 27\n    }\n  }, \"Delete Vault \") : null)))), showVerifyingSignature ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1206,\n      columnNumber: 19\n    }\n  }, \"Verifying Signature ...\") : null, showMakingVaultMsg ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1211,\n      columnNumber: 19\n    }\n  }, \"Minting Vault ...\") : null), !isCuratedMaster && vaultIPFS ? // <Stack>\n  __jsx(HStack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1218,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    target: \"new\",\n    mb: 2,\n    ml: 35,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1219,\n      columnNumber: 23\n    }\n  }, \"View Metadata on IPFS \"), vaultImageIPFS ? __jsx(Link, {\n    mb: 2,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultImageIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1221,\n      columnNumber: 25\n    }\n  }, \"View Image on IPFS \") : null) // </Stack>\n  : null, sealed ? __jsx(Box, {\n    d: \"flex\",\n    mb: 2,\n    ml: 35,\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1227,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1228,\n      columnNumber: 23\n    }\n  }, \"*This vault is sealed forever.\")) : null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1231,\n      columnNumber: 17\n    }\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1232,\n      columnNumber: 42\n    }\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1235,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1236,\n      columnNumber: 21\n    }\n  }), accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving ? \"Handling Approval Flow ...\" : transfering ? \"Transfering Vault ...\" : minting ? \"Minting Vault\" : \"Generating Gift Link ...\") : null)) : vaultValues.length > 0 && slideshowOnly ? __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1243,\n      columnNumber: 11\n    }\n  }, vaultValues.length && vaultValues.filter(function (item) {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultValues[0].image,\n    items: vaultValues.filter(function (value) {\n      return value.image !== vaultValues[0].image;\n    }).map(function (value) {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1245,\n      columnNumber: 17\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1247,\n      columnNumber: 17\n    }\n  })) : invalidVault ? __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1252,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1253,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1257,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1259,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      if (claiming && !accepting && !preTransfering) {\n        // alert(1)\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account); // pingClaimLogs(()=>{\n\n        location.href = location.origin + '/nft?id=' + tokenId; // })\n      } else if (preTransfering) {\n        // alert(2)\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        // alert(3)\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        // alert(4)\n        setApproving(false);\n        getVault();\n        setHash(null);\n      } else if (transfering) {\n        // alert(5)\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else if (minting || showMakingVaultMsg) {\n        // alert(5)\n        //checkLiveliness(tokenId, targetContract, (isLive)=>{\n        console.log('GOD SAKES REDIRECT');\n        setMinting(false);\n        setHash(null); // setLive(isLive)\n\n        setShowMakingVaultMsg(false);\n        location.href = location.origin + '/nft2?id=' + tokenId; //})\n      } else {\n        // alert(6)          \n        location.href = location.origin + '/nft2?id=' + tokenId;\n        console.log('--- minting', minting);\n        console.log('--- claiming', claiming);\n        console.log('--- accepting', accepting);\n        console.log('--- preTransfering', preTransfering);\n        console.log('--- approving', approving);\n        console.log(\"Unknown state\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1266,\n      columnNumber: 11\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1322,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(Nft2, \"Fqmps/7oWPXLt3XBWX8OqjS30DQ=\", false, function () {\n  return [useWeb3React, useRouter, useContract, useContract, useContract, useContract, useDisclosure, useDisclosure, useDisclosure, useDisclosure, useDisclosure, useDisclosure, useColorMode];\n});\n\n_c7 = Nft2;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"AddrModal$dynamic\");\n$RefreshReg$(_c2, \"AddrModal\");\n$RefreshReg$(_c3, \"KeysModal$dynamic\");\n$RefreshReg$(_c4, \"KeysModal\");\n$RefreshReg$(_c5, \"OfferModal$dynamic\");\n$RefreshReg$(_c6, \"OfferModal\");\n$RefreshReg$(_c7, \"Nft2\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft2.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","Link","Alert","AlertIcon","useDisclosure","Collapse","useColorMode","Tabs","TabList","Tab","TabPanel","TabPanels","HStack","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","Loader","dynamic","Contract","TransactionToast","EMBLEM_API","contractAddresses","SIG_API","useContract","CHAIN_ID_NAMES","CryptoJS","ReactMarkdown","gfm","Embed","NFTSlideshow","CoinBalance","Attributes","generateWallet","FetchNodeDetails","TorusUtils","JsonDownloadLink","API_VERSION","AddrModal","KeysModal","OfferModal","Nft2","account","chainId","library","query","isCuratedMaster","setIsCuratedMaster","decimals","setDecimals","allowance","setAllowance","balance","setBalance","price","setPrice","isCovalApproved","setIsCovalApproved","approved","setApproved","useOldMint","setUseOldMint","key","mintPassword","setMintPassword","offer","showOffer","setShowOffer","framed","setFramed","id","tokenId","setTokenId","experimental","setExperimental","noLayout","setNoLayout","slideshowOnly","setSlideshowOnly","vaultName","setVaultName","vaultIPFS","setVaultIPFS","vaultImageIPFS","setVaultImageIPFS","vaultCiphertextV2","setVaultCiphertextV2","vaultDesc","setVaultDesc","vaultImage","setVaultImage","ownedImage","setOwnedImage","vaultValues","setVaultValues","loadedValues","setLoadedValues","vaultDataValues","setVaultDataValues","attributes","setAttributes","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","vaultChain","setVaultChain","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","loaded","state","setState","mine","setMine","mineUnMinted","setMineUnMinted","claiming","setClaiming","status","setStatus","sealed","setSealed","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","privValues","setKeyValues","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","hasCheckedNft","setHasCheckedNft","accepting","setAccepting","approving","setApproving","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","preTransfering","setPreTransfering","transferToAddress","setTransferToAddress","transfering","setTransfering","owner","setOwner","live","setLive","nonce","setNonce","mintSignature","setMintSignature","to","setTo","showVerifyingSignature","setShowVerifyingSignature","showMakingVaultMsg","setShowMakingVaultMsg","minting","setMinting","isCrowdSale","setIsCrowdSale","alternateContractAddress","setAlternateContractAddress","name","image","metadata","targetAsset","setTargetAsset","chain","serialNumber","targetContract","setTargetContract","canCuratedMint","setCanCuratedMint","mintLockedForever","setMintLockedForever","rawMetadata","setRawMetadata","curatedMintingParameters","setCuratedMintingParameters","handlerContract","vaultHandler","vaultHandlerAbi","vaultHandlerContract","vaultHandlerV8","vaultHandlerV8Abi","emblemContract","emblemVault","emblemAbi","covalContract","coval","covalAbi","isOpenAddrModal","isOpen","onOpenAddrModal","onOpen","onCloseAddrModal","onClose","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","isOpenOfferModal","onOpenOfferModal","onCloseOfferModal","onToggle","isManageAddressOpen","onManageAddressToggle","isAdvancedOpen","onAdvancedToggle","colorMode","getVaultContract","address","getSigner","connectUnchecked","getCuratedContract","erc1155Abi","checkLiveliness","cb","console","log","endpoint","fetch","method","headers","service","chainid","toString","body","JSON","stringify","then","response","json","data","deleteVault","signMessage","signature","location","href","split","lazyMintCurated","_nftAddress","_payment","_price","_to","_tokenId","_nonce","_signature","buyWithSignedPrice","setTimeout","error","getAllBalances","values","responce","jsonData","balances","length","handleApproveForall","setApprovalForAll","code","getVault","collectionAddress","setStates","origin","includes","ciphertextV2","mintLocked","mintLockBlock","description","totalValue","concat","filter","item","trait_type","addresses","ipfs","image_ipfs","coin","toLowerCase","project","network","isLive","isPvt","getAllBalancesLive","getAllBalancesByAddress","ethAddress","btcAddress","savePasswordToLocalStorage","localStorage","setItem","loadPasswordFromLocalStorage","storedPw","getItem","getSignedJWT","myHeaders","Headers","append","raw","redirect","getTorusKeys","verifierId","idToken","fetchNodeDetails","torusUtils","enableOneKey","getNodeDetails","verifier","torusNodeEndpoints","torusIndexes","retrieveShares","verifier_id","privKey","privateKey","decryptEmbed","getContractStates","finish","isApprovedForAll","isApproved","_owner","Math","pow","balanceOf","Number","getOwnerOfSerial","ownerOf","onRenew","approveCovalFlow","handlerToApprove","approve","handleSign","token","keys","bytes","AES","decrypt","payload","parse","enc","Utf8","phrase","forEach","getSTXKey","window","phrasePathToKey","path","secretKey","password","wallet","accounts","stxPrivateKey","handleHideAsset","hideAsset","handleOwnedEmbed","result","handleClaim","claim","burn","pingClaimLogs","startDecryptEffect","nextFrame","pos","i","clen","stri","num","floor","theLetters","random","letter","charAt","block","si","increment","fixed","ctnt","speed","rustle","splitDescription","words","desc","trim","tryDecrypt","ciphertext","replace","decryptAddresses","err","getAddresses","cipherText","decryptedData","visitOpenSeaLink","open","visitLooksRareLink","visitArcadeLink","__html","toLocaleString","e","target","value","v","toFixed","map","attribute_key","addr","type","canSwipe"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n  Tooltip,\n  Collapse,\n  FormControl,\n  FormLabel,\n  useColorMode,\n  IconButton,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanel,\n  TabPanels\n} from '@chakra-ui/core'\n\nimport {HStack, VStack, Circle } from '@chakra-ui/react'\n// import TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { isETHAddress, validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses, SIG_API } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\nimport { CHAIN_ID_NAMES } from '../utils'\nimport CryptoJS from 'crypto-js'\nimport { addTokenToWallet, addMany } from '../public/web3'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport Embed from './Embed'\nimport NFTSlideshow from './embed/NFTSlideshow'\nimport CoinBalance from './partials/CoinBalance'\nimport { chakra } from '@chakra-ui/system'\nimport transakSDK from '@transak/transak-sdk'\nimport Attributes from './partials/Attributes';\nimport { getStxAddress, generateWallet } from '@stacks/wallet-sdk';\nimport FetchNodeDetails from \"@toruslabs/fetch-node-details\"\nimport TorusUtils from \"@toruslabs/torus.js\"\nimport JsonDownloadLink from './JsonDownloadLink'\n\nconst API_VERSION = '/v2'\n\ndeclare global {\n  interface Window { phraseToKey: any, phrasePathToKey: any }\n}\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\nconst OfferModal = dynamic(() => import('./OfferModal'))\n\nexport default function Nft2() {\n  \n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [isCuratedMaster, setIsCuratedMaster] = useState(false)\n  const [decimals, setDecimals] = useState(null)\n  const [allowance, setAllowance] = useState(null)\n  const [balance, setBalance] = useState(null)\n  const [price, setPrice] = useState(null)\n  const [isCovalApproved, setIsCovalApproved] = useState(false)\n  const [approved, setApproved] = useState(false)\n  const [useOldMint, setUseOldMint] = useState(query.useOldMint)\n  const [mintPassword, setMintPassword] = useState(query.key)\n  const [showOffer, setShowOffer] = useState(query.offer || false)\n  const [framed, setFramed] = useState(query.framed || true)\n  const [tokenId, setTokenId] = useState(query.id)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [noLayout, setNoLayout] = useState(query.noLayout)\n  const [slideshowOnly, setSlideshowOnly] = useState(query.slideshowOnly || false)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultIPFS, setVaultIPFS] = useState('')\n  const [vaultImageIPFS, setVaultImageIPFS] = useState('')\n  const [vaultCiphertextV2, setVaultCiphertextV2] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [ownedImage, setOwnedImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [loadedValues, setLoadedValues] = useState(false)\n  const [vaultDataValues, setVaultDataValues] = useState([])\n  const [attributes, setAttributes] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [vaultChain, setVaultChain] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [mineUnMinted, setMineUnMinted] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [sealed, setSealed] = useState(false)\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [privValues, setKeyValues] = useState([])\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [hasCheckedNft, setHasCheckedNft] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n  const [preTransfering, setPreTransfering] = useState(false)\n  const [transferToAddress, setTransferToAddress] = useState(null)\n  const [transfering, setTransfering] = useState(false)\n  const [owner, setOwner] = useState(null)\n  // const [torus, setTorus] = useState(initTorus())\n  const [live, setLive] = useState(false)\n  const [nonce, setNonce] = useState(null)\n  const [mintSignature, setMintSignature] = useState(null)\n  const [to, setTo] = useState(null)\n  const [showVerifyingSignature, setShowVerifyingSignature] = useState(false)\n  const [showMakingVaultMsg, setShowMakingVaultMsg] = useState(false)\n  const [minting, setMinting] = useState(false)\n  const [isCrowdSale, setIsCrowdSale] = useState(false)\n  const [alternateContractAddress, setAlternateContractAddress] = useState(null)\n  const [targetAsset, setTargetAsset] = useState({name: '', image: '', metadata: ''})\n  const [targetContract, setTargetContract] = useState({name: '', chain: '', 4: '', 1: '', tokenId: {}, serialNumber: {'hex':''} })\n  const [canCuratedMint, setCanCuratedMint] = useState(false)\n  const [mintLockedForever, setMintLockedForever] = useState(false)\n  const [rawMetadata, setRawMetadata] = useState({})\n\n  const [curatedMintingParameters, setCuratedMintingParameters] = useState({})\n  \n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n  let emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n  let covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true)\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n  const { isOpen: isOpenOfferModal, onOpen: onOpenOfferModal, onClose: onCloseOfferModal } = useDisclosure()\n  const { isOpen, onToggle } = useDisclosure()\n  const { isOpen: isManageAddressOpen, onToggle: onManageAddressToggle } = useDisclosure()\n  const { isOpen: isAdvancedOpen, onToggle: onAdvancedToggle } = useDisclosure()\n\n  const { colorMode } = useColorMode()\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  const getVaultContract = (address = null) =>{\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  const getCuratedContract = (address = null) =>{\n    return new Contract(address, contractAddresses.erc1155Abi, library.getSigner(account).connectUnchecked())\n  }\n\n  const checkLiveliness = (tokenId, targetContract, cb)=>{\n    console.log(\"check liveliness next\", targetContract )\n    let endpoint = targetContract && targetContract.name ? EMBLEM_API + API_VERSION + '/liveliness-curated' : EMBLEM_API + '/liveliness'\n    fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({tokenId: tokenId}),\n    }).then(async function (response) {\n      let data = await response.json()\n      setLive(data.live)\n      console.log(\"Liveliness check\", data)\n    })\n    return cb(false)\n  }\n\n  const deleteVault = () =>{\n    library.getSigner(account)\n      .signMessage('Delete: ' + tokenId)\n      .then((signature) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_API + API_VERSION + '/delete', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata'\n          },\n          body: JSON.stringify({tokenId: tokenId, signature: signature, chainId: chainId.toString()}),\n        }).then(async function (response){\n          let data = await response.json()\n          location.href = location.href.split(\"/\")[0] + \"/vaults\"\n        })\n      })\n  }\n\n  const lazyMintCurated = () =>{\n    library.getSigner(account)\n      .signMessage('Curated Minting: ' + tokenId)\n      .then((signature) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_API + API_VERSION + '/mint-curated', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata'\n          },\n          body: JSON.stringify({tokenId: tokenId, signature: signature, chainId: chainId.toString()}),\n        }).then(async function (response){\n          let data = await response.json()\n          console.log(\"WTFFFFF\")\n          console.log(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1)\n          setCuratedMintingParameters(data)\n          ;(vaultHandlerContract as Contract)\n            .buyWithSignedPrice(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1)\n            .then(({ hash }: { hash: string }) => {\n              setTimeout(() => {\n                setHash(hash)\n                setShowMakingVaultMsg(true)\n                setMinting(true)\n              }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n            })\n            .catch((error: ErrorWithCode) => {\n              console.log('ERROR', error)\n                setShowMakingVaultMsg(false)\n                setMinting(false)\n            })\n          \n        })\n      })\n  }\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {\n      return cb(jsonData.balances)\n    } else {\n      return cb(values)\n    }\n  }\n\n  const handleApproveForall = () => {\n    setApproving(true)\n    if (targetContract.name) {\n      emblemContract = getCuratedContract(targetContract[chainId])\n      emblemContract.setApprovalForAll(contractAddresses.vaultHandlerV8[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n        }\n      })\n    } else {\n      (emblemContract as Contract)\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n        }\n      })\n    }\n  }\n\n  const getVault = async () => {\n    console.log('getvault')\n    const responce = await fetch(EMBLEM_API + API_VERSION + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    setRawMetadata(jsonData)\n    if (jsonData.collectionAddress){\n      setIsCrowdSale(true)\n      setAlternateContractAddress(jsonData.collectionAddress)\n    }\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      console.log(\"--------------- states -\", jsonData)\n      setStates(jsonData)\n      setLoadingApi(false)\n      setInvalidVault(false)\n    }\n  }\n\n  const setStates = (jsonData) => {\n    if (!jsonData.targetAsset) {\n      location.href = location.origin + '/nft?id=' + tokenId\n    }\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\"+framed : null\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2)\n      // console.log(\"ciphertextV2\", jsonData.ciphertextV2)\n    }\n    setMintLockedForever(jsonData.mintLocked && jsonData.mintLockBlock == 0)\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setOwnedImage(jsonData.ownedImage || null)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)): null\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(item=>{return item.trait_type === \"key\"})): null\n    jsonData.attributes ? setAttributes(jsonData.attributes): null\n    setVaultAddresses(jsonData.addresses)\n    setVaultIPFS(jsonData.ipfs || null)\n    setVaultImageIPFS(jsonData.image_ipfs || null)\n    jsonData.targetContract && jsonData.targetContract.tokenId == tokenId? setIsCuratedMaster(true): null\n    jsonData.targetAsset? setTargetAsset(jsonData.targetAsset) : null\n    jsonData.targetContract? setTargetContract(jsonData.targetContract) : null\n    jsonData.values && jsonData.targetAsset && jsonData.values.filter(item=>{\n      return item.coin.toLowerCase() == jsonData.targetContract.chain && \n      item.name == jsonData.targetAsset.name && \n      item.project == jsonData.targetContract.name\n    }).length > 0 ? setCanCuratedMint(true): null\n \n    setLive(jsonData.live == false ? false : true)\n    \n    setNonce(jsonData.nonce)\n    setMintSignature(jsonData.signature)\n    setTo(jsonData.to)\n    setVaultChain(jsonData.network)\n    setVaultChainId(\n      jsonData.network == 'mainnet' ? 1 : \n      jsonData.network == \"rinkeby\" ? 4 : \n      jsonData.network == \"goerli\" ? 5 : \n      jsonData.network == \"mumbai\" ? 80001 : \n      jsonData.network == \"matic\" ? 137 : \n      jsonData.network == \"xdai\" ? 100 : \n      jsonData.network == \"bsc\" ? 56 : \n      jsonData.network == \"fantom\" ? 250 : \n      jsonData.network == \"bitcoin\" ? 0 : \n      jsonData.network == \"aurora\" ? 1313161554 : \n      97\n    )\n    if (!jsonData.live) {\n      console.log(\"check liveliness start\")\n      checkLiveliness(tokenId, jsonData.targetContract, (isLive)=>{\n        setLive(isLive)\n      })\n    }\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    \n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)    \n    if (jsonData.sealed) {\n      setSealed(true)\n    } else {\n      setSealed(false)\n    }\n  }\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    if (loadedValues) {\n      return cb(false)\n    }\n    setLoadedValues(true)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true' , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword) // Save new state for later\n  }\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword')\n    storedPw && acceptable ? setMintPassword(storedPw) : null //setMintPassword(null)\n  }\n\n  const getSignedJWT = async (signature, tokenId, cb)=>{\n    var myHeaders = new Headers()\n    myHeaders.append('chainid', chainId.toString())\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, tokenId: tokenId })\n    const responce = await fetch(SIG_API+'/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  async function getTorusKeys( verifierId, idToken, cb) {\n    const fetchNodeDetails = new FetchNodeDetails({ network: \"mainnet\" });\n    const torusUtils = new TorusUtils({ enableOneKey: true, network: \"mainnet\" });\n\n    const { torusNodeEndpoints, torusIndexes } = await fetchNodeDetails.getNodeDetails({ verifier: 'tor-us-signer-vercel', verifierId });\n    const { privKey } = await torusUtils.retrieveShares(torusNodeEndpoints, torusIndexes, 'tor-us-signer-vercel', { verifier_id: verifierId }, idToken);\n    return cb({privateKey: privKey});\n  }\n\n  const decryptEmbed = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    \n    let _owner\n    try {\n      if (targetContract[chainId]) {\n        emblemContract = getCuratedContract(targetContract[chainId])\n        setDecimals(await covalContract.decimals())\n        setPrice(250 * Math.pow(10, decimals))\n        setAllowance(\n          await covalContract\n            .allowance(account, contractAddresses.vaultHandlerV8[chainId])\n            .then((balance: { toString: () => string }) => balance.toString())\n        )\n        setBalance(await covalContract.balanceOf(account).then((balance: { toString: () => string }) => balance.toString()))\n        \n        if (Number(allowance) >= Number(price)) {\n          setIsCovalApproved(true)\n        } else {\n          setIsCovalApproved(false)\n        }\n        _owner = await emblemContract.getOwnerOfSerial(targetContract.serialNumber)\n      } else {\n        _owner  = await emblemContract.ownerOf(tokenId)\n      }\n      finish()\n    } catch(err){\n      _owner = \"0x0000000000000000000000000000000000000000\"\n      finish()\n    }\n\n    async function finish(){\n      let isApproved\n      if (targetContract[chainId]) {\n        // console.log(\"@@@@@@@@@@@@@------- checking approved start\", \"me\", account, \"v8\", contractAddresses.vaultHandlerV8[chainId])\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId])\n        setApproved(isApproved)\n        // console.log(\"@@@@@@@@@@@@@------- checking approved end\", \"approved\", isApproved, \"acceptable\", acceptable, \"mine\", mine)\n        // console.log(\"price\", price, \"decimals\", decimals, \"allowance\", allowance, \"balance\", balance, \"isCovalApproved\", isCovalApproved)\n      } else {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId])\n        setApproved(isApproved)\n      }\n      setOwner(_owner)\n      setMine(_owner === account || (to === account && _owner === \"0x0000000000000000000000000000000000000000\"))\n      setMineUnMinted(to === account && _owner === \"0x0000000000000000000000000000000000000000\")\n      loadPasswordFromLocalStorage()\n    }\n    \n  }\n\n  const onRenew = async (name) => { \n    library\n      .getSigner(account)\n      .signMessage('Renew: ' + tokenId)\n      .then((signature) => {\n        let address = vaultAddresses.filter(address=>{ return address.coin == 'NMC'})[0].address\n        console.log('signature', signature, name)\n        fetch(EMBLEM_API + '/nmc/renew/' + address, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata',\n            chainid: chainId.toString()\n          },\n          body: JSON.stringify({\n                \"tokenId\": tokenId,\n                \"signature\": signature,\n                \"name\": name\n              })\n        }).then(async function (response) {\n          let data = await response.json()\n          console.log(\"Requested Renew\", data)\n          \n        })\n      })\n  }\n\n  const approveCovalFlow = () => {\n    setApproving(true)\n    let handlerToApprove = targetContract.name? contractAddresses.vaultHandlerV8[chainId]: contractAddresses.vaultHandler[chainId]\n    ;(covalContract as Contract)\n      .approve(handlerToApprove, '100000000000000')\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code == 4001) {\n          setApproving(false)\n        }\n      })\n  }\n  \n  const handleSign = async () => {\n    let serialNumber\n    if (targetContract[chainId]) {      \n      emblemContract = getCuratedContract(targetContract[chainId])\n      serialNumber = targetContract.serialNumber\n      \n    }\n\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + (targetContract[chainId]? serialNumber: tokenId))\n      .then((signature) => {\n        setState({loaded: false})\n        if (mineUnMinted && status != \"claimed\" && !mintLockedForever) {\n          setMintLockedForever(true)\n        }\n        getSignedJWT(signature, tokenId, (token)=>{\n          getTorusKeys(tokenId, token.token, (keys)=>{\n            var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey)\n            let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)) \n            setKeyValues(payload.values)\n            setMnemonic(payload.phrase)\n            vaultAddresses.forEach(async address=>{\n              if (address.coin == 'STX') {\n                address.key = await getSTXKey(address, payload.phrase)\n              } else {\n                address.key = window.phrasePathToKey(payload.phrase, address.path)\n              }\n              if (address.coin == 'BTC') setPrivKeyBTC(address.key)\n              if (address.coin == 'ETH') setPrivKeyETH(address.key)\n            })\n            setState({loaded: true})\n            onOpenKeysModal()\n          })          \n        })\n      // }\n    })\n  }\n\n  const getSTXKey = async (address: any, phrase: string)=>{\n    const wallet: any = await generateWallet({\n      secretKey: phrase,\n      password: '',\n    })\n    console.log('------ stacks account -', wallet.accounts[0])\n    const account = wallet.accounts[0];\n    address.key = account.stxPrivateKey\n    return address.key\n  }\n\n  const handleHideAsset = async (coin) => {\n    library\n      .getSigner(account)\n      .signMessage('HideAsset: ' + tokenId)\n      .then((signature) => {\n\n        console.log(\"----------------------------------------------------------------\", signature)\n        console.log(coin.name, coin.coin, coin.address)\n        hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, ()=>{\n          console.log(\"Done hiding coin and getting new balances\")\n        })\n      })\n  }\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/'+tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin? coin: null,\n        \"address\": address? address: null,\n        \"name\": name? name: null,\n        \"signature\": signature? signature: null\n      })\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"-------\", data)\n      getAllBalances([], tokenId, (values)=>{\n        setVaultValues(values)\n        return cb()\n      })\n    }) \n  }\n\n  const handleOwnedEmbed = async () => {\n    library\n      .getSigner(account)\n      .signMessage('Embed: ' + tokenId)\n      .then((signature) => {\n        decryptEmbed(signature, tokenId, (result) => {\n          setVaultImage(result.ownedImage)\n        })        \n      })\n  }\n\n  const handleClaim = async () => {\n    if (targetContract[chainId]) {\n      // emblemContract = getCuratedContract(targetContract[chainId])\n      // let tokenId = await emblemContract.getTokenIdForSerialNumber(targetContract.serialNumber)\n      vaultHandlerContract.claim(targetContract[chainId], targetContract.tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    } else {\n      emblemContract.burn(tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    }\n  }\n\n  const pingClaimLogs = (cb)=>{\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId='+chainId.toString()+'_vercel_no_cache=1', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"Log check\", data)\n      return cb()\n    })    \n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random())\n        //Get random letter\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      // $(\"#output\").html(fixed + block);\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    console.log('----')\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    (account && chainId && vaultChainId && chainId == vaultChainId) || ((query.noLayout && query.noLayout == 'true') || (query.slideshowOnly && query.slideshowOnly == 'true')) ? getContractStates() : null\n  })\n\n  function splitDescription(words) {\n    var desc = words? words.split('\\n\\n\\n\\n'): [\" \"]\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    console.log(vaultAddresses)\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      let ethAddress = vaultAddresses.filter((item) => {return item.coin === 'ETH'})[0].address\n      let btcAddress = vaultAddresses.filter((item) => {return item.coin === 'BTC'})[0].address\n      console.log(\"SUCCESS\", vaultAddresses)\n      getAllBalancesByAddress([], ethAddress, btcAddress, (values)=>{\n        setVaultValues(values)\n      })\n      // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {console.log('WTF', err)}\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\")\n    return vaultAddresses\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach((item) => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '')\n        item.address = decrypt(cipherText, key)\n      }      \n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  function visitOpenSeaLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : vaultChainId == 5 ? 'testnets.': '') +\n      'opensea.io/assets/' + \n      (vaultChainId == 137 ? 'matic/' : vaultChainId == 5 ? 'goerli/': '') +\n      (alternateContractAddress? alternateContractAddress : targetContract[chainId]? targetContract[chainId]: contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      (targetContract? targetContract.tokenId: tokenId)\n    , '_blank')\n  }\n\n  function visitLooksRareLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' :vaultChainId == 5 ? 'goerli.' : '') +\n      'looksrare.org/collections/' + \n      (vaultChainId == 137 ? 'matic/' : '') +\n      (alternateContractAddress? alternateContractAddress : targetContract? targetContract[chainId]: contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      (targetContract? targetContract.tokenId: tokenId) \n    , '_blank')\n  }\n\n  function visitArcadeLink() {\n    window.open(\n      `https://app.arcade.xyz/terms/asset/${targetContract[vaultChainId]? targetContract[vaultChainId]: contractAddresses.emblemVault[vaultChainId]}/${tokenId}` , '_blank')\n  }\n\n  { alternateContractAddress?\n    emblemContract = getVaultContract(alternateContractAddress? alternateContractAddress: null)\n  : null}\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n        <script\n            dangerouslySetInnerHTML={{\n              __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              if (localStorage.getItem(\"darkMode\") == 'false') {\n                localStorage.setItem(\"darkMode\",\"true\"); location.href = location.href\n              }\n              `,\n            }}\n          />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n        privValues={privValues}\n        addresses={vaultAddresses}\n      />\n      {showOffer ? (\n        <OfferModal\n          isOpen={isOpenOfferModal}\n          onClose={onCloseOfferModal}\n          tokenId={tokenId}\n          mine={mine}\n        />\n      ) : null}\n      \n\n      <Loader loaded={state.loaded}>\n        <Box height=\"40px\"></Box>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault && !slideshowOnly ? (\n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                className=\"NFT\" \n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"blue.500\"\n                >\n                  Vault Network: {CHAIN_ID_NAMES[vaultChainId]}\n                </Box>\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  // textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null}\n                </Box>\n                <Stack className=\"NFT-content\" align=\"center\">                  \n                  <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n                  {mine && ownedImage ? (\n                    <Button onClick={() => {handleOwnedEmbed()}}>(OWNED) Show Full Embed</Button>\n                  ): null}\n                </Stack>\n                <Stack align=\"center\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                    <Stack>\n                      <Text fontSize=\"xs\">\n                      { !isCuratedMaster && vaultChainId == chainId ? (\n                        <Link href={\"./vaults?address=\"+owner}>\n                          Owner: {owner}\n                        </Link>\n                      ) : null }\n                      </Text>\n                      <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" className=\"md\">\n                        <ReactMarkdown plugins={[gfm]} children={splitDescription(vaultDesc)} />\n                      </Text>\n                      \n                    </Stack>                    \n                  </Box>                    \n                </Stack>\n                <Box p=\"6\">\n                  {!isCuratedMaster? (\n                    <Tabs isFitted variant='enclosed'>\n                      <TabList mb='1em'>\n                        <Tab>Balances</Tab>\n                        <Tab>Attributes</Tab>\n                      </TabList>\n                      <TabPanels>\n                        <TabPanel>\n                          {vaultPrivacy ? (\n                            <Box mb={5}>\n                              <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                                {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                              </Text>\n                              <Input\n                                type=\"password\"\n                                id=\"vault-password\"\n                                onChange={(e) => tryDecrypt(e.target.value)}\n                                aria-describedby=\"password-helper-text\"\n                              />\n                            </Box>\n                          ) : (\n                            <Box d=\"flex\" backgroundColor={colorMode == \"light\"? \"gray.100\": \"gray.700\"} alignItems=\"baseline\" className=\"coin-balance-content\">\n                              <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                                <Text as=\"h4\" mt={2} fontWeight=\"semibold\">\n                                \n                                  Current Contents:  <button\n                                  onClick={() =>{\n                                    getAllBalancesLive([], tokenId, (v)=>{\n                                      setLoadedValues(false)\n                                      setVaultValues(v)\n                                    })\n                                  }}\n                                > [Refresh Balances]</button>\n                                </Text>\n                                <Text as=\"p\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"}>${Number(vaultTotalValue.toFixed(4)).toLocaleString()}</Text>\n                                { vaultValues.length ? (\n                                  vaultValues.map((coin) => {\n                                    return (  \n                                      <Stack> \n                                        <CoinBalance colorMode={colorMode} coin={coin} mine={(status === 'claimed' && claimedBy === account) || mine} onRenew={onRenew} hideAsset={targetAsset.name? false: handleHideAsset}/>\n                                      </Stack>\n                                    )\n                                  })\n                                ) : (<Refreshing /> ) } \n                                { vaultDataValues.length ? (\n                                  vaultDataValues.map((data) => {\n                                    return (\n                                      <Text>Data: {data.attribute_key}</Text>\n                                    )                        \n                                  })\n                                ) : !vaultDataValues.length && !vaultValues.length ? (\n                                  <Text>Nothing in here! Fill 'er up!</Text>\n                                ) : null}\n                              </Box>\n                            </Box>\n                          )}\n                      </TabPanel>\n                        <TabPanel>\n                          <Attributes colorMode={colorMode} attributes={attributes}/>\n                          </TabPanel>\n                        </TabPanels>\n                    </Tabs>\n                  ) : null}                  \n                  \n                  {!isCuratedMaster && !vaultPrivacy ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <ButtonGroup justifyContent=\"space-between\" spacing={6}>\n                        <Stack>\n                          <Text>Deposit Addresses</Text>\n                          <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                            {vaultAddresses.map((addr) => {\n                              return (\n                                <Button\n                                  className=\"address_nft_button\"\n                                  \n                                  ml={2}\n                                  mt={2}\n                                  font-weight=\"100 !important\"\n                                  key={addr.address}\n                                  onClick={() => {\n                                    setCurrCoin(addr.coin)\n                                    setCurrAddr(addr.address)\n                                    onOpenAddrModal()\n                                  }}\n                                >\n                                  {addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP': addr.coin}\n                                </Button>\n                              )\n                            })}\n                        </Flex>\n                        </Stack>\n                      </ButtonGroup>\n                    </Box>\n                  ) : null}\n\n                  {isCuratedMaster || (!(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 137 ))? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      {/* <Stack d=\"flex\" width=\"100%\"> */}\n                        <Button\n                          className=\"nft_button\"\n                          width={mine && vaultChainId == 1? \"33%\" : vaultChainId == 137? \"100%\": \"50%\"}\n                          m={2.5}\n                          mb={5}\n                          onClick={() => {visitOpenSeaLink()}}>\n                            Opensea\n                        </Button>\n\n                        { vaultChainId == 1 ?(\n                          <Button\n                            className=\"nft_button\"\n                            width=\"50%\"\n                            m={5}\n                            onClick={() => {visitLooksRareLink()}}\n                          >\n                            LooksRare\n                          </Button>\n                           ) : null}\n\n                        { mine && vaultChainId == 1? (\n                           <Button\n                           className=\"nft_button\"\n                           width=\"33%\"\n                           m={2.5}\n                           mb={5}\n                           onClick={() => {visitArcadeLink()}}\n                         >\n                           Arcade\n                         </Button>\n                        ): null}    \n\n                        {showOffer? (\n                          <Button className=\"\" onClick={() => { onOpenOfferModal() }}>{mine? ('My Offers') : ('Make an Offer')} (NFT²NFT)</Button>\n                        ) : null}                        \n                    </Box>\n                  ) : null}\n\n                  {!isCuratedMaster && mine && !acceptable && !approved ? (<>\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button \n                        backgroundColor={\"#02b402\"}\n                        color={\"black !important\"}\n                        fontWeight={\"bold !important\"}\n                        className=\"nft_button\"\n                        width=\"100%\" onClick={() => {\n                          return handleApproveForall()\n                        }\n                    }> Approve Claiming</Button>\n                    </Box>\n                  </>) : null }\n\n                  {!isCovalApproved && approved && !approving && to == account ? (\n                    <Button  width=\"100%\" mt={5} onClick={approveCovalFlow} type=\"submit\">\n                      Approve Spending Coval\n                    </Button>\n                  ):null}\n\n                  {!isCuratedMaster && !live && !approving && isCovalApproved && to == account && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg ? (\n                      <>\n                        { targetContract.name ? (\n                          <Button width=\"100%\" mt={5} onClick={lazyMintCurated} isDisabled = {!canCuratedMint || mintLockedForever}>{mintLockedForever? 'Mint Locked - keys accessed before mint': !canCuratedMint? 'Please load vault to mint':' Mint Vault'} </Button>\n                        ) : null}\n                      </>\n                  ) : null}\n                  \n                  {!isCuratedMaster && live && !(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed && approved ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        onClick={() => {\n                          handleClaim()\n                        }}\n                        isDisabled={claiming}\n                      >\n                        {claiming ? 'Claiming ...' : 'Unlock Vault (Get Private Keys)'}\n                      </Button>\n                    </Box>\n                  ) : (!isCuratedMaster && vaultChainId === chainId && ((status == 'claimed' || mintLockedForever) && (claimedBy === account || mine))) ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={handleSign}>\n                      Get Keys\n                      </Button>\n                    </Box>\n                  ) : null}\n\n                   \n                <Stack mt={5}>\n                  <>\n                    <button className=\"nft_button\" onClick={() => { onAdvancedToggle() }}>Advanced Operations</button>\n                    <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\">\n                      <Collapse width={\"100%\"} isOpen={isAdvancedOpen}>\n\n                        {(!isCuratedMaster && vaultChainId === chainId && ((status == 'claimed' || mintLockedForever) && claimedBy === account || mine) || mineUnMinted && status != \"claimed\") ? (\n                          <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                            <Button width=\"100%\" onClick={handleSign}>\n                              {mineUnMinted && status != \"claimed\" && !mintLockedForever ? 'Get Keys (Unlocking will prevent minting)' : 'Get Keys'}\n                            </Button>\n                          </Box>\n                        ) : null}\n\n                        {mine ? (\n                          <JsonDownloadLink data={rawMetadata} filename={`EmblemVault-${tokenId}.json`} />\n                        ) : null}\n\n                        {(!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? (\n                          <Button width=\"100%\" mt={5} onClick={deleteVault}>Delete Vault </Button>\n                        ) : null}\n\n                      </Collapse>\n                    </Flex>\n                  </>\n                </Stack>\n                \n                {showVerifyingSignature ? (\n                  <Button isDisabled type=\"submit\">\n                    Verifying Signature ...\n                  </Button>\n                ) : null}\n                {showMakingVaultMsg ? (\n                  <Button isDisabled type=\"submit\">\n                    Minting Vault ...\n                  </Button>\n                ) : null}\n                </Box>\n                {!isCuratedMaster && vaultIPFS ? (\n                  // <Stack>\n                    <HStack align=\"center\">\n                      <Link target='new' mb={2} ml={35} href={'https://gateway.ipfs.io/ipfs/'+vaultIPFS} isExternal>View Metadata on IPFS </Link>\n                      {vaultImageIPFS? (\n                        <Link mb={2} href={'https://gateway.ipfs.io/ipfs/'+vaultImageIPFS} isExternal>View Image on IPFS </Link>\n                      ) : null}                      \n                    </HStack> \n                  // </Stack>\n                ) : null }\n                {sealed ? (\n                    <Box d=\"flex\" mb={2} ml={35} alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Text>*This vault is sealed forever.</Text>\n                    </Box>\n                  ) : null}\n                <Stack direction=\"column\" align=\"center\">\n                  {status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n                {hash ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    { accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving? \"Handling Approval Flow ...\" : transfering? \"Transfering Vault ...\":  minting? \"Minting Vault\" : \"Generating Gift Link ...\"}\n                  </Alert>\n                ) : null}\n              </Box>\n            </Flex>\n        ) : vaultValues.length > 0 && slideshowOnly? (\n          <Stack className=\"NFT-content\" align=\"center\">\n            { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                <NFTSlideshow name={vaultName} image={vaultValues[0].image} items={vaultValues.filter(value=>{return value.image !== vaultValues[0].image}).map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n              ) : (\n                <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n              )\n            }\n          </Stack>\n        ) : invalidVault ? (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        ): null}\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming && !accepting && !preTransfering) {\n                // alert(1)\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                // pingClaimLogs(()=>{\n                  location.href = location.origin + '/nft?id=' + tokenId\n                // })\n              } else if (preTransfering) {\n                // alert(2)\n                savePasswordToLocalStorage()\n                setShowTransferPassword(true)\n                setPreTransfering(false)\n                setHash(null)                \n              } else if(accepting) {\n                // alert(3)\n                setAccepting(false)                \n                getVault()\n                setHash(null)\n              } else if(approving) {\n                // alert(4)\n                setApproving(false)\n                getVault()\n                setHash(null)\n              } else if(transfering) {\n                // alert(5)\n                setTransfering(false)\n                getVault()\n                setHash(null)\n              } else if(minting || showMakingVaultMsg) {\n                // alert(5)\n                //checkLiveliness(tokenId, targetContract, (isLive)=>{\n                  console.log('GOD SAKES REDIRECT')\n                  setMinting(false)\n                  setHash(null)\n                  // setLive(isLive)\n                  setShowMakingVaultMsg(false)\n                  location.href = location.origin + '/nft2?id=' + tokenId\n                //})\n              } else {\n                // alert(6)          \n                location.href = location.origin + '/nft2?id=' + tokenId      \n                console.log('--- minting', minting) \n                console.log('--- claiming', claiming) \n                console.log('--- accepting', accepting) \n                console.log('--- preTransfering', preTransfering)\n                console.log('--- approving', approving)\n                console.log(\"Unknown state\")\n              }\n            }}\n          />\n        ) : null}\n        <Box height=\"40px\"></Box>\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}