{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Text, Stack, Button, useColorMode, Select, Input } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR, contractAddresses } from '../constants';\nimport { useWeb3React } from '@web3-react/core';\nimport { NETWORK_SHORTNAMES } from '../utils'; // import { useContract } from '../hooks'\n\nimport { Contract } from '@ethersproject/contracts';\nimport { HStack } from '@chakra-ui/react';\nexport const EMBLEM_API = 'https://api.emblemvault.io';\nexport default function OfferModal({\n  isOpen,\n  onClose,\n  tokenId,\n  mine\n}) {\n  //   const address = addrAddr\n  //   const coin = addrCoin\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    0: copied,\n    1: setCopied\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n  const {\n    0: offeringToken,\n    1: setOfferingToken\n  } = useState({\n    address: '',\n    balance: 0,\n    tokenType: '',\n    name: ''\n  });\n  const {\n    0: tokenBalances,\n    1: setTokenBalances\n  } = useState([]);\n  const {\n    0: offeringTokenBalance,\n    1: setOfferingTokenBalance\n  } = useState(0);\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  const {\n    0: decimals,\n    1: setDecimals\n  } = useState(0);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(0);\n  const {\n    0: offerAmount,\n    1: setOfferAmount\n  } = useState(0);\n  const {\n    0: offerTokenId,\n    1: setOfferTokenId\n  } = useState(0);\n  const {\n    0: offers,\n    1: setOffers\n  } = useState([]);\n  const {\n    0: myOffers,\n    1: setMyOffers\n  } = useState([]);\n\n  const getErc20Contract = address => {\n    console.log(\"contract\", address);\n    return useContract(address, contractAddresses.covalAbi, true);\n  };\n\n  const getTradeContract = () => {\n    return useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true);\n  };\n\n  const useContract = (address, ABI, withSigner = false) => {\n    return new Contract(address, ABI, withSigner ? library.getSigner(account).connectUnchecked() : library);\n  };\n\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account);\n      setLoaded(false);\n    }\n  }, [account, acct]);\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [copied]);\n  useEffect(() => {\n    if (!loaded && !loading) {\n      setLoading(true);\n      getBalances(account, async balances => {\n        setTokenBalances(balances);\n        getOfferContractInfo();\n        setLoading(false);\n        setLoaded(true);\n      });\n    }\n  });\n\n  const handleApprove = async address => {\n    let contract = getErc20Contract(address);\n    console.log('decimals', decimals);\n    await contract.approve(contractAddresses.nftrade[chainId], offeringTokenBalance * Math.pow(10, +decimals));\n  };\n\n  const makeOffer = async () => {\n    let contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n    await contract.addOffer(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount * Math.pow(10, +decimals));\n  };\n\n  const getTokenContractInfo = async address => {\n    let contract = getErc20Contract(address); // console.log(contract)\n\n    let _dec = await contract.decimals();\n\n    setDecimals(_dec);\n    setAllowance(await contract.allowance(account, contractAddresses.nftrade[chainId]).then(balance => (balance * Math.pow(10, -_dec)).toString()));\n    setOfferingTokenBalance(await contract.balanceOf(account).then(balance => (balance * Math.pow(10, -_dec)).toString()));\n  };\n\n  const getOfferContractInfo = async () => {\n    let contract = getTradeContract();\n    let offerCount = (await contract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId)).toNumber();\n    let offers = [];\n    let myOffers = [];\n\n    if (offerCount > 0) {\n      getSingleOffer(0, () => {\n        setOffers(offers);\n        setMyOffers(myOffers); // console.log('offers', offers, myOffers)\n      });\n    }\n\n    async function getSingleOffer(index, cb) {\n      let _offer = await contract.getOffer(contractAddresses.emblemVault[chainId], tokenId, index);\n\n      let offer = {\n        tokenId: _offer.tokenId.toNumber(),\n        _from: _offer._from,\n        token: _offer.token,\n        amount: _offer.amount\n      };\n      let tokenContract = getErc20Contract(offer.token);\n      let tokenName = await tokenContract.name();\n      let tokenDecimals = await tokenContract.decimals();\n      offer.name = tokenName;\n      offer.decimals = tokenDecimals;\n      offer.index = index;\n      offer.amount = offer.amount.toNumber() * Math.pow(10, -tokenDecimals);\n      offers.push(offer);\n      console.log('-----', offer);\n\n      if (offer._from == account) {\n        myOffers.push(offer);\n      }\n\n      if (index + 1 >= offerCount) {\n        return cb();\n      } else {\n        return getSingleOffer(index + 1, cb);\n      }\n    }\n\n    console.log(offerCount);\n  };\n\n  const getBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/' + NETWORK_SHORTNAMES[chainId] + '/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json(); // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    // setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n\n    return cb(jsonData.values);\n  };\n\n  function copyWithFlag(content) {\n    copy(content);\n    setCopied(true);\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    color: COLOR[colorMode],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }, \"Make Offer for: \", tokenId)), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }, !mine ? __jsx(Stack, {\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }, __jsx(Stack, {\n    mt: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 21\n    }\n  }, \"Choose your Offer Token\"), __jsx(Select, {\n    w: \"100%\",\n    value: offeringToken.address,\n    onChange: e => {\n      if (e.target.value !== '0') {\n        let token = tokenBalances.filter(item => {\n          return item.address == e.target.value;\n        })[0];\n        setOfferingToken(token);\n        token.tokenType == \"ERC-20\" ? getTokenContractInfo(token.address) : null;\n        console.log(tokenBalances.filter(item => {\n          return item.address == e.target.value;\n        })[0]);\n        console.log(e.target.value);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 21\n    }\n  }, __jsx(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 25\n    }\n  }, \"Choose a Token\"), tokenBalances.map((coin, index) => {\n    if (coin.tokenType !== 'native') return __jsx(\"option\", {\n      value: coin.address,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 29\n      }\n    }, coin.name);\n  })), offeringToken.balance > 0 && offeringToken.tokenType == \"ERC-20\" && allowance > 0 ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 29\n    }\n  }, \"Max: \", offeringTokenBalance), __jsx(Input, {\n    onChange: e => setOfferAmount(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 29\n    }\n  })) : null), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 21\n    }\n  }, offeringToken.tokenType == 'ERC-20' ? offeringTokenBalance > 0 && allowance == 0 ? __jsx(Button, {\n    onClick: () => {\n      handleApprove(offeringToken.address);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 29\n    }\n  }, \"Approve offer of \", offeringToken.name) : offeringToken && offeringTokenBalance == 0 ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 29\n    }\n  }, \"Insufficient Balance\") : __jsx(Button, {\n    onClick: () => {\n      makeOffer();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 29\n    }\n  }, \"Make Offer\") : null), __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 25\n    }\n  }, \"My Offers\"), myOffers.map((offer, index) => {\n    return __jsx(HStack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 33\n      }\n    }, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 37\n      }\n    }, offer.name, \" \", offer.amount), __jsx(Button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 37\n      }\n    }, \"Revoke Offer\"));\n  }))) : null), __jsx(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx"],"names":["React","useEffect","useState","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","Text","Stack","Button","useColorMode","Select","Input","copy","COLOR","contractAddresses","useWeb3React","NETWORK_SHORTNAMES","Contract","HStack","EMBLEM_API","OfferModal","isOpen","onClose","tokenId","mine","colorMode","account","chainId","library","copied","setCopied","loading","setLoading","loaded","setLoaded","offeringToken","setOfferingToken","address","balance","tokenType","name","tokenBalances","setTokenBalances","offeringTokenBalance","setOfferingTokenBalance","acct","setAcct","decimals","setDecimals","allowance","setAllowance","offerAmount","setOfferAmount","offerTokenId","setOfferTokenId","offers","setOffers","myOffers","setMyOffers","getErc20Contract","console","log","useContract","covalAbi","getTradeContract","nftrade","nftradeAbi","ABI","withSigner","getSigner","connectUnchecked","timeout","setTimeout","clearTimeout","getBalances","balances","getOfferContractInfo","handleApprove","contract","approve","Math","pow","makeOffer","addOffer","emblemVault","getTokenContractInfo","_dec","then","toString","balanceOf","offerCount","getOfferCount","toNumber","getSingleOffer","index","cb","_offer","getOffer","offer","_from","token","amount","tokenContract","tokenName","tokenDecimals","push","responce","fetch","method","headers","service","jsonData","json","values","copyWithFlag","content","e","target","value","filter","item","map","coin"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Text,\n  Stack,\n  Button,\n  useColorMode,\n  Select,\n  Input,\n} from '@chakra-ui/core'\nimport copy from 'copy-to-clipboard'\nimport QRCode from 'qrcode.react'\nimport { COLOR, contractAddresses } from '../constants'\nimport { useWeb3React } from '@web3-react/core'\nimport { NETWORK_SHORTNAMES } from '../utils'\n// import { useContract } from '../hooks'\nimport { useTokenBalance, useTokenAllowance, useETHBalance } from '../data'\nimport { Contract, ContractInterface } from '@ethersproject/contracts'\nimport { HStack } from '@chakra-ui/react'\nexport const EMBLEM_API = 'https://api.emblemvault.io'\n\nexport default function OfferModal({\n  isOpen,\n  onClose,\n  tokenId,\n  mine,\n}: {\n  isOpen: boolean\n  onClose: () => void\n  tokenId\n  mine: boolean\n}): JSX.Element {\n//   const address = addrAddr\n//   const coin = addrCoin\n\n  const { colorMode } = useColorMode()\n  const { account, chainId, library } = useWeb3React()\n  const [copied, setCopied] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loaded, setLoaded] = useState(false)\n  const [offeringToken, setOfferingToken] = useState({address:'', balance: 0, tokenType:'', name: ''})\n  const [tokenBalances, setTokenBalances] = useState([])\n  const [offeringTokenBalance, setOfferingTokenBalance] = useState(0)\n  const [acct, setAcct] = useState('')\n  const [decimals, setDecimals] = useState(0)\n  const [allowance, setAllowance] = useState(0)\n  const [offerAmount, setOfferAmount] = useState(0)\n  const [offerTokenId, setOfferTokenId] = useState(0)\n  const [offers, setOffers] = useState([])\n  const [myOffers, setMyOffers] = useState([])\n  \n  \n  const getErc20Contract = (address) =>{\n    console.log(\"contract\", address)\n    return useContract(address, contractAddresses.covalAbi, true)\n  }\n\n  const getTradeContract = ()=>{\n    return useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true)\n  }\n\n  const useContract = (address?: string, ABI?: ContractInterface, withSigner = false): Contract | undefined => {\n    return new Contract(address, ABI, withSigner ? library.getSigner(account).connectUnchecked() : library)\n  }\n\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setLoaded(false)\n    }\n  }, [account, acct])\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [copied])\n\n  useEffect(() => {\n      if (!loaded && !loading) {\n        setLoading(true)\n        getBalances(account, async balances =>{\n            setTokenBalances(balances)\n            getOfferContractInfo()\n            setLoading(false)\n            setLoaded(true)\n        })\n\n      }\n  })\n\n  const handleApprove = async(address)=>{\n    let contract = getErc20Contract(address)\n    console.log('decimals', decimals)\n    await contract.approve(contractAddresses.nftrade[chainId], (offeringTokenBalance * Math.pow(10, +decimals)))\n  }\n\n  const makeOffer = async()=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.addOffer(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n  }\n\n  const getTokenContractInfo = async (address)=>{\n    let contract = getErc20Contract(address)\n    // console.log(contract)\n    let _dec = await contract.decimals()\n    setDecimals(_dec)\n    setAllowance(\n        await contract\n        .allowance(account, contractAddresses.nftrade[chainId])\n        .then(balance=>(balance * Math.pow(10, -_dec)).toString())\n    )\n    setOfferingTokenBalance(\n        await contract\n        .balanceOf(account)\n        .then(balance=>(balance * Math.pow(10, -_dec)).toString())\n    )\n  }\n\n  const getOfferContractInfo = async ()=>{\n    let contract = getTradeContract()\n    let offerCount = (await contract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId)).toNumber()\n    let offers = []\n    let myOffers = []\n    if (offerCount > 0) {\n        getSingleOffer(0, ()=>{\n            setOffers(offers)\n            setMyOffers(myOffers)\n            // console.log('offers', offers, myOffers)\n        })\n    }\n    async function getSingleOffer(index, cb) {\n        let _offer = await contract.getOffer(contractAddresses.emblemVault[chainId], tokenId, index)\n        let offer: any = {tokenId: _offer.tokenId.toNumber(), _from: _offer._from, token: _offer.token, amount: _offer.amount}\n        let tokenContract = getErc20Contract(offer.token)\n        let tokenName = await tokenContract.name()\n        let tokenDecimals = await tokenContract.decimals()\n        offer.name = tokenName\n        offer.decimals = tokenDecimals\n        offer.index = index\n        offer.amount = offer.amount.toNumber() * Math.pow(10,-tokenDecimals)\n        offers.push(offer)\n        console.log('-----', offer)\n        if (offer._from == account) {\n            myOffers.push(offer)\n        }\n        if (index +1 >= offerCount) {\n            return cb()\n        } else {\n            return getSingleOffer(index +1, cb)\n        }\n    }\n    console.log(offerCount)\n  }\n\n  const getBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/'+NETWORK_SHORTNAMES[chainId]+'/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    // setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n    return cb(jsonData.values)\n  }\n\n  function copyWithFlag(content: string): void {\n    copy(content)\n    setCopied(true)\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent color={COLOR[colorMode]}>\n        <ModalHeader>\n          <Text>Make Offer for: {tokenId}</Text>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n            {!mine? (\n                <Stack direction=\"column\">\n                    <Stack mt=\"6\">\n                    <Text>Choose your Offer Token</Text>\n                  {/* <Text>{account} network: {NETWORK_SHORTNAMES[chainId]}</Text> */}\n                    <Select w=\"100%\" value={offeringToken.address}\n                        onChange={(e) => {\n                            if (e.target.value !== '0') {\n                                let token = tokenBalances.filter((item)=>{return item.address == e.target.value})[0]\n                                setOfferingToken(token)\n                                token.tokenType ==\"ERC-20\" ? getTokenContractInfo(token.address) : null\n                                console.log(tokenBalances.filter((item)=>{return item.address == e.target.value})[0])\n                                console.log(e.target.value)\n                            }\n                        }}\n                    >\n                        <option value=\"0\" >Choose a Token</option>\n                        {tokenBalances.map((coin, index) => {\n                            if (coin.tokenType !== 'native')\n                            return (\n                            <option value={coin.address}>{coin.name}</option>\n                            )\n                        })}\n                    </Select>\n                    {offeringToken.balance > 0 && offeringToken.tokenType==\"ERC-20\" && allowance > 0 ? (\n                        <>\n                            <Text>Max: {offeringTokenBalance}</Text>    \n                            <Input onChange={(e) => setOfferAmount(e.target.value)}></Input>\n                        </>\n                    ) : null}\n                                  \n                </Stack>\n                    <Stack direction=\"row\" justify=\"center\">\n                    {offeringToken.tokenType =='ERC-20' ? (\n                        offeringTokenBalance > 0 && allowance == 0 ? (\n                            <Button onClick={()=>{handleApprove(offeringToken.address)}}>Approve offer of {offeringToken.name}</Button>\n                        ) : offeringToken && offeringTokenBalance == 0 ? (\n                            <Text>Insufficient Balance</Text>\n                        ) : (\n                            <Button onClick={()=>{makeOffer()}}>Make Offer</Button>\n                        )\n                    ) : null}\n                \n                    \n                  {/* <Button onClick={() => copyWithFlag('address')}>\n                    {copied ? <Text>Copied!</Text> : <Text isTruncated>{'address'}</Text>}\n                  </Button> */}\n                </Stack>\n                    <Stack>\n                        <Text>My Offers</Text>\n                        { myOffers.map((offer, index) => {\n                            return (\n                                <HStack>\n                                    <Text>{offer.name} {offer.amount}</Text>\n                                    <Button>Revoke Offer</Button>\n                                </HStack>\n                            )\n                        })}\n                    </Stack>\n                </Stack>\n            ) : null}\n          \n        </ModalBody>\n        <ModalFooter></ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}