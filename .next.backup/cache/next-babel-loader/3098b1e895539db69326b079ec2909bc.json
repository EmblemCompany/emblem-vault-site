{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Suspense } from 'react';\nimport { Button, Text, IconButton, useColorMode } from '@chakra-ui/core';\nimport { useWeb3React } from '@web3-react/core';\nimport { addTokenToWallet } from '../public/web3';\nimport { BG } from '../constants';\nimport { useTokenBalance } from '../data';\nimport TokenLogo from './TokenLogo';\nimport ErrorBoundary from './ErrorBoundary';\nimport { useShowUSD } from '../context';\nimport { useUSDTokenPrice } from '../hooks';\n\nfunction Balance(_ref) {\n  var token = _ref.token;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account;\n\n  var _useTokenBalance = useTokenBalance(token, account, true),\n      data = _useTokenBalance.data;\n\n  var _useShowUSD = useShowUSD(),\n      _useShowUSD2 = _slicedToArray(_useShowUSD, 1),\n      showUSD = _useShowUSD2[0];\n\n  var USDTokenPrice = useUSDTokenPrice(token);\n  return __jsx(Button, {\n    as: \"a\",\n    rightIcon: \"external-link\",\n    variant: \"outline\",\n    backgroundColor: BG[colorMode],\n    onClick: function onClick() {\n      var tokenInfo = JSON.parse(JSON.stringify(token));\n      tokenInfo.image = \"https://circuitsofvalue.com/public/coval-logo.png\";\n      addTokenToWallet(tokenInfo);\n    },\n    //href: formatEtherscanLink(ExplorerTXType.TokenBalance, [token, account as string]),\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }, __jsx(TokenLogo, {\n    token: token,\n    size: \"1.5rem\"\n  }), __jsx(Text, {\n    ml: \"0.5rem\"\n  }, showUSD && USDTokenPrice ? \"$\".concat(data.multiply(USDTokenPrice).toFixed(2, {\n    groupSeparator: ','\n  })) : data.toSignificant(6, {\n    groupSeparator: ','\n  })));\n}\n\nexport default function TokenBalance(_ref2) {\n  var token = _ref2.token;\n\n  var _useColorMode2 = useColorMode(),\n      colorMode = _useColorMode2.colorMode;\n\n  return __jsx(ErrorBoundary, {\n    fallback: __jsx(IconButton, {\n      variant: \"outline\",\n      backgroundColor: BG[colorMode],\n      icon: \"warning\",\n      \"aria-label\": \"Failed\",\n      isDisabled: true,\n      cursor: \"default !important\",\n      _hover: {},\n      _active: {}\n    })\n  }, __jsx(Suspense, {\n    fallback: __jsx(Button, {\n      variant: \"outline\",\n      backgroundColor: BG[colorMode],\n      isLoading: true,\n      cursor: \"default !important\",\n      _hover: {},\n      _active: {}\n    }, null)\n  }, __jsx(Balance, {\n    token: token\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}