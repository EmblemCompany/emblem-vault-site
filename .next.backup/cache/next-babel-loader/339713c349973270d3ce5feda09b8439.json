{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/pages/nft/[id].tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport Nft from '../../components/Nft';\nimport Head from 'next/head';\nexport var __N_SSG = true;\nexport var EMBLEM_API = 'https://api.emblemvault.io';\nexport function getProductsFromDatabase() {\n  return _getProductsFromDatabase.apply(this, arguments);\n}\n\nfunction _getProductsFromDatabase() {\n  _getProductsFromDatabase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var responce;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(EMBLEM_API + '/ids/', {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json',\n                service: 'evmetadata'\n              }\n            });\n\n          case 2:\n            responce = _context.sent;\n            _context.next = 5;\n            return responce.json();\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getProductsFromDatabase.apply(this, arguments);\n}\n\n// export default function Product({ product }) {\n//   // Render product\n// }\nexport default function VaultPage(_ref) {\n  _s();\n\n  var product = _ref.product;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: product,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  })), __jsx(Nft, {\n    id: product,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }));\n}\n\n_s(VaultPage, \"wby5GzzI23pLfTlf5I7v7XLG1RQ=\", false, function () {\n  return [useRouter];\n});\n\n_c = VaultPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"VaultPage\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/pages/nft/[id].tsx"],"names":["useRouter","Nft","Head","EMBLEM_API","getProductsFromDatabase","fetch","method","headers","service","responce","json","VaultPage","product","query"],"mappings":";;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AACA,OAAO,IAAMC,UAAU,GAAG,4BAAnB;AAEP,gBAAsBC,uBAAtB;AAAA;AAAA;;;sFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkBC,KAAK,CAACF,UAAU,GAAG,OAAd,EAAuB;AACjDG,cAAAA,MAAM,EAAE,KADyC;AAEjDC,cAAAA,OAAO,EAAE;AACP,gCAAgB,kBADT;AAEPC,gBAAAA,OAAO,EAAE;AAFF;AAFwC,aAAvB,CADvB;;AAAA;AACCC,YAAAA,QADD;AAAA;AAAA,mBAQQA,QAAQ,CAACC,IAAT,EARR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA+BP;AACA;AACA;AACA,eAAe,SAASC,SAAT,OAA2C;AAAA;;AAAA,MAAvBC,OAAuB,QAAvBA,OAAuB;;AAAA,mBACtCZ,SAAS,EAD6B;AAAA,MAChDa,KADgD,cAChDA,KADgD;;AAGxD,SACE,4BACA,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,IAAI,EAAC,cAAX;AAA0B,IAAA,OAAO,EAAED,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADA,EAIA,MAAC,GAAD;AAAK,IAAA,EAAE,EAAEA,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJA,CADF;AAQD;;GAXuBD,S;UACJX,S;;;KADIW,S","sourcesContent":["import { useRouter } from 'next/router'\nimport Nft from '../../components/Nft'\nimport Head from 'next/head'\nexport const EMBLEM_API = 'https://api.emblemvault.io'\n\nexport async function getProductsFromDatabase() {\n  const responce = await fetch(EMBLEM_API + '/ids/', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      service: 'evmetadata',\n    },\n  })\n  return await responce.json()\n}\nexport async function getStaticPaths() {\n  const records = await getProductsFromDatabase()\n  console.log(\"Records\", records)\n  const paths = records.map((product) => ({\n    params: { id: product.tokenId }\n  }))\n\n  // fallback: false means pages that donâ€™t have the\n  // correct id will 404.\n  return { paths, fallback: false }\n}\n\n// params will contain the id for each generated page.\nexport async function getStaticProps({ params }) {\n  return {\n    props: {\n      product: params.id\n    }\n  }\n}\n\n// export default function Product({ product }) {\n//   // Render product\n// }\nexport default function VaultPage({product}): JSX.Element {\n  const { query } = useRouter()\n  \n  return (\n    <>\n    <Head>\n      <meta name=\"twitter:card\" content={product} />\n    </Head>\n    <Nft id={product}/>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}