{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Text, Stack, Button, useColorMode, Select } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR } from '../constants';\nimport { useWeb3React } from '@web3-react/core';\nimport { NETWORK_SHORTNAMES } from '../utils';\nexport const EMBLEM_API = 'https://api.emblemvault.io';\nexport default function OfferModal({\n  isOpen,\n  onClose //   addrCoin,\n  //   addrAddr,\n\n}) {\n  //   const address = addrAddr\n  //   const coin = addrCoin\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    0: copied,\n    1: setCopied\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n  const {\n    0: tokenBalances,\n    1: setTokenBalances\n  } = useState([]);\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [copied]);\n  useEffect(() => {\n    if (!loaded && !loading) {\n      setLoading(true);\n      getBalances(account, async balances => {\n        setTokenBalances(balances);\n        setLoading(false);\n        setLoaded(true);\n      });\n    }\n  });\n\n  const getBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/' + NETWORK_SHORTNAMES[chainId] + '/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json(); // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    // setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n\n    return cb(jsonData.values);\n  };\n\n  function copyWithFlag(content) {\n    copy(content);\n    setCopied(true);\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    color: COLOR[colorMode],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, \"Offer\")), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }), __jsx(Stack, {\n    mt: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  }, account, \" network: \", NETWORK_SHORTNAMES[chainId]), __jsx(Select, {\n    w: \"40%\",\n    value: 'transferChain',\n    onChange: e => {\n      //   setTransferChain(Number(e.target.value))\n      //   setTransferChainChanged(true)\n      console.log(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 27\n    }\n  }, __jsx(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 31\n    }\n  }, \"Choose a chain\"), tokenBalances.map((coin, index) => {\n    return __jsx(\"option\", {\n      value: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 37\n      }\n    }, coin.name) //   <Text key={index}>{coin.name}</Text>\n    ;\n  }), __jsx(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 31\n    }\n  }, \"Choose a chain\"), chainId !== 137 ? __jsx(\"option\", {\n    value: \"137\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 51\n    }\n  }, \"Polygon (Matic)\") : null, chainId !== 100 ? __jsx(\"option\", {\n    value: \"100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 51\n    }\n  }, \"xDai\") : null, chainId !== 56 ? __jsx(\"option\", {\n    value: \"56\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 50\n    }\n  }, \"Binance Smart Chain\") : null, chainId !== 1 ? __jsx(\"option\", {\n    value: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 49\n    }\n  }, \"Ethereum Mainnet\") : null, chainId !== 250 ? __jsx(\"option\", {\n    value: \"250\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 51\n    }\n  }, \"Fantom\") : null)), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: () => copyWithFlag('address'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, copied ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 27\n    }\n  }, \"Copied!\") : __jsx(Text, {\n    isTruncated: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 50\n    }\n  }, 'address'))))), __jsx(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx"],"names":["React","useEffect","useState","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","Text","Stack","Button","useColorMode","Select","copy","COLOR","useWeb3React","NETWORK_SHORTNAMES","EMBLEM_API","OfferModal","isOpen","onClose","colorMode","account","chainId","library","copied","setCopied","loading","setLoading","loaded","setLoaded","tokenBalances","setTokenBalances","timeout","setTimeout","clearTimeout","getBalances","balances","address","cb","responce","fetch","method","headers","service","jsonData","json","values","copyWithFlag","content","e","console","log","Number","target","value","map","coin","index","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Text,\n  Stack,\n  Button,\n  useColorMode,\n  Select,\n} from '@chakra-ui/core'\nimport copy from 'copy-to-clipboard'\nimport QRCode from 'qrcode.react'\nimport { COLOR } from '../constants'\nimport { useWeb3React } from '@web3-react/core'\nimport { NETWORK_SHORTNAMES } from '../utils'\n\nexport const EMBLEM_API = 'https://api.emblemvault.io'\n\nexport default function OfferModal({\n  isOpen,\n  onClose,\n//   addrCoin,\n//   addrAddr,\n}: {\n  isOpen: boolean\n  onClose: () => void\n//   addrCoin: string\n//   addrAddr: string\n}): JSX.Element {\n//   const address = addrAddr\n//   const coin = addrCoin\n\n  const { colorMode } = useColorMode()\n  const { account, chainId, library } = useWeb3React()\n  const [copied, setCopied] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loaded, setLoaded] = useState(false)\n  const [tokenBalances, setTokenBalances] = useState([])\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [copied])\n\n  useEffect(() => {\n      if (!loaded && !loading) {\n        setLoading(true)\n        getBalances(account, async balances =>{\n            setTokenBalances(balances)\n            setLoading(false)\n            setLoaded(true)\n        })\n      }\n  })\n\n  const getBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/'+NETWORK_SHORTNAMES[chainId]+'/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    // setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n    return cb(jsonData.values)\n  }\n\n  function copyWithFlag(content: string): void {\n    copy(content)\n    setCopied(true)\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent color={COLOR[colorMode]}>\n        <ModalHeader>\n          <Text>Offer</Text>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Stack direction=\"column\">\n            <Stack direction=\"row\" align=\"center\" justify=\"center\">\n              {/* <QRCode value={coin==\"BTC\" ? \"bitcoin:\"+address: address} onClick={() => copyWithFlag(address)} /> */}\n            </Stack>\n\n            <Stack mt=\"6\">\n              <Text>{account} network: {NETWORK_SHORTNAMES[chainId]}</Text>\n                          <Select w=\"40%\" value={'transferChain'}\n                              onChange={(e) => {\n                                //   setTransferChain(Number(e.target.value))\n                                //   setTransferChainChanged(true)\n                                  console.log(Number(e.target.value))\n                              }}\n                          >\n                              <option value=\"0\" >Choose a chain</option>\n                              {tokenBalances.map((coin, index) => {\n                                  return (\n                                    <option value={index}>{coin.name}</option>\n                                    //   <Text key={index}>{coin.name}</Text>\n                                  )\n                              })}\n                              <option value=\"0\" >Choose a chain</option>\n                              {chainId !== 137 ? (<option value=\"137\">Polygon (Matic)</option>) : null}\n                              {chainId !== 100 ? (<option value=\"100\">xDai</option>) : null}\n                              {chainId !== 56 ? (<option value=\"56\">Binance Smart Chain</option>) : null}\n                              {chainId !== 1 ? (<option value=\"1\">Ethereum Mainnet</option>) : null}\n                              {chainId !== 250 ? (<option value=\"250\">Fantom</option>) : null}\n                          </Select>\n                \n              \n            </Stack>\n            <Stack direction=\"row\" justify=\"center\">\n              <Button onClick={() => copyWithFlag('address')}>\n                {copied ? <Text>Copied!</Text> : <Text isTruncated>{'address'}</Text>}\n              </Button>\n            </Stack>\n          </Stack>\n        </ModalBody>\n        <ModalFooter></ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}