{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/partials/BridgeDeposits.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useWeb3React } from '@web3-react/core';\nimport { useState } from 'react';\nimport { EMBLEM_API } from '../../constants';\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  }\n});\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return {\n    name,\n    calories,\n    fat,\n    carbs,\n    protein\n  };\n}\n\nlet rows = [//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  //   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  //   createData('Eclair', 262, 16.0, 24, 6.0),\n  //   createData('Cupcake', 305, 3.7, 67, 4.3),\n  //   createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\nexport default function BridgeDeposits() {\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: hasDataRows,\n    1: setHasDataRows\n  } = useState(false);\n  const {\n    0: dataRows,\n    1: setDataRows\n  } = useState([]);\n  const classes = useStyles();\n  !hasDataRows ? getDeposits(deposits => {\n    setHasDataRows(true);\n    setDataRows(deposits);\n  }) : null;\n  return __jsx(TableContainer, {\n    component: Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, __jsx(Table, {\n    className: classes.table,\n    \"aria-label\": \"simple table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 25\n    }\n  }, \"Dessert (100g serving) \", chainId), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }\n  }, \"Calories\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  }, \"Fat\\xA0(g)\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  }, \"Carbs\\xA0(g)\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }\n  }, \"Protein\\xA0(g)\"))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, dataRows.map(row => __jsx(TableRow, {\n    key: row.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 29\n    }\n  }, row.name), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 29\n    }\n  }, row.blockNumber), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 29\n    }\n  }, row.transactionHash), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 29\n    }\n  }, row.carbs), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 29\n    }\n  }, row.protein))))));\n\n  async function getDeposits(cb) {\n    const responce = await fetch(EMBLEM_API + '/transfersOutDb?pending=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'chainid': chainId.toString(),\n        'service': 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  }\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/partials/BridgeDeposits.tsx"],"names":["React","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","useWeb3React","useState","EMBLEM_API","useStyles","table","minWidth","createData","name","calories","fat","carbs","protein","rows","BridgeDeposits","account","chainId","hasDataRows","setHasDataRows","dataRows","setDataRows","classes","getDeposits","deposits","map","row","blockNumber","transactionHash","cb","responce","fetch","method","headers","toString","jsonData","json"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../../constants'\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\nfunction createData(name: string, calories: number, fat: number, carbs: number, protein: number) {\n    return { name, calories, fat, carbs, protein };\n}\n\n\n\nlet rows = [\n    //   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n    //   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n    //   createData('Eclair', 262, 16.0, 24, 6.0),\n    //   createData('Cupcake', 305, 3.7, 67, 4.3),\n    //   createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\n\nexport default function BridgeDeposits() {\n    const { account, chainId } = useWeb3React()\n    const [hasDataRows, setHasDataRows] = useState(false)\n    const [dataRows, setDataRows] = useState([])\n    const classes = useStyles();\n    !hasDataRows ? (\n        getDeposits(deposits => {\n            setHasDataRows(true)\n            setDataRows(deposits)\n        })\n    ) : null\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Dessert (100g serving) {chainId}</TableCell>\n                        <TableCell align=\"right\">Calories</TableCell>\n                        <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n                        <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n                        <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {dataRows.map((row) => (\n                        <TableRow key={row.name}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.name}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.blockNumber}</TableCell>\n                            <TableCell align=\"right\">{row.transactionHash}</TableCell>\n                            <TableCell align=\"right\">{row.carbs}</TableCell>\n                            <TableCell align=\"right\">{row.protein}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n\n    async function getDeposits(cb) {\n\n        const responce = await fetch(EMBLEM_API + '/transfersOutDb?pending=true', {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'chainid': chainId.toString(),\n                'service': 'evmetadata',\n            },\n        })\n        const jsonData = await responce.json()\n        return cb(jsonData)\n    }\n}"]},"metadata":{},"sourceType":"module"}