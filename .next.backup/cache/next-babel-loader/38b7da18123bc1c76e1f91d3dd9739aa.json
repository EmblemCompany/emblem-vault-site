{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/SwapChain.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, Flex, Text, Image, Stack, Button, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport { useContract } from '../hooks';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { TransactionToast } from './TransactionToast';\nimport { parseUnits } from '@ethersproject/units';\nimport BridgeDeposits from './partials/BridgeDeposits';\nexport default function SwapChain() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React(); // const [vaults, setVaults] = useState([])\n\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: approving,\n    1: setApproving\n  } = useState(false);\n  const {\n    0: transfering,\n    1: setTransfering\n  } = useState(false);\n  const {\n    0: balance,\n    1: setBalance\n  } = useState(null);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    0: decimals,\n    1: setDecimals\n  } = useState(null);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(null);\n  const {\n    0: transferChain,\n    1: setTransferChain\n  } = useState(137);\n  const {\n    0: covalApprovedFor,\n    1: setIsCovalApproved\n  } = useState(0);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: swapAmount,\n    1: setSwapAmount\n  } = useState(0);\n  const {\n    0: isInvalid,\n    1: setIsInvalid\n  } = useState(false);\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  const covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true);\n\n  const transferToChain = async () => {\n    setTransfering(true);\n    handlerContract.transferToChain(transferChain, swapAmount.toString()).then(({\n      hash\n    }) => {\n      setHash(hash);\n    }).catch(error => {\n      if ((error === null || error === void 0 ? void 0 : error.code) == 4001) {\n        setTransfering(false);\n      }\n    });\n  };\n\n  const getContractStates = async () => {\n    setHash(null);\n    setDecimals(await covalContract.decimals());\n    setAllowance(await covalContract.allowance(account, contractAddresses.vaultHandler[chainId]).then(balance => balance.toString()));\n    setBalance(await covalContract.balanceOf(account).then(balance => balance.toString()));\n\n    if (Number(allowance) >= Number(0)) {\n      setIsCovalApproved(allowance);\n    }\n\n    setState({\n      loaded: true\n    });\n  };\n\n  const approveCovalFlow = () => {\n    setApproving(true);\n    covalContract.approve(contractAddresses.vaultHandler[chainId], 10000000 * Math.pow(10, +decimals)).then(({\n      hash\n    }) => {\n      setHash(hash);\n    }).catch(error => {\n      if ((error === null || error === void 0 ? void 0 : error.code) == 4001) {\n        setApproving(false);\n      }\n    });\n  };\n\n  const getTransferLogs = async () => {\n    console.log(\"getting logs\");\n    fetch(EMBLEM_API + '/transfersOut', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      }\n    }).then(async function (response) {\n      console.log(\"doing transfers\");\n      fetch(EMBLEM_API + '/doTransfers', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        }\n      }).then(async function (response) {\n        getContractStates();\n      });\n    });\n  };\n\n  function SwapText(_ref) {\n    let {\n      children\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n    return __jsx(Text, _extends({\n      fontSize: \"2xl\",\n      lineHeight: 1,\n      py: \"0.3rem\"\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }), children);\n  }\n\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getContractStates();\n    }\n  }, [account, acct]);\n  const {\n    0: chain,\n    1: setChain\n  } = useState(chainId);\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getContractStates();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    account && chainId ? setState({\n      loaded: true\n    }) : null;\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, true ? __jsx(React.Fragment, null, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"1rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, __jsx(SwapText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }, \"I want to transfer \"), __jsx(Input, {\n    variant: \"flushed\",\n    fontSize: \"1xl\",\n    textAlign: \"center\" // universal input options\n    ,\n    inputMode: \"decimal\",\n    title: \"Token Amount\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\" // text-specific options\n    ,\n    type: \"text\",\n    placeholder: \"0\",\n    minLength: 1,\n    maxLength: 79,\n    isInvalid: isInvalid,\n    onChange: e => {\n      let calculatedAmount = Number(parseUnits(e.target.value, decimals).toString());\n\n      if (calculatedAmount > Number(balance) || calculatedAmount > Number(allowance)) {\n        setIsInvalid(true);\n      } else {\n        setIsInvalid(false);\n      }\n\n      setSwapAmount(Number(calculatedAmount));\n    },\n    spellCheck: \"false\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }\n  }), __jsx(SwapText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 19\n    }\n  }, \"$Coval\")), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"1rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 15\n    }\n  }, __jsx(SwapText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 19\n    }\n  }, __jsx(Text, {\n    float: 'left',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }, \"from \", chainId == 137 ? \"Matic\" : chainId == 100 ? \"xDai\" : chainId == 56 ? \"Binance Smart Chain\" : chainId == 250 ? \"Fantom\" : \"Ethereum\", \" to\"), __jsx(Image, {\n    float: 'left',\n    margin: 2,\n    w: 3,\n    src: \"./next.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 21\n    }\n  }), __jsx(Select, {\n    w: \"45%\",\n    value: transferChain,\n    onChange: e => {\n      setTransferChain(Number(e.target.value));\n      console.log(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 21\n    }\n  }, __jsx(\"option\", {\n    value: \"137\",\n    disabled: chainId === 137 ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 23\n    }\n  }, \"Polygon (Matic)\"), __jsx(\"option\", {\n    value: \"100\",\n    disabled: chainId === 100 ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 23\n    }\n  }, \"xDai\"), __jsx(\"option\", {\n    value: \"56\",\n    disabled: chainId === 56 ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 23\n    }\n  }, \"Binance Smart Chain\"), __jsx(\"option\", {\n    value: \"1\",\n    disabled: chainId === 1 ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 23\n    }\n  }, \"Ethereum Mainnet\"), __jsx(\"option\", {\n    value: \"250\",\n    disabled: chainId === 250 ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 23\n    }\n  }, \"Fantom\")))), swapAmount > 0 ? __jsx(Button, {\n    isDisabled: isInvalid,\n    onClick: transferToChain,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 19\n    }\n  }, isInvalid ? \"Invalid Transfer Amount\" : \"Transfer Now\") : null)) : null, allowance == 0 && balance > 0 && !approving ? __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"s\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    onClick: approveCovalFlow,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }\n  }, \"Approve Transfer\"))) : balance == 0 ? __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"s\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 15\n    }\n  }, \"You have no Coval to transfer\")) : !approving ? __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"s\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 15\n    }\n  }, \"Approved to transfer up to \", allowance * Math.pow(10, -decimals), \" Coval. Note: Swaps between networks can take up to 25 minutes.\")) : null, __jsx(Tabs, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 11\n    }\n  }, __jsx(TabList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }\n  }, __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 17\n    }\n  }, \"Incoming\"), __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 17\n    }\n  }, CHAIN_ID_NAMES[transferChain])), __jsx(TabPanels, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }\n  }, __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 17\n    }\n  }, __jsx(BridgeDeposits, {\n    chainId: chainId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 19\n    }\n  })), __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 17\n    }\n  }, transferChain ? __jsx(BridgeDeposits, {\n    chainId: transferChain,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 21\n    }\n  }) : null))))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      if (transfering) {\n        setTransfering(false);\n        getTransferLogs();\n      } else {\n        setApproving(false);\n        getContractStates();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }\n  }) : null);\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/SwapChain.tsx"],"names":["Box","Flex","Text","Image","Stack","Button","Input","Select","Tabs","Tab","TabList","TabPanels","TabPanel","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","CHAIN_ID_NAMES","useContract","EMBLEM_API","contractAddresses","TransactionToast","parseUnits","BridgeDeposits","SwapChain","query","account","chainId","state","setState","loaded","loadingApi","setLoadingApi","approving","setApproving","transfering","setTransfering","balance","setBalance","address","setAddress","experimental","setExperimental","decimals","setDecimals","allowance","setAllowance","transferChain","setTransferChain","covalApprovedFor","setIsCovalApproved","hash","setHash","swapAmount","setSwapAmount","isInvalid","setIsInvalid","handlerContract","vaultHandler","vaultHandlerAbi","covalContract","coval","covalAbi","transferToChain","toString","then","catch","error","code","getContractStates","balanceOf","Number","approveCovalFlow","approve","Math","pow","getTransferLogs","console","log","fetch","method","headers","service","chainid","response","SwapText","children","rest","acct","setAcct","chain","setChain","e","calculatedAmount","target","value"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage, toContractValue, CHAIN_ID_NAMES } from '../utils'\nimport { useContract } from '../hooks'\nimport { Contract } from '@ethersproject/contracts'\nimport { EMBLEM_API, contractAddresses } from '../constants'\nimport { TransactionToast } from './TransactionToast'\nimport { parseUnits } from '@ethersproject/units'\nimport BridgeDeposits from './partials/BridgeDeposits'\n\nexport default function SwapChain() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  // const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [transfering, setTransfering] = useState(false)\n  const [balance, setBalance] = useState(null)\n  const [address, setAddress] = useState(query.address)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [decimals, setDecimals] = useState(null)\n  const [allowance, setAllowance] = useState(null)\n  const [transferChain, setTransferChain] = useState(137)\n  const [covalApprovedFor, setIsCovalApproved] = useState(0)\n  const [hash, setHash] = useState(null)\n  const [swapAmount, setSwapAmount] = useState(0)\n  const [isInvalid, setIsInvalid] = useState(false)\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true)\n\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  const transferToChain = async () => {\n    setTransfering(true)\n    ;(handlerContract as Contract)\n    .transferToChain(transferChain, swapAmount.toString())\n    .then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n    .catch((error: ErrorWithCode) => {\n      if (error?.code == 4001) {\n        setTransfering(false)\n      }\n    })\n  }\n\n  const getContractStates = async () => {\n    setHash(null)\n    setDecimals(await covalContract.decimals())\n    setAllowance(\n      await covalContract\n        .allowance(account, contractAddresses.vaultHandler[chainId])\n        .then((balance: { toString: () => string }) => balance.toString())\n    )\n    setBalance(await covalContract.balanceOf(account).then((balance: { toString: () => string }) => balance.toString()))\n    if (Number(allowance) >= Number(0)) {      \n      setIsCovalApproved(allowance)\n    }\n    setState({ loaded: true })\n  }\n\n  const approveCovalFlow = () => {\n    setApproving(true)\n    ;(covalContract as Contract)\n      .approve(contractAddresses.vaultHandler[chainId], 10000000 * Math.pow(10, +decimals) )\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code == 4001) {\n          setApproving(false)\n        }\n      })\n  }\n\n  const getTransferLogs = async () =>{\n    console.log(\"getting logs\")\n    fetch(EMBLEM_API + '/transfersOut', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      }\n    }).then(async function (response) {\n      console.log(\"doing transfers\")\n      fetch(EMBLEM_API + '/doTransfers', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        }\n      }).then(async function (response) {\n        getContractStates()\n      })\n    })\n  }\n\n  function SwapText({ children, ...rest }: BoxProps): JSX.Element {\n    return (\n      <Text fontSize=\"2xl\" lineHeight={1} py=\"0.3rem\" {...rest}>\n        {children}\n      </Text>\n    )\n  }\n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setState({ loaded: false })\n      getContractStates()\n    }\n  }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      getContractStates()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    account && chainId ? setState({ loaded: true }) : null\n  }, [])\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Stack align=\"center\">\n          {true ? (\n            <>\n              {/* <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"s\" fontStyle=\"\" >\n                  Transfer up to {allowance > balance ? balance * Math.pow(10, -decimals) : allowance * Math.pow(10, -decimals) } Coval from {chainId == 137 ? \"Matic\" : \"Ethereum\"} Network to {chainId == 137 ? \"Etherum\" : \"Matic\"} Network\n                </Text>              \n              </Box>\n              {balance > allowance ? (                 \n                <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                  <Button onClick={approveCovalFlow} type=\"submit\">\n                    Increase transfer allowance to { balance * Math.pow(10, -decimals) } Coval\n                  </Button>\n                </Box>\n              ) : null } */}\n              <Stack direction=\"row\" align=\"flex-start\" spacing=\"1rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                <SwapText>I want to transfer </SwapText>\n                <Input variant=\"flushed\"\n                  fontSize=\"1xl\"\n                  textAlign=\"center\"\n                  // universal input options\n                  inputMode=\"decimal\"\n                  title=\"Token Amount\"\n                  autoComplete=\"off\"\n                  autoCorrect=\"off\"\n                  // text-specific options\n                  type=\"text\"\n                  placeholder=\"0\"\n                  minLength={1}\n                  maxLength={79}\n                  isInvalid={isInvalid}\n                  onChange={(e) => {\n                    let calculatedAmount = Number(parseUnits(e.target.value, decimals).toString())\n                    \n                    if (calculatedAmount > Number(balance) || calculatedAmount > Number(allowance)) {\n                      setIsInvalid(true)\n                    } else {                      \n                      setIsInvalid(false)\n                    }\n                    setSwapAmount(Number(calculatedAmount))\n                  }}\n                  spellCheck=\"false\"/>\n                  <SwapText>$Coval</SwapText>                  \n              </Stack>\n              <Stack direction=\"row\" align=\"flex-start\" spacing=\"1rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                <SwapText>\n                  <Flex width=\"full\" align=\"center\" justifyContent=\"center\" flexWrap=\"wrap\">\n                    <Text  float={'left'}>\n                      from {\n                        chainId == 137 ? \"Matic\" : \n                        chainId == 100 ? \"xDai\" : \n                        chainId == 56 ? \"Binance Smart Chain\" : \n                        chainId == 250 ? \"Fantom\" : \n                        \"Ethereum\"\n                      } to\n                    </Text> \n                    <Image float={'left'} margin={2} w={3} src=\"./next.png\" />\n                    <Select w=\"45%\" value={transferChain}\n                      onChange={(e)=>{\n                        setTransferChain(Number(e.target.value))\n                        console.log(Number(e.target.value))\n                      }}\n                    >\n                      <option value=\"137\" disabled={chainId === 137 ? true : false} >Polygon (Matic)</option>\n                      <option value=\"100\" disabled={chainId === 100 ? true : false}>xDai</option>\n                      <option value=\"56\" disabled={chainId === 56 ? true : false}>Binance Smart Chain</option>\n                      <option value=\"1\" disabled={chainId === 1 ? true : false}>Ethereum Mainnet</option>\n                      <option value=\"250\" disabled={chainId === 250 ? true : false}>Fantom</option>\n                    </Select> \n                  </Flex>\n                </SwapText>\n                { swapAmount > 0 ? (\n                  <Button isDisabled={isInvalid} onClick={transferToChain}>\n                    { isInvalid ? \"Invalid Transfer Amount\" : \"Transfer Now\"}\n                  </Button>\n                ) : null }\n              </Stack>\n            </>    \n          ) : null }\n          {\n          allowance == 0 && balance > 0 && !approving ? (\n            <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n              <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"s\" fontStyle=\"italic\" >\n                <Button onClick={approveCovalFlow} type=\"submit\">\n                  Approve Transfer{/* of up {balance * Math.pow(10, -decimals)} Coval*/}\n                </Button>\n              </Text>\n            </Box>\n          ) : balance == 0 ? (\n            <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n              <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"s\" fontStyle=\"italic\" >\n                You have no Coval to transfer\n              </Text>\n            </Box>\n          ) : !approving ? (\n            <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n              <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"s\" fontStyle=\"italic\" >\n                Approved to transfer up to {allowance * Math.pow(10, -decimals)} Coval. Note: Swaps between networks can take up to 25 minutes.\n              </Text>\n            </Box>\n          ) : null }\n          {/* { !approving && ((Number(balance) > Number(allowance)) || Number(allowance) * Math.pow(10, -decimals) < 1000000) ? (\n            <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n              <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"s\" fontStyle=\"italic\" >\n              <Button onClick={approveCovalFlow} type=\"submit\">\n                  Approve Transfer 1,000,000 Coval\n                </Button>\n              </Text>\n            </Box>\n          ) : null } */}\n          <Tabs>\n            <TabList>\n                <Tab>Incoming</Tab>\n                <Tab>{CHAIN_ID_NAMES[transferChain]}</Tab>\n            </TabList>\n            <TabPanels>\n                <TabPanel>\n                  <BridgeDeposits chainId={chainId}/>\n                </TabPanel>\n                <TabPanel>\n                  {transferChain? (\n                    <BridgeDeposits chainId={transferChain}/>\n                  ) : null}                  \n                </TabPanel>\n            </TabPanels>\n          </Tabs>\n          \n        </Stack>\n      </Flex>\n      {hash ? (\n        <TransactionToast\n          hash={hash}\n          onComplete={() => {\n              if (transfering) {\n                setTransfering(false)\n                getTransferLogs()\n              } else {                \n                setApproving(false)\n                getContractStates()\n              }              \n          }}\n        />\n      ) : null}\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}