{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure, Collapse, FormLabel, useColorMode, Tabs, TabList, Tab, TabPanel, TabPanels } from '@chakra-ui/core';\nimport { HStack } from '@chakra-ui/react';\nimport TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport dynamic from 'next/dynamic';\nimport { isETHAddress } from '../utils';\nimport { Contract } from '@ethersproject/contracts';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport CryptoJS from 'crypto-js';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nimport NFTSlideshow from './embed/NFTSlideshow';\nimport CoinBalance from './partials/CoinBalance';\nimport transakSDK from '@transak/transak-sdk';\nimport Attributes from './partials/Attributes';\nconst AddrModal = dynamic(() => import('./AddrModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./AddrModal')],\n    modules: ['./AddrModal']\n  }\n});\nconst KeysModal = dynamic(() => import('./KeysModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./KeysModal')],\n    modules: ['./KeysModal']\n  }\n});\nconst OfferModal = dynamic(() => import('./OfferModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./OfferModal')],\n    modules: ['./OfferModal']\n  }\n});\nexport default function Nft() {\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    query\n  } = useRouter();\n  const {\n    0: approved,\n    1: setApproved\n  } = useState(false);\n  const {\n    0: useOldMint,\n    1: setUseOldMint\n  } = useState(query.useOldMint);\n  const {\n    0: mintPassword,\n    1: setMintPassword\n  } = useState(query.key);\n  const {\n    0: showOffer,\n    1: setShowOffer\n  } = useState(query.offer || false);\n  const {\n    0: framed,\n    1: setFramed\n  } = useState(query.framed || true);\n  const {\n    0: tokenId,\n    1: setTokenId\n  } = useState(query.id);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    0: noLayout,\n    1: setNoLayout\n  } = useState(query.noLayout);\n  const {\n    0: slideshowOnly,\n    1: setSlideshowOnly\n  } = useState(query.slideshowOnly || false);\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState('');\n  const {\n    0: vaultIPFS,\n    1: setVaultIPFS\n  } = useState('');\n  const {\n    0: vaultImageIPFS,\n    1: setVaultImageIPFS\n  } = useState('');\n  const {\n    0: vaultCiphertextV2,\n    1: setVaultCiphertextV2\n  } = useState('');\n  const {\n    0: vaultDesc,\n    1: setVaultDesc\n  } = useState('');\n  const {\n    0: vaultImage,\n    1: setVaultImage\n  } = useState('');\n  const {\n    0: ownedImage,\n    1: setOwnedImage\n  } = useState('');\n  const {\n    0: vaultValues,\n    1: setVaultValues\n  } = useState([]);\n  const {\n    0: loadedValues,\n    1: setLoadedValues\n  } = useState(false);\n  const {\n    0: vaultDataValues,\n    1: setVaultDataValues\n  } = useState([]);\n  const {\n    0: attributes,\n    1: setAttributes\n  } = useState([]);\n  const {\n    0: vaultAddresses,\n    1: setVaultAddresses\n  } = useState([]);\n  const {\n    0: vaultPrivacy,\n    1: setVaultPrivacy\n  } = useState(false);\n  const {\n    0: vaultTotalValue,\n    1: setVaultTotalValue\n  } = useState(0);\n  const {\n    0: vaultChainId,\n    1: setVaultChainId\n  } = useState(null);\n  const {\n    0: vaultChain,\n    1: setVaultChain\n  } = useState(null);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: currCoin,\n    1: setCurrCoin\n  } = useState('');\n  const {\n    0: currAddr,\n    1: setCurrAddr\n  } = useState('');\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: mine,\n    1: setMine\n  } = useState(false);\n  const {\n    0: claiming,\n    1: setClaiming\n  } = useState(false);\n  const {\n    0: status,\n    1: setStatus\n  } = useState('claimed');\n  const {\n    0: sealed,\n    1: setSealed\n  } = useState(false);\n  const {\n    0: claimedBy,\n    1: setClaimedBy\n  } = useState(null);\n  const {\n    0: mnemonic,\n    1: setMnemonic\n  } = useState('');\n  const {\n    0: privKeyBTC,\n    1: setPrivKeyBTC\n  } = useState('');\n  const {\n    0: privKeyETH,\n    1: setPrivKeyETH\n  } = useState('');\n  const {\n    0: privValues,\n    1: setKeyValues\n  } = useState([]);\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: decryptedEffect,\n    1: setDecryptedEffect\n  } = useState('');\n  const {\n    0: decryptedEffectRunning,\n    1: setDecryptedEffectRunning\n  } = useState(false);\n  const {\n    0: decryptPassword,\n    1: setDecryptPassword\n  } = useState('');\n  const {\n    0: invalidVault,\n    1: setInvalidVault\n  } = useState(false);\n  const {\n    0: hasCheckedNft,\n    1: setHasCheckedNft\n  } = useState(false);\n  const {\n    0: accepting,\n    1: setAccepting\n  } = useState(false);\n  const {\n    0: approving,\n    1: setApproving\n  } = useState(false);\n  const {\n    0: acceptable,\n    1: setAcceptable\n  } = useState(false);\n  const {\n    0: transferPassword,\n    1: setTransferPassword\n  } = useState('');\n  const {\n    0: showTransferPassword,\n    1: setShowTransferPassword\n  } = useState(false);\n  const {\n    0: preTransfering,\n    1: setPreTransfering\n  } = useState(false);\n  const {\n    0: transferToAddress,\n    1: setTransferToAddress\n  } = useState(null);\n  const {\n    0: transfering,\n    1: setTransfering\n  } = useState(false);\n  const {\n    0: owner,\n    1: setOwner\n  } = useState(null);\n  const {\n    0: torus,\n    1: setTorus\n  } = useState(initTorus());\n  const {\n    0: live,\n    1: setLive\n  } = useState(false);\n  const {\n    0: nonce,\n    1: setNonce\n  } = useState(null);\n  const {\n    0: mintSignature,\n    1: setMintSignature\n  } = useState(null);\n  const {\n    0: to,\n    1: setTo\n  } = useState(null);\n  const {\n    0: showVerifyingSignature,\n    1: setShowVerifyingSignature\n  } = useState(false);\n  const {\n    0: showMakingVaultMsg,\n    1: setShowMakingVaultMsg\n  } = useState(false);\n  const {\n    0: minting,\n    1: setMinting\n  } = useState(false);\n  const {\n    0: isCrowdSale,\n    1: setIsCrowdSale\n  } = useState(false);\n  const {\n    0: alternateContractAddress,\n    1: setAlternateContractAddress\n  } = useState(null);\n  const {\n    0: targetAsset,\n    1: setTargetAsset\n  } = useState({\n    name: '',\n    image: '',\n    metadata: ''\n  });\n  const {\n    0: targetContract,\n    1: setTargetContract\n  } = useState({\n    name: '',\n    chain: '',\n    4: '',\n    1: ''\n  }); // const [transferImage, setTransferImage] = useState('')\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  let emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  const {\n    isOpen: isOpenAddrModal,\n    onOpen: onOpenAddrModal,\n    onClose: onCloseAddrModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenKeysModal,\n    onOpen: onOpenKeysModal,\n    onClose: onCloseKeysModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenOfferModal,\n    onOpen: onOpenOfferModal,\n    onClose: onCloseOfferModal\n  } = useDisclosure();\n  const {\n    isOpen,\n    onToggle\n  } = useDisclosure();\n  const {\n    isOpen: isManageAddressOpen,\n    onToggle: onManageAddressToggle\n  } = useDisclosure();\n  const {\n    colorMode\n  } = useColorMode();\n  let transak;\n  let transferImage;\n\n  async function initTorus() {\n    let _torus = new TorusSdk({\n      baseUrl: `${window.location.origin}/serviceworker`,\n      enableLogging: true,\n      network: \"testnet\" // details for test net\n\n    });\n\n    await _torus.init({\n      skipSw: true,\n      skipInit: true,\n      skipPrefetch: true\n    });\n    console.log(\"Initialized Torus\");\n    return _torus;\n  }\n\n  const getVaultContract = (address = null) => {\n    //return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked());\n  };\n\n  const initializeTransak = (address, coin) => {\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',\n      // Your API Key\n      environment: 'PRODUCTION',\n      // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '',\n      // Your customer's wallet address\n      themeColor: '000000',\n      // App theme color\n      fiatCurrency: 'USD',\n      // INR/GBP\n      // fiatAmount: 350,\n      email: '',\n      // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    }); // To get all the events\n\n    transak.on(transak.ALL_EVENTS, data => {\n      console.log(data);\n    }); // This will trigger when the user marks payment is made.\n\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, orderData => {\n      console.log(orderData);\n      transak.close();\n    });\n    transak.init();\n  };\n\n  const checkLiveliness = (tokenId, cb) => {\n    fetch(EMBLEM_API + '/liveliness', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        tokenId: tokenId\n      })\n    }).then(async function (response) {\n      let data = await response.json();\n      setLive(data.live);\n      console.log(\"Liveliness check\", data);\n    });\n    return cb();\n  };\n\n  const transferVault = () => {\n    setTransfering(true);\n    emblemContract.transferFrom(account, transferToAddress, tokenId).then(({\n      hash\n    }) => {\n      setHash(hash);\n    }).catch(error => {});\n  };\n\n  const lazyMint = () => {\n    library.getSigner(account).signMessage('Delayed Minting: ' + tokenId).then(signature => {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + '/lazyMint', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        console.log(\"data\", data.data);\n        setMintSignature(data.data.signature);\n        setNonce(data.data.nonce);\n        setShowVerifyingSignature(true); // setCreating(true)\n\n        setTimeout(() => {\n          delayedMint();\n        }, 500);\n      });\n    });\n  };\n\n  const delayedMint = () => {\n    // setCreating(true)\n    console.log(\"Delayed Minting\");\n    setShowVerifyingSignature(false);\n    setShowMakingVaultMsg(true);\n    setMinting(true);\n    let cipherTextHash = vaultAddresses.filter(address => {\n      return address.coin == \"ETH\";\n    })[0].address;\n    console.log(\"--------------------------------------------------------Delayed Minting\", account, tokenId, cipherTextHash, nonce, mintSignature);\n    handlerContract.buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature).then(({\n      hash\n    }) => {\n      setTimeout(() => {\n        setHash(hash);\n        setShowMakingVaultMsg(false);\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      console.log(\"AAAAAHHHHHH\", error.code);\n      setShowMakingVaultMsg(false); // setMinting(false)\n    });\n  };\n\n  const fireMetaMask = () => {\n    console.log(mintPassword);\n    setAccepting(true);\n    getWitness(witness => {\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;\n      handlerContract.transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature).then(({\n        hash\n      }) => {\n        setTimeout(() => {\n          setHash(hash); // setShowMakingVaultMsg(true)\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      }).catch(error => {\n        setAccepting(false);\n\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(`tx failed.`, error);\n        } else {// setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      });\n    });\n  };\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\" + transferImage);\n    setPreTransfering(true);\n    handlerContract.addPreTransfer(tokenId, \"0x\" + transferImage).then(({\n      hash\n    }) => {\n      // setTimeout(() => {\n      setHash(hash);\n      console.log(\"Set Pre Transfering True\", preTransfering); // setShowMakingVaultMsg(true)\n      // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      if (error !== null && error !== void 0 && error.code) {\n        console.log(\"Error?\");\n        setPreTransfering(false);\n        setShowTransferPassword(false);\n        setTransferPassword('');\n      } else {// setShowTransferPassword(!showTransferPassword? true : false)\n        // setPreTransfering(false)\n        // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  const handleApproveForall = () => {\n    setApproving(true);\n    emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(({\n      hash\n    }) => {\n      setTimeout(() => {\n        setHash(hash); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(`tx failed.`, error);\n      } else {\n        setApproving(false); // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  const deleteVault = () => {\n    library.getSigner(account).signMessage('Delete: ' + tokenId).then(signature => {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + '/v2/delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        location.href = location.href.split(\"/\")[0] + \"/vaults\";\n      });\n    });\n  };\n\n  const getVault = async () => {\n    console.log('getvault');\n    !slideshowOnly ? loadCache() : null; // console.log(\"---------\",EMBLEM_API + '/meta/' + tokenId + '?experimental=true')\n\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json(); // console.log('vault response was ', jsonData)\n\n    if (jsonData.image_ipfs) {// getIPFSImage(jsonData.image_ipfs)\n    }\n\n    if (jsonData.collectionAddress) {\n      setIsCrowdSale(true);\n      setAlternateContractAddress(jsonData.collectionAddress);\n    }\n\n    if (!jsonData.name) {\n      setState({\n        loaded: true\n      });\n      setInvalidVault(true);\n    } else {\n      setStates(jsonData);\n      !slideshowOnly ? saveCache(jsonData) : null;\n      setLoadingApi(false);\n      setInvalidVault(false);\n    }\n\n    {\n      !vaultPrivacy && !loadedValues ? getAllBalancesLive([], tokenId, v => {\n        if (v) {\n          setVaultValues(v);\n        }\n      }) : null;\n    }\n  };\n\n  const getWitness = async cb => {\n    const responce = await fetch(EMBLEM_API + '/witness/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      }\n    });\n    const jsonData = await responce.json(); // console.log('vault response was ', jsonData)\n\n    if (jsonData.signature) {\n      console.log('witness', jsonData);\n      return cb(jsonData);\n    } else {\n      return cb(false);\n    }\n  };\n\n  const setStates = jsonData => {\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\" + framed : null;\n\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2);\n      console.log(\"ciphertextV2\", jsonData.ciphertextV2);\n    }\n\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setOwnedImage(jsonData.ownedImage || null);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)) : null;\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(item => {\n      return item.trait_type === \"key\";\n    })) : null;\n    jsonData.attributes ? setAttributes(jsonData.attributes) : null;\n    setVaultAddresses(jsonData.addresses);\n    setVaultIPFS(jsonData.ipfs || null);\n    setVaultImageIPFS(jsonData.image_ipfs || null);\n    jsonData.targetAsset ? setTargetAsset(jsonData.targetAsset) : null;\n    jsonData.targetContract ? setTargetContract(jsonData.targetAsset) : null;\n\n    if (jsonData.live == false) {\n      checkLiveliness(jsonData.tokenId, () => {});\n    }\n\n    setLive(jsonData.live == false ? false : true);\n    setNonce(jsonData.nonce);\n    setMintSignature(jsonData.signature);\n    setTo(jsonData.to);\n    setVaultChain(jsonData.network);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : jsonData.network == \"xdai\" ? 100 : jsonData.network == \"bsc\" ? 56 : jsonData.network == \"fantom\" ? 250 : jsonData.network == \"bitcoin\" ? 0 : 97);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    } // console.log('inside getstates. mine is ', mine)\n\n\n    setState({\n      loaded: true\n    });\n    let isPvt = jsonData.addresses.filter(item => {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n\n    if (jsonData.sealed) {\n      setSealed(true);\n    } else {\n      setSealed(false);\n    }\n  };\n\n  const getEthBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json(); // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n\n    setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue)); // console.log('get eth balances', jsonData.values)\n\n    return cb(jsonData.values);\n  };\n\n  const getBtcBalance = async (values, address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json(); // setVaultValues(values.concat(jsonData.values))\n\n    return cb(values.concat(jsonData.values));\n  };\n\n  const getNftBalance = async (values, address, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n\n    if (jsonData.length > 0) {\n      // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n      return cb(values.concat(jsonData));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log('responce', responce, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    // setVaultValues([])\n    // console.log(address)\n    if (loadedValues) {\n      return cb(false);\n    }\n\n    setLoadedValues(true);\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log('responce', responce, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log('responce', responce, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const saveCache = vault => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  const loadCache = () => {\n    console.log('cache');\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  };\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature\n    });\n    const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json(); // console.log('getKeys response is ', jsonData)\n\n    return cb(jsonData);\n  };\n\n  const getSignedJWT = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainid', chainId.toString());\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature,\n      tokenId: tokenId\n    });\n    const responce = await fetch('https://tor-us-signer.vercel.app/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  };\n\n  const getRemoteKey = async (tokenId, token, cb) => {\n    let error = false;\n    let keys = await (await torus).getTorusKey(\"tor-us-signer-vercel\", tokenId, {\n      verifier_id: tokenId\n    }, token).catch(err => {\n      error = err.message;\n    });\n\n    if (error) {\n      console.log(\"error\", error);\n      return cb(false);\n    } else {\n      return cb(keys);\n    }\n  };\n\n  const addAddress = async (signature, tokenId, coin, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature,\n      coin: coin\n    });\n    const responce = await fetch(EMBLEM_API + '/address/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  };\n\n  const decryptEmbed = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature\n    });\n    const responce = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  };\n\n  const getContractStates = async () => {\n    console.log(\"Contract states\");\n    let owned = false;\n\n    let _owner;\n\n    try {\n      _owner = await emblemContract.ownerOf(tokenId);\n      finish();\n    } catch (err) {\n      _owner = \"0x0000000000000000000000000000000000000000\";\n      finish();\n    }\n\n    async function finish() {\n      let acceptable = await handlerContract.getPreTransfer(tokenId);\n      let isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n      setApproved(isApproved);\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\");\n      setOwner(_owner);\n      setMine(_owner === account);\n      loadPasswordFromLocalStorage();\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"mine?\", mine);\n    console.log(\"claiming?\", claiming);\n    console.log(\"accepting?\", accepting);\n    console.log(\"acceptable\", acceptable);\n  });\n\n  const hasAddress = coin => {\n    console.log(coin, vaultAddresses.filter(address => {\n      return address.coin == coin;\n    }).length > 0);\n    return vaultAddresses.filter(address => {\n      return address.coin == coin;\n    }).length > 0;\n  };\n\n  const onRenew = async name => {\n    library.getSigner(account).signMessage('Renew: ' + tokenId).then(signature => {\n      let address = vaultAddresses.filter(address => {\n        return address.coin == 'NMC';\n      })[0].address;\n      console.log('signature', signature, name);\n      fetch(EMBLEM_API + '/nmc/renew/' + address, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({\n          \"tokenId\": tokenId,\n          \"signature\": signature,\n          \"name\": name\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        console.log(\"Requested Renew\", data);\n      });\n    });\n  };\n\n  const handleSign = async () => {\n    library.getSigner(account).signMessage('Claim: ' + tokenId).then(signature => {\n      getSignedJWT(signature, tokenId, token => {\n        // console.log(\"Got JWT\", token)\n        getRemoteKey(tokenId, token.token, keys => {\n          // console.log(\"Got Keys\", keys)\n          var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey);\n          let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)); // console.log(\"Decrypted payload locally\", payload)    \n\n          setKeyValues(payload.values);\n          setMnemonic(payload.phrase);\n          let btcKey = window.phrasePathToKey(payload.phrase, vaultAddresses.filter(address => {\n            return address.coin == 'BTC';\n          })[0].path);\n          setPrivKeyBTC(btcKey);\n          let ethKey = window.phrasePathToKey(payload.phrase, vaultAddresses.filter(address => {\n            return address.coin == 'ETH';\n          })[0].path);\n          setPrivKeyETH(ethKey);\n          vaultAddresses.forEach(address => {\n            address.key = window.phrasePathToKey(payload.phrase, address.path);\n          }); // setKeyValues(vaultAddresses)\n\n          onOpenKeysModal();\n        });\n      }); // }\n    });\n  };\n\n  const handleHideAsset = async coin => {\n    library.getSigner(account).signMessage('HideAsset: ' + tokenId).then(signature => {\n      console.log(\"----------------------------------------------------------------\", signature);\n      console.log(coin.name, coin.coin, coin.address);\n      hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, () => {\n        console.log(\"Done hiding coin and getting new balances\");\n      });\n    });\n  };\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/' + tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin ? coin : null,\n        \"address\": address ? address : null,\n        \"name\": name ? name : null,\n        \"signature\": signature ? signature : null\n      })\n    }).then(async function (response) {\n      let data = await response.json();\n      console.log(\"-------\", data);\n      getAllBalances([], tokenId, values => {\n        setVaultValues(values);\n        return cb();\n      });\n    });\n  }\n\n  const handleAddressSign = async coin => {\n    library.getSigner(account).signMessage('Address: ' + tokenId).then(signature => {\n      addAddress(signature, tokenId, coin, result => {\n        getVault();\n      });\n    });\n  };\n\n  const handleOwnedEmbed = async () => {\n    library.getSigner(account).signMessage('Embed: ' + tokenId).then(signature => {\n      decryptEmbed(signature, tokenId, result => {\n        setVaultImage(result.ownedImage);\n      });\n    });\n  };\n\n  const handleClaim = async () => {\n    emblemContract.burn(tokenId).then(({\n      hash\n    }) => {\n      setClaiming(true);\n      setTimeout(() => {\n        setHash(hash);\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    });\n  };\n\n  const pingClaimLogs = cb => {\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId=' + chainId.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    }).then(async function (response) {\n      let data = await response.json();\n      console.log(\"Log check\", data);\n      return cb();\n    });\n  };\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return;\n    }\n\n    setDecryptedEffectRunning(true);\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n    var ctnt = 'Decrypting'; // Your text goes here\n\n    var speed = 5; // ms per frame\n\n    var increment = 8; // frames per step. Must be >2\n\n    var clen = ctnt.length;\n    var si = 0;\n    var stri = 0;\n    var block = '';\n    var fixed = '';\n\n    (function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i);\n        } else {\n          setDecryptedEffectRunning(false);\n        }\n\n        nextFrame(i);\n        si = si + 1;\n      }, speed);\n    })(clen * increment + 1);\n\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n        var letter = theLetters.charAt(num);\n        block = block + letter;\n      }\n\n      if (si == increment - 1) {\n        stri++;\n      }\n\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1);\n        si = 0;\n      } // $(\"#output\").html(fixed + block);\n\n\n      setDecryptedEffect(fixed + block);\n      block = '';\n    }\n  };\n\n  useEffect(() => {\n    console.log('----');\n    getVault();\n  }, []);\n  useEffect(() => {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId || query.noLayout && query.noLayout == 'true' || query.slideshowOnly && query.slideshowOnly == 'true' ? getContractStates() : null; // console.log('in the usefeect that clls getcontractstates')\n  });\n\n  function splitDescription(words) {\n    var desc = words ? words.split('\\n\\n\\n\\n') : [''];\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    console.log(vaultAddresses);\n    let ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      let ethAddress = vaultAddresses.filter(item => {\n        return item.coin === 'ETH';\n      })[0].address;\n      let btcAddress = vaultAddresses.filter(item => {\n        return item.coin === 'BTC';\n      })[0].address;\n      console.log(\"SUCCESS\", vaultAddresses);\n      getAllBalancesByAddress([], ethAddress, btcAddress, values => {\n        setVaultValues(values);\n      }); // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {\n      console.log('WTF', err);\n    }\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\");\n    return vaultAddresses;\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(item => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '');\n        item.address = decrypt(cipherText, key);\n      }\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  function visitOpenSeaLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + (vaultChainId == 137 ? 'matic/' : '') + (alternateContractAddress ? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) + '/' + tokenId, '_blank');\n  }\n\n  function visitLooksRareLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'looksrare.org/collections/' + (vaultChainId == 137 ? 'matic/' : '') + (alternateContractAddress ? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) + '/' + tokenId, '_blank');\n  }\n\n  {\n    alternateContractAddress ? emblemContract = getVaultContract(alternateContractAddress ? alternateContractAddress : null) : null;\n  }\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1039,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1040,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1041,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1042,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1043,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1044,\n      columnNumber: 9\n    }\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              if (localStorage.getItem(\"darkMode\") == 'false') {\n                localStorage.setItem(\"darkMode\",\"true\"); location.href = location.href\n              }\n              `\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1045,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1060,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    privValues: privValues,\n    addresses: vaultAddresses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1062,\n      columnNumber: 7\n    }\n  }), showOffer ? __jsx(OfferModal, {\n    isOpen: isOpenOfferModal,\n    onClose: onCloseOfferModal,\n    tokenId: tokenId,\n    mine: mine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1072,\n      columnNumber: 9\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1082,\n      columnNumber: 9\n    }\n  }), loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1083,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault && !slideshowOnly ? __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1085,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    className: \"NFT\",\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1086,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"blue.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1097,\n      columnNumber: 17\n    }\n  }, \"Vault Network: \", CHAIN_ID_NAMES[vaultChainId]), __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\" // textTransform=\"uppercase\"\n    ,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1126,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null), __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1139,\n      columnNumber: 17\n    }\n  }, vaultValues.length && vaultValues.filter(item => {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultImage,\n    items: vaultValues.map(value => {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1141,\n      columnNumber: 23\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1143,\n      columnNumber: 23\n    }\n  }), mine && ownedImage ? __jsx(Button, {\n    onClick: () => {\n      handleOwnedEmbed();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1147,\n      columnNumber: 21\n    }\n  }, \"(OWNED) Show Full Embed\") : null), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1150,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1151,\n      columnNumber: 19\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1152,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    fontSize: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1153,\n      columnNumber: 23\n    }\n  }, vaultChainId == chainId ? __jsx(Link, {\n    href: \"./vaults?address=\" + owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1155,\n      columnNumber: 25\n    }\n  }, \"Owner: \", owner) : null), __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1160,\n      columnNumber: 23\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1161,\n      columnNumber: 25\n    }\n  }))))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1167,\n      columnNumber: 17\n    }\n  }, __jsx(Tabs, {\n    isFitted: true,\n    variant: \"enclosed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1168,\n      columnNumber: 17\n    }\n  }, __jsx(TabList, {\n    mb: \"1em\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1169,\n      columnNumber: 19\n    }\n  }, __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1170,\n      columnNumber: 21\n    }\n  }, \"One\"), __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1171,\n      columnNumber: 21\n    }\n  }, \"Two\")), __jsx(TabPanels, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1173,\n      columnNumber: 19\n    }\n  }, __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1174,\n      columnNumber: 21\n    }\n  }, vaultPrivacy ? __jsx(Box, {\n    mb: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1176,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1177,\n      columnNumber: 27\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: e => tryDecrypt(e.target.value),\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1180,\n      columnNumber: 27\n    }\n  })) : __jsx(Box, {\n    d: \"flex\",\n    backgroundColor: colorMode == \"light\" ? \"gray.100\" : \"gray.700\",\n    alignItems: \"baseline\",\n    className: \"coin-balance-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1188,\n      columnNumber: 25\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1189,\n      columnNumber: 27\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    mt: 2,\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1190,\n      columnNumber: 29\n    }\n  }, \"Current Contents:  \", __jsx(\"button\", {\n    onClick: () => {\n      getAllBalancesLive([], tokenId, v => {\n        setLoadedValues(false);\n        setVaultValues(v);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1192,\n      columnNumber: 50\n    }\n  }, \" [Refresh Balances]\")), __jsx(Text, {\n    as: \"p\",\n    color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1201,\n      columnNumber: 29\n    }\n  }, \"$\", Number(vaultTotalValue.toFixed(4)).toLocaleString()), vaultValues.length ? vaultValues.map(coin => {\n    return __jsx(Stack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1205,\n        columnNumber: 35\n      }\n    }, __jsx(CoinBalance, {\n      colorMode: colorMode,\n      coin: coin,\n      mine: status === 'claimed' && claimedBy === account || mine,\n      onRenew: onRenew,\n      hideAsset: handleHideAsset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1206,\n        columnNumber: 37\n      }\n    }));\n  }) : __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1210,\n      columnNumber: 34\n    }\n  }), vaultDataValues.length ? vaultDataValues.map(data => {\n    return __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1214,\n        columnNumber: 35\n      }\n    }, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1218,\n      columnNumber: 31\n    }\n  }, \"Nothing in here! Fill 'er up!\") : null))), __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1224,\n      columnNumber: 21\n    }\n  }, __jsx(Attributes, {\n    colorMode: colorMode,\n    attributes: attributes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1225,\n      columnNumber: 23\n    }\n  })))), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1231,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1232,\n      columnNumber: 23\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1233,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1234,\n      columnNumber: 27\n    }\n  }, \"Deposit Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1235,\n      columnNumber: 27\n    }\n  }, vaultAddresses.map(addr => {\n    return __jsx(Button, {\n      className: \"address_nft_button\",\n      ml: 2,\n      mt: 2,\n      \"font-weight\": \"100 !important\",\n      key: addr.address,\n      onClick: () => {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1238,\n        columnNumber: 33\n      }\n    }, addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP' : addr.coin);\n  })), (mine || status === 'claimed') && vaultAddresses.length < 10 ? __jsx(React.Fragment, null, __jsx(\"button\", {\n    className: \"nft_button\",\n    onClick: () => {\n      onManageAddressToggle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1258,\n      columnNumber: 29\n    }\n  }, \"Manage Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1261,\n      columnNumber: 29\n    }\n  }, __jsx(Collapse, {\n    isOpen: isManageAddressOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1262,\n      columnNumber: 31\n    }\n  }, !hasAddress('DOGE') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('DOGE');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1264,\n      columnNumber: 35\n    }\n  }, \"Add DOGE\") : null, !hasAddress('DGB') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('DGB');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1267,\n      columnNumber: 35\n    }\n  }, \"Add Digibyte\") : null, !hasAddress('NMC') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('NMC');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1270,\n      columnNumber: 35\n    }\n  }, \"Add Namecoin\") : null, !hasAddress('LTC') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('LTC');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1273,\n      columnNumber: 35\n    }\n  }, \"Add Litecoin\") : null, !hasAddress('MONA') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('MONA');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1276,\n      columnNumber: 35\n    }\n  }, \"Add Mona\") : null, !hasAddress('TEZOS') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('TEZOS');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1279,\n      columnNumber: 35\n    }\n  }, \"Add Tezos\") : null, !hasAddress('SOLANA') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('SOLANA');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1282,\n      columnNumber: 35\n    }\n  }, \"Add Solana\") : null))) : null))) : null, !(status === 'claimed') && (vaultChainId === 1 || vaultChainId === 4 || vaultChainId === 137) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1315,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"50%\",\n    m: 5,\n    onClick: () => {\n      visitOpenSeaLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1317,\n      columnNumber: 25\n    }\n  }, \"Opensea\"), __jsx(Button, {\n    className: \"nft_button\",\n    width: \"50%\",\n    m: 5,\n    onClick: () => {\n      visitLooksRareLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1325,\n      columnNumber: 25\n    }\n  }, \"LooksRare\"), showOffer ? __jsx(Button, {\n    className: \"\",\n    onClick: () => {\n      onOpenOfferModal();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1334,\n      columnNumber: 27\n    }\n  }, mine ? 'My Offers' : 'Make an Offer', \" (NFT\\xB2NFT)\") : null) : null, !(status === 'claimed') && mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1342,\n      columnNumber: 22\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1343,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: onToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1344,\n      columnNumber: 27\n    }\n  }, \"Transfer Vault\"), __jsx(Collapse, {\n    isOpen: isOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1345,\n      columnNumber: 27\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1346,\n      columnNumber: 29\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"owner-address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1347,\n      columnNumber: 29\n    }\n  }, \"Address\"), __jsx(Input, {\n    mt: 1,\n    type: \"text\",\n    id: \"transferAddress\",\n    value: transferToAddress || '',\n    onChange: e => {\n      console.log(\"Transfer to\", e.target.value);\n      setTransferToAddress(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1348,\n      columnNumber: 31\n    }\n  })), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1360,\n      columnNumber: 29\n    }\n  }, __jsx(Button, {\n    isDisabled: !isETHAddress(transferToAddress),\n    onClick: () => {\n      onToggle();\n      transferVault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1361,\n      columnNumber: 31\n    }\n  }, \"Transfer Now\")))))) : null, mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1372,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: () => {\n      if (!approved) {\n        return handleApproveForall();\n      } else {\n        let key = CryptoJS.lib.WordArray.random(128 / 8).toString();\n        let sha = CryptoJS.SHA256(key).toString();\n        console.log('plain', key);\n        console.log('sha', sha);\n        setTransferPassword(key);\n        transferImage = sha;\n        setTimeout(() => {\n          addPreTransfer();\n        }, 500);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1373,\n      columnNumber: 23\n    }\n  }, \" \", approved ? \"Get Link (Send Vault Via Link)\" : \"Approve Gifting\", \" \"))) : null, (showTransferPassword || mintPassword) && acceptable ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1394,\n      columnNumber: 23\n    }\n  }, __jsx(Link, {\n    href: location.protocol + '//' + location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1395,\n      columnNumber: 25\n    }\n  }, \"Copy Gift Link\"), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1396,\n      columnNumber: 25\n    }\n  }, \"Password: \", transferPassword || mintPassword)) : null, acceptable && claimedBy !== account ? __jsx(React.Fragment, null, __jsx(Button, {\n    mt: 2,\n    width: \"100%\",\n    onClick: () => {\n      fireMetaMask();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1401,\n      columnNumber: 23\n    }\n  }, \"Accept\"), __jsx(Input, {\n    mt: 2,\n    type: \"password\",\n    id: \"mintPassword\",\n    minLength: 3,\n    maxLength: 200,\n    value: mintPassword || '',\n    onChange: e => {\n      console.log('grrr', e.target.value, mintPassword);\n      setMintPassword(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1402,\n      columnNumber: 23\n    }\n  })) : null, !(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1418,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      handleClaim();\n    },\n    isDisabled: claiming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1419,\n      columnNumber: 23\n    }\n  }, claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)')) // || !live && nonce && mintSignature && vaultCiphertextV2 && to == account\n  : status === 'claimed' && claimedBy === account && vaultChainId === chainId ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1431,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1432,\n      columnNumber: 23\n    }\n  }, \"Get Keys\")) : null, !live && to == account && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg ? __jsx(React.Fragment, null, useOldMint == \"true\" ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: delayedMint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1440,\n      columnNumber: 25\n    }\n  }, \"Mint Me v1\") : __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: lazyMint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1442,\n      columnNumber: 25\n    }\n  }, \"Mint Vault \")) : null, (!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: deleteVault,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1447,\n      columnNumber: 19\n    }\n  }, \"Delete Vault \") : null, showVerifyingSignature ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1450,\n      columnNumber: 19\n    }\n  }, \"Verifying Signature ...\") : null, showMakingVaultMsg ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1455,\n      columnNumber: 19\n    }\n  }, \"Minting Vault ...\") : null), vaultIPFS ? __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1461,\n      columnNumber: 19\n    }\n  }, __jsx(HStack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1462,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    target: \"new\",\n    mb: 2,\n    ml: 35,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1463,\n      columnNumber: 23\n    }\n  }, \"View Metadata on IPFS \"), vaultImageIPFS ? __jsx(Link, {\n    mb: 2,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultImageIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1465,\n      columnNumber: 25\n    }\n  }, \"View Image on IPFS \") : null)) : null, sealed ? __jsx(Box, {\n    d: \"flex\",\n    mb: 2,\n    ml: 35,\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1471,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1472,\n      columnNumber: 23\n    }\n  }, \"*This vault is sealed forever.\")) : null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1475,\n      columnNumber: 17\n    }\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1476,\n      columnNumber: 42\n    }\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1479,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1480,\n      columnNumber: 21\n    }\n  }), accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving ? \"Handling Approval Flow ...\" : transfering ? \"Transfering Vault ...\" : minting ? \"Minting Vault\" : \"Generating Gift Link ...\") : null)) : vaultValues.length > 0 && slideshowOnly ? __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1487,\n      columnNumber: 11\n    }\n  }, vaultValues.length && vaultValues.filter(item => {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultValues[0].image,\n    items: vaultValues.filter(value => {\n      return value.image !== vaultValues[0].image;\n    }).map(value => {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1489,\n      columnNumber: 17\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1491,\n      columnNumber: 17\n    }\n  })) : invalidVault ? __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1496,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1497,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1501,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1503,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      if (claiming && !accepting && !preTransfering) {\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account);\n        pingClaimLogs(() => {\n          location.href = location.origin + '/nft?id=' + tokenId;\n        });\n      } else if (preTransfering) {\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        setApproving(false);\n        getVault();\n        setHash(null);\n      } else if (transfering) {\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else if (minting) {\n        checkLiveliness(tokenId, () => {\n          setMinting(false);\n          setLive(true); // setShowMakingVaultMsg(false)\n          // location.href = location.origin + '/nft?id=' + tokenId\n        });\n      } else {\n        console.log('minting', minting);\n        console.log('claiming', claiming);\n        console.log('accepting', accepting);\n        console.log('preTransfering', preTransfering);\n        console.log('approving', approving);\n        console.log(\"Unknown state\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1510,\n      columnNumber: 11\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1556,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","Link","Alert","AlertIcon","useDisclosure","Collapse","FormLabel","useColorMode","Tabs","TabList","Tab","TabPanel","TabPanels","HStack","TorusSdk","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","dynamic","isETHAddress","Contract","TransactionToast","EMBLEM_API","contractAddresses","useContract","CHAIN_ID_NAMES","CryptoJS","ReactMarkdown","gfm","Embed","NFTSlideshow","CoinBalance","transakSDK","Attributes","AddrModal","KeysModal","OfferModal","Nft","account","chainId","library","query","approved","setApproved","useOldMint","setUseOldMint","mintPassword","setMintPassword","key","showOffer","setShowOffer","offer","framed","setFramed","tokenId","setTokenId","id","experimental","setExperimental","noLayout","setNoLayout","slideshowOnly","setSlideshowOnly","vaultName","setVaultName","vaultIPFS","setVaultIPFS","vaultImageIPFS","setVaultImageIPFS","vaultCiphertextV2","setVaultCiphertextV2","vaultDesc","setVaultDesc","vaultImage","setVaultImage","ownedImage","setOwnedImage","vaultValues","setVaultValues","loadedValues","setLoadedValues","vaultDataValues","setVaultDataValues","attributes","setAttributes","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","vaultChain","setVaultChain","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","state","setState","loaded","mine","setMine","claiming","setClaiming","status","setStatus","sealed","setSealed","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","privValues","setKeyValues","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","hasCheckedNft","setHasCheckedNft","accepting","setAccepting","approving","setApproving","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","preTransfering","setPreTransfering","transferToAddress","setTransferToAddress","transfering","setTransfering","owner","setOwner","torus","setTorus","initTorus","live","setLive","nonce","setNonce","mintSignature","setMintSignature","to","setTo","showVerifyingSignature","setShowVerifyingSignature","showMakingVaultMsg","setShowMakingVaultMsg","minting","setMinting","isCrowdSale","setIsCrowdSale","alternateContractAddress","setAlternateContractAddress","targetAsset","setTargetAsset","name","image","metadata","targetContract","setTargetContract","chain","handlerContract","vaultHandler","vaultHandlerAbi","emblemContract","emblemVault","emblemAbi","isOpen","isOpenAddrModal","onOpen","onOpenAddrModal","onClose","onCloseAddrModal","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","isOpenOfferModal","onOpenOfferModal","onCloseOfferModal","onToggle","isManageAddressOpen","onManageAddressToggle","colorMode","transak","transferImage","_torus","baseUrl","window","location","origin","enableLogging","network","init","skipSw","skipInit","skipPrefetch","console","log","getVaultContract","address","getSigner","connectUnchecked","initializeTransak","coin","apiKey","environment","defaultCryptoCurrency","walletAddress","themeColor","fiatCurrency","email","redirectURL","hostURL","widgetHeight","widgetWidth","on","ALL_EVENTS","data","EVENTS","TRANSAK_ORDER_SUCCESSFUL","orderData","close","checkLiveliness","cb","fetch","method","headers","service","chainid","toString","body","JSON","stringify","then","response","json","transferVault","transferFrom","catch","error","lazyMint","signMessage","signature","setTimeout","delayedMint","cipherTextHash","filter","buyWithSignature","code","fireMetaMask","getWitness","witness","transferWithCode","addPreTransfer","handleApproveForall","setApprovalForAll","deleteVault","href","split","getVault","loadCache","responce","jsonData","image_ipfs","collectionAddress","setStates","saveCache","getAllBalancesLive","v","includes","ciphertextV2","description","totalValue","values","concat","item","trait_type","addresses","ipfs","isPvt","length","getEthBalances","Number","getBtcBalance","getNftBalance","getAllBalances","balances","getAllBalancesByAddress","ethAddress","btcAddress","vault","localStorage","setItem","parse","getItem","savePasswordToLocalStorage","loadPasswordFromLocalStorage","storedPw","getKeys","myHeaders","Headers","append","raw","redirect","getSignedJWT","getRemoteKey","token","keys","getTorusKey","verifier_id","err","message","addAddress","decryptEmbed","getContractStates","owned","_owner","ownerOf","finish","getPreTransfer","isApproved","isApprovedForAll","_from","hasAddress","onRenew","handleSign","bytes","AES","decrypt","privateKey","payload","enc","Utf8","phrase","btcKey","phrasePathToKey","path","ethKey","forEach","handleHideAsset","hideAsset","handleAddressSign","result","handleOwnedEmbed","handleClaim","burn","pingClaimLogs","startDecryptEffect","theLetters","ctnt","speed","increment","clen","si","stri","block","fixed","rustle","i","nextFrame","pos","num","Math","floor","random","letter","charAt","splitDescription","words","desc","trim","tryDecrypt","ciphertext","replace","decryptAddresses","getAddresses","cipherText","decryptedData","visitOpenSeaLink","open","visitLooksRareLink","__html","toLocaleString","type","map","value","canSwipe","e","target","toFixed","attribute_key","addr","lib","WordArray","sha","SHA256","protocol","host"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n  Tooltip,\n  Collapse,\n  FormControl,\n  FormLabel,\n  useColorMode,\n  IconButton,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanel,\n  TabPanels\n} from '@chakra-ui/core'\n\nimport {HStack, VStack, Circle } from '@chakra-ui/react'\nimport TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { isETHAddress, validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\nimport { CHAIN_ID_NAMES } from '../utils'\nimport CryptoJS from 'crypto-js'\nimport { addTokenToWallet, addMany } from '../public/web3'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport Embed from './Embed'\nimport NFTSlideshow from './embed/NFTSlideshow'\nimport CoinBalance from './partials/CoinBalance'\nimport { chakra } from '@chakra-ui/system'\nimport transakSDK from '@transak/transak-sdk'\nimport Attributes from './partials/Attributes';\ndeclare global {\n  interface Window { phraseToKey: any, phrasePathToKey: any }\n}\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\nconst OfferModal = dynamic(() => import('./OfferModal'))\n\nexport default function Nft() {\n  \n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [approved, setApproved] = useState(false)\n  const [useOldMint, setUseOldMint] = useState(query.useOldMint)\n  const [mintPassword, setMintPassword] = useState(query.key)\n  const [showOffer, setShowOffer] = useState(query.offer || false)\n  const [framed, setFramed] = useState(query.framed || true)\n  const [tokenId, setTokenId] = useState(query.id)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [noLayout, setNoLayout] = useState(query.noLayout)\n  const [slideshowOnly, setSlideshowOnly] = useState(query.slideshowOnly || false)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultIPFS, setVaultIPFS] = useState('')\n  const [vaultImageIPFS, setVaultImageIPFS] = useState('')\n  const [vaultCiphertextV2, setVaultCiphertextV2] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [ownedImage, setOwnedImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [loadedValues, setLoadedValues] = useState(false)\n  const [vaultDataValues, setVaultDataValues] = useState([])\n  const [attributes, setAttributes] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [vaultChain, setVaultChain] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [sealed, setSealed] = useState(false)\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [privValues, setKeyValues] = useState([])\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [hasCheckedNft, setHasCheckedNft] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n  const [preTransfering, setPreTransfering] = useState(false)\n  const [transferToAddress, setTransferToAddress] = useState(null)\n  const [transfering, setTransfering] = useState(false)\n  const [owner, setOwner] = useState(null)\n  const [torus, setTorus] = useState(initTorus())\n  const [live, setLive] = useState(false)\n  const [nonce, setNonce] = useState(null)\n  const [mintSignature, setMintSignature] = useState(null)\n  const [to, setTo] = useState(null)\n  const [showVerifyingSignature, setShowVerifyingSignature] = useState(false)\n  const [showMakingVaultMsg, setShowMakingVaultMsg] = useState(false)\n  const [minting, setMinting] = useState(false)\n  const [isCrowdSale, setIsCrowdSale] = useState(false)\n  const [alternateContractAddress, setAlternateContractAddress] = useState(null)\n  const [targetAsset, setTargetAsset] = useState({name: '', image: '', metadata: ''})\n  const [targetContract, setTargetContract] = useState({name: '', chain: '', 4: '', 1: ''})\n  // const [transferImage, setTransferImage] = useState('')\n  \n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  let emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n  const { isOpen: isOpenOfferModal, onOpen: onOpenOfferModal, onClose: onCloseOfferModal } = useDisclosure()\n  const { isOpen, onToggle } = useDisclosure()\n  const { isOpen: isManageAddressOpen, onToggle: onManageAddressToggle } = useDisclosure()\n\n  const { colorMode } = useColorMode()\n\n  let transak\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  let transferImage;\n\n  async function initTorus() {\n    let _torus = new TorusSdk({\n      baseUrl: `${window.location.origin}/serviceworker`,\n      enableLogging: true,\n      network: \"testnet\", // details for test net\n    });\n    await _torus.init({skipSw: true, skipInit: true, skipPrefetch: true})\n    console.log(\"Initialized Torus\")\n    return _torus\n  }\n\n  const getVaultContract = (address = null) =>{\n    //return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  const initializeTransak = (address?: string, coin? : string)=>{\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',  // Your API Key\n      environment: 'PRODUCTION', // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '', // Your customer's wallet address\n      themeColor: '000000', // App theme color\n      fiatCurrency: 'USD', // INR/GBP\n      // fiatAmount: 350,\n      email: '', // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    });\n  \n    // To get all the events\n    transak.on(transak.ALL_EVENTS, (data) => {\n      console.log(data)\n    });\n  \n    // This will trigger when the user marks payment is made.\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, (orderData) => {\n      console.log(orderData);\n      transak.close();\n    });\n  \n    transak.init()\n  }\n\n  const checkLiveliness = (tokenId, cb)=>{\n    fetch(EMBLEM_API + '/liveliness', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({tokenId: tokenId}),\n    }).then(async function (response) {\n      let data = await response.json()\n      setLive(data.live)\n      console.log(\"Liveliness check\", data)\n    })\n    return cb()\n  }\n\n  const transferVault = () => {\n    setTransfering(true)\n    ;(emblemContract as Contract).transferFrom(account, transferToAddress, tokenId)\n    .then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n    .catch((error: ErrorWithCode) => {})\n  }\n\n  const lazyMint = () =>{\n    library.getSigner(account)\n    .signMessage('Delayed Minting: ' + tokenId)\n    .then((signature) => {\n      console.log(\"sig\", signature)\n      fetch(EMBLEM_API + '/lazyMint', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({tokenId: tokenId, signature: signature}),\n      }).then(async function (response) {\n            let data = await response.json()\n            console.log(\"data\", data.data)\n            setMintSignature(data.data.signature)\n            setNonce(data.data.nonce)\n            setShowVerifyingSignature(true)\n            // setCreating(true)\n            setTimeout(()=>{\n              delayedMint()\n            }, 500)\n      })\n    })\n  }\n\n  const delayedMint = () => {\n    // setCreating(true)\n      console.log(\"Delayed Minting\")\n      setShowVerifyingSignature(false)\n      setShowMakingVaultMsg(true)\n      setMinting(true)\n      let cipherTextHash = vaultAddresses.filter(address=>{ return address.coin == \"ETH\"})[0].address\n      console.log(\"--------------------------------------------------------Delayed Minting\", account, tokenId, cipherTextHash, nonce, mintSignature)\n      ;(handlerContract as Contract)\n      .buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n          setShowMakingVaultMsg(false)\n          \n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n          console.log(\"AAAAAHHHHHH\", error.code)\n          setShowMakingVaultMsg(false)\n          // setMinting(false)\n      })    \n  }\n\n  const fireMetaMask = () => {\n    console.log(mintPassword)\n    setAccepting(true)\n    getWitness(witness=>{\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;(handlerContract as Contract)\n      .transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        setAccepting(false)\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          // setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n    })\n    \n  }\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\"+transferImage)\n    setPreTransfering(true)\n    ;(handlerContract as Contract)\n      .addPreTransfer(tokenId, \"0x\"+transferImage)\n      .then(({ hash }: { hash: string }) => {\n        // setTimeout(() => {\n          setHash(hash)\n          console.log(\"Set Pre Transfering True\", preTransfering)\n          // setShowMakingVaultMsg(true)\n        // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code){   \n            console.log(\"Error?\")       \n            setPreTransfering(false)\n            setShowTransferPassword(false)\n            setTransferPassword('')\n        } else {\n          // setShowTransferPassword(!showTransferPassword? true : false)\n          // setPreTransfering(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const handleApproveForall = () => {\n    setApproving(true)\n    ;(emblemContract as Contract)\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const deleteVault = () =>{\n    library.getSigner(account)\n      .signMessage('Delete: ' + tokenId)\n      .then((signature) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_API + '/v2/delete', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata'\n          },\n          body: JSON.stringify({tokenId: tokenId, signature: signature, chainId: chainId.toString()}),\n        }).then(async function (response){\n          let data = await response.json()\n          location.href = location.href.split(\"/\")[0] + \"/vaults\"\n        })\n      })\n  }\n\n  const getVault = async () => {\n    console.log('getvault')\n    !slideshowOnly ? loadCache() : null\n    // console.log(\"---------\",EMBLEM_API + '/meta/' + tokenId + '?experimental=true')\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log('vault response was ', jsonData)\n    if (jsonData.image_ipfs) {\n      // getIPFSImage(jsonData.image_ipfs)\n    }\n    if (jsonData.collectionAddress){\n      setIsCrowdSale(true)\n      setAlternateContractAddress(jsonData.collectionAddress)\n    }\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      setStates(jsonData)\n      !slideshowOnly? saveCache(jsonData) : null\n      setLoadingApi(false)\n      setInvalidVault(false)\n    }\n    {\n      !vaultPrivacy && !loadedValues ?    \n      getAllBalancesLive([], tokenId, (v)=>{\n        if (v) {\n          setVaultValues(v)\n        }        \n      }) : null\n    }\n  }\n\n  const getWitness = async (cb) => {\n    const responce = await fetch(EMBLEM_API + '/witness/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log('vault response was ', jsonData)\n    if (jsonData.signature) {\n      console.log('witness', jsonData)\n      return cb(jsonData)\n    } else {\n      return cb(false)\n    }\n  }\n\n  const setStates = (jsonData) => {\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\"+framed : null\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2)\n      console.log(\"ciphertextV2\", jsonData.ciphertextV2)\n    }\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setOwnedImage(jsonData.ownedImage || null)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)): null\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(item=>{return item.trait_type === \"key\"})): null\n    jsonData.attributes ? setAttributes(jsonData.attributes): null\n    setVaultAddresses(jsonData.addresses)\n    setVaultIPFS(jsonData.ipfs || null)\n    setVaultImageIPFS(jsonData.image_ipfs || null)\n    jsonData.targetAsset? setTargetAsset(jsonData.targetAsset) : null\n    jsonData.targetContract? setTargetContract(jsonData.targetAsset) : null\n    if (jsonData.live == false) {\n      checkLiveliness(jsonData.tokenId, ()=>{\n\n      })\n    }\n    setLive(jsonData.live == false ? false : true)\n    setNonce(jsonData.nonce)\n    setMintSignature(jsonData.signature)\n    setTo(jsonData.to)\n    setVaultChain(jsonData.network)\n    setVaultChainId(\n      jsonData.network == 'mainnet' ? 1 : \n      jsonData.network == \"rinkeby\" ? 4 : \n      jsonData.network == \"mumbai\" ? 80001 : \n      jsonData.network == \"matic\" ? 137 : \n      jsonData.network == \"xdai\" ? 100 : \n      jsonData.network == \"bsc\" ? 56 : \n      jsonData.network == \"fantom\" ? 250 : \n      jsonData.network == \"bitcoin\" ? 0 : \n      97\n    )\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    // console.log('inside getstates. mine is ', mine)\n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)    \n    if (jsonData.sealed) {\n      setSealed(true)\n    } else {\n      setSealed(false)\n    }\n  }\n\n  const getEthBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n    return cb(jsonData.values)\n  }\n\n  const getBtcBalance = async (values, address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // setVaultValues(values.concat(jsonData.values))\n    return cb(values.concat(jsonData.values))\n  }\n\n  const getNftBalance = async (values, address, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    if (jsonData.length > 0) {\n      // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n      return cb(values.concat(jsonData))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    // setVaultValues([])\n    // console.log(address)\n    if (loadedValues) {\n      return cb(false)\n    }\n    setLoadedValues(true)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true' , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const saveCache = (vault) => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)) // Save new state for later\n  }\n\n  const loadCache = () => {\n    console.log('cache')\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')) // Load vaults from storage before updating from server!\n    if (vault) {\n      setState({ loaded: true })\n      setStates(vault)\n      setLoadingApi(true)\n    }\n  }\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword) // Save new state for later\n  }\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword')\n    storedPw && acceptable ? setMintPassword(storedPw) : null //setMintPassword(null)\n  }\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    // console.log('getKeys response is ', jsonData)\n    return cb(jsonData)\n  }\n\n  const getSignedJWT = async (signature, tokenId, cb)=>{\n    var myHeaders = new Headers()\n    myHeaders.append('chainid', chainId.toString())\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, tokenId: tokenId })\n    const responce = await fetch('https://tor-us-signer.vercel.app/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getRemoteKey = async (tokenId, token, cb)=> {   \n    let error = false\n    let keys = await (await torus).getTorusKey(\n        \"tor-us-signer-vercel\", \n        tokenId,\n        { verifier_id: tokenId }, \n        token, \n      ).catch(err=>{\n        error = err.message\n      })\n      if (error) {\n        console.log(\"error\", error)\n        return cb(false)\n      } else {\n        return cb(keys)\n      }\n  }\n\n  const addAddress = async (signature, tokenId, coin, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, coin: coin })\n    const responce = await fetch(EMBLEM_API + '/address/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const decryptEmbed = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    console.log(\"Contract states\")\n    let owned = false\n    let _owner\n    try {\n      _owner  = await emblemContract.ownerOf(tokenId)\n      finish()\n    } catch(err){\n      _owner = \"0x0000000000000000000000000000000000000000\"\n      finish()\n    }\n\n    async function finish(){\n      let acceptable = await handlerContract.getPreTransfer(tokenId)\n      let isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId])\n      setApproved(isApproved)\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n      setOwner(_owner)\n      setMine(_owner === account)\n      loadPasswordFromLocalStorage()\n    }\n    \n  }\n\n  useEffect(()=>{\n    console.log(\"mine?\", mine)\n    console.log(\"claiming?\", claiming)\n    console.log(\"accepting?\", accepting)\n    console.log(\"acceptable\", acceptable)\n  })\n\n  const hasAddress = (coin)=>{\n    console.log(coin, vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0)\n    return vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0\n  }\n\n  const onRenew = async (name) => { \n    library\n      .getSigner(account)\n      .signMessage('Renew: ' + tokenId)\n      .then((signature) => {\n        let address = vaultAddresses.filter(address=>{ return address.coin == 'NMC'})[0].address\n        console.log('signature', signature, name)\n        fetch(EMBLEM_API + '/nmc/renew/' + address, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata',\n            chainid: chainId.toString()\n          },\n          body: JSON.stringify({\n                \"tokenId\": tokenId,\n                \"signature\": signature,\n                \"name\": name\n              })\n        }).then(async function (response) {\n          let data = await response.json()\n          console.log(\"Requested Renew\", data)\n          \n        })\n      })\n  }\n  \n  const handleSign = async () => {\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + tokenId)\n      .then((signature) => {\n        getSignedJWT(signature, tokenId, (token)=>{\n          // console.log(\"Got JWT\", token)\n          getRemoteKey(tokenId, token.token, (keys)=>{\n            // console.log(\"Got Keys\", keys)\n            var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey)\n            let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n            // console.log(\"Decrypted payload locally\", payload)    \n            setKeyValues(payload.values)\n            setMnemonic(payload.phrase)\n            \n            let btcKey = window.phrasePathToKey(payload.phrase, vaultAddresses.filter(address=>{ return address.coin == 'BTC'})[0].path)\n            setPrivKeyBTC(btcKey)\n            let ethKey = window.phrasePathToKey(payload.phrase, vaultAddresses.filter(address=>{ return address.coin == 'ETH'})[0].path)\n            setPrivKeyETH(ethKey)\n            vaultAddresses.forEach(address=>{              \n              address.key = window.phrasePathToKey(payload.phrase,address.path)\n            })\n            // setKeyValues(vaultAddresses)\n            onOpenKeysModal()\n          })          \n        })\n      // }\n    })\n  }\n\n  const handleHideAsset = async (coin) => {\n    library\n      .getSigner(account)\n      .signMessage('HideAsset: ' + tokenId)\n      .then((signature) => {\n\n        console.log(\"----------------------------------------------------------------\", signature)\n        console.log(coin.name, coin.coin, coin.address)\n        hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, ()=>{\n          console.log(\"Done hiding coin and getting new balances\")\n        })\n      })\n  }\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/'+tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin? coin: null,\n        \"address\": address? address: null,\n        \"name\": name? name: null,\n        \"signature\": signature? signature: null\n      })\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"-------\", data)\n      getAllBalances([], tokenId, (values)=>{\n        setVaultValues(values)\n        return cb()\n      })\n    }) \n  }\n\n  const handleAddressSign = async (coin: string) => {\n    library\n      .getSigner(account)\n      .signMessage('Address: ' + tokenId)\n      .then((signature) => {\n        addAddress(signature, tokenId, coin, (result) => {\n          getVault()\n        })\n      })\n  }\n\n  const handleOwnedEmbed = async () => {\n    library\n      .getSigner(account)\n      .signMessage('Embed: ' + tokenId)\n      .then((signature) => {\n        decryptEmbed(signature, tokenId, (result) => {\n          setVaultImage(result.ownedImage)\n        })        \n      })\n  }\n\n  const handleClaim = async () => {\n    emblemContract.burn(tokenId).then(({ hash }: { hash: string }) => {\n      setClaiming(true)\n      setTimeout(() => {\n        setHash(hash)\n      }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    })\n  }\n\n  const pingClaimLogs = (cb)=>{\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId='+chainId.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"Log check\", data)\n      return cb()\n    })    \n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random())\n        //Get random letter\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      // $(\"#output\").html(fixed + block);\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    console.log('----')\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    \n    (account && chainId && vaultChainId && chainId == vaultChainId) || ((query.noLayout && query.noLayout == 'true') || (query.slideshowOnly && query.slideshowOnly == 'true')) ? getContractStates() : null\n    // console.log('in the usefeect that clls getcontractstates')\n  })\n\n  function splitDescription(words) {\n    var desc = words? words.split('\\n\\n\\n\\n'): ['']\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    console.log(vaultAddresses)\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      let ethAddress = vaultAddresses.filter((item) => {return item.coin === 'ETH'})[0].address\n      let btcAddress = vaultAddresses.filter((item) => {return item.coin === 'BTC'})[0].address\n      console.log(\"SUCCESS\", vaultAddresses)\n      getAllBalancesByAddress([], ethAddress, btcAddress, (values)=>{\n        setVaultValues(values)\n      })\n      // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {console.log('WTF', err)}\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\")\n    return vaultAddresses\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach((item) => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '')\n        item.address = decrypt(cipherText, key)\n      }      \n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  function visitOpenSeaLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : '') +\n      'opensea.io/assets/' + \n      (vaultChainId == 137 ? 'matic/' : '') +\n      (alternateContractAddress? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      tokenId \n    , '_blank')\n  }\n\n  function visitLooksRareLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : '') +\n      'looksrare.org/collections/' + \n      (vaultChainId == 137 ? 'matic/' : '') +\n      (alternateContractAddress? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      tokenId \n    , '_blank')\n  }\n\n  { alternateContractAddress?\n    emblemContract = getVaultContract(alternateContractAddress? alternateContractAddress: null)\n  : null}\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n        <script\n            dangerouslySetInnerHTML={{\n              __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              if (localStorage.getItem(\"darkMode\") == 'false') {\n                localStorage.setItem(\"darkMode\",\"true\"); location.href = location.href\n              }\n              `,\n            }}\n          />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n        privValues={privValues}\n        addresses={vaultAddresses}\n      />\n      {showOffer ? (\n        <OfferModal\n          isOpen={isOpenOfferModal}\n          onClose={onCloseOfferModal}\n          tokenId={tokenId}\n          mine={mine}\n        />\n      ) : null}\n      \n\n      {/* <Loader loaded={state.loaded}> */}\n        <Box height=\"40px\"></Box>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault && !slideshowOnly ? (          \n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                className=\"NFT\" \n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"blue.500\"\n                >\n                  Vault Network: {CHAIN_ID_NAMES[vaultChainId]}\n                </Box>\n                {/* {isCrowdSale ? (\n                  <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"red.500\"\n                >\n                  Part of a crowdsale, sealed for 1 week.\n                </Box>\n                ) : null} */}\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  // textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null}\n                </Box>\n                <Stack className=\"NFT-content\" align=\"center\">\n                  { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                      <NFTSlideshow name={vaultName} image={vaultImage} items={vaultValues.map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n                    ) : (\n                      <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n                    )\n                  }\n                  {mine && ownedImage ? (\n                    <Button onClick={() => {handleOwnedEmbed()}}>(OWNED) Show Full Embed</Button>\n                  ): null}\n                </Stack>\n                <Stack align=\"center\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                    <Stack>\n                      <Text fontSize=\"xs\">\n                      { vaultChainId == chainId ? (\n                        <Link href={\"./vaults?address=\"+owner}>\n                          Owner: {owner}\n                        </Link>\n                      ) : null }\n                      </Text>\n                      <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" className=\"md\">\n                        <ReactMarkdown plugins={[gfm]} children={splitDescription(vaultDesc)} />\n                      </Text>\n                      \n                    </Stack>                    \n                  </Box>                    \n                </Stack>\n                <Box p=\"6\">\n                <Tabs isFitted variant='enclosed'>\n                  <TabList mb='1em'>\n                    <Tab>One</Tab>\n                    <Tab>Two</Tab>\n                  </TabList>\n                  <TabPanels>\n                    <TabPanel>\n                      {vaultPrivacy ? (\n                        <Box mb={5}>\n                          <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                            {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                          </Text>\n                          <Input\n                            type=\"password\"\n                            id=\"vault-password\"\n                            onChange={(e) => tryDecrypt(e.target.value)}\n                            aria-describedby=\"password-helper-text\"\n                          />\n                        </Box>\n                      ) : (\n                        <Box d=\"flex\" backgroundColor={colorMode == \"light\"? \"gray.100\": \"gray.700\"} alignItems=\"baseline\" className=\"coin-balance-content\">\n                          <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                            <Text as=\"h4\" mt={2} fontWeight=\"semibold\">\n                            \n                              Current Contents:  <button\n                              onClick={() =>{\n                                getAllBalancesLive([], tokenId, (v)=>{\n                                  setLoadedValues(false)\n                                  setVaultValues(v)\n                                })\n                              }}\n                            > [Refresh Balances]</button>\n                            </Text>\n                            <Text as=\"p\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"}>${Number(vaultTotalValue.toFixed(4)).toLocaleString()}</Text>\n                            { vaultValues.length ? (\n                              vaultValues.map((coin) => {\n                                return (  \n                                  <Stack> \n                                    <CoinBalance colorMode={colorMode} coin={coin} mine={(status === 'claimed' && claimedBy === account) || mine} onRenew={onRenew} hideAsset={handleHideAsset}/>\n                                  </Stack>\n                                )\n                              })\n                            ) : (<Refreshing /> ) } \n                            { vaultDataValues.length ? (\n                              vaultDataValues.map((data) => {\n                                return (\n                                  <Text>Data: {data.attribute_key}</Text>\n                                )                        \n                              })\n                            ) : !vaultDataValues.length && !vaultValues.length ? (\n                              <Text>Nothing in here! Fill 'er up!</Text>\n                            ) : null}\n                          </Box>\n                        </Box>\n                      )}\n                  </TabPanel>\n                    <TabPanel>\n                      <Attributes colorMode={colorMode} attributes={attributes}/>\n                      </TabPanel>\n                    </TabPanels>\n                  </Tabs>\n                  \n                  {!vaultPrivacy ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <ButtonGroup justifyContent=\"space-between\" spacing={6}>\n                        <Stack>\n                          <Text>Deposit Addresses</Text>\n                          <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                            {vaultAddresses.map((addr) => {\n                              return (\n                                <Button\n                                  className=\"address_nft_button\"\n                                  \n                                  ml={2}\n                                  mt={2}\n                                  font-weight=\"100 !important\"\n                                  key={addr.address}\n                                  onClick={() => {\n                                    setCurrCoin(addr.coin)\n                                    setCurrAddr(addr.address)\n                                    onOpenAddrModal()\n                                  }}\n                                >\n                                  {addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP': addr.coin}\n                                </Button>\n                              )\n                            })}\n                        </Flex>\n                        {(mine || status === 'claimed') && vaultAddresses.length < 10 ? (\n                          <>\n                            <button className=\"nft_button\" onClick={()=>{\n                              onManageAddressToggle()\n                            }}>Manage Addresses</button>\n                            <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                              <Collapse isOpen={isManageAddressOpen}>\n                                { !hasAddress('DOGE') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('DOGE') }}>Add DOGE</Button>\n                                ) : null }\n                                { !hasAddress('DGB') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('DGB') }}>Add Digibyte</Button>\n                                ) : null }\n                                { !hasAddress('NMC') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('NMC') }}>Add Namecoin</Button>\n                                ) : null }\n                                { !hasAddress('LTC') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('LTC') }}>Add Litecoin</Button>\n                                ) : null }\n                                { !hasAddress('MONA') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('MONA') }}>Add Mona</Button>\n                                ) : null }\n                                { !hasAddress('TEZOS') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('TEZOS') }}>Add Tezos</Button>\n                                ) : null }\n                                { !hasAddress('SOLANA') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('SOLANA') }}>Add Solana</Button>\n                                ) : null }\n                              </Collapse>\n                            </Flex>\n                          </>\n                        ) : null}                        \n                        {/* <Text>Load Vault with Credit Card</Text>\n                        <HStack>\n                          {vaultAddresses.map((addr) => {\n                            if (addr.coin == 'ETH' || addr.coin == 'BTC')\n                            return (\n                              <Button\n                                className = 'nft_button'\n                                width=\"165px\"\n                                key={addr.address}\n                                onClick={() => {\n                                  initializeTransak(addr.address, addr.coin)\n                                }}\n                              >\n                                Buy {addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin}\n                              </Button>\n                            )\n                          })}\n                        </HStack> */}\n                        {/* <Button onClick={() => {\n                          initializeTransak()\n                        }}>Add Crypto with Credit Card</Button> */}\n                        </Stack>\n                      </ButtonGroup>\n                    </Box>\n                  ) : null}\n\n                  {!(status === 'claimed') && (vaultChainId === 1 || vaultChainId === 4 || vaultChainId === 137 )? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      {/* <Stack d=\"flex\" width=\"100%\"> */}\n                        <Button\n                          className=\"nft_button\"\n                          width=\"50%\"\n                          m={5}\n                          onClick={() => {visitOpenSeaLink()}}\n                        >\n                          Opensea\n                        </Button>\n                        <Button\n                          className=\"nft_button\"\n                          width=\"50%\"\n                          m={5}\n                          onClick={() => {visitLooksRareLink()}}\n                        >\n                          LooksRare\n                        </Button>\n                        {showOffer? (\n                          <Button className=\"\" onClick={() => { onOpenOfferModal() }}>{mine? ('My Offers') : ('Make an Offer')} (NFT²NFT)</Button>\n                        ) : null}\n                        \n                      {/* </Stack> */}\n                    </Box>\n                  ) : null}\n                  {!(status === 'claimed') && mine && !acceptable?  (\n                    <>\n                     <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\" width=\"100%\">\n                        <Stack direction=\"column\" align=\"center\" width=\"100%\">\n                          <Button className=\"nft_button\" width=\"100%\" onClick={onToggle}>Transfer Vault</Button>\n                          <Collapse isOpen={isOpen}>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                            <FormLabel htmlFor=\"owner-address\">Address</FormLabel>\n                              <Input\n                                mt={1}\n                                type=\"text\"\n                                id=\"transferAddress\"\n                                value={transferToAddress || ''}\n                                onChange={(e) => {                              \n                                  console.log(\"Transfer to\", e.target.value)\n                                  setTransferToAddress(e.target.value)\n                                }}\n                                autoComplete=\"off\"\n                              />\n                            </Box>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                              <Button isDisabled={!isETHAddress(transferToAddress)} onClick={()=>{\n                                onToggle()\n                                transferVault()\n                              }}>Transfer Now</Button> \n                            </Box>\n                          </Collapse>\n                        </Stack>\n                      </Box>\n                    </>\n                  ):null }\n                  {mine && !acceptable ? (<>\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button \n                        className=\"nft_button\"\n                        width=\"100%\" onClick={() => {\n                        if (!approved) {\n                          return handleApproveForall()\n                        } else {\n                          let key = CryptoJS.lib.WordArray.random(128/8).toString()\n                          let sha = CryptoJS.SHA256(key).toString()\n                          console.log('plain', key)\n                          console.log('sha', sha)\n                          setTransferPassword(key)\n                          transferImage = sha                          \n                          setTimeout(()=>{\n                            addPreTransfer()\n                          }, 500)\n                        }                                             \n                      }\n                    }> {approved ? \"Get Link (Send Vault Via Link)\" : \"Approve Gifting\" } </Button>\n                    </Box>\n                  </>) : null }\n                  {(showTransferPassword || mintPassword) && acceptable ? (\n                      <Box>\n                        <Link href={location.protocol +'//'+ location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword)}>Copy Gift Link</Link>\n                        <Text>Password: {(transferPassword || mintPassword)}</Text>\n                      </Box>\n                      ) : null}\n                  {acceptable && claimedBy !== account ? (\n                  <>\n                      <Button mt={2} width=\"100%\" onClick={()=>{fireMetaMask()}}>Accept</Button>\n                      <Input\n                        mt={2}\n                        type=\"password\"\n                        id=\"mintPassword\"\n                        minLength={3}\n                        maxLength={200}\n                        value={mintPassword || ''}\n                        onChange={(e) => {\n                          console.log('grrr', e.target.value, mintPassword)\n                          setMintPassword(e.target.value)}\n                        }\n                        autoComplete=\"off\"\n                      />\n                  </>\n                    ) : null}\n                  {!(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        onClick={() => {\n                          handleClaim()\n                        }}\n                        isDisabled={claiming}\n                      >\n                        {claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)'}\n                      </Button>\n                    </Box>\n                    // || !live && nonce && mintSignature && vaultCiphertextV2 && to == account\n                  ) : (status === 'claimed' && claimedBy === account && vaultChainId === chainId)  ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={handleSign}>\n                        Get Keys\n                      </Button>\n                    </Box>\n                  ) : null}\n                  {!live && to == account && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg ? (\n                    <>\n                      {useOldMint == \"true\"? (\n                        <Button width=\"100%\" mt={5} onClick={delayedMint}>Mint Me v1</Button>\n                      ) : (\n                        <Button width=\"100%\" mt={5} onClick={lazyMint}>Mint Vault </Button>\n                      )}\n                    </>\n                ) : null}\n                {(!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? (\n                  <Button width=\"100%\" mt={5} onClick={deleteVault}>Delete Vault </Button>\n                ) : null}\n                {showVerifyingSignature ? (\n                  <Button isDisabled type=\"submit\">\n                    Verifying Signature ...\n                  </Button>\n                ) : null}\n                {showMakingVaultMsg ? (\n                  <Button isDisabled type=\"submit\">\n                    Minting Vault ...\n                  </Button>\n                ) : null}\n                </Box>\n                {vaultIPFS ? (\n                  <Stack>\n                    <HStack align=\"center\">\n                      <Link target='new' mb={2} ml={35} href={'https://gateway.ipfs.io/ipfs/'+vaultIPFS} isExternal>View Metadata on IPFS </Link>\n                      {vaultImageIPFS? (\n                        <Link mb={2} href={'https://gateway.ipfs.io/ipfs/'+vaultImageIPFS} isExternal>View Image on IPFS </Link>\n                      ) : null}                      \n                    </HStack> \n                  </Stack>\n                ) : null }\n                {sealed ? (\n                    <Box d=\"flex\" mb={2} ml={35} alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Text>*This vault is sealed forever.</Text>\n                    </Box>\n                  ) : null}\n                <Stack direction=\"column\" align=\"center\">\n                  {status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n                {hash ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    { accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving? \"Handling Approval Flow ...\" : transfering? \"Transfering Vault ...\":  minting? \"Minting Vault\" : \"Generating Gift Link ...\"}\n                  </Alert>\n                ) : null}\n              </Box>\n            </Flex>\n        ) : vaultValues.length > 0 && slideshowOnly? (\n          <Stack className=\"NFT-content\" align=\"center\">\n            { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                <NFTSlideshow name={vaultName} image={vaultValues[0].image} items={vaultValues.filter(value=>{return value.image !== vaultValues[0].image}).map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n              ) : (\n                <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n              )\n            }\n          </Stack>\n        ) : invalidVault ? (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        ): null}\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming && !accepting && !preTransfering) {\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                pingClaimLogs(()=>{\n                  location.href = location.origin + '/nft?id=' + tokenId\n                })\n              } else if (preTransfering) {\n                savePasswordToLocalStorage()\n                setShowTransferPassword(true)\n                setPreTransfering(false)\n                setHash(null)                \n              } else if(accepting) {\n                setAccepting(false)                \n                getVault()\n                setHash(null)\n              } else if(approving) {\n                setApproving(false)\n                getVault()\n                setHash(null)\n              } else if(transfering) {\n                setTransfering(false)\n                getVault()\n                setHash(null)\n              } else if(minting) {\n                checkLiveliness(tokenId, ()=>{\n                  setMinting(false)\n                  setLive(true)\n                  // setShowMakingVaultMsg(false)\n                  // location.href = location.origin + '/nft?id=' + tokenId\n                })\n              } else {\n                console.log('minting', minting) \n                console.log('claiming', claiming) \n                console.log('accepting', accepting) \n                console.log('preTransfering', preTransfering)\n                console.log('approving', approving)\n                console.log(\"Unknown state\")\n              }\n            }}\n          />\n        ) : null}\n        <Box height=\"40px\"></Box>\n      {/* </Loader> */}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}