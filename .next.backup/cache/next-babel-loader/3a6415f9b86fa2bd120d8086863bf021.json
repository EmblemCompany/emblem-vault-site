{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Text, Stack, Button, useColorMode } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR } from '../constants';\nimport { useWeb3React } from '@web3-react/core';\nimport { NETWORK_SHORTNAMES } from '../utils';\nexport var EMBLEM_API = 'https://api.emblemvault.io';\nexport default function OfferModal(_ref) {\n  _s();\n\n  var _this = this;\n\n  var isOpen = _ref.isOpen,\n      onClose = _ref.onClose;\n\n  //   const address = addrAddr\n  //   const coin = addrCoin\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useState = useState(false),\n      copied = _useState[0],\n      setCopied = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      loaded = _useState3[0],\n      setLoaded = _useState3[1];\n\n  var _useState4 = useState([]),\n      tokenBalances = _useState4[0],\n      setTokenBalances = _useState4[1];\n\n  useEffect(function () {\n    if (copied) {\n      var timeout = setTimeout(function () {\n        setCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [copied]);\n  useEffect(function () {\n    if (!loaded && !loading) {\n      setLoading(true);\n      getBalances(account, /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(balances) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  setTokenBalances(balances);\n                  setLoading(false);\n                  setLoaded(true);\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  });\n\n  var getBalances = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(EMBLEM_API + '/' + NETWORK_SHORTNAMES[chainId] + '/balance/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context2.sent;\n              _context2.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context2.sent;\n              return _context2.abrupt(\"return\", cb(jsonData.values));\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getBalances(_x2, _x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  function copyWithFlag(content) {\n    copy(content);\n    setCopied(true);\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    color: COLOR[colorMode],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, \"Offer\")), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"center\",\n    mt: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, account, \" network: \", NETWORK_SHORTNAMES[chainId]), tokenBalances.map(function (coin, index) {\n    return __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 27\n      }\n    }, coin[index], \" \", coin);\n  })), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return copyWithFlag('address');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, copied ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 27\n    }\n  }, \"Copied!\") : __jsx(Text, {\n    isTruncated: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 50\n    }\n  }, 'address'))))), __jsx(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(OfferModal, \"xMX7D9s7Q3o5bvI4umxkXPPAVqA=\", false, function () {\n  return [useColorMode, useWeb3React];\n});\n\n_c = OfferModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"OfferModal\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx"],"names":["React","useEffect","useState","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","Text","Stack","Button","useColorMode","copy","COLOR","useWeb3React","NETWORK_SHORTNAMES","EMBLEM_API","OfferModal","isOpen","onClose","colorMode","account","chainId","library","copied","setCopied","loading","setLoading","loaded","setLoaded","tokenBalances","setTokenBalances","timeout","setTimeout","clearTimeout","getBalances","balances","address","cb","fetch","method","headers","service","responce","json","jsonData","values","copyWithFlag","content","map","coin","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Text,\n  Stack,\n  Button,\n  useColorMode,\n} from '@chakra-ui/core'\nimport copy from 'copy-to-clipboard'\nimport QRCode from 'qrcode.react'\nimport { COLOR } from '../constants'\nimport { useWeb3React } from '@web3-react/core'\nimport { NETWORK_SHORTNAMES } from '../utils'\n\nexport const EMBLEM_API = 'https://api.emblemvault.io'\n\nexport default function OfferModal({\n  isOpen,\n  onClose,\n//   addrCoin,\n//   addrAddr,\n}: {\n  isOpen: boolean\n  onClose: () => void\n//   addrCoin: string\n//   addrAddr: string\n}): JSX.Element {\n//   const address = addrAddr\n//   const coin = addrCoin\n\n  const { colorMode } = useColorMode()\n  const { account, chainId, library } = useWeb3React()\n  const [copied, setCopied] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loaded, setLoaded] = useState(false)\n  const [tokenBalances, setTokenBalances] = useState([])\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [copied])\n\n  useEffect(() => {\n      if (!loaded && !loading) {\n        setLoading(true)\n        getBalances(account, async balances =>{\n            setTokenBalances(balances)\n            setLoading(false)\n            setLoaded(true)\n        })\n      }\n  })\n\n  const getBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/'+NETWORK_SHORTNAMES[chainId]+'/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    // setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n    return cb(jsonData.values)\n  }\n\n  function copyWithFlag(content: string): void {\n    copy(content)\n    setCopied(true)\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent color={COLOR[colorMode]}>\n        <ModalHeader>\n          <Text>Offer</Text>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Stack direction=\"column\">\n            <Stack direction=\"row\" align=\"center\" justify=\"center\">\n              {/* <QRCode value={coin==\"BTC\" ? \"bitcoin:\"+address: address} onClick={() => copyWithFlag(address)} /> */}\n            </Stack>\n\n            <Stack direction=\"row\" justify=\"center\" mt=\"6\">\n              <Text>{account} network: {NETWORK_SHORTNAMES[chainId]}</Text>\n            \n                  {tokenBalances.map((coin, index) => {\n                      return (\n                          <Text>{coin[index]} {coin}</Text>\n                      )\n                  })}\n              \n            </Stack>\n            <Stack direction=\"row\" justify=\"center\">\n              <Button onClick={() => copyWithFlag('address')}>\n                {copied ? <Text>Copied!</Text> : <Text isTruncated>{'address'}</Text>}\n              </Button>\n            </Stack>\n          </Stack>\n        </ModalBody>\n        <ModalFooter></ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}