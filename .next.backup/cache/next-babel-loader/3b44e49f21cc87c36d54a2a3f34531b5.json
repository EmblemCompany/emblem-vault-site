{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Text, Stack, Button, useColorMode, Select, Input } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR, contractAddresses } from '../constants';\nimport { useWeb3React } from '@web3-react/core';\nimport { NETWORK_SHORTNAMES } from '../utils'; // import { useContract } from '../hooks'\n\nimport { Contract } from '@ethersproject/contracts';\nimport { HStack } from '@chakra-ui/react';\nimport { TransactionToast } from './TransactionToast';\nimport { addTokenToWallet } from '../public/web3';\nexport var EMBLEM_API = 'https://api.emblemvault.io';\nexport default function OfferModal(_ref) {\n  var isOpen = _ref.isOpen,\n      onClose = _ref.onClose,\n      tokenId = _ref.tokenId,\n      mine = _ref.mine;\n\n  //   const address = addrAddr\n  //   const coin = addrCoin\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useState = useState(false),\n      copied = _useState[0],\n      setCopied = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      loaded = _useState3[0],\n      setLoaded = _useState3[1];\n\n  var _useState4 = useState({\n    address: '',\n    balance: 0,\n    tokenType: '',\n    name: ''\n  }),\n      offeringToken = _useState4[0],\n      setOfferingToken = _useState4[1];\n\n  var _useState5 = useState([]),\n      tokenBalances = _useState5[0],\n      setTokenBalances = _useState5[1];\n\n  var _useState6 = useState(0),\n      offeringTokenBalance = _useState6[0],\n      setOfferingTokenBalance = _useState6[1];\n\n  var _useState7 = useState(''),\n      acct = _useState7[0],\n      setAcct = _useState7[1];\n\n  var _useState8 = useState(0),\n      decimals = _useState8[0],\n      setDecimals = _useState8[1];\n\n  var _useState9 = useState(0),\n      allowance = _useState9[0],\n      setAllowance = _useState9[1];\n\n  var _useState10 = useState(false),\n      approvedForAll = _useState10[0],\n      setApprovedForAll = _useState10[1];\n\n  var _useState11 = useState(0),\n      offerAmount = _useState11[0],\n      setOfferAmount = _useState11[1];\n\n  var _useState12 = useState(0),\n      offerTokenId = _useState12[0],\n      setOfferTokenId = _useState12[1];\n\n  var _useState13 = useState([]),\n      offers = _useState13[0],\n      setOffers = _useState13[1];\n\n  var _useState14 = useState([]),\n      myOffers = _useState14[0],\n      setMyOffers = _useState14[1];\n\n  var _useState15 = useState(null),\n      hash = _useState15[0],\n      setHash = _useState15[1];\n\n  var _useState16 = useState([]),\n      selectedNFTs = _useState16[0],\n      setSelectedNFTs = _useState16[1]; // const [offeringTokenId, setOfferingTokenId] = useState()\n\n\n  var getErc20Contract = function getErc20Contract(address) {\n    console.log(\"contract\", address);\n    return useContract(address, contractAddresses.covalAbi, true);\n  };\n\n  var getVaultContract = function getVaultContract() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  };\n\n  var getTradeContract = function getTradeContract() {\n    return useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true);\n  };\n\n  var useContract = function useContract(address, ABI) {\n    var withSigner = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return new Contract(address, ABI, withSigner ? library.getSigner(account).connectUnchecked() : library);\n  };\n\n  useEffect(function () {\n    if (account && acct != account) {\n      setAcct(account);\n      setLoaded(false);\n    }\n  }, [account, acct]);\n  useEffect(function () {\n    if (copied) {\n      var timeout = setTimeout(function () {\n        setCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [copied]);\n  useEffect(function () {\n    if (!loaded && !loading) {\n      setLoading(true);\n      getBalances(account, /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(balances) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  setTokenBalances(balances);\n                  getOfferContractInfo();\n                  setLoading(false);\n                  setLoaded(true);\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  });\n\n  var handleApprove = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address) {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              contract = getErc20Contract(address);\n              console.log('decimals', decimals);\n              _context2.next = 4;\n              return contract.approve(contractAddresses.nftrade[chainId], offeringTokenBalance * Math.pow(10, +decimals)).then(function (_ref4) {\n                var hash = _ref4.hash;\n                setHash(hash);\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleApprove(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleApproveForAll = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              contract = getVaultContract();\n              _context3.next = 3;\n              return contract.setApprovalForAll(contractAddresses.nftrade[chainId], true).then(function (_ref6) {\n                var hash = _ref6.hash;\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function handleApproveForAll() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var getApprovedForAll = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var address,\n          contract,\n          approved,\n          _args4 = arguments;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              address = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : null;\n              contract = getVaultContract(address);\n              _context4.next = 4;\n              return contract.isApprovedForAll(account, contractAddresses.nftrade[chainId]);\n\n            case 4:\n              approved = _context4.sent;\n              console.log('---approved', approved);\n              setApprovedForAll(approved);\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function getApprovedForAll() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var getNFTContractInfo = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(address) {\n      var contract, count, nftCollection, getSingleNFT, _getSingleNFT;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _getSingleNFT = function _getSingleNFT3() {\n                _getSingleNFT = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(index, cb) {\n                  var nftInfo;\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return contract.tokenOfOwnerByIndex(account, index);\n\n                        case 2:\n                          nftInfo = _context5.sent;\n                          nftCollection.push(nftInfo.toNumber());\n\n                          if (!(index + 1 >= count)) {\n                            _context5.next = 8;\n                            break;\n                          }\n\n                          return _context5.abrupt(\"return\", cb());\n\n                        case 8:\n                          return _context5.abrupt(\"return\", getSingleNFT(index + 1, cb));\n\n                        case 9:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n                return _getSingleNFT.apply(this, arguments);\n              };\n\n              getSingleNFT = function _getSingleNFT2(_x4, _x5) {\n                return _getSingleNFT.apply(this, arguments);\n              };\n\n              contract = getVaultContract(address);\n              _context6.next = 5;\n              return contract.balanceOf(account);\n\n            case 5:\n              count = _context6.sent;\n              console.log('--------------- NFT Info', account, 'owns', count.toNumber());\n              nftCollection = [];\n              getSingleNFT(0, function () {\n                console.log(\"GOT ALL NFTs\", nftCollection);\n                setSelectedNFTs(nftCollection);\n              });\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function getNFTContractInfo(_x3) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var makeOffer = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n              _context7.next = 3;\n              return contract.addOffer(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount * Math.pow(10, +decimals)).then(function (_ref10) {\n                var hash = _ref10.hash;\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function makeOffer() {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var withdrawOffer = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(index) {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n              _context8.next = 3;\n              return contract.withdrawOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(function (_ref12) {\n                var hash = _ref12.hash;\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function withdrawOffer(_x6) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  var rejectOffer = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(index) {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n              _context9.next = 3;\n              return contract.rejectOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(function (_ref14) {\n                var hash = _ref14.hash;\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function rejectOffer(_x7) {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  var acceptOffer = /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(index) {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n              _context10.next = 3;\n              return contract.acceptOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(function (_ref16) {\n                var hash = _ref16.hash;\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function acceptOffer(_x8) {\n      return _ref15.apply(this, arguments);\n    };\n  }();\n\n  var getTokenContractInfo = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(address) {\n      var contract, _dec;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              contract = getErc20Contract(address); // console.log(contract)\n\n              _context11.next = 3;\n              return contract.decimals();\n\n            case 3:\n              _dec = _context11.sent;\n              setDecimals(_dec);\n              _context11.t0 = setAllowance;\n              _context11.next = 8;\n              return contract.allowance(account, contractAddresses.nftrade[chainId]).then(function (balance) {\n                return (balance * Math.pow(10, -_dec)).toString();\n              });\n\n            case 8:\n              _context11.t1 = _context11.sent;\n              (0, _context11.t0)(_context11.t1);\n              _context11.t2 = setOfferingTokenBalance;\n              _context11.next = 13;\n              return contract.balanceOf(account).then(function (balance) {\n                return (balance * Math.pow(10, -_dec)).toString();\n              });\n\n            case 13:\n              _context11.t3 = _context11.sent;\n              (0, _context11.t2)(_context11.t3);\n\n            case 15:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    return function getTokenContractInfo(_x9) {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n\n  var getOfferContractInfo = /*#__PURE__*/function () {\n    var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n      var contract, offerCount, offers, myOffers, getSingleOffer, _getSingleOffer;\n\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _getSingleOffer = function _getSingleOffer3() {\n                _getSingleOffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(index, cb) {\n                  var _offer, offer, tokenContract, tokenName, tokenDecimals, tokenSymbol;\n\n                  return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n                    while (1) {\n                      switch (_context12.prev = _context12.next) {\n                        case 0:\n                          _context12.next = 2;\n                          return contract.getOffer(contractAddresses.emblemVault[chainId], tokenId, index);\n\n                        case 2:\n                          _offer = _context12.sent;\n                          console.log('-------', _offer);\n\n                          if (!(_offer.token !== \"0x0000000000000000000000000000000000000000\")) {\n                            _context12.next = 29;\n                            break;\n                          }\n\n                          offer = {\n                            tokenId: _offer.tokenId.toNumber(),\n                            _from: _offer._from,\n                            token: _offer.token,\n                            amount: _offer.amount\n                          };\n                          tokenContract = getErc20Contract(offer.token);\n\n                          if (_offer.tokenId) {\n                            _context12.next = 23;\n                            break;\n                          }\n\n                          _context12.next = 10;\n                          return tokenContract.name();\n\n                        case 10:\n                          tokenName = _context12.sent;\n                          _context12.next = 13;\n                          return tokenContract.decimals();\n\n                        case 13:\n                          tokenDecimals = _context12.sent;\n                          _context12.next = 16;\n                          return tokenContract.symbol();\n\n                        case 16:\n                          tokenSymbol = _context12.sent;\n                          offer.symbol = tokenSymbol;\n                          offer.name = tokenName;\n                          offer.decimals = tokenDecimals;\n                          offer.amount = offer.amount.toNumber() * Math.pow(10, -tokenDecimals);\n                          _context12.next = 25;\n                          break;\n\n                        case 23:\n                          offer.amount = _offer.amount.toNumber();\n                          offer.tokenId = _offer.tokenId.toNumber();\n\n                        case 25:\n                          offer.index = index;\n                          offer.address = offer.token;\n                          offers.push(offer); // console.log('-----', offer)\n\n                          if (offer._from == account) {\n                            myOffers.push(offer);\n                          }\n\n                        case 29:\n                          if (!(index + 1 >= offerCount)) {\n                            _context12.next = 33;\n                            break;\n                          }\n\n                          return _context12.abrupt(\"return\", cb());\n\n                        case 33:\n                          return _context12.abrupt(\"return\", getSingleOffer(index + 1, cb));\n\n                        case 34:\n                        case \"end\":\n                          return _context12.stop();\n                      }\n                    }\n                  }, _callee12);\n                }));\n                return _getSingleOffer.apply(this, arguments);\n              };\n\n              getSingleOffer = function _getSingleOffer2(_x10, _x11) {\n                return _getSingleOffer.apply(this, arguments);\n              };\n\n              contract = getTradeContract();\n              _context13.next = 5;\n              return contract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId);\n\n            case 5:\n              offerCount = _context13.sent.toNumber();\n\n              if (mine) {\n                getApprovedForAll();\n              }\n\n              offers = [];\n              myOffers = [];\n\n              if (offerCount > 0) {\n                getSingleOffer(0, function () {\n                  setOffers(offers);\n                  setMyOffers(myOffers); // console.log('offers', offers, myOffers)\n                });\n              }\n\n              console.log(offerCount);\n\n            case 11:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    return function getOfferContractInfo() {\n      return _ref18.apply(this, arguments);\n    };\n  }();\n\n  var getBalances = /*#__PURE__*/function () {\n    var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return fetch(EMBLEM_API + '/' + NETWORK_SHORTNAMES[chainId] + '/balance/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context14.sent;\n              _context14.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context14.sent;\n              return _context14.abrupt(\"return\", cb(jsonData.values));\n\n            case 7:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    return function getBalances(_x12, _x13) {\n      return _ref19.apply(this, arguments);\n    };\n  }();\n\n  function copyWithFlag(content) {\n    copy(content);\n    setCopied(true);\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true\n  }, __jsx(ModalOverlay, null), __jsx(ModalContent, {\n    color: COLOR[colorMode]\n  }, __jsx(ModalHeader, null, __jsx(Text, null, !mine ? 'Make' : null, \" Offer\", mine ? 's' : null, \" for: \", tokenId)), __jsx(ModalCloseButton, null), __jsx(ModalBody, null, !mine ? __jsx(Stack, {\n    direction: \"column\"\n  }, __jsx(Stack, {\n    mt: \"6\"\n  }, __jsx(Text, null, \"Choose your Offer Token\"), __jsx(Select, {\n    w: \"100%\",\n    value: offeringToken.address,\n    onChange: function onChange(e) {\n      if (e.target.value !== '0') {\n        var token = tokenBalances.filter(function (item) {\n          return item.address == e.target.value;\n        })[0];\n        setOfferingToken(token);\n        token.tokenType == \"ERC-20\" ? getTokenContractInfo(token.address) : getNFTContractInfo(token.address);\n        console.log(tokenBalances.filter(function (item) {\n          return item.address == e.target.value;\n        })[0]);\n        console.log(e.target.value);\n      }\n    }\n  }, __jsx(\"option\", {\n    value: \"0\"\n  }, \"Choose a Token\"), tokenBalances.map(function (coin, index) {\n    if (coin.tokenType !== 'native') return __jsx(\"option\", {\n      value: coin.address\n    }, coin.name);\n  })), offeringToken.balance > 0 && offeringToken.tokenType == \"ERC-20\" && allowance > 0 ? __jsx(React.Fragment, null, __jsx(Text, null, \"Max: \", offeringTokenBalance), __jsx(Input, {\n    onChange: function onChange(e) {\n      return setOfferAmount(e.target.value);\n    }\n  })) : null), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"center\"\n  }, offeringToken.tokenType == 'ERC-20' ? offeringTokenBalance > 0 && allowance == 0 ? __jsx(Button, {\n    onClick: function onClick() {\n      handleApprove(offeringToken.address);\n    }\n  }, \"Approve offer of \", offeringToken.name) : offeringToken && offeringTokenBalance == 0 ? __jsx(Text, null, \"Insufficient Balance\") : __jsx(Button, {\n    onClick: function onClick() {\n      makeOffer();\n    }\n  }, \"Make Offer\") : selectedNFTs.length > 0 ? __jsx(Select, {\n    width: \"100%\",\n    onChange: function onChange(e) {\n      if (e.target.value !== '0') {\n        console.log(\"Picked TokenID: \", e.target.value, offeringToken);\n        setOfferTokenId(Number(e.target.value));\n        getApprovedForAll(offeringToken.address);\n      }\n    }\n  }, __jsx(\"option\", {\n    value: \"0\"\n  }, \"Select TokenId\"), selectedNFTs.map(function (tokenId, index) {\n    return __jsx(\"option\", {\n      value: tokenId\n    }, tokenId);\n  })) : null, offeringToken.name && offeringToken.tokenType != \"ERC-20\" && !approvedForAll && offerTokenId != 0 ? __jsx(Button, {\n    onClick: function onClick() {\n      handleApprove(offeringToken.address);\n    }\n  }, \"Approve offer of \", offeringToken.name) : offeringToken.name && offeringToken.tokenType != \"ERC-20\" && approvedForAll ? __jsx(Button, {\n    onClick: function onClick() {\n      makeOffer();\n    }\n  }, \"Make Offer\") : null), __jsx(Stack, null, __jsx(Text, null, \"My Offers\"), myOffers.map(function (offer, index) {\n    return __jsx(HStack, null, __jsx(Text, null, offer.name, \" \", offer.amount), __jsx(Button, {\n      onClick: function onClick() {\n        withdrawOffer(offer.index);\n      }\n    }, \"Withdraw Offer\"));\n  }))) : null, mine ? __jsx(Stack, {\n    direction: \"column\"\n  }, !approvedForAll ? __jsx(Button, {\n    onClick: function onClick() {\n      handleApproveForAll();\n    }\n  }, \"Allow accepting of Offers\") : null, __jsx(Text, null, \"Offers\"), offers.map(function (offer, index) {\n    return __jsx(HStack, null, __jsx(Text, {\n      onClick: function onClick() {\n        addTokenToWallet(offer);\n      }\n    }, offer.name, \" \", offer.amount), __jsx(Button, {\n      onClick: function onClick() {\n        rejectOffer(offer.index);\n      }\n    }, \"Reject Offer\"), approvedForAll ? __jsx(Button, {\n      onClick: function onClick() {\n        acceptOffer(offer.index);\n      }\n    }, \"Accept Offer\") : null);\n  })) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      setHash(null);\n      setLoaded(false);\n    }\n  }) : null), __jsx(ModalFooter, null)));\n}","map":null,"metadata":{},"sourceType":"module"}