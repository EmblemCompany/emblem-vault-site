{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/AddrModal.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Text, Stack, Button } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport QRCode from 'qrcode.react';\nexport default function AddrModal({\n  isOpen,\n  onClose,\n  addrCoin,\n  addrAddr\n}) {\n  const address = addrAddr;\n  const coin = addrCoin;\n  let permalink = null;\n  const {\n    0: copied,\n    1: setCopied\n  } = useState(false);\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [copied]);\n\n  function copyWithFlag(content) {\n    copy(content);\n    setCopied(true);\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, \"Send Stuff Here\")), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, __jsx(QRCode, {\n    value: address,\n    onClick: () => copyWithFlag(address),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  })), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\",\n    mt: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, coin, \" address (click to copy)\")), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: () => copyWithFlag(address),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }, copied ? __jsx(Text, {\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 19\n    }\n  }, \"Copied!\") : __jsx(Text, {\n    color: \"white\",\n    isTruncated: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 19\n    }\n  }, address))))), __jsx(ModalFooter, {\n    justifyContent: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, typeof permalink === 'string' && __jsx(Button, {\n    variant: \"link\",\n    isDisabled: copied,\n    color: \"blue.500\",\n    width: \"min-content\",\n    onClick: () => {\n      try {\n        // eslint-disable-next-line\n        ;\n        window.navigator.share({\n          title: 'Emblem Vault',\n          url: permalink\n        }).catch(() => {});\n      } catch {\n        copyWithFlag(permalink);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, copied ? 'Copied' : 'Share Permalink'))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/AddrModal.tsx"],"names":["React","useEffect","useState","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","Text","Stack","Button","copy","QRCode","AddrModal","isOpen","onClose","addrCoin","addrAddr","address","coin","permalink","copied","setCopied","timeout","setTimeout","clearTimeout","copyWithFlag","content","window","navigator","share","title","url","catch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACEC,KADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,gBALF,EAMEC,SANF,EAOEC,WAPF,EAQEC,IARF,EASEC,KATF,EAUEC,MAVF,QAWO,iBAXP;AAYA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,eAAe,SAASC,SAAT,CAAmB;AAChCC,EAAAA,MADgC;AAEhCC,EAAAA,OAFgC;AAGhCC,EAAAA,QAHgC;AAIhCC,EAAAA;AAJgC,CAAnB,EAUC;AACd,QAAMC,OAAO,GAAGD,QAAhB;AACA,QAAME,IAAI,GAAGH,QAAb;AACA,MAAII,SAAwB,GAAG,IAA/B;AAEA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBtB,QAAQ,CAAC,KAAD,CAApC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsB,MAAJ,EAAY;AACV,YAAME,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC/BF,QAAAA,SAAS,CAAC,KAAD,CAAT;AACD,OAFyB,EAEvB,GAFuB,CAA1B;AAGA,aAAO,MAAY;AACjBG,QAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,OAFD;AAGD;AACF,GATQ,EASN,CAACF,MAAD,CATM,CAAT;;AAWA,WAASK,YAAT,CAAsBC,OAAtB,EAA6C;AAC3ChB,IAAAA,IAAI,CAACgB,OAAD,CAAJ;AACAL,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AAED,SACE,MAAC,KAAD;AAAO,IAAA,MAAM,EAAER,MAAf;AAAuB,IAAA,OAAO,EAAEC,OAAhC;AAAyC,IAAA,UAAU,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,CADF,EAIE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,KAAjB;AAAuB,IAAA,KAAK,EAAC,QAA7B;AAAsC,IAAA,OAAO,EAAC,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAEG,OAAf;AAAwB,IAAA,OAAO,EAAE,MAAMQ,YAAY,CAACR,OAAD,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAKE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,KAAjB;AAAuB,IAAA,OAAO,EAAC,eAA/B;AAA+C,IAAA,EAAE,EAAC,GAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqBC,IAArB,6BADF,CALF,EAQE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,KAAjB;AAAuB,IAAA,OAAO,EAAC,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMO,YAAY,CAACR,OAAD,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,MAAM,GACL,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADK,GAGL,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,OAAZ;AAAoB,IAAA,WAAW,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,OADH,CAJJ,CADF,CARF,CADF,CALF,EA2BE,MAAC,WAAD;AAAa,IAAA,cAAc,EAAC,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,OAAOE,SAAP,KAAqB,QAArB,IACC,MAAC,MAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,UAAU,EAAEC,MAFd;AAGE,IAAA,KAAK,EAAC,UAHR;AAIE,IAAA,KAAK,EAAC,aAJR;AAKE,IAAA,OAAO,EAAE,MAAY;AACnB,UAAI;AACF;AACA;AAAEO,QAAAA,MAAM,CAACC,SAAR,CAA0BC,KAA1B,CAAgC;AAAEC,UAAAA,KAAK,EAAE,cAAT;AAAyBC,UAAAA,GAAG,EAAEZ;AAA9B,SAAhC,EAA2Ea,KAA3E,CAAiF,MAAM,CAAE,CAAzF;AACF,OAHD,CAGE,MAAM;AACNP,QAAAA,YAAY,CAACN,SAAD,CAAZ;AACD;AACF,KAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcGC,MAAM,GAAG,QAAH,GAAc,iBAdvB,CAFJ,CA3BF,CAFF,CADF;AAqDD","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Text,\n  Stack,\n  Button,\n} from '@chakra-ui/core'\nimport copy from 'copy-to-clipboard'\nimport QRCode from 'qrcode.react'\n\nexport default function AddrModal({\n  isOpen,\n  onClose,\n  addrCoin,\n  addrAddr,\n}: {\n  isOpen: boolean\n  onClose: () => void\n  addrCoin: string\n  addrAddr: string\n}): JSX.Element {\n  const address = addrAddr\n  const coin = addrCoin\n  let permalink: string | null = null\n\n  const [copied, setCopied] = useState(false)\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [copied])\n\n  function copyWithFlag(content: string): void {\n    copy(content)\n    setCopied(true)\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>\n          <Text color=\"white\">Send Stuff Here</Text>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Stack direction=\"column\">\n            <Stack direction=\"row\" align=\"center\" justify=\"center\">\n              <QRCode value={address} onClick={() => copyWithFlag(address)} />\n            </Stack>\n\n            <Stack direction=\"row\" justify=\"space-between\" mt=\"6\">\n              <Text color=\"white\">{coin} address (click to copy)</Text>\n            </Stack>\n            <Stack direction=\"row\" justify=\"space-between\">\n              <Button onClick={() => copyWithFlag(address)}>\n                {copied ? (\n                  <Text color=\"white\">Copied!</Text>\n                ) : (\n                  <Text color=\"white\" isTruncated>\n                    {address}\n                  </Text>\n                )}\n              </Button>\n            </Stack>\n          </Stack>\n        </ModalBody>\n        <ModalFooter justifyContent=\"space-between\">\n          {typeof permalink === 'string' && (\n            <Button\n              variant=\"link\"\n              isDisabled={copied}\n              color=\"blue.500\"\n              width=\"min-content\"\n              onClick={(): void => {\n                try {\n                  // eslint-disable-next-line\n                  ;(window.navigator as any).share({ title: 'Emblem Vault', url: permalink }).catch(() => {})\n                } catch {\n                  copyWithFlag(permalink as string)\n                }\n              }}\n            >\n              {copied ? 'Copied' : 'Share Permalink'}\n            </Button>\n          )}\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}