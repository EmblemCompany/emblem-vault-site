{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure, Collapse, FormLabel, useColorMode } from '@chakra-ui/core';\nimport { HStack } from '@chakra-ui/react';\nimport TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { isETHAddress } from '../utils';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport CryptoJS from 'crypto-js';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nimport NFTSlideshow from './embed/NFTSlideshow';\nimport CoinBalance from './partials/CoinBalance';\nimport transakSDK from '@transak/transak-sdk';\nvar AddrModal = dynamic(function () {\n  return import('./AddrModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./AddrModal')];\n    },\n    modules: ['./AddrModal']\n  }\n});\nvar KeysModal = dynamic(function () {\n  return import('./KeysModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./KeysModal')];\n    },\n    modules: ['./KeysModal']\n  }\n});\nvar OfferModal = dynamic(function () {\n  return import('./OfferModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./OfferModal')];\n    },\n    modules: ['./OfferModal']\n  }\n});\nexport default function Nft() {\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(false),\n      approved = _useState[0],\n      setApproved = _useState[1];\n\n  var _useState2 = useState(query.key),\n      mintPassword = _useState2[0],\n      setMintPassword = _useState2[1];\n\n  var _useState3 = useState(query.offer || false),\n      showOffer = _useState3[0],\n      setShowOffer = _useState3[1];\n\n  var _useState4 = useState(query.framed || true),\n      framed = _useState4[0],\n      setFramed = _useState4[1];\n\n  var _useState5 = useState(query.id),\n      tokenId = _useState5[0],\n      setTokenId = _useState5[1];\n\n  var _useState6 = useState(query.experimental),\n      experimental = _useState6[0],\n      setExperimental = _useState6[1];\n\n  var _useState7 = useState(''),\n      vaultName = _useState7[0],\n      setVaultName = _useState7[1];\n\n  var _useState8 = useState(''),\n      vaultIPFS = _useState8[0],\n      setVaultIPFS = _useState8[1];\n\n  var _useState9 = useState(''),\n      vaultImageIPFS = _useState9[0],\n      setVaultImageIPFS = _useState9[1];\n\n  var _useState10 = useState(''),\n      vaultCiphertextV2 = _useState10[0],\n      setVaultCiphertextV2 = _useState10[1];\n\n  var _useState11 = useState(''),\n      vaultDesc = _useState11[0],\n      setVaultDesc = _useState11[1];\n\n  var _useState12 = useState(''),\n      vaultImage = _useState12[0],\n      setVaultImage = _useState12[1];\n\n  var _useState13 = useState(''),\n      ownedImage = _useState13[0],\n      setOwnedImage = _useState13[1];\n\n  var _useState14 = useState([]),\n      vaultValues = _useState14[0],\n      setVaultValues = _useState14[1];\n\n  var _useState15 = useState(false),\n      loadedValues = _useState15[0],\n      setLoadedValues = _useState15[1];\n\n  var _useState16 = useState([]),\n      vaultDataValues = _useState16[0],\n      setVaultDataValues = _useState16[1];\n\n  var _useState17 = useState([]),\n      vaultAddresses = _useState17[0],\n      setVaultAddresses = _useState17[1];\n\n  var _useState18 = useState(false),\n      vaultPrivacy = _useState18[0],\n      setVaultPrivacy = _useState18[1];\n\n  var _useState19 = useState(0),\n      vaultTotalValue = _useState19[0],\n      setVaultTotalValue = _useState19[1];\n\n  var _useState20 = useState(null),\n      vaultChainId = _useState20[0],\n      setVaultChainId = _useState20[1];\n\n  var _useState21 = useState(null),\n      vaultChain = _useState21[0],\n      setVaultChain = _useState21[1];\n\n  var _useState22 = useState(null),\n      hash = _useState22[0],\n      setHash = _useState22[1];\n\n  var _useState23 = useState(''),\n      currCoin = _useState23[0],\n      setCurrCoin = _useState23[1];\n\n  var _useState24 = useState(''),\n      currAddr = _useState24[0],\n      setCurrAddr = _useState24[1];\n\n  var _useState25 = useState({\n    loaded: false\n  }),\n      state = _useState25[0],\n      setState = _useState25[1];\n\n  var _useState26 = useState(false),\n      mine = _useState26[0],\n      setMine = _useState26[1];\n\n  var _useState27 = useState(false),\n      claiming = _useState27[0],\n      setClaiming = _useState27[1];\n\n  var _useState28 = useState('claimed'),\n      status = _useState28[0],\n      setStatus = _useState28[1];\n\n  var _useState29 = useState(null),\n      claimedBy = _useState29[0],\n      setClaimedBy = _useState29[1];\n\n  var _useState30 = useState(''),\n      mnemonic = _useState30[0],\n      setMnemonic = _useState30[1];\n\n  var _useState31 = useState(''),\n      privKeyBTC = _useState31[0],\n      setPrivKeyBTC = _useState31[1];\n\n  var _useState32 = useState(''),\n      privKeyETH = _useState32[0],\n      setPrivKeyETH = _useState32[1];\n\n  var _useState33 = useState([]),\n      privValues = _useState33[0],\n      setKeyValues = _useState33[1];\n\n  var _useState34 = useState(false),\n      loadingApi = _useState34[0],\n      setLoadingApi = _useState34[1];\n\n  var _useState35 = useState(''),\n      decryptedEffect = _useState35[0],\n      setDecryptedEffect = _useState35[1];\n\n  var _useState36 = useState(false),\n      decryptedEffectRunning = _useState36[0],\n      setDecryptedEffectRunning = _useState36[1];\n\n  var _useState37 = useState(''),\n      decryptPassword = _useState37[0],\n      setDecryptPassword = _useState37[1];\n\n  var _useState38 = useState(false),\n      invalidVault = _useState38[0],\n      setInvalidVault = _useState38[1];\n\n  var _useState39 = useState(false),\n      hasCheckedNft = _useState39[0],\n      setHasCheckedNft = _useState39[1];\n\n  var _useState40 = useState(false),\n      accepting = _useState40[0],\n      setAccepting = _useState40[1];\n\n  var _useState41 = useState(false),\n      approving = _useState41[0],\n      setApproving = _useState41[1];\n\n  var _useState42 = useState(false),\n      acceptable = _useState42[0],\n      setAcceptable = _useState42[1];\n\n  var _useState43 = useState(''),\n      transferPassword = _useState43[0],\n      setTransferPassword = _useState43[1];\n\n  var _useState44 = useState(false),\n      showTransferPassword = _useState44[0],\n      setShowTransferPassword = _useState44[1];\n\n  var _useState45 = useState(false),\n      preTransfering = _useState45[0],\n      setPreTransfering = _useState45[1];\n\n  var _useState46 = useState(null),\n      transferToAddress = _useState46[0],\n      setTransferToAddress = _useState46[1];\n\n  var _useState47 = useState(false),\n      transfering = _useState47[0],\n      setTransfering = _useState47[1];\n\n  var _useState48 = useState(null),\n      owner = _useState48[0],\n      setOwner = _useState48[1];\n\n  var _useState49 = useState(initTorus()),\n      torus = _useState49[0],\n      setTorus = _useState49[1];\n\n  var _useState50 = useState(false),\n      live = _useState50[0],\n      setLive = _useState50[1];\n\n  var _useState51 = useState(null),\n      nonce = _useState51[0],\n      setNonce = _useState51[1];\n\n  var _useState52 = useState(null),\n      mintSignature = _useState52[0],\n      setMintSignature = _useState52[1];\n\n  var _useState53 = useState(null),\n      to = _useState53[0],\n      setTo = _useState53[1];\n\n  var _useState54 = useState(false),\n      showMakingVaultMsg = _useState54[0],\n      setShowMakingVaultMsg = _useState54[1];\n\n  var _useState55 = useState(false),\n      minting = _useState55[0],\n      setMinting = _useState55[1]; // const [transferImage, setTransferImage] = useState('')\n\n\n  var handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  var _useDisclosure = useDisclosure(),\n      isOpenAddrModal = _useDisclosure.isOpen,\n      onOpenAddrModal = _useDisclosure.onOpen,\n      onCloseAddrModal = _useDisclosure.onClose;\n\n  var _useDisclosure2 = useDisclosure(),\n      isOpenKeysModal = _useDisclosure2.isOpen,\n      onOpenKeysModal = _useDisclosure2.onOpen,\n      onCloseKeysModal = _useDisclosure2.onClose;\n\n  var _useDisclosure3 = useDisclosure(),\n      isOpenOfferModal = _useDisclosure3.isOpen,\n      onOpenOfferModal = _useDisclosure3.onOpen,\n      onCloseOfferModal = _useDisclosure3.onClose;\n\n  var _useDisclosure4 = useDisclosure(),\n      isOpen = _useDisclosure4.isOpen,\n      onToggle = _useDisclosure4.onToggle;\n\n  var _useDisclosure5 = useDisclosure(),\n      isManageAddressOpen = _useDisclosure5.isOpen,\n      onManageAddressToggle = _useDisclosure5.onToggle;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var transak;\n  var transferImage;\n\n  function initTorus() {\n    return _initTorus.apply(this, arguments);\n  }\n\n  function _initTorus() {\n    _initTorus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {\n      var _torus;\n\n      return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              _torus = new TorusSdk({\n                baseUrl: \"\".concat(window.location.origin, \"/serviceworker\"),\n                enableLogging: true,\n                network: \"testnet\" // details for test net\n\n              });\n              _context26.next = 3;\n              return _torus.init({\n                skipSw: true,\n                skipInit: true,\n                skipPrefetch: true\n              });\n\n            case 3:\n              console.log(\"Initialized Torus\");\n              return _context26.abrupt(\"return\", _torus);\n\n            case 5:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee26);\n    }));\n    return _initTorus.apply(this, arguments);\n  }\n\n  var initializeTransak = function initializeTransak(address, coin) {\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',\n      // Your API Key\n      environment: 'PRODUCTION',\n      // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '',\n      // Your customer's wallet address\n      themeColor: '000000',\n      // App theme color\n      fiatCurrency: 'USD',\n      // INR/GBP\n      // fiatAmount: 350,\n      email: '',\n      // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    }); // To get all the events\n\n    transak.on(transak.ALL_EVENTS, function (data) {\n      console.log(data);\n    }); // This will trigger when the user marks payment is made.\n\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, function (orderData) {\n      console.log(orderData);\n      transak.close();\n    });\n    transak.init();\n  };\n\n  var checkLiveliness = function checkLiveliness(tokenId, cb) {\n    fetch(EMBLEM_API + '/liveliness', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        tokenId: tokenId\n      })\n    }).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context.sent;\n                setLive(data.live);\n                console.log(\"Liveliness check\", data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    return cb();\n  };\n\n  var transferVault = function transferVault() {\n    setTransfering(true);\n    emblemContract.transferFrom(account, transferToAddress, tokenId).then(function (_ref2) {\n      var hash = _ref2.hash;\n      setHash(hash);\n    })[\"catch\"](function (error) {});\n  };\n\n  var delayedMint = function delayedMint() {\n    // setCreating(true)\n    setMinting(true);\n    var cipherTextHash = vaultAddresses.filter(function (address) {\n      return address.coin == \"ETH\";\n    })[0].address;\n    handlerContract.buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature).then(function (_ref3) {\n      var hash = _ref3.hash;\n      setTimeout(function () {\n        setHash(hash); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {// setShowMakingVaultMsg(false)\n      // setMinting(false)\n    });\n  };\n\n  var fireMetaMask = function fireMetaMask() {\n    console.log(mintPassword);\n    setAccepting(true);\n    getWitness(function (witness) {\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;\n      handlerContract.transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature).then(function (_ref4) {\n        var hash = _ref4.hash;\n        setTimeout(function () {\n          setHash(hash); // setShowMakingVaultMsg(true)\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })[\"catch\"](function (error) {\n        setAccepting(false);\n\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(\"tx failed.\", error);\n        } else {// setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      });\n    });\n  };\n\n  var addPreTransfer = function addPreTransfer() {\n    console.log('transferImage', \"0x\" + transferImage);\n    setPreTransfering(true);\n    handlerContract.addPreTransfer(tokenId, \"0x\" + transferImage).then(function (_ref5) {\n      var hash = _ref5.hash;\n      // setTimeout(() => {\n      setHash(hash);\n      console.log(\"Set Pre Transfering True\", preTransfering); // setShowMakingVaultMsg(true)\n      // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      if (error === null || error === void 0 ? void 0 : error.code) {\n        console.log(\"Error?\");\n        setPreTransfering(false);\n        setShowTransferPassword(false);\n        setTransferPassword('');\n      } else {// setShowTransferPassword(!showTransferPassword? true : false)\n        // setPreTransfering(false)\n        // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  var handleApproveForall = function handleApproveForall() {\n    setApproving(true);\n    emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(function (_ref6) {\n      var hash = _ref6.hash;\n      setTimeout(function () {\n        setHash(hash); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(\"tx failed.\", error);\n      } else {\n        setApproving(false); // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  var getVault = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              loadCache();\n              _context2.next = 3;\n              return fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 3:\n              responce = _context2.sent;\n              _context2.next = 6;\n              return responce.json();\n\n            case 6:\n              jsonData = _context2.sent;\n\n              // console.log('vault response was ', jsonData)\n              if (jsonData.image_ipfs) {\n                getIPFSImage(jsonData.image_ipfs);\n              }\n\n              if (!jsonData.name) {\n                setState({\n                  loaded: true\n                });\n                setInvalidVault(true);\n              } else {\n                setStates(jsonData);\n                saveCache(jsonData);\n                setLoadingApi(false);\n                setInvalidVault(false);\n              }\n\n              !vaultPrivacy && !loadedValues ? getAllBalancesLive([], tokenId, function (v) {\n                if (v) {\n                  setVaultValues(v);\n                }\n              }) : null;\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getVault() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var getIPFSImage = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(hash) {\n      var responce, jsonData, preview;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return fetch('https://gateway.ipfs.io/ipfs/' + hash, {\n                method: 'GET',\n                headers: {// redirect:'follow'\n                }\n              });\n\n            case 2:\n              responce = _context3.sent;\n              _context3.next = 5;\n              return responce.text();\n\n            case 5:\n              jsonData = _context3.sent;\n              // setVaultImage(jsonData) \n              preview = document.querySelector('img.d-block');\n              preview.src = jsonData;\n              console.log(jsonData);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getIPFSImage(_x2) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var getWitness = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return fetch(EMBLEM_API + '/witness/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  chainid: chainId.toString()\n                }\n              });\n\n            case 2:\n              responce = _context4.sent;\n              _context4.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context4.sent;\n\n              if (!jsonData.signature) {\n                _context4.next = 11;\n                break;\n              }\n\n              console.log('witness', jsonData);\n              return _context4.abrupt(\"return\", cb(jsonData));\n\n            case 11:\n              return _context4.abrupt(\"return\", cb(false));\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function getWitness(_x3) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var setStates = function setStates(jsonData) {\n    framed && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\" + framed : null;\n\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2);\n      console.log(\"ciphertextV2\", jsonData.ciphertextV2);\n    }\n\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setOwnedImage(jsonData.ownedImage || null);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    setVaultValues(vaultValues.concat(jsonData.values));\n    setVaultDataValues(jsonData.attributes.filter(function (item) {\n      return item.trait_type === \"key\";\n    }));\n    setVaultAddresses(jsonData.addresses);\n    setVaultIPFS(jsonData.ipfs || null);\n    setVaultImageIPFS(jsonData.image_ipfs || null);\n\n    if (jsonData.live == false) {\n      checkLiveliness(jsonData.tokenId, function () {});\n    }\n\n    setLive(jsonData.live == false ? false : true);\n    setNonce(jsonData.nonce);\n    setMintSignature(jsonData.signature);\n    setTo(jsonData.to);\n    setVaultChain(jsonData.network);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : jsonData.network == \"xdai\" ? 100 : jsonData.network == \"bsc\" ? 56 : jsonData.network == \"fantom\" ? 250 : 97);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    } // console.log('inside getstates. mine is ', mine)\n\n\n    setState({\n      loaded: true\n    });\n    var isPvt = jsonData.addresses.filter(function (item) {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n  };\n\n  var getEthBalances = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return fetch(EMBLEM_API + '/eth/balance/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context5.sent;\n              _context5.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context5.sent;\n              // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n              setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue)); // console.log('get eth balances', jsonData.values)\n\n              return _context5.abrupt(\"return\", cb(jsonData.values));\n\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function getEthBalances(_x4, _x5) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n\n  var getBtcBalance = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(values, address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return fetch(EMBLEM_API + '/btc/balance/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context6.sent;\n              _context6.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context6.sent;\n              return _context6.abrupt(\"return\", cb(values.concat(jsonData.values)));\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function getBtcBalance(_x6, _x7, _x8) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  var getNftBalance = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(values, address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return fetch(EMBLEM_API + '/eth/nft/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context7.sent;\n              _context7.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context7.sent;\n\n              if (!(jsonData.length > 0)) {\n                _context7.next = 10;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", cb(values.concat(jsonData)));\n\n            case 10:\n              return _context7.abrupt(\"return\", cb(values));\n\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function getNftBalance(_x9, _x10, _x11) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalances = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(values, tokenId, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return fetch(EMBLEM_API + '/vault/balance/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context8.sent;\n              _context8.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context8.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context8.next = 11;\n                break;\n              }\n\n              return _context8.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 11:\n              return _context8.abrupt(\"return\", cb(values));\n\n            case 12:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function getAllBalances(_x12, _x13, _x14) {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalancesLive = /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(values, tokenId, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!loadedValues) {\n                _context9.next = 2;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", cb(false));\n\n            case 2:\n              setLoadedValues(true);\n              _context9.next = 5;\n              return fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 5:\n              responce = _context9.sent;\n              _context9.next = 8;\n              return responce.json();\n\n            case 8:\n              jsonData = _context9.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context9.next = 14;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 14:\n              return _context9.abrupt(\"return\", cb(values));\n\n            case 15:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function getAllBalancesLive(_x15, _x16, _x17) {\n      return _ref14.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalancesByAddress = /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(values, ethAddress, btcAddress, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context10.sent;\n              _context10.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context10.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context10.next = 11;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 11:\n              return _context10.abrupt(\"return\", cb(values));\n\n            case 12:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function getAllBalancesByAddress(_x18, _x19, _x20, _x21) {\n      return _ref15.apply(this, arguments);\n    };\n  }();\n\n  var saveCache = function saveCache(vault) {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  var loadCache = function loadCache() {\n    var vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  var savePasswordToLocalStorage = function savePasswordToLocalStorage() {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  var loadPasswordFromLocalStorage = function loadPasswordFromLocalStorage() {\n    var storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  };\n\n  var getKeys = /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature\n              });\n              _context11.next = 7;\n              return fetch(EMBLEM_API + '/claim/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context11.sent;\n              _context11.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context11.sent;\n              return _context11.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    return function getKeys(_x22, _x23, _x24) {\n      return _ref16.apply(this, arguments);\n    };\n  }();\n\n  var getSignedJWT = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainid', chainId.toString());\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature,\n                tokenId: tokenId\n              });\n              _context12.next = 6;\n              return fetch('https://tor-us-signer.vercel.app/sign', {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 6:\n              responce = _context12.sent;\n              _context12.next = 9;\n              return responce.json();\n\n            case 9:\n              jsonData = _context12.sent;\n              return _context12.abrupt(\"return\", cb(jsonData));\n\n            case 11:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    return function getSignedJWT(_x25, _x26, _x27) {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n\n  var getRemoteKey = /*#__PURE__*/function () {\n    var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(tokenId, token, cb) {\n      var error, keys;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              error = false;\n              _context13.next = 3;\n              return torus;\n\n            case 3:\n              _context13.next = 5;\n              return _context13.sent.getTorusKey(\"tor-us-signer-vercel\", tokenId, {\n                verifier_id: tokenId\n              }, token)[\"catch\"](function (err) {\n                error = err.message;\n              });\n\n            case 5:\n              keys = _context13.sent;\n\n              if (!error) {\n                _context13.next = 11;\n                break;\n              }\n\n              console.log(\"error\", error);\n              return _context13.abrupt(\"return\", cb(false));\n\n            case 11:\n              return _context13.abrupt(\"return\", cb(keys));\n\n            case 12:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    return function getRemoteKey(_x28, _x29, _x30) {\n      return _ref18.apply(this, arguments);\n    };\n  }();\n\n  var addAddress = /*#__PURE__*/function () {\n    var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(signature, tokenId, coin, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature,\n                coin: coin\n              });\n              _context14.next = 7;\n              return fetch(EMBLEM_API + '/address/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context14.sent;\n              _context14.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context14.sent;\n              return _context14.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    return function addAddress(_x31, _x32, _x33, _x34) {\n      return _ref19.apply(this, arguments);\n    };\n  }();\n\n  var decryptEmbed = /*#__PURE__*/function () {\n    var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature\n              });\n              _context15.next = 7;\n              return fetch(EMBLEM_API + '/embed/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context15.sent;\n              _context15.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context15.sent;\n              return _context15.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15);\n    }));\n\n    return function decryptEmbed(_x35, _x36, _x37) {\n      return _ref20.apply(this, arguments);\n    };\n  }();\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n      var owned, _owner, finish, _finish;\n\n      return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              _finish = function _finish3() {\n                _finish = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n                  var acceptable, isApproved;\n                  return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n                    while (1) {\n                      switch (_context16.prev = _context16.next) {\n                        case 0:\n                          _context16.next = 2;\n                          return handlerContract.getPreTransfer(tokenId);\n\n                        case 2:\n                          acceptable = _context16.sent;\n                          _context16.next = 5;\n                          return emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n\n                        case 5:\n                          isApproved = _context16.sent;\n                          setApproved(isApproved);\n                          setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\");\n                          setOwner(_owner);\n                          setMine(_owner === account);\n                          loadPasswordFromLocalStorage();\n\n                        case 11:\n                        case \"end\":\n                          return _context16.stop();\n                      }\n                    }\n                  }, _callee16);\n                }));\n                return _finish.apply(this, arguments);\n              };\n\n              finish = function _finish2() {\n                return _finish.apply(this, arguments);\n              };\n\n              owned = false;\n              _context17.prev = 3;\n              _context17.next = 6;\n              return emblemContract.ownerOf(tokenId);\n\n            case 6:\n              _owner = _context17.sent;\n              finish();\n              _context17.next = 14;\n              break;\n\n            case 10:\n              _context17.prev = 10;\n              _context17.t0 = _context17[\"catch\"](3);\n              _owner = \"0x0000000000000000000000000000000000000000\";\n              finish();\n\n            case 14:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, null, [[3, 10]]);\n    }));\n\n    return function getContractStates() {\n      return _ref21.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {// console.log(\"mine?\", mine)\n    // console.log(\"claiming?\", claiming)\n    // console.log(\"accepting?\", accepting)\n    // console.log(\"acceptable\", acceptable)\n  });\n\n  var hasAddress = function hasAddress(coin) {\n    console.log(coin, vaultAddresses.filter(function (address) {\n      return address.coin == coin;\n    }).length > 0);\n    return vaultAddresses.filter(function (address) {\n      return address.coin == coin;\n    }).length > 0;\n  };\n\n  var onRenew = /*#__PURE__*/function () {\n    var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(name) {\n      return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              library.getSigner(account).signMessage('Renew: ' + tokenId).then(function (signature) {\n                var address = vaultAddresses.filter(function (address) {\n                  return address.coin == 'NMC';\n                })[0].address;\n                console.log('signature', signature, name);\n                fetch(EMBLEM_API + '/nmc/renew/' + address, {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    service: 'evmetadata',\n                    chainid: chainId.toString()\n                  },\n                  body: JSON.stringify({\n                    \"tokenId\": tokenId,\n                    \"signature\": signature,\n                    \"name\": name\n                  })\n                }).then( /*#__PURE__*/function () {\n                  var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(response) {\n                    var data;\n                    return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n                      while (1) {\n                        switch (_context18.prev = _context18.next) {\n                          case 0:\n                            _context18.next = 2;\n                            return response.json();\n\n                          case 2:\n                            data = _context18.sent;\n                            console.log(\"Requested Renew\", data);\n\n                          case 4:\n                          case \"end\":\n                            return _context18.stop();\n                        }\n                      }\n                    }, _callee18);\n                  }));\n\n                  return function (_x39) {\n                    return _ref23.apply(this, arguments);\n                  };\n                }()); // var options = {\n                //   'method': 'POST',\n                //   'url': 'http://api.emblemvault.io:443/nmc/renew/N8SohxKtB4bXRo5tAMwLdzynY38b8y2xSn',\n                //   'headers': {\n                //     'chainid': '1',\n                //     'Content-Type': 'application/json'\n                //   },\n                //   body: JSON.stringify({\n                //     \"tokenId\": \"45043567253954821\",\n                //     \"signature\": \"0xb7bd1cef0d7fc4303e85dfc9c720aa9c72ff3ff5922d6f891143ad5e8bb8fac272a1b4f34459d3d77e1cc69c7634615bb355f240053e56a97dfcf51d17146da11c\"\n                //   })\n                // };\n                // request(options, function (error, response) {\n                //   if (error) throw new Error(error);\n                //   console.log(response.body);\n                // });\n              });\n\n            case 1:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19);\n    }));\n\n    return function onRenew(_x38) {\n      return _ref22.apply(this, arguments);\n    };\n  }();\n\n  var handleSign = /*#__PURE__*/function () {\n    var _ref24 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n      return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              library.getSigner(account).signMessage('Claim: ' + tokenId).then(function (signature) {\n                getSignedJWT(signature, tokenId, function (token) {\n                  // console.log(\"Got JWT\", token)\n                  getRemoteKey(tokenId, token.token, function (keys) {\n                    // console.log(\"Got Keys\", keys)\n                    var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey);\n                    var payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)); // console.log(\"Decrypted payload locally\", payload)    \n\n                    setKeyValues(payload.values);\n                    setMnemonic(payload.phrase);\n                    var btcKey = window.phrasePathToKey(payload.phrase, vaultAddresses.filter(function (address) {\n                      return address.coin == 'BTC';\n                    })[0].path);\n                    setPrivKeyBTC(btcKey);\n                    var ethKey = window.phrasePathToKey(payload.phrase, vaultAddresses.filter(function (address) {\n                      return address.coin == 'ETH';\n                    })[0].path);\n                    setPrivKeyETH(ethKey);\n                    vaultAddresses.forEach(function (address) {\n                      address.key = window.phrasePathToKey(payload.phrase, address.path);\n                    }); // setKeyValues(vaultAddresses)\n\n                    onOpenKeysModal();\n                  });\n                }); // }\n              });\n\n            case 1:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20);\n    }));\n\n    return function handleSign() {\n      return _ref24.apply(this, arguments);\n    };\n  }();\n\n  var handleAddressSign = /*#__PURE__*/function () {\n    var _ref25 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(coin) {\n      return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              library.getSigner(account).signMessage('Address: ' + tokenId).then(function (signature) {\n                addAddress(signature, tokenId, coin, function (result) {\n                  getVault();\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21);\n    }));\n\n    return function handleAddressSign(_x40) {\n      return _ref25.apply(this, arguments);\n    };\n  }();\n\n  var handleOwnedEmbed = /*#__PURE__*/function () {\n    var _ref26 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n      return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              library.getSigner(account).signMessage('Embed: ' + tokenId).then(function (signature) {\n                decryptEmbed(signature, tokenId, function (result) {\n                  setVaultImage(result.ownedImage);\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22);\n    }));\n\n    return function handleOwnedEmbed() {\n      return _ref26.apply(this, arguments);\n    };\n  }();\n\n  var handleClaim = /*#__PURE__*/function () {\n    var _ref27 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n      return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              emblemContract.burn(tokenId).then(function (_ref28) {\n                var hash = _ref28.hash;\n                setClaiming(true);\n                setTimeout(function () {\n                  setHash(hash);\n                }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n              });\n\n            case 1:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee23);\n    }));\n\n    return function handleClaim() {\n      return _ref27.apply(this, arguments);\n    };\n  }();\n\n  var pingClaimLogs = function pingClaimLogs(cb) {\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId=' + chainId.toString(), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    }).then( /*#__PURE__*/function () {\n      var _ref29 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context24.sent;\n                console.log(\"Log check\", data);\n                return _context24.abrupt(\"return\", cb());\n\n              case 5:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24);\n      }));\n\n      return function (_x41) {\n        return _ref29.apply(this, arguments);\n      };\n    }());\n  };\n\n  var startDecryptEffect = /*#__PURE__*/function () {\n    var _ref30 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {\n      var theLetters, ctnt, speed, increment, clen, si, stri, block, fixed, nextFrame;\n      return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              nextFrame = function _nextFrame(pos) {\n                for (var i = 0; i < clen - stri; i++) {\n                  //Random number\n                  var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n                  var letter = theLetters.charAt(num);\n                  block = block + letter;\n                }\n\n                if (si == increment - 1) {\n                  stri++;\n                }\n\n                if (si == increment) {\n                  // Add a letter;\n                  // every speed*10 ms\n                  fixed = fixed + ctnt.charAt(stri - 1);\n                  si = 0;\n                } // $(\"#output\").html(fixed + block);\n\n\n                setDecryptedEffect(fixed + block);\n                block = '';\n              };\n\n              if (!decryptedEffectRunning) {\n                _context25.next = 3;\n                break;\n              }\n\n              return _context25.abrupt(\"return\");\n\n            case 3:\n              setDecryptedEffectRunning(true);\n              theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n              ctnt = 'Decrypting'; // Your text goes here\n\n              speed = 5; // ms per frame\n\n              increment = 8; // frames per step. Must be >2\n\n              clen = ctnt.length;\n              si = 0;\n              stri = 0;\n              block = '';\n              fixed = '';\n\n              (function rustle(i) {\n                setTimeout(function () {\n                  if (--i) {\n                    rustle(i);\n                  } else {\n                    setDecryptedEffectRunning(false);\n                  }\n\n                  nextFrame(i);\n                  si = si + 1;\n                }, speed);\n              })(clen * increment + 1);\n\n            case 14:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee25);\n    }));\n\n    return function startDecryptEffect() {\n      return _ref30.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getVault();\n  }, []);\n  useEffect(function () {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null; // console.log('in the usefeect that clls getcontractstates')\n  });\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n');\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    console.log(vaultAddresses);\n    var ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      var ethAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'ETH';\n      })[0].address;\n      var btcAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'BTC';\n      })[0].address;\n      console.log(\"SUCCESS\", vaultAddresses);\n      getAllBalancesByAddress([], ethAddress, btcAddress, function (values) {\n        setVaultValues(values);\n      }); // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {\n      console.log('WTF', err);\n    }\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\");\n    return vaultAddresses;\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(function (item) {\n      if (item.address.includes('private')) {\n        var cipherText = item.address.replace('private:', '');\n        item.address = decrypt(cipherText, key);\n      }\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  function visitOpenSeaLink() {\n    location.href = 'https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + (vaultChainId == 137 ? 'matic/' : '') + contractAddresses.emblemVault[vaultChainId] + '/' + tokenId;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\"\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\"\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc)\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: \"\\n              // $(\\\".NFT\\\").tilt({    \\n              //     maxTilt: 3\\n              // });\\n              $(\\\".NFT\\\").trigger('mouseenter');\\n              $(\\\".NFT\\\").trigger('mouseclick'), '.NFT';\\n              \"\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    privValues: privValues,\n    addresses: vaultAddresses\n  }), showOffer ? __jsx(OfferModal, {\n    isOpen: isOpenOfferModal,\n    onClose: onCloseOfferModal,\n    tokenId: tokenId,\n    mine: mine\n  }) : null, __jsx(Loader, {\n    loaded: state.loaded\n  }, __jsx(Box, {\n    height: \"40px\"\n  }), loadingApi ? __jsx(Refreshing, null) : '', !invalidVault ? __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\"\n  }, __jsx(Box, {\n    className: \"NFT\",\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"blue.500\"\n  }, \"Vault Network: \", CHAIN_ID_NAMES[vaultChainId]), __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\" // textTransform=\"uppercase\"\n    ,\n    alignItems: \"center\"\n  }, vaultName, !vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null), __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\"\n  }, vaultValues.length && vaultValues.filter(function (item) {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultImage,\n    items: vaultValues.map(function (value) {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage\n  }), mine && ownedImage ? __jsx(Button, {\n    onClick: function onClick() {\n      handleOwnedEmbed();\n    }\n  }, \"(OWNED) Show Full Embed\") : null), __jsx(Stack, {\n    align: \"center\"\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\"\n  }, __jsx(Stack, null, __jsx(Text, {\n    fontSize: \"xs\"\n  }, vaultChainId == chainId ? __jsx(Link, {\n    href: \"./myvaults?address=\" + owner\n  }, \"Owner: \", owner) : null), __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\"\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc)\n  }))))), __jsx(Box, {\n    p: \"6\"\n  }, vaultPrivacy ? __jsx(Box, {\n    mb: 5\n  }, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: function onChange(e) {\n      return tryDecrypt(e.target.value);\n    },\n    \"aria-describedby\": \"password-helper-text\"\n  })) : __jsx(Box, {\n    d: \"flex\",\n    backgroundColor: colorMode == \"light\" ? \"gray.100\" : \"gray.700\",\n    alignItems: \"baseline\",\n    className: \"coin-balance-content\"\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\"\n  }, __jsx(Text, {\n    as: \"h4\",\n    mt: 2,\n    fontWeight: \"semibold\"\n  }, \"Current Contents:  \", __jsx(\"button\", {\n    onClick: function onClick() {\n      getAllBalancesLive([], tokenId, function (v) {\n        setLoadedValues(false);\n        setVaultValues(v);\n      });\n    }\n  }, \" [Refresh Balances]\")), __jsx(Text, {\n    as: \"p\",\n    color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\"\n  }, \"$\", Number(vaultTotalValue.toFixed(4)).toLocaleString()), vaultValues.length ? vaultValues.map(function (coin) {\n    return __jsx(Stack, null, __jsx(CoinBalance, {\n      colorMode: colorMode,\n      coin: coin,\n      mine: status === 'claimed' && claimedBy === account || mine,\n      onRenew: onRenew\n    }));\n  }) : __jsx(Refreshing, null), vaultDataValues.length ? vaultDataValues.map(function (data) {\n    return __jsx(Text, null, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, null, \"Nothing in here! Fill 'er up!\") : null)), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\"\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6\n  }, __jsx(Stack, null, __jsx(Text, null, \"Deposit Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\"\n  }, vaultAddresses.map(function (addr) {\n    return __jsx(Button, {\n      className: \"address_nft_button\",\n      ml: 2,\n      mt: 2,\n      \"font-weight\": \"100 !important\",\n      key: addr.address,\n      onClick: function onClick() {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      }\n    }, addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP' : addr.coin);\n  })), (mine || status === 'claimed') && vaultAddresses.length < 8 ? __jsx(React.Fragment, null, __jsx(\"button\", {\n    className: \"nft_button\",\n    onClick: function onClick() {\n      onManageAddressToggle();\n    }\n  }, \"Manage Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\"\n  }, __jsx(Collapse, {\n    isOpen: isManageAddressOpen\n  }, !hasAddress('DOGE') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('DOGE');\n    }\n  }, \"Add DOGE\") : null, !hasAddress('DGB') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('DGB');\n    }\n  }, \"Add Digibyte\") : null, !hasAddress('NMC') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('NMC');\n    }\n  }, \"Add Namecoin\") : null, !hasAddress('LTC') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('LTC');\n    }\n  }, \"Add Litecoin\") : null, !hasAddress('MONA') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('MONA');\n    }\n  }, \"Add Mona\") : null))) : null))) : null, !(status === 'claimed') && (vaultChainId === 1 || vaultChainId === 4 || vaultChainId === 137) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\"\n  }, __jsx(Stack, {\n    d: \"flex\",\n    width: \"100%\"\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: function onClick() {\n      visitOpenSeaLink();\n    }\n  }, \"View Vault on Opensea\"), showOffer ? __jsx(Button, {\n    className: \"\",\n    onClick: function onClick() {\n      onOpenOfferModal();\n    }\n  }, mine ? 'My Offers' : 'Make an Offer', \" (NFT\\xB2NFT)\") : null)) : null, !(status === 'claimed') && mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    width: \"100%\"\n  }, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    width: \"100%\"\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: onToggle\n  }, \"Transfer Vault\"), __jsx(Collapse, {\n    isOpen: isOpen\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\"\n  }, __jsx(FormLabel, {\n    htmlFor: \"owner-address\"\n  }, \"Address\"), __jsx(Input, {\n    mt: 1,\n    type: \"text\",\n    id: \"transferAddress\",\n    value: transferToAddress || '',\n    onChange: function onChange(e) {\n      console.log(\"Transfer to\", e.target.value);\n      setTransferToAddress(e.target.value);\n    },\n    autoComplete: \"off\"\n  })), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\"\n  }, __jsx(Button, {\n    isDisabled: !isETHAddress(transferToAddress),\n    onClick: function onClick() {\n      onToggle();\n      transferVault();\n    }\n  }, \"Transfer Now\")))))) : null, mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\"\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: function onClick() {\n      if (!approved) {\n        return handleApproveForall();\n      } else {\n        var key = CryptoJS.lib.WordArray.random(128 / 8).toString();\n        var sha = CryptoJS.SHA256(key).toString();\n        console.log('plain', key);\n        console.log('sha', sha);\n        setTransferPassword(key);\n        transferImage = sha;\n        setTimeout(function () {\n          addPreTransfer();\n        }, 500);\n      }\n    }\n  }, \" \", approved ? \"Get Link (Send Vault Via Link)\" : \"Approve Gifting\", \" \"))) : null, (showTransferPassword || mintPassword) && acceptable ? __jsx(Box, null, __jsx(Link, {\n    href: location.protocol + '//' + location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword)\n  }, \"Copy Gift Link\"), __jsx(Text, null, \"Password: \", transferPassword || mintPassword)) : null, acceptable && claimedBy !== account ? __jsx(React.Fragment, null, __jsx(Button, {\n    mt: 2,\n    width: \"100%\",\n    onClick: function onClick() {\n      fireMetaMask();\n    }\n  }, \"Accept\"), __jsx(Input, {\n    mt: 2,\n    type: \"password\",\n    id: \"mintPassword\",\n    minLength: 3,\n    maxLength: 200,\n    value: mintPassword || '',\n    onChange: function onChange(e) {\n      console.log('grrr', e.target.value, mintPassword);\n      setMintPassword(e.target.value);\n    },\n    autoComplete: \"off\"\n  })) : null, !(status === 'claimed') && account && vaultChainId === chainId && mine ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\"\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      handleClaim();\n    },\n    isDisabled: claiming\n  }, claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)')) // || !live && nonce && mintSignature && vaultCiphertextV2 && to == account\n  : status === 'claimed' && claimedBy === account && vaultChainId === chainId ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\"\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign\n  }, \"Get Keys\")) : null, !live && nonce && mintSignature && vaultCiphertextV2 && to == account && vaultChainId == chainId && status !== 'claimed' ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: delayedMint\n  }, \"Mint Me \") : null, showMakingVaultMsg ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\"\n  }, \"Making Vault ...\") : null), vaultIPFS ? __jsx(Stack, null, __jsx(HStack, {\n    align: \"center\"\n  }, __jsx(Link, {\n    target: \"new\",\n    mb: 2,\n    ml: 35,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultIPFS,\n    isExternal: true\n  }, \"View Metadata on IPFS \"), vaultImageIPFS ? __jsx(Link, {\n    mb: 2,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultImageIPFS,\n    isExternal: true\n  }, \"View Image on IPFS \") : null)) : null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\"\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\"\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\"\n  }, __jsx(AlertIcon, null), accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving ? \"Handling Approval Flow ...\" : transfering ? \"Transfering Vault ...\" : minting ? \"Minting Vault\" : \"Generating Gift Link ...\") : null)) : __jsx(Stack, {\n    align: \"center\"\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n  }), __jsx(Text, null, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\"\n  }, \"CREATE ONE HERE!\"))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      if (claiming && !accepting && !preTransfering) {\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account);\n        pingClaimLogs(function () {\n          location.href = location.origin + '/nft?id=' + tokenId;\n        });\n      } else if (preTransfering) {\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        setApproving(false);\n        getVault();\n        setHash(null);\n      } else if (transfering) {\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else if (minting) {\n        checkLiveliness(tokenId, function () {\n          setMinting(false);\n          setLive(true); // setShowMakingVaultMsg(false)\n          // location.href = location.origin + '/nft?id=' + tokenId\n        });\n      } else {\n        console.log('minting', minting);\n        console.log('claiming', claiming);\n        console.log('accepting', accepting);\n        console.log('preTransfering', preTransfering);\n        console.log('approving', approving);\n        console.log(\"Unknown state\");\n      }\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\"\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}