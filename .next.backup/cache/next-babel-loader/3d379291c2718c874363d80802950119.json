{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/KeysModal.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, Text, Stack, Button, useColorMode } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR } from '../constants';\nexport default function KeysModal({\n  isOpen,\n  onClose,\n  mnemonic,\n  privKeyBTC,\n  privKeyETH,\n  privValues\n}) {\n  const phrase = mnemonic;\n  const btcKey = privKeyBTC;\n  const ethKey = privKeyETH;\n  const values = privValues;\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    0: phraseCopied,\n    1: setPhraseCopied\n  } = useState(false);\n  useEffect(() => {\n    if (phraseCopied) {\n      const timeout = setTimeout(() => {\n        setPhraseCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [phraseCopied]);\n  const {\n    0: BTCKeyCopied,\n    1: setBTCKeyCopied\n  } = useState(false);\n  useEffect(() => {\n    if (BTCKeyCopied) {\n      const timeout = setTimeout(() => {\n        setBTCKeyCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [BTCKeyCopied]);\n  const {\n    0: ETHKeyCopied,\n    1: setETHKeyCopied\n  } = useState(false);\n  useEffect(() => {\n    if (ETHKeyCopied) {\n      const timeout = setTimeout(() => {\n        setETHKeyCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ETHKeyCopied]);\n\n  function copyWithFlag(content, whichOne) {\n    copy(content);\n    whichOne == 'phrase' ? setPhraseCopied(true) : whichOne == 'BTCKey' ? setBTCKeyCopied(true) : whichOne == 'ETHKey' ? setETHKeyCopied(true) : null;\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    color: COLOR[colorMode],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, \"Your Vault Keys\")), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    mb: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, \"Your mnemonic phrase (click to copy):\")), __jsx(Stack, {\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    whiteSpace: \"unset\",\n    height: \"unset\",\n    p: 2,\n    onClick: () => copyWithFlag(phrase, 'phrase'),\n    isActive: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, phraseCopied ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 33\n    }\n  }, \"Copied!\") : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 56\n    }\n  }, phrase))), __jsx(Stack, {\n    direction: \"row\",\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, \"Your BTC private key (click to copy):\")), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    whiteSpace: \"unset\",\n    height: \"unset\",\n    p: 2,\n    onClick: () => copyWithFlag(btcKey, 'BTCKey'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, BTCKeyCopied ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 33\n    }\n  }, \"Copied!\") : __jsx(Text, {\n    isTruncated: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 56\n    }\n  }, btcKey))), __jsx(Stack, {\n    direction: \"row\",\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, \"Your ETH private key (click to copy):\")), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    whiteSpace: \"unset\",\n    height: \"unset\",\n    p: 2,\n    onClick: () => copyWithFlag(ethKey, 'ETHKey'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, ETHKeyCopied ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 33\n    }\n  }, \"Copied!\") : __jsx(Text, {\n    isTruncated: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 56\n    }\n  }, ethKey))), privValues ? __jsx(React.Fragment, null, __jsx(Stack, {\n    direction: \"row\",\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, \"Your Values (click to copy):\")), privValues.map((item, index) => {\n    return __jsx(Stack, {\n      direction: \"row\",\n      justify: \"space-between\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 19\n      }\n    }, __jsx(Button, {\n      whiteSpace: \"unset\",\n      height: \"unset\",\n      p: 2,\n      onClick: () => copyWithFlag(values, 'values'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 19\n      }\n    }, ETHKeyCopied ? __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 37\n      }\n    }, \"Copied!\") : __jsx(Text, {\n      isTruncated: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 60\n      }\n    }, item.key, \" : \", item.value)));\n  })) : null))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/KeysModal.tsx"],"names":["useEffect","useState","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","Text","Stack","Button","useColorMode","copy","COLOR","KeysModal","isOpen","onClose","mnemonic","privKeyBTC","privKeyETH","privValues","phrase","btcKey","ethKey","values","colorMode","phraseCopied","setPhraseCopied","timeout","setTimeout","clearTimeout","BTCKeyCopied","setBTCKeyCopied","ETHKeyCopied","setETHKeyCopied","copyWithFlag","content","whichOne","map","item","index","key","value"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  Text,\n  Stack,\n  Button,\n  useColorMode,\n} from '@chakra-ui/core'\nimport copy from 'copy-to-clipboard'\nimport { COLOR } from '../constants'\n\nexport default function KeysModal({\n  isOpen,\n  onClose,\n  mnemonic,\n  privKeyBTC,\n  privKeyETH,\n  privValues\n}: {\n  isOpen: boolean\n  onClose: () => void\n  mnemonic: string\n  privKeyBTC: string\n  privKeyETH: string\n  privValues\n}): JSX.Element {\n  const phrase = mnemonic\n  const btcKey = privKeyBTC\n  const ethKey = privKeyETH\n  const values = privValues\n  const { colorMode } = useColorMode()\n\n  const [phraseCopied, setPhraseCopied] = useState(false)\n  useEffect(() => {\n    if (phraseCopied) {\n      const timeout = setTimeout(() => {\n        setPhraseCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [phraseCopied])\n\n  const [BTCKeyCopied, setBTCKeyCopied] = useState(false)\n  useEffect(() => {\n    if (BTCKeyCopied) {\n      const timeout = setTimeout(() => {\n        setBTCKeyCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [BTCKeyCopied])\n\n  const [ETHKeyCopied, setETHKeyCopied] = useState(false)\n  useEffect(() => {\n    if (ETHKeyCopied) {\n      const timeout = setTimeout(() => {\n        setETHKeyCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [ETHKeyCopied])\n\n  function copyWithFlag(content: string, whichOne: string): void {\n    copy(content)\n    whichOne == 'phrase'\n      ? setPhraseCopied(true)\n      : whichOne == 'BTCKey'\n      ? setBTCKeyCopied(true)\n      : whichOne == 'ETHKey'\n      ? setETHKeyCopied(true)\n      : null\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent color={COLOR[colorMode]}>\n        <ModalHeader>\n          <Text>Your Vault Keys</Text>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Stack direction=\"column\" mb={10}>\n            <Stack direction=\"row\">\n              <Text>Your mnemonic phrase (click to copy):</Text>\n            </Stack>\n            <Stack direction=\"row\">\n              <Button\n                width=\"100%\"\n                whiteSpace=\"unset\"\n                height=\"unset\"\n                p={2}\n                onClick={() => copyWithFlag(phrase, 'phrase')}\n                isActive={true}\n              >\n                {phraseCopied ? <Text>Copied!</Text> : <Text>{phrase}</Text>}\n              </Button>\n            </Stack>\n\n            <Stack direction=\"row\" mt={4}>\n              <Text>Your BTC private key (click to copy):</Text>\n            </Stack>\n\n            <Stack direction=\"row\" justify=\"space-between\">\n              <Button whiteSpace=\"unset\" height=\"unset\" p={2} onClick={() => copyWithFlag(btcKey, 'BTCKey')}>\n                {BTCKeyCopied ? <Text>Copied!</Text> : <Text isTruncated>{btcKey}</Text>}\n              </Button>\n            </Stack>\n\n            <Stack direction=\"row\" mt={4}>\n              <Text>Your ETH private key (click to copy):</Text>\n            </Stack>\n\n            <Stack direction=\"row\" justify=\"space-between\">\n              <Button whiteSpace=\"unset\" height=\"unset\" p={2} onClick={() => copyWithFlag(ethKey, 'ETHKey')}>\n                {ETHKeyCopied ? <Text>Copied!</Text> : <Text isTruncated>{ethKey}</Text>}\n              </Button>\n            </Stack>\n            {privValues ? (\n            <>\n              <Stack direction=\"row\" mt={4}>\n                <Text>Your Values (click to copy):</Text>\n              </Stack>\n              {privValues.map((item, index) => {\n                return (\n                  <Stack direction=\"row\" justify=\"space-between\">\n                  <Button whiteSpace=\"unset\" height=\"unset\" p={2} onClick={() => copyWithFlag(values, 'values')}>\n                    {ETHKeyCopied ? <Text>Copied!</Text> : <Text isTruncated>{item.key} : {item.value}</Text>}\n                  </Button>\n                </Stack>\n                )\n              })}\n              \n            </> \n            ) : null}\n            \n          </Stack>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}