{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Box, Button, Flex, Input, Select, useColorMode, Table, Thead, Tbody, Tr, Th, Td, useToast } from \"@chakra-ui/react\";\nimport { EMBLEM_V2_API } from '../constants';\nexport default function TokenOwnershipTable() {\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: formValues,\n    1: setFormValues\n  } = useState({\n    owner: \"\",\n    status: \"unminted\",\n    claimedBy: \"\"\n  });\n  const {\n    colorMode\n  } = useColorMode();\n  const toast = useToast();\n  useEffect(() => {\n    axios.post(EMBLEM_V2_API + '/findTokenOwnership', formValues).then(res => {\n      if (res.data.error) {\n        throw new Error(res.data.msg);\n      }\n\n      setData(res.data.tokens);\n    }).catch(err => {\n      console.error(err);\n      toast({\n        title: \"Error fetching data.\",\n        description: err.message,\n        status: \"error\",\n        duration: 9000,\n        isClosable: true\n      });\n    });\n  }, [formValues]);\n\n  const handleChange = e => {\n    setFormValues(_objectSpread(_objectSpread({}, formValues), {}, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(formValues); // Perform your search/filter operation here\n  };\n\n  return __jsx(Box, null, __jsx(Flex, {\n    mb: \"2\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(Input, {\n    name: \"owner\",\n    value: formValues.owner,\n    onChange: handleChange,\n    placeholder: \"Owner\",\n    mr: \"2\"\n  }), __jsx(Select, {\n    name: \"status\",\n    value: formValues.status,\n    onChange: handleChange,\n    mr: \"2\"\n  }, __jsx(\"option\", {\n    value: \"unminted\"\n  }, \"Unminted\"), __jsx(\"option\", {\n    value: \"minted\"\n  }, \"Minted\"), __jsx(\"option\", {\n    value: \"claimed\"\n  }, \"Claimed\")), __jsx(Input, {\n    name: \"claimedBy\",\n    value: formValues.claimedBy,\n    onChange: handleChange,\n    placeholder: \"Claimed By\",\n    mr: \"2\"\n  }), __jsx(Button, {\n    type: \"submit\"\n  }, \"Search\"))), __jsx(Table, {\n    variant: \"simple\",\n    colorScheme: colorMode === 'light' ? 'blackAlpha' : 'whiteAlpha'\n  }, __jsx(Thead, null, __jsx(Tr, null, __jsx(Th, null, \"Owner\"), __jsx(Th, null, \"Status\"), __jsx(Th, null, \"Claimed By\"), __jsx(Th, null, \"Internal Token ID\"), __jsx(Th, null, \"Category\"))), __jsx(Tbody, null, data.map(row => __jsx(Tr, {\n    key: row.id\n  }, __jsx(Td, null, row.owner == \"0x0000000000000000000000000000000000000000\" ? row.createdBy : row.owner), __jsx(Td, null, row.status), __jsx(Td, null, row.claimedBy), __jsx(Td, null, row.internalTokenId), __jsx(Td, null, row.category))))));\n}","map":null,"metadata":{},"sourceType":"module"}