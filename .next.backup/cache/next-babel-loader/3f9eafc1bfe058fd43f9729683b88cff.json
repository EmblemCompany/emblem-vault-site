{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Leaderboard.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nexport default function LeaderBoard() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: loadingOwners,\n    1: setLoadingOwners\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: owners,\n    1: setOwners\n  } = useState({});\n  const {\n    0: totalSupply,\n    1: setTotalSupply\n  } = useState(0);\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  const getVaults = async () => {\n    getOwners();\n    loadCache(); // try {\n    //   const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account), {\n    //     method: 'GET',\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //       service: 'evmetadata',\n    //       chainId: chainId.toString(),\n    //     },\n    //   })\n    //   const jsonData = await response.json()\n    //   setState({ loaded: true })\n    //   setVaults(jsonData)\n    //   saveCache(jsonData)\n    //   setLoadingApi(false)\n    //   // console.log(jsonData)\n    // } catch (error) {}\n  };\n\n  const getOwners = async () => {\n    if (!loadingOwners) {\n      setOwners({});\n      setLoadingOwners(true);\n    } else {\n      return;\n    }\n\n    let totalSupply = await emblemContract.totalSupply();\n    setTotalSupply(totalSupply.toString());\n    console.log(totalSupply);\n    getTokensByIndex(Number(totalSupply.toString()), 0, () => {\n      console.log('owners', owners);\n      setLoadingOwners(false);\n    });\n  };\n\n  async function getTokensByIndex(count, index, cb) {\n    let tokenId = await emblemContract.tokenByIndex(index);\n    console.log('tokenId', tokenId.toString(), index);\n    getOwner(tokenId.toString(), () => {\n      if (count - 1 < index + 1) {\n        return cb();\n      } else {\n        return getTokensByIndex(count, index + 1, cb);\n      }\n    });\n  }\n\n  async function getOwner(tokenId, cb) {\n    let owner = await emblemContract.ownerOf(tokenId);\n\n    if (owner === '0x0000000000000000000000000000000000000000' || owner.toLowerCase() === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180') {\n      return cb();\n    }\n\n    if (!owners[owner]) {\n      owners[owner] = [{\n        tokenId: tokenId\n      }];\n      setOwners(owners);\n    } else {\n      owners[owner].push({\n        tokenId: tokenId.toString()\n      });\n      setOwners(owners);\n    }\n\n    return cb();\n  }\n\n  const loadCache = () => {\n    let owners = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_leader')); // Load vaults from storage before updating from server!\n\n    if (owners) {\n      setState({\n        loaded: true\n      });\n      setOwners(vaults);\n      setLoadingOwners(true);\n    }\n  };\n\n  const saveCache = owners => {\n    localStorage.setItem((address ? address : account) + '_' + chainId + '_leader', JSON.stringify(owners)); // Save new state for later\n  };\n\n  const {\n    0: acct,\n    1: setAcct\n  } = useState(''); // useEffect(() => {\n  //   if (account && acct != account) {\n  //     setAcct(account)\n  //     setState({ loaded: false })\n  //     getVaults()\n  //   }\n  // }, [account, acct])\n\n  const {\n    0: chain,\n    1: setChain\n  } = useState(chainId);\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    account && chainId ? getVaults() : setState({\n      loaded: true\n    });\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, loadingOwners ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 24\n    }\n  }) : '', __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, Object.keys(owners).map((owner, index) => {\n    return __jsx(Stack, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }, __jsx(Text, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 15\n      }\n    }, \"Address: \", owner, \" Vaults: \", owners[owner].length));\n  }))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Leaderboard.tsx"],"names":["Flex","Text","Stack","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","contractAddresses","useContract","LeaderBoard","query","account","chainId","vaults","setVaults","state","setState","loaded","loadingApi","setLoadingApi","loadingOwners","setLoadingOwners","address","setAddress","owners","setOwners","totalSupply","setTotalSupply","emblemContract","emblemVault","emblemAbi","getVaults","getOwners","loadCache","toString","console","log","getTokensByIndex","Number","count","index","cb","tokenId","tokenByIndex","getOwner","owner","ownerOf","toLowerCase","push","JSON","parse","localStorage","getItem","saveCache","setItem","stringify","acct","setAcct","chain","setChain","Object","keys","map","length"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Spinner } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\n\nexport default function LeaderBoard() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [loadingOwners, setLoadingOwners] = useState(false)\n  const [address, setAddress] = useState(query.address)\n  const [owners, setOwners] = useState({})\n  const [totalSupply, setTotalSupply] = useState(0)\n\n\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const getVaults = async () => {\n    getOwners()\n    loadCache()\n    // try {\n    //   const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account), {\n    //     method: 'GET',\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //       service: 'evmetadata',\n    //       chainId: chainId.toString(),\n    //     },\n    //   })\n    //   const jsonData = await response.json()\n    //   setState({ loaded: true })\n    //   setVaults(jsonData)\n    //   saveCache(jsonData)\n    //   setLoadingApi(false)\n    //   // console.log(jsonData)\n    // } catch (error) {}\n  }\n\n  const getOwners = async () => {\n    if (!loadingOwners) {\n      setOwners({})\n      setLoadingOwners(true)\n    } else {\n      return\n    }\n    let totalSupply = await (emblemContract as Contract).totalSupply()\n    setTotalSupply(totalSupply.toString())\n    console.log(totalSupply)\n    getTokensByIndex(Number(totalSupply.toString()), 0, () => {\n      console.log('owners', owners)\n      setLoadingOwners(false)\n    })\n  }\n\n  async function getTokensByIndex(count, index, cb) {\n    let tokenId = await (emblemContract as Contract).tokenByIndex(index)\n    console.log('tokenId', tokenId.toString(), index)\n    getOwner(tokenId.toString(), ()=>{\n      if (count - 1 < index + 1) {\n          return cb()\n        } else {\n          return getTokensByIndex(count, index + 1, cb)\n        }\n    })\n  }\n\n  async function getOwner(tokenId, cb) {\n    let owner = await (emblemContract as Contract).ownerOf(tokenId)\n    if (owner === '0x0000000000000000000000000000000000000000' || owner.toLowerCase() === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180') {\n      return cb()\n    }\n    if (!owners[owner]) {\n      owners[owner] = [{ tokenId: tokenId}]\n      setOwners(owners)\n    } else {\n      owners[owner].push({ tokenId: tokenId.toString() })\n      setOwners(owners)\n    }\n    return cb()\n  }\n\n  const loadCache = () => {\n    let owners = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_leader')) // Load vaults from storage before updating from server!\n    if (owners) {\n      setState({ loaded: true })\n      setOwners(vaults)\n      setLoadingOwners(true)\n    }\n  }\n\n  const saveCache = (owners) => {\n    localStorage.setItem((address ? address : account) + '_' + chainId + '_leader', JSON.stringify(owners)) // Save new state for later\n  }\n\n  const [acct, setAcct] = useState('')\n  // useEffect(() => {\n  //   if (account && acct != account) {\n  //     setAcct(account)\n  //     setState({ loaded: false })\n  //     getVaults()\n  //   }\n  // }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    account && chainId ? getVaults() : setState({ loaded: true })\n  }, [])\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingOwners ? <Refreshing /> : ''}\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n        <Stack>\n          {Object.keys(owners).map((owner, index) => {\n            return (\n            <Stack key={index}>  \n              <Text key={index}>Address: {owner} Vaults: {owners[owner].length}</Text>              \n            </Stack>\n            )\n          })}\n        </Stack>        \n      </Flex>\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}