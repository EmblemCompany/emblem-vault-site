{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Button, Flex } from '@chakra-ui/core';\nimport { Contract } from '@ethersproject/contracts';\nimport { useWeb3React } from '@web3-react/core';\n\nconst getContract = (address, abi, library, account) => {\n  return new Contract(address, abi, library.getSigner(account).connectUnchecked());\n};\n\nexport default function ApprovalButton(props) {\n  const {\n    account,\n    library\n  } = useWeb3React();\n  const {\n    0: approved,\n    1: setApproved\n  } = useState(false);\n  const {\n    0: decimals,\n    1: setDecimals\n  } = useState(null);\n  const {\n    0: spendingContract,\n    1: setSpendingContract\n  } = useState(null);\n  const {\n    0: handlerContract,\n    1: setHandlerContract\n  } = useState(null);\n  useEffect(() => {\n    if (!handlerContract && props.handler) {\n      createHandlerContract(props.handler);\n    }\n  });\n  useEffect(() => {\n    if (!spendingContract && props.spending) {\n      createSpendingContract(props.spending);\n    }\n  });\n  useEffect(() => {\n    if (spendingContract) {\n      checkApproval(props.handler, props.spending, props.amount);\n    }\n  });\n  return account && !approved ? __jsx(Flex, {\n    w: \"100%\",\n    flexWrap: \"wrap\",\n    mt: 3\n  }, __jsx(Button, {\n    onClick: chooseApprovalFlow,\n    backgroundColor: \"#02b402\",\n    color: \"black !important\",\n    fontWeight: \"bold !important\",\n    width: \"100%\"\n  }, props.label)) : null;\n\n  function createSpendingContract(spending) {\n    let _contract = getContract(spending.address, spending.abi, library, account);\n\n    setSpendingContract(_contract);\n  }\n\n  function createHandlerContract(handler) {\n    let _contract = getContract(handler.address, handler.abi, library, account);\n\n    setHandlerContract(_contract);\n  }\n\n  function checkApproval(handler, spending, amount) {\n    if (amount > 0) {\n      // IS ERC20 Approval Check\n      spendingContract.decimals().then(decimals => {\n        setDecimals(decimals);\n        spendingContract.allowance(account, handler.address).then(allowance => {\n          setApproved(allowance >= amount * 10 ** decimals);\n        });\n      });\n    } else {\n      // IS NFT Approval Check\n      spendingContract.isApprovedForAll(account, handler.address).then(approved => {\n        setApproved(approved);\n      });\n    }\n  }\n\n  function chooseApprovalFlow() {\n    if (props.amount > 0) {\n      return approveCovalFlow();\n    } else {\n      return approveNFTFlow();\n    }\n  }\n\n  function approveCovalFlow() {\n    spendingContract.approve(props.handler.address, 1000000 * 10 ** decimals).then(tx => {\n      props.watcher(tx.hash, receipt => {\n        if (receipt.status === 1) {\n          setApproved(true);\n        }\n      });\n    });\n  }\n\n  function approveNFTFlow() {\n    spendingContract.setApprovalForAll(props.handler.address, true).then(tx => {\n      props.watcher(tx.hash, receipt => {\n        if (receipt.status === 1) {\n          setApproved(true);\n        }\n      });\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}