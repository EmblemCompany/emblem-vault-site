{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar isEvent = function isEvent(key) {\n  return /^on[A-Z]/.test(key);\n};\n\nvar getEventsFromProps = function getEventsFromProps(props) {\n  return Object.keys(props).filter(isEvent).map(getEventFromKey);\n};\n\nvar getEventFromKey = function getEventFromKey(key) {\n  return key.substr(2).toLowerCase();\n};\n\nexport var unsub = function unsub(component) {\n  var events = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  (component.unsubs || []). // events not supplied, or event is in events list\n  filter(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        event = _ref2[0];\n\n    return !events || events.includes(event);\n  }).forEach(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        unsub = _ref4[1];\n\n    return unsub();\n  });\n};\nexport var sub = function sub(component, props) {\n  // unsub existing subscriptions\n  unsub(component, getEventsFromProps(props)); // subscribe\n\n  component.unsubs = Object.keys(props).filter(isEvent).map(function (key) {\n    var type = getEventFromKey(key);\n    return [type, component.editor.on(type, props[key])];\n  });\n};","map":null,"metadata":{},"sourceType":"module"}