{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Leaderboard.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Flex, Text, Link, Image, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { validImage } from '../utils';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nexport default function LeaderBoard() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: owners,\n    1: setOwners\n  } = useState({});\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  const getVaults = async () => {\n    getOwners();\n    loadCache();\n\n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString()\n        }\n      });\n      const jsonData = await response.json();\n      setState({\n        loaded: true\n      });\n      setVaults(jsonData);\n      saveCache(jsonData);\n      setLoadingApi(false); // console.log(jsonData)\n    } catch (error) {}\n  };\n\n  const getOwners = () => {\n    ;\n    emblemContract.totalSupply().then((err, supply) => {\n      getTokensByIndex(Number(supply.toString()), 0, () => {\n        console.log('owners', owners);\n      });\n    });\n  };\n\n  function getTokensByIndex(count, index, cb) {\n    ;\n    emblemContract.tokenByIndex(index).then((err, tokenId) => {\n      getOwner(tokenId, () => {\n        if (count - 1 < index + 1) {\n          return cb();\n        } else {\n          return getTokensByIndex(count, index + 1, cb);\n        }\n      });\n    });\n  }\n\n  function getOwner(tokenId, cb) {\n    ;\n    emblemContract.ownerOf(tokenId).then((err, address) => {\n      if (address === '0x0000000000000000000000000000000000000000' || address === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180') {\n        return cb();\n      }\n\n      if (!owners[address]) {\n        owners[address] = [{\n          tokenId: tokenId.toString()\n        }];\n        return cb();\n      } else {\n        owners[address].push({\n          tokenId: tokenId.toString()\n        });\n        return cb();\n      }\n    });\n  }\n\n  const loadCache = () => {\n    let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_leader')); // Load vaults from storage before updating from server!\n\n    if (vaults) {\n      setState({\n        loaded: true\n      });\n      setVaults(vaults);\n      setLoadingApi(true);\n    }\n  };\n\n  const saveCache = vaults => {\n    localStorage.setItem((address ? address : account) + '_' + chainId + '_leader', JSON.stringify(vaults)); // Save new state for later\n  };\n\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [account, acct]);\n  const {\n    0: chain,\n    1: setChain\n  } = useState(chainId);\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    account && chainId ? getVaults() : setState({\n      loaded: true\n    });\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, vaults.length ? vaults.map((vault, index) => {\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n    let url = location.origin + pieces.join('/') + '/vault?id=' + vault.tokenId;\n    const flexSettings = {\n      flex: '1',\n      minW: '300px',\n      maxW: '300px',\n      borderWidth: '1px',\n      color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    const redirect = function () {\n      location.href = url;\n    };\n\n    return __jsx(Box, _extends({\n      key: index\n    }, flexSettings, {\n      onClick: redirect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }\n    }), __jsx(Text, {\n      fontWeight: \"semibold\",\n      textAlign: \"center\",\n      mt: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }, vault.name, !vault.private ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }, __jsx(Image, {\n      src: validImage(vault.image) ? vault.image : 'https://circuitsofvalue.com/public/coval-logo.png',\n      p: 2,\n      width: \"250px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 19\n      }\n    })), __jsx(Box, {\n      d: \"flex\",\n      alignItems: \"baseline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, __jsx(Box, {\n      color: \"gray.500\",\n      fontWeight: \"semibold\",\n      letterSpacing: \"wide\",\n      fontSize: \"sm\",\n      ml: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 19\n      }\n    }, vault.private ? __jsx(React.Fragment, null, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 25\n      }\n    }, \"Contents hidden. Click to view the vault and unlock values.\")) : vault.values.length ? vault.values.map((coin, index) => {\n      if (index < 4) return __jsx(Text, {\n        key: coin.name,\n        isTruncated: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 29\n        }\n      }, coin.name, \": \", coin.balance);else if (index == 4) return __jsx(Text, {\n        fontWeight: \"bold\",\n        mt: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 29\n        }\n      }, \"... Click to see the rest ...\");\n    }) : __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 23\n      }\n    }, \"Nothing in here! \", __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 42\n      }\n    }), \"Click to fill 'er up!\"))), __jsx(Stack, {\n      align: \"center\",\n      mt: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, vault.status == 'claimed' ? __jsx(Text, {\n      color: \"green.500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 48\n      }\n    }, \"CLAIMED\") : null));\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 11\n    }\n  }, \"YOU DON'T SEEM TO HAVE ANY VAULTS.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, \"CREATE ONE HERE!\"))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Leaderboard.tsx"],"names":["Box","Flex","Text","Link","Image","Stack","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","validImage","EMBLEM_API","contractAddresses","useContract","LeaderBoard","query","account","chainId","vaults","setVaults","state","setState","loaded","loadingApi","setLoadingApi","address","setAddress","owners","setOwners","emblemContract","emblemVault","emblemAbi","getVaults","getOwners","loadCache","response","fetch","method","headers","service","toString","jsonData","json","saveCache","error","totalSupply","then","err","supply","getTokensByIndex","Number","console","log","count","index","cb","tokenByIndex","tokenId","getOwner","ownerOf","push","JSON","parse","localStorage","getItem","setItem","stringify","acct","setAcct","chain","setChain","length","map","vault","pieces","location","pathname","split","pop","url","origin","join","flexSettings","flex","minW","maxW","borderWidth","color","mx","mb","rounded","overflow","borderColor","status","cursor","redirect","href","name","private","totalValue","image","values","coin","balance"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Spinner } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\n\nexport default function LeaderBoard() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [address, setAddress] = useState(query.address)\n  const [owners, setOwners] = useState({})\n\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const getVaults = async () => {\n    getOwners()\n    loadCache()\n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString(),\n        },\n      })\n      const jsonData = await response.json()\n      setState({ loaded: true })\n      setVaults(jsonData)\n      saveCache(jsonData)\n      setLoadingApi(false)\n      // console.log(jsonData)\n    } catch (error) {}\n  }\n\n  const getOwners = () => {\n    ; (emblemContract as Contract).totalSupply().then((err, supply) => {\n      getTokensByIndex(Number(supply.toString()), 0, () => {\n        console.log('owners', owners)\n      })\n    })\n  }\n\n  function getTokensByIndex(count, index, cb) {\n    ; (emblemContract as Contract).tokenByIndex(index).then((err, tokenId) => {\n      getOwner(tokenId, () => {\n        if (count - 1 < index + 1) {\n          return cb()\n        } else {\n          return getTokensByIndex(count, index + 1, cb)\n        }\n      })\n    })\n  }\n\n  function getOwner(tokenId, cb) {\n    ; (emblemContract as Contract).ownerOf(tokenId).then((err, address) => {\n      if (address === '0x0000000000000000000000000000000000000000' || address === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180') {\n        return cb()\n      }\n      if (!owners[address]) {\n        owners[address] = [{ tokenId: tokenId.toString() }]\n        return cb()\n      } else {\n        owners[address].push({ tokenId: tokenId.toString() })\n        return cb()\n      }\n    })\n  }\n\n  const loadCache = () => {\n    let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_leader')) // Load vaults from storage before updating from server!\n    if (vaults) {\n      setState({ loaded: true })\n      setVaults(vaults)\n      setLoadingApi(true)\n    }\n  }\n\n  const saveCache = (vaults) => {\n    localStorage.setItem((address ? address : account) + '_' + chainId + '_leader', JSON.stringify(vaults)) // Save new state for later\n  }\n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    account && chainId ? getVaults() : setState({ loaded: true })\n  }, [])\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\" mt={10}>\n        {vaults.length ? (\n          vaults.map((vault, index) => {\n            let pieces = location.pathname.split('/')\n            pieces.pop()\n            let url = location.origin + pieces.join('/') + '/vault?id=' + vault.tokenId\n            const flexSettings = {\n              flex: '1',\n              minW: '300px',\n              maxW: '300px',\n              borderWidth: '1px',\n              color: 'white',\n              mx: '6',\n              mb: '6',\n              rounded: 'lg',\n              overflow: 'hidden',\n              borderColor: vault.status == 'claimed' ? 'green !important' : '',\n              cursor: 'pointer',\n            }\n            const redirect = function () {\n              location.href = url\n            }\n            return (\n              <Box key={index} {...flexSettings} onClick={redirect}>\n                <Text fontWeight=\"semibold\" textAlign=\"center\" mt={2}>\n                  {vault.name}\n                  {!vault.private ? ': ~$' + vault.totalValue : null}\n                </Text>\n                <Stack align=\"center\">\n                  <Image\n                    src={validImage(vault.image) ? vault.image : 'https://circuitsofvalue.com/public/coval-logo.png'}\n                    p={2}\n                    width=\"250px\"\n                  />\n                </Stack>\n                <Box d=\"flex\" alignItems=\"baseline\">\n                  <Box color=\"gray.500\" fontWeight=\"semibold\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                    {vault.private ? (\n                      <>\n                        <Text>Contents hidden. Click to view the vault and unlock values.</Text>\n                      </>\n                    ) : vault.values.length ? (\n                      vault.values.map((coin, index) => {\n                        if (index < 4)\n                          return (\n                            <Text key={coin.name} isTruncated>\n                              {coin.name}: {coin.balance}\n                            </Text>\n                          )\n                        else if (index == 4)\n                          return (\n                            <Text fontWeight=\"bold\" mt={2}>\n                              ... Click to see the rest ...\n                            </Text>\n                          )\n                      })\n                    ) : (\n                      <Text>\n                        Nothing in here! <br />\n                        Click to fill 'er up!\n                      </Text>\n                    )}\n                  </Box>\n                </Box>\n                <Stack align=\"center\" mt={3}>\n                  {vault.status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n              </Box>\n            )\n          })\n        ) : (\n          <Text>\n            YOU DON'T SEEM TO HAVE ANY VAULTS.{' '}\n            <Link color=\"#638cd8\" href=\"../create\">\n              CREATE ONE HERE!\n            </Link>\n          </Text>\n        )}\n      </Flex>\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}