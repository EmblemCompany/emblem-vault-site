{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/KeysModal.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, Text, Stack, Button, useColorMode } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR } from '../constants';\nexport default function KeysModal({\n  isOpen,\n  onClose,\n  mnemonic,\n  privKeyBTC,\n  privKeyETH,\n  privValues,\n  getAddresses\n}) {\n  const phrase = mnemonic;\n  const btcKey = privKeyBTC;\n  const ethKey = privKeyETH;\n  const values = privValues;\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    0: phraseCopied,\n    1: setPhraseCopied\n  } = useState(false);\n  const {\n    0: addresses,\n    1: setAddresses\n  } = useState(null);\n  useEffect(() => {\n    if (!addresses) {\n      setAddresses(getAddresses());\n    }\n  }, [addresses]);\n  useEffect(() => {\n    if (phraseCopied) {\n      const timeout = setTimeout(() => {\n        setPhraseCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [phraseCopied]);\n  const {\n    0: BTCKeyCopied,\n    1: setBTCKeyCopied\n  } = useState(false);\n  useEffect(() => {\n    if (BTCKeyCopied) {\n      const timeout = setTimeout(() => {\n        setBTCKeyCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [BTCKeyCopied]);\n  const {\n    0: ETHKeyCopied,\n    1: setETHKeyCopied\n  } = useState(false);\n  useEffect(() => {\n    if (ETHKeyCopied) {\n      const timeout = setTimeout(() => {\n        setETHKeyCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ETHKeyCopied]);\n  const {\n    0: valueCopied,\n    1: setValueCopied\n  } = useState(false);\n  useEffect(() => {\n    if (valueCopied) {\n      const timeout = setTimeout(() => {\n        setValueCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [valueCopied]);\n\n  function copyWithFlag(content, whichOne) {\n    copy(content);\n    whichOne == 'phrase' ? setPhraseCopied(true) : whichOne == 'BTCKey' ? setBTCKeyCopied(true) : whichOne == 'ETHKey' ? setETHKeyCopied(true) : whichOne == 'values' ? setValueCopied(true) : null;\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    color: COLOR[colorMode],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, \"Your Vault Keys  TEST \", addresses.length)), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    mb: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, \"Your mnemonic phrase (click to copy):\")), __jsx(Stack, {\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    whiteSpace: \"unset\",\n    height: \"unset\",\n    p: 2,\n    onClick: () => copyWithFlag(phrase, 'phrase'),\n    isActive: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, phraseCopied ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 33\n    }\n  }, \"Copied!\") : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 56\n    }\n  }, phrase))), __jsx(Stack, {\n    direction: \"row\",\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, \"Your BTC private key (click to copy):\")), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    whiteSpace: \"unset\",\n    height: \"unset\",\n    p: 2,\n    onClick: () => copyWithFlag(btcKey, 'BTCKey'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }, BTCKeyCopied ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 33\n    }\n  }, \"Copied!\") : __jsx(Text, {\n    isTruncated: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 56\n    }\n  }, btcKey))), __jsx(Stack, {\n    direction: \"row\",\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }, \"Your ETH private key (click to copy):\")), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    whiteSpace: \"unset\",\n    height: \"unset\",\n    p: 2,\n    onClick: () => copyWithFlag(ethKey, 'ETHKey'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 15\n    }\n  }, ETHKeyCopied ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 33\n    }\n  }, \"Copied!\") : __jsx(Text, {\n    isTruncated: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 56\n    }\n  }, ethKey))), privValues && privValues.length > 0 ? __jsx(React.Fragment, null, __jsx(Stack, {\n    direction: \"row\",\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  }, \"Your Values (click to copy): \")), privValues.map((item, index) => {\n    return __jsx(Stack, {\n      direction: \"row\",\n      key: index,\n      justify: \"space-between\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 19\n      }\n    }, __jsx(Text, {\n      isTruncated: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }\n    }, item.key), __jsx(Button, {\n      whiteSpace: \"unset\",\n      height: \"unset\",\n      p: 2,\n      onClick: () => copyWithFlag(item.value, 'values'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }\n    }, valueCopied ? __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 38\n      }\n    }, \"Copied!\") : __jsx(Text, {\n      isTruncated: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 61\n      }\n    }, item.value)));\n  })) : null, __jsx(Stack, {\n    direction: \"row\",\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }, addresses ? addresses.map((item, index) => {\n    __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 15\n      }\n    }, \"Address \", item, \" \");\n  }) : null)))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/KeysModal.tsx"],"names":["useEffect","useState","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","Text","Stack","Button","useColorMode","copy","COLOR","KeysModal","isOpen","onClose","mnemonic","privKeyBTC","privKeyETH","privValues","getAddresses","phrase","btcKey","ethKey","values","colorMode","phraseCopied","setPhraseCopied","addresses","setAddresses","timeout","setTimeout","clearTimeout","BTCKeyCopied","setBTCKeyCopied","ETHKeyCopied","setETHKeyCopied","valueCopied","setValueCopied","copyWithFlag","content","whichOne","length","map","item","index","key","value"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  Text,\n  Stack,\n  Button,\n  useColorMode,\n} from '@chakra-ui/core'\nimport copy from 'copy-to-clipboard'\nimport { COLOR } from '../constants'\nimport { address } from 'bitcoinjs-lib'\ninterface DataValues {\n  key: string\n  value: string\n}\nexport default function KeysModal({\n  isOpen,\n  onClose,\n  mnemonic,\n  privKeyBTC,\n  privKeyETH,\n  privValues,\n  getAddresses\n}: {\n  isOpen: boolean\n  onClose: () => void\n  mnemonic: string\n  privKeyBTC: string\n  privKeyETH: string\n  privValues: Array<object>\n  getAddresses: any\n}): JSX.Element {\n  const phrase = mnemonic\n  const btcKey = privKeyBTC\n  const ethKey = privKeyETH\n  const values = privValues\n  const { colorMode } = useColorMode()\n\n  const [phraseCopied, setPhraseCopied] = useState(false)\n  const [addresses, setAddresses] = useState(null)\n\n  useEffect(() => {\n    if (!addresses) {\n      setAddresses(getAddresses())\n    }\n  }, [addresses])\n\n  useEffect(() => {\n    if (phraseCopied) {\n      const timeout = setTimeout(() => {\n        setPhraseCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [phraseCopied])\n\n  const [BTCKeyCopied, setBTCKeyCopied] = useState(false)\n  useEffect(() => {\n    if (BTCKeyCopied) {\n      const timeout = setTimeout(() => {\n        setBTCKeyCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [BTCKeyCopied])\n\n  const [ETHKeyCopied, setETHKeyCopied] = useState(false)\n  useEffect(() => {\n    if (ETHKeyCopied) {\n      const timeout = setTimeout(() => {\n        setETHKeyCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [ETHKeyCopied])\n\n  const [valueCopied, setValueCopied] = useState(false)\n  useEffect(() => {\n    if (valueCopied) {\n      const timeout = setTimeout(() => {\n        setValueCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [valueCopied])\n\n  function copyWithFlag(content: string, whichOne: string): void {\n    copy(content)\n    whichOne == 'phrase'\n      ? setPhraseCopied(true)\n      : whichOne == 'BTCKey'\n      ? setBTCKeyCopied(true)\n      : whichOne == 'ETHKey'\n      ? setETHKeyCopied(true)\n      : whichOne == 'values'\n      ? setValueCopied(true)\n      : null\n  }\n  \n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent color={COLOR[colorMode]}>\n        <ModalHeader>\n          <Text>Your Vault Keys  TEST {addresses.length}</Text>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Stack direction=\"column\" mb={10}>\n            <Stack direction=\"row\">\n              <Text>Your mnemonic phrase (click to copy):</Text>\n            </Stack>\n            <Stack direction=\"row\">\n              <Button\n                width=\"100%\"\n                whiteSpace=\"unset\"\n                height=\"unset\"\n                p={2}\n                onClick={() => copyWithFlag(phrase, 'phrase')}\n                isActive={true}\n              >\n                {phraseCopied ? <Text>Copied!</Text> : <Text>{phrase}</Text>}\n              </Button>\n            </Stack>\n\n            <Stack direction=\"row\" mt={4}>\n              <Text>Your BTC private key (click to copy):</Text>\n            </Stack>\n\n            <Stack direction=\"row\" justify=\"space-between\">\n              <Button whiteSpace=\"unset\" height=\"unset\" p={2} onClick={() => copyWithFlag(btcKey, 'BTCKey')}>\n                {BTCKeyCopied ? <Text>Copied!</Text> : <Text isTruncated>{btcKey}</Text>}\n              </Button>\n            </Stack>\n\n            <Stack direction=\"row\" mt={4}>\n              <Text>Your ETH private key (click to copy):</Text>\n            </Stack>\n\n            <Stack direction=\"row\" justify=\"space-between\">\n              <Button whiteSpace=\"unset\" height=\"unset\" p={2} onClick={() => copyWithFlag(ethKey, 'ETHKey')}>\n                {ETHKeyCopied ? <Text>Copied!</Text> : <Text isTruncated>{ethKey}</Text>}\n              </Button>\n            </Stack>\n            \n            {privValues && privValues.length > 0 ? (\n            <>\n              <Stack direction=\"row\" mt={4}>\n              \n                <Text>Your Values (click to copy): </Text>\n              </Stack>\n              {privValues.map((item: DataValues, index) => {\n                return (\n                  <Stack direction=\"row\" key={index} justify=\"space-between\">\n                    <Text isTruncated>{item.key}</Text>\n                    <Button whiteSpace=\"unset\" height=\"unset\" p={2} onClick={() => copyWithFlag(item.value, 'values')}>\n                      {valueCopied ? <Text>Copied!</Text> : <Text isTruncated>{item.value}</Text>}\n                    </Button>\n                  </Stack>\n                )\n              })}\n              \n            </> \n            ) : null}\n\n            <Stack direction=\"row\" mt={4}>\n            \n            {addresses? addresses.map((item: any, index) => {\n              <Text>Address {item} </Text>\n            }): null}\n            </Stack>\n            \n          </Stack>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}