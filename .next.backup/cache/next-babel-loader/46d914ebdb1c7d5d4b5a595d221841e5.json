{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import { Box, Flex, Text, Link, Image, Stack, Spinner, useColorMode } from '@chakra-ui/core'\nimport { Box, Flex, Text, Link, Stack, Button, Checkbox, CheckboxGroup, Radio, RadioGroup, Input, Select, useColorMode } from '@chakra-ui/core';\nimport { HStack, VStack } from '@chakra-ui/react';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Embed from './Embed';\nexport default function Find() {\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(Number(query.start) || 0),\n      pagePosition = _useState[0],\n      setPagePosition = _useState[1];\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useState2 = useState([]),\n      vaults = _useState2[0],\n      setVaults = _useState2[1];\n\n  var _useState3 = useState({\n    loaded: true\n  }),\n      state = _useState3[0],\n      setState = _useState3[1];\n\n  var _useState4 = useState(false),\n      loadingApi = _useState4[0],\n      setLoadingApi = _useState4[1];\n\n  var _useState5 = useState(query.address),\n      address = _useState5[0],\n      setAddress = _useState5[1];\n\n  var _useState6 = useState(query.experimental),\n      experimental = _useState6[0],\n      setExperimental = _useState6[1];\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _useState7 = useState(false),\n      shouldFetchData = _useState7[0],\n      setShouldFetchData = _useState7[1];\n\n  var _useState8 = useState(true),\n      hasMore = _useState8[0],\n      setHasMore = _useState8[1];\n\n  var _useState9 = useState(0),\n      offset = _useState9[0],\n      setOffset = _useState9[1];\n\n  var _useState10 = useState(query && Object.keys(query).length > 0),\n      q = _useState10[0],\n      setQ = _useState10[1];\n\n  var _useState11 = useState(false),\n      hideClaimed = _useState11[0],\n      setHideClaimed = _useState11[1];\n\n  var _useState12 = useState(false),\n      hideUnminted = _useState12[0],\n      setHideUnminted = _useState12[1];\n\n  var _useState13 = useState(query.name),\n      assetName = _useState13[0],\n      setAssetName = _useState13[1];\n\n  var _useState14 = useState(assetName || ''),\n      tempAssetName = _useState14[0],\n      setTempAssetName = _useState14[1];\n\n  var _useState15 = useState(query.coin),\n      coin = _useState15[0],\n      setCoin = _useState15[1];\n\n  var _useState16 = useState(coin || ''),\n      tempCoin = _useState16[0],\n      setTempCoin = _useState16[1];\n\n  var _useState17 = useState(query.project),\n      project = _useState17[0],\n      setProject = _useState17[1];\n\n  var _useState18 = useState(project || ''),\n      tempProject = _useState18[0],\n      setTempProject = _useState18[1];\n\n  var _useState19 = useState([]),\n      projects = _useState19[0],\n      setProjects = _useState19[1];\n\n  var _useState20 = useState(false),\n      loadedProjects = _useState20[0],\n      setLoadedProjects = _useState20[1];\n\n  var _useState21 = useState(query.searchType || 'filter'),\n      searchType = _useState21[0],\n      setSearchType = _useState21[1];\n\n  var _useState22 = useState(searchType.toString()),\n      tempSearchType = _useState22[0],\n      setTempSearchType = _useState22[1];\n\n  var _useState23 = useState(query.vaultName),\n      vaultName = _useState23[0],\n      setVaultName = _useState23[1];\n\n  var _useState24 = useState(vaultName || ''),\n      tempVaultName = _useState24[0],\n      setTempVaultName = _useState24[1];\n\n  var _useState25 = useState(query.vaultDescription),\n      vaultDescription = _useState25[0],\n      setVaultDescription = _useState25[1];\n\n  var _useState26 = useState(vaultDescription),\n      tempVaultDescription = _useState26[0],\n      setTempVaultDescription = _useState26[1];\n\n  var _useState27 = useState(query.network || null),\n      network = _useState27[0],\n      setNetwork = _useState27[1];\n\n  var _useState28 = useState(Object.keys(query).filter(function (key) {\n    return key !== \"vaultName\" && key !== \"vaultDescription\" && key !== \"searchType\";\n  })),\n      balanceChecks = _useState28[0],\n      setBalanceChecks = _useState28[1];\n\n  var _useState29 = useState(Object.keys(query).filter(function (key) {\n    return key !== \"name\" && key !== \"coin\" && key !== \"project\" && key !== \"searchType\";\n  })),\n      metadataChecks = _useState29[0],\n      setMetadataChecks = _useState29[1];\n\n  var PAGE_SIZE = 20;\n\n  var getProjects = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(EMBLEM_API + '/search/projects', {\n                method: 'GET',\n                headers: {\n                  service: 'evmetadata'\n                }\n              });\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n\n            case 6:\n              jsonData = _context.sent;\n              setProjects(jsonData);\n              _context.next = 12;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n\n    return function getProjects() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getVaults = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var body, response, jsonData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              body = {};\n\n              if (metadataChecks.length > 0) {\n                body.metadata = {};\n                metadataChecks.forEach(function (key) {\n                  if (key == \"vaultDescription\") {\n                    body.metadata[\"description\"] = tempVaultDescription;\n                  }\n\n                  if (key == \"vaultName\") {\n                    body.metadata[\"name\"] = tempVaultName;\n                  }\n                });\n              }\n\n              if (balanceChecks.length > 0) {\n                body.balance = {};\n                balanceChecks.forEach(function (key) {\n                  if (key == \"name\") {\n                    body.balance[\"name\"] = tempAssetName;\n                  }\n\n                  if (key == \"coin\") {\n                    body.balance[\"coin\"] = tempCoin;\n                  }\n\n                  if (key == \"project\") {\n                    body.balance[\"project\"] = tempProject;\n                  }\n                });\n              }\n\n              _context2.prev = 3;\n              _context2.next = 6;\n              return fetch(EMBLEM_API + '/find/' + tempSearchType + '?start=' + offset + '&size=' + PAGE_SIZE, {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                },\n                body: JSON.stringify(body)\n              });\n\n            case 6:\n              response = _context2.sent;\n              _context2.next = 9;\n              return response.json();\n\n            case 9:\n              jsonData = _context2.sent;\n              console.log('------ vaults', jsonData);\n              jsonData.length == 0 || jsonData.length < PAGE_SIZE ? setHasMore(false) : setHasMore(true);\n              setVaults(vaults.concat(jsonData));\n              setState({\n                loaded: true\n              });\n              setLoadingApi(false);\n              _context2.next = 19;\n              break;\n\n            case 17:\n              _context2.prev = 17;\n              _context2.t0 = _context2[\"catch\"](3);\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[3, 17]]);\n    }));\n\n    return function getVaults() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log(offset, PAGE_SIZE, offset + PAGE_SIZE);\n              setOffset(offset + PAGE_SIZE);\n              setShouldFetchData(true);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function fetchData() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var _useState30 = useState(''),\n      acct = _useState30[0],\n      setAcct = _useState30[1];\n\n  useEffect(function () {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [account, acct]);\n\n  var _useState31 = useState(chainId),\n      chain = _useState31[0],\n      setChain = _useState31[1];\n\n  useEffect(function () {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(function () {\n    // console.log('here', chainId, chain, account, state)\n    if (!account && !state.loaded) {\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(function () {\n    if (shouldFetchData) {\n      console.log('here 1');\n      setShouldFetchData(false);\n      setLoadingApi(true);\n      getVaults();\n    } else {\n      console.log('no fetch');\n    }\n  }, [shouldFetchData]);\n  useEffect(function () {\n    if (q && vaults.length == 0 && !loadingApi) {\n      console.log('here 2');\n      setShouldFetchData(true); // getVaults()\n    } else {\n      console.log('no fetch', q, vaults);\n    }\n  }, [q, vaults]);\n  useEffect(function () {\n    if (projects.length == 0 && !loadedProjects) {\n      setLoadedProjects(true);\n      getProjects();\n    }\n  }); // useEffect(() => {\n  //   if (query.assetName && !balanceChecks.includes('assetName')) {      \n  //     setBalanceChecks(balanceChecks.concat('assetName'))\n  //   }    \n  // })\n  // useEffect(() => {\n  //   if (query.coin && !balanceChecks.includes('coin')) {      \n  //     setBalanceChecks(balanceChecks.concat('coin'))\n  //   }\n  // })\n\n  function addOrRemoveBalanceFilter(target) {\n    if (balanceChecks.includes(target)) {\n      setBalanceChecks(balanceChecks.filter(function (item) {\n        return item !== target;\n      }));\n    } else {\n      setBalanceChecks(balanceChecks.concat(target));\n    }\n\n    console.log('balance checks', balanceChecks);\n  }\n\n  function addOrRemoveMetadataFilter(target) {\n    if (metadataChecks.includes(target)) {\n      setMetadataChecks(metadataChecks.filter(function (item) {\n        return item !== target;\n      }));\n    } else {\n      setMetadataChecks(metadataChecks.concat(target));\n    }\n\n    console.log('metadata checks', metadataChecks);\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded\n  }, loadingApi ? __jsx(Refreshing, null) : '', __jsx(VStack, {\n    width: \"100%\",\n    align: \"center\",\n    justifyContent: \"center\"\n  }, __jsx(RadioGroup, {\n    onChange: function onChange(e) {\n      setTempSearchType(e.target.value);\n    },\n    defaultValue: tempSearchType,\n    value: tempSearchType\n  }, __jsx(Stack, {\n    spacing: 4,\n    direction: \"row\"\n  }, __jsx(Radio, {\n    isChecked: tempSearchType == \"filter\" ? true : false,\n    value: \"filter\"\n  }, \"Filter (AND)\"), __jsx(Radio, {\n    isChecked: tempSearchType === \"or\" ? true : false,\n    value: \"or\"\n  }, \"Search (OR)\"))), __jsx(CheckboxGroup, null, __jsx(HStack, null, __jsx(Checkbox, {\n    isDisabled: metadataChecks.length > 0,\n    key: \"check1\",\n    isChecked: balanceChecks.includes('name'),\n    value: \"name\",\n    onChange: function onChange(e) {\n      addOrRemoveBalanceFilter(e.target.value);\n    }\n  }, \"Asset Name\"), __jsx(Checkbox, {\n    isDisabled: metadataChecks.length > 0,\n    key: \"check2\",\n    isChecked: balanceChecks.includes('coin'),\n    value: \"coin\",\n    onChange: function onChange(e) {\n      addOrRemoveBalanceFilter(e.target.value);\n    }\n  }, \"Blockchain\"), __jsx(Checkbox, {\n    isDisabled: metadataChecks.length > 0,\n    key: \"check3\",\n    isChecked: balanceChecks.includes('project'),\n    value: \"project\",\n    onChange: function onChange(e) {\n      addOrRemoveBalanceFilter(e.target.value);\n    }\n  }, \"Project\"), __jsx(Checkbox, {\n    isDisabled: balanceChecks.length > 0,\n    key: \"check4\",\n    isChecked: metadataChecks.includes('vaultName'),\n    value: \"vaultName\",\n    onChange: function onChange(e) {\n      addOrRemoveMetadataFilter(e.target.value);\n    }\n  }, \"Vault Name\"), __jsx(Checkbox, {\n    isDisabled: balanceChecks.length > 0,\n    key: \"check5\",\n    isChecked: metadataChecks.includes('vaultDescription'),\n    value: \"vaultDescription\",\n    onChange: function onChange(e) {\n      addOrRemoveMetadataFilter(e.target.value);\n    }\n  }, \"Vault Description\"), __jsx(Checkbox, {\n    isChecked: hideClaimed == true,\n    key: \"check6\",\n    value: \"hideClaimed\",\n    onChange: function onChange(e) {\n      setHideClaimed(!hideClaimed);\n    }\n  }, \"Hide Claimed\"), __jsx(Checkbox, {\n    isChecked: hideUnminted == true,\n    key: \"check6\",\n    value: \"hideUnminted\",\n    onChange: function onChange(e) {\n      setHideUnminted(!hideUnminted);\n    }\n  }, \"Hide Un-Minted\"))), balanceChecks.map(function (check, index) {\n    return __jsx(VStack, null, __jsx(Text, null, index == 0 ? null : tempSearchType == \"or\" ? \"or\" : \"and\", \" \", check == \"coin\" ? \"from Blockchain\" : check == \"name\" ? \"within balances for the Asset Name of\" : \"of the Project\"), check == \"name\" ? __jsx(Input, {\n      value: tempAssetName,\n      onChange: function onChange(e) {\n        return setTempAssetName(e.target.value);\n      }\n    }) : check == \"coin\" ? __jsx(Select, {\n      value: tempCoin,\n      onChange: function onChange(e) {\n        setTempCoin(e.target.value);\n      }\n    }, __jsx(\"option\", {\n      key: \"1\",\n      value: \"POLYGON\"\n    }, \"Polygon (Matic)\"), __jsx(\"option\", {\n      key: \"2\",\n      value: \"XCP\"\n    }, \"Counterparty\"), __jsx(\"option\", {\n      key: \"3\",\n      value: \"BTC\"\n    }, \"Bitcoin\"), __jsx(\"option\", {\n      key: \"4\",\n      value: \"BCH\"\n    }, \"Bitcoin Cash\"), __jsx(\"option\", {\n      key: \"5\",\n      value: \"DGB\"\n    }, \"Digibyte\"), __jsx(\"option\", {\n      key: \"6\",\n      value: \"DOGE\"\n    }, \"Dogecoin\"), __jsx(\"option\", {\n      key: \"7\",\n      value: \"ETH\"\n    }, \"Ethereum\"), __jsx(\"option\", {\n      key: \"8\",\n      value: \"FTM\"\n    }, \"Fantom\"), __jsx(\"option\", {\n      key: \"9\",\n      value: \"LTC\"\n    }, \"Litecoin\"), __jsx(\"option\", {\n      key: \"10\",\n      value: \"NMC\"\n    }, \"Namecoin\"), __jsx(\"option\", {\n      key: \"11\",\n      value: \"OMNI\"\n    }, \"Omni\"), __jsx(\"option\", {\n      key: \"12\",\n      value: \"xDai\"\n    }, \"xDai\"), __jsx(\"option\", {\n      key: \"13\",\n      value: \"OMNI\"\n    }, \"Omni\"), __jsx(\"option\", {\n      key: \"14\",\n      value: \"XDP\"\n    }, \"Doge Party\"), __jsx(\"option\", {\n      key: \"15\",\n      value: \"XMP\"\n    }, \"Mona Party\"), __jsx(\"option\", {\n      key: \"16\",\n      value: \"XTZ\"\n    }, \"Tezos\")) : check == \"project\" ? __jsx(Select, {\n      value: tempProject,\n      onChange: function onChange(e) {\n        setTempProject(e.target.value);\n      }\n    }, projects.map(function (project, index) {\n      return __jsx(\"option\", {\n        key: \"project-\" + index,\n        value: project\n      }, project);\n    })) : null);\n  }), metadataChecks.map(function (check, index) {\n    return __jsx(VStack, null, __jsx(Text, null, index == 0 ? null : tempSearchType == \"or\" ? \"or\" : \"and\", \" \", check == \"vaultName\" ? \"within vault name\" : check == \"vaultDescription\" ? \"within vault description\" : null), check == \"vaultName\" ? __jsx(Input, {\n      value: tempVaultName,\n      onChange: function onChange(e) {\n        return setTempVaultName(e.target.value);\n      }\n    }) : check == \"vaultDescription\" ? __jsx(Input, {\n      value: tempVaultDescription,\n      onChange: function onChange(e) {\n        return setTempVaultDescription(e.target.value);\n      }\n    }) : null);\n  }), __jsx(Button, {\n    m: 2,\n    isDisabled: balanceChecks.length < 1 && metadataChecks.length < 1,\n    onClick: function onClick() {\n      setOffset(0);\n      setState({\n        loaded: false\n      });\n      setVaults([]);\n      setQ(true);\n      var loc = location.href.split('?')[0] + '?';\n      metadataChecks.forEach(function (key) {\n        if (key == \"vaultDescription\") {\n          loc = loc + key + '=' + tempVaultDescription + \"&\";\n        }\n\n        if (key == \"vaultName\") {\n          loc = loc + key + '=' + tempVaultName + \"&\";\n        }\n      });\n      balanceChecks.forEach(function (key) {\n        console.log(key);\n\n        if (key == \"name\") {\n          loc = loc + key + '=' + tempAssetName + \"&\";\n        }\n\n        if (key == \"coin\") {\n          loc = loc + key + '=' + tempCoin + \"&\";\n        }\n\n        if (key == \"project\") {\n          loc = loc + key + '=' + tempProject + \"&\";\n        }\n      });\n\n      if (tempSearchType) {\n        loc = loc + \"searchType=\" + tempSearchType + \"&\";\n      } // let loc = location.href.split('?')[0]+\"?q=\"+temp_q +  \"&network=\" + network\n\n\n      console.log(\"SEARCH\", loc);\n      window.history.pushState('', 'Title', loc);\n    }\n  }, \"Search\")), q ? __jsx(InfiniteScroll, {\n    className: \"infinite-scroll\",\n    scrollableTarget: \"shannon-container\" // height={200}\n    ,\n    dataLength: vaults.length //This is important field to render the next data\n    ,\n    next: fetchData,\n    hasMore: hasMore,\n    loader: __jsx(Refreshing, null),\n    endMessage: __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(\"b\", null, \"Yay! You have seen it all\"))\n  }, __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10\n  }, vaults.length ? vaults.map(function (vault, index) {\n    var pieces = location.pathname.split('/');\n    pieces.pop();\n    var url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId;\n    var flexSettings = {\n      flex: '1',\n      minW: '200px',\n      maxW: '200px',\n      borderWidth: '1px',\n      // color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    var redirect = function redirect() {\n      setLoadingApi(true);\n      location.href = url;\n    };\n\n    if (hideClaimed && vault.status == 'claimed' || hideUnminted && !vault.live) {\n      return null;\n    } else {\n      return __jsx(Link, {\n        href: url,\n        isExternal: true,\n        className: \"vaultLink\"\n      }, __jsx(Box, _extends({\n        className: \"NFT newest\",\n        key: index\n      }, flexSettings, {\n        onClick: redirect\n      }), __jsx(Text, {\n        fontWeight: \"semibold\",\n        textAlign: \"center\",\n        mt: 2,\n        pl: 2,\n        isTruncated: true\n      }, vault.name, !vault[\"private\"] && vault.totalValue > 0 ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n        align: \"center\"\n      }, __jsx(Embed, {\n        className: \"d-block w-100 NFT-newest-image\",\n        url: vault.image\n      })), __jsx(Box, {\n        d: \"flex\",\n        alignItems: \"baseline\"\n      }), __jsx(Stack, {\n        align: \"center\",\n        mt: 3\n      }, vault.status == 'claimed' ? __jsx(Text, {\n        color: \"green.500\"\n      }, \"CLAIMED\") : null, __jsx(Text, {\n        fontSize: \"xs\"\n      }, \"Id: \", vault.tokenId))));\n    }\n  }) : __jsx(Text, null, \"YOU DON'T SEEM TO HAVE ANY VAULTS.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\"\n  }, \"CREATE ONE HERE!\")))) : null);\n}","map":null,"metadata":{},"sourceType":"module"}