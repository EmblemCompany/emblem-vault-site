{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx\",\n    _s4 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Text, Stack, Button, useColorMode, Select, Input } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR, contractAddresses } from '../constants';\nimport { useWeb3React } from '@web3-react/core';\nimport { NETWORK_SHORTNAMES } from '../utils'; // import { useContract } from '../hooks'\n\nimport { Contract } from '@ethersproject/contracts';\nimport { HStack } from '@chakra-ui/react';\nimport { TransactionToast } from './TransactionToast';\nimport { addTokenToWallet } from '../public/web3';\nexport var EMBLEM_API = 'https://api.emblemvault.io';\nexport default function OfferModal(_ref) {\n  _s4();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$(),\n      _s3 = $RefreshSig$(),\n      _this = this;\n\n  var isOpen = _ref.isOpen,\n      onClose = _ref.onClose,\n      tokenId = _ref.tokenId,\n      mine = _ref.mine;\n\n  //   const address = addrAddr\n  //   const coin = addrCoin\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useState = useState(false),\n      copied = _useState[0],\n      setCopied = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      loaded = _useState3[0],\n      setLoaded = _useState3[1];\n\n  var _useState4 = useState({\n    address: '',\n    balance: 0,\n    tokenType: '',\n    name: ''\n  }),\n      offeringToken = _useState4[0],\n      setOfferingToken = _useState4[1];\n\n  var _useState5 = useState([]),\n      tokenBalances = _useState5[0],\n      setTokenBalances = _useState5[1];\n\n  var _useState6 = useState(0),\n      offeringTokenBalance = _useState6[0],\n      setOfferingTokenBalance = _useState6[1];\n\n  var _useState7 = useState(''),\n      acct = _useState7[0],\n      setAcct = _useState7[1];\n\n  var _useState8 = useState(0),\n      decimals = _useState8[0],\n      setDecimals = _useState8[1];\n\n  var _useState9 = useState(0),\n      allowance = _useState9[0],\n      setAllowance = _useState9[1];\n\n  var _useState10 = useState(false),\n      approvedForAll = _useState10[0],\n      setApprovedForAll = _useState10[1];\n\n  var _useState11 = useState(0),\n      offerAmount = _useState11[0],\n      setOfferAmount = _useState11[1];\n\n  var _useState12 = useState(0),\n      offerTokenId = _useState12[0],\n      setOfferTokenId = _useState12[1];\n\n  var _useState13 = useState([]),\n      offers = _useState13[0],\n      setOffers = _useState13[1];\n\n  var _useState14 = useState([]),\n      myOffers = _useState14[0],\n      setMyOffers = _useState14[1];\n\n  var _useState15 = useState(null),\n      hash = _useState15[0],\n      setHash = _useState15[1];\n\n  var _useState16 = useState([]),\n      selectedNFTs = _useState16[0],\n      setSelectedNFTs = _useState16[1]; // const [offeringTokenId, setOfferingTokenId] = useState()\n\n\n  var getErc20Contract = function getErc20Contract(address) {\n    _s();\n\n    console.log(\"contract\", address);\n    return useContract(address, contractAddresses.covalAbi, true);\n  };\n\n  _s(getErc20Contract, \"OieRxpBRupXKKSB/Daj7yBGbdgo=\", false, function () {\n    return [useContract];\n  });\n\n  var getVaultContract = function getVaultContract() {\n    _s2();\n\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  };\n\n  _s2(getVaultContract, \"OieRxpBRupXKKSB/Daj7yBGbdgo=\", false, function () {\n    return [useContract];\n  });\n\n  var getTradeContract = function getTradeContract() {\n    _s3();\n\n    return useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true);\n  };\n\n  _s3(getTradeContract, \"OieRxpBRupXKKSB/Daj7yBGbdgo=\", false, function () {\n    return [useContract];\n  });\n\n  var useContract = function useContract(address, ABI) {\n    var withSigner = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return new Contract(address, ABI, withSigner ? library.getSigner(account).connectUnchecked() : library);\n  };\n\n  useEffect(function () {\n    if (account && acct != account) {\n      setAcct(account);\n      setLoaded(false);\n    }\n  }, [account, acct]);\n  useEffect(function () {\n    if (copied) {\n      var timeout = setTimeout(function () {\n        setCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [copied]);\n  useEffect(function () {\n    if (!loaded && !loading) {\n      setLoading(true);\n      getBalances(account, /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(balances) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  setTokenBalances(balances);\n                  getOfferContractInfo();\n                  setLoading(false);\n                  setLoaded(true);\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  });\n\n  var handleApprove = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address) {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              contract = getErc20Contract(address);\n              console.log('decimals', decimals);\n              _context2.next = 4;\n              return contract.approve(contractAddresses.nftrade[chainId], offeringTokenBalance * Math.pow(10, +decimals)).then(function (_ref4) {\n                var hash = _ref4.hash;\n                setHash(hash);\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleApprove(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleApproveForAll = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              contract = getVaultContract();\n              _context3.next = 3;\n              return contract.setApprovalForAll(contractAddresses.nftrade[chainId], true).then(function (_ref6) {\n                var hash = _ref6.hash;\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function handleApproveForAll() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var getApprovedForAll = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var address,\n          contract,\n          approved,\n          _args4 = arguments;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              address = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : null;\n              contract = getVaultContract(address);\n              _context4.next = 4;\n              return contract.isApprovedForAll(account, contractAddresses.nftrade[chainId]);\n\n            case 4:\n              approved = _context4.sent;\n              console.log('---approved', approved);\n              setApprovedForAll(approved);\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function getApprovedForAll() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var getNFTContractInfo = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(address) {\n      var contract, count, nftCollection, getSingleNFT, _getSingleNFT;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _getSingleNFT = function _getSingleNFT3() {\n                _getSingleNFT = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(index, cb) {\n                  var nftInfo;\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return contract.tokenOfOwnerByIndex(account, index);\n\n                        case 2:\n                          nftInfo = _context5.sent;\n                          nftCollection.push(nftInfo.toNumber());\n\n                          if (!(index + 1 >= count)) {\n                            _context5.next = 8;\n                            break;\n                          }\n\n                          return _context5.abrupt(\"return\", cb());\n\n                        case 8:\n                          return _context5.abrupt(\"return\", getSingleNFT(index + 1, cb));\n\n                        case 9:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n                return _getSingleNFT.apply(this, arguments);\n              };\n\n              getSingleNFT = function _getSingleNFT2(_x4, _x5) {\n                return _getSingleNFT.apply(this, arguments);\n              };\n\n              contract = getVaultContract(address);\n              _context6.next = 5;\n              return contract.balanceOf(account);\n\n            case 5:\n              count = _context6.sent;\n              console.log('--------------- NFT Info', account, 'owns', count.toNumber());\n              nftCollection = [];\n              getSingleNFT(0, function () {\n                console.log(\"GOT ALL NFTs\", nftCollection);\n                setSelectedNFTs(nftCollection);\n              });\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function getNFTContractInfo(_x3) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var makeOffer = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n              _context7.next = 3;\n              return contract.addOffer(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount * Math.pow(10, +decimals)).then(function (_ref10) {\n                var hash = _ref10.hash;\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function makeOffer() {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var withdrawOffer = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(index) {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n              _context8.next = 3;\n              return contract.withdrawOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(function (_ref12) {\n                var hash = _ref12.hash;\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function withdrawOffer(_x6) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  var rejectOffer = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(index) {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n              _context9.next = 3;\n              return contract.rejectOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(function (_ref14) {\n                var hash = _ref14.hash;\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function rejectOffer(_x7) {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  var acceptOffer = /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(index) {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n              _context10.next = 3;\n              return contract.acceptOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(function (_ref16) {\n                var hash = _ref16.hash;\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function acceptOffer(_x8) {\n      return _ref15.apply(this, arguments);\n    };\n  }();\n\n  var getTokenContractInfo = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(address) {\n      var contract, _dec;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              contract = getErc20Contract(address); // console.log(contract)\n\n              _context11.next = 3;\n              return contract.decimals();\n\n            case 3:\n              _dec = _context11.sent;\n              setDecimals(_dec);\n              _context11.t0 = setAllowance;\n              _context11.next = 8;\n              return contract.allowance(account, contractAddresses.nftrade[chainId]).then(function (balance) {\n                return (balance * Math.pow(10, -_dec)).toString();\n              });\n\n            case 8:\n              _context11.t1 = _context11.sent;\n              (0, _context11.t0)(_context11.t1);\n              _context11.t2 = setOfferingTokenBalance;\n              _context11.next = 13;\n              return contract.balanceOf(account).then(function (balance) {\n                return (balance * Math.pow(10, -_dec)).toString();\n              });\n\n            case 13:\n              _context11.t3 = _context11.sent;\n              (0, _context11.t2)(_context11.t3);\n\n            case 15:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    return function getTokenContractInfo(_x9) {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n\n  var getOfferContractInfo = /*#__PURE__*/function () {\n    var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n      var contract, offerCount, offers, myOffers, getSingleOffer, _getSingleOffer;\n\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _getSingleOffer = function _getSingleOffer3() {\n                _getSingleOffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(index, cb) {\n                  var _offer, offer, tokenContract, tokenName, tokenDecimals, tokenSymbol;\n\n                  return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n                    while (1) {\n                      switch (_context12.prev = _context12.next) {\n                        case 0:\n                          _context12.next = 2;\n                          return contract.getOffer(contractAddresses.emblemVault[chainId], tokenId, index);\n\n                        case 2:\n                          _offer = _context12.sent;\n\n                          if (!(_offer.token !== \"0x0000000000000000000000000000000000000000\")) {\n                            _context12.next = 23;\n                            break;\n                          }\n\n                          offer = {\n                            tokenId: _offer.tokenId.toNumber(),\n                            _from: _offer._from,\n                            token: _offer.token,\n                            amount: _offer.amount\n                          };\n                          tokenContract = getErc20Contract(offer.token);\n                          _context12.next = 8;\n                          return tokenContract.name();\n\n                        case 8:\n                          tokenName = _context12.sent;\n                          _context12.next = 11;\n                          return tokenContract.decimals();\n\n                        case 11:\n                          tokenDecimals = _context12.sent;\n                          _context12.next = 14;\n                          return tokenContract.symbol();\n\n                        case 14:\n                          tokenSymbol = _context12.sent;\n                          offer.symbol = tokenSymbol;\n                          offer.name = tokenName;\n                          offer.decimals = tokenDecimals;\n                          offer.index = index;\n                          offer.amount = offer.amount.toNumber() * Math.pow(10, -tokenDecimals);\n                          offer.address = offer.token;\n                          offers.push(offer); // console.log('-----', offer)\n\n                          if (offer._from == account) {\n                            myOffers.push(offer);\n                          }\n\n                        case 23:\n                          if (!(index + 1 >= offerCount)) {\n                            _context12.next = 27;\n                            break;\n                          }\n\n                          return _context12.abrupt(\"return\", cb());\n\n                        case 27:\n                          return _context12.abrupt(\"return\", getSingleOffer(index + 1, cb));\n\n                        case 28:\n                        case \"end\":\n                          return _context12.stop();\n                      }\n                    }\n                  }, _callee12);\n                }));\n                return _getSingleOffer.apply(this, arguments);\n              };\n\n              getSingleOffer = function _getSingleOffer2(_x10, _x11) {\n                return _getSingleOffer.apply(this, arguments);\n              };\n\n              contract = getTradeContract();\n              _context13.next = 5;\n              return contract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId);\n\n            case 5:\n              offerCount = _context13.sent.toNumber();\n\n              if (mine) {\n                getApprovedForAll();\n              }\n\n              offers = [];\n              myOffers = [];\n\n              if (offerCount > 0) {\n                getSingleOffer(0, function () {\n                  setOffers(offers);\n                  setMyOffers(myOffers); // console.log('offers', offers, myOffers)\n                });\n              }\n\n              console.log(offerCount);\n\n            case 11:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    return function getOfferContractInfo() {\n      return _ref18.apply(this, arguments);\n    };\n  }();\n\n  var getBalances = /*#__PURE__*/function () {\n    var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return fetch(EMBLEM_API + '/' + NETWORK_SHORTNAMES[chainId] + '/balance/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context14.sent;\n              _context14.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context14.sent;\n              return _context14.abrupt(\"return\", cb(jsonData.values));\n\n            case 7:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    return function getBalances(_x12, _x13) {\n      return _ref19.apply(this, arguments);\n    };\n  }();\n\n  function copyWithFlag(content) {\n    copy(content);\n    setCopied(true);\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    color: COLOR[colorMode],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 11\n    }\n  }, !mine ? 'Make' : null, \" Offer\", mine ? 's' : null, \" for: \", tokenId)), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }\n  }, !mine ? __jsx(Stack, {\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 17\n    }\n  }, __jsx(Stack, {\n    mt: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 21\n    }\n  }, \"Choose your Offer Token\"), __jsx(Select, {\n    w: \"100%\",\n    value: offeringToken.address,\n    onChange: function onChange(e) {\n      if (e.target.value !== '0') {\n        var token = tokenBalances.filter(function (item) {\n          return item.address == e.target.value;\n        })[0];\n        setOfferingToken(token);\n        token.tokenType == \"ERC-20\" ? getTokenContractInfo(token.address) : getNFTContractInfo(token.address);\n        console.log(tokenBalances.filter(function (item) {\n          return item.address == e.target.value;\n        })[0]);\n        console.log(e.target.value);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 21\n    }\n  }, __jsx(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 25\n    }\n  }, \"Choose a Token\"), tokenBalances.map(function (coin, index) {\n    if (coin.tokenType !== 'native') return __jsx(\"option\", {\n      value: coin.address,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 29\n      }\n    }, coin.name);\n  })), offeringToken.balance > 0 && offeringToken.tokenType == \"ERC-20\" && allowance > 0 ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 29\n    }\n  }, \"Max: \", offeringTokenBalance), __jsx(Input, {\n    onChange: function onChange(e) {\n      return setOfferAmount(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 29\n    }\n  })) : null), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 21\n    }\n  }, offeringToken.tokenType == 'ERC-20' ? offeringTokenBalance > 0 && allowance == 0 ? __jsx(Button, {\n    onClick: function onClick() {\n      handleApprove(offeringToken.address);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 29\n    }\n  }, \"Approve offer of \", offeringToken.name) : offeringToken && offeringTokenBalance == 0 ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 29\n    }\n  }, \"Insufficient Balance\") : __jsx(Button, {\n    onClick: function onClick() {\n      makeOffer();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 29\n    }\n  }, \"Make Offer\") : selectedNFTs.length > 0 ? __jsx(Select, {\n    onChange: function onChange(e) {\n      if (e.target.value !== '0') {\n        console.log(\"Picked TokenID: \", e.target.value, offeringToken);\n        setOfferTokenId(Number(e.target.value));\n        getApprovedForAll(offeringToken.address);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 25\n    }\n  }, __jsx(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 27\n    }\n  }, \"Select TokenId\"), selectedNFTs.map(function (tokenId, index) {\n    return __jsx(\"option\", {\n      value: tokenId,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 29\n      }\n    }, tokenId);\n  })) : null, offeringToken.name && offeringToken.tokenType != \"ERC-20\" && !approvedForAll ? __jsx(Button, {\n    onClick: function onClick() {\n      handleApprove(offeringToken.address);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 23\n    }\n  }, \"Approve offer of \", offeringToken.name) : __jsx(Button, {\n    onClick: function onClick() {\n      makeOffer();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 23\n    }\n  }, \"Make Offer\")), __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 25\n    }\n  }, \"My Offers\"), myOffers.map(function (offer, index) {\n    return __jsx(HStack, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 33\n      }\n    }, __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 37\n      }\n    }, offer.name, \" \", offer.amount), __jsx(Button, {\n      onClick: function onClick() {\n        withdrawOffer(offer.index);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 37\n      }\n    }, \"Withdraw Offer\"));\n  }))) : null, mine ? __jsx(Stack, {\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 17\n    }\n  }, !approvedForAll ? __jsx(Button, {\n    onClick: function onClick() {\n      handleApproveForAll();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 25\n    }\n  }, \"Allow accepting of Offers\") : null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 21\n    }\n  }, \"Offers\"), offers.map(function (offer, index) {\n    return __jsx(HStack, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 33\n      }\n    }, __jsx(Text, {\n      onClick: function onClick() {\n        addTokenToWallet(offer);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 37\n      }\n    }, offer.name, \" \", offer.amount), __jsx(Button, {\n      onClick: function onClick() {\n        rejectOffer(offer.index);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 37\n      }\n    }, \"Reject Offer\"), approvedForAll ? __jsx(Button, {\n      onClick: function onClick() {\n        acceptOffer(offer.index);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 41\n      }\n    }, \"Accept Offer\") : null);\n  })) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      setHash(null);\n      setLoaded(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 11\n    }\n  }) : null), __jsx(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s4(OfferModal, \"1zdDs7C49WIZXNkLo4Ik8agIiAI=\", false, function () {\n  return [useColorMode, useWeb3React];\n});\n\n_c = OfferModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"OfferModal\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx"],"names":["React","useEffect","useState","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","Text","Stack","Button","useColorMode","Select","Input","copy","COLOR","contractAddresses","useWeb3React","NETWORK_SHORTNAMES","Contract","HStack","TransactionToast","addTokenToWallet","EMBLEM_API","OfferModal","isOpen","onClose","tokenId","mine","colorMode","account","chainId","library","copied","setCopied","loading","setLoading","loaded","setLoaded","address","balance","tokenType","name","offeringToken","setOfferingToken","tokenBalances","setTokenBalances","offeringTokenBalance","setOfferingTokenBalance","acct","setAcct","decimals","setDecimals","allowance","setAllowance","approvedForAll","setApprovedForAll","offerAmount","setOfferAmount","offerTokenId","setOfferTokenId","offers","setOffers","myOffers","setMyOffers","hash","setHash","selectedNFTs","setSelectedNFTs","getErc20Contract","console","log","useContract","covalAbi","getVaultContract","emblemVault","emblemAbi","getTradeContract","nftrade","nftradeAbi","ABI","withSigner","getSigner","connectUnchecked","timeout","setTimeout","clearTimeout","getBalances","balances","getOfferContractInfo","handleApprove","contract","approve","Math","pow","then","handleApproveForAll","setApprovalForAll","getApprovedForAll","isApprovedForAll","approved","getNFTContractInfo","getSingleNFT","index","cb","tokenOfOwnerByIndex","nftInfo","nftCollection","push","toNumber","count","balanceOf","makeOffer","addOffer","withdrawOffer","rejectOffer","acceptOffer","getTokenContractInfo","_dec","toString","getSingleOffer","getOffer","_offer","token","offer","_from","amount","tokenContract","tokenName","tokenDecimals","symbol","tokenSymbol","offerCount","getOfferCount","fetch","method","headers","service","responce","json","jsonData","values","copyWithFlag","content","e","target","value","filter","item","map","coin","length","Number"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAAoCC,QAApC,QAAoD,OAApD;AACA,SACEC,KADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,gBALF,EAMEC,SANF,EAOEC,WAPF,EAQEC,IARF,EASEC,KATF,EAUEC,MAVF,EAWEC,YAXF,EAYEC,MAZF,EAaEC,KAbF,QAcO,iBAdP;AAeA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,SAASC,KAAT,EAAgBC,iBAAhB,QAAyC,cAAzC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,kBAAT,QAAmC,UAAnC,C,CACA;;AAEA,SAASC,QAAT,QAA4C,0BAA5C;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,gBAAT,QAAiC,gBAAjC;AACA,OAAO,IAAMC,UAAU,GAAG,4BAAnB;AAEP,eAAe,SAASC,UAAT,OAUC;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,MATdC,MASc,QATdA,MASc;AAAA,MARdC,OAQc,QARdA,OAQc;AAAA,MAPdC,OAOc,QAPdA,OAOc;AAAA,MANdC,IAMc,QANdA,IAMc;;AAChB;AACA;AAFgB,sBAIQjB,YAAY,EAJpB;AAAA,MAINkB,SAJM,iBAINA,SAJM;;AAAA,sBAKwBZ,YAAY,EALpC;AAAA,MAKNa,OALM,iBAKNA,OALM;AAAA,MAKGC,OALH,iBAKGA,OALH;AAAA,MAKYC,OALZ,iBAKYA,OALZ;;AAAA,kBAMchC,QAAQ,CAAC,KAAD,CANtB;AAAA,MAMPiC,MANO;AAAA,MAMCC,SAND;;AAAA,mBAOgBlC,QAAQ,CAAC,KAAD,CAPxB;AAAA,MAOPmC,OAPO;AAAA,MAOEC,UAPF;;AAAA,mBAQcpC,QAAQ,CAAC,KAAD,CARtB;AAAA,MAQPqC,MARO;AAAA,MAQCC,SARD;;AAAA,mBAS4BtC,QAAQ,CAAC;AAACuC,IAAAA,OAAO,EAAC,EAAT;AAAaC,IAAAA,OAAO,EAAE,CAAtB;AAAyBC,IAAAA,SAAS,EAAC,EAAnC;AAAuCC,IAAAA,IAAI,EAAE;AAA7C,GAAD,CATpC;AAAA,MASPC,aATO;AAAA,MASQC,gBATR;;AAAA,mBAU4B5C,QAAQ,CAAC,EAAD,CAVpC;AAAA,MAUP6C,aAVO;AAAA,MAUQC,gBAVR;;AAAA,mBAW0C9C,QAAQ,CAAC,CAAD,CAXlD;AAAA,MAWP+C,oBAXO;AAAA,MAWeC,uBAXf;;AAAA,mBAYUhD,QAAQ,CAAC,EAAD,CAZlB;AAAA,MAYPiD,IAZO;AAAA,MAYDC,OAZC;;AAAA,mBAakBlD,QAAQ,CAAC,CAAD,CAb1B;AAAA,MAaPmD,QAbO;AAAA,MAaGC,WAbH;;AAAA,mBAcoBpD,QAAQ,CAAC,CAAD,CAd5B;AAAA,MAcPqD,SAdO;AAAA,MAcIC,YAdJ;;AAAA,oBAe8BtD,QAAQ,CAAC,KAAD,CAftC;AAAA,MAePuD,cAfO;AAAA,MAeSC,iBAfT;;AAAA,oBAgBwBxD,QAAQ,CAAC,CAAD,CAhBhC;AAAA,MAgBPyD,WAhBO;AAAA,MAgBMC,cAhBN;;AAAA,oBAiB0B1D,QAAQ,CAAC,CAAD,CAjBlC;AAAA,MAiBP2D,YAjBO;AAAA,MAiBOC,eAjBP;;AAAA,oBAkBc5D,QAAQ,CAAC,EAAD,CAlBtB;AAAA,MAkBP6D,MAlBO;AAAA,MAkBCC,SAlBD;;AAAA,oBAmBkB9D,QAAQ,CAAC,EAAD,CAnB1B;AAAA,MAmBP+D,QAnBO;AAAA,MAmBGC,WAnBH;;AAAA,oBAoBUhE,QAAQ,CAAC,IAAD,CApBlB;AAAA,MAoBPiE,IApBO;AAAA,MAoBDC,OApBC;;AAAA,oBAqB0BlE,QAAQ,CAAC,EAAD,CArBlC;AAAA,MAqBPmE,YArBO;AAAA,MAqBOC,eArBP,mBAsBd;;;AAGA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAC9B,OAAD,EAAY;AAAA;;AACnC+B,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBhC,OAAxB;AACA,WAAOiC,WAAW,CAACjC,OAAD,EAAUvB,iBAAiB,CAACyD,QAA5B,EAAsC,IAAtC,CAAlB;AACD,GAHD;;AAzBc,KAyBRJ,gBAzBQ;AAAA,YA2BLG,WA3BK;AAAA;;AA8Bd,MAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAmB;AAAA;;AAAA,QAAlBnC,OAAkB,uEAAR,IAAQ;AAC1C,WAAOiC,WAAW,CAACjC,OAAO,IAAIvB,iBAAiB,CAAC2D,WAAlB,CAA8B5C,OAA9B,CAAZ,EAAoDf,iBAAiB,CAAC4D,SAAtE,EAAiF,IAAjF,CAAlB;AACD,GAFD;;AA9Bc,MA8BRF,gBA9BQ;AAAA,YA+BLF,WA/BK;AAAA;;AAkCd,MAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAI;AAAA;;AAC3B,WAAOL,WAAW,CAACxD,iBAAiB,CAAC8D,OAAlB,CAA0B/C,OAA1B,CAAD,EAAqCf,iBAAiB,CAAC+D,UAAvD,EAAmE,IAAnE,CAAlB;AACD,GAFD;;AAlCc,MAkCRF,gBAlCQ;AAAA,YAmCLL,WAnCK;AAAA;;AAsCd,MAAMA,WAAW,GAAG,SAAdA,WAAc,CAACjC,OAAD,EAAmByC,GAAnB,EAAyF;AAAA,QAA7CC,UAA6C,uEAAhC,KAAgC;AAC3G,WAAO,IAAI9D,QAAJ,CAAaoB,OAAb,EAAsByC,GAAtB,EAA2BC,UAAU,GAAGjD,OAAO,CAACkD,SAAR,CAAkBpD,OAAlB,EAA2BqD,gBAA3B,EAAH,GAAmDnD,OAAxF,CAAP;AACD,GAFD;;AAIAjC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI+B,OAAO,IAAImB,IAAI,IAAInB,OAAvB,EAAgC;AAC9BoB,MAAAA,OAAO,CAACpB,OAAD,CAAP;AACAQ,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD;AACF,GALQ,EAKN,CAACR,OAAD,EAAUmB,IAAV,CALM,CAAT;AAMAlD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIkC,MAAJ,EAAY;AACV,UAAMmD,OAAO,GAAGC,UAAU,CAAC,YAAM;AAC/BnD,QAAAA,SAAS,CAAC,KAAD,CAAT;AACD,OAFyB,EAEvB,GAFuB,CAA1B;AAGA,aAAO,YAAY;AACjBoD,QAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,OAFD;AAGD;AACF,GATQ,EASN,CAACnD,MAAD,CATM,CAAT;AAWAlC,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI,CAACsC,MAAD,IAAW,CAACF,OAAhB,EAAyB;AACvBC,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAmD,MAAAA,WAAW,CAACzD,OAAD;AAAA,6EAAU,iBAAM0D,QAAN;AAAA;AAAA;AAAA;AAAA;AACjB1C,kBAAAA,gBAAgB,CAAC0C,QAAD,CAAhB;AACAC,kBAAAA,oBAAoB;AACpBrD,kBAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,kBAAAA,SAAS,CAAC,IAAD,CAAT;;AAJiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAV;;AAAA;AAAA;AAAA;AAAA,UAAX;AAOD;AACJ,GAXQ,CAAT;;AAaA,MAAMoD,aAAa;AAAA,yEAAG,kBAAMnD,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBoD,cAAAA,QADgB,GACLtB,gBAAgB,CAAC9B,OAAD,CADX;AAEpB+B,cAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBpB,QAAxB;AAFoB;AAAA,qBAGdwC,QAAQ,CAACC,OAAT,CAAiB5E,iBAAiB,CAAC8D,OAAlB,CAA0B/C,OAA1B,CAAjB,EAAsDgB,oBAAoB,GAAG8C,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAAC3C,QAAd,CAA7E,EAAuG4C,IAAvG,CAA4G,iBAAgC;AAAA,oBAA7B9B,IAA6B,SAA7BA,IAA6B;AAC9IC,gBAAAA,OAAO,CAACD,IAAD,CAAP;AACD,eAFG,CAHc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAbyB,aAAa;AAAA;AAAA;AAAA,KAAnB;;AAQA,MAAMM,mBAAmB;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBL,cAAAA,QADsB,GACXjB,gBAAgB,EADL;AAAA;AAAA,qBAEpBiB,QAAQ,CAACM,iBAAT,CAA2BjF,iBAAiB,CAAC8D,OAAlB,CAA0B/C,OAA1B,CAA3B,EAA+D,IAA/D,EAAqEgE,IAArE,CAA0E,iBAAgC;AAAA,oBAA7B9B,IAA6B,SAA7BA,IAA6B;AAC5GC,gBAAAA,OAAO,CAACD,IAAD,CAAP;AACD,eAFG,CAFoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAnB+B,mBAAmB;AAAA;AAAA;AAAA,KAAzB;;AAMA,MAAME,iBAAiB;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAM3D,cAAAA,OAAN,8DAAgB,IAAhB;AACpBoD,cAAAA,QADoB,GACTjB,gBAAgB,CAACnC,OAAD,CADP;AAAA;AAAA,qBAEHoD,QAAQ,CAACQ,gBAAT,CAA0BrE,OAA1B,EAAmCd,iBAAiB,CAAC8D,OAAlB,CAA0B/C,OAA1B,CAAnC,CAFG;;AAAA;AAEpBqE,cAAAA,QAFoB;AAGxB9B,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B6B,QAA3B;AACA5C,cAAAA,iBAAiB,CAAC4C,QAAD,CAAjB;;AAJwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAjBF,iBAAiB;AAAA;AAAA;AAAA,KAAvB;;AAOA,MAAMG,kBAAkB;AAAA,yEAAG,kBAAM9D,OAAN;AAAA,0CASV+D,YATU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yFASzB,kBAA4BC,KAA5B,EAAmCC,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACyBb,QAAQ,CAACc,mBAAT,CAA6B3E,OAA7B,EAAsCyE,KAAtC,CADzB;;AAAA;AACQG,0BAAAA,OADR;AAEIC,0BAAAA,aAAa,CAACC,IAAd,CAAmBF,OAAO,CAACG,QAAR,EAAnB;;AAFJ,gCAGQN,KAAK,GAAE,CAAP,IAAYO,KAHpB;AAAA;AAAA;AAAA;;AAAA,4DAIaN,EAAE,EAJf;;AAAA;AAAA,4DAMaF,YAAY,CAACC,KAAK,GAAE,CAAR,EAAWC,EAAX,CANzB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBATyB;AAAA;AAAA;;AASVF,cAAAA,YATU;AAAA;AAAA;;AACrBX,cAAAA,QADqB,GACVjB,gBAAgB,CAACnC,OAAD,CADN;AAAA;AAAA,qBAEPoD,QAAQ,CAACoB,SAAT,CAAmBjF,OAAnB,CAFO;;AAAA;AAErBgF,cAAAA,KAFqB;AAGzBxC,cAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCzC,OAAxC,EAAiD,MAAjD,EAAyDgF,KAAK,CAACD,QAAN,EAAzD;AACIF,cAAAA,aAJqB,GAIL,EAJK;AAKzBL,cAAAA,YAAY,CAAC,CAAD,EAAI,YAAI;AAClBhC,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BoC,aAA5B;AACAvC,gBAAAA,eAAe,CAACuC,aAAD,CAAf;AACD,eAHW,CAAZ;;AALyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAlBN,kBAAkB;AAAA;AAAA;AAAA,KAAxB;;AAoBA,MAAMW,SAAS;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACZrB,cAAAA,QADY,GACDd,gBAAgB,EADf,EAEhB;;AAFgB;AAAA,qBAGVc,QAAQ,CAACsB,QAAT,CAAkBtE,aAAa,CAACJ,OAAhC,EAAyCoB,YAAzC,EAAuD3C,iBAAiB,CAAC2D,WAAlB,CAA8B5C,OAA9B,CAAvD,EAA+FJ,OAA/F,EAAwG8B,WAAW,GAAEoC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAAC3C,QAAd,CAArH,EAA8I4C,IAA9I,CAAmJ,kBAAgC;AAAA,oBAA7B9B,IAA6B,UAA7BA,IAA6B;AACrLC,gBAAAA,OAAO,CAACD,IAAD,CAAP;AACD,eAFG,CAHU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAT+C,SAAS;AAAA;AAAA;AAAA,KAAf;;AAQA,MAAME,aAAa;AAAA,0EAAG,kBAAMX,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBZ,cAAAA,QADgB,GACLd,gBAAgB,EADX,EAEpB;;AAFoB;AAAA,qBAGdc,QAAQ,CAACuB,aAAT,CAAuBlG,iBAAiB,CAAC2D,WAAlB,CAA8B5C,OAA9B,CAAvB,EAA+DJ,OAA/D,EAAwE4E,KAAxE,EAA+ER,IAA/E,CAAoF,kBAAgC;AAAA,oBAA7B9B,IAA6B,UAA7BA,IAA6B;AACtHC,gBAAAA,OAAO,CAACD,IAAD,CAAP;AACD,eAFG,CAHc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAbiD,aAAa;AAAA;AAAA;AAAA,KAAnB;;AAQA,MAAMC,WAAW;AAAA,0EAAG,kBAAMZ,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACdZ,cAAAA,QADc,GACHd,gBAAgB,EADb,EAElB;;AAFkB;AAAA,qBAGZc,QAAQ,CAACwB,WAAT,CAAqBnG,iBAAiB,CAAC2D,WAAlB,CAA8B5C,OAA9B,CAArB,EAA6DJ,OAA7D,EAAsE4E,KAAtE,EAA6ER,IAA7E,CAAkF,kBAAgC;AAAA,oBAA7B9B,IAA6B,UAA7BA,IAA6B;AACtHC,gBAAAA,OAAO,CAACD,IAAD,CAAP;AACD,eAFK,CAHY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXkD,WAAW;AAAA;AAAA;AAAA,KAAjB;;AAQA,MAAMC,WAAW;AAAA,0EAAG,mBAAMb,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACdZ,cAAAA,QADc,GACHd,gBAAgB,EADb,EAElB;;AAFkB;AAAA,qBAGZc,QAAQ,CAACyB,WAAT,CAAqBpG,iBAAiB,CAAC2D,WAAlB,CAA8B5C,OAA9B,CAArB,EAA6DJ,OAA7D,EAAsE4E,KAAtE,EAA6ER,IAA7E,CAAkF,kBAAgC;AAAA,oBAA7B9B,IAA6B,UAA7BA,IAA6B;AACpHC,gBAAAA,OAAO,CAACD,IAAD,CAAP;AACD,eAFG,CAHY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXmD,WAAW;AAAA;AAAA;AAAA,KAAjB;;AAQA,MAAMC,oBAAoB;AAAA,0EAAG,mBAAO9E,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACvBoD,cAAAA,QADuB,GACZtB,gBAAgB,CAAC9B,OAAD,CADJ,EAE3B;;AAF2B;AAAA,qBAGVoD,QAAQ,CAACxC,QAAT,EAHU;;AAAA;AAGvBmE,cAAAA,IAHuB;AAI3BlE,cAAAA,WAAW,CAACkE,IAAD,CAAX;AAJ2B,8BAK3BhE,YAL2B;AAAA;AAAA,qBAMjBqC,QAAQ,CACbtC,SADK,CACKvB,OADL,EACcd,iBAAiB,CAAC8D,OAAlB,CAA0B/C,OAA1B,CADd,EAELgE,IAFK,CAEA,UAAAvD,OAAO;AAAA,uBAAE,CAACA,OAAO,GAAGqD,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAACwB,IAAd,CAAX,EAAgCC,QAAhC,EAAF;AAAA,eAFP,CANiB;;AAAA;AAAA;AAAA;AAAA,8BAU3BvE,uBAV2B;AAAA;AAAA,qBAWjB2C,QAAQ,CACboB,SADK,CACKjF,OADL,EAELiE,IAFK,CAEA,UAAAvD,OAAO;AAAA,uBAAE,CAACA,OAAO,GAAGqD,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAACwB,IAAd,CAAX,EAAgCC,QAAhC,EAAF;AAAA,eAFP,CAXiB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAApBF,oBAAoB;AAAA;AAAA;AAAA,KAA1B;;AAiBA,MAAM5B,oBAAoB;AAAA,0EAAG;AAAA,kDAeZ+B,cAfY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2FAe3B,mBAA8BjB,KAA9B,EAAqCC,EAArC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACuBb,QAAQ,CAAC8B,QAAT,CAAkBzG,iBAAiB,CAAC2D,WAAlB,CAA8B5C,OAA9B,CAAlB,EAA0DJ,OAA1D,EAAmE4E,KAAnE,CADvB;;AAAA;AACQmB,0BAAAA,MADR;;AAAA,gCAEQA,MAAM,CAACC,KAAP,KAAiB,4CAFzB;AAAA;AAAA;AAAA;;AAGYC,0BAAAA,KAHZ,GAGyB;AAACjG,4BAAAA,OAAO,EAAE+F,MAAM,CAAC/F,OAAP,CAAekF,QAAf,EAAV;AAAqCgB,4BAAAA,KAAK,EAAEH,MAAM,CAACG,KAAnD;AAA0DF,4BAAAA,KAAK,EAAED,MAAM,CAACC,KAAxE;AAA+EG,4BAAAA,MAAM,EAAEJ,MAAM,CAACI;AAA9F,2BAHzB;AAIYC,0BAAAA,aAJZ,GAI4B1D,gBAAgB,CAACuD,KAAK,CAACD,KAAP,CAJ5C;AAAA;AAAA,iCAK8BI,aAAa,CAACrF,IAAd,EAL9B;;AAAA;AAKYsF,0BAAAA,SALZ;AAAA;AAAA,iCAMkCD,aAAa,CAAC5E,QAAd,EANlC;;AAAA;AAMY8E,0BAAAA,aANZ;AAAA;AAAA,iCAOgCF,aAAa,CAACG,MAAd,EAPhC;;AAAA;AAOYC,0BAAAA,WAPZ;AAQQP,0BAAAA,KAAK,CAACM,MAAN,GAAeC,WAAf;AACAP,0BAAAA,KAAK,CAAClF,IAAN,GAAasF,SAAb;AACAJ,0BAAAA,KAAK,CAACzE,QAAN,GAAiB8E,aAAjB;AACAL,0BAAAA,KAAK,CAACrB,KAAN,GAAcA,KAAd;AACAqB,0BAAAA,KAAK,CAACE,MAAN,GAAeF,KAAK,CAACE,MAAN,CAAajB,QAAb,KAA0BhB,IAAI,CAACC,GAAL,CAAS,EAAT,EAAY,CAACmC,aAAb,CAAzC;AACAL,0BAAAA,KAAK,CAACrF,OAAN,GAAgBqF,KAAK,CAACD,KAAtB;AACA9D,0BAAAA,MAAM,CAAC+C,IAAP,CAAYgB,KAAZ,EAdR,CAeQ;;AACA,8BAAIA,KAAK,CAACC,KAAN,IAAe/F,OAAnB,EAA4B;AACxBiC,4BAAAA,QAAQ,CAAC6C,IAAT,CAAcgB,KAAd;AACH;;AAlBT;AAAA,gCAqBQrB,KAAK,GAAE,CAAP,IAAY6B,UArBpB;AAAA;AAAA;AAAA;;AAAA,6DAsBe5B,EAAE,EAtBjB;;AAAA;AAAA,6DAwBegB,cAAc,CAACjB,KAAK,GAAE,CAAR,EAAWC,EAAX,CAxB7B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAf2B;AAAA;AAAA;;AAeZgB,cAAAA,cAfY;AAAA;AAAA;;AACvB7B,cAAAA,QADuB,GACZd,gBAAgB,EADJ;AAAA;AAAA,qBAEHc,QAAQ,CAAC0C,aAAT,CAAuBrH,iBAAiB,CAAC2D,WAAlB,CAA8B5C,OAA9B,CAAvB,EAA+DJ,OAA/D,CAFG;;AAAA;AAEvByG,cAAAA,UAFuB,mBAEsEvB,QAFtE;;AAG3B,kBAAIjF,IAAJ,EAAU;AACNsE,gBAAAA,iBAAiB;AACpB;;AACGrC,cAAAA,MANuB,GAMd,EANc;AAOvBE,cAAAA,QAPuB,GAOZ,EAPY;;AAQ3B,kBAAIqE,UAAU,GAAG,CAAjB,EAAoB;AAChBZ,gBAAAA,cAAc,CAAC,CAAD,EAAI,YAAI;AAClB1D,kBAAAA,SAAS,CAACD,MAAD,CAAT;AACAG,kBAAAA,WAAW,CAACD,QAAD,CAAX,CAFkB,CAGlB;AACH,iBAJa,CAAd;AAKH;;AA4BDO,cAAAA,OAAO,CAACC,GAAR,CAAY6D,UAAZ;;AA1C2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAApB3C,oBAAoB;AAAA;AAAA;AAAA,KAA1B;;AA6CA,MAAMF,WAAW;AAAA,0EAAG,mBAAOhD,OAAP,EAAgBiE,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACK8B,KAAK,CAAC/G,UAAU,GAAG,GAAb,GAAiBL,kBAAkB,CAACa,OAAD,CAAnC,GAA6C,WAA7C,GAA2DQ,OAA5D,EAAqE;AAC/FgG,gBAAAA,MAAM,EAAE,KADuF;AAE/FC,gBAAAA,OAAO,EAAE;AACP,kCAAgB,kBADT;AAEPC,kBAAAA,OAAO,EAAE;AAFF;AAFsF,eAArE,CADV;;AAAA;AACZC,cAAAA,QADY;AAAA;AAAA,qBAQKA,QAAQ,CAACC,IAAT,EARL;;AAAA;AAQZC,cAAAA,QARY;AAAA,iDAYXpC,EAAE,CAACoC,QAAQ,CAACC,MAAV,CAZS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAXtD,WAAW;AAAA;AAAA;AAAA,KAAjB;;AAeA,WAASuD,YAAT,CAAsBC,OAAtB,EAA6C;AAC3CjI,IAAAA,IAAI,CAACiI,OAAD,CAAJ;AACA7G,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AAED,SACE,MAAC,KAAD;AAAO,IAAA,MAAM,EAAET,MAAf;AAAuB,IAAA,OAAO,EAAEC,OAAhC;AAAyC,IAAA,UAAU,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,YAAD;AAAc,IAAA,KAAK,EAAEX,KAAK,CAACc,SAAD,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAO,CAACD,IAAD,GAAQ,MAAR,GAAiB,IAAxB,YAAoCA,IAAI,GAAG,GAAH,GAAS,IAAjD,YAA6DD,OAA7D,CADF,CADF,EAIE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAACC,IAAD,GACG,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD;AAAO,IAAA,EAAE,EAAC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADA,EAGA,MAAC,MAAD;AAAQ,IAAA,CAAC,EAAC,MAAV;AAAiB,IAAA,KAAK,EAAEe,aAAa,CAACJ,OAAtC;AACI,IAAA,QAAQ,EAAE,kBAACyG,CAAD,EAAO;AACb,UAAIA,CAAC,CAACC,MAAF,CAASC,KAAT,KAAmB,GAAvB,EAA4B;AACxB,YAAIvB,KAAK,GAAG9E,aAAa,CAACsG,MAAd,CAAqB,UAACC,IAAD,EAAQ;AAAC,iBAAOA,IAAI,CAAC7G,OAAL,IAAgByG,CAAC,CAACC,MAAF,CAASC,KAAhC;AAAsC,SAApE,EAAsE,CAAtE,CAAZ;AACAtG,QAAAA,gBAAgB,CAAC+E,KAAD,CAAhB;AACAA,QAAAA,KAAK,CAAClF,SAAN,IAAkB,QAAlB,GAA6B4E,oBAAoB,CAACM,KAAK,CAACpF,OAAP,CAAjD,GAAmE8D,kBAAkB,CAACsB,KAAK,CAACpF,OAAP,CAArF;AACA+B,QAAAA,OAAO,CAACC,GAAR,CAAY1B,aAAa,CAACsG,MAAd,CAAqB,UAACC,IAAD,EAAQ;AAAC,iBAAOA,IAAI,CAAC7G,OAAL,IAAgByG,CAAC,CAACC,MAAF,CAASC,KAAhC;AAAsC,SAApE,EAAsE,CAAtE,CAAZ;AACA5E,QAAAA,OAAO,CAACC,GAAR,CAAYyE,CAAC,CAACC,MAAF,CAASC,KAArB;AACH;AACJ,KATL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWI;AAAQ,IAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAXJ,EAYKrG,aAAa,CAACwG,GAAd,CAAkB,UAACC,IAAD,EAAO/C,KAAP,EAAiB;AAChC,QAAI+C,IAAI,CAAC7G,SAAL,KAAmB,QAAvB,EACA,OACA;AAAQ,MAAA,KAAK,EAAE6G,IAAI,CAAC/G,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8B+G,IAAI,CAAC5G,IAAnC,CADA;AAGH,GALA,CAZL,CAHA,EAsBCC,aAAa,CAACH,OAAd,GAAwB,CAAxB,IAA6BG,aAAa,CAACF,SAAd,IAAyB,QAAtD,IAAkEY,SAAS,GAAG,CAA9E,GACG,4BACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAYN,oBAAZ,CADJ,EAEI,MAAC,KAAD;AAAO,IAAA,QAAQ,EAAE,kBAACiG,CAAD;AAAA,aAAOtF,cAAc,CAACsF,CAAC,CAACC,MAAF,CAASC,KAAV,CAArB;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADH,GAKG,IA3BJ,CADJ,EA+BI,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,KAAjB;AAAuB,IAAA,OAAO,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCvG,aAAa,CAACF,SAAd,IAA0B,QAA1B,GACGM,oBAAoB,GAAG,CAAvB,IAA4BM,SAAS,IAAI,CAAzC,GACI,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,mBAAI;AAACqC,MAAAA,aAAa,CAAC/C,aAAa,CAACJ,OAAf,CAAb;AAAqC,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA+EI,aAAa,CAACD,IAA7F,CADJ,GAEIC,aAAa,IAAII,oBAAoB,IAAI,CAAzC,GACA,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADA,GAGA,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,mBAAI;AAACiE,MAAAA,SAAS;AAAG,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANP,GASC7C,YAAY,CAACoF,MAAb,GAAsB,CAAtB,GACE,MAAC,MAAD;AACA,IAAA,QAAQ,EAAE,kBAACP,CAAD,EAAO;AACf,UAAIA,CAAC,CAACC,MAAF,CAASC,KAAT,KAAmB,GAAvB,EAA4B;AACxB5E,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCyE,CAAC,CAACC,MAAF,CAASC,KAAzC,EAAgDvG,aAAhD;AACAiB,QAAAA,eAAe,CAAC4F,MAAM,CAACR,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP,CAAf;AACAhD,QAAAA,iBAAiB,CAACvD,aAAa,CAACJ,OAAf,CAAjB;AACH;AACF,KAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE;AAAQ,IAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBARF,EASG4B,YAAY,CAACkF,GAAb,CAAiB,UAAC1H,OAAD,EAAU4E,KAAV,EAAoB;AACpC,WACA;AAAQ,MAAA,KAAK,EAAE5E,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyBA,OAAzB,CADA;AAGH,GAJE,CATH,CADF,GAiBI,IA3BN,EA6BCgB,aAAa,CAACD,IAAd,IAAsBC,aAAa,CAACF,SAAd,IAA0B,QAAhD,IAA4D,CAACc,cAA7D,GACC,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,mBAAI;AAACmC,MAAAA,aAAa,CAAC/C,aAAa,CAACJ,OAAf,CAAb;AAAqC,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA+EI,aAAa,CAACD,IAA7F,CADD,GAGC,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,mBAAI;AAACsE,MAAAA,SAAS;AAAG,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhCF,CA/BJ,EAuEI,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEMjD,QAAQ,CAACsF,GAAT,CAAa,UAACzB,KAAD,EAAQrB,KAAR,EAAkB;AAC7B,WACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOqB,KAAK,CAAClF,IAAb,OAAoBkF,KAAK,CAACE,MAA1B,CADJ,EAEI,MAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,mBAAK;AAACZ,QAAAA,aAAa,CAACU,KAAK,CAACrB,KAAP,CAAb;AAA2B,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ,CADJ;AAMH,GAPC,CAFN,CAvEJ,CADH,GAoFG,IArFR,EAuFK3E,IAAI,GACD,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAAC2B,cAAD,GACG,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,mBAAI;AAACyC,MAAAA,mBAAmB;AAAG,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADH,GAEG,IAHR,EAII,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,EAKUnC,MAAM,CAACwF,GAAP,CAAW,UAACzB,KAAD,EAAQrB,KAAR,EAAkB;AAC3B,WACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAM,MAAA,OAAO,EAAE,mBAAK;AAACjF,QAAAA,gBAAgB,CAACsG,KAAD,CAAhB;AAAwB,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgDA,KAAK,CAAClF,IAAtD,OAA6DkF,KAAK,CAACE,MAAnE,CADJ,EAEI,MAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,mBAAK;AAACX,QAAAA,WAAW,CAACS,KAAK,CAACrB,KAAP,CAAX;AAAyB,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,EAGKhD,cAAc,GACX,MAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,mBAAK;AAAC6D,QAAAA,WAAW,CAACQ,KAAK,CAACrB,KAAP,CAAX;AAAyB,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADW,GAEX,IALR,CADJ;AASH,GAVC,CALV,CADC,GAkBD,IAzGR,EA0GGtC,IAAI,GACL,MAAC,gBAAD;AACM,IAAA,IAAI,EAAEA,IADZ;AAEM,IAAA,UAAU,EAAE,sBAAM;AACdC,MAAAA,OAAO,CAAC,IAAD,CAAP;AACA5B,MAAAA,SAAS,CAAC,KAAD,CAAT;AACH,KALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,GAQD,IAlHN,CALF,EAyHE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzHF,CAFF,CADF;AAgID;;IA7WuBd,U;UAcAb,Y,EACgBM,Y;;;KAfhBO,U","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Text,\n  Stack,\n  Button,\n  useColorMode,\n  Select,\n  Input,\n} from '@chakra-ui/core'\nimport copy from 'copy-to-clipboard'\nimport QRCode from 'qrcode.react'\nimport { COLOR, contractAddresses } from '../constants'\nimport { useWeb3React } from '@web3-react/core'\nimport { NETWORK_SHORTNAMES } from '../utils'\n// import { useContract } from '../hooks'\nimport { useTokenBalance, useTokenAllowance, useETHBalance } from '../data'\nimport { Contract, ContractInterface } from '@ethersproject/contracts'\nimport { HStack } from '@chakra-ui/react'\nimport { TransactionToast } from './TransactionToast'\nimport { addTokenToWallet } from '../public/web3'\nexport const EMBLEM_API = 'https://api.emblemvault.io'\n\nexport default function OfferModal({\n  isOpen,\n  onClose,\n  tokenId,\n  mine,\n}: {\n  isOpen: boolean\n  onClose: () => void\n  tokenId\n  mine: boolean\n}): JSX.Element {\n//   const address = addrAddr\n//   const coin = addrCoin\n\n  const { colorMode } = useColorMode()\n  const { account, chainId, library } = useWeb3React()\n  const [copied, setCopied] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loaded, setLoaded] = useState(false)\n  const [offeringToken, setOfferingToken] = useState({address:'', balance: 0, tokenType:'', name: ''})\n  const [tokenBalances, setTokenBalances] = useState([])\n  const [offeringTokenBalance, setOfferingTokenBalance] = useState(0)\n  const [acct, setAcct] = useState('')\n  const [decimals, setDecimals] = useState(0)\n  const [allowance, setAllowance] = useState(0)\n  const [approvedForAll, setApprovedForAll] = useState(false)\n  const [offerAmount, setOfferAmount] = useState(0)\n  const [offerTokenId, setOfferTokenId] = useState(0)\n  const [offers, setOffers] = useState([])\n  const [myOffers, setMyOffers] = useState([])\n  const [hash, setHash] = useState(null)\n  const [selectedNFTs, setSelectedNFTs] = useState([])\n  // const [offeringTokenId, setOfferingTokenId] = useState()\n  \n  \n  const getErc20Contract = (address) =>{\n    console.log(\"contract\", address)\n    return useContract(address, contractAddresses.covalAbi, true)\n  }\n\n  const getVaultContract = (address = null) =>{\n    return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n  }\n\n  const getTradeContract = ()=>{\n    return useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true)\n  }\n\n  const useContract = (address?: string, ABI?: ContractInterface, withSigner = false): Contract | undefined => {\n    return new Contract(address, ABI, withSigner ? library.getSigner(account).connectUnchecked() : library)\n  }\n\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setLoaded(false)\n    }\n  }, [account, acct])\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [copied])\n\n  useEffect(() => {\n      if (!loaded && !loading) {\n        setLoading(true)\n        getBalances(account, async balances =>{\n            setTokenBalances(balances)\n            getOfferContractInfo()\n            setLoading(false)\n            setLoaded(true)\n        })\n\n      }\n  })\n\n  const handleApprove = async(address)=>{\n    let contract = getErc20Contract(address)\n    console.log('decimals', decimals)\n    await contract.approve(contractAddresses.nftrade[chainId], (offeringTokenBalance * Math.pow(10, +decimals))).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const handleApproveForAll = async()=>{\n    let contract = getVaultContract()\n    await contract.setApprovalForAll(contractAddresses.nftrade[chainId], true).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n  const getApprovedForAll = async(address = null)=>{\n    let contract = getVaultContract(address)\n    let approved = await contract.isApprovedForAll(account, contractAddresses.nftrade[chainId])\n    console.log('---approved', approved)\n    setApprovedForAll(approved)\n  }\n\n  const getNFTContractInfo = async(address)=>{\n    let contract = getVaultContract(address)\n    let count = await contract.balanceOf(account)\n    console.log('--------------- NFT Info', account, 'owns', count.toNumber())\n    let nftCollection = []\n    getSingleNFT(0, ()=>{\n      console.log(\"GOT ALL NFTs\", nftCollection)\n      setSelectedNFTs(nftCollection)\n    })\n    async function getSingleNFT(index, cb) {\n        let nftInfo =  await contract.tokenOfOwnerByIndex(account, index)\n        nftCollection.push(nftInfo.toNumber())\n        if (index +1 >= count) {\n          return cb()\n      } else {\n          return getSingleNFT(index +1, cb)\n      }\n    }\n  }\n\n  const makeOffer = async()=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.addOffer(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals)).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const withdrawOffer = async(index)=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.withdrawOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const rejectOffer = async(index)=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.rejectOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n  }\n\n  const acceptOffer = async(index)=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.acceptOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const getTokenContractInfo = async (address)=>{\n    let contract = getErc20Contract(address)\n    // console.log(contract)\n    let _dec = await contract.decimals()\n    setDecimals(_dec)\n    setAllowance(\n        await contract\n        .allowance(account, contractAddresses.nftrade[chainId])\n        .then(balance=>(balance * Math.pow(10, -_dec)).toString())\n    )\n    setOfferingTokenBalance(\n        await contract\n        .balanceOf(account)\n        .then(balance=>(balance * Math.pow(10, -_dec)).toString())\n    )\n  }\n\n  const getOfferContractInfo = async ()=>{\n    let contract = getTradeContract()\n    let offerCount = (await contract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId)).toNumber()\n    if (mine) {\n        getApprovedForAll()\n    }\n    let offers = []\n    let myOffers = []\n    if (offerCount > 0) {\n        getSingleOffer(0, ()=>{\n            setOffers(offers)\n            setMyOffers(myOffers)\n            // console.log('offers', offers, myOffers)\n        })\n    }\n    async function getSingleOffer(index, cb) {\n        let _offer = await contract.getOffer(contractAddresses.emblemVault[chainId], tokenId, index)\n        if (_offer.token !== \"0x0000000000000000000000000000000000000000\") {\n            let offer: any = {tokenId: _offer.tokenId.toNumber(), _from: _offer._from, token: _offer.token, amount: _offer.amount}\n            let tokenContract = getErc20Contract(offer.token)\n            let tokenName = await tokenContract.name()\n            let tokenDecimals = await tokenContract.decimals()\n            let tokenSymbol = await tokenContract.symbol()\n            offer.symbol = tokenSymbol\n            offer.name = tokenName\n            offer.decimals = tokenDecimals\n            offer.index = index\n            offer.amount = offer.amount.toNumber() * Math.pow(10,-tokenDecimals)\n            offer.address = offer.token\n            offers.push(offer)\n            // console.log('-----', offer)\n            if (offer._from == account) {\n                myOffers.push(offer)\n            }\n        }\n        \n        if (index +1 >= offerCount) {\n            return cb()\n        } else {\n            return getSingleOffer(index +1, cb)\n        }\n    }\n    console.log(offerCount)\n  }\n\n  const getBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/'+NETWORK_SHORTNAMES[chainId]+'/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    // setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n    return cb(jsonData.values)\n  }\n\n  function copyWithFlag(content: string): void {\n    copy(content)\n    setCopied(true)\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent color={COLOR[colorMode]}>\n        <ModalHeader>\n          <Text>{!mine? ('Make'): null} Offer{mine? ('s'): null} for: {tokenId}</Text>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n            {!mine? (\n                <Stack direction=\"column\">\n                    <Stack mt=\"6\">\n                    <Text>Choose your Offer Token</Text>\n                  {/* <Text>{account} network: {NETWORK_SHORTNAMES[chainId]}</Text> */}\n                    <Select w=\"100%\" value={offeringToken.address}\n                        onChange={(e) => {\n                            if (e.target.value !== '0') {\n                                let token = tokenBalances.filter((item)=>{return item.address == e.target.value})[0]\n                                setOfferingToken(token)\n                                token.tokenType ==\"ERC-20\" ? getTokenContractInfo(token.address) : getNFTContractInfo(token.address)\n                                console.log(tokenBalances.filter((item)=>{return item.address == e.target.value})[0])\n                                console.log(e.target.value)\n                            }\n                        }}\n                    >\n                        <option value=\"0\" >Choose a Token</option>\n                        {tokenBalances.map((coin, index) => {\n                            if (coin.tokenType !== 'native')\n                            return (\n                            <option value={coin.address}>{coin.name}</option>\n                            )\n                        })}\n                    </Select>\n                    {offeringToken.balance > 0 && offeringToken.tokenType==\"ERC-20\" && allowance > 0 ? (\n                        <>\n                            <Text>Max: {offeringTokenBalance}</Text>    \n                            <Input onChange={(e) => setOfferAmount(e.target.value)}></Input>\n                        </>\n                    ) : null}\n                                  \n                </Stack>\n                    <Stack direction=\"row\" justify=\"center\">\n                    {offeringToken.tokenType =='ERC-20' ? (\n                        offeringTokenBalance > 0 && allowance == 0 ? (\n                            <Button onClick={()=>{handleApprove(offeringToken.address)}}>Approve offer of {offeringToken.name}</Button>\n                        ) : offeringToken && offeringTokenBalance == 0 ? (\n                            <Text>Insufficient Balance</Text>\n                        ) : (\n                            <Button onClick={()=>{makeOffer()}}>Make Offer</Button>\n                        )\n                    ) : (\n                      selectedNFTs.length > 0 ? (\n                        <Select\n                        onChange={(e) => {\n                          if (e.target.value !== '0') {\n                              console.log(\"Picked TokenID: \", e.target.value, offeringToken)\n                              setOfferTokenId(Number(e.target.value))\n                              getApprovedForAll(offeringToken.address)\n                          }\n                        }}>\n                          <option value=\"0\">Select TokenId</option>\n                          {selectedNFTs.map((tokenId, index) => {\n                            return (\n                            <option value={tokenId}>{tokenId}</option>\n                            )\n                        })}\n                        </Select>\n                        \n                      ) : null\n                    )}\n                    {offeringToken.name && offeringToken.tokenType !=\"ERC-20\" && !approvedForAll? (\n                      <Button onClick={()=>{handleApprove(offeringToken.address)}}>Approve offer of {offeringToken.name}</Button>\n                    ): (\n                      <Button onClick={()=>{makeOffer()}}>Make Offer</Button>\n                    )}\n                \n                    \n                  {/* <Button onClick={() => copyWithFlag('address')}>\n                    {copied ? <Text>Copied!</Text> : <Text isTruncated>{'address'}</Text>}\n                  </Button> */}\n                </Stack>\n                    <Stack>\n                        <Text>My Offers</Text>\n                        { myOffers.map((offer, index) => {\n                            return (\n                                <HStack>\n                                    <Text>{offer.name} {offer.amount}</Text>\n                                    <Button onClick={() =>{withdrawOffer(offer.index)}}>Withdraw Offer</Button>\n                                </HStack>\n                            )\n                        })}\n                    </Stack>\n                </Stack>\n            ) : null}\n\n            {mine? (\n                <Stack direction=\"column\">\n                    {!approvedForAll ? (\n                        <Button onClick={()=>{handleApproveForAll()}}>Allow accepting of Offers</Button>\n                    ) : null}\n                    <Text>Offers</Text>\n                        { offers.map((offer, index) => {\n                            return (\n                                <HStack>\n                                    <Text onClick={() =>{addTokenToWallet(offer)}}>{offer.name} {offer.amount}</Text>\n                                    <Button onClick={() =>{rejectOffer(offer.index)}}>Reject Offer</Button>\n                                    {approvedForAll ? (\n                                        <Button onClick={() =>{acceptOffer(offer.index)}}>Accept Offer</Button>\n                                    ) : null}                                    \n                                </HStack>\n                            )\n                        })}\n                </Stack>\n            ) : null }\n          {hash ? (\n          <TransactionToast\n                hash={hash}\n                onComplete={() => {\n                    setHash(null)\n                    setLoaded(false)\n                }}\n            />\n          ) : null }\n        </ModalBody>\n        <ModalFooter></ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}