{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/TransactionToast.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useState, useEffect } from 'react';\nimport { Button, Spinner, IconButton, ButtonGroup } from '@chakra-ui/core';\nimport { useWeb3React } from '@web3-react/core';\nimport { useTransactions } from '../context';\nimport { shortenHex, EtherscanType, formatEtherscanLink } from '../utils';\nexport function TransactionToast({\n  hash,\n  onComplete\n}) {\n  const {\n    library,\n    chainId\n  } = useWeb3React();\n  const [, {\n    removeTransaction\n  }] = useTransactions();\n  const {\n    0: confirmed,\n    1: setConfirmed\n  } = useState();\n  useEffect(() => {\n    if (library) {\n      let mounted = true;\n      library.waitForTransaction(hash).then(receipt => {\n        if (mounted) {\n          if (onComplete) {\n            onComplete();\n          }\n\n          setConfirmed(receipt.status === 1 ? true : false);\n        }\n      });\n      return () => {\n        mounted = false;\n      };\n    }\n  }, [library, hash]);\n  return __jsx(ButtonGroup, {\n    spacing: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, __jsx(Button, _extends({\n    as: \"a\",\n    variantColor: typeof confirmed === 'boolean' ? confirmed ? 'green' : 'red' : 'blue',\n    leftIcon: typeof confirmed === 'boolean' ? confirmed ? 'check-circle' : 'warning' : () => __jsx(Spinner, {\n      size: \"sm\",\n      mr: \"0.5rem\",\n      ml: \"-0.25rem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 34\n      }\n    }),\n    rightIcon: \"external-link\",\n    style: {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    }\n  }, {\n    href: formatEtherscanLink(EtherscanType.Transaction, [chainId, hash]),\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), shortenHex(hash, 2)), __jsx(IconButton, {\n    icon: \"close\",\n    variantColor: typeof confirmed === 'boolean' ? confirmed ? 'green' : 'red' : 'blue',\n    \"aria-label\": \"Close\",\n    style: {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    },\n    borderLeft: \"1px solid white\",\n    onClick: () => {\n      removeTransaction(chainId, hash);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/TransactionToast.tsx"],"names":["useState","useEffect","Button","Spinner","IconButton","ButtonGroup","useWeb3React","useTransactions","shortenHex","EtherscanType","formatEtherscanLink","TransactionToast","hash","onComplete","library","chainId","removeTransaction","confirmed","setConfirmed","mounted","waitForTransaction","then","receipt","status","borderTopRightRadius","borderBottomRightRadius","href","Transaction","target","rel","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { Button, Spinner, IconButton, ButtonGroup } from '@chakra-ui/core'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { useTransactions } from '../context'\nimport { shortenHex, EtherscanType, formatEtherscanLink } from '../utils'\n\nexport function TransactionToast({ hash, onComplete }: { hash: string; onComplete?: () => void }): JSX.Element {\n  const { library, chainId } = useWeb3React()\n\n  const [, { removeTransaction }] = useTransactions()\n\n  const [confirmed, setConfirmed] = useState<boolean>()\n  useEffect(() => {\n    if (library) {\n      let mounted = true\n\n      library.waitForTransaction(hash).then((receipt: { status: number }) => {\n        if (mounted) {\n          if (onComplete) {\n            onComplete()\n          }\n          setConfirmed(receipt.status === 1 ? true : false)\n        }\n      })\n\n      return (): void => {\n        mounted = false\n      }\n    }\n  }, [library, hash])\n\n  return (\n    <ButtonGroup spacing={0}>\n      <Button\n        as=\"a\"\n        variantColor={typeof confirmed === 'boolean' ? (confirmed ? 'green' : 'red') : 'blue'}\n        leftIcon={\n          typeof confirmed === 'boolean'\n            ? confirmed\n              ? 'check-circle'\n              : 'warning'\n            : (): JSX.Element => <Spinner size=\"sm\" mr=\"0.5rem\" ml=\"-0.25rem\" />\n        }\n        rightIcon=\"external-link\"\n        style={{ borderTopRightRadius: 0, borderBottomRightRadius: 0 }}\n        {...{\n          href: formatEtherscanLink(EtherscanType.Transaction, [chainId as number, hash]),\n          target: '_blank',\n          rel: 'noopener noreferrer',\n        }}\n      >\n        {shortenHex(hash, 2)}\n      </Button>\n\n      <IconButton\n        icon=\"close\"\n        variantColor={typeof confirmed === 'boolean' ? (confirmed ? 'green' : 'red') : 'blue'}\n        aria-label=\"Close\"\n        style={{ borderTopLeftRadius: 0, borderBottomLeftRadius: 0 }}\n        borderLeft=\"1px solid white\"\n        onClick={(): void => {\n          removeTransaction(chainId as number, hash)\n        }}\n      />\n    </ButtonGroup>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}