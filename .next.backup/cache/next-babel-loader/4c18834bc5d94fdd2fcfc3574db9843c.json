{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/SwapChain.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Stack, Button } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useContract } from '../hooks';\nimport { contractAddresses } from '../constants';\nimport { TransactionToast } from './TransactionToast';\nexport default function SwapChain() {\n  _s();\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId; // const [vaults, setVaults] = useState([])\n\n\n  var _useState = useState({\n    loaded: false\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(false),\n      loadingApi = _useState2[0],\n      setLoadingApi = _useState2[1];\n\n  var _useState3 = useState(false),\n      approving = _useState3[0],\n      setApproving = _useState3[1];\n\n  var _useState4 = useState(null),\n      balance = _useState4[0],\n      setBalance = _useState4[1];\n\n  var _useState5 = useState(query.address),\n      address = _useState5[0],\n      setAddress = _useState5[1];\n\n  var _useState6 = useState(query.experimental),\n      experimental = _useState6[0],\n      setExperimental = _useState6[1];\n\n  var _useState7 = useState(null),\n      decimals = _useState7[0],\n      setDecimals = _useState7[1];\n\n  var _useState8 = useState(null),\n      allowance = _useState8[0],\n      setAllowance = _useState8[1];\n\n  var _useState9 = useState(0),\n      covalApprovedFor = _useState9[0],\n      setIsCovalApproved = _useState9[1];\n\n  var _useState10 = useState(null),\n      hash = _useState10[0],\n      setHash = _useState10[1];\n\n  var _useState11 = useState(100000000000000),\n      aprovalAmount = _useState11[0],\n      setAprovalAmount = _useState11[1];\n\n  var handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  var covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true);\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = setDecimals;\n              _context.next = 3;\n              return covalContract.decimals();\n\n            case 3:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              _context.t2 = setAllowance;\n              _context.next = 8;\n              return covalContract.allowance(account, contractAddresses.vaultHandler[chainId]).then(function (balance) {\n                return balance.toString();\n              });\n\n            case 8:\n              _context.t3 = _context.sent;\n              (0, _context.t2)(_context.t3);\n              _context.t4 = setBalance;\n              _context.next = 13;\n              return covalContract.balanceOf(account).then(function (balance) {\n                return balance.toString();\n              });\n\n            case 13:\n              _context.t5 = _context.sent;\n              (0, _context.t4)(_context.t5);\n\n              if (Number(allowance) >= Number(0)) {\n                setIsCovalApproved(allowance);\n              }\n\n              setAprovalAmount(balance * Math.pow(10, -decimals) - allowance * Math.pow(10, -decimals));\n              setState({\n                loaded: true\n              });\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getContractStates() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var approveCovalFlow = function approveCovalFlow() {\n    setApproving(true);\n    covalContract.approve(contractAddresses.vaultHandler[chainId], aprovalAmount.toString()).then(function (_ref2) {\n      var hash = _ref2.hash;\n      setHash(hash);\n    })[\"catch\"](function (error) {\n      if ((error === null || error === void 0 ? void 0 : error.code) == 4001) {\n        setApproving(false);\n      }\n    });\n  }; // const getVaults = async () => {\n  //   loadCache()\n  //   try {\n  //     const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental? '?experimental=true' : ''), {\n  //       method: 'GET',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         service: 'evmetadata',\n  //         chainId: chainId.toString(),\n  //       },\n  //     })\n  //     const jsonData = await response.json()\n  //     setState({ loaded: true })\n  //     setVaults(jsonData)\n  //     saveCache(jsonData)\n  //     setLoadingApi(false)\n  //     // console.log(jsonData)\n  //   } catch (error) {}\n  // }\n  // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_vaults')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_vaults', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n\n  var _useState12 = useState(''),\n      acct = _useState12[0],\n      setAcct = _useState12[1];\n\n  useEffect(function () {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getContractStates();\n    }\n  }, [account, acct]);\n\n  var _useState13 = useState(chainId),\n      chain = _useState13[0],\n      setChain = _useState13[1];\n\n  useEffect(function () {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      }); // getVaults()\n    }\n  }, [chainId, chain]);\n  useEffect(function () {\n    account && chainId ? setState({\n      loaded: true\n    }) : null;\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, balance > 0 && allowance > 0 ? __jsx(React.Fragment, null, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"s\",\n    fontStyle: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, \"Transfer up to \", allowance > balance ? balance * Math.pow(10, -decimals) : allowance * Math.pow(10, -decimals), \" Coval from \", chainId == 137 ? \"Matic\" : \"Ethereum\", \" Network to \", chainId == 137 ? \"Etherum\" : \"Matic\", \" Network\")), balance > allowance ? __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    onClick: approveCovalFlow,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 19\n    }\n  }, \"Increase transfer allowance by \", aprovalAmount * Math.pow(10, -decimals), \" Coval\")) : null) : allowance == 0 && !approving ? __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"s\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    onClick: approveCovalFlow,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, \"Approve Transfer of up \", balance * Math.pow(10, -decimals), \" Coval\"))) : balance === 0 ? __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"s\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 15\n    }\n  }, \"You have no Coval to transfer\")) : __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"s\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  })))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      setHash(null);\n\n      if (!approving) {} else {\n        setApproving(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }) : null);\n}\n\n_s(SwapChain, \"f3cNDxktd1wYc0A2+skUzJO3pSs=\", false, function () {\n  return [useRouter, useWeb3React, useContract, useContract];\n});\n\n_c = SwapChain;\n\nvar _c;\n\n$RefreshReg$(_c, \"SwapChain\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/SwapChain.tsx"],"names":["Box","Flex","Text","Stack","Button","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","useContract","contractAddresses","TransactionToast","SwapChain","query","account","chainId","loaded","state","setState","loadingApi","setLoadingApi","approving","setApproving","balance","setBalance","address","setAddress","experimental","setExperimental","decimals","setDecimals","allowance","setAllowance","covalApprovedFor","setIsCovalApproved","hash","setHash","aprovalAmount","setAprovalAmount","handlerContract","vaultHandler","vaultHandlerAbi","covalContract","coval","covalAbi","getContractStates","then","toString","balanceOf","Number","Math","pow","approveCovalFlow","approve","error","code","acct","setAcct","chain","setChain"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { useContract } from '../hooks'\nimport { Contract } from '@ethersproject/contracts'\nimport { EMBLEM_API, contractAddresses } from '../constants'\nimport { TransactionToast } from './TransactionToast'\n\nexport default function SwapChain() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  // const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [balance, setBalance] = useState(null)\n  const [address, setAddress] = useState(query.address)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [decimals, setDecimals] = useState(null)\n  const [allowance, setAllowance] = useState(null)\n  const [covalApprovedFor, setIsCovalApproved] = useState(0)\n  const [hash, setHash] = useState(null)\n  const [aprovalAmount, setAprovalAmount] = useState(100000000000000)\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true)\n\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  const getContractStates = async () => {\n    setDecimals(await covalContract.decimals())\n    setAllowance(\n      await covalContract\n        .allowance(account, contractAddresses.vaultHandler[chainId])\n        .then((balance: { toString: () => string }) => balance.toString())\n    )\n    setBalance(await covalContract.balanceOf(account).then((balance: { toString: () => string }) => balance.toString()))\n    if (Number(allowance) >= Number(0)) {\n      setIsCovalApproved(allowance)\n    }\n    setAprovalAmount((balance * Math.pow(10, -decimals)) - (allowance * Math.pow(10, -decimals)))\n    setState({ loaded: true })\n  }\n\n  const approveCovalFlow = () => {\n    setApproving(true)\n    ;(covalContract as Contract)\n      .approve(contractAddresses.vaultHandler[chainId], aprovalAmount.toString())\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code == 4001) {\n          setApproving(false)\n        }\n      })\n  }\n\n  // const getVaults = async () => {\n  //   loadCache()\n  //   try {\n  //     const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental? '?experimental=true' : ''), {\n  //       method: 'GET',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         service: 'evmetadata',\n  //         chainId: chainId.toString(),\n  //       },\n  //     })\n  //     const jsonData = await response.json()\n  //     setState({ loaded: true })\n  //     setVaults(jsonData)\n  //     saveCache(jsonData)\n  //     setLoadingApi(false)\n  //     // console.log(jsonData)\n  //   } catch (error) {}\n  // }\n\n  // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_vaults')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_vaults', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setState({ loaded: false })\n      getContractStates()\n    }\n  }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      // getVaults()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    account && chainId ? setState({ loaded: true }) : null\n  }, [])\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Stack align=\"center\">\n          {balance > 0 && allowance > 0 ? (\n            <>\n              <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"s\" fontStyle=\"\" >\n                  Transfer up to {allowance > balance ? balance * Math.pow(10, -decimals) : allowance * Math.pow(10, -decimals) } Coval from {chainId == 137 ? \"Matic\" : \"Ethereum\"} Network to {chainId == 137 ? \"Etherum\" : \"Matic\"} Network\n                </Text>              \n              </Box>\n              {balance > allowance ? (                 \n                <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                  <Button onClick={approveCovalFlow} type=\"submit\">\n                    Increase transfer allowance by { aprovalAmount * Math.pow(10, -decimals) } Coval\n                  </Button>\n                </Box>\n              ) : null }\n            </>\n          ) : allowance == 0 && !approving ? (\n            <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n              <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"s\" fontStyle=\"italic\" >\n                <Button onClick={approveCovalFlow} type=\"submit\">\n                  Approve Transfer of up {balance * Math.pow(10, -decimals)} Coval\n                </Button>\n              </Text>\n            </Box>\n          ) : balance === 0 ? (\n            <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n              <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"s\" fontStyle=\"italic\" >\n                You have no Coval to transfer\n              </Text>\n            </Box>\n          ) : (\n            <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n              <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"s\" fontStyle=\"italic\" >\n                {/* Unknown state */}\n              </Text>\n            </Box>\n          )}\n        </Stack>\n      </Flex>\n      {hash ? (\n        <TransactionToast\n          hash={hash}\n          onComplete={() => {\n            setHash(null)            \n              if (!approving) {\n                \n              } else {\n                setApproving(false)\n              }\n          }}\n        />\n      ) : null}\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}