{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useWeb3React } from '@web3-react/core';\nimport { useState } from 'react';\nimport { EMBLEM_API } from '../../constants';\nimport { fromContractValue, CHAIN_ID_NAMES } from '../../utils';\nvar useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  }\n});\nexport default function BridgeDeposits(props) {\n  var previousChainId;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account;\n\n  var _useState = useState(false),\n      showPending = _useState[0],\n      setShowPending = _useState[1];\n\n  var _useState2 = useState(false),\n      hasDataRows = _useState2[0],\n      setHasDataRows = _useState2[1];\n\n  var _useState3 = useState([]),\n      dataRows = _useState3[0],\n      setDataRows = _useState3[1];\n\n  var _useState4 = useState(props.chainId),\n      chainId = _useState4[0],\n      setChainId = _useState4[1];\n\n  var classes = useStyles();\n  React.useEffect(function () {\n    console.log(chainId, props.chainId);\n\n    if (chainId !== props.chainId) {\n      setChainId(props.chainId);\n      console.log(\"refresh data\");\n      setHasDataRows(false);\n    }\n  });\n  !hasDataRows ? getDeposits(function (deposits) {\n    setHasDataRows(true);\n    setDataRows(deposits);\n  }) : null;\n  return __jsx(React.Fragment, null, __jsx(TableContainer, {\n    component: Paper\n  }, __jsx(Table, {\n    className: classes.table,\n    \"aria-label\": \"simple table\"\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"Amount \"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"For\"), __jsx(TableCell, {\n    align: \"left\"\n  }, \"Hash\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"To Chain\"), __jsx(TableCell, {\n    align: \"right\"\n  }, \"Status\"))), __jsx(TableBody, null, dataRows.sort(function (a, b) {\n    return b.blockNumber > a.blockNumber ? 1 : -1;\n  }).map(function (row) {\n    return Number(row.returnValues.amount) < 200000000000000 ? __jsx(TableRow, {\n      className: account == row.returnValues.sender ? \"MyRow\" : \"\",\n      key: row.name\n    }, __jsx(TableCell, {\n      component: \"th\",\n      scope: \"row\"\n    }, Number(fromContractValue(row.returnValues.amount, 'gwei') * 10).toLocaleString()), __jsx(TableCell, {\n      align: \"right\"\n    }, row.returnValues.sender), __jsx(TableCell, {\n      align: \"left\"\n    }, row.transactionHash), __jsx(TableCell, {\n      align: \"right\"\n    }, CHAIN_ID_NAMES[row.returnValues.chainId]), __jsx(TableCell, {\n      align: \"right\"\n    }, row.transferred == 'true' ? \"Complete\" : \"Pending\")) : null;\n  })))));\n\n  function getDeposits(_x) {\n    return _getDeposits.apply(this, arguments);\n  }\n\n  function _getDeposits() {\n    _getDeposits = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(EMBLEM_API + '/web3/transfersOutDb?pending=' + showPending, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'chainid': chainId.toString(),\n                  'service': 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context.sent;\n              _context.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context.sent;\n              return _context.abrupt(\"return\", cb(jsonData));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getDeposits.apply(this, arguments);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}