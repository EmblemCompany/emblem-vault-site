{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { resolve } from 'url';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Text, Stack, Slider, SliderTrack, SliderFilledTrack, SliderThumb, useColorMode, Button, Link, Switch } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR, DEFAULT_DEADLINE, DEFAULT_SLIPPAGE, QueryParameters } from '../constants';\nimport { useBodyKeyDown } from '../hooks';\nimport { useApproveMax, useDeadline, useSlippage, useFirstToken, useSecondToken } from '../context';\nexport default function Settings({\n  isOpen,\n  onClose\n}) {\n  var _process$env$COMMIT_S;\n\n  const {\n    chainId\n  } = useWeb3React();\n  const {\n    colorMode,\n    toggleColorMode\n  } = useColorMode();\n  const {\n    pathname\n  } = useRouter();\n  useBodyKeyDown('d', toggleColorMode);\n  const [approveMax, toggleApproveMax] = useApproveMax();\n  const [deadline, setDeadline] = useDeadline();\n  const [slippage, setSlippage] = useSlippage();\n  const [firstToken] = useFirstToken();\n  const [secondToken] = useSecondToken();\n  let permalink = null;\n\n  if (typeof chainId === 'number' && (firstToken || secondToken) && (pathname === '/buy' || pathname === '/sell')) {\n    const permalinkParameters = _objectSpread({\n      [QueryParameters.CHAIN]: chainId\n    }, pathname === '/buy' ? _objectSpread(_objectSpread({}, firstToken ? {\n      [QueryParameters.OUTPUT]: firstToken.address\n    } : {}), secondToken ? {\n      [QueryParameters.INPUT]: secondToken.address\n    } : {}) : _objectSpread(_objectSpread({}, firstToken ? {\n      [QueryParameters.INPUT]: firstToken.address\n    } : {}), secondToken ? {\n      [QueryParameters.OUTPUT]: secondToken.address\n    } : {}));\n\n    permalink = resolve('https://emblem.finance', `${pathname}?${Object.entries(permalinkParameters).map(([key, value]) => `${key}=${value}`).join('&')}`);\n  }\n\n  const {\n    0: copied,\n    1: setCopied\n  } = useState(false);\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [copied]);\n\n  function copyWithFlag(content) {\n    copy(content);\n    setCopied(true);\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true\n  }, __jsx(ModalOverlay, null), __jsx(ModalContent, {\n    color: COLOR[colorMode]\n  }, __jsx(ModalHeader, null, __jsx(Text, null, \"Settings (Build #2021)\")), __jsx(ModalCloseButton, null), __jsx(ModalBody, null, __jsx(Stack, {\n    direction: \"column\"\n  }, __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\"\n  }, __jsx(Text, null, \"Dark Mode\"), __jsx(Switch, {\n    isChecked: colorMode === 'dark',\n    onChange: toggleColorMode\n  })), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\"\n  }, __jsx(Text, null, \"Approve Max\"), __jsx(Switch, {\n    isChecked: approveMax,\n    onChange: toggleApproveMax\n  })), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\"\n  }, __jsx(Text, null, \"Deadline\"), __jsx(Stack, {\n    direction: \"column\",\n    spacing: 0,\n    alignItems: \"flex-end\",\n    w: \"50%\",\n    flexShrink: 0\n  }, __jsx(Slider, {\n    min: 60,\n    max: 60 * 60,\n    step: 60,\n    value: deadline,\n    onChange: setDeadline\n  }, __jsx(SliderTrack, null), __jsx(SliderFilledTrack, null), __jsx(SliderThumb, null)), __jsx(Stack, {\n    direction: \"row\",\n    minHeight: \"1.5rem\"\n  }, deadline !== DEFAULT_DEADLINE && __jsx(Button, {\n    size: \"xs\",\n    onClick: () => {\n      setDeadline(DEFAULT_DEADLINE);\n    }\n  }, \"Reset\"), __jsx(Text, null, deadline / 60, \" \", deadline === 60 ? 'minute' : 'minutes')))), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\"\n  }, __jsx(Text, null, \"Slippage Tolerance\"), __jsx(Stack, {\n    direction: \"column\",\n    spacing: 0,\n    alignItems: \"flex-end\",\n    w: \"50%\",\n    flexShrink: 0\n  }, __jsx(Slider, {\n    min: 0,\n    max: 100 * 4,\n    step: 10,\n    value: slippage,\n    onChange: setSlippage\n  }, __jsx(SliderTrack, null), __jsx(SliderFilledTrack, null), __jsx(SliderThumb, null)), __jsx(Stack, {\n    direction: \"row\",\n    minHeight: \"1.5rem\"\n  }, slippage !== DEFAULT_SLIPPAGE && __jsx(Button, {\n    size: \"xs\",\n    onClick: () => {\n      setSlippage(DEFAULT_SLIPPAGE);\n    }\n  }, \"Reset\"), __jsx(Text, null, (slippage / 100).toFixed(slippage === 0 ? 0 : 1), \"%\")))))), __jsx(ModalFooter, {\n    justifyContent: \"space-between\"\n  }, typeof permalink === 'string' && __jsx(Button, {\n    variant: \"link\",\n    isDisabled: copied,\n    color: \"blue.500\",\n    width: \"min-content\",\n    onClick: () => {\n      try {\n        // eslint-disable-next-line\n        ;\n        window.navigator.share({\n          title: 'Emblem Vault',\n          url: permalink\n        }).catch(() => {});\n      } catch {\n        copyWithFlag(permalink);\n      }\n    }\n  }, copied ? 'Copied' : 'Share Permalink'), __jsx(Link, {\n    href: 'https://github.com/NoahZinsmeister/hypertext',\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    color: \"blue.500\"\n  }, \"Based on Hypertext.\"), __jsx(Link, {\n    href: `https://github.com/EmblemCompany/emblem-vault-site/tree/${process.env.COMMIT_SHA}`,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    color: \"blue.500\"\n  }, (_process$env$COMMIT_S = process.env.COMMIT_SHA) === null || _process$env$COMMIT_S === void 0 ? void 0 : _process$env$COMMIT_S.slice(0, 7)))));\n}","map":null,"metadata":{},"sourceType":"module"}