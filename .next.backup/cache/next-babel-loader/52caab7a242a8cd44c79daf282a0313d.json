{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Flex, Text, Link, Stack, useColorMode, Button } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Embed from './Embed';\nexport default function MyVaults() {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: pagePosition,\n    1: setPagePosition\n  } = useState(Number(query.start) || 0);\n  const {\n    0: curatedType,\n    1: setCuratedType\n  } = useState('live');\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: liveVaults,\n    1: setLiveVaults\n  } = useState([]);\n  const {\n    0: unMintedVaults,\n    1: setUnMintedVaults\n  } = useState([]);\n  const {\n    0: claimedVaults,\n    1: setClaimedVaults\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: vaultType,\n    1: setVaultType\n  } = useState(query.type || \"curated\");\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    0: shouldFetchData,\n    1: setShouldFetchData\n  } = useState(false);\n  const {\n    0: version,\n    1: setVersion\n  } = useState(query.version != null);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(version ? true : false);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(0);\n  const {\n    0: liveCollections,\n    1: setLiveCollections\n  } = useState([]);\n  const {\n    0: unMintedCollections,\n    1: setUnMintedCollections\n  } = useState([]);\n  const {\n    0: claimedCollections,\n    1: setClaimedCollections\n  } = useState([]);\n  const PAGE_SIZE = 20;\n\n  const getVaults = async () => {\n    try {\n      const response = await fetch('https://metadata.emblemvault.io' + `/${version ? 'v1-' : ''}myvaults/` + (address ? address : account) + '?start=' + offset + '&size=' + PAGE_SIZE, {\n        //+'&_vercel_no_cache=1'\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          '_vercel_no_cache': '1',\n          service: 'evmetadata',\n          chainId: chainId.toString(),\n          vaultType: vaultType.toString()\n        }\n      });\n      let jsonData = await response.json();\n\n      if (vaultType.toString() != 'curated') {\n        setVaults(vaults.concat(jsonData));\n        setState({\n          loaded: true\n        });\n        setLoadingApi(false);\n        console.log(\"Records received\", jsonData.length);\n      } else if (vaultType.toString() == 'curated') {\n        setLiveVaults(groupItemsByTargetTokenId(jsonData.live));\n        setUnMintedVaults(jsonData.unMinted);\n        setClaimedVaults(jsonData.claimed);\n        setVaults(groupItemsByTargetTokenId(jsonData.live));\n        setState({\n          loaded: true\n        });\n        setLoadingApi(false);\n        setHasMore(false);\n        setLiveCollections(Array.from(new Set(jsonData.live.map(item => {\n          return item.targetContract.name;\n        }))));\n        setUnMintedCollections(Array.from(new Set(jsonData.unMinted.map(item => {\n          return item.targetContract.name;\n        }))));\n        setClaimedCollections(Array.from(new Set(jsonData.claimed.map(item => {\n          return item.targetContract.name;\n        }))));\n      } else if (jsonData.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n    } catch (error) {}\n  };\n\n  const fetchData = async () => {\n    console.log(offset, PAGE_SIZE, offset + PAGE_SIZE);\n    setOffset(offset + PAGE_SIZE);\n    setShouldFetchData(true);\n  };\n\n  function groupItemsByTargetTokenId(data) {\n    // const data = JSON.parse(jsonData);\n    const itemsMap = new Map(); // Iterate through the data and group items by targetTokenId\n\n    for (const item of data) {\n      const targetTokenId = item.targetTokenId;\n\n      if (itemsMap.has(targetTokenId)) {\n        itemsMap.get(targetTokenId).push(item);\n      } else {\n        itemsMap.set(targetTokenId, [item]);\n      }\n    } // Convert the itemsMap to an array of objects\n\n\n    const items = Array.from(itemsMap.entries()).map(([targetTokenId, items]) => {\n      return {\n        targetTokenId: targetTokenId,\n        items: items\n      };\n    });\n    return items;\n  } // const more = ()=>{\n  //   if (location.href.includes('start')) {\n  //     location.href = location.href.replace('start='+pagePosition, 'start='+(pagePosition + PAGE_SIZE))\n  //   } else {\n  //     location.href = location.href + '?start='+(pagePosition + PAGE_SIZE)\n  //   }\n  //   // setPagePosition(pagePosition + PAGE_SIZE)\n  //   // getVaults()\n  // }\n  // const less = ()=>{\n  //   if (pagePosition - PAGE_SIZE < 0) {\n  //     setPagePosition(PAGE_SIZE)\n  //   }\n  //   if (location.href.includes('start')) {\n  //     location.href = location.href.replace('start='+pagePosition, 'start='+(pagePosition - PAGE_SIZE))\n  //   } else {\n  //     location.href = location.href + '?start='+(pagePosition - PAGE_SIZE)\n  //   }\n  //   // setPagePosition(pagePosition + 3)\n  //   // getVaults()\n  // }\n  // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_newest')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_newest', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [account, acct]);\n  const {\n    0: chain,\n    1: setChain\n  } = useState(chainId);\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n\n  const showOrHideNavLink = path => {\n    return vaultType == path ? true : false;\n  };\n\n  const handleNewNavigationClick = path => {\n    if (!address) {\n      location.href = location.origin + location.pathname + \"?type=\" + path;\n    } else {\n      location.href = location.origin + location.pathname + \"?address=\" + address + \"&type=\" + path;\n    }\n  };\n\n  const handleNftsNavigationClick = () => {\n    if (!address) {\n      location.href = location.origin + '/nfts';\n    } else {\n      location.href = location.origin + '/nfts' + \"?address=\" + address;\n    }\n  };\n\n  useEffect(() => {\n    if (shouldFetchData) {\n      setShouldFetchData(false);\n      getVaults();\n    } else {}\n  }, [shouldFetchData]);\n  return __jsx(React.Fragment, null, __jsx(Stack, {\n    pl: \"10\",\n    spacing: 0,\n    direction: \"row\"\n  }, __jsx(Button, {\n    isDisabled: showOrHideNavLink('curated'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      handleNewNavigationClick('curated');\n    }\n  }, \"Curated\"), __jsx(Button, {\n    isDisabled: showOrHideNavLink('unclaimed'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      handleNewNavigationClick('unclaimed');\n    }\n  }, \"Locked\"), __jsx(Button, {\n    isDisabled: showOrHideNavLink('claimed'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      handleNewNavigationClick('claimed');\n    }\n  }, \"Unlocked\"), __jsx(Button, {\n    isDisabled: showOrHideNavLink('unminted'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      handleNewNavigationClick('unminted');\n    }\n  }, \"Not Minted\")), showOrHideNavLink('curated') ? __jsx(React.Fragment, null, __jsx(Stack, {\n    pl: \"8.7rem\",\n    spacing: 0,\n    direction: \"row\"\n  }, liveVaults.length ? __jsx(Button, {\n    isDisabled: curatedType == 'live',\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      setVaults(liveVaults);\n      setCuratedType('live');\n    }\n  }, \"Unclaimed (curated) \", liveVaults.length) : null, claimedVaults.length ? __jsx(Button, {\n    isDisabled: curatedType == 'claimed',\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      setVaults(claimedVaults);\n      setCuratedType('claimed');\n    }\n  }, \"Claimed (curated) \", claimedVaults.length) : null, unMintedVaults.length ? __jsx(Button, {\n    isDisabled: curatedType == 'unminted',\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      setVaults(unMintedVaults);\n      setCuratedType('unminted');\n    }\n  }, \"Not Minted (curated) \", unMintedVaults.length) : null), __jsx(Stack, {\n    pl: \"12.7rem\",\n    spacing: 0,\n    direction: \"row\"\n  }, liveCollections.length && curatedType == 'live' ? liveCollections.map((name, index) => {\n    return __jsx(Button, {\n      isDisabled: true,\n      key: index,\n      m: 2,\n      variant: \"ghost\"\n    }, name);\n  }) : null, claimedCollections.length && curatedType == 'claimed' ? claimedCollections.map((name, index) => {\n    return __jsx(Button, {\n      isDisabled: true,\n      key: index,\n      m: 2,\n      variant: \"ghost\"\n    }, name);\n  }) : null, unMintedCollections.length && curatedType == 'unminted' ? unMintedCollections.map((name, index) => {\n    return __jsx(Button, {\n      isDisabled: true,\n      key: index,\n      m: 2,\n      variant: \"ghost\"\n    }, name);\n  }) : null)) : null, __jsx(Loader, {\n    loaded: state.loaded\n  }, loadingApi ? __jsx(Refreshing, null) : '', __jsx(InfiniteScroll, {\n    className: \"infinite-scroll\",\n    scrollableTarget: \"shannon-container\" // height={200}\n    ,\n    dataLength: vaults.length //This is important field to render the next data\n    ,\n    next: !showOrHideNavLink('curated') ? fetchData : () => {},\n    hasMore: hasMore,\n    loader: __jsx(Refreshing, null),\n    endMessage: __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(\"b\", null, \"No more vaults to load.\"))\n  }, __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10\n  }, vaults.length ? vaults.map((vault, index) => {\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n    let isERC721a = vault.items && vault.items[0].targetContract && vault.items[0].targetContract.collectionType == 'ERC721a' ? true : false;\n    let isLiveCurated = curatedType == 'live' && vaultType == 'curated';\n    let url = location.origin + pieces.join('/') + '/nft' + (vaultType == 'curated' || vault.targetContract ? '2' : '') + '?id=' + (isLiveCurated ? isERC721a ? vault.items[0].tokenId : vault.targetTokenId : vault.tokenId) + '&cc=t';\n    const flexSettings = {\n      flex: '1',\n      minW: '200px',\n      maxW: '200px',\n      borderWidth: '1px',\n      // color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    const redirect = function () {\n      setLoadingApi(true);\n      location.href = url;\n    };\n\n    return __jsx(Link, {\n      href: url,\n      className: \"vaultLink\"\n    }, __jsx(Box, _extends({\n      className: \"NFT newest\",\n      key: index\n    }, flexSettings, {\n      onClick: redirect\n    }), __jsx(Text, {\n      fontWeight: \"semibold\",\n      textAlign: \"center\",\n      mt: 2,\n      pl: 2,\n      isTruncated: true\n    }, curatedType == 'live' && vaultType == 'curated' ? vault.items[0].name : vault.name, !vault.private && vault.totalValue > 0 ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n      align: \"center\"\n    }, __jsx(Embed, {\n      className: \"d-block w-100 NFT-newest-image\",\n      url: curatedType == 'live' && vaultType == 'curated' ? vault.items[0].image : vault.image\n    }), curatedType == 'live' && vaultType == 'curated' && vault.items.length > 1 ? __jsx(Text, null, ' you own ' + vault.items.length) : null), __jsx(Stack, {\n      align: \"center\",\n      mt: 3\n    }, curatedType == 'live' && vaultType == 'curated' && vault.items.length > 1 ? ' you own ' + vault.items.length : null)));\n  }) : __jsx(Text, null, \"YOU DON'T SEEM TO HAVE ANY VAULTS.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\"\n  }, \"CREATE ONE HERE!\"))))));\n}","map":null,"metadata":{},"sourceType":"module"}