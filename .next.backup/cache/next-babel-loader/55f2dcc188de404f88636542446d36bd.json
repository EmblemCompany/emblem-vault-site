{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure } from '@chakra-ui/core';\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { validImage } from '../utils';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport Tilt from 'react-tilt';\nimport CryptoJS from 'crypto-js';\nvar AddrModal = dynamic(_c = function _c() {\n  return import('./AddrModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./AddrModal')];\n    },\n    modules: ['./AddrModal']\n  }\n});\n_c2 = AddrModal;\nvar KeysModal = dynamic(_c3 = function _c3() {\n  return import('./KeysModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./KeysModal')];\n    },\n    modules: ['./KeysModal']\n  }\n});\n_c4 = KeysModal;\nexport default function Nft() {\n  _s();\n\n  var _this = this;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(''),\n      mintPassword = _useState[0],\n      setMintPassword = _useState[1];\n\n  var _useState2 = useState(query.id),\n      tokenId = _useState2[0],\n      setTokenId = _useState2[1];\n\n  var _useState3 = useState(query.experimental),\n      experimental = _useState3[0],\n      setExperimental = _useState3[1];\n\n  var _useState4 = useState(''),\n      vaultName = _useState4[0],\n      setVaultName = _useState4[1];\n\n  var _useState5 = useState(''),\n      vaultDesc = _useState5[0],\n      setVaultDesc = _useState5[1];\n\n  var _useState6 = useState(''),\n      vaultImage = _useState6[0],\n      setVaultImage = _useState6[1];\n\n  var _useState7 = useState([]),\n      vaultValues = _useState7[0],\n      setVaultValues = _useState7[1];\n\n  var _useState8 = useState([]),\n      vaultAddresses = _useState8[0],\n      setVaultAddresses = _useState8[1];\n\n  var _useState9 = useState(false),\n      vaultPrivacy = _useState9[0],\n      setVaultPrivacy = _useState9[1];\n\n  var _useState10 = useState(0),\n      vaultTotalValue = _useState10[0],\n      setVaultTotalValue = _useState10[1];\n\n  var _useState11 = useState(null),\n      vaultChainId = _useState11[0],\n      setVaultChainId = _useState11[1];\n\n  var _useState12 = useState(null),\n      hash = _useState12[0],\n      setHash = _useState12[1];\n\n  var _useState13 = useState(''),\n      currCoin = _useState13[0],\n      setCurrCoin = _useState13[1];\n\n  var _useState14 = useState(''),\n      currAddr = _useState14[0],\n      setCurrAddr = _useState14[1];\n\n  var _useState15 = useState({\n    loaded: false\n  }),\n      state = _useState15[0],\n      setState = _useState15[1];\n\n  var _useState16 = useState(false),\n      mine = _useState16[0],\n      setMine = _useState16[1];\n\n  var _useState17 = useState(false),\n      claiming = _useState17[0],\n      setClaiming = _useState17[1];\n\n  var _useState18 = useState('claimed'),\n      status = _useState18[0],\n      setStatus = _useState18[1];\n\n  var _useState19 = useState(null),\n      claimedBy = _useState19[0],\n      setClaimedBy = _useState19[1];\n\n  var _useState20 = useState(''),\n      mnemonic = _useState20[0],\n      setMnemonic = _useState20[1];\n\n  var _useState21 = useState(''),\n      privKeyBTC = _useState21[0],\n      setPrivKeyBTC = _useState21[1];\n\n  var _useState22 = useState(''),\n      privKeyETH = _useState22[0],\n      setPrivKeyETH = _useState22[1];\n\n  var _useState23 = useState(false),\n      loadingApi = _useState23[0],\n      setLoadingApi = _useState23[1];\n\n  var _useState24 = useState(''),\n      decryptedEffect = _useState24[0],\n      setDecryptedEffect = _useState24[1];\n\n  var _useState25 = useState(false),\n      decryptedEffectRunning = _useState25[0],\n      setDecryptedEffectRunning = _useState25[1];\n\n  var _useState26 = useState(''),\n      decryptPassword = _useState26[0],\n      setDecryptPassword = _useState26[1];\n\n  var _useState27 = useState(false),\n      invalidVault = _useState27[0],\n      setInvalidVault = _useState27[1];\n\n  var _useState28 = useState(false),\n      hasCheckedNft = _useState28[0],\n      setHasCheckedNft = _useState28[1];\n\n  var _useState29 = useState(false),\n      accepting = _useState29[0],\n      setAccepting = _useState29[1];\n\n  var _useState30 = useState(false),\n      acceptable = _useState30[0],\n      setAcceptable = _useState30[1];\n\n  var _useState31 = useState(''),\n      transferPassword = _useState31[0],\n      setTransferPassword = _useState31[1];\n\n  var _useState32 = useState(false),\n      showTransferPassword = _useState32[0],\n      setShowTransferPassword = _useState32[1];\n\n  var handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  var _useDisclosure = useDisclosure(),\n      isOpenAddrModal = _useDisclosure.isOpen,\n      onOpenAddrModal = _useDisclosure.onOpen,\n      onCloseAddrModal = _useDisclosure.onClose;\n\n  var _useDisclosure2 = useDisclosure(),\n      isOpenKeysModal = _useDisclosure2.isOpen,\n      onOpenKeysModal = _useDisclosure2.onOpen,\n      onCloseKeysModal = _useDisclosure2.onClose;\n\n  var fireMetaMask = function fireMetaMask() {\n    ;\n    handlerContract.transferWithCode(tokenId, mintPassword).then(function (_ref) {\n      var hash = _ref.hash;\n      setTimeout(function () {\n        setHash(hash);\n        setAccepting(true); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(\"tx failed.\", error);\n      } else {\n        setAccepting(false); // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  var addPreTransfer = function addPreTransfer() {\n    ;\n    handlerContract.addPreTransfer(tokenId, CryptoJS.SHA256(transferPassword)).then(function (_ref2) {\n      var hash = _ref2.hash;\n      setTimeout(function () {\n        setHash(hash);\n        setAccepting(true); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(\"tx failed.\", error);\n      } else {\n        setAccepting(false); // setShowPreVaultMsg(false)\n      }\n    });\n  }; // \n\n\n  var getVault = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              loadCache();\n              _context.next = 3;\n              return fetch(EMBLEM_API + '/meta/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 3:\n              responce = _context.sent;\n              _context.next = 6;\n              return responce.json();\n\n            case 6:\n              jsonData = _context.sent;\n\n              // console.log('vault response was ', jsonData)\n              if (!jsonData.name) {\n                setState({\n                  loaded: true\n                });\n                setInvalidVault(true);\n              } else {\n                setStates(jsonData);\n                saveCache(jsonData);\n                setLoadingApi(false);\n                setInvalidVault(false);\n              }\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getVault() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var setStates = function setStates(jsonData) {\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    setVaultValues(vaultValues.concat(jsonData.values));\n    setVaultDesc(jsonData.description);\n    setVaultAddresses(jsonData.addresses);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : 80001);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    } // console.log('inside getstates. mine is ', mine)\n\n\n    setState({\n      loaded: true\n    });\n    var isPvt = jsonData.addresses.filter(function (item) {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n    setTimeout(function () {\n      !isPvt ? getNftBalance(jsonData.values, jsonData.addresses.filter(function (item) {\n        return item.coin === 'ETH';\n      })[0].address, function (_values) {\n        // console.log(\"Have new values\", _values)\n        setVaultValues(_values);\n      }) : null;\n    }, 5);\n  };\n\n  var loadCache = function loadCache() {\n    var vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  var getEthBalances = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(EMBLEM_API + '/eth/balance/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context2.sent;\n              _context2.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context2.sent;\n              // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n              setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue)); // console.log('get eth balances', jsonData.values)\n\n              return _context2.abrupt(\"return\", cb(jsonData.values));\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getEthBalances(_x, _x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var getBtcBalance = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(values, address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return fetch(EMBLEM_API + '/btc/balance/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context3.sent;\n              _context3.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context3.sent;\n              return _context3.abrupt(\"return\", cb(values.concat(jsonData.values)));\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getBtcBalance(_x3, _x4, _x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var getNftBalance = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(values, address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return fetch(EMBLEM_API + '/eth/nft/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context4.sent;\n              _context4.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context4.sent;\n\n              if (!(jsonData.length > 0)) {\n                _context4.next = 10;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", cb(values.concat(jsonData)));\n\n            case 10:\n              return _context4.abrupt(\"return\", cb(values));\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function getNftBalance(_x6, _x7, _x8) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var saveCache = function saveCache(vault) {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  var getKeys = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature\n              });\n              _context5.next = 7;\n              return fetch(EMBLEM_API + '/verify/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context5.sent;\n              _context5.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context5.sent;\n              return _context5.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function getKeys(_x9, _x10, _x11) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var owned, owner, _acceptable;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              owned = false;\n              _context6.prev = 1;\n              _context6.next = 4;\n              return emblemContract.ownerOf(tokenId);\n\n            case 4:\n              owner = _context6.sent;\n              _context6.next = 7;\n              return handlerContract.getPreTransfer(tokenId);\n\n            case 7:\n              _acceptable = _context6.sent;\n              setAcceptable(_acceptable._from !== \"0x0000000000000000000000000000000000000000\");\n              console.log(\"owned\", owner === account);\n              setMine(owner === account);\n              _context6.next = 15;\n              break;\n\n            case 13:\n              _context6.prev = 13;\n              _context6.t0 = _context6[\"catch\"](1);\n\n            case 15:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[1, 13]]);\n    }));\n\n    return function getContractStates() {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    console.log(\"mine?\", mine);\n    console.log(\"claiming?\", claiming);\n    console.log(\"accepting?\", accepting);\n  });\n\n  var handleSign = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n              library.getSigner(account).signMessage('Claim: ' + tokenId).then(function (signature) {\n                getKeys(signature, tokenId, function (result) {\n                  // console.log('HandleSign response is ' + result)\n                  setMnemonic(result.decrypted.phrase);\n                  setPrivKeyBTC(result.decrypted.keys.filter(function (key) {\n                    return key.coin === 'btc';\n                  })[0].privkey);\n                  setPrivKeyETH(result.decrypted.keys.filter(function (key) {\n                    return key.coin === 'eth';\n                  })[0].privkey);\n                  onOpenKeysModal();\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function handleSign() {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var handleClaim = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(function (_ref11) {\n                var hash = _ref11.hash;\n                setClaiming(true);\n                setTimeout(function () {\n                  setHash(hash);\n                }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n              });\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function handleClaim() {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n\n  var startDecryptEffect = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      var theLetters, ctnt, speed, increment, clen, si, stri, block, fixed, nextFrame;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              nextFrame = function _nextFrame(pos) {\n                for (var i = 0; i < clen - stri; i++) {\n                  //Random number\n                  var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n                  var letter = theLetters.charAt(num);\n                  block = block + letter;\n                }\n\n                if (si == increment - 1) {\n                  stri++;\n                }\n\n                if (si == increment) {\n                  // Add a letter;\n                  // every speed*10 ms\n                  fixed = fixed + ctnt.charAt(stri - 1);\n                  si = 0;\n                } // $(\"#output\").html(fixed + block);\n\n\n                setDecryptedEffect(fixed + block);\n                block = '';\n              };\n\n              if (!decryptedEffectRunning) {\n                _context9.next = 3;\n                break;\n              }\n\n              return _context9.abrupt(\"return\");\n\n            case 3:\n              setDecryptedEffectRunning(true);\n              theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n              ctnt = 'Decrypting'; // Your text goes here\n\n              speed = 5; // ms per frame\n\n              increment = 8; // frames per step. Must be >2\n\n              clen = ctnt.length;\n              si = 0;\n              stri = 0;\n              block = '';\n              fixed = '';\n\n              (function rustle(i) {\n                setTimeout(function () {\n                  if (--i) {\n                    rustle(i);\n                  } else {\n                    setDecryptedEffectRunning(false);\n                  }\n\n                  nextFrame(i);\n                  si = si + 1;\n                }, speed);\n              })(clen * increment + 1);\n\n            case 14:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function startDecryptEffect() {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getVault();\n  }, []);\n  useEffect(function () {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null; // console.log('in the usefeect that clls getcontractstates')\n  });\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n');\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    var ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      getEthBalances(vaultAddresses.filter(function (item) {\n        return item.coin === 'ETH';\n      })[0].address, function (values) {\n        getBtcBalance(values, vaultAddresses.filter(function (item) {\n          return item.coin === 'BTC';\n        })[0].address, function (_values) {\n          // console.log(\"Have fucking values\", values)\n          getNftBalance(_values, vaultAddresses.filter(function (item) {\n            return item.coin === 'ETH';\n          })[0].address, function (__values) {\n            setVaultValues(__values.concat(vaultValues));\n          });\n        });\n      });\n    } catch (err) {}\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(function (item) {\n      var cipherText = item.address.replace('private:', '');\n      item.address = decrypt(cipherText, key);\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }\n  }), __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault ? __jsx(Tilt, {\n    className: \"Tilt\",\n    options: {\n      max: experimental ? 19 : 0,\n      scale: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 11\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 15\n    }\n  }, vaultChainId != chainId ? __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"orange.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 19\n    }\n  }, \"BEWARE: Vault is on a different network than you are.\") : null, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy ? ': ~$' + vaultTotalValue : null), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 17\n    }\n  }, __jsx(Image, {\n    src: validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png',\n    width: \"250px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 19\n    }\n  })), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 19\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 21\n    }\n  }, splitDescription(vaultDesc)))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 19\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 23\n    }\n  }, \"Current Contents:\"), vaultPrivacy ? __jsx(React.Fragment, null, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 27\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: function onChange(e) {\n      return tryDecrypt(e.target.value);\n    },\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 27\n    }\n  })) : vaultValues.length ? vaultValues.map(function (coin) {\n    return __jsx(Text, {\n      key: coin.name,\n      isTruncated: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 29\n      }\n    }, __jsx(Image, {\n      width: 10,\n      src: coin.image,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 31\n      }\n    }), coin.name, \" :\", ' ', coin.balance ? coin.balance : coin.type == 'nft' ? __jsx(Link, {\n      href: coin.external_url,\n      isExternal: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 33\n      }\n    }, \"View NFT\") : null);\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 25\n    }\n  }, \"Nothing in here! Fill 'er up!\"))), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 23\n    }\n  }, vaultAddresses.map(function (addr) {\n    return __jsx(Button, {\n      key: addr.address,\n      onClick: function onClick() {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 29\n      }\n    }, \"Put \", addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin, \" In\");\n  }))) : null, !(status === 'claimed') ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 21\n    }\n  }, __jsx(Button, _extends({\n    width: \"100%\",\n    as: \"a\"\n  }, {\n    href: 'https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + contractAddresses.emblemVault[vaultChainId] + '/' + tokenId,\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 23\n    }\n  }), mine ? 'Sell/Gift/Send' : 'Make an Offer')) : null, mine ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      setTransferPassword(CryptoJS.lib.WordArray.random(128 / 8).toString());\n      setShowTransferPassword(!showTransferPassword ? true : false);\n      addPreTransfer();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 23\n    }\n  }, \" Get Gift Link \")), showTransferPassword ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 46\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 51\n    }\n  }, transferPassword)) : null) : null, !mine && acceptable ? __jsx(React.Fragment, null, __jsx(Button, {\n    mt: 2,\n    width: \"100%\",\n    onClick: function onClick() {\n      fireMetaMask();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 23\n    }\n  }, \"Accept\"), __jsx(Input, {\n    mt: 2,\n    type: \"password\",\n    id: \"mintPassword\",\n    minLength: 3,\n    maxLength: 200,\n    value: mintPassword,\n    onChange: function onChange(e) {\n      return setMintPassword(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 23\n    }\n  })) : null, !(status === 'claimed') && account && vaultChainId === chainId && mine ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      handleClaim();\n    },\n    isDisabled: claiming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 23\n    }\n  }, claiming ? 'Claiming ...' : 'Claim')) : status === 'claimed' && claimedBy === account && vaultChainId === chainId ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 622,\n      columnNumber: 23\n    }\n  }, \"Get Keys\")) : null), __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 17\n    }\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 42\n    }\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 21\n    }\n  }), accepting ? \"Accepting your vault\" : \"Claiming your vault ...\") : null))) : __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      // location.href = location.origin + '/vault?id=' + tokenId\n      if (claiming && !accepting) {\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account);\n        handleSign();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 11\n    }\n  }) : null));\n}\n\n_s(Nft, \"dZk9dSngJQ2FR4zjKKh4Iy8/6NE=\", false, function () {\n  return [useWeb3React, useRouter, useContract, useContract, useDisclosure, useDisclosure];\n});\n\n_c5 = Nft;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"AddrModal$dynamic\");\n$RefreshReg$(_c2, \"AddrModal\");\n$RefreshReg$(_c3, \"KeysModal$dynamic\");\n$RefreshReg$(_c4, \"KeysModal\");\n$RefreshReg$(_c5, \"Nft\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","Link","Alert","AlertIcon","useDisclosure","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","Loader","dynamic","validImage","TransactionToast","EMBLEM_API","BURN_ADDRESS","contractAddresses","useContract","Tilt","CryptoJS","AddrModal","KeysModal","Nft","account","chainId","library","query","mintPassword","setMintPassword","id","tokenId","setTokenId","experimental","setExperimental","vaultName","setVaultName","vaultDesc","setVaultDesc","vaultImage","setVaultImage","vaultValues","setVaultValues","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","loaded","state","setState","mine","setMine","claiming","setClaiming","status","setStatus","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","hasCheckedNft","setHasCheckedNft","accepting","setAccepting","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","handlerContract","vaultHandler","vaultHandlerAbi","emblemContract","emblemVault","emblemAbi","isOpenAddrModal","isOpen","onOpenAddrModal","onOpen","onCloseAddrModal","onClose","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","fireMetaMask","transferWithCode","then","setTimeout","error","code","console","log","addPreTransfer","SHA256","getVault","loadCache","fetch","method","headers","service","responce","json","jsonData","name","setStates","saveCache","image","description","totalValue","concat","values","addresses","network","isPvt","filter","item","address","includes","length","getNftBalance","coin","_values","vault","JSON","parse","localStorage","getItem","getEthBalances","cb","Number","getBtcBalance","setItem","stringify","getKeys","signature","myHeaders","Headers","append","toString","raw","body","redirect","getContractStates","owned","ownerOf","owner","getPreTransfer","_from","handleSign","getSigner","signMessage","result","decrypted","phrase","keys","key","privkey","handleClaim","transferFrom","startDecryptEffect","nextFrame","pos","i","clen","stri","num","Math","floor","theLetters","random","letter","charAt","block","si","increment","fixed","ctnt","speed","rustle","splitDescription","words","desc","split","trim","tryDecrypt","ciphertext","replace","bytes","AES","decrypt","enc","Utf8","decryptAddresses","__values","err","forEach","cipherText","decryptedData","max","scale","e","target","value","map","balance","type","external_url","addr","href","rel","lib","WordArray"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n} from '@chakra-ui/core'\n\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\nimport CryptoJS from 'crypto-js'\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\n\nexport default function Nft() {\n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [mintPassword, setMintPassword] = useState('')\n  const [tokenId, setTokenId] = useState(query.id)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [hasCheckedNft, setHasCheckedNft] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  const fireMetaMask = () => {\n    ;(handlerContract as Contract)\n      .transferWithCode(tokenId, mintPassword)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n          setAccepting(true)\n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const addPreTransfer = () => {\n    ;(handlerContract as Contract)\n      .addPreTransfer(tokenId, CryptoJS.SHA256(transferPassword))\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n          setAccepting(true)\n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  // \n\n  const getVault = async () => {\n    loadCache()\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log('vault response was ', jsonData)\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      setStates(jsonData)\n      saveCache(jsonData)\n      setLoadingApi(false)\n      setInvalidVault(false)\n    }\n  }\n\n  const setStates = (jsonData) => {\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    setVaultValues(vaultValues.concat(jsonData.values))\n    setVaultDesc(jsonData.description)\n    setVaultAddresses(jsonData.addresses)\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : 80001)\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    // console.log('inside getstates. mine is ', mine)\n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)\n    setTimeout(() => {\n      !isPvt ?\n      getNftBalance(\n        jsonData.values,\n        jsonData.addresses.filter((item) => {\n          return item.coin === 'ETH'\n        })[0].address,\n        (_values) => {\n          // console.log(\"Have new values\", _values)\n          setVaultValues(_values)\n        }\n      ) : null\n    }, 5)\n  }\n\n  const loadCache = () => {\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')) // Load vaults from storage before updating from server!\n    if (vault) {\n      setState({ loaded: true })\n      setStates(vault)\n      setLoadingApi(true)\n    }\n  }\n\n  const getEthBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n    return cb(jsonData.values)\n  }\n\n  const getBtcBalance = async (values, address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // setVaultValues(values.concat(jsonData.values))\n    return cb(values.concat(jsonData.values))\n  }\n\n  const getNftBalance = async (values, address, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    if (jsonData.length > 0) {\n      // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n      return cb(values.concat(jsonData))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const saveCache = (vault) => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)) // Save new state for later\n  }\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/verify/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    // console.log('getKeys response is ', jsonData)\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    let owned = false\n    try {\n      let owner  = await emblemContract.ownerOf(tokenId)\n      let acceptable = await handlerContract.getPreTransfer(tokenId)\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n      console.log(\"owned\", owner === account)\n      setMine(owner === account)\n    } catch(err){}\n    \n  }\n\n  useEffect(()=>{\n    console.log(\"mine?\", mine)\n    console.log(\"claiming?\", claiming)\n    console.log(\"accepting?\", accepting)\n  })\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + tokenId)\n      .then((signature) => {\n        getKeys(signature, tokenId, (result) => {\n          // console.log('HandleSign response is ' + result)\n          setMnemonic(result.decrypted.phrase)\n          setPrivKeyBTC(\n            result.decrypted.keys.filter((key) => {\n              return key.coin === 'btc'\n            })[0].privkey\n          )\n          setPrivKeyETH(\n            result.decrypted.keys.filter((key) => {\n              return key.coin === 'eth'\n            })[0].privkey\n          )\n          onOpenKeysModal()\n        })\n      })\n  }\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({ hash }: { hash: string }) => {\n      setClaiming(true)\n      setTimeout(() => {\n        setHash(hash)\n      }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    })\n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random())\n        //Get random letter\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      // $(\"#output\").html(fixed + block);\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null\n    // console.log('in the usefeect that clls getcontractstates')\n  })\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n')\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      getEthBalances(\n        vaultAddresses.filter((item) => {\n          return item.coin === 'ETH'\n        })[0].address,\n        (values) => {\n          getBtcBalance(\n            values,\n            vaultAddresses.filter((item) => {\n              return item.coin === 'BTC'\n            })[0].address,\n            (_values) => {\n              // console.log(\"Have fucking values\", values)\n              getNftBalance(\n                _values,\n                vaultAddresses.filter((item) => {\n                  return item.coin === 'ETH'\n                })[0].address,\n                (__values) => {\n                  setVaultValues(__values.concat(vaultValues))\n                }\n              )\n            }\n          )\n        }\n      )\n    } catch (err) {}\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach((item) => {\n      let cipherText = item.address.replace('private:', '')\n      item.address = decrypt(cipherText, key)\n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n      />\n\n      <Loader loaded={state.loaded}>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault ? (\n          <Tilt className=\"Tilt\" options={{ max: experimental ? 19 : 0, scale: 1 }}>\n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                {vaultChainId != chainId ? (\n                  <Box\n                    mt=\"1\"\n                    fontWeight=\"semibold\"\n                    as=\"h3\"\n                    lineHeight=\"tight\"\n                    p={2}\n                    textAlign=\"center\"\n                    textTransform=\"uppercase\"\n                    alignItems=\"center\"\n                    color=\"orange.500\"\n                  >\n                    BEWARE: Vault is on a different network than you are.\n                  </Box>\n                ) : null}\n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy ? ': ~$' + vaultTotalValue : null}\n                </Box>\n                <Stack align=\"center\">\n                  <Image\n                    src={validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png'}\n                    width=\"250px\"\n                  />\n                </Stack>\n                <Stack align=\"center\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                    <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" >\n                      {splitDescription(vaultDesc)}\n                    </Text>\n                  </Box>\n                </Stack>\n                <Box p=\"6\">\n                  <Box d=\"flex\" alignItems=\"baseline\">\n                    <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                      <Text as=\"h4\" fontWeight=\"semibold\">\n                        Current Contents:\n                      </Text>\n                      {vaultPrivacy ? (\n                        <>\n                          <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                            {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                          </Text>\n                          <Input\n                            type=\"password\"\n                            id=\"vault-password\"\n                            onChange={(e) => tryDecrypt(e.target.value)}\n                            aria-describedby=\"password-helper-text\"\n                          />\n                        </>\n                      ) : vaultValues.length ? (\n                        vaultValues.map((coin) => {\n                          return (                            \n                            <Text key={coin.name} isTruncated>\n                              <Image width={10} src={coin.image}/>\n                              {coin.name} :{' '}\n                              {coin.balance ? (\n                                coin.balance\n                              ) : coin.type == 'nft' ? (\n                                <Link href={coin.external_url} isExternal>\n                                  View NFT\n                                </Link>\n                              ) : null}\n                            </Text>\n                          )\n                        })\n                      ) : (\n                        <Text>Nothing in here! Fill 'er up!</Text>\n                      )}\n                    </Box>\n                  </Box>\n                  {!vaultPrivacy ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <ButtonGroup justifyContent=\"space-between\" spacing={6}>\n                        {vaultAddresses.map((addr) => {\n                          return (\n                            <Button\n                              key={addr.address}\n                              onClick={() => {\n                                setCurrCoin(addr.coin)\n                                setCurrAddr(addr.address)\n                                onOpenAddrModal()\n                              }}\n                            >\n                              Put {addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin} In\n                            </Button>\n                          )\n                        })}\n                      </ButtonGroup>\n                    </Box>\n                  ) : null}\n\n                  {!(status === 'claimed') ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        as=\"a\"\n                        {...{\n                          href:\n                            'https://' +\n                            (vaultChainId == 4 ? 'rinkeby.' : '') +\n                            'opensea.io/assets/' +\n                            contractAddresses.emblemVault[vaultChainId] +\n                            '/' +\n                            tokenId,\n                          target: '_blank',\n                          rel: 'noopener noreferrer',\n                        }}\n                      >\n                        {mine ? 'Sell/Gift/Send' : 'Make an Offer'}\n                      </Button>\n                    </Box>\n                  ) : null}\n                  {mine ? (<>\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={() => {\n                        setTransferPassword(CryptoJS.lib.WordArray.random(128/8).toString())\n                        setShowTransferPassword(!showTransferPassword? true : false)\n                        addPreTransfer()\n                      }\n                        }> Get Gift Link </Button>\n                      {/* {showTransferPassword ? ( <Input ml={2} placeholder=\"Password\" width=\"100%\" onChange={(e)=>setTransferPassword(CryptoJS.lib.WordArray.random(128/8).toString('hex'))} />) : null } */}\n                    </Box>\n                    {showTransferPassword ? (<Box><Text>{transferPassword}</Text></Box>) : null}\n                  </>) : null }\n                  {!mine && acceptable ? (\n                  <>                    \n                      <Button mt={2} width=\"100%\" onClick={()=>{fireMetaMask()}}>Accept</Button>\n                      <Input\n                        mt={2}\n                        type=\"password\"\n                        id=\"mintPassword\"\n                        minLength={3}\n                        maxLength={200}\n                        value={mintPassword}\n                        onChange={(e) => setMintPassword(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                  </>\n                    ) : null}\n\n                  {!(status === 'claimed') && account && vaultChainId === chainId && mine ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        onClick={() => {\n                          handleClaim()\n                        }}\n                        isDisabled={claiming}\n                      >\n                        {claiming ? 'Claiming ...' : 'Claim'}\n                      </Button>\n                    </Box>\n                  ) : status === 'claimed' && claimedBy === account && vaultChainId === chainId ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={handleSign}>\n                        Get Keys\n                      </Button>\n                    </Box>\n                  ) : null}\n                </Box>\n                <Stack direction=\"column\" align=\"center\">\n                  {status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n                {hash ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    { accepting ? \"Accepting your vault\" : \"Claiming your vault ...\"}\n                  </Alert>\n                ) : null}\n              </Box>\n            </Flex>\n          </Tilt>\n        ) : (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        )}\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              // location.href = location.origin + '/vault?id=' + tokenId\n              if (claiming && !accepting) {\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                handleSign()\n              }\n            }}\n          />\n        ) : null}\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}