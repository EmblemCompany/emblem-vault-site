{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { FormControl, FormLabel, FormHelperText, Input, Stack, Box, Flex, Text, Textarea, Button, Link, Select } from '@chakra-ui/core';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport Loader from 'react-loader';\nimport { usePapaParse } from 'react-papaparse';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nexport default function Batch() {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: running,\n    1: setRunning\n  } = useState(false);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(Number(query.offset) || 0);\n  const {\n    0: status,\n    1: setStatus\n  } = useState('configure');\n  const {\n    0: batches,\n    1: setBatches\n  } = useState([]);\n  const {\n    0: demoIndex,\n    1: setDemoIndex\n  } = useState(-1);\n  const {\n    0: action,\n    1: setAction\n  } = useState(query.action || 'list');\n  const {\n    0: batchVaults,\n    1: setBatchVaults\n  } = useState([]);\n  const {\n    0: updateCount,\n    1: setUpdateCount\n  } = useState(0);\n  const {\n    0: batchName,\n    1: setBatchName\n  } = useState(\"\");\n  const {\n    0: imageBaseUrl,\n    1: setImageBaseUrl\n  } = useState(\"\");\n  const {\n    0: inscriptionBaseUrl,\n    1: setInscriptionBaseUrl\n  } = useState(\"\");\n  const {\n    0: addressType,\n    1: setAddressType\n  } = useState(\"\");\n  const {\n    0: titleTemplate,\n    1: setTitleTemplate\n  } = useState(\"\");\n  const {\n    0: descriptionTemplate,\n    1: setDescriptionTemplate\n  } = useState(\"\");\n  const {\n    0: total,\n    1: setTotal\n  } = useState(\"\");\n  const {\n    0: batchData,\n    1: setBatchData\n  } = useState(\"\");\n  const {\n    0: batchDataJson,\n    1: setBatchDataJson\n  } = useState([]);\n  const {\n    0: batchId,\n    1: setBatchId\n  } = useState(query.batch_id || \"\");\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: vaultAddresses,\n    1: setVaultAddresses\n  } = useState([]);\n  const {\n    readString,\n    jsonToCSV\n  } = usePapaParse();\n  useEffect(() => {\n    if (!state.loaded && batchId && !batchName) {\n      getBatch();\n      getVaultsForBatch(batchId.toString(), () => {});\n    } else if (!state.loaded && !batchId && !batchName && action == 'list') {\n      getBatches();\n    } else {\n      setState({\n        loaded: true\n      });\n    }\n  }, []);\n\n  const getBatch = async () => {\n    var requestOptions = {\n      method: 'GET'\n    };\n    fetch(EMBLEM_API + `/batch?batchId=${batchId}`, requestOptions).then(async response => {\n      let record = await response.json();\n      setState({\n        loaded: true\n      });\n      setBatchName(record.batch_name);\n      setImageBaseUrl(record.image_base_url);\n      setInscriptionBaseUrl(record.inscription_base_url);\n      setAddressType(record.address_type);\n      setStatus(record.status);\n      setTitleTemplate(record.title_template);\n      setDescriptionTemplate(record.description_template);\n      let parsedJson = JSON.parse(record.data);\n      setBatchDataJson(parsedJson);\n      let csvData = jsonToCSV(parsedJson);\n      setBatchData(csvData);\n      setTotal((parsedJson.length - 1).toString());\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const getVaultsForBatch = async (batchId, cb) => {\n    // alert(0)\n    var requestOptions = {\n      method: 'GET'\n    };\n    fetch(EMBLEM_API + \"/batchVaults/\" + batchId + \"?_vercel_no_cache=1\", requestOptions).then(async response => {\n      let records = await response.json();\n      setBatchVaults(records);\n      let exported_records = records.map(record => {\n        console.log(exported_records);\n        return {\n          to: record.to,\n          tokenId: record.tokenId,\n          address: record.addresses.filter(addy => {\n            return addy.coin == 'TAP';\n          })[0].address\n        };\n      }); // address: record.addresses.filter(addy=>{return addy.coin == 'LTC'})[0].address, tokenId: record.tokenId, owner: record.to\n      // let addresses = records.map(record=>{ return {tokenId: record.tokenId}})\n\n      let csvData = jsonToCSV(exported_records.reverse());\n      setVaultAddresses(csvData);\n      console.log(csvData);\n      return cb();\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const goUpdateLoop = async overrideOffset => {\n    var requestOptions = {\n      method: 'GET'\n    };\n    fetch(EMBLEM_API + `/updateNextBatchItem/${batchId}?offset=${overrideOffset || offset}&_vercel_no_cache=1`, requestOptions).then(async response => {\n      let record = await response.json();\n      setUpdateCount(record.index); // alert(record.index)\n\n      setOffset(record.index);\n      goUpdateLoop(record.index);\n    }).catch(err => {\n      console.log(err);\n      goUpdateLoop(overrideOffset);\n    });\n  };\n\n  const goCreateLoop = async () => {\n    var requestOptions = {\n      method: 'GET'\n    };\n    fetch(EMBLEM_API + \"/createNextBatchItem?_vercel_no_cache=1\", requestOptions).then(async response => {\n      // let records = await response.json()\n      getVaultsForBatch(batchId.toString(), () => {\n        setTimeout(() => {\n          goCreateLoop();\n        }, 10000);\n      });\n    }).catch(err => {\n      console.log(err);\n      goCreateLoop();\n    });\n  };\n\n  const getBatches = async () => {\n    var requestOptions = {\n      method: 'GET'\n    };\n    fetch(EMBLEM_API + `/batches`, requestOptions).then(async response => {\n      let records = await response.json();\n      console.log(records);\n      setBatches(records);\n      setState({\n        loaded: true\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const doRefresh = async (needle, haystack, offset) => {\n    var requestOptions = {\n      method: 'GET'\n    };\n    fetch(EMBLEM_API + `/bulkRefresh?needle=${needle}&haystack=${haystack}&start=${offset}`, requestOptions).then(async response => {\n      let record = await response.json();\n      doRefresh(needle, haystack, record.index + 1);\n      setUpdateCount(record.index);\n      setState({\n        loaded: true\n      });\n    }).catch(err => {\n      console.log(err);\n      doRefresh(needle, haystack, offset);\n    });\n  };\n\n  const startBatch = async () => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    var raw = JSON.stringify({\n      \"batchId\": batchId\n    });\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw\n    };\n    fetch(EMBLEM_API + \"/startBatch\", requestOptions).then(async response => {\n      let results = await response.json();\n      location.href = \"/batch?action=view&batch_id=\" + batchId;\n    });\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    let jsonData = await csvToJson(batchData);\n    const serializedForm = {\n      batchName,\n      imageBaseUrl,\n      inscriptionBaseUrl,\n      addressType,\n      titleTemplate,\n      descriptionTemplate,\n      total,\n      batchId,\n      batchData: jsonData.data\n    };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm)\n    }).then(async response => {\n      let data = await response.json();\n\n      if (data.id) {\n        setBatchId(data.id);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  function csvToJson(data) {\n    return new Promise((resolve, reject) => {\n      readString(data, {\n        worker: true,\n        complete: results => {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  function parseTemplate(index, template) {\n    let tokens = listTokens(template);\n    let modifiedTitle = template;\n    tokens.forEach(item => {\n      let value = item == 'batch_name' ? batchName : item == 'asset_number' ? batchDataJson[index][0] : item == 'inscription_number' ? batchDataJson[index][1] : item == 'inscription_base_url' ? inscriptionBaseUrl : item == 'inscription_hash' ? batchDataJson[index][2] : '';\n      modifiedTitle = modifiedTitle.replace(item, value);\n    });\n    modifiedTitle = modifiedTitle.replaceAll('{', '').replaceAll('}', '');\n    return modifiedTitle;\n  }\n\n  function parseImage(index) {\n    return imageBaseUrl + batchDataJson[index][2];\n  }\n\n  function parseTo(index) {\n    return batchDataJson[index][3];\n  }\n\n  function listTokens(str) {\n    let regex = /\\{(.*?)\\}/g;\n    let result;\n    let items = [];\n\n    while (result = regex.exec(str)) {\n      items = items.concat(result[1].split(','));\n    }\n\n    return items;\n  }\n\n  function isValidBatchData(statusCheck) {\n    if (!batchDataJson) return false;\n    let hasRows = batchDataJson.length > 1;\n    if (!hasRows) return false; // alert(JSON.stringify(batchDataJson))\n\n    let correctColumns = batchDataJson[0].length == 4;\n    let correctHeaders = batchDataJson[0][0] == 'asset_number' && batchDataJson[0][1] == 'inscription_number' && batchDataJson[0][2] == 'inscription_hash' && batchDataJson[0][3] == 'to';\n    let batchNotStarted = status == statusCheck || 'configure';\n    return hasRows && correctColumns && correctHeaders && batchNotStarted;\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }\n  }, action && (action == 'edit' || action == 'add') ? __jsx(React.Fragment, null, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 15\n    }\n  }, __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 17\n    }\n  }, \" All Batch Jobs\"), batchId ? __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=view&batch_id=\" + batchId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 19\n    }\n  }, \" View Job\") : null), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 17\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 19\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"batch-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 23\n    }\n  }, \"Batch Name\"), __jsx(Input, {\n    type: \"text\",\n    id: \"batch-name\",\n    \"aria-describedby\": \"batch-name-text\",\n    value: batchName,\n    onChange: e => setBatchName(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"batch-name-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 23\n    }\n  }, \"Give it a unique name for this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"image-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 23\n    }\n  }, \"Image Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"image-base-url\",\n    \"aria-describedby\": \"image-base-url-text\",\n    value: imageBaseUrl,\n    onChange: e => setImageBaseUrl(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"image-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 23\n    }\n  }, \"Enter the base url for the images in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"inscription-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 23\n    }\n  }, \"Inscription Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"inscription-base-url\",\n    \"aria-describedby\": \"inscription-base-url-text\",\n    value: inscriptionBaseUrl,\n    onChange: e => setInscriptionBaseUrl(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"inscription-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 23\n    }\n  }, \"Enter the base url for the inscriptions in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"address-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 23\n    }\n  }, \"Address Type\"), __jsx(Input, {\n    type: \"text\",\n    id: \"address-type\",\n    \"aria-describedby\": \"address-type-text\",\n    value: addressType,\n    onChange: e => setAddressType(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"address-type-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 23\n    }\n  }, \"Enter the address type for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"title-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 23\n    }\n  }, \"Title Template\"), __jsx(Textarea, {\n    id: \"title-template\",\n    fontSize: 'x-small',\n    size: \"lg\",\n    \"aria-describedby\": \"title-template-text\",\n    minLength: 3,\n    maxLength: 4024,\n    value: titleTemplate,\n    onChange: e => setTitleTemplate(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"title-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 23\n    }\n  }, \"Enter the title template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 23\n    }\n  }, \"Description Template\"), __jsx(Textarea, {\n    id: \"description-template\",\n    fontSize: 'x-small',\n    size: \"lg\",\n    \"aria-describedby\": \"description-template-text\",\n    minLength: 3,\n    maxLength: 1024,\n    value: descriptionTemplate,\n    onChange: e => setDescriptionTemplate(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"description-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 23\n    }\n  }, \"Enter the description template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 23\n    }\n  }, \"Total\"), __jsx(Input, {\n    isDisabled: true,\n    type: \"number\",\n    id: \"total\",\n    \"aria-describedby\": \"total-text\",\n    value: total,\n    onChange: e => setTotal(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"total-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 23\n    }\n  }, \"Enter the total number of items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 23\n    }\n  }, \"Records\"), __jsx(Textarea, {\n    id: \"records\",\n    size: \"lg\",\n    fontSize: 'xx-small',\n    \"aria-describedby\": \"records-text\",\n    minLength: 3,\n    value: batchData,\n    onChange: async e => {\n      setBatchData(e.target.value);\n      let jsonData = await csvToJson(e.target.value);\n      setBatchDataJson(jsonData.data);\n      setTotal(jsonData.data.length > 1 ? (jsonData.data.length - 1).toString() : '0');\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"records-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 23\n    }\n  }, \"Enter the CSV rows from the helper spreadsheet\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"15px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 19\n    }\n  }, __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    isDisabled: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 21\n    }\n  }, \"Save Batch Job\"), __jsx(Button, {\n    mt: 4,\n    isDisabled: !isValidBatchData('configure') || !isValidBatchData('running'),\n    onClick: startBatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 21\n    }\n  }, \"Start Batch Job\")), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"15px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 19\n    }\n  }, !isValidBatchData('running') && isValidBatchData('configure') ? __jsx(Select, {\n    id: \"type-selector\",\n    w: \"100%\",\n    value: demoIndex,\n    onChange: e => {\n      setDemoIndex(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 23\n    }\n  }, __jsx(\"option\", {\n    value: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 25\n    }\n  }, \"Select # to preview\"), batchDataJson.map((item, index) => {\n    console.log(item);\n\n    if (index > 0) {\n      return __jsx(\"option\", {\n        value: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 31\n        }\n      }, parseTemplate(index, titleTemplate));\n    }\n  })) : null), __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 19\n    }\n  }, demoIndex && demoIndex > -1 ? __jsx(React.Fragment, null, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 25\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: parseTemplate(demoIndex, descriptionTemplate),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 27\n    }\n  })), __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: parseImage(demoIndex),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 25\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 25\n    }\n  }, \"Vault For: \", parseTo(demoIndex))) : null))))) : action == 'list' ? __jsx(Box, {\n    maxW: \"lg\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 11\n    }\n  }, batches.length > 0 ? batches.map((item, index) => {\n    return __jsx(Stack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 17\n      }\n    }, __jsx(Link, {\n      margin: \"10px\",\n      href: \"/batch?action=edit&batch_id=\" + item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 19\n      }\n    }, \" \", item.batch_name, \" (\", item.status, \")\"));\n  }) : null, __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 11\n    }\n  }, \" Add New Batch\")) : action == 'view' ? __jsx(Box, {\n    maxW: \"lg\",\n    margin: \"10px\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 13\n    }\n  }, __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 17\n    }\n  }, \" All Batch Jobs\"), batchId ? __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=edit&batch_id=\" + batchId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 19\n    }\n  }, \" Edit Job\") : null, __jsx(Text, {\n    padding: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 17\n    }\n  }, batchVaults.length, \" of \", total, \" vaults created\"), __jsx(Text, {\n    padding: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 17\n    }\n  }, updateCount, \" of \", total, \" vaults updated\"), __jsx(Link, {\n    padding: \"10px\",\n    isDisabled: running,\n    onClick: () => {\n      goCreateLoop();\n      setRunning(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 17\n    }\n  }, \"Start Mint Loop - \"), __jsx(Link, {\n    padding: \"10px\",\n    isDisabled: running,\n    onClick: () => {\n      goUpdateLoop(offset);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 17\n    }\n  }, \"Start Update Loop\"), __jsx(Link, {\n    padding: \"10px\",\n    isDisabled: running,\n    onClick: () => {\n      doRefresh(batchName, 'name', offset);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 17\n    }\n  }, \"Start Refresh Loop\"), __jsx(Link, {\n    padding: \"10px\",\n    href: `${location.href.replace(`offset=${offset}`, `offset=${offset + 600}`)}`,\n    isDisabled: running,\n    onClick: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 17\n    }\n  }, \"spawn offset\")), __jsx(Textarea, {\n    id: \"addresses\",\n    size: \"lg\",\n    fontSize: 'xx-small',\n    \"aria-describedby\": \"addresses-text\",\n    minLength: 3,\n    value: JSON.stringify(vaultAddresses),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 17\n    }\n  }), __jsx(Link, {\n    padding: \"10px\",\n    isDisabled: running,\n    onClick: () => {\n      goCreateLoop();\n      setRunning(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 17\n    }\n  }, \"Start Mint Loop\")) : null));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx"],"names":["FormControl","FormLabel","FormHelperText","Input","Stack","Box","Flex","Text","Textarea","Button","Link","Select","useRouter","useEffect","useState","EMBLEM_API","Loader","usePapaParse","ReactMarkdown","gfm","Embed","Batch","query","running","setRunning","offset","setOffset","Number","status","setStatus","batches","setBatches","demoIndex","setDemoIndex","action","setAction","batchVaults","setBatchVaults","updateCount","setUpdateCount","batchName","setBatchName","imageBaseUrl","setImageBaseUrl","inscriptionBaseUrl","setInscriptionBaseUrl","addressType","setAddressType","titleTemplate","setTitleTemplate","descriptionTemplate","setDescriptionTemplate","total","setTotal","batchData","setBatchData","batchDataJson","setBatchDataJson","batchId","setBatchId","batch_id","state","setState","loaded","vaultAddresses","setVaultAddresses","readString","jsonToCSV","getBatch","getVaultsForBatch","toString","getBatches","requestOptions","method","fetch","then","response","record","json","batch_name","image_base_url","inscription_base_url","address_type","title_template","description_template","parsedJson","JSON","parse","data","csvData","length","catch","err","console","log","cb","records","exported_records","map","to","tokenId","address","addresses","filter","addy","coin","reverse","goUpdateLoop","overrideOffset","index","goCreateLoop","setTimeout","doRefresh","needle","haystack","startBatch","myHeaders","Headers","append","raw","stringify","headers","body","results","location","href","handleSubmit","event","preventDefault","jsonData","csvToJson","serializedForm","id","Promise","resolve","reject","worker","complete","parseTemplate","template","tokens","listTokens","modifiedTitle","forEach","item","value","replace","replaceAll","parseImage","parseTo","str","regex","result","items","exec","concat","split","isValidBatchData","statusCheck","hasRows","correctColumns","correctHeaders","batchNotStarted","e","target"],"mappings":"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","sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Stack,\n  Box,\n  Flex,\n  Text,\n  Textarea,\n  Button,\n  Link,\n  Select\n} from '@chakra-ui/core'\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport Loader from 'react-loader'\nimport { usePapaParse } from 'react-papaparse';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm'\nimport Embed from './Embed';\n\nexport default function Batch() {\n  const { query } = useRouter()\n  const [running, setRunning] = useState(false)\n  const [offset, setOffset] = useState(Number(query.offset) || 0)\n  const [status, setStatus] = useState('configure')\n  const [batches, setBatches] = useState([])\n  const [demoIndex, setDemoIndex] = useState(-1)\n  const [action, setAction] = useState(query.action || 'list')\n  const [batchVaults, setBatchVaults] = useState([])\n  const [updateCount, setUpdateCount] = useState(0)\n  const [batchName, setBatchName] = useState(\"\");\n  const [imageBaseUrl, setImageBaseUrl] = useState(\"\");\n  const [inscriptionBaseUrl, setInscriptionBaseUrl] = useState(\"\");\n  const [addressType, setAddressType] = useState(\"\");\n  const [titleTemplate, setTitleTemplate] = useState(\"\");\n  const [descriptionTemplate, setDescriptionTemplate] = useState(\"\");\n  const [total, setTotal] = useState(\"\");\n  const [batchData, setBatchData] = useState(\"\");\n  const [batchDataJson, setBatchDataJson] = useState([]);\n  const [batchId, setBatchId] = useState(query.batch_id || \"\")\n  const [state, setState] = useState({ loaded: false })\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const { readString, jsonToCSV } = usePapaParse();\n\n\n  useEffect(() => {\n    if (!state.loaded && batchId && !batchName) {\n      getBatch()\n      getVaultsForBatch(batchId.toString(), ()=>{})\n    } else if (!state.loaded && !batchId && !batchName && action == 'list') {\n      getBatches()\n    }  else {\n      setState({ loaded: true })\n    }\n  }, [])\n\n  const getBatch = async () => {\n    var requestOptions: any = {\n      method: 'GET'\n    };\n\n    fetch(EMBLEM_API + `/batch?batchId=${batchId}`, requestOptions).then(async (response) => {\n      let record = await response.json()\n      setState({ loaded: true })\n      setBatchName(record.batch_name)\n      setImageBaseUrl(record.image_base_url)\n      setInscriptionBaseUrl(record.inscription_base_url)\n      setAddressType(record.address_type)\n      setStatus(record.status)\n      setTitleTemplate(record.title_template)\n      setDescriptionTemplate(record.description_template)\n      let parsedJson = JSON.parse(record.data)\n      setBatchDataJson(parsedJson)\n      let csvData = jsonToCSV(parsedJson)\n      setBatchData(csvData)\n      setTotal((parsedJson.length - 1).toString())\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const getVaultsForBatch = async (batchId: string, cb: () => any)=>{\n    // alert(0)\n    var requestOptions = {\n      method: 'GET'\n    };\n    \n    fetch(EMBLEM_API + \"/batchVaults/\"+batchId+\"?_vercel_no_cache=1\", requestOptions)\n    .then(async (response) => {\n      let records = await response.json()\n      setBatchVaults(records)\n      let exported_records = records.map(record=>{ \n        console.log(exported_records)\n        return { to: record.to, tokenId: record.tokenId, address: record.addresses.filter(addy=>{return addy.coin == 'TAP'})[0].address }})// address: record.addresses.filter(addy=>{return addy.coin == 'LTC'})[0].address, tokenId: record.tokenId, owner: record.to\n      // let addresses = records.map(record=>{ return {tokenId: record.tokenId}})\n      \n      let csvData: any = jsonToCSV(exported_records.reverse())\n      setVaultAddresses(csvData)\n      console.log(csvData)\n      return cb()\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const goUpdateLoop = async(overrideOffset: number)=>{\n    var requestOptions = {\n      method: 'GET'\n    };\n    \n    fetch(EMBLEM_API + `/updateNextBatchItem/${batchId}?offset=${overrideOffset || offset}&_vercel_no_cache=1`, requestOptions)\n    .then(async (response) => {\n      let record = await response.json()\n      setUpdateCount(record.index)\n      // alert(record.index)\n      setOffset(record.index)\n      goUpdateLoop(record.index)\n    }).catch(err => {\n      console.log(err)\n      goUpdateLoop(overrideOffset)\n    })\n  }\n\n\n  const goCreateLoop = async ()=>{\n    var requestOptions = {\n      method: 'GET'\n    };\n    \n    fetch(EMBLEM_API + \"/createNextBatchItem?_vercel_no_cache=1\", requestOptions)\n    .then(async (response) => {\n      // let records = await response.json()\n      getVaultsForBatch(batchId.toString(), ()=>{\n        setTimeout(()=>{goCreateLoop()}, 10000)\n      })\n    }).catch(err => {\n      console.log(err)\n      goCreateLoop()\n    })\n  }\n\n  const getBatches = async () => {\n    var requestOptions: any = {\n      method: 'GET'\n    };\n\n    fetch(EMBLEM_API + `/batches`, requestOptions).then(async (response) => {\n      let records = await response.json()\n      console.log(records)\n      setBatches(records)\n      setState({ loaded: true })\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const doRefresh = async (needle: string, haystack: string, offset: number) => {\n    var requestOptions: any = {\n      method: 'GET'\n    };\n\n    fetch(EMBLEM_API + `/bulkRefresh?needle=${needle}&haystack=${haystack}&start=${offset}`, requestOptions).then(async (response) => {\n      let record= await response.json()\n      doRefresh(needle, haystack, record.index + 1)\n      setUpdateCount(record.index)\n      setState({ loaded: true })\n    }).catch(err => {\n      console.log(err)\n      doRefresh(needle, haystack, offset)\n    })\n  }\n\n  \n\n\n  const startBatch = async () =>{\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    var raw = JSON.stringify({\n      \"batchId\": batchId\n    });\n\n    var requestOptions: any = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n    };\n\n    fetch(EMBLEM_API + \"/startBatch\", requestOptions).then(async (response) => {\n      let results = await response.json()\n      location.href=\"/batch?action=view&batch_id=\"+batchId\n    })\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    let jsonData: any = await csvToJson(batchData)\n    const serializedForm = {\n      batchName,\n      imageBaseUrl,\n      inscriptionBaseUrl,\n      addressType,\n      titleTemplate,\n      descriptionTemplate,\n      total,\n      batchId,\n      batchData: jsonData.data\n\n    };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm),\n    }).then(async (response) => {\n      let data = await response.json()\n      if (data.id) {\n        setBatchId(data.id)\n      }\n    }).catch(err => {\n      console.log(err)\n    })\n  };\n\n  function csvToJson(data) {\n    return new Promise((resolve, reject) => {\n      readString(data, {\n        worker: true,\n        complete: (results: any) => {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  function parseTemplate(index, template){\n    let tokens = listTokens(template)\n    let modifiedTitle = template\n    tokens.forEach((item)=>{\n      let value = \n      item == 'batch_name'? batchName:\n      item == 'asset_number'? batchDataJson[index][0]:\n      item == 'inscription_number'? batchDataJson[index][1]:\n      item == 'inscription_base_url'? inscriptionBaseUrl:\n      item == 'inscription_hash'? batchDataJson[index][2]:\n      ''\n      modifiedTitle = modifiedTitle.replace(item, value)\n    })\n    modifiedTitle = modifiedTitle.replaceAll('{', '').replaceAll('}', '')\n    return modifiedTitle\n  }\n\n  function parseImage(index) {\n    return imageBaseUrl + batchDataJson[index][2]\n  }\n\n  function parseTo(index) {\n    return batchDataJson[index][3]\n  }\n\n  function listTokens(str) {\n    let regex = /\\{(.*?)\\}/g;\n    let result;\n    let items = [];\n    \n    while (result = regex.exec(str)) {\n      items = items.concat(result[1].split(','))\n    }\n  \n    return items;\n  }\n\n  function isValidBatchData(statusCheck) {\n    if (!batchDataJson) return false\n    let hasRows = batchDataJson.length > 1\n    if (!hasRows) return false\n    // alert(JSON.stringify(batchDataJson))\n    let correctColumns = batchDataJson[0].length == 4\n    let correctHeaders = batchDataJson[0][0] == 'asset_number' && batchDataJson[0][1] == 'inscription_number' && batchDataJson[0][2] == 'inscription_hash' && batchDataJson[0][3] == 'to'\n    let batchNotStarted = status == statusCheck || 'configure'\n    return hasRows && correctColumns && correctHeaders && batchNotStarted\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n        {action && (action == 'edit' || action == 'add') ? (\n          <>\n            <Stack>\n              <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n              <Stack>\n                <Link margin=\"10px\" href={\"/batch?action=list\"}> All Batch Jobs</Link>\n                {batchId? (\n                  <Link margin=\"10px\" href={\"/batch?action=view&batch_id=\"+batchId}> View Job</Link>\n                ): null}\n              </Stack>\n                <form onSubmit={handleSubmit}>\n                  <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"batch-name\">Batch Name</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"batch-name\"\n                        aria-describedby=\"batch-name-text\"\n                        value={batchName}\n                        onChange={(e) => setBatchName(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"batch-name-text\">Give it a unique name for this batch.</FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"image-base-url\">Image Base Url</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"image-base-url\"\n                        aria-describedby=\"image-base-url-text\"\n                        value={imageBaseUrl}\n                        onChange={(e) => setImageBaseUrl(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"image-base-url-text\">\n                        Enter the base url for the images in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"inscription-base-url\">Inscription Base Url</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"inscription-base-url\"\n                        aria-describedby=\"inscription-base-url-text\"\n                        value={inscriptionBaseUrl}\n                        onChange={(e) => setInscriptionBaseUrl(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"inscription-base-url-text\">\n                        Enter the base url for the inscriptions in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"address-type\">Address Type</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"address-type\"\n                        aria-describedby=\"address-type-text\"\n                        value={addressType}\n                        onChange={(e) => setAddressType(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"address-type-text\">\n                        Enter the address type for the items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"title-template\">Title Template</FormLabel>\n                      <Textarea\n                        id=\"title-template\"\n                        fontSize={'x-small'}\n                        size=\"lg\"\n                        aria-describedby=\"title-template-text\"\n                        minLength={3}\n                        maxLength={4024}\n                        value={titleTemplate}\n                        onChange={(e) => setTitleTemplate(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"title-template-text\">\n                        Enter the title template for the items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"description-template\">Description Template</FormLabel>\n                      <Textarea\n                        id=\"description-template\"\n                        fontSize={'x-small'}\n                        size=\"lg\"\n                        aria-describedby=\"description-template-text\"\n                        minLength={3}\n                        maxLength={1024}\n                        value={descriptionTemplate}\n                        onChange={(e) => setDescriptionTemplate(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"description-template-text\">\n                        Enter the description template for the items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"total\">Total</FormLabel>\n                      <Input\n                        isDisabled={true}\n                        type=\"number\"\n                        id=\"total\"\n                        aria-describedby=\"total-text\"\n                        value={total}\n                        onChange={(e) => setTotal(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"total-text\">\n                        Enter the total number of items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"description-template\">Records</FormLabel>\n                      <Textarea\n                        id=\"records\"\n                        size=\"lg\"\n                        fontSize={'xx-small'}\n                        aria-describedby=\"records-text\"\n                        minLength={3}\n                        value={batchData}\n                        onChange={async (e) => {\n                          setBatchData(e.target.value)\n                          let jsonData: any = await csvToJson(e.target.value)\n                          setBatchDataJson(jsonData.data)\n                          setTotal(jsonData.data.length > 1 ? (jsonData.data.length - 1).toString() : '0')\n                        }}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"records-text\">\n                        Enter the CSV rows from the helper spreadsheet\n                      </FormHelperText>\n                    </FormControl>\n                  </Stack>\n                  <Stack direction=\"row\" align=\"flex-start\" padding=\"15px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <Button mt={4} type=\"submit\" isDisabled={false} >\n                      Save Batch Job\n                    </Button>\n                    <Button mt={4} isDisabled={!isValidBatchData('configure') || !isValidBatchData('running')} onClick={startBatch}>\n                      Start Batch Job\n                    </Button>\n                  </Stack>\n                  <Stack direction=\"row\" align=\"flex-start\" padding=\"15px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    {!isValidBatchData('running') && isValidBatchData('configure')? (\n                      <Select id=\"type-selector\" w=\"100%\" value={demoIndex}\n                      onChange={(e)=>{\n                        setDemoIndex(Number(e.target.value))\n                      }}\n                      >\n                        <option value=\"-1\" >Select # to preview</option>\n                        {batchDataJson.map((item, index)=>{\n                          console.log(item)\n                          if (index > 0) {\n                            return (\n                              <option value={index}>{parseTemplate(index, titleTemplate)}</option> \n                            )\n                          }\n                        })}\n                      </Select>\n                    ): null}                  \n                  </Stack>\n                  <Stack>\n                    {demoIndex && demoIndex > -1 ? (\n                      <>\n                        <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" className=\"md\">\n                          <ReactMarkdown plugins={[gfm]} children={parseTemplate(demoIndex, descriptionTemplate)} />\n                        </Text>\n                        <Embed className=\"d-block w-100 NFT-image\" url={parseImage(demoIndex)}/>\n                        <Text>Vault For: {parseTo(demoIndex)}</Text>\n                      </>\n                    ) : null}\n                  </Stack>\n                </form>\n              </Box>\n            </Stack>\n          </>\n        ) : action == 'list'? (\n          <Box maxW=\"lg\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n            {batches.length> 0 ? batches.map((item, index)=>{\n              return (\n                <Stack>\n                  <Link margin=\"10px\" href={\"/batch?action=edit&batch_id=\"+item.id}> {item.batch_name} ({item.status})</Link>\n                </Stack>\n              )\n            }):null}\n          <Link margin=\"10px\" href={\"/batch?action=add\"}> Add New Batch</Link>\n          </Box>\n        ): action == 'view'? (\n          <Box maxW=\"lg\"  margin=\"10px\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n            <Stack>\n                <Link margin=\"10px\" href={\"/batch?action=list\"}> All Batch Jobs</Link>\n                {batchId? (\n                  <Link margin=\"10px\" href={\"/batch?action=edit&batch_id=\"+batchId}> Edit Job</Link>\n                ): null}\n                <Text padding=\"10px\">{batchVaults.length} of {total} vaults created</Text>\n                <Text padding=\"10px\">{updateCount} of {total} vaults updated</Text>\n                <Link padding=\"10px\" isDisabled={running} onClick={()=>{goCreateLoop();setRunning(true)}}>Start Mint Loop - </Link>\n                <Link padding=\"10px\" isDisabled={running} onClick={()=>{goUpdateLoop(offset)}}>Start Update Loop</Link>\n                <Link padding=\"10px\" isDisabled={running} onClick={()=>{doRefresh(batchName, 'name', offset)}}>Start Refresh Loop</Link>\n                <Link padding=\"10px\" href={`${location.href.replace(`offset=${offset}`, `offset=${offset+600}`)}`} isDisabled={running} onClick={()=>{}}>spawn offset</Link>\n              </Stack>\n            \n              {/* {batchDataJson.map((item, index)=>{\n                  // if (index > 0) {\n                    \n                    if (batchVaults[index]) {\n                      let address = batchVaults[index].addresses.filter(addy=>{return addy.coin == addressType})[0].address\n                      // vaultAddresses.push(address)\n                      return (\n                        <Stack padding={\"10px\"}>\n                          <Link href={'/nft?id='+batchVaults[index].tokenId}>{batchVaults[index].name}</Link>\n                          <Text>{batchVaults[index].tokenId}</Text>\n                          <Text fontSize={'xx-small'}>{address}</Text>\n                        </Stack>\n                      )\n                    }\n                  // }\n                })} */}\n                <Textarea\n                        id=\"addresses\"\n                        size=\"lg\"\n                        fontSize={'xx-small'}\n                        aria-describedby=\"addresses-text\"\n                        minLength={3}\n                        value={JSON.stringify(vaultAddresses)}\n                        autoComplete=\"off\"\n                      />\n                <Link padding=\"10px\" isDisabled={running} onClick={()=>{goCreateLoop();setRunning(true)}}>Start Mint Loop</Link>\n                \n          </Box>\n        ): null}\n        \n      </Flex>\n\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}