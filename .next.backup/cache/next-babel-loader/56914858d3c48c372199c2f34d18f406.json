{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft2.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure, Collapse, useColorMode, Tabs, TabList, Tab, TabPanel, TabPanels } from '@chakra-ui/core';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { HStack } from '@chakra-ui/react';\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { Contract } from '@ethersproject/contracts';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, contractAddresses, SIG_API, EMBLEM_V2_API, curatedContracts } from '../constants';\nimport { useContract } from '../hooks';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport CryptoJS from 'crypto-js';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nimport CoinBalance from './partials/CoinBalance';\nimport Attributes from './partials/Attributes';\nimport { generateWallet } from '@stacks/wallet-sdk';\nimport FetchNodeDetails from \"@toruslabs/fetch-node-details\";\nimport TorusUtils from \"@toruslabs/torus.js\";\nimport JsonDownloadLink from './JsonDownloadLink';\nimport ApprovalButton from './partials/ApprovalButton';\nconst API_VERSION = '/v2';\nconst AddrModal = dynamic(() => import('./AddrModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./AddrModal')],\n    modules: ['./AddrModal']\n  }\n});\nconst KeysModal = dynamic(() => import('./KeysModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./KeysModal')],\n    modules: ['./KeysModal']\n  }\n});\nconst OfferModal = dynamic(() => import('./OfferModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./OfferModal')],\n    modules: ['./OfferModal']\n  }\n});\nexport default function Nft2() {\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    query\n  } = useRouter();\n  const {\n    0: isCuratedMaster,\n    1: setIsCuratedMaster\n  } = useState(false);\n  const {\n    0: decimals,\n    1: setDecimals\n  } = useState(null);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(null);\n  const {\n    0: balance,\n    1: setBalance\n  } = useState(null);\n  const {\n    0: ownedCuratedBalance,\n    1: setOwnedCuratedBalance\n  } = useState(0);\n  const {\n    0: price,\n    1: setPrice\n  } = useState(null);\n  const {\n    0: isCovalApproved,\n    1: setIsCovalApproved\n  } = useState(false);\n  const {\n    0: approved,\n    1: setApproved\n  } = useState(false);\n  const {\n    0: mintPassword,\n    1: setMintPassword\n  } = useState(query.key);\n  const {\n    0: showOffer,\n    1: setShowOffer\n  } = useState(query.offer || false);\n  const {\n    0: framed,\n    1: setFramed\n  } = useState(query.framed || true);\n  const {\n    0: tokenId,\n    1: setTokenId\n  } = useState(query.id);\n  const {\n    0: slideshowOnly,\n    1: setSlideshowOnly\n  } = useState(query.slideshowOnly || false);\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState('');\n  const {\n    0: vaultIPFS,\n    1: setVaultIPFS\n  } = useState('');\n  const {\n    0: vaultImageIPFS,\n    1: setVaultImageIPFS\n  } = useState('');\n  const {\n    0: vaultCiphertextV2,\n    1: setVaultCiphertextV2\n  } = useState('');\n  const {\n    0: vaultDesc,\n    1: setVaultDesc\n  } = useState('');\n  const {\n    0: vaultImage,\n    1: setVaultImage\n  } = useState('');\n  const {\n    0: ownedImage,\n    1: setOwnedImage\n  } = useState('');\n  const {\n    0: vaultValues,\n    1: setVaultValues\n  } = useState([]);\n  const {\n    0: loadedValues,\n    1: setLoadedValues\n  } = useState(false);\n  const {\n    0: vaultDataValues,\n    1: setVaultDataValues\n  } = useState([]);\n  const {\n    0: attributes,\n    1: setAttributes\n  } = useState([]);\n  const {\n    0: vaultAddresses,\n    1: setVaultAddresses\n  } = useState([]);\n  const {\n    0: vaultPrivacy,\n    1: setVaultPrivacy\n  } = useState(false);\n  const {\n    0: vaultTotalValue,\n    1: setVaultTotalValue\n  } = useState(0);\n  const {\n    0: vaultChainId,\n    1: setVaultChainId\n  } = useState(null);\n  const {\n    0: vaultChain,\n    1: setVaultChain\n  } = useState(null);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: currCoin,\n    1: setCurrCoin\n  } = useState('');\n  const {\n    0: currAddr,\n    1: setCurrAddr\n  } = useState('');\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: mine,\n    1: setMine\n  } = useState(false);\n  const {\n    0: mineUnMinted,\n    1: setMineUnMinted\n  } = useState(false);\n  const {\n    0: claiming,\n    1: setClaiming\n  } = useState(false);\n  const {\n    0: status,\n    1: setStatus\n  } = useState('claimed');\n  const {\n    0: sealed,\n    1: setSealed\n  } = useState(false);\n  const {\n    0: claimedBy,\n    1: setClaimedBy\n  } = useState(null);\n  const {\n    0: mnemonic,\n    1: setMnemonic\n  } = useState('');\n  const {\n    0: privKeyBTC,\n    1: setPrivKeyBTC\n  } = useState('');\n  const {\n    0: privKeyETH,\n    1: setPrivKeyETH\n  } = useState('');\n  const {\n    0: privValues,\n    1: setKeyValues\n  } = useState([]);\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: decryptedEffect,\n    1: setDecryptedEffect\n  } = useState('');\n  const {\n    0: decryptedEffectRunning,\n    1: setDecryptedEffectRunning\n  } = useState(false);\n  const {\n    0: decryptPassword,\n    1: setDecryptPassword\n  } = useState('');\n  const {\n    0: invalidVault,\n    1: setInvalidVault\n  } = useState(false);\n  const {\n    0: accepting,\n    1: setAccepting\n  } = useState(false);\n  const {\n    0: approving,\n    1: setApproving\n  } = useState(false);\n  const {\n    0: acceptable,\n    1: setAcceptable\n  } = useState(false);\n  const {\n    0: transferPassword,\n    1: setTransferPassword\n  } = useState('');\n  const {\n    0: showTransferPassword,\n    1: setShowTransferPassword\n  } = useState(false);\n  const {\n    0: preTransfering,\n    1: setPreTransfering\n  } = useState(false);\n  const {\n    0: transfering,\n    1: setTransfering\n  } = useState(false);\n  const {\n    0: owner,\n    1: setOwner\n  } = useState(null); // const [torus, setTorus] = useState(initTorus())\n\n  const {\n    0: live,\n    1: setLive\n  } = useState(false);\n  const {\n    0: nonce,\n    1: setNonce\n  } = useState(null);\n  const {\n    0: mintSignature,\n    1: setMintSignature\n  } = useState(null);\n  const {\n    0: to,\n    1: setTo\n  } = useState(null);\n  const {\n    0: showMakingVaultMsg,\n    1: setShowMakingVaultMsg\n  } = useState(false);\n  const {\n    0: minting,\n    1: setMinting\n  } = useState(false);\n  const {\n    0: isCrowdSale,\n    1: setIsCrowdSale\n  } = useState(false);\n  const {\n    0: alternateContractAddress,\n    1: setAlternateContractAddress\n  } = useState(null);\n  const {\n    0: targetAsset,\n    1: setTargetAsset\n  } = useState({\n    name: '',\n    image: '',\n    metadata: ''\n  });\n  const {\n    0: targetContract,\n    1: setTargetContract\n  } = useState({\n    name: '',\n    chain: '',\n    4: '',\n    1: '',\n    tokenId: {},\n    serialNumber: {\n      'hex': ''\n    },\n    collectionType: ''\n  });\n  const {\n    0: canCuratedMint,\n    1: setCanCuratedMint\n  } = useState(false);\n  const {\n    0: move_targetAsset,\n    1: setMoveTargetAsset\n  } = useState({\n    name: '',\n    image: '',\n    metadata: ''\n  });\n  const {\n    0: move_targetContract,\n    1: setMoveTargetContract\n  } = useState({\n    name: '',\n    chain: '',\n    4: '',\n    1: '',\n    tokenId: {},\n    serialNumber: {\n      'hex': ''\n    }\n  });\n  const {\n    0: mintLockedForever,\n    1: setMintLockedForever\n  } = useState(false);\n  const {\n    0: rawMetadata,\n    1: setRawMetadata\n  } = useState({});\n  const {\n    0: curatedMintingParameters,\n    1: setCuratedMintingParameters\n  } = useState({});\n  const {\n    0: curatedContract,\n    1: setCuratedContract\n  } = useState(null);\n  const vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  const quoteContract = useContract(contractAddresses.mintVaultQuote[chainId], contractAddresses.mintVaultQuoteAbi, true);\n  let emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  let covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true);\n  const {\n    isOpen: isOpenAddrModal,\n    onOpen: onOpenAddrModal,\n    onClose: onCloseAddrModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenKeysModal,\n    onOpen: onOpenKeysModal,\n    onClose: onCloseKeysModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenOfferModal,\n    onOpen: onOpenOfferModal,\n    onClose: onCloseOfferModal\n  } = useDisclosure();\n  const {\n    isOpen: isAdvancedOpen,\n    onToggle: onAdvancedToggle\n  } = useDisclosure();\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    0: vaultMsg,\n    1: setVaultMsg\n  } = useState('ONLY SEND ONE NFT TO THIS VAULT');\n\n  const getVaultContract = (address = null) => {\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked());\n  };\n\n  const getCuratedContract = (address = null) => {\n    let allowedContracts = curatedContracts.filter(contract => {\n      return contract[chainId] == address;\n    });\n\n    if (allowedContracts.length > 0) {\n      setCuratedContract(allowedContracts[0]);\n      return new Contract(address, allowedContracts[0].collectionType == 'ERC1155' ? contractAddresses.erc1155Abi : allowedContracts[0].collectionType == 'ERC721a' ? contractAddresses.erc721aAbi : contractAddresses.erc721Abi, library.getSigner(account).connectUnchecked());\n    }\n  };\n\n  const checkLiveliness = (tokenId, targetContract, cb) => {\n    console.log(\"check liveliness next\", targetContract);\n    let endpoint = targetContract && targetContract.name ? EMBLEM_V2_API + '/liveliness-curated' : EMBLEM_API + '/liveliness';\n    fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        tokenId: tokenId\n      })\n    }).then(async function (response) {\n      let data = await response.json();\n      setLive(data.live);\n      console.log(\"Liveliness check\", data); //setTimeout(()=>{location.href = location.origin + '/nft2?id=' + tokenId}, 500)\n    });\n    return cb(false);\n  };\n\n  const deleteVault = () => {\n    library.getSigner(account).signMessage('Delete: ' + tokenId).then(signature => {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + API_VERSION + '/delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then(async function () {\n        location.href = location.href.split(\"/\")[0] + \"/vaults\";\n      });\n    });\n  };\n\n  function chooseMintPath() {\n    let curatedContract = curatedContracts.filter(contract => {\n      return contract[chainId] == targetContract[chainId];\n    })[0];\n\n    if (curatedContract.purchaseMethod && curatedContract.purchaseMethod == 'buyWithQuote') {\n      return lazyMintCuratedWithEth();\n    } else {\n      return lazyMintCurated();\n    }\n  }\n\n  const lazyMintCurated = () => {\n    setState({\n      loaded: false\n    });\n    library.getSigner(account).signMessage('Curated Minting: ' + tokenId).then(signature => {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_V2_API + '/mint-curated', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          method: 'buyWithSignedPrice',\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        alert(0);\n        setCuratedMintingParameters(data);\n        vaultHandlerContract.buyWithSignedPrice(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1).then(({\n          hash\n        }) => {\n          setTimeout(() => {\n            setHash(hash);\n            setState({\n              loaded: true\n            });\n            setShowMakingVaultMsg(true);\n            setMinting(true);\n          }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n        }).catch(error => {\n          console.log('ERROR', error);\n          setShowMakingVaultMsg(false);\n          setMinting(false);\n          setState({\n            loaded: true\n          });\n        });\n      });\n    }).catch(error => {\n      console.log('ERROR', error);\n      setShowMakingVaultMsg(false);\n      setMinting(false);\n      setState({\n        loaded: true\n      });\n    });\n  };\n\n  const lazyMintCuratedWithEth = () => {\n    setState({\n      loaded: false\n    });\n    library.getSigner(account).signMessage(`Curated Minting: ${tokenId.toString()}`).then(signature => {\n      fetch(EMBLEM_V2_API + '/mint-curated', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          method: 'buyWithQuote',\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n\n        if (data.err && data.msg) {\n          alert(data.msg);\n        } else {\n          setCuratedMintingParameters(data) // alert(data._price)\n          ;\n          quoteContract.quoteExternalPrice(account, data._price / 1000000).then(ethPrice => {\n            let ethToSend = ethPrice.mul(BigNumber.from(10).pow(6));\n            console.log(\"--------   ------\", data._nftAddress, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1, {\n              value: ethToSend\n            });\n            vaultHandlerContract.buyWithQuote(data._nftAddress, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1, {\n              value: ethToSend\n            }).then(({\n              hash\n            }) => {\n              setTimeout(() => {\n                setHash(hash);\n                setState({\n                  loaded: true\n                });\n                setShowMakingVaultMsg(true);\n                setMinting(true);\n              }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n            }).catch(error => {\n              console.log('ERROR', error);\n              setShowMakingVaultMsg(false);\n              setMinting(false);\n              setState({\n                loaded: true\n              });\n            });\n          });\n        }\n      });\n    }).catch(error => {\n      console.log('ERROR', error);\n      setShowMakingVaultMsg(false);\n      setMinting(false);\n      setState({\n        loaded: true\n      });\n    });\n  };\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    const response = await fetch(EMBLEM_API + '/vault/balance/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await response.json();\n    console.log('response', response, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(jsonData.balances);\n    } else {\n      return cb(values);\n    }\n  };\n\n  const handleApproveForall = () => {\n    setApproving(true);\n\n    if (targetContract.name) {\n      emblemContract = getCuratedContract(targetContract[chainId]);\n      emblemContract.setApprovalForAll(contractAddresses.vaultHandlerV8[chainId], true).then(({\n        hash\n      }) => {\n        setTimeout(() => {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      }).catch(error => {\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(`tx failed.`, error);\n        } else {\n          setApproving(false);\n        }\n      });\n    } else {\n      emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(({\n        hash\n      }) => {\n        setTimeout(() => {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      }).catch(error => {\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(`tx failed.`, error);\n        } else {\n          setApproving(false);\n        }\n      });\n    }\n  };\n\n  const getVault = async () => {\n    console.log('getvault');\n    const response = await fetch(EMBLEM_V2_API + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await response.json();\n    setRawMetadata(jsonData);\n\n    if (jsonData.collectionAddress) {\n      setIsCrowdSale(true);\n      setAlternateContractAddress(jsonData.collectionAddress);\n    }\n\n    if (!jsonData.name) {\n      setState({\n        loaded: true\n      });\n      setInvalidVault(true);\n    } else {\n      console.log(\"--------------- states -\", jsonData);\n      setStates(jsonData);\n      setLoadingApi(false);\n      setInvalidVault(false);\n    }\n\n    {\n      !vaultPrivacy && !loadedValues ? getAllBalancesLive([], tokenId, v => {\n        if (v) {\n          setVaultValues(v);\n        }\n      }) : null;\n    }\n  };\n\n  const setStates = jsonData => {\n    if (!jsonData.targetAsset && !jsonData.move_targetAsset) {\n      location.href = location.origin + '/nft?id=' + tokenId;\n    }\n\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\" + framed : null;\n\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2);\n    }\n\n    setMintLockedForever(jsonData.mintLocked && jsonData.mintLockBlock == 0);\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setOwnedImage(jsonData.ownedImage || null);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)) : null;\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(item => {\n      return item.trait_type === \"key\";\n    })) : null;\n    jsonData.attributes ? setAttributes(jsonData.attributes) : null;\n    setVaultAddresses(jsonData.addresses);\n    setVaultIPFS(jsonData.ipfs || null);\n    setVaultImageIPFS(jsonData.image_ipfs || null);\n    jsonData.targetContract && jsonData.targetContract.tokenId == tokenId && jsonData.targetContract.serialNumber ? setIsCuratedMaster(true) : null;\n    jsonData.targetAsset ? setTargetAsset(jsonData.targetAsset) : null;\n    jsonData.targetContract ? setTargetContract(jsonData.targetContract) : null;\n    jsonData.move_targetAsset ? setMoveTargetAsset(jsonData.move_targetAsset) : null;\n    jsonData.move_targetContract ? setMoveTargetContract(jsonData.move_targetContract) : null; // jsonData.values && jsonData.targetAsset && jsonData.values.filter(item=>{\n    //   return item.coin.toLowerCase() == jsonData.targetContract.chain && \n    //   item.name == jsonData.targetAsset.name && \n    //   item.project == jsonData.targetContract.name\n    // }).length > 0 ? setCanCuratedMint(true): null\n\n    setLive(jsonData.live == false ? false : true);\n    setNonce(jsonData.nonce);\n    setMintSignature(jsonData.signature);\n    setTo(jsonData.to);\n    setVaultChain(jsonData.network);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"goerli\" ? 5 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : jsonData.network == \"xdai\" ? 100 : jsonData.network == \"bsc\" ? 56 : jsonData.network == \"fantom\" ? 250 : jsonData.network == \"bitcoin\" ? 0 : jsonData.network == \"aurora\" ? 1313161554 : 97);\n\n    if (!jsonData.live) {\n      console.log(\"check liveliness start\");\n      checkLiveliness(tokenId, jsonData.targetContract || jsonData.move_targetContract, isLive => {\n        setLive(isLive);\n      });\n    }\n\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    }\n\n    setState({\n      loaded: true\n    });\n    let isPvt = jsonData.addresses.filter(item => {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n\n    if (jsonData.sealed) {\n      setSealed(true);\n    } else {\n      setSealed(false);\n    }\n  };\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    if (loadedValues) {\n      return cb(false);\n    }\n\n    setLoadedValues(true);\n    const response = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await response.json();\n    console.log('response', response, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    const response = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await response.json();\n    console.log('response', response, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  };\n\n  const getSignedJWT = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainid', chainId.toString());\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature,\n      tokenId: tokenId\n    });\n    const response = await fetch(SIG_API + '/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await response.json();\n    return cb(jsonData);\n  };\n\n  async function getTorusKeys(verifierId, idToken, cb) {\n    const fetchNodeDetails = new FetchNodeDetails({\n      network: \"mainnet\"\n    });\n    const torusUtils = new TorusUtils({\n      enableOneKey: true,\n      network: \"mainnet\"\n    });\n    const {\n      torusNodeEndpoints,\n      torusIndexes\n    } = await fetchNodeDetails.getNodeDetails({\n      verifier: 'tor-us-signer-vercel',\n      verifierId\n    });\n    const {\n      privKey\n    } = await torusUtils.retrieveShares(torusNodeEndpoints, torusIndexes, 'tor-us-signer-vercel', {\n      verifier_id: verifierId\n    }, idToken);\n    return cb({\n      privateKey: privKey\n    });\n  }\n\n  const decryptEmbed = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature\n    });\n    const response = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await response.json();\n    return cb(jsonData);\n  };\n\n  const getContractStates = async () => {\n    let _owner;\n\n    try {\n      if (targetContract[chainId]) {\n        let allowedContracts = curatedContracts.filter(contract => {\n          return contract[chainId] == targetContract[chainId];\n        });\n\n        if (allowedContracts.length > 0 && allowedContracts[0].allowedName && allowedContracts[0].allowed && vaultValues && vaultValues.length > 0) {\n          setCanCuratedMint(allowedContracts[0].allowedName(vaultValues[0].name, setVaultMsg) && allowedContracts[0].allowed(vaultValues[0], setVaultMsg));\n        } else {\n          setCanCuratedMint(false);\n        }\n\n        emblemContract = getCuratedContract(targetContract[chainId]);\n        setDecimals(await covalContract.decimals());\n        setPrice(250 * Math.pow(10, decimals));\n        setAllowance(await covalContract.allowance(account, contractAddresses.vaultHandlerV8[chainId]).then(balance => balance.toString()));\n        setBalance(await covalContract.balanceOf(account).then(balance => balance.toString()));\n\n        if (Number(allowance) >= Number(price)) {\n          setIsCovalApproved(true);\n        } else {\n          setIsCovalApproved(false);\n        }\n\n        if (allowedContracts.length > 0) {\n          if (allowedContracts[0].collectionType == 'ERC1155') {\n            let balanceOf = await emblemContract.balanceOf(account, targetContract.tokenId).then(balance => balance.toString());\n            _owner = Number(balanceOf) > 0 ? account : \"0x0000000000000000000000000000000000000000\";\n\n            if (Number(balanceOf) > 0) {\n              setOwnedCuratedBalance(balanceOf);\n            }\n          } else {\n            setOwnedCuratedBalance(1);\n            _owner = await emblemContract.ownerOf(allowedContracts[0].collectionType == 'ERC721a' ? targetContract.tokenId : tokenId);\n            alert(_owner);\n          }\n        } else {\n          _owner = \"0x0000000000000000000000000000000000000000\";\n        }\n      } else {\n        _owner = await emblemContract.ownerOf(tokenId);\n      }\n\n      finish();\n    } catch (err) {\n      _owner = \"0x0000000000000000000000000000000000000000\";\n      finish();\n    }\n\n    async function finish() {\n      let isApproved;\n\n      if (targetContract[chainId]) {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId]);\n        setApproved(isApproved);\n      } else {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n        setApproved(isApproved);\n      }\n\n      setOwner(_owner);\n      setMine(_owner === account || to === account && _owner === \"0x0000000000000000000000000000000000000000\");\n      setMineUnMinted(to === account && _owner === \"0x0000000000000000000000000000000000000000\");\n      loadPasswordFromLocalStorage();\n    }\n  };\n\n  const onRenew = async name => {\n    library.getSigner(account).signMessage('Renew: ' + tokenId).then(signature => {\n      let address = vaultAddresses.filter(address => {\n        return address.coin == 'NMC';\n      })[0].address;\n      console.log('signature', signature, name);\n      fetch(EMBLEM_API + '/nmc/renew/' + address, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({\n          \"tokenId\": tokenId,\n          \"signature\": signature,\n          \"name\": name\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        console.log(\"Requested Renew\", data);\n      });\n    });\n  };\n\n  const approveCovalFlow = () => {\n    setApproving(true);\n    let handlerToApprove = targetContract.name ? contractAddresses.vaultHandlerV8[chainId] : contractAddresses.vaultHandler[chainId];\n    covalContract.approve(handlerToApprove, '100000000000000').then(({\n      hash\n    }) => {\n      setHash(hash);\n    }).catch(error => {\n      if ((error === null || error === void 0 ? void 0 : error.code) == 4001) {\n        setApproving(false);\n      }\n    });\n  };\n\n  const handleSign = async () => {\n    let serialNumber;\n\n    if (targetContract[chainId]) {\n      let allowedContracts = curatedContracts.filter(contract => {\n        return contract[chainId] == targetContract[chainId];\n      });\n      emblemContract = getCuratedContract(targetContract[chainId]);\n      serialNumber = allowedContracts[0].collectionType == 'ERC1155' ? targetContract.serialNumber : allowedContracts[0].collectionType == 'ERC721a' ? tokenId : targetContract.tokenId;\n    }\n\n    library.getSigner(account).signMessage('Claim: ' + (targetContract[chainId] ? serialNumber : tokenId)).then(signature => {\n      setState({\n        loaded: false\n      });\n\n      if (mineUnMinted && status != \"claimed\" && !mintLockedForever) {\n        setMintLockedForever(true);\n      }\n\n      getSignedJWT(signature, tokenId, token => {\n        getTorusKeys(tokenId, token.token, keys => {\n          try {\n            var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey);\n            let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n            setKeyValues(payload.values);\n            setMnemonic(payload.phrase);\n            vaultAddresses.forEach(async address => {\n              if (address.coin == 'STX') {\n                address.key = await getSTXKey(address, payload.phrase);\n              } else {\n                address.key = window.phrasePathToKey(payload.phrase, address.path);\n              }\n\n              if (address.coin == 'BTC') setPrivKeyBTC(address.key);\n              if (address.coin == 'ETH') setPrivKeyETH(address.key);\n            });\n          } catch (err) {\n            alert(err);\n            setTimeout(() => {\n              location.href = location.href;\n            }, 2000);\n          }\n\n          setState({\n            loaded: true\n          });\n          onOpenKeysModal();\n        });\n      });\n    });\n  };\n\n  const getSTXKey = async (address, phrase) => {\n    const wallet = await generateWallet({\n      secretKey: phrase,\n      password: ''\n    });\n    console.log('------ stacks account -', wallet.accounts[0]);\n    const account = wallet.accounts[0];\n    address.key = account.stxPrivateKey;\n    return address.key;\n  };\n\n  const handleHideAsset = async coin => {\n    library.getSigner(account).signMessage('HideAsset: ' + tokenId).then(signature => {\n      hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, () => {\n        console.log(\"Done hiding coin and getting new balances\");\n      });\n    });\n  };\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/' + tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin ? coin : null,\n        \"address\": address ? address : null,\n        \"name\": name ? name : null,\n        \"signature\": signature ? signature : null\n      })\n    }).then(async function (response) {\n      let data = await response.json();\n      console.log(\"-------\", data);\n      getAllBalances([], tokenId, values => {\n        setVaultValues(values);\n        return cb();\n      });\n    });\n  }\n\n  const handleOwnedEmbed = async () => {\n    library.getSigner(account).signMessage('Embed: ' + tokenId).then(signature => {\n      decryptEmbed(signature, tokenId, result => {\n        setVaultImage(result.ownedImage);\n      });\n    });\n  };\n\n  const handleClaim = async () => {\n    let allowedContracts = curatedContracts.filter(contract => {\n      return contract[chainId] == targetContract[chainId];\n    });\n\n    if (targetContract[chainId]) {\n      vaultHandlerContract.claim(targetContract[chainId], allowedContracts[0].collectionType == 'ERC721a' ? tokenId : targetContract.tokenId).then(({\n        hash\n      }) => {\n        setClaiming(true);\n        setTimeout(() => {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      });\n    } else {\n      emblemContract.burn(tokenId).then(({\n        hash\n      }) => {\n        setClaiming(true);\n        setTimeout(() => {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      });\n    }\n  };\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return;\n    }\n\n    setDecryptedEffectRunning(true);\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n    var ctnt = 'Decrypting'; // Your text goes here\n\n    var speed = 5; // ms per frame\n\n    var increment = 8; // frames per step. Must be >2\n\n    var clen = ctnt.length;\n    var si = 0;\n    var stri = 0;\n    var block = '';\n    var fixed = '';\n\n    (function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i);\n        } else {\n          setDecryptedEffectRunning(false);\n        }\n\n        nextFrame(i);\n        si = si + 1;\n      }, speed);\n    })(clen * increment + 1);\n\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        var num = Math.floor(theLetters.length * Math.random());\n        var letter = theLetters.charAt(num);\n        block = block + letter;\n      }\n\n      if (si == increment - 1) {\n        stri++;\n      }\n\n      if (si == increment) {\n        fixed = fixed + ctnt.charAt(stri - 1);\n        si = 0;\n      }\n\n      setDecryptedEffect(fixed + block);\n      block = '';\n    }\n  };\n\n  useEffect(() => {\n    getVault();\n  }, []);\n  useEffect(() => {\n    account && chainId && vaultChainId && chainId == vaultChainId || query.noLayout && query.noLayout == 'true' || query.slideshowOnly && query.slideshowOnly == 'true' ? getContractStates() : null;\n  });\n\n  function splitDescription(words) {\n    var desc = words ? words.split('\\n\\n\\n\\n') : [\" \"];\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    console.log(vaultAddresses);\n    let ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      let ethAddress = vaultAddresses.filter(item => {\n        return item.coin === 'ETH';\n      })[0].address;\n      let btcAddress = vaultAddresses.filter(item => {\n        return item.coin === 'BTC';\n      })[0].address;\n      console.log(\"SUCCESS\", vaultAddresses);\n      getAllBalancesByAddress([], ethAddress, btcAddress, values => {\n        setVaultValues(values);\n      });\n    } catch (err) {\n      console.log('WTF', err);\n    }\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(item => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '');\n        item.address = decrypt(cipherText, key);\n      }\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  function visitOpenSeaLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : vaultChainId == 5 ? 'testnets.' : '') + 'opensea.io/assets/' + (vaultChainId == 137 ? 'matic/' : vaultChainId == 5 ? 'goerli/' : 'ethereum/') + (alternateContractAddress ? alternateContractAddress : targetContract[chainId] ? targetContract[chainId] : contractAddresses.emblemVault[vaultChainId]) + '/' + (targetContract ? targetContract.tokenId : tokenId), '_blank');\n  }\n\n  function visitLooksRareLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : vaultChainId == 5 ? 'goerli.' : '') + 'looksrare.org/collections/' + (vaultChainId == 137 ? 'matic/' : '') + (alternateContractAddress ? alternateContractAddress : targetContract ? targetContract[chainId] : contractAddresses.emblemVault[vaultChainId]) + '/' + (targetContract ? targetContract.tokenId : tokenId), '_blank');\n  }\n\n  function visitArcadeLink() {\n    window.open(`https://app.arcade.xyz/terms/asset/${targetContract[vaultChainId] ? targetContract[vaultChainId] : contractAddresses.emblemVault[vaultChainId]}/${tokenId}`, '_blank');\n  }\n\n  {\n    alternateContractAddress ? emblemContract = getVaultContract(alternateContractAddress ? alternateContractAddress : null) : null;\n  }\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 918,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 919,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 920,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 921,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 922,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 923,\n      columnNumber: 9\n    }\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              if (localStorage.getItem(\"darkMode\") == 'false') {\n                localStorage.setItem(\"darkMode\",\"true\"); location.href = location.href\n              }\n              `\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 924,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 939,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    privValues: privValues,\n    addresses: vaultAddresses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 941,\n      columnNumber: 7\n    }\n  }), showOffer ? __jsx(OfferModal, {\n    isOpen: isOpenOfferModal,\n    onClose: onCloseOfferModal,\n    tokenId: tokenId,\n    mine: mine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 951,\n      columnNumber: 9\n    }\n  }) : null, __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 960,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 961,\n      columnNumber: 9\n    }\n  }), loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 962,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault && !slideshowOnly ? __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 964,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    className: \"NFT\",\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 965,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"blue.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 976,\n      columnNumber: 17\n    }\n  }, \"Vault Network: \", CHAIN_ID_NAMES[vaultChainId]), __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\" // textTransform=\"uppercase\"\n    ,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 990,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null), __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1003,\n      columnNumber: 17\n    }\n  }, __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1004,\n      columnNumber: 19\n    }\n  }), mine && ownedImage ? __jsx(Button, {\n    onClick: () => {\n      handleOwnedEmbed();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1006,\n      columnNumber: 21\n    }\n  }, \"(OWNED) Show Full Embed\") : null), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1009,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1010,\n      columnNumber: 19\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1011,\n      columnNumber: 21\n    }\n  }, !live && mine ? __jsx(Text, {\n    className: \"warning\",\n    color: \"red\",\n    fontSize: \"s\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1013,\n      columnNumber: 24\n    }\n  }, vaultMsg) : null, mine && vaultChainId == chainId ? __jsx(Text, {\n    fontSize: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1016,\n      columnNumber: 25\n    }\n  }, __jsx(Link, {\n    href: \"./vaults?address=\" + owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1018,\n      columnNumber: 27\n    }\n  }, \"Owner: \", owner)) : null, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1024,\n      columnNumber: 23\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1025,\n      columnNumber: 25\n    }\n  }))))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1031,\n      columnNumber: 17\n    }\n  }, !isCuratedMaster && !live || curatedContract && curatedContract.showBalance ? __jsx(Tabs, {\n    isFitted: true,\n    variant: \"enclosed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1033,\n      columnNumber: 21\n    }\n  }, __jsx(TabList, {\n    mb: \"1em\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1034,\n      columnNumber: 23\n    }\n  }, __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1035,\n      columnNumber: 25\n    }\n  }, \"Balances\"), __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1036,\n      columnNumber: 25\n    }\n  }, \"Attributes\")), __jsx(TabPanels, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1038,\n      columnNumber: 23\n    }\n  }, __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1039,\n      columnNumber: 25\n    }\n  }, vaultPrivacy ? __jsx(Box, {\n    mb: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1041,\n      columnNumber: 29\n    }\n  }, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1042,\n      columnNumber: 31\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: e => tryDecrypt(e.target.value),\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1045,\n      columnNumber: 31\n    }\n  })) : __jsx(Box, {\n    d: \"flex\",\n    backgroundColor: colorMode == \"light\" ? \"gray.100\" : \"gray.700\",\n    alignItems: \"baseline\",\n    className: \"coin-balance-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1053,\n      columnNumber: 29\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1054,\n      columnNumber: 31\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    mt: 2,\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1055,\n      columnNumber: 33\n    }\n  }, \"Current Contents:  \", __jsx(\"button\", {\n    onClick: () => {\n      getAllBalancesLive([], tokenId, v => {\n        setLoadedValues(false);\n        setVaultValues(v);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1057,\n      columnNumber: 54\n    }\n  }, \" [Refresh Balances]\")), __jsx(Text, {\n    as: \"p\",\n    color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1066,\n      columnNumber: 33\n    }\n  }, \"$\", Number(vaultTotalValue.toFixed(4)).toLocaleString()), vaultValues.length ? vaultValues.map(coin => {\n    return __jsx(Stack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1070,\n        columnNumber: 39\n      }\n    }, __jsx(CoinBalance, {\n      colorMode: colorMode,\n      coin: coin,\n      mine: status === 'claimed' && claimedBy === account || mine,\n      onRenew: onRenew,\n      hideAsset: targetAsset.name ? false : handleHideAsset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1071,\n        columnNumber: 41\n      }\n    }));\n  }) : __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1075,\n      columnNumber: 38\n    }\n  }), vaultDataValues.length ? vaultDataValues.map(data => {\n    return __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1079,\n        columnNumber: 39\n      }\n    }, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1083,\n      columnNumber: 35\n    }\n  }, \"Nothing in here! Fill 'er up!\") : null))), __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1089,\n      columnNumber: 25\n    }\n  }, __jsx(Attributes, {\n    colorMode: colorMode,\n    attributes: attributes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1090,\n      columnNumber: 27\n    }\n  })))) : null, !isCuratedMaster && !vaultPrivacy && !live || curatedContract && curatedContract.showBalance ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1096,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1097,\n      columnNumber: 21\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1098,\n      columnNumber: 23\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1099,\n      columnNumber: 25\n    }\n  }, \"Deposit Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1100,\n      columnNumber: 25\n    }\n  }, vaultAddresses.map(addr => {\n    return __jsx(Button, {\n      className: \"address_nft_button\",\n      ml: 2,\n      mt: 2,\n      \"font-weight\": \"100 !important\",\n      key: addr.address,\n      onClick: () => {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1103,\n        columnNumber: 31\n      }\n    }, addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP' : addr.coin);\n  }))))) : null, !(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 137) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1126,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: mine && vaultChainId == 1 ? \"33%\" : vaultChainId == 137 ? \"100%\" : \"50%\",\n    m: 2.5,\n    mb: 5,\n    onClick: () => {\n      visitOpenSeaLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1128,\n      columnNumber: 25\n    }\n  }, \"Opensea\"), vaultChainId == 1 ? __jsx(Button, {\n    className: \"nft_button\",\n    width: \"50%\",\n    m: 5,\n    onClick: () => {\n      visitLooksRareLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1138,\n      columnNumber: 27\n    }\n  }, \"LooksRare\") : null, mine && vaultChainId == 1 ? __jsx(Button, {\n    className: \"nft_button\",\n    width: \"33%\",\n    m: 2.5,\n    mb: 5,\n    onClick: () => {\n      visitArcadeLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1149,\n      columnNumber: 28\n    }\n  }, \"Arcade\") : null, showOffer ? __jsx(Button, {\n    className: \"\",\n    onClick: () => {\n      onOpenOfferModal();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1161,\n      columnNumber: 27\n    }\n  }, mine ? 'My Offers' : 'Make an Offer', \" (NFT\\xB2NFT)\") : null) : null, mine && targetContract.collectionType != \"ERC721a\" ? __jsx(ApprovalButton, {\n    handler: {\n      address: targetContract[chainId] ? contractAddresses.vaultHandlerV8[chainId] : contractAddresses.vaultHandler[chainId],\n      abi: targetContract[chainId] ? contractAddresses.vaultHandlerV8Abi : contractAddresses.vaultHandlerAbi\n    },\n    spending: {\n      address: targetContract[chainId] ? targetContract[chainId] : contractAddresses.emblemVault[chainId],\n      abi: targetContract[chainId] ? contractAddresses.erc1155Abi : contractAddresses.emblemAbi\n    },\n    amount: 0,\n    label: \"Approve Creating / Burning Vaults\",\n    watcher: setHash,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1181,\n      columnNumber: 21\n    }\n  }) : null, !live && !approving && mine && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg ? __jsx(React.Fragment, null, targetContract.name ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: chooseMintPath,\n    isDisabled: !canCuratedMint || mintLockedForever,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1203,\n      columnNumber: 27\n    }\n  }, mintLockedForever ? 'Mint Locked - keys accessed before mint' : !canCuratedMint ? 'Please load vault to mint' : ' Mint Vault', \" \") : null) : null, live && !(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed && approved ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1209,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      handleClaim();\n    },\n    isDisabled: claiming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1210,\n      columnNumber: 23\n    }\n  }, claiming ? 'Claiming ...' : 'Unlock Vault (Get Private Keys)')) : vaultChainId === chainId && (status == 'claimed' || mintLockedForever) && (claimedBy === account || mine) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1221,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1222,\n      columnNumber: 23\n    }\n  }, \"Get Keys\")) : null, !isCuratedMaster || mine ? __jsx(Stack, {\n    mt: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1228,\n      columnNumber: 19\n    }\n  }, __jsx(React.Fragment, null, __jsx(\"button\", {\n    className: \"nft_button\",\n    onClick: () => {\n      onAdvancedToggle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1230,\n      columnNumber: 21\n    }\n  }, \"Advanced Operations\"), __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1231,\n      columnNumber: 21\n    }\n  }, __jsx(Collapse, {\n    width: \"100%\",\n    isOpen: isAdvancedOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1232,\n      columnNumber: 23\n    }\n  }, vaultChainId === chainId && mineUnMinted && status != 'claimed' && !mintLockedForever ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1235,\n      columnNumber: 27\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1236,\n      columnNumber: 29\n    }\n  }, \"Get Keys (Unlocking will prevent minting)\")) : null, mine || claimedBy == account ? __jsx(JsonDownloadLink, {\n    data: rawMetadata,\n    filename: `EmblemVault-${tokenId}.json`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1243,\n      columnNumber: 27\n    }\n  }) : null, (!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: deleteVault,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1247,\n      columnNumber: 27\n    }\n  }, \"Delete Vault \") : null)))) : null), vaultIPFS ? __jsx(HStack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1259,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    target: \"new\",\n    mb: 2,\n    ml: 35,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1260,\n      columnNumber: 23\n    }\n  }, \"View Metadata on IPFS \"), vaultImageIPFS ? __jsx(Link, {\n    mb: 2,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultImageIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1262,\n      columnNumber: 25\n    }\n  }, \"View Image on IPFS \") : null) : null, sealed ? __jsx(Box, {\n    d: \"flex\",\n    mb: 2,\n    ml: 35,\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1268,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1269,\n      columnNumber: 23\n    }\n  }, \"*This vault is sealed forever.\")) : null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1273,\n      columnNumber: 17\n    }\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1274,\n      columnNumber: 42\n    }\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1278,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1279,\n      columnNumber: 21\n    }\n  }), accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving ? \"Handling Approval Flow ...\" : transfering ? \"Transfering Vault ...\" : minting ? \"Minting Vault\" : \"Waiting for Transaction ...\") : null)) : invalidVault ? __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1287,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1288,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1292,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1294,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      if (claiming && !accepting && !preTransfering) {\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account);\n        location.href = location.origin + '/nft2?id=' + tokenId;\n      } else if (preTransfering) {\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        setApproving(false);\n        getVault();\n        setHash(null);\n      } else if (transfering) {\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else if (minting || showMakingVaultMsg) {\n        setMinting(false);\n        setHash(null);\n        setShowMakingVaultMsg(false);\n        location.href = location.origin + '/nft2?id=' + tokenId;\n      } else {\n        location.href = location.origin + '/nft2?id=' + tokenId;\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1302,\n      columnNumber: 11\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1339,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft2.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","Link","Alert","AlertIcon","useDisclosure","Collapse","useColorMode","Tabs","TabList","Tab","TabPanel","TabPanels","BigNumber","HStack","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","Loader","dynamic","Contract","TransactionToast","EMBLEM_API","contractAddresses","SIG_API","EMBLEM_V2_API","curatedContracts","useContract","CHAIN_ID_NAMES","CryptoJS","ReactMarkdown","gfm","Embed","CoinBalance","Attributes","generateWallet","FetchNodeDetails","TorusUtils","JsonDownloadLink","ApprovalButton","API_VERSION","AddrModal","KeysModal","OfferModal","Nft2","account","chainId","library","query","isCuratedMaster","setIsCuratedMaster","decimals","setDecimals","allowance","setAllowance","balance","setBalance","ownedCuratedBalance","setOwnedCuratedBalance","price","setPrice","isCovalApproved","setIsCovalApproved","approved","setApproved","mintPassword","setMintPassword","key","showOffer","setShowOffer","offer","framed","setFramed","tokenId","setTokenId","id","slideshowOnly","setSlideshowOnly","vaultName","setVaultName","vaultIPFS","setVaultIPFS","vaultImageIPFS","setVaultImageIPFS","vaultCiphertextV2","setVaultCiphertextV2","vaultDesc","setVaultDesc","vaultImage","setVaultImage","ownedImage","setOwnedImage","vaultValues","setVaultValues","loadedValues","setLoadedValues","vaultDataValues","setVaultDataValues","attributes","setAttributes","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","vaultChain","setVaultChain","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","state","setState","loaded","mine","setMine","mineUnMinted","setMineUnMinted","claiming","setClaiming","status","setStatus","sealed","setSealed","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","privValues","setKeyValues","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","accepting","setAccepting","approving","setApproving","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","preTransfering","setPreTransfering","transfering","setTransfering","owner","setOwner","live","setLive","nonce","setNonce","mintSignature","setMintSignature","to","setTo","showMakingVaultMsg","setShowMakingVaultMsg","minting","setMinting","isCrowdSale","setIsCrowdSale","alternateContractAddress","setAlternateContractAddress","targetAsset","setTargetAsset","name","image","metadata","targetContract","setTargetContract","chain","serialNumber","collectionType","canCuratedMint","setCanCuratedMint","move_targetAsset","setMoveTargetAsset","move_targetContract","setMoveTargetContract","mintLockedForever","setMintLockedForever","rawMetadata","setRawMetadata","curatedMintingParameters","setCuratedMintingParameters","curatedContract","setCuratedContract","vaultHandlerContract","vaultHandlerV8","vaultHandlerV8Abi","quoteContract","mintVaultQuote","mintVaultQuoteAbi","emblemContract","emblemVault","emblemAbi","covalContract","coval","covalAbi","isOpen","isOpenAddrModal","onOpen","onOpenAddrModal","onClose","onCloseAddrModal","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","isOpenOfferModal","onOpenOfferModal","onCloseOfferModal","isAdvancedOpen","onToggle","onAdvancedToggle","colorMode","vaultMsg","setVaultMsg","getVaultContract","address","getSigner","connectUnchecked","getCuratedContract","allowedContracts","filter","contract","length","erc1155Abi","erc721aAbi","erc721Abi","checkLiveliness","cb","console","log","endpoint","fetch","method","headers","service","chainid","toString","body","JSON","stringify","then","response","data","json","deleteVault","signMessage","signature","location","href","split","chooseMintPath","purchaseMethod","lazyMintCuratedWithEth","lazyMintCurated","alert","buyWithSignedPrice","_nftAddress","_payment","_price","_to","_tokenId","_nonce","_signature","setTimeout","catch","error","err","msg","quoteExternalPrice","ethPrice","ethToSend","mul","from","pow","value","buyWithQuote","getAllBalances","values","jsonData","balances","handleApproveForall","setApprovalForAll","code","vaultHandler","getVault","collectionAddress","setStates","getAllBalancesLive","v","origin","includes","ciphertextV2","mintLocked","mintLockBlock","description","totalValue","concat","item","trait_type","addresses","ipfs","image_ipfs","network","isLive","isPvt","getAllBalancesByAddress","ethAddress","btcAddress","savePasswordToLocalStorage","localStorage","setItem","loadPasswordFromLocalStorage","storedPw","getItem","getSignedJWT","myHeaders","Headers","append","raw","redirect","getTorusKeys","verifierId","idToken","fetchNodeDetails","torusUtils","enableOneKey","torusNodeEndpoints","torusIndexes","getNodeDetails","verifier","privKey","retrieveShares","verifier_id","privateKey","decryptEmbed","getContractStates","_owner","allowedName","allowed","Math","balanceOf","Number","ownerOf","finish","isApproved","isApprovedForAll","onRenew","coin","approveCovalFlow","handlerToApprove","approve","handleSign","token","keys","bytes","AES","decrypt","payload","parse","enc","Utf8","phrase","forEach","getSTXKey","window","phrasePathToKey","path","wallet","secretKey","password","accounts","stxPrivateKey","handleHideAsset","hideAsset","handleOwnedEmbed","result","handleClaim","claim","burn","startDecryptEffect","theLetters","ctnt","speed","increment","clen","si","stri","block","fixed","rustle","i","nextFrame","pos","num","floor","random","letter","charAt","noLayout","splitDescription","words","desc","trim","tryDecrypt","ciphertext","replace","decryptAddresses","cipherText","decryptedData","visitOpenSeaLink","open","visitLooksRareLink","visitArcadeLink","__html","toLocaleString","showBalance","e","target","toFixed","map","attribute_key","addr","abi","vaultHandlerAbi"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n  Collapse,\n  useColorMode,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanel,\n  TabPanels\n} from '@chakra-ui/core'\n\nimport { BigNumber } from '@ethersproject/bignumber'\nimport {HStack} from '@chakra-ui/react'\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, contractAddresses, SIG_API, EMBLEM_V2_API, curatedContracts } from '../constants'\nimport { useContract } from '../hooks'\nimport { CHAIN_ID_NAMES, fromContractValue, toContractValue } from '../utils'\nimport CryptoJS from 'crypto-js'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport Embed from './Embed'\n\nimport CoinBalance from './partials/CoinBalance'\nimport Attributes from './partials/Attributes';\nimport { generateWallet } from '@stacks/wallet-sdk';\nimport FetchNodeDetails from \"@toruslabs/fetch-node-details\"\nimport TorusUtils from \"@toruslabs/torus.js\"\nimport JsonDownloadLink from './JsonDownloadLink'\nimport ApprovalButton from './partials/ApprovalButton'\nimport { parseEther } from '@ethersproject/units'\n\nconst API_VERSION = '/v2'\n\ndeclare global {\n  interface Window { phraseToKey: any, phrasePathToKey: any }\n}\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\nconst OfferModal = dynamic(() => import('./OfferModal'))\n\nexport default function Nft2() {\n  \n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [isCuratedMaster, setIsCuratedMaster] = useState(false)\n  const [decimals, setDecimals] = useState(null)\n  const [allowance, setAllowance] = useState(null)\n  const [balance, setBalance] = useState(null)\n  const [ownedCuratedBalance, setOwnedCuratedBalance] = useState(0)\n  const [price, setPrice] = useState(null)\n  const [isCovalApproved, setIsCovalApproved] = useState(false)\n  const [approved, setApproved] = useState(false)\n  const [mintPassword, setMintPassword] = useState(query.key)\n  const [showOffer, setShowOffer] = useState(query.offer || false)\n  const [framed, setFramed] = useState(query.framed || true)\n  const [tokenId, setTokenId] = useState(query.id)\n  const [slideshowOnly, setSlideshowOnly] = useState(query.slideshowOnly || false)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultIPFS, setVaultIPFS] = useState('')\n  const [vaultImageIPFS, setVaultImageIPFS] = useState('')\n  const [vaultCiphertextV2, setVaultCiphertextV2] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [ownedImage, setOwnedImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [loadedValues, setLoadedValues] = useState(false)\n  const [vaultDataValues, setVaultDataValues] = useState([])\n  const [attributes, setAttributes] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [vaultChain, setVaultChain] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [mineUnMinted, setMineUnMinted] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [sealed, setSealed] = useState(false)\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [privValues, setKeyValues] = useState([])\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n  const [preTransfering, setPreTransfering] = useState(false)\n  const [transfering, setTransfering] = useState(false)\n  const [owner, setOwner] = useState(null)\n  // const [torus, setTorus] = useState(initTorus())\n  const [live, setLive] = useState(false)\n  const [nonce, setNonce] = useState(null)\n  const [mintSignature, setMintSignature] = useState(null)\n  const [to, setTo] = useState(null)\n  const [showMakingVaultMsg, setShowMakingVaultMsg] = useState(false)\n  const [minting, setMinting] = useState(false)\n  const [isCrowdSale, setIsCrowdSale] = useState(false)\n  const [alternateContractAddress, setAlternateContractAddress] = useState(null)\n  const [targetAsset, setTargetAsset] = useState({name: '', image: '', metadata: ''})\n  const [targetContract, setTargetContract] = useState({name: '', chain: '', 4: '', 1: '', tokenId: {}, serialNumber: {'hex':''}, collectionType: '' })\n  const [canCuratedMint, setCanCuratedMint] = useState(false)\n  const [move_targetAsset, setMoveTargetAsset] = useState({name: '', image: '', metadata: ''})\n  const [move_targetContract, setMoveTargetContract] = useState({name: '', chain: '', 4: '', 1: '', tokenId: {}, serialNumber: {'hex':''} })\n  const [mintLockedForever, setMintLockedForever] = useState(false)\n  const [rawMetadata, setRawMetadata] = useState({})\n  const [curatedMintingParameters, setCuratedMintingParameters] = useState({})\n  const [curatedContract, setCuratedContract] = useState(null)\n  const vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n  const quoteContract = useContract(contractAddresses.mintVaultQuote[chainId], contractAddresses.mintVaultQuoteAbi, true)\n  let emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n  let covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true)\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n  const { isOpen: isOpenOfferModal, onOpen: onOpenOfferModal, onClose: onCloseOfferModal } = useDisclosure()  \n  const { isOpen: isAdvancedOpen, onToggle: onAdvancedToggle } = useDisclosure()\n  const { colorMode } = useColorMode()\n  const [vaultMsg, setVaultMsg] = useState('ONLY SEND ONE NFT TO THIS VAULT') \n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  const getVaultContract = (address = null) =>{\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  const getCuratedContract = (address = null) =>{\n    let allowedContracts = curatedContracts.filter(contract=>{return contract[chainId] == address})\n    if (allowedContracts.length > 0){     \n       setCuratedContract(allowedContracts[0])\n      return new Contract(address, allowedContracts[0].collectionType == 'ERC1155'? contractAddresses.erc1155Abi:  allowedContracts[0].collectionType == 'ERC721a'? contractAddresses.erc721aAbi: contractAddresses.erc721Abi, library.getSigner(account).connectUnchecked())\n    }\n  }\n\n  const checkLiveliness = (tokenId, targetContract, cb)=>{\n    console.log(\"check liveliness next\", targetContract )\n    let endpoint = (targetContract && targetContract.name)  ? EMBLEM_V2_API + '/liveliness-curated' : EMBLEM_API + '/liveliness'\n    fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({tokenId: tokenId}),\n    }).then(async function (response) {\n      let data = await response.json()\n      setLive(data.live)\n      console.log(\"Liveliness check\", data)\n      //setTimeout(()=>{location.href = location.origin + '/nft2?id=' + tokenId}, 500)\n    })\n    return cb(false)\n  }\n\n  const deleteVault = () =>{\n    library.getSigner(account)\n      .signMessage('Delete: ' + tokenId)\n      .then((signature) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_API + API_VERSION + '/delete', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata'\n          },\n          body: JSON.stringify({tokenId: tokenId, signature: signature, chainId: chainId.toString()}),\n        }).then(async function () {\n          location.href = location.href.split(\"/\")[0] + \"/vaults\"\n        })\n      })\n  }\n\n  function chooseMintPath() {\n    let curatedContract = curatedContracts.filter(contract=>{return contract[chainId] == targetContract[chainId]})[0]\n    if (curatedContract.purchaseMethod && curatedContract.purchaseMethod == 'buyWithQuote'){\n      return lazyMintCuratedWithEth()\n    } else {\n      return lazyMintCurated()\n    }\n  }\n\n  const lazyMintCurated = () =>{\n    setState({ loaded: false })\n    library.getSigner(account)\n      .signMessage('Curated Minting: ' + tokenId)\n      .then((signature) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_V2_API + '/mint-curated', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata'\n          },\n          body: JSON.stringify({method: 'buyWithSignedPrice', tokenId: tokenId, signature: signature, chainId: chainId.toString()}),\n        }).then(async function (response){\n          let data = await response.json()\n          alert(0)\n          setCuratedMintingParameters(data)\n          ;(vaultHandlerContract as Contract)\n            .buyWithSignedPrice(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1)\n            .then(({ hash }: { hash: string }) => {\n              setTimeout(() => {\n                setHash(hash)\n                setState({ loaded: true })\n                setShowMakingVaultMsg(true)\n                setMinting(true)\n              }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n            })\n            .catch((error: ErrorWithCode) => {\n              console.log('ERROR', error)\n                setShowMakingVaultMsg(false)\n                setMinting(false)\n                setState({ loaded: true })\n            })          \n        })\n      }).catch((error: ErrorWithCode) => {\n        console.log('ERROR', error)\n          setShowMakingVaultMsg(false)\n          setMinting(false)\n          setState({ loaded: true })\n      })\n  }\n  const lazyMintCuratedWithEth = () =>{\n    setState({ loaded: false })\n    library.getSigner(account)\n      .signMessage(`Curated Minting: ${tokenId.toString()}`)\n      .then((signature) => {\n        fetch(EMBLEM_V2_API + '/mint-curated', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata'\n          },\n          body: JSON.stringify({method: 'buyWithQuote', tokenId: tokenId, signature: signature, chainId: chainId.toString()}),\n        }).then(async function (response){\n          let data = await response.json()\n          if (data.err && data.msg) {\n            alert(data.msg)\n          } else {\n            setCuratedMintingParameters(data)\n            // alert(data._price)\n            ;(quoteContract as Contract)\n              .quoteExternalPrice(account, data._price/1000000).then((ethPrice)=>{\n                let ethToSend = ethPrice.mul(BigNumber.from(10).pow(6))\n                console.log(\"--------   ------\", data._nftAddress, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1, {value: ethToSend})\n                ;(vaultHandlerContract as Contract)\n                  .buyWithQuote(data._nftAddress, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1, {value: ethToSend})\n                  .then(({ hash }: { hash: string }) => {\n                    setTimeout(() => {\n                      setHash(hash)\n                      setState({ loaded: true })\n                      setShowMakingVaultMsg(true)\n                      setMinting(true)\n                    }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n                  })\n                  .catch((error: ErrorWithCode) => {\n                    console.log('ERROR', error)\n                      setShowMakingVaultMsg(false)\n                      setMinting(false)\n                      setState({ loaded: true })\n                  })  \n            })\n          }\n        })\n      }).catch((error: ErrorWithCode) => {\n        console.log('ERROR', error)\n          setShowMakingVaultMsg(false)\n          setMinting(false)\n          setState({ loaded: true })\n      })\n  }\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    const response = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await response.json()\n    console.log('response', response, jsonData)\n    if (jsonData.balances.length > 0) {\n      return cb(jsonData.balances)\n    } else {\n      return cb(values)\n    }\n  }\n\n  const handleApproveForall = () => {\n    setApproving(true)\n    if (targetContract.name) {\n      emblemContract = getCuratedContract(targetContract[chainId])\n      emblemContract.setApprovalForAll(contractAddresses.vaultHandlerV8[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n        }\n      })\n    } else {\n      (emblemContract as Contract)\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n        }\n      })\n    }\n  }\n\n  const getVault = async () => {\n    console.log('getvault')\n    const response = await fetch(EMBLEM_V2_API + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await response.json()\n    setRawMetadata(jsonData)\n    if (jsonData.collectionAddress){\n      setIsCrowdSale(true)\n      setAlternateContractAddress(jsonData.collectionAddress)\n    }\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      console.log(\"--------------- states -\", jsonData)\n      setStates(jsonData)\n      setLoadingApi(false)\n      setInvalidVault(false)\n    }\n    {\n      !vaultPrivacy && !loadedValues ?    \n      getAllBalancesLive([], tokenId, (v)=>{\n        if (v) {\n          setVaultValues(v)\n        }        \n      }) : null\n    }\n  }\n\n  const setStates = (jsonData) => {\n    if (!jsonData.targetAsset && !jsonData.move_targetAsset) {\n      location.href = location.origin + '/nft?id=' + tokenId\n    }\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\"+framed : null\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2)\n    }\n    setMintLockedForever(jsonData.mintLocked && jsonData.mintLockBlock == 0)\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setOwnedImage(jsonData.ownedImage || null)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)): null\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(item=>{return item.trait_type === \"key\"})): null\n    jsonData.attributes ? setAttributes(jsonData.attributes): null\n    setVaultAddresses(jsonData.addresses)\n    setVaultIPFS(jsonData.ipfs || null)\n    setVaultImageIPFS(jsonData.image_ipfs || null)\n    jsonData.targetContract && jsonData.targetContract.tokenId == tokenId && jsonData.targetContract.serialNumber? setIsCuratedMaster(true): null\n    jsonData.targetAsset? setTargetAsset(jsonData.targetAsset) : null\n    jsonData.targetContract? setTargetContract(jsonData.targetContract) : null\n    jsonData.move_targetAsset? setMoveTargetAsset(jsonData.move_targetAsset) : null\n    jsonData.move_targetContract? setMoveTargetContract(jsonData.move_targetContract) : null\n    // jsonData.values && jsonData.targetAsset && jsonData.values.filter(item=>{\n    //   return item.coin.toLowerCase() == jsonData.targetContract.chain && \n    //   item.name == jsonData.targetAsset.name && \n    //   item.project == jsonData.targetContract.name\n    // }).length > 0 ? setCanCuratedMint(true): null\n \n    setLive(jsonData.live == false ? false : true)\n    \n    setNonce(jsonData.nonce)\n    setMintSignature(jsonData.signature)\n    setTo(jsonData.to)\n    setVaultChain(jsonData.network)\n    setVaultChainId(\n      jsonData.network == 'mainnet' ? 1 : \n      jsonData.network == \"rinkeby\" ? 4 : \n      jsonData.network == \"goerli\" ? 5 : \n      jsonData.network == \"mumbai\" ? 80001 : \n      jsonData.network == \"matic\" ? 137 : \n      jsonData.network == \"xdai\" ? 100 : \n      jsonData.network == \"bsc\" ? 56 : \n      jsonData.network == \"fantom\" ? 250 : \n      jsonData.network == \"bitcoin\" ? 0 : \n      jsonData.network == \"aurora\" ? 1313161554 : \n      97\n    )\n    if (!jsonData.live) {\n      console.log(\"check liveliness start\")\n      checkLiveliness(tokenId, jsonData.targetContract || jsonData.move_targetContract, (isLive)=>{\n        setLive(isLive)        \n      })\n    }\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    \n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)    \n    if (jsonData.sealed) {\n      setSealed(true)\n    } else {\n      setSealed(false)\n    }\n  }\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    if (loadedValues) {\n      return cb(false)\n    }\n    setLoadedValues(true)\n    const response = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true' , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await response.json()\n    console.log('response', response, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    const response = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await response.json()\n    console.log('response', response, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword) // Save new state for later\n  }\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword')\n    storedPw && acceptable ? setMintPassword(storedPw) : null //setMintPassword(null)\n  }\n\n  const getSignedJWT = async (signature, tokenId, cb)=>{\n    var myHeaders = new Headers()\n    myHeaders.append('chainid', chainId.toString())\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, tokenId: tokenId })\n    const response = await fetch(SIG_API+'/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await response.json()\n    return cb(jsonData)\n  }\n\n  async function getTorusKeys( verifierId, idToken, cb) {\n    const fetchNodeDetails = new FetchNodeDetails({ network: \"mainnet\" });\n    const torusUtils = new TorusUtils({ enableOneKey: true, network: \"mainnet\" });\n\n    const { torusNodeEndpoints, torusIndexes } = await fetchNodeDetails.getNodeDetails({ verifier: 'tor-us-signer-vercel', verifierId });\n    const { privKey } = await torusUtils.retrieveShares(torusNodeEndpoints, torusIndexes, 'tor-us-signer-vercel', { verifier_id: verifierId }, idToken);\n    return cb({privateKey: privKey});\n  }\n\n  const decryptEmbed = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const response = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await response.json()\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    \n    let _owner\n    try {\n      if (targetContract[chainId]) {\n        let allowedContracts = curatedContracts.filter(contract=>{return contract[chainId] == targetContract[chainId]})\n        if (allowedContracts.length > 0 && allowedContracts[0].allowedName && allowedContracts[0].allowed && vaultValues && vaultValues.length > 0){\n          setCanCuratedMint(\n            allowedContracts[0].allowedName(vaultValues[0].name, setVaultMsg) && \n            allowedContracts[0].allowed(vaultValues[0], setVaultMsg)\n          )\n        } else {\n          setCanCuratedMint(false)\n        }\n        emblemContract = getCuratedContract(targetContract[chainId])\n        setDecimals(await covalContract.decimals())\n        setPrice(250 * Math.pow(10, decimals))\n        setAllowance(\n          await covalContract\n            .allowance(account, contractAddresses.vaultHandlerV8[chainId])\n            .then((balance: { toString: () => string }) => balance.toString())\n        )\n        setBalance(await covalContract.balanceOf(account).then((balance: { toString: () => string }) => balance.toString()))\n        \n        if (Number(allowance) >= Number(price)) {\n          setIsCovalApproved(true)\n        } else {\n          setIsCovalApproved(false)\n        }\n        if (allowedContracts.length > 0) {\n          if (allowedContracts[0].collectionType == 'ERC1155') {\n            let balanceOf = await emblemContract.balanceOf(account, targetContract.tokenId).then((balance: { toString: () => string }) => balance.toString())\n            _owner = Number(balanceOf) > 0 ? account : \"0x0000000000000000000000000000000000000000\"\n            if (Number(balanceOf) > 0) {\n              setOwnedCuratedBalance(balanceOf)\n            }\n          } else {\n            setOwnedCuratedBalance(1)\n            \n            _owner  = await emblemContract.ownerOf(allowedContracts[0].collectionType == 'ERC721a' ? targetContract.tokenId :tokenId)\n            alert(_owner)\n          }\n        } else {\n          _owner = \"0x0000000000000000000000000000000000000000\"\n        }\n      } else {\n        _owner  = await emblemContract.ownerOf(tokenId)\n      }\n      finish()\n    } catch(err){\n      _owner = \"0x0000000000000000000000000000000000000000\"\n      finish()\n    }\n\n    async function finish(){\n      let isApproved\n      if (targetContract[chainId]) {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId])\n        setApproved(isApproved)\n      } else {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId])\n        setApproved(isApproved)\n      }\n      setOwner(_owner)\n      setMine(_owner === account || (to === account && _owner === \"0x0000000000000000000000000000000000000000\"))\n      setMineUnMinted(to === account && _owner === \"0x0000000000000000000000000000000000000000\")\n      loadPasswordFromLocalStorage()\n    }\n    \n  }\n\n  const onRenew = async (name) => { \n    library\n      .getSigner(account)\n      .signMessage('Renew: ' + tokenId)\n      .then((signature) => {\n        let address = vaultAddresses.filter(address=>{ return address.coin == 'NMC'})[0].address\n        console.log('signature', signature, name)\n        fetch(EMBLEM_API + '/nmc/renew/' + address, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata',\n            chainid: chainId.toString()\n          },\n          body: JSON.stringify({\n                \"tokenId\": tokenId,\n                \"signature\": signature,\n                \"name\": name\n              })\n        }).then(async function (response) {\n          let data = await response.json()\n          console.log(\"Requested Renew\", data)\n          \n        })\n      })\n  }\n\n  const approveCovalFlow = () => {\n    setApproving(true)\n    let handlerToApprove = targetContract.name? contractAddresses.vaultHandlerV8[chainId]: contractAddresses.vaultHandler[chainId]\n    ;(covalContract as Contract)\n      .approve(handlerToApprove, '100000000000000')\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code == 4001) {\n          setApproving(false)\n        }\n      })\n  }\n  \n  const handleSign = async () => {\n    let serialNumber\n    if (targetContract[chainId]) {     \n      let allowedContracts = curatedContracts.filter(contract=>{return contract[chainId] == targetContract[chainId]}) \n      emblemContract = getCuratedContract(targetContract[chainId])\n      serialNumber = allowedContracts[0].collectionType == 'ERC1155' ? targetContract.serialNumber : allowedContracts[0].collectionType == 'ERC721a' ? tokenId: targetContract.tokenId     \n    }\n\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + (targetContract[chainId]? serialNumber: tokenId))\n      .then((signature) => {\n        setState({loaded: false})\n        if (mineUnMinted && status != \"claimed\" && !mintLockedForever) {\n          setMintLockedForever(true)\n        }\n        getSignedJWT(signature, tokenId, (token)=>{\n          getTorusKeys(tokenId, token.token, (keys)=>{\n            try {\n              var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey)\n              let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)) \n              setKeyValues(payload.values)\n              setMnemonic(payload.phrase)\n              vaultAddresses.forEach(async address=>{\n                if (address.coin == 'STX') {\n                  address.key = await getSTXKey(address, payload.phrase)\n                } else {\n                  address.key = window.phrasePathToKey(payload.phrase, address.path)\n                }\n                if (address.coin == 'BTC') setPrivKeyBTC(address.key)\n                if (address.coin == 'ETH') setPrivKeyETH(address.key)\n              })\n            } catch(err){\n              alert(err)\n              setTimeout(()=>{location.href = location.href}, 2000)\n            }\n            setState({loaded: true})\n            onOpenKeysModal()\n          })          \n        })\n    })\n  }\n\n  const getSTXKey = async (address: any, phrase: string)=>{\n    const wallet: any = await generateWallet({\n      secretKey: phrase,\n      password: '',\n    })\n    console.log('------ stacks account -', wallet.accounts[0])\n    const account = wallet.accounts[0];\n    address.key = account.stxPrivateKey\n    return address.key\n  }\n\n  const handleHideAsset = async (coin) => {\n    library\n      .getSigner(account)\n      .signMessage('HideAsset: ' + tokenId)\n      .then((signature) => {\n        hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, ()=>{\n          console.log(\"Done hiding coin and getting new balances\")\n        })\n      })\n  }\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/'+tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin? coin: null,\n        \"address\": address? address: null,\n        \"name\": name? name: null,\n        \"signature\": signature? signature: null\n      })\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"-------\", data)\n      getAllBalances([], tokenId, (values)=>{\n        setVaultValues(values)\n        return cb()\n      })\n    }) \n  }\n\n  const handleOwnedEmbed = async () => {\n    library\n      .getSigner(account)\n      .signMessage('Embed: ' + tokenId)\n      .then((signature) => {\n        decryptEmbed(signature, tokenId, (result) => {\n          setVaultImage(result.ownedImage)\n        })\n      })\n  }\n\n  const handleClaim = async () => {\n    let allowedContracts = curatedContracts.filter(contract=>{return contract[chainId] == targetContract[chainId]}) \n    if (targetContract[chainId]) {\n      vaultHandlerContract.claim(targetContract[chainId], allowedContracts[0].collectionType == 'ERC721a'? tokenId: targetContract.tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    } else {\n      emblemContract.burn(tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    }\n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        var num = Math.floor(theLetters.length * Math.random())\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    (account && chainId && vaultChainId && chainId == vaultChainId) || ((query.noLayout && query.noLayout == 'true') || (query.slideshowOnly && query.slideshowOnly == 'true')) ? getContractStates() : null\n  })\n\n  function splitDescription(words) {\n    var desc = words? words.split('\\n\\n\\n\\n'): [\" \"]\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    console.log(vaultAddresses)\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      let ethAddress = vaultAddresses.filter((item) => {return item.coin === 'ETH'})[0].address\n      let btcAddress = vaultAddresses.filter((item) => {return item.coin === 'BTC'})[0].address\n      console.log(\"SUCCESS\", vaultAddresses)\n      getAllBalancesByAddress([], ethAddress, btcAddress, (values)=>{\n        setVaultValues(values)\n      })\n    } catch (err) {console.log('WTF', err)}\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach((item) => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '')\n        item.address = decrypt(cipherText, key)\n      }      \n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  function visitOpenSeaLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : vaultChainId == 5 ? 'testnets.': '') +\n      'opensea.io/assets/' + \n      (vaultChainId == 137 ? 'matic/' : vaultChainId == 5 ? 'goerli/': 'ethereum/') +\n      (alternateContractAddress? alternateContractAddress : targetContract[chainId]? targetContract[chainId]: contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      (targetContract? targetContract.tokenId: tokenId)\n    , '_blank')\n  }\n\n  function visitLooksRareLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' :vaultChainId == 5 ? 'goerli.' : '') +\n      'looksrare.org/collections/' + \n      (vaultChainId == 137 ? 'matic/' : '') +\n      (alternateContractAddress? alternateContractAddress : targetContract? targetContract[chainId]: contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      (targetContract? targetContract.tokenId: tokenId) \n    , '_blank')\n  }\n\n  function visitArcadeLink() {\n    window.open(\n      `https://app.arcade.xyz/terms/asset/${targetContract[vaultChainId]? targetContract[vaultChainId]: contractAddresses.emblemVault[vaultChainId]}/${tokenId}` , '_blank')\n  }\n\n  { alternateContractAddress?\n    emblemContract = getVaultContract(alternateContractAddress? alternateContractAddress: null)\n  : null}\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n        <script\n            dangerouslySetInnerHTML={{\n              __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              if (localStorage.getItem(\"darkMode\") == 'false') {\n                localStorage.setItem(\"darkMode\",\"true\"); location.href = location.href\n              }\n              `,\n            }}\n          />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n        privValues={privValues}\n        addresses={vaultAddresses}\n      />\n      {showOffer ? (\n        <OfferModal\n          isOpen={isOpenOfferModal}\n          onClose={onCloseOfferModal}\n          tokenId={tokenId}\n          mine={mine}\n        />\n      ) : null}\n      \n\n      <Loader loaded={state.loaded}>\n        <Box height=\"40px\"></Box>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault && !slideshowOnly ? (\n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                className=\"NFT\" \n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"blue.500\"\n                >\n                  Vault Network: {CHAIN_ID_NAMES[vaultChainId]}\n                </Box>\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  // textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null}\n                </Box>\n                <Stack className=\"NFT-content\" align=\"center\">                  \n                  <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n                  {mine && ownedImage ? (\n                    <Button onClick={() => {handleOwnedEmbed()}}>(OWNED) Show Full Embed</Button>\n                  ): null}\n                </Stack>\n                <Stack align=\"center\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                    <Stack>\n                    {!live && mine? (\n                       <Text className='warning' color={\"red\"} fontSize=\"s\">{vaultMsg}</Text>\n                    ): null}\n                    { mine && vaultChainId == chainId ? (\n                        <Text fontSize=\"xs\">\n                        \n                          <Link href={\"./vaults?address=\"+owner}>\n                            Owner: {owner}\n                          </Link>\n                        \n                        </Text>\n                    ) : null }\n                      <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" className=\"md\">\n                        <ReactMarkdown plugins={[gfm]} children={splitDescription(vaultDesc)} />\n                      </Text>\n                      \n                    </Stack>                    \n                  </Box>                    \n                </Stack>\n                <Box p=\"6\">\n                {(!isCuratedMaster && !live)  || (curatedContract && curatedContract.showBalance) ? (\n                    <Tabs isFitted variant='enclosed'>\n                      <TabList mb='1em'>\n                        <Tab>Balances</Tab>\n                        <Tab>Attributes</Tab>\n                      </TabList>\n                      <TabPanels>\n                        <TabPanel>\n                          {vaultPrivacy ? (\n                            <Box mb={5}>\n                              <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                                {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                              </Text>\n                              <Input\n                                type=\"password\"\n                                id=\"vault-password\"\n                                onChange={(e) => tryDecrypt(e.target.value)}\n                                aria-describedby=\"password-helper-text\"\n                              />\n                            </Box>\n                          ) : (\n                            <Box d=\"flex\" backgroundColor={colorMode == \"light\"? \"gray.100\": \"gray.700\"} alignItems=\"baseline\" className=\"coin-balance-content\">\n                              <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                                <Text as=\"h4\" mt={2} fontWeight=\"semibold\">\n                                \n                                  Current Contents:  <button\n                                  onClick={() =>{\n                                    getAllBalancesLive([], tokenId, (v)=>{\n                                      setLoadedValues(false)\n                                      setVaultValues(v)\n                                    })\n                                  }}\n                                > [Refresh Balances]</button>\n                                </Text>\n                                <Text as=\"p\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"}>${Number(vaultTotalValue.toFixed(4)).toLocaleString()}</Text>\n                                { vaultValues.length ? (\n                                  vaultValues.map((coin) => {\n                                    return (  \n                                      <Stack> \n                                        <CoinBalance colorMode={colorMode} coin={coin} mine={(status === 'claimed' && claimedBy === account) || mine} onRenew={onRenew} hideAsset={targetAsset.name? false: handleHideAsset}/>\n                                      </Stack>\n                                    )\n                                  })\n                                ) : (<Refreshing /> ) } \n                                { vaultDataValues.length ? (\n                                  vaultDataValues.map((data) => {\n                                    return (\n                                      <Text>Data: {data.attribute_key}</Text>\n                                    )                        \n                                  })\n                                ) : !vaultDataValues.length && !vaultValues.length ? (\n                                  <Text>Nothing in here! Fill 'er up!</Text>\n                                ) : null}\n                              </Box>\n                            </Box>\n                          )}\n                      </TabPanel>\n                        <TabPanel>\n                          <Attributes colorMode={colorMode} attributes={attributes}/>\n                          </TabPanel>\n                        </TabPanels>\n                    </Tabs>\n                  ) : null}   \n                  {(!isCuratedMaster && !vaultPrivacy && !live) || (curatedContract && curatedContract.showBalance)? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                    <ButtonGroup justifyContent=\"space-between\" spacing={6}>\n                      <Stack>\n                        <Text>Deposit Addresses</Text>\n                        <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                          {vaultAddresses.map((addr) => {\n                            return (\n                              <Button\n                                className=\"address_nft_button\"\n\n                                ml={2}\n                                mt={2}\n                                font-weight=\"100 !important\"\n                                key={addr.address}\n                                onClick={() => {\n                                  setCurrCoin(addr.coin)\n                                  setCurrAddr(addr.address)\n                                  onOpenAddrModal()\n                                }}\n                              >\n                                {addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP' : addr.coin}\n                              </Button>\n                            )\n                          })}\n                        </Flex>\n                      </Stack>\n                    </ButtonGroup>\n                    </Box>\n                  ) : null}\n                  {(!(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 137 ))? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      {/* <Stack d=\"flex\" width=\"100%\"> */}\n                        <Button\n                          className=\"nft_button\"\n                          width={mine && vaultChainId == 1? \"33%\" : vaultChainId == 137? \"100%\": \"50%\"}\n                          m={2.5}\n                          mb={5}\n                          onClick={() => {visitOpenSeaLink()}}>\n                            Opensea\n                        </Button>\n\n                        { vaultChainId == 1 ?(\n                          <Button\n                            className=\"nft_button\"\n                            width=\"50%\"\n                            m={5}\n                            onClick={() => {visitLooksRareLink()}}\n                          >\n                            LooksRare\n                          </Button>\n                           ) : null}\n\n                        { mine && vaultChainId == 1? (\n                           <Button\n                           className=\"nft_button\"\n                           width=\"33%\"\n                           m={2.5}\n                           mb={5}\n                           onClick={() => {visitArcadeLink()}}\n                         >\n                           Arcade\n                         </Button>\n                        ): null}    \n\n                        {showOffer? (\n                          <Button className=\"\" onClick={() => { onOpenOfferModal() }}>{mine? ('My Offers') : ('Make an Offer')} (NFT²NFT)</Button>\n                        ) : null}                        \n                    </Box>\n                  ) : null}\n\n                  {/* {mine && !acceptable && !approved ? (<>\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button \n                        backgroundColor={\"#02b402\"}\n                        color={\"black !important\"}\n                        fontWeight={\"bold !important\"}\n                        className=\"nft_button\"\n                        width=\"100%\" onClick={() => {\n                          return handleApproveForall()\n                        }\n                    }> Approve Claiming</Button>\n                    </Box>\n                  </>) : null } */}\n\n                  {mine && targetContract.collectionType != \"ERC721a\"? (\n                    <ApprovalButton\n                      handler={{address: targetContract[chainId]? contractAddresses.vaultHandlerV8[chainId] : contractAddresses.vaultHandler[chainId], abi: targetContract[chainId]? contractAddresses.vaultHandlerV8Abi : contractAddresses.vaultHandlerAbi}} \n                      spending={{address: targetContract[chainId]? targetContract[chainId] : contractAddresses.emblemVault[chainId], abi: targetContract[chainId]? contractAddresses.erc1155Abi: contractAddresses.emblemAbi}}\n                      amount={0}\n                      label = \"Approve Creating / Burning Vaults\"\n                      watcher={setHash}\n                    />\n                  ): null}\n                  \n                  {/* {!isCovalApproved && approved && !approving && mine ? (\n                    <Approval\n                      handler={{address: targetContract[chainId]? contractAddresses.vaultHandlerV8[chainId] : contractAddresses.vaultHandler[chainId], abi: targetContract[chainId]? contractAddresses.vaultHandlerV8Abi : contractAddresses.vaultHandlerAbi}} \n                      spending={{address: targetContract[chainId]? targetContract[chainId] : contractAddresses.emblemVault[chainId], abi: targetContract[chainId]? contractAddresses.erc1155Abi: contractAddresses.emblemAbi}}\n                      amount={0}\n                      label = \"Approve Creating / Burning Vaults\"\n                      watcher={setHash}\n                    />\n                  ):null} */}\n\n                  {!live && !approving && mine && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg ? (\n                      <>\n                        { targetContract.name ? (\n                          <Button width=\"100%\" mt={5} onClick={chooseMintPath} isDisabled = {!canCuratedMint || mintLockedForever}>{mintLockedForever? 'Mint Locked - keys accessed before mint': !canCuratedMint? 'Please load vault to mint':' Mint Vault'} </Button>\n                        ) : null}\n                      </>\n                  ) : null}\n                  \n                  {live && !(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed && approved ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        onClick={() => {\n                          handleClaim()\n                        }}\n                        isDisabled={claiming}\n                      >\n                        {claiming ? 'Claiming ...' : 'Unlock Vault (Get Private Keys)'}\n                      </Button>\n                    </Box>\n                  ) : (vaultChainId === chainId && ((status == 'claimed' || mintLockedForever) && (claimedBy === account || mine))) ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={handleSign}>\n                      Get Keys\n                      </Button>\n                    </Box>\n                  ) : null}\n                {!isCuratedMaster || mine? (\n                  <Stack mt={5}>\n                  <>                \n                    <button className=\"nft_button\" onClick={() => { onAdvancedToggle() }}>Advanced Operations</button>\n                    <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\">\n                      <Collapse width={\"100%\"} isOpen={isAdvancedOpen}>\n\n                        {(vaultChainId === chainId && mineUnMinted && status != 'claimed' && !mintLockedForever ) ? (\n                          <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                            <Button width=\"100%\" onClick={handleSign}>\n                             Get Keys (Unlocking will prevent minting)\n                            </Button>\n                          </Box>\n                        ) : null}\n\n                        {mine || claimedBy == account ? (\n                          <JsonDownloadLink data={rawMetadata} filename={`EmblemVault-${tokenId}.json`} />\n                        ) : null}\n\n                        {(!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? (\n                          <Button width=\"100%\" mt={5} onClick={deleteVault}>Delete Vault </Button>\n                        ) : null}\n\n                      </Collapse>\n                    </Flex>\n                  </>\n                </Stack>  \n                ):null}\n                              \n                \n                </Box>\n                {vaultIPFS ? (\n                    <HStack align=\"center\">\n                      <Link target='new' mb={2} ml={35} href={'https://gateway.ipfs.io/ipfs/'+vaultIPFS} isExternal>View Metadata on IPFS </Link>\n                      {vaultImageIPFS? (\n                        <Link mb={2} href={'https://gateway.ipfs.io/ipfs/'+vaultImageIPFS} isExternal>View Image on IPFS </Link>\n                      ) : null}                      \n                    </HStack> \n                ) : null }\n\n                {sealed ? (\n                    <Box d=\"flex\" mb={2} ml={35} alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Text>*This vault is sealed forever.</Text>\n                    </Box>\n                  ) : null}\n\n                <Stack direction=\"column\" align=\"center\">\n                  {status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n\n                {hash ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    { accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving? \"Handling Approval Flow ...\" : transfering? \"Transfering Vault ...\":  minting? \"Minting Vault\" : \"Waiting for Transaction ...\"}\n                  </Alert>\n                ) : null}\n\n              </Box>\n            </Flex>\n        ) : invalidVault ? (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        ): null}\n        \n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming && !accepting && !preTransfering) {\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                location.href = location.origin + '/nft2?id=' + tokenId\n              } else if (preTransfering) {\n                savePasswordToLocalStorage()\n                setShowTransferPassword(true)\n                setPreTransfering(false)\n                setHash(null)                \n              } else if(accepting) {\n                setAccepting(false)                \n                getVault()\n                setHash(null)\n              } else if(approving) {\n                setApproving(false)\n                getVault()\n                setHash(null)\n              } else if(transfering) {\n                setTransfering(false)\n                getVault()\n                setHash(null)\n              } else if(minting || showMakingVaultMsg) {\n                  setMinting(false)\n                  setHash(null)\n                  setShowMakingVaultMsg(false)\n                  location.href = location.origin + '/nft2?id=' + tokenId\n              } else {     \n                location.href = location.origin + '/nft2?id=' + tokenId \n              }\n            }}\n          />\n        ) : null}\n        <Box height=\"40px\"></Box>\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}