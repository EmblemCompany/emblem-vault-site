{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Search.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Flex, Text, Link, Stack, Button, FormControl, FormLabel, Input, FormHelperText } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport { Embed } from './Embed';\nexport default function Search() {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: q,\n    1: setQ\n  } = useState(query.q);\n  const {\n    0: temp_q,\n    1: setTempQ\n  } = useState(q || '');\n\n  const getVaults = async () => {\n    // loadCache()\n    setLoadingApi(true);\n\n    try {\n      const response = await fetch(EMBLEM_API + '/search', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          q: q\n        })\n      });\n      const jsonData = await response.json();\n      setState({\n        loaded: true\n      });\n      setVaults(jsonData); // saveCache(jsonData)\n\n      setLoadingApi(false); // console.log(jsonData)\n    } catch (error) {}\n  }; // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_allvaults')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_allvaults', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n\n  useEffect(() => {\n    console.log(q, state, loadingApi);\n\n    if (q && !state.loaded && !loadingApi) {\n      console.log(\"Load Search\");\n      getVaults();\n    } // if (q && !state.loaded && !loadingApi) {\n    //   setState({ loaded: false })\n    //   getVaults()\n    // }\n\n  });\n  return __jsx(Loader, {\n    loaded: state.loaded || !q,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"search-query\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"Search\"), __jsx(Input, {\n    type: \"text\",\n    id: \"search-query\",\n    \"aria-describedby\": \"search-query-helper-text\",\n    placeholder: \"0xdeadbeef\",\n    maxLength: 42,\n    value: temp_q,\n    onChange: e => setTempQ(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), __jsx(Button, {\n    onClick: () => {\n      setQ(temp_q);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, \"Search\"), __jsx(FormHelperText, {\n    id: \"search-query-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"Search Name, Description, Type, Contents\"))), __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, vaults.length ? vaults.map((vault, index) => {\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n    let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId;\n    const flexSettings = {\n      flex: '1',\n      minW: '300px',\n      maxW: '300px',\n      borderWidth: '1px',\n      color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    const redirect = function () {\n      location.href = url;\n    };\n\n    return __jsx(Box, _extends({\n      key: index\n    }, flexSettings, {\n      onClick: redirect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }), __jsx(Text, {\n      fontWeight: \"semibold\",\n      textAlign: \"center\",\n      mt: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, vault.name, !vault.private ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, __jsx(Embed, {\n      url: vault.image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 19\n      }\n    })), __jsx(Box, {\n      d: \"flex\",\n      alignItems: \"baseline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, __jsx(Box, {\n      color: \"gray.500\",\n      fontWeight: \"semibold\",\n      letterSpacing: \"wide\",\n      fontSize: \"sm\",\n      ml: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 19\n      }\n    }, vault.private ? __jsx(React.Fragment, null, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }\n    }, \"Contents hidden. Click to view the vault and unlock values.\")) : vault.values.length ? vault.values.map((coin, index) => {\n      if (index < 4) return __jsx(Text, {\n        key: coin.name,\n        isTruncated: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 29\n        }\n      }, coin.name, \": \", coin.balance);else if (index == 4) return __jsx(Text, {\n        fontWeight: \"bold\",\n        mt: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 29\n        }\n      }, \"... Click to see the rest ...\");\n    }) : __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 27\n      }\n    }, \"Nothing in here! \", __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 46\n      }\n    }), \"Click to fill 'er up!\"))), __jsx(Stack, {\n      align: \"center\",\n      mt: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, vault.status == 'claimed' ? __jsx(Text, {\n      color: \"green.500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 48\n      }\n    }, \"CLAIMED\") : null));\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }, \"Search Resulted in 0 Vaults.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, \"CREATE ONE HERE!\"))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Search.tsx"],"names":["Box","Flex","Text","Link","Stack","Button","FormControl","FormLabel","Input","FormHelperText","Loader","Refreshing","useRouter","useEffect","useState","EMBLEM_API","Embed","Search","query","vaults","setVaults","state","setState","loaded","loadingApi","setLoadingApi","q","setQ","temp_q","setTempQ","getVaults","response","fetch","method","headers","service","body","JSON","stringify","jsonData","json","error","console","log","e","target","value","length","map","vault","index","pieces","location","pathname","split","pop","url","origin","join","tokenId","flexSettings","flex","minW","maxW","borderWidth","color","mx","mb","rounded","overflow","borderColor","status","cursor","redirect","href","name","private","totalValue","image","values","coin","balance"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, FormControl, FormLabel, Input, FormHelperText } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { EMBLEM_API } from '../constants'\nimport { Embed } from './Embed'\nimport { setTimeout } from 'timers'\n\nexport default function Search() {\n  const { query } = useRouter()\n  const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [q, setQ] = useState(query.q)\n  const [temp_q, setTempQ] = useState(q || '')\n  const getVaults = async () => {\n    // loadCache()\n    setLoadingApi(true)\n    try {      \n      const response = await fetch(EMBLEM_API + '/search', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({q: q})\n      })\n      const jsonData = await response.json()\n      setState({ loaded: true })\n      setVaults(jsonData)\n      // saveCache(jsonData)\n      setLoadingApi(false)\n      // console.log(jsonData)\n    } catch (error) {}\n  }\n\n  // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_allvaults')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_allvaults', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n\n  useEffect(() => {\n    console.log(q, state, loadingApi)\n    if (q && !state.loaded && !loadingApi) {\n      console.log(\"Load Search\")\n      getVaults()\n    }\n    // if (q && !state.loaded && !loadingApi) {\n    //   setState({ loaded: false })\n    //   getVaults()\n    // }\n  })\n\n  return (\n    <Loader loaded={state.loaded || !q}>\n      {loadingApi ? <Refreshing /> : ''}\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n      <FormControl isRequired>\n        <FormLabel htmlFor=\"search-query\">Search</FormLabel>\n        <Input\n          type=\"text\"\n          id=\"search-query\"\n          aria-describedby=\"search-query-helper-text\"\n          placeholder=\"0xdeadbeef\"\n          maxLength={42}\n          value={temp_q}\n          onChange={(e) =>\n              setTempQ(e.target.value)              \n          }\n        />\n        <Button \n          onClick={ ()=>{\n            setQ(temp_q)            \n          }}\n        >Search</Button>\n        <FormHelperText id=\"search-query-helper-text\">\n          Search Name, Description, Type, Contents\n        </FormHelperText>\n      </FormControl>\n      </Flex>\n      <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\" mt={10}>\n        {vaults.length ? (\n          vaults.map((vault, index) => {\n            let pieces = location.pathname.split('/')\n            pieces.pop()\n            let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId\n            const flexSettings = {\n              flex: '1',\n              minW: '300px',\n              maxW: '300px',\n              borderWidth: '1px',\n              color: 'white',\n              mx: '6',\n              mb: '6',\n              rounded: 'lg',\n              overflow: 'hidden',\n              borderColor: vault.status == 'claimed' ? 'green !important' : '',\n              cursor: 'pointer',\n            }\n            const redirect = function () {\n              location.href = url\n            }\n            return (\n              <Box key={index} {...flexSettings} onClick={redirect}>\n                <Text fontWeight=\"semibold\" textAlign=\"center\" mt={2}>\n                  {vault.name}\n                  {!vault.private ? ': ~$' + vault.totalValue : null}\n                </Text>\n                <Stack align=\"center\">\n                  <Embed url={vault.image}/>\n                </Stack>\n                <Box d=\"flex\" alignItems=\"baseline\">\n                  <Box color=\"gray.500\" fontWeight=\"semibold\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                    {vault.private ? (\n                      <>\n                        <Text>Contents hidden. Click to view the vault and unlock values.</Text>\n                      </>\n                    ) : vault.values.length ? (\n                      vault.values.map((coin, index) => {\n                        if (index < 4)\n                          return (\n                            <Text key={coin.name} isTruncated>\n                              {coin.name}: {coin.balance}\n                            </Text>\n                          )\n                        else if (index == 4)\n                          return (\n                            <Text fontWeight=\"bold\" mt={2}>\n                              ... Click to see the rest ...\n                            </Text>\n                          )\n                      })\n                    ) : (\n                          <Text>\n                            Nothing in here! <br />\n                        Click to fill 'er up!\n                          </Text>\n                        )}\n                  </Box>\n                </Box>\n                <Stack align=\"center\" mt={3}>\n                  {vault.status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n              </Box>\n            )\n          })\n        ) : (\n          <Text>\n            Search Resulted in 0 Vaults.{' '}\n            <Link color=\"#638cd8\" href=\"../create\">\n              CREATE ONE HERE!\n            </Link>\n          </Text>\n        )}\n      </Flex>\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}