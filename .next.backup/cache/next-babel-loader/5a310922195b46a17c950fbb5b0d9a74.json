{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure } from '@chakra-ui/core';\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { validImage } from '../utils';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport Tilt from 'react-tilt';\nimport CryptoJS from 'crypto-js';\nconst AddrModal = dynamic(() => import('./AddrModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./AddrModal')],\n    modules: ['./AddrModal']\n  }\n});\nconst KeysModal = dynamic(() => import('./KeysModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./KeysModal')],\n    modules: ['./KeysModal']\n  }\n});\nexport default function Nft() {\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    query\n  } = useRouter();\n  const {\n    0: mintPassword,\n    1: setMintPassword\n  } = useState('');\n  const {\n    0: tokenId,\n    1: setTokenId\n  } = useState(query.id);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState('');\n  const {\n    0: vaultDesc,\n    1: setVaultDesc\n  } = useState('');\n  const {\n    0: vaultImage,\n    1: setVaultImage\n  } = useState('');\n  const {\n    0: vaultValues,\n    1: setVaultValues\n  } = useState([]);\n  const {\n    0: vaultAddresses,\n    1: setVaultAddresses\n  } = useState([]);\n  const {\n    0: vaultPrivacy,\n    1: setVaultPrivacy\n  } = useState(false);\n  const {\n    0: vaultTotalValue,\n    1: setVaultTotalValue\n  } = useState(0);\n  const {\n    0: vaultChainId,\n    1: setVaultChainId\n  } = useState(null);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: currCoin,\n    1: setCurrCoin\n  } = useState('');\n  const {\n    0: currAddr,\n    1: setCurrAddr\n  } = useState('');\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: mine,\n    1: setMine\n  } = useState(false);\n  const {\n    0: claiming,\n    1: setClaiming\n  } = useState(false);\n  const {\n    0: status,\n    1: setStatus\n  } = useState('claimed');\n  const {\n    0: claimedBy,\n    1: setClaimedBy\n  } = useState(null);\n  const {\n    0: mnemonic,\n    1: setMnemonic\n  } = useState('');\n  const {\n    0: privKeyBTC,\n    1: setPrivKeyBTC\n  } = useState('');\n  const {\n    0: privKeyETH,\n    1: setPrivKeyETH\n  } = useState('');\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: decryptedEffect,\n    1: setDecryptedEffect\n  } = useState('');\n  const {\n    0: decryptedEffectRunning,\n    1: setDecryptedEffectRunning\n  } = useState(false);\n  const {\n    0: decryptPassword,\n    1: setDecryptPassword\n  } = useState('');\n  const {\n    0: invalidVault,\n    1: setInvalidVault\n  } = useState(false);\n  const {\n    0: hasCheckedNft,\n    1: setHasCheckedNft\n  } = useState(false);\n  const {\n    0: accepting,\n    1: setAccepting\n  } = useState(false);\n  const {\n    0: acceptable,\n    1: setAcceptable\n  } = useState(false);\n  const {\n    0: transferPassword,\n    1: setTransferPassword\n  } = useState('');\n  const {\n    0: showTransferPassword,\n    1: setShowTransferPassword\n  } = useState(false); // const [transferImage, setTransferImage] = useState('')\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  const {\n    isOpen: isOpenAddrModal,\n    onOpen: onOpenAddrModal,\n    onClose: onCloseAddrModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenKeysModal,\n    onOpen: onOpenKeysModal,\n    onClose: onCloseKeysModal\n  } = useDisclosure();\n  let transferImage;\n\n  const fireMetaMask = () => {\n    ;\n    handlerContract.transferWithCode(tokenId, mintPassword).then(({\n      hash\n    }) => {\n      setTimeout(() => {\n        setHash(hash);\n        setAccepting(true); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(`tx failed.`, error);\n      } else {\n        setAccepting(false); // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\" + transferImage);\n    handlerContract.addPreTransfer(tokenId, \"0x\" + transferImage).then(({\n      hash\n    }) => {\n      setTimeout(() => {\n        setHash(hash);\n        setAccepting(true); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(`tx failed.`, error);\n      } else {\n        setAccepting(false); // setShowPreVaultMsg(false)\n      }\n    });\n  }; // \n\n\n  const getVault = async () => {\n    loadCache();\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json(); // console.log('vault response was ', jsonData)\n\n    if (!jsonData.name) {\n      setState({\n        loaded: true\n      });\n      setInvalidVault(true);\n    } else {\n      setStates(jsonData);\n      saveCache(jsonData);\n      setLoadingApi(false);\n      setInvalidVault(false);\n    }\n  };\n\n  const setStates = jsonData => {\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    setVaultValues(vaultValues.concat(jsonData.values));\n    setVaultDesc(jsonData.description);\n    setVaultAddresses(jsonData.addresses);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : 80001);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    } // console.log('inside getstates. mine is ', mine)\n\n\n    setState({\n      loaded: true\n    });\n    let isPvt = jsonData.addresses.filter(item => {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n    setTimeout(() => {\n      !isPvt ? getNftBalance(jsonData.values, jsonData.addresses.filter(item => {\n        return item.coin === 'ETH';\n      })[0].address, _values => {\n        // console.log(\"Have new values\", _values)\n        setVaultValues(_values);\n      }) : null;\n    }, 5);\n  };\n\n  const loadCache = () => {\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  const getEthBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json(); // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n\n    setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue)); // console.log('get eth balances', jsonData.values)\n\n    return cb(jsonData.values);\n  };\n\n  const getBtcBalance = async (values, address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json(); // setVaultValues(values.concat(jsonData.values))\n\n    return cb(values.concat(jsonData.values));\n  };\n\n  const getNftBalance = async (values, address, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n\n    if (jsonData.length > 0) {\n      // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n      return cb(values.concat(jsonData));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const saveCache = vault => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature\n    });\n    const responce = await fetch(EMBLEM_API + '/verify/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json(); // console.log('getKeys response is ', jsonData)\n\n    return cb(jsonData);\n  };\n\n  const getContractStates = async () => {\n    let owned = false;\n\n    try {\n      let owner = await emblemContract.ownerOf(tokenId);\n      let acceptable = await handlerContract.getPreTransfer(tokenId);\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\");\n      console.log(\"owned\", owner === account);\n      setMine(owner === account);\n    } catch (err) {}\n  };\n\n  useEffect(() => {\n    console.log(\"mine?\", mine);\n    console.log(\"claiming?\", claiming);\n    console.log(\"accepting?\", accepting);\n  });\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library.getSigner(account).signMessage('Claim: ' + tokenId).then(signature => {\n      getKeys(signature, tokenId, result => {\n        // console.log('HandleSign response is ' + result)\n        setMnemonic(result.decrypted.phrase);\n        setPrivKeyBTC(result.decrypted.keys.filter(key => {\n          return key.coin === 'btc';\n        })[0].privkey);\n        setPrivKeyETH(result.decrypted.keys.filter(key => {\n          return key.coin === 'eth';\n        })[0].privkey);\n        onOpenKeysModal();\n      });\n    });\n  };\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({\n      hash\n    }) => {\n      setClaiming(true);\n      setTimeout(() => {\n        setHash(hash);\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    });\n  };\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return;\n    }\n\n    setDecryptedEffectRunning(true);\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n    var ctnt = 'Decrypting'; // Your text goes here\n\n    var speed = 5; // ms per frame\n\n    var increment = 8; // frames per step. Must be >2\n\n    var clen = ctnt.length;\n    var si = 0;\n    var stri = 0;\n    var block = '';\n    var fixed = '';\n\n    (function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i);\n        } else {\n          setDecryptedEffectRunning(false);\n        }\n\n        nextFrame(i);\n        si = si + 1;\n      }, speed);\n    })(clen * increment + 1);\n\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n        var letter = theLetters.charAt(num);\n        block = block + letter;\n      }\n\n      if (si == increment - 1) {\n        stri++;\n      }\n\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1);\n        si = 0;\n      } // $(\"#output\").html(fixed + block);\n\n\n      setDecryptedEffect(fixed + block);\n      block = '';\n    }\n  };\n\n  useEffect(() => {\n    getVault();\n  }, []);\n  useEffect(() => {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null; // console.log('in the usefeect that clls getcontractstates')\n  });\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n');\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    let ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      getEthBalances(vaultAddresses.filter(item => {\n        return item.coin === 'ETH';\n      })[0].address, values => {\n        getBtcBalance(values, vaultAddresses.filter(item => {\n          return item.coin === 'BTC';\n        })[0].address, _values => {\n          // console.log(\"Have fucking values\", values)\n          getNftBalance(_values, vaultAddresses.filter(item => {\n            return item.coin === 'ETH';\n          })[0].address, __values => {\n            setVaultValues(__values.concat(vaultValues));\n          });\n        });\n      });\n    } catch (err) {}\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(item => {\n      let cipherText = item.address.replace('private:', '');\n      item.address = decrypt(cipherText, key);\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }\n  }), __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault ? __jsx(Tilt, {\n    className: \"Tilt\",\n    options: {\n      max: experimental ? 19 : 0,\n      scale: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 11\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 15\n    }\n  }, vaultChainId != chainId ? __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"orange.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 19\n    }\n  }, \"BEWARE: Vault is on a different network than you are.\") : null, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy ? ': ~$' + vaultTotalValue : null), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 17\n    }\n  }, __jsx(Image, {\n    src: validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png',\n    width: \"250px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 19\n    }\n  })), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 19\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 21\n    }\n  }, splitDescription(vaultDesc)))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 19\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 23\n    }\n  }, \"Current Contents:\"), vaultPrivacy ? __jsx(React.Fragment, null, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 27\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: e => tryDecrypt(e.target.value),\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 27\n    }\n  })) : vaultValues.length ? vaultValues.map(coin => {\n    return __jsx(Text, {\n      key: coin.name,\n      isTruncated: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 29\n      }\n    }, __jsx(Image, {\n      width: 10,\n      src: coin.image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 31\n      }\n    }), coin.name, \" :\", ' ', coin.balance ? coin.balance : coin.type == 'nft' ? __jsx(Link, {\n      href: coin.external_url,\n      isExternal: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 33\n      }\n    }, \"View NFT\") : null);\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 25\n    }\n  }, \"Nothing in here! Fill 'er up!\"))), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 23\n    }\n  }, vaultAddresses.map(addr => {\n    return __jsx(Button, {\n      key: addr.address,\n      onClick: () => {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 29\n      }\n    }, \"Put \", addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin, \" In\");\n  }))) : null, !(status === 'claimed') ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 21\n    }\n  }, __jsx(Button, _extends({\n    width: \"100%\",\n    as: \"a\"\n  }, {\n    href: 'https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + contractAddresses.emblemVault[vaultChainId] + '/' + tokenId,\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 23\n    }\n  }), mine ? 'Sell/Gift/Send' : 'Make an Offer')) : null, mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      let key = CryptoJS.lib.WordArray.random(128 / 8).toString();\n      let sha = CryptoJS.SHA256(key).toString();\n      console.log('plain', key);\n      console.log('sha', sha);\n      setTransferPassword(key);\n      transferImage = sha;\n      setShowTransferPassword(!showTransferPassword ? true : false);\n      setTimeout(() => {\n        addPreTransfer();\n      }, 500);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 23\n    }\n  }, \" Get Gift Link \")), showTransferPassword ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 48\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 53\n    }\n  }, transferImage, \" : \", transferPassword)) : null) : null, acceptable && claimedBy !== account ? __jsx(React.Fragment, null, __jsx(Button, {\n    mt: 2,\n    width: \"100%\",\n    onClick: () => {\n      fireMetaMask();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 23\n    }\n  }, \"Accept\"), __jsx(Input, {\n    mt: 2,\n    type: \"password\",\n    id: \"mintPassword\",\n    minLength: 3,\n    maxLength: 200,\n    value: mintPassword,\n    onChange: e => setMintPassword(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 23\n    }\n  })) : null, !(status === 'claimed') && account && vaultChainId === chainId && mine ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      handleClaim();\n    },\n    isDisabled: claiming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 23\n    }\n  }, claiming ? 'Claiming ...' : 'Claim')) : status === 'claimed' && claimedBy === account && vaultChainId === chainId ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 23\n    }\n  }, \"Get Keys\")) : null), __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 17\n    }\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 640,\n      columnNumber: 42\n    }\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 21\n    }\n  }), accepting ? \"Accepting your vault\" : \"Claiming your vault ...\") : null))) : __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      // location.href = location.origin + '/vault?id=' + tokenId\n      if (claiming && !accepting) {\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account);\n        handleSign();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 11\n    }\n  }) : null));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","Link","Alert","AlertIcon","useDisclosure","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","Loader","dynamic","validImage","TransactionToast","EMBLEM_API","BURN_ADDRESS","contractAddresses","useContract","Tilt","CryptoJS","AddrModal","KeysModal","Nft","account","chainId","library","query","mintPassword","setMintPassword","tokenId","setTokenId","id","experimental","setExperimental","vaultName","setVaultName","vaultDesc","setVaultDesc","vaultImage","setVaultImage","vaultValues","setVaultValues","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","state","setState","loaded","mine","setMine","claiming","setClaiming","status","setStatus","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","hasCheckedNft","setHasCheckedNft","accepting","setAccepting","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","handlerContract","vaultHandler","vaultHandlerAbi","emblemContract","emblemVault","emblemAbi","isOpen","isOpenAddrModal","onOpen","onOpenAddrModal","onClose","onCloseAddrModal","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","transferImage","fireMetaMask","transferWithCode","then","setTimeout","catch","error","code","console","log","addPreTransfer","getVault","loadCache","responce","fetch","method","headers","service","jsonData","json","name","setStates","saveCache","image","description","totalValue","concat","values","addresses","network","isPvt","filter","item","address","includes","length","getNftBalance","coin","_values","vault","JSON","parse","localStorage","getItem","getEthBalances","cb","Number","getBtcBalance","setItem","stringify","getKeys","signature","myHeaders","Headers","append","toString","raw","body","redirect","getContractStates","owned","owner","ownerOf","getPreTransfer","_from","err","handleSign","getSigner","signMessage","result","decrypted","phrase","keys","key","privkey","handleClaim","transferFrom","startDecryptEffect","theLetters","ctnt","speed","increment","clen","si","stri","block","fixed","rustle","i","nextFrame","pos","num","Math","floor","random","letter","charAt","splitDescription","words","desc","split","trim","tryDecrypt","ciphertext","replace","bytes","AES","decrypt","enc","Utf8","decryptAddresses","__values","forEach","cipherText","decryptedData","max","scale","e","target","value","map","balance","type","external_url","addr","href","rel","lib","WordArray","sha","SHA256"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n} from '@chakra-ui/core'\n\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\nimport CryptoJS from 'crypto-js'\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\n\nexport default function Nft() {\n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [mintPassword, setMintPassword] = useState('')\n  const [tokenId, setTokenId] = useState(query.id)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [hasCheckedNft, setHasCheckedNft] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n  // const [transferImage, setTransferImage] = useState('')\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  let transferImage;\n\n  const fireMetaMask = () => {\n    ;(handlerContract as Contract)\n      .transferWithCode(tokenId, mintPassword)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n          setAccepting(true)\n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\"+transferImage)\n    ;(handlerContract as Contract)\n      .addPreTransfer(tokenId, \"0x\"+transferImage)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n          setAccepting(true)\n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  // \n\n  const getVault = async () => {\n    loadCache()\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log('vault response was ', jsonData)\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      setStates(jsonData)\n      saveCache(jsonData)\n      setLoadingApi(false)\n      setInvalidVault(false)\n    }\n  }\n\n  const setStates = (jsonData) => {\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    setVaultValues(vaultValues.concat(jsonData.values))\n    setVaultDesc(jsonData.description)\n    setVaultAddresses(jsonData.addresses)\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : 80001)\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    // console.log('inside getstates. mine is ', mine)\n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)\n    setTimeout(() => {\n      !isPvt ?\n      getNftBalance(\n        jsonData.values,\n        jsonData.addresses.filter((item) => {\n          return item.coin === 'ETH'\n        })[0].address,\n        (_values) => {\n          // console.log(\"Have new values\", _values)\n          setVaultValues(_values)\n        }\n      ) : null\n    }, 5)\n  }\n\n  const loadCache = () => {\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')) // Load vaults from storage before updating from server!\n    if (vault) {\n      setState({ loaded: true })\n      setStates(vault)\n      setLoadingApi(true)\n    }\n  }\n\n  const getEthBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n    return cb(jsonData.values)\n  }\n\n  const getBtcBalance = async (values, address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // setVaultValues(values.concat(jsonData.values))\n    return cb(values.concat(jsonData.values))\n  }\n\n  const getNftBalance = async (values, address, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    if (jsonData.length > 0) {\n      // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n      return cb(values.concat(jsonData))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const saveCache = (vault) => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)) // Save new state for later\n  }\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/verify/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    // console.log('getKeys response is ', jsonData)\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    let owned = false\n    try {\n      let owner  = await emblemContract.ownerOf(tokenId)\n      let acceptable = await handlerContract.getPreTransfer(tokenId)\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n      console.log(\"owned\", owner === account)\n      setMine(owner === account)\n    } catch(err){}\n    \n  }\n\n  useEffect(()=>{\n    console.log(\"mine?\", mine)\n    console.log(\"claiming?\", claiming)\n    console.log(\"accepting?\", accepting)\n  })\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + tokenId)\n      .then((signature) => {\n        getKeys(signature, tokenId, (result) => {\n          // console.log('HandleSign response is ' + result)\n          setMnemonic(result.decrypted.phrase)\n          setPrivKeyBTC(\n            result.decrypted.keys.filter((key) => {\n              return key.coin === 'btc'\n            })[0].privkey\n          )\n          setPrivKeyETH(\n            result.decrypted.keys.filter((key) => {\n              return key.coin === 'eth'\n            })[0].privkey\n          )\n          onOpenKeysModal()\n        })\n      })\n  }\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({ hash }: { hash: string }) => {\n      setClaiming(true)\n      setTimeout(() => {\n        setHash(hash)\n      }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    })\n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random())\n        //Get random letter\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      // $(\"#output\").html(fixed + block);\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null\n    // console.log('in the usefeect that clls getcontractstates')\n  })\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n')\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      getEthBalances(\n        vaultAddresses.filter((item) => {\n          return item.coin === 'ETH'\n        })[0].address,\n        (values) => {\n          getBtcBalance(\n            values,\n            vaultAddresses.filter((item) => {\n              return item.coin === 'BTC'\n            })[0].address,\n            (_values) => {\n              // console.log(\"Have fucking values\", values)\n              getNftBalance(\n                _values,\n                vaultAddresses.filter((item) => {\n                  return item.coin === 'ETH'\n                })[0].address,\n                (__values) => {\n                  setVaultValues(__values.concat(vaultValues))\n                }\n              )\n            }\n          )\n        }\n      )\n    } catch (err) {}\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach((item) => {\n      let cipherText = item.address.replace('private:', '')\n      item.address = decrypt(cipherText, key)\n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n      />\n\n      <Loader loaded={state.loaded}>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault ? (\n          <Tilt className=\"Tilt\" options={{ max: experimental ? 19 : 0, scale: 1 }}>\n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                {vaultChainId != chainId ? (\n                  <Box\n                    mt=\"1\"\n                    fontWeight=\"semibold\"\n                    as=\"h3\"\n                    lineHeight=\"tight\"\n                    p={2}\n                    textAlign=\"center\"\n                    textTransform=\"uppercase\"\n                    alignItems=\"center\"\n                    color=\"orange.500\"\n                  >\n                    BEWARE: Vault is on a different network than you are.\n                  </Box>\n                ) : null}\n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy ? ': ~$' + vaultTotalValue : null}\n                </Box>\n                <Stack align=\"center\">\n                  <Image\n                    src={validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png'}\n                    width=\"250px\"\n                  />\n                </Stack>\n                <Stack align=\"center\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                    <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" >\n                      {splitDescription(vaultDesc)}\n                    </Text>\n                  </Box>\n                </Stack>\n                <Box p=\"6\">\n                  <Box d=\"flex\" alignItems=\"baseline\">\n                    <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                      <Text as=\"h4\" fontWeight=\"semibold\">\n                        Current Contents:\n                      </Text>\n                      {vaultPrivacy ? (\n                        <>\n                          <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                            {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                          </Text>\n                          <Input\n                            type=\"password\"\n                            id=\"vault-password\"\n                            onChange={(e) => tryDecrypt(e.target.value)}\n                            aria-describedby=\"password-helper-text\"\n                          />\n                        </>\n                      ) : vaultValues.length ? (\n                        vaultValues.map((coin) => {\n                          return (                            \n                            <Text key={coin.name} isTruncated>\n                              <Image width={10} src={coin.image}/>\n                              {coin.name} :{' '}\n                              {coin.balance ? (\n                                coin.balance\n                              ) : coin.type == 'nft' ? (\n                                <Link href={coin.external_url} isExternal>\n                                  View NFT\n                                </Link>\n                              ) : null}\n                            </Text>\n                          )\n                        })\n                      ) : (\n                        <Text>Nothing in here! Fill 'er up!</Text>\n                      )}\n                    </Box>\n                  </Box>\n                  {!vaultPrivacy ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <ButtonGroup justifyContent=\"space-between\" spacing={6}>\n                        {vaultAddresses.map((addr) => {\n                          return (\n                            <Button\n                              key={addr.address}\n                              onClick={() => {\n                                setCurrCoin(addr.coin)\n                                setCurrAddr(addr.address)\n                                onOpenAddrModal()\n                              }}\n                            >\n                              Put {addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin} In\n                            </Button>\n                          )\n                        })}\n                      </ButtonGroup>\n                    </Box>\n                  ) : null}\n\n                  {!(status === 'claimed') ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        as=\"a\"\n                        {...{\n                          href:\n                            'https://' +\n                            (vaultChainId == 4 ? 'rinkeby.' : '') +\n                            'opensea.io/assets/' +\n                            contractAddresses.emblemVault[vaultChainId] +\n                            '/' +\n                            tokenId,\n                          target: '_blank',\n                          rel: 'noopener noreferrer',\n                        }}\n                      >\n                        {mine ? 'Sell/Gift/Send' : 'Make an Offer'}\n                      </Button>\n                    </Box>\n                  ) : null}\n                  {mine && !acceptable ? (<>\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={() => {\n                        let key = CryptoJS.lib.WordArray.random(128/8).toString()\n                        let sha = CryptoJS.SHA256(key).toString()\n                        console.log('plain', key)\n                        console.log('sha', sha)\n                        setTransferPassword(key)\n                        transferImage = sha\n                        setShowTransferPassword(!showTransferPassword? true : false)\n                        setTimeout(()=>{\n                          addPreTransfer()\n                        }, 500)                        \n                      }\n                        }> Get Gift Link </Button>\n                      {/* {showTransferPassword ? ( <Input ml={2} placeholder=\"Password\" width=\"100%\" onChange={(e)=>setTransferPassword(CryptoJS.lib.WordArray.random(128/8).toString('hex'))} />) : null } */}\n                    </Box>\n                      {showTransferPassword ? (<Box><Text>{transferImage} : {transferPassword}</Text></Box>) : null}\n                  </>) : null }\n                  {acceptable && claimedBy !== account ? (\n                  <>                    \n                      <Button mt={2} width=\"100%\" onClick={()=>{fireMetaMask()}}>Accept</Button>\n                      <Input\n                        mt={2}\n                        type=\"password\"\n                        id=\"mintPassword\"\n                        minLength={3}\n                        maxLength={200}\n                        value={mintPassword}\n                        onChange={(e) => setMintPassword(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                  </>\n                    ) : null}\n\n                  {!(status === 'claimed') && account && vaultChainId === chainId && mine ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        onClick={() => {\n                          handleClaim()\n                        }}\n                        isDisabled={claiming}\n                      >\n                        {claiming ? 'Claiming ...' : 'Claim'}\n                      </Button>\n                    </Box>\n                  ) : status === 'claimed' && claimedBy === account && vaultChainId === chainId ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={handleSign}>\n                        Get Keys\n                      </Button>\n                    </Box>\n                  ) : null}\n                </Box>\n                <Stack direction=\"column\" align=\"center\">\n                  {status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n                {hash ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    { accepting ? \"Accepting your vault\" : \"Claiming your vault ...\"}\n                  </Alert>\n                ) : null}\n              </Box>\n            </Flex>\n          </Tilt>\n        ) : (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        )}\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              // location.href = location.origin + '/vault?id=' + tokenId\n              if (claiming && !accepting) {\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                handleSign()\n              }\n            }}\n          />\n        ) : null}\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}