{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/partials/BridgeDeposits.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useWeb3React } from '@web3-react/core';\nimport { useState } from 'react';\nimport { EMBLEM_API } from '../../constants';\nimport { fromContractValue, CHAIN_ID_NAMES } from '../../utils';\nvar useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  }\n});\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return {\n    name: name,\n    calories: calories,\n    fat: fat,\n    carbs: carbs,\n    protein: protein\n  };\n}\n\nvar rows = [//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  //   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  //   createData('Eclair', 262, 16.0, 24, 6.0),\n  //   createData('Cupcake', 305, 3.7, 67, 4.3),\n  //   createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\nexport default function BridgeDeposits(props) {\n  _s();\n\n  var _this = this;\n\n  var previousChainId;\n  React.useEffect(function () {\n    console.log(\"changing\", props.chainId, previousChainId);\n    previousChainId = props.chainId;\n  });\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account;\n\n  var _useState = useState(false),\n      showPending = _useState[0],\n      setShowPending = _useState[1];\n\n  var _useState2 = useState(false),\n      hasDataRows = _useState2[0],\n      setHasDataRows = _useState2[1];\n\n  var _useState3 = useState([]),\n      dataRows = _useState3[0],\n      setDataRows = _useState3[1];\n\n  var _useState4 = useState(props.chainId),\n      chainId = _useState4[0],\n      setChainId = _useState4[1];\n\n  var classes = useStyles();\n  !hasDataRows ? getDeposits(function (deposits) {\n    setHasDataRows(true);\n    setDataRows(deposits);\n  }) : null;\n  return __jsx(React.Fragment, null, __jsx(TableContainer, {\n    component: Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, __jsx(Table, {\n    className: classes.table,\n    \"aria-label\": \"simple table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 25\n    }\n  }, __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 29\n    }\n  }, \"Amount \"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 29\n    }\n  }, \"For\"), __jsx(TableCell, {\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 29\n    }\n  }, \"Hash\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 29\n    }\n  }, \"To Chain\"))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }, dataRows.sort(function (a, b) {\n    return b.blockNumber > a.blockNumber ? 1 : -1;\n  }).map(function (row) {\n    return Number(row.returnValues.amount) < 200000000000000000 ? __jsx(TableRow, {\n      className: account == row.returnValues.sender ? \"MyRow\" : \"\",\n      key: row.name,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }\n    }, __jsx(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 37\n      }\n    }, Number(fromContractValue(row.returnValues.amount, 'gwei') * 10).toLocaleString()), __jsx(TableCell, {\n      align: \"right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 37\n      }\n    }, row.returnValues.sender), __jsx(TableCell, {\n      align: \"left\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 37\n      }\n    }, row.transactionHash), __jsx(TableCell, {\n      align: \"right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 37\n      }\n    }, CHAIN_ID_NAMES[row.returnValues.chainId])) : null;\n  })))));\n\n  function getDeposits(_x) {\n    return _getDeposits.apply(this, arguments);\n  }\n\n  function _getDeposits() {\n    _getDeposits = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(EMBLEM_API + '/transfersOutDb?pending=' + showPending, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'chainid': props.chainId.toString(),\n                  'service': 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context.sent;\n              _context.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context.sent;\n              return _context.abrupt(\"return\", cb(jsonData));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getDeposits.apply(this, arguments);\n  }\n}\n\n_s(BridgeDeposits, \"mpnjnJd0UzYYomkrAvCbzPglFJE=\", false, function () {\n  return [useWeb3React, useStyles];\n});\n\n_c = BridgeDeposits;\n\nvar _c;\n\n$RefreshReg$(_c, \"BridgeDeposits\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/partials/BridgeDeposits.tsx"],"names":["React","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","useWeb3React","useState","EMBLEM_API","fromContractValue","CHAIN_ID_NAMES","useStyles","table","minWidth","createData","name","calories","fat","carbs","protein","rows","BridgeDeposits","props","previousChainId","useEffect","console","log","chainId","account","showPending","setShowPending","hasDataRows","setHasDataRows","dataRows","setDataRows","setChainId","classes","getDeposits","deposits","sort","a","b","blockNumber","map","row","Number","returnValues","amount","sender","toLocaleString","transactionHash","cb","fetch","method","headers","toString","responce","json","jsonData"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport useEffect from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Checkbox } from '@chakra-ui/core'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useState } from 'react'\nimport { EMBLEM_API } from '../../constants'\nimport { fromContractValue, CHAIN_ID_NAMES } from '../../utils'\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\nfunction createData(name: string, calories: number, fat: number, carbs: number, protein: number) {\n    return { name, calories, fat, carbs, protein };\n}\n\n\n\nlet rows = [\n    //   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n    //   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n    //   createData('Eclair', 262, 16.0, 24, 6.0),\n    //   createData('Cupcake', 305, 3.7, 67, 4.3),\n    //   createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\n\ninterface DepositProps {\n    chainId: number;\n  }\n\nexport default function BridgeDeposits(props: DepositProps) {\n    let previousChainId\n    React.useEffect(()=>{        \n        console.log(\"changing\", props.chainId, previousChainId);\n        previousChainId = props.chainId\n    })\n    const { account } = useWeb3React()\n    const [showPending, setShowPending] = useState(false)\n    const [hasDataRows, setHasDataRows] = useState(false)\n    const [dataRows, setDataRows] = useState([])\n    const [chainId, setChainId] = useState(props.chainId)\n    const classes = useStyles();\n    \n    !hasDataRows ? (\n        getDeposits(deposits => {\n            setHasDataRows(true)\n            setDataRows(deposits)\n        })\n    ) : null\n    return (\n        <>\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Amount </TableCell>\n                            <TableCell align=\"right\">For</TableCell>\n                            <TableCell align=\"left\">Hash</TableCell>\n                            <TableCell align=\"right\">To Chain</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {dataRows.sort((a, b) => (b.blockNumber > a.blockNumber) ? 1 : -1).map((row) => (\n                            Number(row.returnValues.amount) < 200000000000000000 ? \n                            (\n                                <TableRow className={account == row.returnValues.sender ? \"MyRow\" : \"\"} key={row.name}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {Number(fromContractValue(row.returnValues.amount, 'gwei')*10).toLocaleString()}\n                                    </TableCell>\n                                    <TableCell align=\"right\">{row.returnValues.sender}</TableCell>\n                                    <TableCell align=\"left\">{row.transactionHash}</TableCell>\n                                    <TableCell align=\"right\">{CHAIN_ID_NAMES[row.returnValues.chainId]}</TableCell>\n                                </TableRow>\n                            ) : null\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n\n    async function getDeposits(cb) {\n\n        const responce = await fetch(EMBLEM_API + '/transfersOutDb?pending='+showPending, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'chainid': props.chainId.toString(),\n                'service': 'evmetadata',\n            },\n        })\n        const jsonData = await responce.json()\n        return cb(jsonData)\n    }\n}"]},"metadata":{},"sourceType":"module"}