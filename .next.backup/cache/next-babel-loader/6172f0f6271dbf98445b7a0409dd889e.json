{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Text, Stack, Button, useColorMode } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR } from '../constants';\nimport { useWeb3React } from '@web3-react/core';\nexport default function OfferModal({\n  isOpen,\n  onClose //   addrCoin,\n  //   addrAddr,\n\n}) {\n  //   const address = addrAddr\n  //   const coin = addrCoin\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    0: copied,\n    1: setCopied\n  } = useState(false);\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [copied]);\n\n  function copyWithFlag(content) {\n    copy(content);\n    setCopied(true);\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    color: COLOR[colorMode],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"Offer\")), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"center\",\n    mt: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }, 'coin', \" address (click to copy)\")), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    onClick: () => copyWithFlag('address'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, copied ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 27\n    }\n  }, \"Copied!\") : __jsx(Text, {\n    isTruncated: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 50\n    }\n  }, 'address'))))), __jsx(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx"],"names":["React","useEffect","useState","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","Text","Stack","Button","useColorMode","copy","COLOR","useWeb3React","OfferModal","isOpen","onClose","colorMode","account","chainId","library","copied","setCopied","timeout","setTimeout","clearTimeout","copyWithFlag","content"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Text,\n  Stack,\n  Button,\n  useColorMode,\n} from '@chakra-ui/core'\nimport copy from 'copy-to-clipboard'\nimport QRCode from 'qrcode.react'\nimport { COLOR } from '../constants'\nimport { useWeb3React } from '@web3-react/core'\n\nexport default function OfferModal({\n  isOpen,\n  onClose,\n//   addrCoin,\n//   addrAddr,\n}: {\n  isOpen: boolean\n  onClose: () => void\n//   addrCoin: string\n//   addrAddr: string\n}): JSX.Element {\n//   const address = addrAddr\n//   const coin = addrCoin\n\n  const { colorMode } = useColorMode()\n  const { account, chainId, library } = useWeb3React()\n  const [copied, setCopied] = useState(false)\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [copied])\n\n  function copyWithFlag(content: string): void {\n    copy(content)\n    setCopied(true)\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent color={COLOR[colorMode]}>\n        <ModalHeader>\n          <Text>Offer</Text>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Stack direction=\"column\">\n            <Stack direction=\"row\" align=\"center\" justify=\"center\">\n              {/* <QRCode value={coin==\"BTC\" ? \"bitcoin:\"+address: address} onClick={() => copyWithFlag(address)} /> */}\n            </Stack>\n\n            <Stack direction=\"row\" justify=\"center\" mt=\"6\">\n              <Text>{'coin'} address (click to copy)</Text>\n            </Stack>\n            <Stack direction=\"row\" justify=\"center\">\n              <Button onClick={() => copyWithFlag('address')}>\n                {copied ? <Text>Copied!</Text> : <Text isTruncated>{'address'}</Text>}\n              </Button>\n            </Stack>\n          </Stack>\n        </ModalBody>\n        <ModalFooter></ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}