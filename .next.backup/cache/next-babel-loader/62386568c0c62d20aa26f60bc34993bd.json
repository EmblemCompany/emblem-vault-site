{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure, Collapse, useColorMode, Tabs, TabList, Tab, TabPanel, TabPanels } from '@chakra-ui/core';\nimport { HStack } from '@chakra-ui/react';\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { Contract } from '@ethersproject/contracts';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, contractAddresses, curatedContracts, SIG_API, EMBLEM_V2_API } from '../constants';\nimport { useContract } from '../hooks';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport CryptoJS from 'crypto-js';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nimport NFTSlideshow from './embed/NFTSlideshow';\nimport CoinBalance from './partials/CoinBalance';\nimport Attributes from './partials/Attributes';\nimport { generateWallet } from '@stacks/wallet-sdk';\nimport FetchNodeDetails from \"@toruslabs/fetch-node-details\";\nimport TorusUtils from \"@toruslabs/torus.js\";\nimport JsonDownloadLink from './JsonDownloadLink';\nconst AddrModal = dynamic(() => import('./AddrModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./AddrModal')],\n    modules: ['./AddrModal']\n  }\n});\nconst KeysModal = dynamic(() => import('./KeysModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./KeysModal')],\n    modules: ['./KeysModal']\n  }\n});\nconst OfferModal = dynamic(() => import('./OfferModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./OfferModal')],\n    modules: ['./OfferModal']\n  }\n});\nexport default function Nft() {\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    query\n  } = useRouter();\n  const {\n    0: clearCache,\n    1: setCache\n  } = useState(query.cc == 't');\n  const {\n    0: showMove,\n    1: setShowMove\n  } = useState(query.curated == 't');\n  const {\n    0: qualifiedCollection,\n    1: setQualifiedCollection\n  } = useState({\n    1: '',\n    name: '',\n    chain: ''\n  });\n  const {\n    0: moving,\n    1: setMoving\n  } = useState(false);\n  const {\n    0: approved,\n    1: setApproved\n  } = useState(false);\n  const {\n    0: mintPassword,\n    1: setMintPassword\n  } = useState(query.key);\n  const {\n    0: showOffer,\n    1: setShowOffer\n  } = useState(query.offer || false);\n  const {\n    0: framed,\n    1: setFramed\n  } = useState(query.framed || true);\n  const {\n    0: tokenId,\n    1: setTokenId\n  } = useState(query.id);\n  const {\n    0: slideshowOnly,\n    1: setSlideshowOnly\n  } = useState(query.slideshowOnly || false);\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState('');\n  const {\n    0: vaultIPFS,\n    1: setVaultIPFS\n  } = useState('');\n  const {\n    0: vaultImageIPFS,\n    1: setVaultImageIPFS\n  } = useState('');\n  const {\n    0: vaultCiphertextV2,\n    1: setVaultCiphertextV2\n  } = useState('');\n  const {\n    0: vaultDesc,\n    1: setVaultDesc\n  } = useState('');\n  const {\n    0: vaultImage,\n    1: setVaultImage\n  } = useState('');\n  const {\n    0: ownedImage,\n    1: setOwnedImage\n  } = useState('');\n  const {\n    0: vaultValues,\n    1: setVaultValues\n  } = useState([]);\n  const {\n    0: loadedValues,\n    1: setLoadedValues\n  } = useState(false);\n  const {\n    0: vaultDataValues,\n    1: setVaultDataValues\n  } = useState([]);\n  const {\n    0: attributes,\n    1: setAttributes\n  } = useState([]);\n  const {\n    0: vaultAddresses,\n    1: setVaultAddresses\n  } = useState([]);\n  const {\n    0: vaultPrivacy,\n    1: setVaultPrivacy\n  } = useState(false);\n  const {\n    0: vaultTotalValue,\n    1: setVaultTotalValue\n  } = useState(0);\n  const {\n    0: vaultChainId,\n    1: setVaultChainId\n  } = useState(null);\n  const {\n    0: vaultChain,\n    1: setVaultChain\n  } = useState(null);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: currCoin,\n    1: setCurrCoin\n  } = useState('');\n  const {\n    0: currAddr,\n    1: setCurrAddr\n  } = useState('');\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: mine,\n    1: setMine\n  } = useState(false);\n  const {\n    0: claiming,\n    1: setClaiming\n  } = useState(false);\n  const {\n    0: status,\n    1: setStatus\n  } = useState('claimed');\n  const {\n    0: sealed,\n    1: setSealed\n  } = useState(false);\n  const {\n    0: claimedBy,\n    1: setClaimedBy\n  } = useState(null);\n  const {\n    0: mnemonic,\n    1: setMnemonic\n  } = useState('');\n  const {\n    0: privKeyBTC,\n    1: setPrivKeyBTC\n  } = useState('');\n  const {\n    0: privKeyETH,\n    1: setPrivKeyETH\n  } = useState('');\n  const {\n    0: privValues,\n    1: setKeyValues\n  } = useState([]);\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: decryptedEffect,\n    1: setDecryptedEffect\n  } = useState('');\n  const {\n    0: decryptedEffectRunning,\n    1: setDecryptedEffectRunning\n  } = useState(false);\n  const {\n    0: decryptPassword,\n    1: setDecryptPassword\n  } = useState('');\n  const {\n    0: invalidVault,\n    1: setInvalidVault\n  } = useState(false);\n  const {\n    0: accepting,\n    1: setAccepting\n  } = useState(false);\n  const {\n    0: approving,\n    1: setApproving\n  } = useState(false);\n  const {\n    0: acceptable,\n    1: setAcceptable\n  } = useState(false);\n  const {\n    0: transferPassword,\n    1: setTransferPassword\n  } = useState('');\n  const {\n    0: showTransferPassword,\n    1: setShowTransferPassword\n  } = useState(false);\n  const {\n    0: preTransfering,\n    1: setPreTransfering\n  } = useState(false);\n  const {\n    0: transfering,\n    1: setTransfering\n  } = useState(false);\n  const {\n    0: owner,\n    1: setOwner\n  } = useState(null);\n  const {\n    0: live,\n    1: setLive\n  } = useState(false);\n  const {\n    0: checkLive,\n    1: setCheckLive\n  } = useState(false);\n  const {\n    0: nonce,\n    1: setNonce\n  } = useState(null);\n  const {\n    0: block,\n    1: setBlock\n  } = useState(null);\n  const {\n    0: mintSignature,\n    1: setMintSignature\n  } = useState(null);\n  const {\n    0: to,\n    1: setTo\n  } = useState(null);\n  const {\n    0: showVerifyingSignature,\n    1: setShowVerifyingSignature\n  } = useState(false);\n  const {\n    0: showMakingVaultMsg,\n    1: setShowMakingVaultMsg\n  } = useState(false);\n  const {\n    0: minting,\n    1: setMinting\n  } = useState(false);\n  const {\n    0: isCrowdSale,\n    1: setIsCrowdSale\n  } = useState(false);\n  const {\n    0: alternateContractAddress,\n    1: setAlternateContractAddress\n  } = useState(null);\n  const {\n    0: targetAsset,\n    1: setTargetAsset\n  } = useState({\n    name: '',\n    image: '',\n    metadata: ''\n  });\n  const {\n    0: targetContract,\n    1: setTargetContract\n  } = useState({\n    name: '',\n    chain: '',\n    4: '',\n    1: '',\n    tokenId: {},\n    serialNumber: {\n      'hex': ''\n    }\n  });\n  const {\n    0: isCovalApproved,\n    1: setIsCovalApproved\n  } = useState(false);\n  const {\n    0: decimals,\n    1: setDecimals\n  } = useState(null);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(null);\n  const {\n    0: balance,\n    1: setBalance\n  } = useState(null);\n  const {\n    0: price,\n    1: setPrice\n  } = useState(null);\n  const {\n    0: mineUnMinted,\n    1: setMineUnMinted\n  } = useState(false);\n  const {\n    0: mintLockedForever,\n    1: setMintLockedForever\n  } = useState(false);\n  const {\n    0: rawMetadata,\n    1: setRawMetadata\n  } = useState({});\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  const vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  let emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  const covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true);\n  const {\n    isOpen: isOpenAddrModal,\n    onOpen: onOpenAddrModal,\n    onClose: onCloseAddrModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenKeysModal,\n    onOpen: onOpenKeysModal,\n    onClose: onCloseKeysModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenOfferModal,\n    onOpen: onOpenOfferModal,\n    onClose: onCloseOfferModal\n  } = useDisclosure();\n  const {\n    isOpen,\n    onToggle\n  } = useDisclosure();\n  const {\n    isOpen: isManageAddressOpen,\n    onToggle: onManageAddressToggle\n  } = useDisclosure();\n  const {\n    isOpen: isAdvancedOpen,\n    onToggle: onAdvancedToggle\n  } = useDisclosure();\n  const {\n    colorMode\n  } = useColorMode();\n  let transak;\n  let transferImage;\n\n  const getVaultContract = (address = null) => {\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked());\n  };\n\n  const getCuratedContract = (address = null) => {\n    return new Contract(address, contractAddresses.erc1155Abi, library.getSigner(account).connectUnchecked());\n  };\n\n  const checkLiveliness = (tokenId, cb) => {\n    alert(`here ${owner}`);\n    fetch(EMBLEM_API + '/liveliness', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        tokenId: tokenId\n      })\n    }).then(async function (response) {\n      let data = await response.json();\n      setLive(data.live);\n      console.log(\"Liveliness check\", data);\n    });\n    return cb();\n  };\n\n  const lazyMint = () => {\n    library.getSigner(account).signMessage('Delayed Minting: ' + tokenId).then(signature => {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + '/lazyMint', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n\n        if (!data.error && data.data) {\n          setMintSignature(data.data.signature);\n          setNonce(data.data.nonce);\n          setBlock(data.data.block);\n          setShowVerifyingSignature(true); // setCreating(true)\n\n          setTimeout(() => {\n            delayedMint(data.data.nonce, data.data.block, data.data.signature);\n          }, 1500);\n        } else {\n          alert(data.error ? data.msg : 'unknown error');\n        }\n      });\n    });\n  };\n\n  const delayedMint = (nonce, block, sig) => {\n    // setCreating(true)\n    console.log(\"Delayed Minting\");\n    setShowVerifyingSignature(false);\n    setShowMakingVaultMsg(true);\n    setMinting(true);\n    let cipherTextHash = vaultAddresses.filter(address => {\n      return address.coin == \"ETH\";\n    })[0].address;\n    console.log(\"--------------------------------------------------------Delayed Minting\", account, tokenId, cipherTextHash, nonce, block, sig);\n    handlerContract.buyWithSignature2(account, tokenId, cipherTextHash, nonce, block, sig).then(({\n      hash\n    }) => {\n      setTimeout(() => {\n        setHash(hash);\n        setShowMakingVaultMsg(false);\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      console.log(\"AAAAAHHHHHH\", error);\n      setShowMakingVaultMsg(false); // setMinting(false)\n    });\n  };\n\n  const fireMetaMask = () => {\n    console.log(mintPassword);\n    setAccepting(true);\n    getWitness(witness => {\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;\n      handlerContract.transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature).then(({\n        hash\n      }) => {\n        setTimeout(() => {\n          setHash(hash); // setShowMakingVaultMsg(true)\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      }).catch(error => {\n        setAccepting(false);\n\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(`tx failed.`, error);\n        } else {// setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      });\n    });\n  };\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\" + transferImage);\n    setPreTransfering(true);\n    handlerContract.addPreTransfer(tokenId, \"0x\" + transferImage).then(({\n      hash\n    }) => {\n      // setTimeout(() => {\n      setHash(hash);\n      console.log(\"Set Pre Transfering True\", preTransfering); // setShowMakingVaultMsg(true)\n      // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      if (error !== null && error !== void 0 && error.code) {\n        console.log(\"Error?\");\n        setPreTransfering(false);\n        setShowTransferPassword(false);\n        setTransferPassword('');\n      } else {// setShowTransferPassword(!showTransferPassword? true : false)\n        // setPreTransfering(false)\n        // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  const handleApproveForall = () => {\n    setApproving(true);\n    emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(({\n      hash\n    }) => {\n      setTimeout(() => {\n        setHash(hash);\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(`tx failed.`, error);\n      } else {\n        setApproving(false);\n      }\n    });\n  };\n\n  const approveCovalFlow = () => {\n    setApproving(true);\n    covalContract.approve(contractAddresses.vaultHandler[chainId], '100000000000000').then(({\n      hash\n    }) => {\n      setHash(hash);\n    }).catch(error => {\n      if ((error === null || error === void 0 ? void 0 : error.code) == 4001) {\n        setApproving(false);\n      }\n    });\n  };\n\n  const deleteVault = () => {\n    library.getSigner(account).signMessage('Delete: ' + tokenId).then(signature => {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + '/v2/delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then(async function () {\n        location.href = location.href.split(\"/\")[0] + \"/vaults\";\n      });\n    });\n  };\n\n  const syncAccount = () => {\n    let synched = localStorage.getItem(tokenId + '-v');\n\n    if (!synched) {\n      fetch(EMBLEM_API + '/sync/' + tokenId, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        }\n      }).then(async function (response) {\n        localStorage.setItem(tokenId + '-v', '1');\n        return true;\n      }).catch(() => {\n        return false;\n      });\n    }\n  };\n\n  const getVault = async () => {\n    const response = await fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true' + (clearCache ? '&_vercel_no_cache=1' : ''), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        cc: clearCache ? 't' : ''\n      }\n    });\n    const jsonData = await response.json();\n    setRawMetadata(jsonData);\n    setStates(jsonData); // console.log('vault response was ', jsonData)\n\n    if (jsonData.image_ipfs) {// getIPFSImage(jsonData.image_ipfs)\n    }\n\n    if (jsonData.collectionAddress) {\n      setIsCrowdSale(true);\n      setAlternateContractAddress(jsonData.collectionAddress);\n    }\n\n    if (!jsonData.name) {\n      setState({\n        loaded: true\n      });\n      setInvalidVault(true);\n    } else {\n      // setStates(jsonData)\n      // !slideshowOnly? saveCache(jsonData) : null\n      setLoadingApi(false);\n      setInvalidVault(false);\n    }\n\n    {\n      !vaultPrivacy && !loadedValues ? getAllBalancesLive([], tokenId, v => {\n        if (v) {\n          setVaultValues(v);\n        }\n      }) : null;\n    } // { if (jsonData.targetContract) {\n    //   setTimeout(() => {\n    //     location.href = location.origin + '/nft2?id=' + jsonData.tokenId\n    //   }, 500)\n    // }}\n  };\n\n  const getWitness = async cb => {\n    const response = await fetch(EMBLEM_API + '/witness/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        cc: 't',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      }\n    });\n    const jsonData = await response.json();\n\n    if (jsonData.signature) {\n      console.log('witness', jsonData);\n      return cb(jsonData);\n    } else {\n      return cb(false);\n    }\n  };\n\n  const setStates = jsonData => {\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\" + framed : null;\n\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2);\n    }\n\n    setMintLockedForever(jsonData.mintLocked && jsonData.mintLockBlock == 0);\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setOwnedImage(jsonData.ownedImage || null);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)) : null;\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(item => {\n      return item.trait_type === \"key\";\n    })) : null;\n    jsonData.attributes ? setAttributes(jsonData.attributes) : null;\n    setVaultAddresses(jsonData.addresses);\n    setVaultIPFS(jsonData.ipfs || null);\n    setVaultImageIPFS(jsonData.image_ipfs || null);\n    jsonData.targetAsset ? setTargetAsset(jsonData.targetAsset) : null;\n    jsonData.targetContract ? setTargetContract(jsonData.targetContract) : null;\n\n    if (jsonData.targetContract) {\n      setTimeout(() => {\n        location.href = location.origin + '/nft2?id=' + jsonData.targetContract.tokenId;\n      }, 500);\n    }\n\n    setLive(jsonData.live == false ? false : true);\n    setNonce(jsonData.nonce);\n    setMintSignature(jsonData.signature);\n    setTo(jsonData.to);\n    setVaultChain(jsonData.network);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : jsonData.network == \"xdai\" ? 100 : jsonData.network == \"bsc\" ? 56 : jsonData.network == \"fantom\" ? 250 : jsonData.network == \"bitcoin\" ? 0 : jsonData.network == \"aurora\" ? 1313161554 : 97);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    }\n\n    setState({\n      loaded: true\n    });\n    let isPvt = jsonData.addresses.filter(item => {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n\n    if (jsonData.sealed) {\n      setSealed(true);\n    } else {\n      setSealed(false);\n    }\n\n    if (jsonData.values.length == 1 && jsonData.attributes.length > 0) {\n      let project = jsonData.attributes.filter(item => {\n        return item.value == jsonData.values[0].name;\n      });\n\n      if (project.length > 0) {\n        let projectName = project[0].trait_type;\n\n        let _qualifiedCollection = curatedContracts.filter(item => {\n          return item.name == projectName;\n        });\n\n        if (_qualifiedCollection.length > 0) {\n          setQualifiedCollection(_qualifiedCollection[0]);\n        }\n      }\n    }\n  };\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    // console.log(address)\n    const response = await fetch(EMBLEM_API + '/vault/balance/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await response.json();\n    console.log('response', response, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    if (loadedValues) {\n      return cb(false);\n    }\n\n    setLoadedValues(true);\n    const response = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true&_vercel_no_cache=1', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await response.json();\n    console.log('response', response, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    const response = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await response.json();\n    console.log('response', response, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  };\n\n  const getSignedJWT = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainid', chainId.toString());\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature,\n      tokenId: tokenId\n    });\n    const response = await fetch(SIG_API + '/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await response.json();\n    return cb(jsonData);\n  };\n\n  async function getTorusKeys(verifierId, idToken, cb) {\n    const fetchNodeDetails = new FetchNodeDetails({\n      network: \"mainnet\"\n    });\n    const torusUtils = new TorusUtils({\n      enableOneKey: true,\n      network: \"mainnet\"\n    });\n    const {\n      torusNodeEndpoints,\n      torusIndexes\n    } = await fetchNodeDetails.getNodeDetails({\n      verifier: 'tor-us-signer-vercel',\n      verifierId\n    });\n    const {\n      privKey\n    } = await torusUtils.retrieveShares(torusNodeEndpoints, torusIndexes, 'tor-us-signer-vercel', {\n      verifier_id: verifierId\n    }, idToken);\n    return cb({\n      privateKey: privKey\n    });\n  }\n\n  const addAddress = async (signature, tokenId, coin, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature,\n      coin: coin\n    });\n    const response = await fetch(EMBLEM_API + '/address/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await response.json();\n    return cb(jsonData);\n  };\n\n  const decryptEmbed = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature\n    });\n    const response = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await response.json();\n    return cb(jsonData);\n  };\n\n  const getContractStates = async () => {\n    // alert(0)\n    console.log(\"Contract states\");\n    let owned = false;\n\n    let _owner;\n\n    try {\n      if (targetContract[chainId]) {\n        console.log(\"Checking owner wth targetContract\");\n        emblemContract = getCuratedContract(targetContract[chainId]);\n        _owner = await emblemContract.getOwnerOfSerial(targetContract.serialNumber);\n        console.log(\"--------------------------- owner\", _owner, approved, account, contractAddresses.vaultHandlerV8[chainId]);\n      } else {\n        _owner = live ? await emblemContract.ownerOf(tokenId) : \"0x0000000000000000000000000000000000000000\";\n      }\n\n      setDecimals(await covalContract.decimals());\n      setAllowance(await covalContract.allowance(account, contractAddresses.vaultHandler[chainId]).then(balance => balance.toString()));\n      setBalance(await covalContract.balanceOf(account).then(balance => balance.toString()));\n      setPrice(await handlerContract.price().then(balance => balance.toString()));\n\n      if (Number(allowance) >= Number(price)) {\n        setIsCovalApproved(true);\n      } else {\n        setIsCovalApproved(false);\n      }\n\n      finish();\n    } catch (err) {\n      _owner = \"0x0000000000000000000000000000000000000000\";\n      finish();\n    }\n\n    async function finish() {\n      let acceptable = await handlerContract.getPreTransfer(tokenId);\n      let isApproved;\n\n      if (targetContract[chainId]) {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId]);\n      } else {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n      }\n\n      setApproved(isApproved);\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\");\n      setOwner(_owner);\n      setMine(_owner === account || to === account && _owner === \"0x0000000000000000000000000000000000000000\");\n      setMineUnMinted(to === account && _owner === \"0x0000000000000000000000000000000000000000\");\n      loadPasswordFromLocalStorage();\n\n      if (live == false && !checkLive) {\n        setCheckLive(true);\n        checkLiveliness(tokenId, () => {});\n      }\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"mine?\", mine);\n    console.log(\"claiming?\", claiming);\n    console.log(\"accepting?\", accepting);\n    console.log(\"acceptable\", acceptable);\n    console.log(\"qualified\", qualifiedCollection);\n    console.log(\"owner\", owner);\n  });\n\n  const hasAddress = coin => {\n    console.log(coin, vaultAddresses.filter(address => {\n      return address.coin == coin;\n    }).length > 0);\n    return vaultAddresses.filter(address => {\n      return address.coin == coin;\n    }).length > 0;\n  };\n\n  const onRenew = async name => {\n    library.getSigner(account).signMessage('Renew: ' + tokenId).then(signature => {\n      let address = vaultAddresses.filter(address => {\n        return address.coin == 'NMC';\n      })[0].address;\n      console.log('signature', signature, name);\n      fetch(EMBLEM_API + '/nmc/renew/' + address, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({\n          \"tokenId\": tokenId,\n          \"signature\": signature,\n          \"name\": name\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        console.log(\"Requested Renew\", data);\n      });\n    });\n  };\n\n  const handleSign = async () => {\n    let serialNumber;\n\n    if (targetContract[chainId]) {\n      emblemContract = getCuratedContract(targetContract[chainId]);\n      serialNumber = await emblemContract.getSerial(targetContract.tokenId, 0);\n    }\n\n    library.getSigner(account).signMessage('Claim: ' + (targetContract[chainId] ? serialNumber : tokenId)).then(signature => {\n      setState({\n        loaded: false\n      });\n\n      if (mineUnMinted && status != \"claimed\" && !mintLockedForever) {\n        setMintLockedForever(true);\n      }\n\n      getSignedJWT(signature, tokenId, token => {\n        getTorusKeys(tokenId, token.token, async keys => {\n          try {\n            var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey);\n            let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n            setKeyValues(payload.values);\n            setMnemonic(payload.phrase);\n            vaultAddresses.forEach(async address => {\n              if (address.coin == 'STX') {\n                address.key = await getSTXKey(address, payload.phrase);\n              } else {\n                address.key = window.phrasePathToKey(payload.phrase, address.path);\n              }\n\n              if (address.coin == 'BTC') setPrivKeyBTC(address.key);\n              if (address.coin == 'ETH') setPrivKeyETH(address.key);\n            });\n          } catch (err) {\n            alert(err);\n            setTimeout(() => {\n              location.href = location.href;\n            }, 2000);\n          }\n\n          setState({\n            loaded: true\n          });\n          onOpenKeysModal();\n        });\n      });\n    });\n  };\n\n  const getSTXKey = async (address, phrase) => {\n    const wallet = await generateWallet({\n      secretKey: phrase,\n      password: ''\n    });\n    console.log('------ stacks account -', wallet.accounts[0]);\n    const account = wallet.accounts[0];\n    address.key = account.stxPrivateKey;\n    return address.key;\n  };\n\n  const handleHideAsset = async coin => {\n    library.getSigner(account).signMessage('HideAsset: ' + tokenId).then(signature => {\n      hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, () => {\n        console.log(\"Done hiding coin and getting new balances\");\n      });\n    });\n  };\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/' + tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin ? coin : null,\n        \"address\": address ? address : null,\n        \"name\": name ? name : null,\n        \"signature\": signature ? signature : null\n      })\n    }).then(async function (response) {\n      let data = await response.json();\n      console.log(\"-------\", data);\n      getAllBalances([], tokenId, values => {\n        setVaultValues(values);\n        return cb();\n      });\n    });\n  }\n\n  const handleAddressSign = async coin => {\n    library.getSigner(account).signMessage('Address: ' + tokenId).then(signature => {\n      addAddress(signature, tokenId, coin, result => {\n        getVault();\n      });\n    });\n  };\n\n  const handleOwnedEmbed = async () => {\n    library.getSigner(account).signMessage('Embed: ' + tokenId).then(signature => {\n      decryptEmbed(signature, tokenId, result => {\n        setVaultImage(result.ownedImage);\n      });\n    });\n  };\n\n  const handleMove = async () => {\n    console.log('---------- qualified move', qualifiedCollection);\n    library.getSigner(account).signMessage('Move Vault: ' + tokenId).then(signature => {\n      fetch(EMBLEM_V2_API + '/move-vault/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({\n          \"chainId\": 1,\n          \"from\": account,\n          \"sourceContract\": {\n            \"1\": contractAddresses.emblemVault[vaultChainId]\n          },\n          \"targetContract\": {\n            \"1\": qualifiedCollection[chainId],\n            \"name\": qualifiedCollection.name,\n            \"chain\": qualifiedCollection.chain\n          },\n          \"targetAsset\": {\n            \"name\": vaultValues[0].name\n          },\n          \"amount\": 1,\n          \"tokenId\": tokenId,\n          \"signature\": signature\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n\n        if (data.sig) {\n          vaultHandlerContract.moveVault(contractAddresses.emblemVault[vaultChainId], qualifiedCollection[chainId], tokenId, data.tokenId, data.nonce, data.sig, data.serial).then(hash => {\n            setHash(hash.hash);\n            setMoving(false);\n          });\n        }\n      });\n    });\n  };\n\n  const handleClaim = async () => {\n    if (targetContract[chainId]) {\n      vaultHandlerContract.claim(targetContract[chainId], targetContract.tokenId).then(({\n        hash\n      }) => {\n        setClaiming(true);\n        setTimeout(() => {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      });\n    } else {\n      handlerContract.claimOnChain(tokenId).then(({\n        hash\n      }) => {\n        setClaiming(true);\n        setTimeout(() => {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      });\n    }\n  };\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return;\n    }\n\n    setDecryptedEffectRunning(true);\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n    var ctnt = 'Decrypting'; // Your text goes here\n\n    var speed = 5; // ms per frame\n\n    var increment = 8; // frames per step. Must be >2\n\n    var clen = ctnt.length;\n    var si = 0;\n    var stri = 0;\n    var block = '';\n    var fixed = '';\n\n    (function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i);\n        } else {\n          setDecryptedEffectRunning(false);\n        }\n\n        nextFrame(i);\n        si = si + 1;\n      }, speed);\n    })(clen * increment + 1);\n\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        var num = Math.floor(theLetters.length * Math.random());\n        var letter = theLetters.charAt(num);\n        block = block + letter;\n      }\n\n      if (si == increment - 1) {\n        stri++;\n      }\n\n      if (si == increment) {\n        fixed = fixed + ctnt.charAt(stri - 1);\n        si = 0;\n      }\n\n      setDecryptedEffect(fixed + block);\n      block = '';\n    }\n  };\n\n  useEffect(() => {\n    getVault();\n  }, []);\n  useEffect(() => {\n    account && chainId && vaultChainId && chainId == vaultChainId || query.noLayout && query.noLayout == 'true' || query.slideshowOnly && query.slideshowOnly == 'true' ? getContractStates() : null;\n  });\n\n  function splitDescription(words) {\n    var desc = words ? words.split('\\n\\n\\n\\n') : [\" \"];\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    console.log(vaultAddresses);\n    let ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      let ethAddress = vaultAddresses.filter(item => {\n        return item.coin === 'ETH';\n      })[0].address;\n      let btcAddress = vaultAddresses.filter(item => {\n        return item.coin === 'BTC';\n      })[0].address;\n      console.log(\"SUCCESS\", vaultAddresses);\n      getAllBalancesByAddress([], ethAddress, btcAddress, values => {\n        setVaultValues(values);\n      });\n    } catch (err) {\n      console.log('WTF', err);\n    }\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(item => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '');\n        item.address = decrypt(cipherText, key);\n      }\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  function visitOpenSeaLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + (vaultChainId == 137 ? 'matic/' : 'ethereum/') + (alternateContractAddress ? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) + '/' + tokenId, '_blank');\n  }\n\n  function visitLooksRareLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'looksrare.org/collections/' + (vaultChainId == 137 ? 'matic/' : '') + (alternateContractAddress ? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) + '/' + tokenId, '_blank');\n  }\n\n  function visitArcadeLink() {\n    window.open(`https://app.arcade.xyz/terms/asset/${targetContract[vaultChainId] ? targetContract[vaultChainId] : contractAddresses.emblemVault[vaultChainId]}/${tokenId}`, '_blank');\n  }\n\n  {\n    alternateContractAddress ? emblemContract = getVaultContract(alternateContractAddress ? alternateContractAddress : null) : null;\n  }\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1025,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1026,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1027,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1028,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1029,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1030,\n      columnNumber: 9\n    }\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              if (localStorage.getItem(\"darkMode\") == 'false') {\n                localStorage.setItem(\"darkMode\",\"true\"); location.href = location.href\n              }\n              `\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1031,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1046,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    privValues: privValues,\n    addresses: vaultAddresses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1048,\n      columnNumber: 7\n    }\n  }), showOffer ? __jsx(OfferModal, {\n    isOpen: isOpenOfferModal,\n    onClose: onCloseOfferModal,\n    tokenId: tokenId,\n    mine: mine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1058,\n      columnNumber: 9\n    }\n  }) : null, __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1067,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1068,\n      columnNumber: 9\n    }\n  }), loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1069,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault && !slideshowOnly ? __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1071,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    className: \"NFT\",\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1072,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"blue.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1083,\n      columnNumber: 17\n    }\n  }, \"Vault Network: \", CHAIN_ID_NAMES[vaultChainId]), __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\" // textTransform=\"uppercase\"\n    ,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1097,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null), __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1110,\n      columnNumber: 17\n    }\n  }, vaultValues.length && vaultValues.filter(item => {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultImage,\n    items: vaultValues.map(value => {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1112,\n      columnNumber: 23\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1114,\n      columnNumber: 23\n    }\n  }), mine && ownedImage ? __jsx(Button, {\n    onClick: () => {\n      handleOwnedEmbed();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1118,\n      columnNumber: 21\n    }\n  }, \"(OWNED) Show Full Embed\") : null), __jsx(Stack, {\n    align: \"center\",\n    maxWidth: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1121,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    maxWidth: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1122,\n      columnNumber: 19\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1123,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    fontSize: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1124,\n      columnNumber: 23\n    }\n  }, vaultChainId == chainId ? __jsx(Link, {\n    href: \"./vaults?address=\" + owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1126,\n      columnNumber: 25\n    }\n  }, \"Owner: \", owner) : null), __jsx(Text, {\n    overflowWrap: \"anywhere\",\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1131,\n      columnNumber: 23\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1132,\n      columnNumber: 25\n    }\n  }))))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1138,\n      columnNumber: 17\n    }\n  }, __jsx(Tabs, {\n    isFitted: true,\n    variant: \"enclosed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1139,\n      columnNumber: 17\n    }\n  }, __jsx(TabList, {\n    mb: \"1em\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1140,\n      columnNumber: 19\n    }\n  }, __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1141,\n      columnNumber: 21\n    }\n  }, \"Balances\"), __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1142,\n      columnNumber: 21\n    }\n  }, \"Attributes\")), __jsx(TabPanels, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1144,\n      columnNumber: 19\n    }\n  }, __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1145,\n      columnNumber: 21\n    }\n  }, vaultPrivacy ? __jsx(Box, {\n    mb: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1147,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1148,\n      columnNumber: 27\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: e => tryDecrypt(e.target.value),\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1151,\n      columnNumber: 27\n    }\n  })) : __jsx(Box, {\n    d: \"flex\",\n    backgroundColor: colorMode == \"light\" ? \"gray.100\" : \"gray.700\",\n    alignItems: \"baseline\",\n    className: \"coin-balance-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1159,\n      columnNumber: 25\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1160,\n      columnNumber: 27\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    mt: 2,\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1161,\n      columnNumber: 29\n    }\n  }, \"Current Contents:  \", __jsx(\"button\", {\n    onClick: () => {\n      getAllBalancesLive([], tokenId, v => {\n        setLoadedValues(false);\n        setVaultValues(v);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1163,\n      columnNumber: 50\n    }\n  }, \" [Refresh Balances]\")), __jsx(Text, {\n    as: \"p\",\n    color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1172,\n      columnNumber: 29\n    }\n  }, \"$\", Number(vaultTotalValue.toFixed(4)).toLocaleString()), vaultValues.length ? vaultValues.map(coin => {\n    return __jsx(Stack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1176,\n        columnNumber: 35\n      }\n    }, __jsx(CoinBalance, {\n      colorMode: colorMode,\n      coin: coin,\n      mine: status === 'claimed' && claimedBy === account || mine,\n      onRenew: onRenew,\n      hideAsset: handleHideAsset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1177,\n        columnNumber: 37\n      }\n    }));\n  }) : __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1181,\n      columnNumber: 34\n    }\n  }), vaultDataValues.length ? vaultDataValues.map(data => {\n    return __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1185,\n        columnNumber: 35\n      }\n    }, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1189,\n      columnNumber: 31\n    }\n  }, \"Nothing in here! Fill 'er up!\") : null))), __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1195,\n      columnNumber: 21\n    }\n  }, __jsx(Attributes, {\n    colorMode: colorMode,\n    attributes: attributes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1196,\n      columnNumber: 23\n    }\n  })))), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1202,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1203,\n      columnNumber: 23\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1204,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1205,\n      columnNumber: 27\n    }\n  }, \"Deposit Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1206,\n      columnNumber: 27\n    }\n  }, vaultAddresses.map(addr => {\n    return __jsx(Button, {\n      className: \"address_nft_button\",\n      ml: 2,\n      mt: 2,\n      \"font-weight\": \"100 !important\",\n      key: addr.address,\n      onClick: () => {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1209,\n        columnNumber: 33\n      }\n    }, addr.coin == 'ETH' ? addr.coin + '/EVM' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP' : addr.coin == 'TAP' ? 'TAPROOT' : addr.coin);\n  })), (mine || status === 'claimed') && vaultAddresses.length < 12 ? __jsx(React.Fragment, null, __jsx(\"button\", {\n    className: \"nft_button\",\n    onClick: () => {\n      onManageAddressToggle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1229,\n      columnNumber: 29\n    }\n  }, \"Manage Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1230,\n      columnNumber: 29\n    }\n  }, __jsx(Collapse, {\n    isOpen: isManageAddressOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1231,\n      columnNumber: 31\n    }\n  }, !hasAddress('DOGE') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('DOGE');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1233,\n      columnNumber: 35\n    }\n  }, \"Add DOGE\") : null, !hasAddress('DGB') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('DGB');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1236,\n      columnNumber: 35\n    }\n  }, \"Add Digibyte\") : null, !hasAddress('NMC') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('NMC');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1239,\n      columnNumber: 35\n    }\n  }, \"Add Namecoin\") : null, !hasAddress('LTC') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('LTC');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1242,\n      columnNumber: 35\n    }\n  }, \"Add Litecoin\") : null, !hasAddress('MONA') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('MONA');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1245,\n      columnNumber: 35\n    }\n  }, \"Add Mona\") : null, !hasAddress('TEZOS') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('TEZOS');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1248,\n      columnNumber: 35\n    }\n  }, \"Add Tezos\") : null, !hasAddress('SOLANA') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('SOLANA');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1251,\n      columnNumber: 35\n    }\n  }, \"Add Solana\") : null, !hasAddress('STX') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('STX');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1254,\n      columnNumber: 35\n    }\n  }, \"Add Stacks\") : null, !hasAddress('TAP') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('TAP');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1257,\n      columnNumber: 35\n    }\n  }, \"Add Taproot\") : null))) : null))) : null, !(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 137) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1269,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: mine && vaultChainId == 1 ? \"33%\" : vaultChainId == 137 ? \"100%\" : \"50%\",\n    m: 2.5,\n    mb: 5,\n    onClick: () => {\n      visitOpenSeaLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1271,\n      columnNumber: 25\n    }\n  }, \"Opensea\"), vaultChainId == 1 ? __jsx(Button, {\n    className: \"nft_button\",\n    width: mine ? \"33%\" : \"50%\",\n    m: 2.5,\n    mb: 5,\n    onClick: () => {\n      visitLooksRareLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1281,\n      columnNumber: 27\n    }\n  }, \"LooksRare\") : null, mine && vaultChainId == 1 ? __jsx(Button, {\n    className: \"nft_button\",\n    width: \"33%\",\n    m: 2.5,\n    mb: 5,\n    onClick: () => {\n      visitArcadeLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1293,\n      columnNumber: 28\n    }\n  }, \"Arcade\") : null, showOffer ? __jsx(Button, {\n    className: \"\",\n    onClick: () => {\n      onOpenOfferModal();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1304,\n      columnNumber: 27\n    }\n  }, mine ? 'My Offers' : 'Make an Offer', \" (NFT\\xB2NFT)\") : null) : null, isCovalApproved && !live ? __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1310,\n      columnNumber: 21\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    p: 1,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1311,\n      columnNumber: 23\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1312,\n      columnNumber: 25\n    }\n  }, \"Creating a vault spends \", price * Math.pow(10, -decimals), \" Coval from your wallet\"))) : null, mine && !approved ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1319,\n      columnNumber: 19\n    }\n  }, __jsx(Button, {\n    backgroundColor: \"#02b402\",\n    color: \"black !important\",\n    fontWeight: \"bold !important\",\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: () => {\n      return handleApproveForall();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1320,\n      columnNumber: 21\n    }\n  }, \" Approve Minting\"))) : null, !live && mine && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg && approved && !isCovalApproved ? __jsx(React.Fragment, null, __jsx(Button, {\n    backgroundColor: \"#02b402\",\n    color: \"black !important\",\n    fontWeight: \"bold !important\",\n    width: \"100%\",\n    mt: 5,\n    onClick: approveCovalFlow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1334,\n      columnNumber: 21\n    }\n  }, \"Approve Spending Coval\")) : null, (showTransferPassword || mintPassword) && acceptable ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1344,\n      columnNumber: 23\n    }\n  }, __jsx(Link, {\n    href: location.protocol + '//' + location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1345,\n      columnNumber: 25\n    }\n  }, \"Copy Gift Link\"), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1346,\n      columnNumber: 25\n    }\n  }, \"Password: \", transferPassword || mintPassword)) : null, acceptable && claimedBy !== account ? __jsx(React.Fragment, null, __jsx(Button, {\n    mt: 2,\n    width: \"100%\",\n    onClick: () => {\n      fireMetaMask();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1352,\n      columnNumber: 25\n    }\n  }, \"Accept\"), __jsx(Input, {\n    mt: 2,\n    type: \"password\",\n    id: \"mintPassword\",\n    minLength: 3,\n    maxLength: 200,\n    value: mintPassword || '',\n    onChange: e => {\n      console.log('grrr', e.target.value, mintPassword);\n      setMintPassword(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1353,\n      columnNumber: 25\n    }\n  })) : null, !live && mine && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg && approved && isCovalApproved ? __jsx(React.Fragment, null, __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    isDisabled: !vaultPrivacy && vaultValues.length < 1 || mintLockedForever,\n    onClick: lazyMint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1371,\n      columnNumber: 25\n    }\n  }, mintLockedForever ? 'Mint Locked - keys accessed before mint' : !vaultPrivacy && vaultValues.length < 1 ? 'Please load the vault to mint' : 'Mint Vault')) : null, !(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed && approved && live ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1376,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      handleClaim();\n    },\n    isDisabled: claiming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1377,\n      columnNumber: 23\n    }\n  }, claiming ? 'Claiming ...' : 'Unlock Vault (Get Private Keys)')) : vaultChainId === chainId && (status == 'claimed' || mintLockedForever) && (claimedBy === account || mine) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1388,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1389,\n      columnNumber: 23\n    }\n  }, \"Get Keys\")) : null, __jsx(Stack, {\n    mt: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1395,\n      columnNumber: 17\n    }\n  }, __jsx(React.Fragment, null, __jsx(\"button\", {\n    className: \"nft_button\",\n    onClick: () => {\n      onAdvancedToggle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1397,\n      columnNumber: 21\n    }\n  }, \"Advanced Operations\"), __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1398,\n      columnNumber: 21\n    }\n  }, __jsx(Collapse, {\n    width: \"100%\",\n    isOpen: isAdvancedOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1399,\n      columnNumber: 23\n    }\n  }, vaultChainId === chainId && mineUnMinted && status != \"claimed\" && !mintLockedForever ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1401,\n      columnNumber: 27\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1402,\n      columnNumber: 29\n    }\n  }, \"Get Keys (Unlocking will prevent minting)\")) : null, mine && showMove && qualifiedCollection && qualifiedCollection[chainId] && qualifiedCollection.name && qualifiedCollection.chain ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1409,\n      columnNumber: 27\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      handleMove();\n    },\n    isDisabled: moving,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1410,\n      columnNumber: 29\n    }\n  }, moving ? 'Moving ...' : 'Move Vault')) : null, mine || claimedBy == account ? __jsx(JsonDownloadLink, {\n    data: rawMetadata,\n    filename: `EmblemVault-${tokenId}.json`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1423,\n      columnNumber: 27\n    }\n  }) : null, (!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: deleteVault,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1427,\n      columnNumber: 27\n    }\n  }, \"Delete Vault \") : null))))), vaultIPFS ? __jsx(HStack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1436,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    target: \"new\",\n    mb: 2,\n    ml: 35,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1437,\n      columnNumber: 23\n    }\n  }, \"View Metadata on IPFS \"), vaultImageIPFS ? __jsx(Link, {\n    mb: 2,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultImageIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1439,\n      columnNumber: 25\n    }\n  }, \"View Image on IPFS \") : null) : null, sealed ? __jsx(Box, {\n    d: \"flex\",\n    mb: 2,\n    ml: 35,\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1445,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1446,\n      columnNumber: 23\n    }\n  }, \"*This vault is sealed forever.\")) : null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1450,\n      columnNumber: 17\n    }\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1451,\n      columnNumber: 42\n    }\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1455,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1456,\n      columnNumber: 21\n    }\n  }), accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving ? \"Handling Approval Flow ...\" : transfering ? \"Transfering Vault ...\" : minting ? \"Minting Vault\" : \"Validating transaction\") : null)) : vaultValues.length > 0 && slideshowOnly ? __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1464,\n      columnNumber: 11\n    }\n  }, vaultValues.length && vaultValues.filter(item => {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultValues[0].image,\n    items: vaultValues.filter(value => {\n      return value.image !== vaultValues[0].image;\n    }).map(value => {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1466,\n      columnNumber: 17\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1468,\n      columnNumber: 17\n    }\n  })) : invalidVault ? __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1473,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1474,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1478,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1480,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      if (claiming && !accepting && !preTransfering) {\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account);\n        location.href = location.origin + '/nft?id=' + tokenId + '&cc=t';\n      } else if (preTransfering) {\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        setApproving(false);\n        getVault();\n        setHash(null);\n        location.href = location.origin + '/nft?id=' + tokenId;\n      } else if (transfering) {\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else if (minting) {\n        checkLiveliness(tokenId, () => {\n          setMinting(false);\n          setLive(true);\n          location.href = location.origin + '/nft?id=' + tokenId + '&cc=t';\n        });\n      } else {\n        location.href = location.origin + '/nft?id=' + tokenId;\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1488,\n      columnNumber: 11\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1527,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","Link","Alert","AlertIcon","useDisclosure","Collapse","useColorMode","Tabs","TabList","Tab","TabPanel","TabPanels","HStack","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","Loader","dynamic","Contract","TransactionToast","EMBLEM_API","contractAddresses","curatedContracts","SIG_API","EMBLEM_V2_API","useContract","CHAIN_ID_NAMES","CryptoJS","ReactMarkdown","gfm","Embed","NFTSlideshow","CoinBalance","Attributes","generateWallet","FetchNodeDetails","TorusUtils","JsonDownloadLink","AddrModal","KeysModal","OfferModal","Nft","account","chainId","library","query","clearCache","setCache","cc","showMove","setShowMove","curated","qualifiedCollection","setQualifiedCollection","name","chain","moving","setMoving","approved","setApproved","mintPassword","setMintPassword","key","showOffer","setShowOffer","offer","framed","setFramed","tokenId","setTokenId","id","slideshowOnly","setSlideshowOnly","vaultName","setVaultName","vaultIPFS","setVaultIPFS","vaultImageIPFS","setVaultImageIPFS","vaultCiphertextV2","setVaultCiphertextV2","vaultDesc","setVaultDesc","vaultImage","setVaultImage","ownedImage","setOwnedImage","vaultValues","setVaultValues","loadedValues","setLoadedValues","vaultDataValues","setVaultDataValues","attributes","setAttributes","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","vaultChain","setVaultChain","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","state","setState","loaded","mine","setMine","claiming","setClaiming","status","setStatus","sealed","setSealed","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","privValues","setKeyValues","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","accepting","setAccepting","approving","setApproving","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","preTransfering","setPreTransfering","transfering","setTransfering","owner","setOwner","live","setLive","checkLive","setCheckLive","nonce","setNonce","block","setBlock","mintSignature","setMintSignature","to","setTo","showVerifyingSignature","setShowVerifyingSignature","showMakingVaultMsg","setShowMakingVaultMsg","minting","setMinting","isCrowdSale","setIsCrowdSale","alternateContractAddress","setAlternateContractAddress","targetAsset","setTargetAsset","image","metadata","targetContract","setTargetContract","serialNumber","isCovalApproved","setIsCovalApproved","decimals","setDecimals","allowance","setAllowance","balance","setBalance","price","setPrice","mineUnMinted","setMineUnMinted","mintLockedForever","setMintLockedForever","rawMetadata","setRawMetadata","handlerContract","vaultHandler","vaultHandlerAbi","vaultHandlerContract","vaultHandlerV8","vaultHandlerV8Abi","emblemContract","emblemVault","emblemAbi","covalContract","coval","covalAbi","isOpen","isOpenAddrModal","onOpen","onOpenAddrModal","onClose","onCloseAddrModal","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","isOpenOfferModal","onOpenOfferModal","onCloseOfferModal","onToggle","isManageAddressOpen","onManageAddressToggle","isAdvancedOpen","onAdvancedToggle","colorMode","transak","transferImage","getVaultContract","address","getSigner","connectUnchecked","getCuratedContract","erc1155Abi","checkLiveliness","cb","alert","fetch","method","headers","service","chainid","toString","body","JSON","stringify","then","response","data","json","console","log","lazyMint","signMessage","signature","error","setTimeout","delayedMint","msg","sig","cipherTextHash","filter","coin","buyWithSignature2","catch","fireMetaMask","getWitness","witness","transferWithCode","code","addPreTransfer","handleApproveForall","setApprovalForAll","approveCovalFlow","approve","deleteVault","location","href","split","syncAccount","synched","localStorage","getItem","setItem","getVault","jsonData","setStates","image_ipfs","collectionAddress","getAllBalancesLive","v","includes","ciphertextV2","mintLocked","mintLockBlock","description","totalValue","values","concat","item","trait_type","addresses","ipfs","origin","network","isPvt","length","project","value","projectName","_qualifiedCollection","getAllBalances","balances","getAllBalancesByAddress","ethAddress","btcAddress","savePasswordToLocalStorage","loadPasswordFromLocalStorage","storedPw","getSignedJWT","myHeaders","Headers","append","raw","redirect","getTorusKeys","verifierId","idToken","fetchNodeDetails","torusUtils","enableOneKey","torusNodeEndpoints","torusIndexes","getNodeDetails","verifier","privKey","retrieveShares","verifier_id","privateKey","addAddress","decryptEmbed","getContractStates","owned","_owner","getOwnerOfSerial","ownerOf","balanceOf","Number","finish","err","getPreTransfer","isApproved","isApprovedForAll","_from","hasAddress","onRenew","handleSign","getSerial","token","keys","bytes","AES","decrypt","payload","parse","enc","Utf8","phrase","forEach","getSTXKey","window","phrasePathToKey","path","wallet","secretKey","password","accounts","stxPrivateKey","handleHideAsset","hideAsset","handleAddressSign","result","handleOwnedEmbed","handleMove","moveVault","serial","handleClaim","claim","claimOnChain","startDecryptEffect","theLetters","ctnt","speed","increment","clen","si","stri","fixed","rustle","i","nextFrame","pos","num","Math","floor","random","letter","charAt","noLayout","splitDescription","words","desc","trim","tryDecrypt","ciphertext","replace","decryptAddresses","cipherText","decryptedData","visitOpenSeaLink","open","visitLooksRareLink","visitArcadeLink","__html","toLocaleString","type","map","canSwipe","e","target","toFixed","attribute_key","addr","pow","protocol","host"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n  Collapse,\n  useColorMode,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanel,\n  TabPanels\n} from '@chakra-ui/core'\n\nimport {HStack} from '@chakra-ui/react'\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { SetStateAction, useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, contractAddresses, curatedContracts, SIG_API, EMBLEM_V2_API } from '../constants'\nimport { useContract } from '../hooks'\nimport { CHAIN_ID_NAMES } from '../utils'\nimport CryptoJS from 'crypto-js'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport Embed from './Embed'\nimport NFTSlideshow from './embed/NFTSlideshow'\nimport CoinBalance from './partials/CoinBalance'\nimport Attributes from './partials/Attributes';\nimport { generateWallet } from '@stacks/wallet-sdk';\nimport FetchNodeDetails from \"@toruslabs/fetch-node-details\"\nimport TorusUtils from \"@toruslabs/torus.js\"\nimport JsonDownloadLink from './JsonDownloadLink'\n\n\ndeclare global {\n  interface Window { phraseToKey: any, phrasePathToKey: any}\n}\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\nconst OfferModal = dynamic(() => import('./OfferModal'))\n\nexport default function Nft() {\n  \n \n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [clearCache, setCache] = useState(query.cc == 't')\n  const [showMove, setShowMove] = useState(query.curated == 't')\n  const [qualifiedCollection, setQualifiedCollection] = useState({1: '', name: '', chain: ''})\n  const [moving, setMoving] = useState(false)\n  const [approved, setApproved] = useState(false)\n  const [mintPassword, setMintPassword] = useState(query.key)\n  const [showOffer, setShowOffer] = useState(query.offer || false)\n  const [framed, setFramed] = useState(query.framed || true)\n  const [tokenId, setTokenId] = useState(query.id)\n  const [slideshowOnly, setSlideshowOnly] = useState(query.slideshowOnly || false)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultIPFS, setVaultIPFS] = useState('')\n  const [vaultImageIPFS, setVaultImageIPFS] = useState('')\n  const [vaultCiphertextV2, setVaultCiphertextV2] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [ownedImage, setOwnedImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [loadedValues, setLoadedValues] = useState(false)\n  const [vaultDataValues, setVaultDataValues] = useState([])\n  const [attributes, setAttributes] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [vaultChain, setVaultChain] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [sealed, setSealed] = useState(false)\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [privValues, setKeyValues] = useState([])\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n  const [preTransfering, setPreTransfering] = useState(false)\n  const [transfering, setTransfering] = useState(false)\n  const [owner, setOwner] = useState(null)\n  const [live, setLive] = useState(false)\n  const [checkLive, setCheckLive] = useState(false)\n  const [nonce, setNonce] = useState(null)\n  const [block, setBlock] = useState(null)\n  const [mintSignature, setMintSignature] = useState(null)\n  const [to, setTo] = useState(null)\n  const [showVerifyingSignature, setShowVerifyingSignature] = useState(false)\n  const [showMakingVaultMsg, setShowMakingVaultMsg] = useState(false)\n  const [minting, setMinting] = useState(false)\n  const [isCrowdSale, setIsCrowdSale] = useState(false)\n  const [alternateContractAddress, setAlternateContractAddress] = useState(null)\n  const [targetAsset, setTargetAsset] = useState({name: '', image: '', metadata: ''})\n  const [targetContract, setTargetContract] = useState({name: '', chain: '', 4: '', 1: '', tokenId: {}, serialNumber: {'hex':''} })\n const [isCovalApproved, setIsCovalApproved] = useState(false)\n  const [decimals, setDecimals] = useState(null)\n  const [allowance, setAllowance] = useState(null)\n  const [balance, setBalance] = useState(null)\n  const [price, setPrice] = useState(null)\n  const [mineUnMinted, setMineUnMinted] = useState(false)\n  const [mintLockedForever, setMintLockedForever] = useState(false)\n  const [rawMetadata, setRawMetadata] = useState({})\n  \n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n  let emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n  const covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n  const { isOpen: isOpenOfferModal, onOpen: onOpenOfferModal, onClose: onCloseOfferModal } = useDisclosure()\n  const { isOpen, onToggle } = useDisclosure()\n  const { isOpen: isManageAddressOpen, onToggle: onManageAddressToggle } = useDisclosure()\n  const { isOpen: isAdvancedOpen, onToggle: onAdvancedToggle } = useDisclosure()\n\n  const { colorMode } = useColorMode()\n\n  let transak: { on: (arg0: any, arg1: { (data: any): void; (orderData: any): void }) => void; ALL_EVENTS: any; EVENTS: { TRANSAK_ORDER_SUCCESSFUL: any }; close: () => void; init: () => void }\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  let transferImage: string;\n\n  const getVaultContract = (address = null) =>{\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  const getCuratedContract = (address = null) =>{\n    return new Contract(address, contractAddresses.erc1155Abi, library.getSigner(account).connectUnchecked())\n  }  \n\n  const checkLiveliness = (tokenId: string | string[], cb: { (): void; (): void; (): any })=>{\n    alert(`here ${owner}`)\n    fetch(EMBLEM_API + '/liveliness', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({tokenId: tokenId}),\n    }).then(async function (response) {\n      let data = await response.json()\n      setLive(data.live)\n      console.log(\"Liveliness check\", data)\n    })\n    return cb()\n  }\n\n  const lazyMint = () =>{\n    library.getSigner(account)\n    .signMessage('Delayed Minting: ' + tokenId)\n    .then((signature: any) => {\n      console.log(\"sig\", signature)\n      fetch(EMBLEM_API + '/lazyMint', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({tokenId: tokenId, signature: signature}),\n      }).then(async function (response) {\n          let data = await response.json()\n          if (!data.error && data.data) {\n            setMintSignature(data.data.signature)\n            setNonce(data.data.nonce)\n            setBlock(data.data.block)\n            setShowVerifyingSignature(true)\n            // setCreating(true)\n            setTimeout(()=>{\n              delayedMint(data.data.nonce, data.data.block, data.data.signature)\n            }, 1500)\n          } else {\n            alert(data.error? data.msg: 'unknown error' )\n          }            \n      })\n    })\n  }\n\n  const delayedMint = (nonce, block, sig) => {\n    // setCreating(true)\n      console.log(\"Delayed Minting\")\n      setShowVerifyingSignature(false)\n      setShowMakingVaultMsg(true)\n      setMinting(true)\n      let cipherTextHash = vaultAddresses.filter(address=>{ return address.coin == \"ETH\"})[0].address\n      console.log(\"--------------------------------------------------------Delayed Minting\", account, tokenId, cipherTextHash, nonce, block, sig)\n      ;(handlerContract as Contract)\n      .buyWithSignature2(account, tokenId, cipherTextHash, nonce, block, sig)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n          setShowMakingVaultMsg(false)\n          \n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n          console.log(\"AAAAAHHHHHH\", error)\n          setShowMakingVaultMsg(false)\n          // setMinting(false)\n      })    \n  }\n\n  const fireMetaMask = () => {\n    console.log(mintPassword)\n    setAccepting(true)\n    getWitness((witness)=>{\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;(handlerContract as Contract)\n      .transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        setAccepting(false)\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          // setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n    })\n    \n  }\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\"+transferImage)\n    setPreTransfering(true)\n    ;(handlerContract as Contract)\n      .addPreTransfer(tokenId, \"0x\"+transferImage)\n      .then(({ hash }: { hash: string }) => {\n        // setTimeout(() => {\n          setHash(hash)\n          console.log(\"Set Pre Transfering True\", preTransfering)\n          // setShowMakingVaultMsg(true)\n        // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code){   \n            console.log(\"Error?\")       \n            setPreTransfering(false)\n            setShowTransferPassword(false)\n            setTransferPassword('')\n        } else {\n          // setShowTransferPassword(!showTransferPassword? true : false)\n          // setPreTransfering(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const handleApproveForall = () => {\n    setApproving(true)\n    ;(emblemContract as Contract)\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n        }\n      })\n  }\n\n  const approveCovalFlow = () => {\n    setApproving(true)\n    ;(covalContract as Contract)\n      .approve(contractAddresses.vaultHandler[chainId], '100000000000000')\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code == 4001) {\n          setApproving(false)\n        }\n      })\n  }\n\n  const deleteVault = () =>{\n    library.getSigner(account)\n      .signMessage('Delete: ' + tokenId)\n      .then((signature: any) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_API + '/v2/delete', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata'\n          },\n          body: JSON.stringify({tokenId: tokenId, signature: signature, chainId: chainId.toString()}),\n        }).then(async function () {\n          location.href = location.href.split(\"/\")[0] + \"/vaults\"\n        })\n      })\n  }\n\n  const syncAccount = () =>{\n    \n        let synched = localStorage.getItem(tokenId+'-v')\n        if (!synched) {\n          fetch(EMBLEM_API + '/sync/'+tokenId, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              service: 'evmetadata'\n            }          \n          }).then(async function (response){\n              localStorage.setItem(tokenId+'-v', '1')\n              return true\n          }).catch(()=>{\n            return false\n          })\n      }\n  }\n\n  \n\n  const getVault = async () => {\n    const response = await fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true'+(clearCache ? '&_vercel_no_cache=1' : ''), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        cc: (clearCache ? 't' : '')\n      },\n    })\n    const jsonData = await response.json()\n    setRawMetadata(jsonData)\n    setStates(jsonData)\n    // console.log('vault response was ', jsonData)\n    if (jsonData.image_ipfs) {\n      // getIPFSImage(jsonData.image_ipfs)\n    }\n    if (jsonData.collectionAddress){\n      setIsCrowdSale(true)\n      setAlternateContractAddress(jsonData.collectionAddress)\n    }\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      // setStates(jsonData)\n      // !slideshowOnly? saveCache(jsonData) : null\n      setLoadingApi(false)\n      setInvalidVault(false)\n    }\n    {\n      !vaultPrivacy && !loadedValues ?    \n      getAllBalancesLive([], tokenId, (v)=>{\n        if (v) {\n          setVaultValues(v)\n        }        \n      }) : null\n    }\n    // { if (jsonData.targetContract) {\n    //   setTimeout(() => {\n    //     location.href = location.origin + '/nft2?id=' + jsonData.tokenId\n    //   }, 500)\n    // }}\n  }\n\n  \n\n  const getWitness = async (cb: { (witness: any): void; (arg0: boolean): any }) => {\n    const response = await fetch(EMBLEM_API + '/witness/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        cc: 't',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n    })\n    const jsonData = await response.json()\n    if (jsonData.signature) {\n      console.log('witness', jsonData)\n      return cb(jsonData)\n    } else {\n      return cb(false)\n    }\n  }\n\n  const setStates = (jsonData) => {\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\"+framed : null\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2)\n    }\n    setMintLockedForever(jsonData.mintLocked && jsonData.mintLockBlock == 0)\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setOwnedImage(jsonData.ownedImage || null)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)): null\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter((item: { trait_type: string })=>{return item.trait_type === \"key\"})): null\n    jsonData.attributes ? setAttributes(jsonData.attributes): null\n    setVaultAddresses(jsonData.addresses)\n    setVaultIPFS(jsonData.ipfs || null)\n    setVaultImageIPFS(jsonData.image_ipfs || null)\n    jsonData.targetAsset? setTargetAsset(jsonData.targetAsset) : null\n    jsonData.targetContract? setTargetContract(jsonData.targetContract) : null\n    \n    if (jsonData.targetContract){\n      setTimeout(() => {\n        location.href = location.origin + '/nft2?id=' + jsonData.targetContract.tokenId\n      }, 500)\n    }    \n    setLive(jsonData.live == false ? false : true)\n    setNonce(jsonData.nonce)\n    setMintSignature(jsonData.signature)\n    setTo(jsonData.to)\n    setVaultChain(jsonData.network)\n    setVaultChainId(\n      jsonData.network == 'mainnet' ? 1 : \n      jsonData.network == \"rinkeby\" ? 4 : \n      jsonData.network == \"mumbai\" ? 80001 : \n      jsonData.network == \"matic\" ? 137 : \n      jsonData.network == \"xdai\" ? 100 : \n      jsonData.network == \"bsc\" ? 56 : \n      jsonData.network == \"fantom\" ? 250 : \n      jsonData.network == \"bitcoin\" ? 0 : \n      jsonData.network == \"aurora\" ? 1313161554 : \n      97\n    )\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n\n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item: { address: string | string[] }) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)    \n    if (jsonData.sealed) {\n      setSealed(true)\n    } else {\n      setSealed(false)\n    }\n    if(jsonData.values.length == 1 && jsonData.attributes.length > 0){\n      let project = jsonData.attributes.filter(item=>{return item.value == jsonData.values[0].name})\n      if (project.length > 0) {\n          let projectName = project[0].trait_type\n          let _qualifiedCollection = curatedContracts.filter(item=>{return item.name == projectName})\n          if (_qualifiedCollection.length > 0) {            \n              setQualifiedCollection(_qualifiedCollection[0])\n          }\n      }      \n    }    \n  }\n\n  const getAllBalances = async (values: string | any[], tokenId: string, cb: { (values: any): any; (arg0: any): any }) => {\n    // console.log(address)\n    const response = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await response.json()\n    console.log('response', response, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesLive = async (values: string | any[], tokenId: string | string[], cb: { (v: any): void; (v: any): void; (arg0: boolean): any }) => {\n    if (loadedValues) {\n      return cb(false)\n    }\n    setLoadedValues(true)\n    const response = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true&_vercel_no_cache=1' , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      },\n    })\n    \n    const jsonData = await response.json()\n    console.log('response', response, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesByAddress = async (values: string | any[], ethAddress: string, btcAddress: string, cb: { (values: any): void; (arg0: any): any }) => {\n    const response = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await response.json()\n    console.log('response', response, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword) // Save new state for later\n  }\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword')\n    storedPw && acceptable ? setMintPassword(storedPw) : null //setMintPassword(null)\n  }\n\n  const getSignedJWT = async (signature: any, tokenId: string | string[], cb: { (token: any): void; (arg0: any): any })=>{\n    var myHeaders = new Headers()\n    myHeaders.append('chainid', chainId.toString())\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, tokenId: tokenId })\n    const response = await fetch(SIG_API+'/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await response.json()\n    return cb(jsonData)\n  }\n\n  async function getTorusKeys( verifierId, idToken, cb) {\n    const fetchNodeDetails = new FetchNodeDetails({ network: \"mainnet\" });\n    const torusUtils = new TorusUtils({ enableOneKey: true, network: \"mainnet\" });\n\n    const { torusNodeEndpoints, torusIndexes } = await fetchNodeDetails.getNodeDetails({ verifier: 'tor-us-signer-vercel', verifierId });\n    const { privKey } = await torusUtils.retrieveShares(torusNodeEndpoints, torusIndexes, 'tor-us-signer-vercel', { verifier_id: verifierId }, idToken);\n    return cb({privateKey: privKey});\n  }\n\n  const addAddress = async (signature: any, tokenId: string | string[], coin: string, cb: { (result: any): void; (arg0: any): any }) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, coin: coin })\n    const response = await fetch(EMBLEM_API + '/address/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await response.json()\n    return cb(jsonData)\n  }\n\n  const decryptEmbed = async (signature: any, tokenId: string | string[], cb: { (result: any): void; (arg0: any): any }) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const response = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await response.json()\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    // alert(0)\n    console.log(\"Contract states\")\n    let owned = false\n    let _owner: string\n    try {\n      if (targetContract[chainId]) {\n        console.log(\"Checking owner wth targetContract\")\n        emblemContract = getCuratedContract(targetContract[chainId])\n        _owner = await emblemContract.getOwnerOfSerial(targetContract.serialNumber)\n        console.log(\"--------------------------- owner\", _owner, approved, account, contractAddresses.vaultHandlerV8[chainId])\n      } else {\n        _owner  = live? await emblemContract.ownerOf(tokenId): \"0x0000000000000000000000000000000000000000\"\n      }\n      setDecimals(await covalContract.decimals())\n      setAllowance(\n        await covalContract\n          .allowance(account, contractAddresses.vaultHandler[chainId])\n          .then((balance: { toString: () => string }) => balance.toString())\n      )\n      setBalance(await covalContract.balanceOf(account).then((balance: { toString: () => string }) => balance.toString()))\n      setPrice(await handlerContract.price().then((balance: { toString: () => string }) => balance.toString()))\n      if (Number(allowance) >= Number(price)) {\n        setIsCovalApproved(true)\n      } else {\n        setIsCovalApproved(false)\n      }\n      finish()\n    } catch(err){      \n      _owner = \"0x0000000000000000000000000000000000000000\"\n      finish()\n    }\n\n    async function finish(){\n     \n      let acceptable = await handlerContract.getPreTransfer(tokenId)\n      let isApproved: boolean | ((prevState: boolean) => boolean)\n      if (targetContract[chainId]) {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId])\n      } else {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId])\n      }\n      setApproved(isApproved)\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n      setOwner(_owner)\n      setMine(_owner === account || (to === account && _owner === \"0x0000000000000000000000000000000000000000\"))\n      setMineUnMinted(to === account && _owner === \"0x0000000000000000000000000000000000000000\")\n      loadPasswordFromLocalStorage()\n      if (live == false && !checkLive) {\n        setCheckLive(true)\n        checkLiveliness(tokenId, ()=>{\n  \n        })\n      }\n    }\n    \n  }\n\n  useEffect(()=>{\n    console.log(\"mine?\", mine)\n    console.log(\"claiming?\", claiming)\n    console.log(\"accepting?\", accepting)\n    console.log(\"acceptable\", acceptable)\n    console.log(\"qualified\", qualifiedCollection)\n    console.log(\"owner\",owner)\n  })\n\n  const hasAddress = (coin: string)=>{\n    console.log(coin, vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0)\n    return vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0\n  }\n\n  const onRenew = async (name: any) => { \n    library\n      .getSigner(account)\n      .signMessage('Renew: ' + tokenId)\n      .then((signature: any) => {\n        let address = vaultAddresses.filter(address=>{ return address.coin == 'NMC'})[0].address\n        console.log('signature', signature, name)\n        fetch(EMBLEM_API + '/nmc/renew/' + address, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata',\n            chainid: chainId.toString()\n          },\n          body: JSON.stringify({\n                \"tokenId\": tokenId,\n                \"signature\": signature,\n                \"name\": name\n              })\n        }).then(async function (response) {\n          let data = await response.json()\n          console.log(\"Requested Renew\", data)\n          \n        })\n      })\n  }\n  \n  const handleSign = async () => {\n    \n    let serialNumber: any\n    if (targetContract[chainId]) {      \n      emblemContract = getCuratedContract(targetContract[chainId])\n      serialNumber = await emblemContract.getSerial(targetContract.tokenId, 0)\n    }\n\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + (targetContract[chainId]? serialNumber: tokenId))\n      .then((signature: any) => {\n        setState({loaded: false})\n        if (mineUnMinted && status != \"claimed\" && !mintLockedForever) {\n          setMintLockedForever(true)\n        }\n        getSignedJWT(signature, tokenId, (token: { token: any })=>{\n          getTorusKeys(tokenId, token.token, async (keys: { privateKey: any })=>{\n            try {\n              var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey)\n              let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)) \n              setKeyValues(payload.values)\n              setMnemonic(payload.phrase)\n              vaultAddresses.forEach(async address=>{\n                if (address.coin == 'STX') {\n                  address.key = await getSTXKey(address, payload.phrase)\n                } else {\n                  address.key = window.phrasePathToKey(payload.phrase, address.path)\n                }\n                if (address.coin == 'BTC') setPrivKeyBTC(address.key)\n                if (address.coin == 'ETH') setPrivKeyETH(address.key)\n              })\n            } catch(err){\n              alert(err)\n              setTimeout(()=>{location.href = location.href}, 2000)\n            }\n            setState({loaded: true})\n            onOpenKeysModal()\n          })          \n        })\n    })\n  }\n\n  const getSTXKey = async (address: any, phrase: string)=>{\n    const wallet: any = await generateWallet({\n      secretKey: phrase,\n      password: '',\n    })\n    console.log('------ stacks account -', wallet.accounts[0])\n    const account = wallet.accounts[0];\n    address.key = account.stxPrivateKey\n    return address.key\n  }\n\n  const handleHideAsset = async (coin: { name: any; coin: any; address: any }) => {\n    library\n      .getSigner(account)\n      .signMessage('HideAsset: ' + tokenId)\n      .then((signature: any) => {\n        hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, ()=>{\n          console.log(\"Done hiding coin and getting new balances\")\n        })\n      })\n  }\n\n  function hideAsset(tokenId, coin: any, address: any, name: any, signature: any, cb: { (): void; (): any }) {\n    fetch(EMBLEM_API + '/hide/'+tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin? coin: null,\n        \"address\": address? address: null,\n        \"name\": name? name: null,\n        \"signature\": signature? signature: null\n      })\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"-------\", data)\n      getAllBalances([], tokenId, (values: SetStateAction<any[]>)=>{\n        setVaultValues(values)\n        return cb()\n      })\n    }) \n  }\n\n  const handleAddressSign = async (coin: string) => {\n    library\n      .getSigner(account)\n      .signMessage('Address: ' + tokenId)\n      .then((signature: any) => {\n        addAddress(signature, tokenId, coin, (result: any) => {\n          getVault()\n        })\n      })\n  }\n\n  const handleOwnedEmbed = async () => {\n    library\n      .getSigner(account)\n      .signMessage('Embed: ' + tokenId)\n      .then((signature: any) => {\n        decryptEmbed(signature, tokenId, (result: { ownedImage: SetStateAction<string> }) => {\n          setVaultImage(result.ownedImage)\n        })        \n      })\n  }\n\n  const handleMove = async () => {\n    console.log('---------- qualified move', qualifiedCollection)\n    library.getSigner(account)\n    .signMessage('Move Vault: ' + tokenId)\n    .then((signature: any) => {\n      fetch(EMBLEM_V2_API + '/move-vault/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({\n          \"chainId\": 1,\n          \"from\": account,\n          \"sourceContract\": {\n              \"1\": contractAddresses.emblemVault[vaultChainId]\n          },\n          \"targetContract\": {\n              \"1\": qualifiedCollection[chainId],\n              \"name\": qualifiedCollection.name,\n              \"chain\": qualifiedCollection.chain\n          },\n          \"targetAsset\": {\n              \"name\": vaultValues[0].name\n          },\n          \"amount\": 1,\n          \"tokenId\": tokenId,\n          \"signature\": signature\n      })\n      }).then(async function (response: any) {\n        let data = await response.json()\n        \n        if (data.sig) {\n          vaultHandlerContract.moveVault(contractAddresses.emblemVault[vaultChainId], qualifiedCollection[chainId], tokenId, data.tokenId, data.nonce, data.sig, data.serial).then((hash: any): void =>{\n            setHash(hash.hash)\n            setMoving(false)\n          })\n        }\n      })\n    })\n  }\n\n  const handleClaim = async () => {\n    if (targetContract[chainId]) {\n      vaultHandlerContract.claim(targetContract[chainId], targetContract.tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    } else {\n      handlerContract.claimOnChain(tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    }\n  } \n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos: number) {\n      for (var i = 0; i < clen - stri; i++) {\n        var num = Math.floor(theLetters.length * Math.random())\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    (account && chainId && vaultChainId && chainId == vaultChainId) || ((query.noLayout && query.noLayout == 'true') || (query.slideshowOnly && query.slideshowOnly == 'true')) ? getContractStates() : null\n  })\n\n  function splitDescription(words: string) {\n    var desc = words? words.split('\\n\\n\\n\\n'): [\" \"]\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key: SetStateAction<string>) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    console.log(vaultAddresses)\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      let ethAddress = vaultAddresses.filter((item) => {return item.coin === 'ETH'})[0].address\n      let btcAddress = vaultAddresses.filter((item) => {return item.coin === 'BTC'})[0].address\n      console.log(\"SUCCESS\", vaultAddresses)\n      getAllBalancesByAddress([], ethAddress, btcAddress, (values: SetStateAction<any[]>)=>{\n        setVaultValues(values)\n      })\n    } catch (err) {console.log('WTF', err)}\n  }\n\n  function decryptAddresses(key: any) {\n    vaultAddresses.forEach((item) => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '')\n        item.address = decrypt(cipherText, key)\n      }      \n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText: any, key: any) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  function visitOpenSeaLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : '') +\n      'opensea.io/assets/' + \n      (vaultChainId == 137 ? 'matic/' : 'ethereum/') +\n      (alternateContractAddress? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      tokenId \n    , '_blank')\n  }\n\n  function visitLooksRareLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : '') +\n      'looksrare.org/collections/' + \n      (vaultChainId == 137 ? 'matic/' : '') +\n      (alternateContractAddress? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      tokenId \n    , '_blank')\n  }\n\n  function visitArcadeLink() {\n    window.open(\n      `https://app.arcade.xyz/terms/asset/${targetContract[vaultChainId]? targetContract[vaultChainId]: contractAddresses.emblemVault[vaultChainId]}/${tokenId}` , '_blank')\n  }\n\n  { alternateContractAddress?\n    emblemContract = getVaultContract(alternateContractAddress? alternateContractAddress: null)\n  : null}\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n        <script\n            dangerouslySetInnerHTML={{\n              __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              if (localStorage.getItem(\"darkMode\") == 'false') {\n                localStorage.setItem(\"darkMode\",\"true\"); location.href = location.href\n              }\n              `,\n            }}\n          />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n        privValues={privValues}\n        addresses={vaultAddresses}\n      />\n      {showOffer ? (\n        <OfferModal\n          isOpen={isOpenOfferModal}\n          onClose={onCloseOfferModal}\n          tokenId={tokenId}\n          mine={mine}\n        />\n      ) : null}\n      \n\n      <Loader loaded={state.loaded}>\n        <Box height=\"40px\"></Box>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault && !slideshowOnly ? (\n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                className=\"NFT\" \n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"blue.500\"\n                >\n                  Vault Network: {CHAIN_ID_NAMES[vaultChainId]}\n                </Box>\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  // textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null}\n                </Box>\n                <Stack className=\"NFT-content\" align=\"center\">\n                  { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                      <NFTSlideshow name={vaultName} image={vaultImage} items={vaultValues.map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n                    ) : (\n                      <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n                    )\n                  }\n                  {mine && ownedImage ? (\n                    <Button onClick={() => {handleOwnedEmbed()}}>(OWNED) Show Full Embed</Button>\n                  ): null}\n                </Stack>\n                <Stack align=\"center\" maxWidth=\"400px\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\" maxWidth=\"400px\">\n                    <Stack>\n                      <Text fontSize=\"xs\">\n                      { vaultChainId == chainId ? (\n                        <Link href={\"./vaults?address=\"+owner}>\n                          Owner: {owner}\n                        </Link>\n                      ) : null }\n                      </Text>\n                      <Text overflowWrap=\"anywhere\" mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" className=\"md\">\n                        <ReactMarkdown plugins={[gfm]} children={splitDescription(vaultDesc)} />\n                      </Text>\n                      \n                    </Stack>                    \n                  </Box>                    \n                </Stack>\n                <Box p=\"6\">\n                <Tabs isFitted variant='enclosed'>\n                  <TabList mb='1em'>\n                    <Tab>Balances</Tab>\n                    <Tab>Attributes</Tab>\n                  </TabList>\n                  <TabPanels>\n                    <TabPanel>\n                      {vaultPrivacy ? (\n                        <Box mb={5}>\n                          <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                            {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                          </Text>\n                          <Input\n                            type=\"password\"\n                            id=\"vault-password\"\n                            onChange={(e) => tryDecrypt(e.target.value)}\n                            aria-describedby=\"password-helper-text\"\n                          />\n                        </Box>\n                      ) : (\n                        <Box d=\"flex\" backgroundColor={colorMode == \"light\"? \"gray.100\": \"gray.700\"} alignItems=\"baseline\" className=\"coin-balance-content\">\n                          <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                            <Text as=\"h4\" mt={2} fontWeight=\"semibold\">\n                            \n                              Current Contents:  <button\n                              onClick={() =>{\n                                getAllBalancesLive([], tokenId, (v)=>{\n                                  setLoadedValues(false)\n                                  setVaultValues(v)\n                                })\n                              }}\n                            > [Refresh Balances]</button>\n                            </Text>\n                            <Text as=\"p\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"}>${Number(vaultTotalValue.toFixed(4)).toLocaleString()}</Text>\n                            { vaultValues.length ? (\n                              vaultValues.map((coin) => {\n                                return (  \n                                  <Stack> \n                                    <CoinBalance colorMode={colorMode} coin={coin} mine={(status === 'claimed' && claimedBy === account) || mine} onRenew={onRenew} hideAsset={handleHideAsset}/>\n                                  </Stack>\n                                )\n                              })\n                            ) : (<Refreshing /> ) } \n                            { vaultDataValues.length ? (\n                              vaultDataValues.map((data) => {\n                                return (\n                                  <Text>Data: {data.attribute_key}</Text>\n                                )                        \n                              })\n                            ) : !vaultDataValues.length && !vaultValues.length ? (\n                              <Text>Nothing in here! Fill 'er up!</Text>\n                            ) : null}\n                          </Box>\n                        </Box>\n                      )}\n                  </TabPanel>\n                    <TabPanel>\n                      <Attributes colorMode={colorMode} attributes={attributes}/>\n                      </TabPanel>\n                    </TabPanels>\n                  </Tabs>\n                  \n                  {!vaultPrivacy ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <ButtonGroup justifyContent=\"space-between\" spacing={6}>\n                        <Stack>\n                          <Text>Deposit Addresses</Text>\n                          <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                            {vaultAddresses.map((addr) => {\n                              return (\n                                <Button\n                                  className=\"address_nft_button\"\n                                  \n                                  ml={2}\n                                  mt={2}\n                                  font-weight=\"100 !important\"\n                                  key={addr.address}\n                                  onClick={() => {\n                                    setCurrCoin(addr.coin)\n                                    setCurrAddr(addr.address)\n                                    onOpenAddrModal()\n                                  }}\n                                >\n                                  {addr.coin == 'ETH' ? addr.coin + '/EVM' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP': addr.coin == 'TAP'? 'TAPROOT': addr.coin}\n                                </Button>\n                              )\n                            })}\n                          </Flex>\n                        {(mine || status === 'claimed') && vaultAddresses.length < 12 ? (\n                          <>\n                            <button className=\"nft_button\" onClick={()=>{onManageAddressToggle()}}>Manage Addresses</button>\n                            <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                              <Collapse isOpen={isManageAddressOpen}>\n                                { !hasAddress('DOGE') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('DOGE') }}>Add DOGE</Button>\n                                ) : null }\n                                { !hasAddress('DGB') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('DGB') }}>Add Digibyte</Button>\n                                ) : null }\n                                { !hasAddress('NMC') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('NMC') }}>Add Namecoin</Button>\n                                ) : null }\n                                { !hasAddress('LTC') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('LTC') }}>Add Litecoin</Button>\n                                ) : null }\n                                { !hasAddress('MONA') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('MONA') }}>Add Mona</Button>\n                                ) : null }\n                                { !hasAddress('TEZOS') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('TEZOS') }}>Add Tezos</Button>\n                                ) : null }\n                                { !hasAddress('SOLANA') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('SOLANA') }}>Add Solana</Button>\n                                ) : null }\n                                { !hasAddress('STX') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('STX') }}>Add Stacks</Button>\n                                ) : null }\n                                { !hasAddress('TAP') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('TAP') }}>Add Taproot</Button>\n                                ) : null }\n                              </Collapse>\n                            </Flex>\n                          </>\n                        ) : null}\n                        </Stack>\n                      </ButtonGroup>\n                    </Box>\n                  ) : null}\n\n                  {!(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 137 )? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      {/* <Stack d=\"flex\" width=\"100%\"> */}\n                        <Button\n                          className=\"nft_button\"\n                          width={mine && vaultChainId == 1? \"33%\" : vaultChainId == 137? \"100%\": \"50%\"}\n                          m={2.5}\n                          mb={5}\n                          onClick={() => {visitOpenSeaLink()}}>\n                            Opensea\n                        </Button>\n\n                        { vaultChainId == 1 ?(\n                          <Button\n                          className=\"nft_button\"\n                          width={mine? \"33%\" : \"50%\"}\n                          m={2.5}\n                          mb={5}\n                          onClick={() => {visitLooksRareLink()}}\n                        >\n                          LooksRare\n                        </Button>\n                        ) : null}\n                        \n                        { mine && vaultChainId == 1? (\n                           <Button\n                           className=\"nft_button\"\n                           width=\"33%\"\n                           m={2.5}\n                           mb={5}\n                           onClick={() => {visitArcadeLink()}}\n                         >\n                           Arcade\n                         </Button>\n                        ): null}                       \n                        {showOffer? (\n                          <Button className=\"\" onClick={() => { onOpenOfferModal() }}>{mine? ('My Offers') : ('Make an Offer')} (NFT²NFT)</Button>\n                        ) : null}                        \n                    </Box>\n                  ) : null}\n                  \n                  {isCovalApproved && !live ? (\n                    <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                      <Box maxW=\"sm\" borderWidth=\"1px\" p={1} rounded=\"lg\" overflow=\"hidden\">\n                        <Text>Creating a vault spends {price * Math.pow(10, -decimals)} Coval from your wallet</Text>\n                        {/* <Text>48 hour Free minting - sponsored by the team at MegaPunks <Link href=\"https://megapunks.com\">https://megapunks.com</Link></Text> */}\n                      </Box>\n                    </Stack>\n                  ) : null}\n\n                {mine && !approved ? (<>\n                  <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                    <Button\n                      backgroundColor={\"#02b402\"}\n                      color={\"black !important\"}\n                      fontWeight={\"bold !important\"}\n                      className=\"nft_button\"\n                      width=\"100%\" onClick={() => {\n                        return handleApproveForall()\n                      }\n                      }> Approve Minting</Button>\n                  </Box>\n                </>) : null}\n\n                {!live && mine && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg && approved && !isCovalApproved ? (\n                  <>\n                    <Button backgroundColor={\"#02b402\"}\n                      color={\"black !important\"}\n                      fontWeight={\"bold !important\"}\n                      width=\"100%\" mt={5} onClick={approveCovalFlow}>\n                      Approve Spending Coval\n                    </Button>\n                  </>\n                ) : null}\n\n                  {(showTransferPassword || mintPassword) && acceptable ? (\n                      <Box>\n                        <Link href={location.protocol +'//'+ location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword)}>Copy Gift Link</Link>\n                        <Text>Password: {(transferPassword || mintPassword)}</Text>\n                      </Box>\n                  ) : null}\n                  \n                  {acceptable && claimedBy !== account ? (\n                    <>\n                        <Button mt={2} width=\"100%\" onClick={()=>{fireMetaMask()}}>Accept</Button>\n                        <Input\n                          mt={2}\n                          type=\"password\"\n                          id=\"mintPassword\"\n                          minLength={3}\n                          maxLength={200}\n                          value={mintPassword || ''}\n                          onChange={(e) => {\n                            console.log('grrr', e.target.value, mintPassword)\n                            setMintPassword(e.target.value)}\n                          }\n                          autoComplete=\"off\"\n                        />\n                    </>\n                  ) : null}\n\n                  {!live && mine && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg && approved && isCovalApproved ? (\n                      <>                      \n                        <Button width=\"100%\" mt={5} isDisabled={(!vaultPrivacy && vaultValues.length < 1)|| mintLockedForever} onClick={lazyMint}>{mintLockedForever? 'Mint Locked - keys accessed before mint' : !vaultPrivacy && vaultValues.length < 1? 'Please load the vault to mint': 'Mint Vault'}</Button>\n                      </>\n                  ) : null}\n\n                  {!(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed && approved && live ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        onClick={() => {\n                          handleClaim()\n                        }}\n                        isDisabled={claiming}\n                      >\n                        {claiming ? 'Claiming ...' : 'Unlock Vault (Get Private Keys)'}\n                      </Button>\n                    </Box>\n                  ) : (vaultChainId === chainId && ((status == 'claimed' || mintLockedForever) && (claimedBy === account || mine))) ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={handleSign}>\n                      Get Keys\n                      </Button>\n                    </Box>\n                  ) : null}\n\n                <Stack mt={5}>\n                  <>\n                    <button className=\"nft_button\" onClick={() => { onAdvancedToggle() }}>Advanced Operations</button>\n                    <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\">\n                      <Collapse width={\"100%\"} isOpen={isAdvancedOpen}>\n                        {vaultChainId === chainId && mineUnMinted && status != \"claimed\" && !mintLockedForever ? (\n                          <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                            <Button width=\"100%\" onClick={handleSign}>\n                              Get Keys (Unlocking will prevent minting)\n                            </Button>\n                          </Box>\n                        ) : null}\n\n                        {mine && showMove && qualifiedCollection && qualifiedCollection[chainId] && qualifiedCollection.name && qualifiedCollection.chain ? (\n                          <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                            <Button\n                              width=\"100%\"\n                              onClick={() => {\n                                handleMove()\n                              }}\n                              isDisabled={moving}\n                            >\n                              {moving ? 'Moving ...' : 'Move Vault'}\n                            </Button>\n                          </Box>\n                        ) : null}\n\n                        {mine || claimedBy == account ? (\n                          <JsonDownloadLink data={rawMetadata} filename={`EmblemVault-${tokenId}.json`} />\n                        ) : null}\n\n                        {(!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? (\n                          <Button width=\"100%\" mt={5} onClick={deleteVault}>Delete Vault </Button>\n                        ) : null}\n                      </Collapse>\n                    </Flex>\n                  </>\n                </Stack>\n\n                </Box>\n                {vaultIPFS ? (\n                    <HStack align=\"center\">\n                      <Link target='new' mb={2} ml={35} href={'https://gateway.ipfs.io/ipfs/'+vaultIPFS} isExternal>View Metadata on IPFS </Link>\n                      {vaultImageIPFS? (\n                        <Link mb={2} href={'https://gateway.ipfs.io/ipfs/'+vaultImageIPFS} isExternal>View Image on IPFS </Link>\n                      ) : null}                      \n                    </HStack> \n                ) : null }\n\n                {sealed ? (\n                    <Box d=\"flex\" mb={2} ml={35} alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Text>*This vault is sealed forever.</Text>\n                    </Box>\n                  ) : null}\n\n                <Stack direction=\"column\" align=\"center\">\n                  {status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n\n                {hash ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    { accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving? \"Handling Approval Flow ...\" : transfering? \"Transfering Vault ...\":  minting? \"Minting Vault\" : \"Validating transaction\"}\n                  </Alert>\n                ) : null}\n\n              </Box>\n            </Flex>\n        ) : vaultValues.length > 0 && slideshowOnly? (\n          <Stack className=\"NFT-content\" align=\"center\">\n            { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                <NFTSlideshow name={vaultName} image={vaultValues[0].image} items={vaultValues.filter(value=>{return value.image !== vaultValues[0].image}).map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n              ) : (\n                <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n              )\n            }\n          </Stack>\n        ) : invalidVault ? (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        ): null}\n\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming && !accepting && !preTransfering) {\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                location.href = location.origin + '/nft?id=' + tokenId + '&cc=t';\n              } else if (preTransfering) {\n                savePasswordToLocalStorage()\n                setShowTransferPassword(true)\n                setPreTransfering(false)\n                setHash(null)                \n              } else if(accepting) {\n                setAccepting(false)                \n                getVault()\n                setHash(null)\n              } else if(approving) {\n                setApproving(false)\n                getVault()\n                setHash(null)\n                location.href = location.origin + '/nft?id=' + tokenId\n              } else if(transfering) {\n                setTransfering(false)\n                getVault()\n                setHash(null)\n              } else if(minting) {\n                checkLiveliness(tokenId, ()=>{\n                  setMinting(false)\n                  setLive(true)\n                  location.href = location.origin + '/nft?id=' + tokenId + '&cc=t';\n                })\n              } else {\n                location.href = location.origin + '/nft?id=' + tokenId\n              }\n            }}\n          />\n        ) : null}\n        <Box height=\"40px\"></Box>\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}