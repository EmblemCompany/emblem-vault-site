{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _readOnlyError from \"@babel/runtime/helpers/esm/readOnlyError\";\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/partials/BridgeDeposits.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useWeb3React } from '@web3-react/core';\nimport { EMBLEM_API } from '../../constants';\nvar useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  }\n});\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return {\n    name: name,\n    calories: calories,\n    fat: fat,\n    carbs: carbs,\n    protein: protein\n  };\n}\n\nvar rows = [createData('Frozen yoghurt', 159, 6.0, 24, 4.0), createData('Ice cream sandwich', 237, 9.0, 37, 4.3), createData('Eclair', 262, 16.0, 24, 6.0), createData('Cupcake', 305, 3.7, 67, 4.3), createData('Gingerbread', 356, 16.0, 49, 3.9)];\nexport default function BridgeDeposits() {\n  return _BridgeDeposits.apply(this, arguments);\n}\n_c2 = BridgeDeposits;\n\nfunction _BridgeDeposits() {\n  var _s = $RefreshSig$();\n\n  _BridgeDeposits = _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _this = this;\n\n    var _useWeb3React, account, chainId, classes, getDeposits, _getDeposits;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _getDeposits = function _getDeposits3() {\n              _getDeposits = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cb) {\n                var responce, jsonData;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return fetch(EMBLEM_API + '/transfersOutDb?pending=true', {\n                          method: 'GET',\n                          headers: {\n                            'Content-Type': 'application/json',\n                            'chainid': chainId.toString(),\n                            'service': 'evmetadata'\n                          }\n                        });\n\n                      case 2:\n                        responce = _context.sent;\n                        _context.next = 5;\n                        return responce.json();\n\n                      case 5:\n                        jsonData = _context.sent;\n                        return _context.abrupt(\"return\", cb(jsonData));\n\n                      case 7:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n              return _getDeposits.apply(this, arguments);\n            };\n\n            getDeposits = function _getDeposits2(_x) {\n              return _getDeposits.apply(this, arguments);\n            };\n\n            _s();\n\n            _useWeb3React = useWeb3React(), account = _useWeb3React.account, chainId = _useWeb3React.chainId;\n            classes = useStyles();\n            _context2.next = 7;\n            return getDeposits(function (deposits) {\n              rows = (_readOnlyError(\"rows\"), deposits);\n            });\n\n          case 7:\n            return _context2.abrupt(\"return\", __jsx(TableContainer, {\n              component: Paper,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 5\n              }\n            }, __jsx(Table, {\n              className: classes.table,\n              \"aria-label\": \"simple table\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 7\n              }\n            }, __jsx(TableHead, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 9\n              }\n            }, __jsx(TableRow, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 11\n              }\n            }, __jsx(TableCell, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 13\n              }\n            }, \"Dessert (100g serving) \", chainId), __jsx(TableCell, {\n              align: \"right\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 13\n              }\n            }, \"Calories\"), __jsx(TableCell, {\n              align: \"right\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 13\n              }\n            }, \"Fat\\xA0(g)\"), __jsx(TableCell, {\n              align: \"right\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 13\n              }\n            }, \"Carbs\\xA0(g)\"), __jsx(TableCell, {\n              align: \"right\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 13\n              }\n            }, \"Protein\\xA0(g)\"))), __jsx(TableBody, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 9\n              }\n            }, rows.map(function (row) {\n              return __jsx(TableRow, {\n                key: row.name,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 55,\n                  columnNumber: 13\n                }\n              }, __jsx(TableCell, {\n                component: \"th\",\n                scope: \"row\",\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 15\n                }\n              }, row.name), __jsx(TableCell, {\n                align: \"right\",\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 15\n                }\n              }, row.calories), __jsx(TableCell, {\n                align: \"right\",\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 15\n                }\n              }, row.fat), __jsx(TableCell, {\n                align: \"right\",\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 15\n                }\n              }, row.carbs), __jsx(TableCell, {\n                align: \"right\",\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 15\n                }\n              }, row.protein));\n            })))));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }), \"9bHbwOcjY0THjZDi0lWSeKgxR64=\", false, function () {\n    return [useWeb3React, useStyles];\n  }));\n  return _BridgeDeposits.apply(this, arguments);\n}\n\n_c = BridgeDeposits;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BridgeDeposits\");\n$RefreshReg$(_c2, \"BridgeDeposits\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/partials/BridgeDeposits.tsx"],"names":["React","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","useWeb3React","EMBLEM_API","useStyles","table","minWidth","createData","name","calories","fat","carbs","protein","rows","BridgeDeposits","getDeposits","cb","fetch","method","headers","chainId","toString","responce","json","jsonData","account","classes","deposits","map","row"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { useWeb3React } from '@web3-react/core'\n\nimport { EMBLEM_API } from '../../constants'\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nfunction createData(name: string, calories: number, fat: number, carbs: number, protein: number) {\n  return { name, calories, fat, carbs, protein };\n}\n\n\n\nconst rows = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  createData('Eclair', 262, 16.0, 24, 6.0),\n  createData('Cupcake', 305, 3.7, 67, 4.3),\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\n\nexport default async function BridgeDeposits() {\n  const { account, chainId } = useWeb3React()\n  const classes = useStyles();\n  await getDeposits(deposits=>{\n    rows = deposits\n  })\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Dessert (100g serving) {chainId}</TableCell>\n            <TableCell align=\"right\">Calories</TableCell>\n            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.calories}</TableCell>\n              <TableCell align=\"right\">{row.fat}</TableCell>\n              <TableCell align=\"right\">{row.carbs}</TableCell>\n              <TableCell align=\"right\">{row.protein}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  async function getDeposits(cb) {\n\n    const responce = await fetch(EMBLEM_API + '/transfersOutDb?pending=true', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'chainid': chainId.toString(),\n          'service': 'evmetadata',\n        },\n      })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n}"]},"metadata":{},"sourceType":"module"}