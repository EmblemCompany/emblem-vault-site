{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft2.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure, useColorMode, Tabs, TabList, Tab, TabPanel, TabPanels } from '@chakra-ui/core';\nimport { HStack } from '@chakra-ui/react'; // import TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\n\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { Contract } from '@ethersproject/contracts';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, contractAddresses, SIG_API } from '../constants';\nimport { useContract } from '../hooks';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport CryptoJS from 'crypto-js';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nimport NFTSlideshow from './embed/NFTSlideshow';\nimport CoinBalance from './partials/CoinBalance';\nimport Attributes from './partials/Attributes';\nimport { generateWallet } from '@stacks/wallet-sdk';\nimport FetchNodeDetails from \"@toruslabs/fetch-node-details\";\nimport TorusUtils from \"@toruslabs/torus.js\";\nconst API_VERSION = '/v2';\nconst AddrModal = dynamic(() => import('./AddrModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./AddrModal')],\n    modules: ['./AddrModal']\n  }\n});\nconst KeysModal = dynamic(() => import('./KeysModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./KeysModal')],\n    modules: ['./KeysModal']\n  }\n});\nconst OfferModal = dynamic(() => import('./OfferModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./OfferModal')],\n    modules: ['./OfferModal']\n  }\n});\nexport default function Nft2() {\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    query\n  } = useRouter();\n  const {\n    0: isCuratedMaster,\n    1: setIsCuratedMaster\n  } = useState(false);\n  const {\n    0: decimals,\n    1: setDecimals\n  } = useState(null);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(null);\n  const {\n    0: balance,\n    1: setBalance\n  } = useState(null);\n  const {\n    0: price,\n    1: setPrice\n  } = useState(null);\n  const {\n    0: isCovalApproved,\n    1: setIsCovalApproved\n  } = useState(false);\n  const {\n    0: approved,\n    1: setApproved\n  } = useState(false);\n  const {\n    0: useOldMint,\n    1: setUseOldMint\n  } = useState(query.useOldMint);\n  const {\n    0: mintPassword,\n    1: setMintPassword\n  } = useState(query.key);\n  const {\n    0: showOffer,\n    1: setShowOffer\n  } = useState(query.offer || false);\n  const {\n    0: framed,\n    1: setFramed\n  } = useState(query.framed || true);\n  const {\n    0: tokenId,\n    1: setTokenId\n  } = useState(query.id);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    0: noLayout,\n    1: setNoLayout\n  } = useState(query.noLayout);\n  const {\n    0: slideshowOnly,\n    1: setSlideshowOnly\n  } = useState(query.slideshowOnly || false);\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState('');\n  const {\n    0: vaultIPFS,\n    1: setVaultIPFS\n  } = useState('');\n  const {\n    0: vaultImageIPFS,\n    1: setVaultImageIPFS\n  } = useState('');\n  const {\n    0: vaultCiphertextV2,\n    1: setVaultCiphertextV2\n  } = useState('');\n  const {\n    0: vaultDesc,\n    1: setVaultDesc\n  } = useState('');\n  const {\n    0: vaultImage,\n    1: setVaultImage\n  } = useState('');\n  const {\n    0: ownedImage,\n    1: setOwnedImage\n  } = useState('');\n  const {\n    0: vaultValues,\n    1: setVaultValues\n  } = useState([]);\n  const {\n    0: loadedValues,\n    1: setLoadedValues\n  } = useState(false);\n  const {\n    0: vaultDataValues,\n    1: setVaultDataValues\n  } = useState([]);\n  const {\n    0: attributes,\n    1: setAttributes\n  } = useState([]);\n  const {\n    0: vaultAddresses,\n    1: setVaultAddresses\n  } = useState([]);\n  const {\n    0: vaultPrivacy,\n    1: setVaultPrivacy\n  } = useState(false);\n  const {\n    0: vaultTotalValue,\n    1: setVaultTotalValue\n  } = useState(0);\n  const {\n    0: vaultChainId,\n    1: setVaultChainId\n  } = useState(null);\n  const {\n    0: vaultChain,\n    1: setVaultChain\n  } = useState(null);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: currCoin,\n    1: setCurrCoin\n  } = useState('');\n  const {\n    0: currAddr,\n    1: setCurrAddr\n  } = useState('');\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: mine,\n    1: setMine\n  } = useState(false);\n  const {\n    0: mineUnMinted,\n    1: setMineUnMinted\n  } = useState(false);\n  const {\n    0: claiming,\n    1: setClaiming\n  } = useState(false);\n  const {\n    0: status,\n    1: setStatus\n  } = useState('claimed');\n  const {\n    0: sealed,\n    1: setSealed\n  } = useState(false);\n  const {\n    0: claimedBy,\n    1: setClaimedBy\n  } = useState(null);\n  const {\n    0: mnemonic,\n    1: setMnemonic\n  } = useState('');\n  const {\n    0: privKeyBTC,\n    1: setPrivKeyBTC\n  } = useState('');\n  const {\n    0: privKeyETH,\n    1: setPrivKeyETH\n  } = useState('');\n  const {\n    0: privValues,\n    1: setKeyValues\n  } = useState([]);\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: decryptedEffect,\n    1: setDecryptedEffect\n  } = useState('');\n  const {\n    0: decryptedEffectRunning,\n    1: setDecryptedEffectRunning\n  } = useState(false);\n  const {\n    0: decryptPassword,\n    1: setDecryptPassword\n  } = useState('');\n  const {\n    0: invalidVault,\n    1: setInvalidVault\n  } = useState(false);\n  const {\n    0: hasCheckedNft,\n    1: setHasCheckedNft\n  } = useState(false);\n  const {\n    0: accepting,\n    1: setAccepting\n  } = useState(false);\n  const {\n    0: approving,\n    1: setApproving\n  } = useState(false);\n  const {\n    0: acceptable,\n    1: setAcceptable\n  } = useState(false);\n  const {\n    0: transferPassword,\n    1: setTransferPassword\n  } = useState('');\n  const {\n    0: showTransferPassword,\n    1: setShowTransferPassword\n  } = useState(false);\n  const {\n    0: preTransfering,\n    1: setPreTransfering\n  } = useState(false);\n  const {\n    0: transferToAddress,\n    1: setTransferToAddress\n  } = useState(null);\n  const {\n    0: transfering,\n    1: setTransfering\n  } = useState(false);\n  const {\n    0: owner,\n    1: setOwner\n  } = useState(null); // const [torus, setTorus] = useState(initTorus())\n\n  const {\n    0: live,\n    1: setLive\n  } = useState(false);\n  const {\n    0: nonce,\n    1: setNonce\n  } = useState(null);\n  const {\n    0: mintSignature,\n    1: setMintSignature\n  } = useState(null);\n  const {\n    0: to,\n    1: setTo\n  } = useState(null);\n  const {\n    0: showVerifyingSignature,\n    1: setShowVerifyingSignature\n  } = useState(false);\n  const {\n    0: showMakingVaultMsg,\n    1: setShowMakingVaultMsg\n  } = useState(false);\n  const {\n    0: minting,\n    1: setMinting\n  } = useState(false);\n  const {\n    0: isCrowdSale,\n    1: setIsCrowdSale\n  } = useState(false);\n  const {\n    0: alternateContractAddress,\n    1: setAlternateContractAddress\n  } = useState(null);\n  const {\n    0: targetAsset,\n    1: setTargetAsset\n  } = useState({\n    name: '',\n    image: '',\n    metadata: ''\n  });\n  const {\n    0: targetContract,\n    1: setTargetContract\n  } = useState({\n    name: '',\n    chain: '',\n    4: '',\n    1: '',\n    tokenId: {},\n    serialNumber: {\n      'hex': ''\n    }\n  });\n  const {\n    0: canCuratedMint,\n    1: setCanCuratedMint\n  } = useState(false);\n  const {\n    0: mintLockedForever,\n    1: setMintLockedForever\n  } = useState(false);\n  const {\n    0: curatedMintingParameters,\n    1: setCuratedMintingParameters\n  } = useState({});\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  const vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  let emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  let covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true);\n  const {\n    isOpen: isOpenAddrModal,\n    onOpen: onOpenAddrModal,\n    onClose: onCloseAddrModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenKeysModal,\n    onOpen: onOpenKeysModal,\n    onClose: onCloseKeysModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenOfferModal,\n    onOpen: onOpenOfferModal,\n    onClose: onCloseOfferModal\n  } = useDisclosure();\n  const {\n    isOpen,\n    onToggle\n  } = useDisclosure();\n  const {\n    isOpen: isManageAddressOpen,\n    onToggle: onManageAddressToggle\n  } = useDisclosure();\n  const {\n    colorMode\n  } = useColorMode();\n\n  const getVaultContract = (address = null) => {\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked());\n  };\n\n  const getCuratedContract = (address = null) => {\n    return new Contract(address, contractAddresses.erc1155Abi, library.getSigner(account).connectUnchecked());\n  };\n\n  const checkLiveliness = (tokenId, targetContract, cb) => {\n    console.log(\"check liveliness next\", targetContract);\n    let endpoint = targetContract.name ? EMBLEM_API + API_VERSION + '/liveliness-curated' : EMBLEM_API + '/liveliness';\n    fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        tokenId: tokenId\n      })\n    }).then(async function (response) {\n      let data = await response.json();\n      setLive(data.live);\n      console.log(\"Liveliness check\", data);\n    });\n    return cb(false);\n  };\n\n  const delayedMint = () => {\n    // setCreating(true)\n    console.log(\"Delayed Minting\");\n    setShowVerifyingSignature(false);\n    setShowMakingVaultMsg(true);\n    setMinting(true);\n    console.log('---------@@@@@------', contractAddresses.vaultHandler[chainId]);\n    let cipherTextHash = vaultAddresses.filter(address => {\n      return address.coin == \"ETH\";\n    })[0].address;\n    handlerContract.buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature).then(({\n      hash\n    }) => {\n      setTimeout(() => {\n        setHash(hash);\n        setShowMakingVaultMsg(false);\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      setShowMakingVaultMsg(false); // setMinting(false)\n    });\n  };\n\n  const deleteVault = () => {\n    library.getSigner(account).signMessage('Delete: ' + tokenId).then(signature => {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + API_VERSION + '/delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        location.href = location.href.split(\"/\")[0] + \"/vaults\";\n      });\n    });\n  };\n\n  const lazyMintCurated = () => {\n    library.getSigner(account).signMessage('Curated Minting: ' + tokenId).then(signature => {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + API_VERSION + '/mint-curated', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        console.log(\"WTFFFFF\");\n        console.log(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1);\n        setCuratedMintingParameters(data);\n        vaultHandlerContract.buyWithSignedPrice(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1).then(({\n          hash\n        }) => {\n          setTimeout(() => {\n            setHash(hash);\n            setShowMakingVaultMsg(true);\n            setMinting(true);\n          }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n        }).catch(error => {\n          console.log('ERROR', error);\n          setShowMakingVaultMsg(false);\n          setMinting(false);\n        });\n      });\n    });\n  };\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log('responce', responce, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(jsonData.balances);\n    } else {\n      return cb(values);\n    }\n  };\n\n  const handleApproveForall = () => {\n    setApproving(true);\n\n    if (targetContract.name) {\n      emblemContract = getCuratedContract(targetContract[chainId]);\n      emblemContract.setApprovalForAll(contractAddresses.vaultHandlerV8[chainId], true).then(({\n        hash\n      }) => {\n        setTimeout(() => {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      }).catch(error => {\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(`tx failed.`, error);\n        } else {\n          setApproving(false);\n        }\n      });\n    } else {\n      emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(({\n        hash\n      }) => {\n        setTimeout(() => {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      }).catch(error => {\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(`tx failed.`, error);\n        } else {\n          setApproving(false);\n        }\n      });\n    }\n  };\n\n  const getVault = async () => {\n    console.log('getvault');\n    const responce = await fetch(EMBLEM_API + API_VERSION + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n\n    if (jsonData.collectionAddress) {\n      setIsCrowdSale(true);\n      setAlternateContractAddress(jsonData.collectionAddress);\n    }\n\n    if (!jsonData.name) {\n      setState({\n        loaded: true\n      });\n      setInvalidVault(true);\n    } else {\n      console.log(\"--------------- states -\", jsonData);\n      setStates(jsonData);\n      setLoadingApi(false);\n      setInvalidVault(false);\n    }\n  };\n\n  const setStates = jsonData => {\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\" + framed : null;\n\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2);\n      console.log(\"ciphertextV2\", jsonData.ciphertextV2);\n    }\n\n    setMintLockedForever(jsonData.mintLocked && jsonData.mintLockBlock == 0);\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setOwnedImage(jsonData.ownedImage || null);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)) : null;\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(item => {\n      return item.trait_type === \"key\";\n    })) : null;\n    jsonData.attributes ? setAttributes(jsonData.attributes) : null;\n    setVaultAddresses(jsonData.addresses);\n    setVaultIPFS(jsonData.ipfs || null);\n    setVaultImageIPFS(jsonData.image_ipfs || null);\n    jsonData.targetContract && jsonData.targetContract.tokenId == tokenId ? setIsCuratedMaster(true) : null;\n    jsonData.targetAsset ? setTargetAsset(jsonData.targetAsset) : null;\n    jsonData.targetContract ? setTargetContract(jsonData.targetContract) : null;\n    jsonData.values && jsonData.targetAsset && jsonData.values.filter(item => {\n      return item.coin.toLowerCase() == jsonData.targetContract.chain && item.name == jsonData.targetAsset.name && item.project == jsonData.targetContract.name;\n    }).length > 0 ? setCanCuratedMint(true) : null;\n    setLive(jsonData.live == false ? false : true);\n    setNonce(jsonData.nonce);\n    setMintSignature(jsonData.signature);\n    setTo(jsonData.to);\n    setVaultChain(jsonData.network);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"goerli\" ? 5 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : jsonData.network == \"xdai\" ? 100 : jsonData.network == \"bsc\" ? 56 : jsonData.network == \"fantom\" ? 250 : jsonData.network == \"bitcoin\" ? 0 : jsonData.network == \"aurora\" ? 1313161554 : 97);\n\n    if (!jsonData.live) {\n      console.log(\"check liveliness start\");\n      checkLiveliness(tokenId, jsonData.targetContract, isLive => {\n        setLive(isLive);\n      });\n    }\n\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    }\n\n    setState({\n      loaded: true\n    });\n    let isPvt = jsonData.addresses.filter(item => {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n\n    if (jsonData.sealed) {\n      setSealed(true);\n    } else {\n      setSealed(false);\n    }\n  };\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    if (loadedValues) {\n      return cb(false);\n    }\n\n    setLoadedValues(true);\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log('responce', responce, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log('responce', responce, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  };\n\n  const getSignedJWT = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainid', chainId.toString());\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature,\n      tokenId: tokenId\n    });\n    const responce = await fetch(SIG_API + '/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  };\n\n  async function getTorusKeys(verifierId, idToken, cb) {\n    const fetchNodeDetails = new FetchNodeDetails({\n      network: \"mainnet\"\n    });\n    const torusUtils = new TorusUtils({\n      enableOneKey: true,\n      network: \"mainnet\"\n    });\n    const {\n      torusNodeEndpoints,\n      torusIndexes\n    } = await fetchNodeDetails.getNodeDetails({\n      verifier: 'tor-us-signer-vercel',\n      verifierId\n    });\n    const {\n      privKey\n    } = await torusUtils.retrieveShares(torusNodeEndpoints, torusIndexes, 'tor-us-signer-vercel', {\n      verifier_id: verifierId\n    }, idToken);\n    return cb({\n      privateKey: privKey\n    });\n  }\n\n  const addAddress = async (signature, tokenId, coin, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature,\n      coin: coin\n    });\n    const responce = await fetch(EMBLEM_API + '/address/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  };\n\n  const decryptEmbed = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature\n    });\n    const responce = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  };\n\n  const getContractStates = async () => {\n    console.log(\"Contract states\");\n    let owned = false;\n\n    let _owner;\n\n    try {\n      if (targetContract[chainId]) {\n        emblemContract = getCuratedContract(targetContract[chainId]);\n        setDecimals(await covalContract.decimals());\n        setPrice(250 * Math.pow(10, decimals));\n        setAllowance(await covalContract.allowance(account, contractAddresses.vaultHandlerV8[chainId]).then(balance => balance.toString()));\n        setBalance(await covalContract.balanceOf(account).then(balance => balance.toString()));\n\n        if (Number(allowance) >= Number(price)) {\n          setIsCovalApproved(true);\n        } else {\n          setIsCovalApproved(false);\n        }\n\n        _owner = await emblemContract.getOwnerOfSerial(targetContract.serialNumber); // console.log(\"--------------------------- owner\", _owner, approved, account, contractAddresses.vaultHandlerV8[chainId])\n      } else {\n        _owner = await emblemContract.ownerOf(tokenId);\n      }\n\n      finish();\n    } catch (err) {\n      _owner = \"0x0000000000000000000000000000000000000000\";\n      finish();\n    }\n\n    async function finish() {\n      // let acceptable = await handlerContract.getPreTransfer(tokenId)\n      let isApproved;\n\n      if (targetContract[chainId]) {\n        console.log(\"@@@@@@@@@@@@@------- checking approved start\", \"me\", account, \"v8\", contractAddresses.vaultHandlerV8[chainId]);\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId]);\n        setApproved(isApproved);\n        console.log(\"@@@@@@@@@@@@@------- checking approved end\", \"approved\", isApproved, \"acceptable\", acceptable, \"mine\", mine);\n        console.log(\"price\", price, \"decimals\", decimals, \"allowance\", allowance, \"balance\", balance, \"isCovalApproved\", isCovalApproved);\n      } else {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n        setApproved(isApproved);\n      } // setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n\n\n      setOwner(_owner);\n      setMine(_owner === account || to === account && _owner === \"0x0000000000000000000000000000000000000000\");\n      setMineUnMinted(to === account && _owner === \"0x0000000000000000000000000000000000000000\");\n      loadPasswordFromLocalStorage();\n    }\n  };\n\n  const onRenew = async name => {\n    library.getSigner(account).signMessage('Renew: ' + tokenId).then(signature => {\n      let address = vaultAddresses.filter(address => {\n        return address.coin == 'NMC';\n      })[0].address;\n      console.log('signature', signature, name);\n      fetch(EMBLEM_API + '/nmc/renew/' + address, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({\n          \"tokenId\": tokenId,\n          \"signature\": signature,\n          \"name\": name\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        console.log(\"Requested Renew\", data);\n      });\n    });\n  };\n\n  const approveCovalFlow = () => {\n    setApproving(true);\n    let handlerToApprove = targetContract.name ? contractAddresses.vaultHandlerV8[chainId] : contractAddresses.vaultHandler[chainId];\n    covalContract.approve(handlerToApprove, '100000000000000').then(({\n      hash\n    }) => {\n      setHash(hash);\n    }).catch(error => {\n      if ((error === null || error === void 0 ? void 0 : error.code) == 4001) {\n        setApproving(false);\n      }\n    });\n  };\n\n  const handleSign = async () => {\n    let serialNumber;\n\n    if (targetContract[chainId]) {\n      emblemContract = getCuratedContract(targetContract[chainId]);\n      serialNumber = targetContract.serialNumber;\n    }\n\n    library.getSigner(account).signMessage('Claim: ' + (targetContract[chainId] ? serialNumber : tokenId)).then(signature => {\n      setState({\n        loaded: false\n      });\n\n      if (mineUnMinted && status != \"claimed\" && !mintLockedForever) {\n        setMintLockedForever(true);\n      }\n\n      getSignedJWT(signature, tokenId, token => {\n        getTorusKeys(tokenId, token.token, keys => {\n          var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey);\n          let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n          setKeyValues(payload.values);\n          setMnemonic(payload.phrase);\n          vaultAddresses.forEach(async address => {\n            if (address.coin == 'STX') {\n              address.key = await getSTXKey(address, payload.phrase);\n            } else {\n              address.key = window.phrasePathToKey(payload.phrase, address.path);\n            }\n\n            if (address.coin == 'BTC') setPrivKeyBTC(address.key);\n            if (address.coin == 'ETH') setPrivKeyETH(address.key);\n          });\n          setState({\n            loaded: true\n          });\n          onOpenKeysModal();\n        });\n      }); // }\n    });\n  };\n\n  const getSTXKey = async (address, phrase) => {\n    const wallet = await generateWallet({\n      secretKey: phrase,\n      password: ''\n    });\n    console.log('------ stacks account -', wallet.accounts[0]);\n    const account = wallet.accounts[0];\n    address.key = account.stxPrivateKey;\n    return address.key;\n  };\n\n  const handleHideAsset = async coin => {\n    library.getSigner(account).signMessage('HideAsset: ' + tokenId).then(signature => {\n      console.log(\"----------------------------------------------------------------\", signature);\n      console.log(coin.name, coin.coin, coin.address);\n      hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, () => {\n        console.log(\"Done hiding coin and getting new balances\");\n      });\n    });\n  };\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/' + tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin ? coin : null,\n        \"address\": address ? address : null,\n        \"name\": name ? name : null,\n        \"signature\": signature ? signature : null\n      })\n    }).then(async function (response) {\n      let data = await response.json();\n      console.log(\"-------\", data);\n      getAllBalances([], tokenId, values => {\n        setVaultValues(values);\n        return cb();\n      });\n    });\n  }\n\n  const handleAddressSign = async coin => {\n    library.getSigner(account).signMessage('Address: ' + tokenId).then(signature => {\n      addAddress(signature, tokenId, coin, result => {\n        getVault();\n      });\n    });\n  };\n\n  const handleOwnedEmbed = async () => {\n    library.getSigner(account).signMessage('Embed: ' + tokenId).then(signature => {\n      decryptEmbed(signature, tokenId, result => {\n        setVaultImage(result.ownedImage);\n      });\n    });\n  };\n\n  const handleClaim = async () => {\n    if (targetContract[chainId]) {\n      // emblemContract = getCuratedContract(targetContract[chainId])\n      // let tokenId = await emblemContract.getTokenIdForSerialNumber(targetContract.serialNumber)\n      vaultHandlerContract.claim(targetContract[chainId], targetContract.tokenId).then(({\n        hash\n      }) => {\n        setClaiming(true);\n        setTimeout(() => {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      });\n    } else {\n      emblemContract.burn(tokenId).then(({\n        hash\n      }) => {\n        setClaiming(true);\n        setTimeout(() => {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      });\n    }\n  };\n\n  const pingClaimLogs = cb => {\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId=' + chainId.toString() + '_vercel_no_cache=1', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    }).then(async function (response) {\n      let data = await response.json();\n      console.log(\"Log check\", data);\n      return cb();\n    });\n  };\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return;\n    }\n\n    setDecryptedEffectRunning(true);\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n    var ctnt = 'Decrypting'; // Your text goes here\n\n    var speed = 5; // ms per frame\n\n    var increment = 8; // frames per step. Must be >2\n\n    var clen = ctnt.length;\n    var si = 0;\n    var stri = 0;\n    var block = '';\n    var fixed = '';\n\n    (function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i);\n        } else {\n          setDecryptedEffectRunning(false);\n        }\n\n        nextFrame(i);\n        si = si + 1;\n      }, speed);\n    })(clen * increment + 1);\n\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n        var letter = theLetters.charAt(num);\n        block = block + letter;\n      }\n\n      if (si == increment - 1) {\n        stri++;\n      }\n\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1);\n        si = 0;\n      } // $(\"#output\").html(fixed + block);\n\n\n      setDecryptedEffect(fixed + block);\n      block = '';\n    }\n  };\n\n  useEffect(() => {\n    console.log('----');\n    getVault();\n  }, []);\n  useEffect(() => {\n    account && chainId && vaultChainId && chainId == vaultChainId || query.noLayout && query.noLayout == 'true' || query.slideshowOnly && query.slideshowOnly == 'true' ? getContractStates() : null;\n  });\n\n  function splitDescription(words) {\n    var desc = words ? words.split('\\n\\n\\n\\n') : [\" \"];\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    console.log(vaultAddresses);\n    let ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      let ethAddress = vaultAddresses.filter(item => {\n        return item.coin === 'ETH';\n      })[0].address;\n      let btcAddress = vaultAddresses.filter(item => {\n        return item.coin === 'BTC';\n      })[0].address;\n      console.log(\"SUCCESS\", vaultAddresses);\n      getAllBalancesByAddress([], ethAddress, btcAddress, values => {\n        setVaultValues(values);\n      }); // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {\n      console.log('WTF', err);\n    }\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\");\n    return vaultAddresses;\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(item => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '');\n        item.address = decrypt(cipherText, key);\n      }\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  function visitOpenSeaLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : vaultChainId == 5 ? 'testnets.' : '') + 'opensea.io/assets/' + (vaultChainId == 137 ? 'matic/' : vaultChainId == 5 ? 'goerli/' : '') + (alternateContractAddress ? alternateContractAddress : targetContract[chainId] ? targetContract[chainId] : contractAddresses.emblemVault[vaultChainId]) + '/' + (targetContract ? targetContract.tokenId : tokenId), '_blank');\n  }\n\n  function visitLooksRareLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : vaultChainId == 5 ? 'goerli.' : '') + 'looksrare.org/collections/' + (vaultChainId == 137 ? 'matic/' : '') + (alternateContractAddress ? alternateContractAddress : targetContract ? targetContract[chainId] : contractAddresses.emblemVault[vaultChainId]) + '/' + (targetContract ? targetContract.tokenId : tokenId), '_blank');\n  }\n\n  {\n    alternateContractAddress ? emblemContract = getVaultContract(alternateContractAddress ? alternateContractAddress : null) : null;\n  }\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 930,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 931,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 932,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 933,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 934,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 935,\n      columnNumber: 9\n    }\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              if (localStorage.getItem(\"darkMode\") == 'false') {\n                localStorage.setItem(\"darkMode\",\"true\"); location.href = location.href\n              }\n              `\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 936,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 951,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    privValues: privValues,\n    addresses: vaultAddresses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 953,\n      columnNumber: 7\n    }\n  }), showOffer ? __jsx(OfferModal, {\n    isOpen: isOpenOfferModal,\n    onClose: onCloseOfferModal,\n    tokenId: tokenId,\n    mine: mine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 963,\n      columnNumber: 9\n    }\n  }) : null, __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 972,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 973,\n      columnNumber: 9\n    }\n  }), loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 974,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault && !slideshowOnly ? __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 976,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    className: \"NFT\",\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 977,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"blue.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 988,\n      columnNumber: 17\n    }\n  }, \"Vault Network: \", CHAIN_ID_NAMES[vaultChainId]), __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\" // textTransform=\"uppercase\"\n    ,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1017,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null), __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1030,\n      columnNumber: 17\n    }\n  }, __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1037,\n      columnNumber: 19\n    }\n  }), mine && ownedImage ? __jsx(Button, {\n    onClick: () => {\n      handleOwnedEmbed();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1039,\n      columnNumber: 21\n    }\n  }, \"(OWNED) Show Full Embed\") : null), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1042,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1043,\n      columnNumber: 19\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1044,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    fontSize: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1045,\n      columnNumber: 23\n    }\n  }, !isCuratedMaster && vaultChainId == chainId ? __jsx(Link, {\n    href: \"./vaults?address=\" + owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1047,\n      columnNumber: 25\n    }\n  }, \"Owner: \", owner) : null), __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1052,\n      columnNumber: 23\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1053,\n      columnNumber: 25\n    }\n  }))))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1059,\n      columnNumber: 17\n    }\n  }, !isCuratedMaster ? __jsx(Tabs, {\n    isFitted: true,\n    variant: \"enclosed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1061,\n      columnNumber: 21\n    }\n  }, __jsx(TabList, {\n    mb: \"1em\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1062,\n      columnNumber: 23\n    }\n  }, __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1063,\n      columnNumber: 25\n    }\n  }, \"Balances\"), __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1064,\n      columnNumber: 25\n    }\n  }, \"Attributes\")), __jsx(TabPanels, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1066,\n      columnNumber: 23\n    }\n  }, __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1067,\n      columnNumber: 25\n    }\n  }, vaultPrivacy ? __jsx(Box, {\n    mb: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1069,\n      columnNumber: 29\n    }\n  }, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1070,\n      columnNumber: 31\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: e => tryDecrypt(e.target.value),\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1073,\n      columnNumber: 31\n    }\n  })) : __jsx(Box, {\n    d: \"flex\",\n    backgroundColor: colorMode == \"light\" ? \"gray.100\" : \"gray.700\",\n    alignItems: \"baseline\",\n    className: \"coin-balance-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1081,\n      columnNumber: 29\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1082,\n      columnNumber: 31\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    mt: 2,\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1083,\n      columnNumber: 33\n    }\n  }, \"Current Contents:  \", __jsx(\"button\", {\n    onClick: () => {\n      getAllBalancesLive([], tokenId, v => {\n        setLoadedValues(false);\n        setVaultValues(v);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1085,\n      columnNumber: 54\n    }\n  }, \" [Refresh Balances]\")), __jsx(Text, {\n    as: \"p\",\n    color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1094,\n      columnNumber: 33\n    }\n  }, \"$\", Number(vaultTotalValue.toFixed(4)).toLocaleString()), vaultValues.length ? vaultValues.map(coin => {\n    return __jsx(Stack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1098,\n        columnNumber: 39\n      }\n    }, __jsx(CoinBalance, {\n      colorMode: colorMode,\n      coin: coin,\n      mine: status === 'claimed' && claimedBy === account || mine,\n      onRenew: onRenew,\n      hideAsset: targetAsset.name ? false : handleHideAsset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1099,\n        columnNumber: 41\n      }\n    }));\n  }) : __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1103,\n      columnNumber: 38\n    }\n  }), vaultDataValues.length ? vaultDataValues.map(data => {\n    return __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1107,\n        columnNumber: 39\n      }\n    }, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1111,\n      columnNumber: 35\n    }\n  }, \"Nothing in here! Fill 'er up!\") : null))), __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1117,\n      columnNumber: 25\n    }\n  }, __jsx(Attributes, {\n    colorMode: colorMode,\n    attributes: attributes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1118,\n      columnNumber: 27\n    }\n  })))) : null, !isCuratedMaster && !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1125,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1126,\n      columnNumber: 23\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1127,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1128,\n      columnNumber: 27\n    }\n  }, \"Deposit Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1129,\n      columnNumber: 27\n    }\n  }, vaultAddresses.map(addr => {\n    return __jsx(Button, {\n      className: \"address_nft_button\",\n      ml: 2,\n      mt: 2,\n      \"font-weight\": \"100 !important\",\n      key: addr.address,\n      onClick: () => {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1132,\n        columnNumber: 33\n      }\n    }, addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP' : addr.coin);\n  }))))) : null, isCuratedMaster || !(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 4 || vaultChainId === 5 || vaultChainId === 137) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1156,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"50%\",\n    m: 5,\n    onClick: () => {\n      visitOpenSeaLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1158,\n      columnNumber: 25\n    }\n  }, \"Opensea\"), __jsx(Button, {\n    className: \"nft_button\",\n    width: \"50%\",\n    m: 5,\n    onClick: () => {\n      visitLooksRareLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1166,\n      columnNumber: 25\n    }\n  }, \"LooksRare\"), showOffer ? __jsx(Button, {\n    className: \"\",\n    onClick: () => {\n      onOpenOfferModal();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1175,\n      columnNumber: 27\n    }\n  }, mine ? 'My Offers' : 'Make an Offer', \" (NFT\\xB2NFT)\") : null) : null, !isCuratedMaster && mine && !acceptable && !approved ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1182,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: () => {\n      if (!approved) {\n        return handleApproveForall();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1183,\n      columnNumber: 23\n    }\n  }, \"Approve Claiming\"))) : null, !isCuratedMaster && live && !(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed && approved ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1195,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      handleClaim();\n    },\n    isDisabled: claiming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1196,\n      columnNumber: 23\n    }\n  }, claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)')) : null, !isCovalApproved && !approving && to == account ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: approveCovalFlow,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1209,\n      columnNumber: 21\n    }\n  }, \"Approve Coval\") : null, !isCuratedMaster && !live && !approving && isCovalApproved && to == account && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg ? __jsx(React.Fragment, null, targetContract.name ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: lazyMintCurated,\n    isDisabled: !canCuratedMint || mintLockedForever,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1217,\n      columnNumber: 25\n    }\n  }, mintLockedForever ? 'Mint Locked - keys accessed before mint' : !canCuratedMint ? 'Please load vault to mint' : ' Mint Vault', \" \") : null) : null, (!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: deleteVault,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1223,\n      columnNumber: 19\n    }\n  }, \"Delete Vault \") : null, !isCuratedMaster && vaultChainId === chainId && status == 'claimed' && claimedBy === account || mineUnMinted && status != \"claimed\" ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1227,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1228,\n      columnNumber: 23\n    }\n  }, mineUnMinted && status != \"claimed\" && !mintLockedForever ? 'Get Keys (Unlocking will prevent minting)' : 'Get Keys')) : null, showVerifyingSignature ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1235,\n      columnNumber: 19\n    }\n  }, \"Verifying Signature ...\") : null, showMakingVaultMsg ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1240,\n      columnNumber: 19\n    }\n  }, \"Minting Vault ...\") : null), !isCuratedMaster && vaultIPFS ? // <Stack>\n  __jsx(HStack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1247,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    target: \"new\",\n    mb: 2,\n    ml: 35,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1248,\n      columnNumber: 23\n    }\n  }, \"View Metadata on IPFS \"), vaultImageIPFS ? __jsx(Link, {\n    mb: 2,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultImageIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1250,\n      columnNumber: 25\n    }\n  }, \"View Image on IPFS \") : null) // </Stack>\n  : null, sealed ? __jsx(Box, {\n    d: \"flex\",\n    mb: 2,\n    ml: 35,\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1256,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1257,\n      columnNumber: 23\n    }\n  }, \"*This vault is sealed forever.\")) : null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1260,\n      columnNumber: 17\n    }\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1261,\n      columnNumber: 42\n    }\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1264,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1265,\n      columnNumber: 21\n    }\n  }), accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving ? \"Handling Approval Flow ...\" : transfering ? \"Transfering Vault ...\" : minting ? \"Minting Vault\" : \"Generating Gift Link ...\") : null)) : vaultValues.length > 0 && slideshowOnly ? __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1272,\n      columnNumber: 11\n    }\n  }, vaultValues.length && vaultValues.filter(item => {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultValues[0].image,\n    items: vaultValues.filter(value => {\n      return value.image !== vaultValues[0].image;\n    }).map(value => {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1274,\n      columnNumber: 17\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1276,\n      columnNumber: 17\n    }\n  })) : invalidVault ? __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1281,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1282,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1286,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1288,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      if (claiming && !accepting && !preTransfering) {\n        // alert(1)\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account);\n        pingClaimLogs(() => {\n          location.href = location.origin + '/nft?id=' + tokenId;\n        });\n      } else if (preTransfering) {\n        // alert(2)\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        // alert(3)\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        // alert(4)\n        setApproving(false);\n        getVault();\n        setHash(null);\n      } else if (transfering) {\n        // alert(5)\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else if (minting || showMakingVaultMsg) {\n        // alert(5)\n        //checkLiveliness(tokenId, targetContract, (isLive)=>{\n        console.log('GOD SAKES REDIRECT');\n        setMinting(false);\n        setHash(null); // setLive(isLive)\n\n        setShowMakingVaultMsg(false);\n        location.href = location.origin + '/nft2?id=' + tokenId; //})\n      } else {\n        // alert(6)          \n        location.href = location.origin + '/nft2?id=' + tokenId;\n        console.log('--- minting', minting);\n        console.log('--- claiming', claiming);\n        console.log('--- accepting', accepting);\n        console.log('--- preTransfering', preTransfering);\n        console.log('--- approving', approving);\n        console.log(\"Unknown state\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1295,\n      columnNumber: 11\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1351,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft2.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","Link","Alert","AlertIcon","useDisclosure","useColorMode","Tabs","TabList","Tab","TabPanel","TabPanels","HStack","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","Loader","dynamic","Contract","TransactionToast","EMBLEM_API","contractAddresses","SIG_API","useContract","CHAIN_ID_NAMES","CryptoJS","ReactMarkdown","gfm","Embed","NFTSlideshow","CoinBalance","Attributes","generateWallet","FetchNodeDetails","TorusUtils","API_VERSION","AddrModal","KeysModal","OfferModal","Nft2","account","chainId","library","query","isCuratedMaster","setIsCuratedMaster","decimals","setDecimals","allowance","setAllowance","balance","setBalance","price","setPrice","isCovalApproved","setIsCovalApproved","approved","setApproved","useOldMint","setUseOldMint","mintPassword","setMintPassword","key","showOffer","setShowOffer","offer","framed","setFramed","tokenId","setTokenId","id","experimental","setExperimental","noLayout","setNoLayout","slideshowOnly","setSlideshowOnly","vaultName","setVaultName","vaultIPFS","setVaultIPFS","vaultImageIPFS","setVaultImageIPFS","vaultCiphertextV2","setVaultCiphertextV2","vaultDesc","setVaultDesc","vaultImage","setVaultImage","ownedImage","setOwnedImage","vaultValues","setVaultValues","loadedValues","setLoadedValues","vaultDataValues","setVaultDataValues","attributes","setAttributes","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","vaultChain","setVaultChain","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","state","setState","loaded","mine","setMine","mineUnMinted","setMineUnMinted","claiming","setClaiming","status","setStatus","sealed","setSealed","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","privValues","setKeyValues","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","hasCheckedNft","setHasCheckedNft","accepting","setAccepting","approving","setApproving","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","preTransfering","setPreTransfering","transferToAddress","setTransferToAddress","transfering","setTransfering","owner","setOwner","live","setLive","nonce","setNonce","mintSignature","setMintSignature","to","setTo","showVerifyingSignature","setShowVerifyingSignature","showMakingVaultMsg","setShowMakingVaultMsg","minting","setMinting","isCrowdSale","setIsCrowdSale","alternateContractAddress","setAlternateContractAddress","targetAsset","setTargetAsset","name","image","metadata","targetContract","setTargetContract","chain","serialNumber","canCuratedMint","setCanCuratedMint","mintLockedForever","setMintLockedForever","curatedMintingParameters","setCuratedMintingParameters","handlerContract","vaultHandler","vaultHandlerAbi","vaultHandlerContract","vaultHandlerV8","vaultHandlerV8Abi","emblemContract","emblemVault","emblemAbi","covalContract","coval","covalAbi","isOpen","isOpenAddrModal","onOpen","onOpenAddrModal","onClose","onCloseAddrModal","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","isOpenOfferModal","onOpenOfferModal","onCloseOfferModal","onToggle","isManageAddressOpen","onManageAddressToggle","colorMode","getVaultContract","address","getSigner","connectUnchecked","getCuratedContract","erc1155Abi","checkLiveliness","cb","console","log","endpoint","fetch","method","headers","service","chainid","toString","body","JSON","stringify","then","response","data","json","delayedMint","cipherTextHash","filter","coin","buyWithSignature","setTimeout","catch","error","deleteVault","signMessage","signature","location","href","split","lazyMintCurated","_nftAddress","_payment","_price","_to","_tokenId","_nonce","_signature","buyWithSignedPrice","getAllBalances","values","responce","jsonData","balances","length","handleApproveForall","setApprovalForAll","code","getVault","collectionAddress","setStates","includes","ciphertextV2","mintLocked","mintLockBlock","description","totalValue","concat","item","trait_type","addresses","ipfs","image_ipfs","toLowerCase","project","network","isLive","isPvt","getAllBalancesLive","getAllBalancesByAddress","ethAddress","btcAddress","savePasswordToLocalStorage","localStorage","setItem","loadPasswordFromLocalStorage","storedPw","getItem","getSignedJWT","myHeaders","Headers","append","raw","redirect","getTorusKeys","verifierId","idToken","fetchNodeDetails","torusUtils","enableOneKey","torusNodeEndpoints","torusIndexes","getNodeDetails","verifier","privKey","retrieveShares","verifier_id","privateKey","addAddress","decryptEmbed","getContractStates","owned","_owner","Math","pow","balanceOf","Number","getOwnerOfSerial","ownerOf","finish","err","isApproved","isApprovedForAll","onRenew","approveCovalFlow","handlerToApprove","approve","handleSign","token","keys","bytes","AES","decrypt","payload","parse","enc","Utf8","phrase","forEach","getSTXKey","window","phrasePathToKey","path","wallet","secretKey","password","accounts","stxPrivateKey","handleHideAsset","hideAsset","handleAddressSign","result","handleOwnedEmbed","handleClaim","claim","burn","pingClaimLogs","startDecryptEffect","theLetters","ctnt","speed","increment","clen","si","stri","block","fixed","rustle","i","nextFrame","pos","num","floor","random","letter","charAt","splitDescription","words","desc","trim","tryDecrypt","ciphertext","replace","decryptAddresses","getAddresses","cipherText","decryptedData","visitOpenSeaLink","open","visitLooksRareLink","__html","toLocaleString","e","target","value","v","toFixed","map","attribute_key","addr","type","canSwipe","origin"],"mappings":";;;AAAA,SACEA,GADF,EAEEC,IAFF,EAGEC,KAHF,EAIEC,IAJF,EAKEC,KALF,EAMEC,MANF,EAOEC,WAPF,EAQEC,KARF,EASEC,IATF,EAUEC,KAVF,EAWEC,SAXF,EAYEC,aAZF,EAiBEC,YAjBF,EAmBEC,IAnBF,EAoBEC,OApBF,EAqBEC,GArBF,EAsBEC,QAtBF,EAuBEC,SAvBF,QAwBO,iBAxBP;AA0BA,SAAQC,MAAR,QAAsC,kBAAtC,C,CACA;;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,UAAT,EAAiDC,iBAAjD,EAAoEC,OAApE,QAAmF,cAAnF;AACA,SAASC,WAAT,QAA4B,UAA5B;AAEA,SAASC,cAAT,QAA+B,UAA/B;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAGA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,SAAwBC,cAAxB,QAA8C,oBAA9C;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,MAAMC,WAAW,GAAG,KAApB;AAMA,MAAMC,SAAS,GAAGnB,OAAO,CAAC,MAAM,OAAO,aAAP,CAAP;AAAA;AAAA,wCAAc,aAAd;AAAA,cAAc,aAAd;AAAA;AAAA,EAAzB;AACA,MAAMoB,SAAS,GAAGpB,OAAO,CAAC,MAAM,OAAO,aAAP,CAAP;AAAA;AAAA,wCAAc,aAAd;AAAA,cAAc,aAAd;AAAA;AAAA,EAAzB;AACA,MAAMqB,UAAU,GAAGrB,OAAO,CAAC,MAAM,OAAO,cAAP,CAAP;AAAA;AAAA,wCAAc,cAAd;AAAA,cAAc,cAAd;AAAA;AAAA,EAA1B;AAEA,eAAe,SAASsB,IAAT,GAAgB;AAE7B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAgC/B,YAAY,EAAlD;AACA,QAAM;AAAEgC,IAAAA;AAAF,MAAY7B,SAAS,EAA3B;AACA,QAAM;AAAA,OAAC8B,eAAD;AAAA,OAAkBC;AAAlB,MAAwChC,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM;AAAA,OAACiC,QAAD;AAAA,OAAWC;AAAX,MAA0BlC,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM;AAAA,OAACmC,SAAD;AAAA,OAAYC;AAAZ,MAA4BpC,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAA,OAACqC,OAAD;AAAA,OAAUC;AAAV,MAAwBtC,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACuC,KAAD;AAAA,OAAQC;AAAR,MAAoBxC,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM;AAAA,OAACyC,eAAD;AAAA,OAAkBC;AAAlB,MAAwC1C,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM;AAAA,OAAC2C,QAAD;AAAA,OAAWC;AAAX,MAA0B5C,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAAC6C,UAAD;AAAA,OAAaC;AAAb,MAA8B9C,QAAQ,CAAC8B,KAAK,CAACe,UAAP,CAA5C;AACA,QAAM;AAAA,OAACE,YAAD;AAAA,OAAeC;AAAf,MAAkChD,QAAQ,CAAC8B,KAAK,CAACmB,GAAP,CAAhD;AACA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BnD,QAAQ,CAAC8B,KAAK,CAACsB,KAAN,IAAe,KAAhB,CAA1C;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBtD,QAAQ,CAAC8B,KAAK,CAACuB,MAAN,IAAgB,IAAjB,CAApC;AACA,QAAM;AAAA,OAACE,OAAD;AAAA,OAAUC;AAAV,MAAwBxD,QAAQ,CAAC8B,KAAK,CAAC2B,EAAP,CAAtC;AACA,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkC3D,QAAQ,CAAC8B,KAAK,CAAC4B,YAAP,CAAhD;AACA,QAAM;AAAA,OAACE,QAAD;AAAA,OAAWC;AAAX,MAA0B7D,QAAQ,CAAC8B,KAAK,CAAC8B,QAAP,CAAxC;AACA,QAAM;AAAA,OAACE,aAAD;AAAA,OAAgBC;AAAhB,MAAoC/D,QAAQ,CAAC8B,KAAK,CAACgC,aAAN,IAAuB,KAAxB,CAAlD;AACA,QAAM;AAAA,OAACE,SAAD;AAAA,OAAYC;AAAZ,MAA4BjE,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAA,OAACkE,SAAD;AAAA,OAAYC;AAAZ,MAA4BnE,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAA,OAACoE,cAAD;AAAA,OAAiBC;AAAjB,MAAsCrE,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM;AAAA,OAACsE,iBAAD;AAAA,OAAoBC;AAApB,MAA4CvE,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM;AAAA,OAACwE,SAAD;AAAA,OAAYC;AAAZ,MAA4BzE,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAA,OAAC0E,UAAD;AAAA,OAAaC;AAAb,MAA8B3E,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAAC4E,UAAD;AAAA,OAAaC;AAAb,MAA8B7E,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAAC8E,WAAD;AAAA,OAAcC;AAAd,MAAgC/E,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACgF,YAAD;AAAA,OAAeC;AAAf,MAAkCjF,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAA,OAACkF,eAAD;AAAA,OAAkBC;AAAlB,MAAwCnF,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM;AAAA,OAACoF,UAAD;AAAA,OAAaC;AAAb,MAA8BrF,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAACsF,cAAD;AAAA,OAAiBC;AAAjB,MAAsCvF,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM;AAAA,OAACwF,YAAD;AAAA,OAAeC;AAAf,MAAkCzF,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAA,OAAC0F,eAAD;AAAA,OAAkBC;AAAlB,MAAwC3F,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAM;AAAA,OAAC4F,YAAD;AAAA,OAAeC;AAAf,MAAkC7F,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM;AAAA,OAAC8F,UAAD;AAAA,OAAaC;AAAb,MAA8B/F,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM;AAAA,OAACgG,IAAD;AAAA,OAAOC;AAAP,MAAkBjG,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM;AAAA,OAACkG,QAAD;AAAA,OAAWC;AAAX,MAA0BnG,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACoG,QAAD;AAAA,OAAWC;AAAX,MAA0BrG,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACsG,KAAD;AAAA,OAAQC;AAAR,MAAoBvG,QAAQ,CAAC;AAAEwG,IAAAA,MAAM,EAAE;AAAV,GAAD,CAAlC;AACA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkB1G,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM;AAAA,OAAC2G,YAAD;AAAA,OAAeC;AAAf,MAAkC5G,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAA,OAAC6G,QAAD;AAAA,OAAWC;AAAX,MAA0B9G,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAAC+G,MAAD;AAAA,OAASC;AAAT,MAAsBhH,QAAQ,CAAC,SAAD,CAApC;AACA,QAAM;AAAA,OAACiH,MAAD;AAAA,OAASC;AAAT,MAAsBlH,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM;AAAA,OAACmH,SAAD;AAAA,OAAYC;AAAZ,MAA4BpH,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAA,OAACqH,QAAD;AAAA,OAAWC;AAAX,MAA0BtH,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACuH,UAAD;AAAA,OAAaC;AAAb,MAA8BxH,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAACyH,UAAD;AAAA,OAAaC;AAAb,MAA8B1H,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAAC2H,UAAD;AAAA,OAAaC;AAAb,MAA6B5H,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM;AAAA,OAAC6H,UAAD;AAAA,OAAaC;AAAb,MAA8B9H,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAAC+H,eAAD;AAAA,OAAkBC;AAAlB,MAAwChI,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM;AAAA,OAACiI,sBAAD;AAAA,OAAyBC;AAAzB,MAAsDlI,QAAQ,CAAC,KAAD,CAApE;AACA,QAAM;AAAA,OAACmI,eAAD;AAAA,OAAkBC;AAAlB,MAAwCpI,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM;AAAA,OAACqI,YAAD;AAAA,OAAeC;AAAf,MAAkCtI,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAA,OAACuI,aAAD;AAAA,OAAgBC;AAAhB,MAAoCxI,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM;AAAA,OAACyI,SAAD;AAAA,OAAYC;AAAZ,MAA4B1I,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAAC2I,SAAD;AAAA,OAAYC;AAAZ,MAA4B5I,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAAC6I,UAAD;AAAA,OAAaC;AAAb,MAA8B9I,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAAC+I,gBAAD;AAAA,OAAmBC;AAAnB,MAA0ChJ,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM;AAAA,OAACiJ,oBAAD;AAAA,OAAuBC;AAAvB,MAAkDlJ,QAAQ,CAAC,KAAD,CAAhE;AACA,QAAM;AAAA,OAACmJ,cAAD;AAAA,OAAiBC;AAAjB,MAAsCpJ,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM;AAAA,OAACqJ,iBAAD;AAAA,OAAoBC;AAApB,MAA4CtJ,QAAQ,CAAC,IAAD,CAA1D;AACA,QAAM;AAAA,OAACuJ,WAAD;AAAA,OAAcC;AAAd,MAAgCxJ,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAA,OAACyJ,KAAD;AAAA,OAAQC;AAAR,MAAoB1J,QAAQ,CAAC,IAAD,CAAlC,CA/D6B,CAgE7B;;AACA,QAAM;AAAA,OAAC2J,IAAD;AAAA,OAAOC;AAAP,MAAkB5J,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM;AAAA,OAAC6J,KAAD;AAAA,OAAQC;AAAR,MAAoB9J,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM;AAAA,OAAC+J,aAAD;AAAA,OAAgBC;AAAhB,MAAoChK,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM;AAAA,OAACiK,EAAD;AAAA,OAAKC;AAAL,MAAclK,QAAQ,CAAC,IAAD,CAA5B;AACA,QAAM;AAAA,OAACmK,sBAAD;AAAA,OAAyBC;AAAzB,MAAsDpK,QAAQ,CAAC,KAAD,CAApE;AACA,QAAM;AAAA,OAACqK,kBAAD;AAAA,OAAqBC;AAArB,MAA8CtK,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM;AAAA,OAACuK,OAAD;AAAA,OAAUC;AAAV,MAAwBxK,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACyK,WAAD;AAAA,OAAcC;AAAd,MAAgC1K,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAA,OAAC2K,wBAAD;AAAA,OAA2BC;AAA3B,MAA0D5K,QAAQ,CAAC,IAAD,CAAxE;AACA,QAAM;AAAA,OAAC6K,WAAD;AAAA,OAAcC;AAAd,MAAgC9K,QAAQ,CAAC;AAAC+K,IAAAA,IAAI,EAAE,EAAP;AAAWC,IAAAA,KAAK,EAAE,EAAlB;AAAsBC,IAAAA,QAAQ,EAAE;AAAhC,GAAD,CAA9C;AACA,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCnL,QAAQ,CAAC;AAAC+K,IAAAA,IAAI,EAAE,EAAP;AAAWK,IAAAA,KAAK,EAAE,EAAlB;AAAsB,OAAG,EAAzB;AAA6B,OAAG,EAAhC;AAAoC7H,IAAAA,OAAO,EAAE,EAA7C;AAAiD8H,IAAAA,YAAY,EAAE;AAAC,aAAM;AAAP;AAA/D,GAAD,CAApD;AACA,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCvL,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM;AAAA,OAACwL,iBAAD;AAAA,OAAoBC;AAApB,MAA4CzL,QAAQ,CAAC,KAAD,CAA1D;AAEA,QAAM;AAAA,OAAC0L,wBAAD;AAAA,OAA2BC;AAA3B,MAA0D3L,QAAQ,CAAC,EAAD,CAAxE;AAEA,QAAM4L,eAAe,GAAGlL,WAAW,CAACF,iBAAiB,CAACqL,YAAlB,CAA+BjK,OAA/B,CAAD,EAA0CpB,iBAAiB,CAACsL,eAA5D,EAA6E,IAA7E,CAAnC;AACA,QAAMC,oBAAoB,GAAGrL,WAAW,CAACF,iBAAiB,CAACwL,cAAlB,CAAiCpK,OAAjC,CAAD,EAA4CpB,iBAAiB,CAACyL,iBAA9D,EAAiF,IAAjF,CAAxC;AACA,MAAIC,cAAc,GAAGxL,WAAW,CAACF,iBAAiB,CAAC2L,WAAlB,CAA8BvK,OAA9B,CAAD,EAAyCpB,iBAAiB,CAAC4L,SAA3D,EAAsE,IAAtE,CAAhC;AACA,MAAIC,aAAa,GAAG3L,WAAW,CAACF,iBAAiB,CAAC8L,KAAlB,CAAwB1K,OAAxB,CAAD,EAAmCpB,iBAAiB,CAAC+L,QAArD,EAA+D,IAA/D,CAA/B;AACA,QAAM;AAAEC,IAAAA,MAAM,EAAEC,eAAV;AAA2BC,IAAAA,MAAM,EAAEC,eAAnC;AAAoDC,IAAAA,OAAO,EAAEC;AAA7D,MAAkFxN,aAAa,EAArG;AACA,QAAM;AAAEmN,IAAAA,MAAM,EAAEM,eAAV;AAA2BJ,IAAAA,MAAM,EAAEK,eAAnC;AAAoDH,IAAAA,OAAO,EAAEI;AAA7D,MAAkF3N,aAAa,EAArG;AACA,QAAM;AAAEmN,IAAAA,MAAM,EAAES,gBAAV;AAA4BP,IAAAA,MAAM,EAAEQ,gBAApC;AAAsDN,IAAAA,OAAO,EAAEO;AAA/D,MAAqF9N,aAAa,EAAxG;AACA,QAAM;AAAEmN,IAAAA,MAAF;AAAUY,IAAAA;AAAV,MAAuB/N,aAAa,EAA1C;AACA,QAAM;AAAEmN,IAAAA,MAAM,EAAEa,mBAAV;AAA+BD,IAAAA,QAAQ,EAAEE;AAAzC,MAAmEjO,aAAa,EAAtF;AAEA,QAAM;AAAEkO,IAAAA;AAAF,MAAgBjO,YAAY,EAAlC;;AAMA,QAAMkO,gBAAgB,GAAG,CAACC,OAAO,GAAG,IAAX,KAAmB;AAC1C,WAAO,IAAIpN,QAAJ,CAAaoN,OAAO,IAAIjN,iBAAiB,CAAC2L,WAAlB,CAA8BvK,OAA9B,CAAxB,EAAgEpB,iBAAiB,CAAC4L,SAAlF,EAA6FvK,OAAO,CAAC6L,SAAR,CAAkB/L,OAAlB,EAA2BgM,gBAA3B,EAA7F,CAAP;AACD,GAFD;;AAIA,QAAMC,kBAAkB,GAAG,CAACH,OAAO,GAAG,IAAX,KAAmB;AAC5C,WAAO,IAAIpN,QAAJ,CAAaoN,OAAb,EAAsBjN,iBAAiB,CAACqN,UAAxC,EAAoDhM,OAAO,CAAC6L,SAAR,CAAkB/L,OAAlB,EAA2BgM,gBAA3B,EAApD,CAAP;AACD,GAFD;;AAIA,QAAMG,eAAe,GAAG,CAACvK,OAAD,EAAU2H,cAAV,EAA0B6C,EAA1B,KAA+B;AACrDC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqC/C,cAArC;AACA,QAAIgD,QAAQ,GAAGhD,cAAc,CAACH,IAAf,GAAsBxK,UAAU,GAAGe,WAAb,GAA2B,qBAAjD,GAAyEf,UAAU,GAAG,aAArG;AACA4N,IAAAA,KAAK,CAACD,QAAD,EAAW;AACdE,MAAAA,MAAM,EAAE,MADM;AAEdC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,OAAO,EAAE,YAFF;AAGPC,QAAAA,OAAO,EAAE3M,OAAO,CAAC4M,QAAR;AAHF,OAFK;AAOd;AACAC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACpL,QAAAA,OAAO,EAAEA;AAAV,OAAf;AARQ,KAAX,CAAL,CASGqL,IATH,CASQ,gBAAgBC,QAAhB,EAA0B;AAChC,UAAIC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAjB;AACAnF,MAAAA,OAAO,CAACkF,IAAI,CAACnF,IAAN,CAAP;AACAqE,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCa,IAAhC;AACD,KAbD;AAcA,WAAOf,EAAE,CAAC,KAAD,CAAT;AACD,GAlBD;;AAoBA,QAAMiB,WAAW,GAAG,MAAM;AACxB;AACEhB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA7D,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACAE,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAE,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAwD,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCzN,iBAAiB,CAACqL,YAAlB,CAA+BjK,OAA/B,CAApC;AACA,QAAIqN,cAAc,GAAG3J,cAAc,CAAC4J,MAAf,CAAsBzB,OAAO,IAAE;AAAE,aAAOA,OAAO,CAAC0B,IAAR,IAAgB,KAAvB;AAA6B,KAA9D,EAAgE,CAAhE,EAAmE1B,OAAxF;AACE7B,IAAAA,eAAD,CACAwD,gBADA,CACiBzN,OADjB,EAC0B4B,OAD1B,EACmC0L,cADnC,EACmDpF,KADnD,EAC0DE,aAD1D,EAEA6E,IAFA,CAEK,CAAC;AAAE5I,MAAAA;AAAF,KAAD,KAAgC;AACpCqJ,MAAAA,UAAU,CAAC,MAAM;AACfpJ,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAsE,QAAAA,qBAAqB,CAAC,KAAD,CAArB;AAED,OAJS,EAIP,GAJO,CAAV,CADoC,CAK5B;AACT,KARA,EASAgF,KATA,CASOC,KAAD,IAA0B;AAC7BjF,MAAAA,qBAAqB,CAAC,KAAD,CAArB,CAD6B,CAE7B;AACH,KAZA;AAaJ,GArBD;;AAuBA,QAAMkF,WAAW,GAAG,MAAK;AACvB3N,IAAAA,OAAO,CAAC6L,SAAR,CAAkB/L,OAAlB,EACG8N,WADH,CACe,aAAalM,OAD5B,EAEGqL,IAFH,CAESc,SAAD,IAAe;AACnB1B,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmByB,SAAnB;AACAvB,MAAAA,KAAK,CAAC5N,UAAU,GAAGe,WAAb,GAA2B,SAA5B,EAAuC;AAC1C8M,QAAAA,MAAM,EAAE,MADkC;AAE1CC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,OAAO,EAAE;AAFF,SAFiC;AAM1CG,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACpL,UAAAA,OAAO,EAAEA,OAAV;AAAmBmM,UAAAA,SAAS,EAAEA,SAA9B;AAAyC9N,UAAAA,OAAO,EAAEA,OAAO,CAAC4M,QAAR;AAAlD,SAAf;AANoC,OAAvC,CAAL,CAOGI,IAPH,CAOQ,gBAAgBC,QAAhB,EAAyB;AAC/B,YAAIC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAjB;AACAY,QAAAA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,IAA8B,SAA9C;AACD,OAVD;AAWD,KAfH;AAgBD,GAjBD;;AAmBA,QAAMC,eAAe,GAAG,MAAK;AAC3BjO,IAAAA,OAAO,CAAC6L,SAAR,CAAkB/L,OAAlB,EACG8N,WADH,CACe,sBAAsBlM,OADrC,EAEGqL,IAFH,CAESc,SAAD,IAAe;AACnB1B,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmByB,SAAnB;AACAvB,MAAAA,KAAK,CAAC5N,UAAU,GAAGe,WAAb,GAA2B,eAA5B,EAA6C;AAChD8M,QAAAA,MAAM,EAAE,MADwC;AAEhDC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,OAAO,EAAE;AAFF,SAFuC;AAMhDG,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACpL,UAAAA,OAAO,EAAEA,OAAV;AAAmBmM,UAAAA,SAAS,EAAEA,SAA9B;AAAyC9N,UAAAA,OAAO,EAAEA,OAAO,CAAC4M,QAAR;AAAlD,SAAf;AAN0C,OAA7C,CAAL,CAOGI,IAPH,CAOQ,gBAAgBC,QAAhB,EAAyB;AAC/B,YAAIC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAjB;AACAf,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYa,IAAI,CAACiB,WAAjB,EAA8BjB,IAAI,CAACkB,QAAnC,EAA6ClB,IAAI,CAACmB,MAAlD,EAA0DnB,IAAI,CAACoB,GAA/D,EAAoEpB,IAAI,CAACqB,QAAzE,EAAmFrB,IAAI,CAACsB,MAAxF,EAAgGtB,IAAI,CAACuB,UAArG,EAAiHvB,IAAI,CAACzD,YAAtH,EAAoI,CAApI;AACAM,QAAAA,2BAA2B,CAACmD,IAAD,CAA3B;AACE/C,QAAAA,oBAAD,CACEuE,kBADF,CACqBxB,IAAI,CAACiB,WAD1B,EACuCjB,IAAI,CAACkB,QAD5C,EACsDlB,IAAI,CAACmB,MAD3D,EACmEnB,IAAI,CAACoB,GADxE,EAC6EpB,IAAI,CAACqB,QADlF,EAC4FrB,IAAI,CAACsB,MADjG,EACyGtB,IAAI,CAACuB,UAD9G,EAC0HvB,IAAI,CAACzD,YAD/H,EAC6I,CAD7I,EAEEuD,IAFF,CAEO,CAAC;AAAE5I,UAAAA;AAAF,SAAD,KAAgC;AACpCqJ,UAAAA,UAAU,CAAC,MAAM;AACfpJ,YAAAA,OAAO,CAACD,IAAD,CAAP;AACAsE,YAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAE,YAAAA,UAAU,CAAC,IAAD,CAAV;AACD,WAJS,EAIP,GAJO,CAAV,CADoC,CAK5B;AACT,SARF,EASE8E,KATF,CASSC,KAAD,IAA0B;AAC/BvB,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBsB,KAArB;AACEjF,UAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAE,UAAAA,UAAU,CAAC,KAAD,CAAV;AACH,SAbF;AAeF,OA3BD;AA4BD,KAhCH;AAiCD,GAlCD;;AAoCA,QAAM+F,cAAc,GAAG,OAAOC,MAAP,EAAejN,OAAf,EAAwBwK,EAAxB,KAA+B;AACpD,UAAM0C,QAAQ,GAAG,MAAMtC,KAAK,CAAC5N,UAAU,GAAG,iBAAb,GAAiCgD,OAAlC,EAA4C;AACtE6K,MAAAA,MAAM,EAAE,KAD8D;AAEtEC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,OAAO,EAAE;AAFF;AAF6D,KAA5C,CAA5B;AAQA,UAAMoC,QAAQ,GAAG,MAAMD,QAAQ,CAAC1B,IAAT,EAAvB;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBwC,QAAxB,EAAkCC,QAAlC;;AACA,QAAIA,QAAQ,CAACC,QAAT,CAAkBC,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,aAAO7C,EAAE,CAAC2C,QAAQ,CAACC,QAAV,CAAT;AACD,KAFD,MAEO;AACL,aAAO5C,EAAE,CAACyC,MAAD,CAAT;AACD;AACF,GAhBD;;AAkBA,QAAMK,mBAAmB,GAAG,MAAM;AAChCjI,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAIsC,cAAc,CAACH,IAAnB,EAAyB;AACvBmB,MAAAA,cAAc,GAAG0B,kBAAkB,CAAC1C,cAAc,CAACtJ,OAAD,CAAf,CAAnC;AACAsK,MAAAA,cAAc,CAAC4E,iBAAf,CAAiCtQ,iBAAiB,CAACwL,cAAlB,CAAiCpK,OAAjC,CAAjC,EAA4E,IAA5E,EACCgN,IADD,CACM,CAAC;AAAE5I,QAAAA;AAAF,OAAD,KAAgC;AACpCqJ,QAAAA,UAAU,CAAC,MAAM;AACfpJ,UAAAA,OAAO,CAACD,IAAD,CAAP;AACD,SAFS,EAEP,GAFO,CAAV,CADoC,CAG5B;AACT,OALD,EAMCsJ,KAND,CAMQC,KAAD,IAA0B;AAC/B,YAAI,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEwB,IAAP,MAAgB,IAApB,EAA0B;AACxB/C,UAAAA,OAAO,CAACC,GAAR,CAAa,YAAb,EAA0BsB,KAA1B;AACD,SAFD,MAEO;AACL3G,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,OAZD;AAaD,KAfD,MAeO;AACJsD,MAAAA,cAAD,CACC4E,iBADD,CACmBtQ,iBAAiB,CAACqL,YAAlB,CAA+BjK,OAA/B,CADnB,EAC4D,IAD5D,EAECgN,IAFD,CAEM,CAAC;AAAE5I,QAAAA;AAAF,OAAD,KAAgC;AACpCqJ,QAAAA,UAAU,CAAC,MAAM;AACfpJ,UAAAA,OAAO,CAACD,IAAD,CAAP;AACD,SAFS,EAEP,GAFO,CAAV,CADoC,CAG5B;AACT,OAND,EAOCsJ,KAPD,CAOQC,KAAD,IAA0B;AAC/B,YAAI,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEwB,IAAP,MAAgB,IAApB,EAA0B;AACxB/C,UAAAA,OAAO,CAACC,GAAR,CAAa,YAAb,EAA0BsB,KAA1B;AACD,SAFD,MAEO;AACL3G,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,OAbD;AAcD;AACF,GAjCD;;AAmCA,QAAMoI,QAAQ,GAAG,YAAY;AAC3BhD,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,UAAMwC,QAAQ,GAAG,MAAMtC,KAAK,CAAC5N,UAAU,GAAGe,WAAb,GAA2B,QAA3B,GAAsCiC,OAAtC,GAAgD,oBAAjD,EAAuE;AACjG6K,MAAAA,MAAM,EAAE,KADyF;AAEjGC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,OAAO,EAAE;AAFF;AAFwF,KAAvE,CAA5B;AAOA,UAAMoC,QAAQ,GAAG,MAAMD,QAAQ,CAAC1B,IAAT,EAAvB;;AACA,QAAI2B,QAAQ,CAACO,iBAAb,EAA+B;AAC7BvG,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAE,MAAAA,2BAA2B,CAAC8F,QAAQ,CAACO,iBAAV,CAA3B;AACD;;AACD,QAAI,CAACP,QAAQ,CAAC3F,IAAd,EAAoB;AAClBxE,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAR;AACA8B,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD,KAHD,MAGO;AACL0F,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCyC,QAAxC;AACAQ,MAAAA,SAAS,CAACR,QAAD,CAAT;AACA5I,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAQ,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,GAvBD;;AAyBA,QAAM4I,SAAS,GAAIR,QAAD,IAAc;AAC9BrN,IAAAA,MAAM,IAAIqN,QAAQ,CAAC1F,KAAnB,IAA4B,CAAC0F,QAAQ,CAAC1F,KAAT,CAAemG,QAAf,CAAwB,SAAxB,CAA7B,IAAmE,CAACT,QAAQ,CAAC1F,KAAT,CAAemG,QAAf,CAAwB,MAAxB,CAApE,GAAsGT,QAAQ,CAAC1F,KAAT,GAAiB0F,QAAQ,CAAC1F,KAAT,GAAiB,UAAjB,GAA4B3H,MAAnJ,GAA4J,IAA5J;;AACA,QAAIqN,QAAQ,CAACU,YAAb,EAA2B;AACzB7M,MAAAA,oBAAoB,CAACmM,QAAQ,CAACU,YAAV,CAApB;AACApD,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4ByC,QAAQ,CAACU,YAArC;AACD;;AACD3F,IAAAA,oBAAoB,CAACiF,QAAQ,CAACW,UAAT,IAAuBX,QAAQ,CAACY,aAAT,IAA0B,CAAlD,CAApB;AACArN,IAAAA,YAAY,CAACyM,QAAQ,CAAC3F,IAAV,CAAZ;AACApG,IAAAA,aAAa,CAAC+L,QAAQ,CAAC1F,KAAV,CAAb;AACAnG,IAAAA,aAAa,CAAC6L,QAAQ,CAAC9L,UAAT,IAAuB,IAAxB,CAAb;AACAH,IAAAA,YAAY,CAACiM,QAAQ,CAACa,WAAV,CAAZ;AACA5L,IAAAA,kBAAkB,CAAC+K,QAAQ,CAACc,UAAT,IAAuB,CAAxB,CAAlB;AACAd,IAAAA,QAAQ,CAACF,MAAT,GAAkBzL,cAAc,CAACD,WAAW,CAAC2M,MAAZ,CAAmBf,QAAQ,CAACF,MAA5B,CAAD,CAAhC,GAAuE,IAAvE;AACAE,IAAAA,QAAQ,CAACtL,UAAT,GAAsBD,kBAAkB,CAACuL,QAAQ,CAACtL,UAAT,CAAoB8J,MAApB,CAA2BwC,IAAI,IAAE;AAAC,aAAOA,IAAI,CAACC,UAAL,KAAoB,KAA3B;AAAiC,KAAnE,CAAD,CAAxC,GAAgH,IAAhH;AACAjB,IAAAA,QAAQ,CAACtL,UAAT,GAAsBC,aAAa,CAACqL,QAAQ,CAACtL,UAAV,CAAnC,GAA0D,IAA1D;AACAG,IAAAA,iBAAiB,CAACmL,QAAQ,CAACkB,SAAV,CAAjB;AACAzN,IAAAA,YAAY,CAACuM,QAAQ,CAACmB,IAAT,IAAiB,IAAlB,CAAZ;AACAxN,IAAAA,iBAAiB,CAACqM,QAAQ,CAACoB,UAAT,IAAuB,IAAxB,CAAjB;AACApB,IAAAA,QAAQ,CAACxF,cAAT,IAA2BwF,QAAQ,CAACxF,cAAT,CAAwB3H,OAAxB,IAAmCA,OAA9D,GAAuEvB,kBAAkB,CAAC,IAAD,CAAzF,GAAiG,IAAjG;AACA0O,IAAAA,QAAQ,CAAC7F,WAAT,GAAsBC,cAAc,CAAC4F,QAAQ,CAAC7F,WAAV,CAApC,GAA6D,IAA7D;AACA6F,IAAAA,QAAQ,CAACxF,cAAT,GAAyBC,iBAAiB,CAACuF,QAAQ,CAACxF,cAAV,CAA1C,GAAsE,IAAtE;AACAwF,IAAAA,QAAQ,CAACF,MAAT,IAAmBE,QAAQ,CAAC7F,WAA5B,IAA2C6F,QAAQ,CAACF,MAAT,CAAgBtB,MAAhB,CAAuBwC,IAAI,IAAE;AACtE,aAAOA,IAAI,CAACvC,IAAL,CAAU4C,WAAV,MAA2BrB,QAAQ,CAACxF,cAAT,CAAwBE,KAAnD,IACPsG,IAAI,CAAC3G,IAAL,IAAa2F,QAAQ,CAAC7F,WAAT,CAAqBE,IAD3B,IAEP2G,IAAI,CAACM,OAAL,IAAgBtB,QAAQ,CAACxF,cAAT,CAAwBH,IAFxC;AAGD,KAJ0C,EAIxC6F,MAJwC,GAI/B,CAJZ,GAIgBrF,iBAAiB,CAAC,IAAD,CAJjC,GAIyC,IAJzC;AAMA3B,IAAAA,OAAO,CAAC8G,QAAQ,CAAC/G,IAAT,IAAiB,KAAjB,GAAyB,KAAzB,GAAiC,IAAlC,CAAP;AAEAG,IAAAA,QAAQ,CAAC4G,QAAQ,CAAC7G,KAAV,CAAR;AACAG,IAAAA,gBAAgB,CAAC0G,QAAQ,CAAChB,SAAV,CAAhB;AACAxF,IAAAA,KAAK,CAACwG,QAAQ,CAACzG,EAAV,CAAL;AACAlE,IAAAA,aAAa,CAAC2K,QAAQ,CAACuB,OAAV,CAAb;AACApM,IAAAA,eAAe,CACb6K,QAAQ,CAACuB,OAAT,IAAoB,SAApB,GAAgC,CAAhC,GACAvB,QAAQ,CAACuB,OAAT,IAAoB,SAApB,GAAgC,CAAhC,GACAvB,QAAQ,CAACuB,OAAT,IAAoB,QAApB,GAA+B,CAA/B,GACAvB,QAAQ,CAACuB,OAAT,IAAoB,QAApB,GAA+B,KAA/B,GACAvB,QAAQ,CAACuB,OAAT,IAAoB,OAApB,GAA8B,GAA9B,GACAvB,QAAQ,CAACuB,OAAT,IAAoB,MAApB,GAA6B,GAA7B,GACAvB,QAAQ,CAACuB,OAAT,IAAoB,KAApB,GAA4B,EAA5B,GACAvB,QAAQ,CAACuB,OAAT,IAAoB,QAApB,GAA+B,GAA/B,GACAvB,QAAQ,CAACuB,OAAT,IAAoB,SAApB,GAAgC,CAAhC,GACAvB,QAAQ,CAACuB,OAAT,IAAoB,QAApB,GAA+B,UAA/B,GACA,EAXa,CAAf;;AAaA,QAAI,CAACvB,QAAQ,CAAC/G,IAAd,EAAoB;AAClBqE,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAH,MAAAA,eAAe,CAACvK,OAAD,EAAUmN,QAAQ,CAACxF,cAAnB,EAAoCgH,MAAD,IAAU;AAC1DtI,QAAAA,OAAO,CAACsI,MAAD,CAAP;AACD,OAFc,CAAf;AAGD;;AACDlL,IAAAA,SAAS,CAAC0J,QAAQ,CAAC3J,MAAV,CAAT;;AACA,QAAIA,MAAM,KAAK,SAAf,EAA0B;AACxBK,MAAAA,YAAY,CAACsJ,QAAQ,CAACvJ,SAAV,CAAZ;AACD;;AAEDZ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAD,CAAR;AACA,QAAI2L,KAAK,GACPzB,QAAQ,CAACkB,SAAT,CAAmB1C,MAAnB,CAA2BwC,IAAD,IAAU;AAClC,aAAOA,IAAI,CAACjE,OAAL,CAAa0D,QAAb,CAAsB,UAAtB,CAAP;AACD,KAFD,EAEGP,MAFH,GAEY,CAHd;AAIAnL,IAAAA,eAAe,CAAC0M,KAAD,CAAf;;AACA,QAAIzB,QAAQ,CAACzJ,MAAb,EAAqB;AACnBC,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAFD,MAEO;AACLA,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD;AACF,GApED;;AAsEA,QAAMkL,kBAAkB,GAAG,OAAO5B,MAAP,EAAejN,OAAf,EAAwBwK,EAAxB,KAA+B;AACxD,QAAI/I,YAAJ,EAAkB;AAChB,aAAO+I,EAAE,CAAC,KAAD,CAAT;AACD;;AACD9I,IAAAA,eAAe,CAAC,IAAD,CAAf;AACA,UAAMwL,QAAQ,GAAG,MAAMtC,KAAK,CAAC5N,UAAU,GAAG,iBAAb,GAAiCgD,OAAjC,GAA2C,YAA5C,EAA2D;AACrF6K,MAAAA,MAAM,EAAE,KAD6E;AAErFC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,OAAO,EAAE;AAFF;AAF4E,KAA3D,CAA5B;AAQA,UAAMoC,QAAQ,GAAG,MAAMD,QAAQ,CAAC1B,IAAT,EAAvB;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBwC,QAAxB,EAAkCC,QAAlC;;AACA,QAAIA,QAAQ,CAACC,QAAT,CAAkBC,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,aAAO7C,EAAE,CAACyC,MAAM,CAACiB,MAAP,CAAcf,QAAQ,CAACC,QAAvB,CAAD,CAAT;AACD,KAFD,MAEO;AACL,aAAO5C,EAAE,CAACyC,MAAD,CAAT;AACD;AACF,GApBD;;AAsBA,QAAM6B,uBAAuB,GAAG,OAAO7B,MAAP,EAAe8B,UAAf,EAA2BC,UAA3B,EAAuCxE,EAAvC,KAA8C;AAC5E;AACA,UAAM0C,QAAQ,GAAG,MAAMtC,KAAK,CAAC5N,UAAU,GAAG,iBAAb,GAAiC+R,UAAjC,GAA8C,GAA9C,GAAoDC,UAArD,EAAiE;AAC3FnE,MAAAA,MAAM,EAAE,KADmF;AAE3FC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,OAAO,EAAE;AAFF;AAFkF,KAAjE,CAA5B;AAQA,UAAMoC,QAAQ,GAAG,MAAMD,QAAQ,CAAC1B,IAAT,EAAvB;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBwC,QAAxB,EAAkCC,QAAlC;;AACA,QAAIA,QAAQ,CAACC,QAAT,CAAkBC,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,aAAO7C,EAAE,CAACyC,MAAM,CAACiB,MAAP,CAAcf,QAAQ,CAACC,QAAvB,CAAD,CAAT;AACD,KAFD,MAEO;AACL,aAAO5C,EAAE,CAACyC,MAAD,CAAT;AACD;AACF,GAjBD;;AAmBA,QAAMgC,0BAA0B,GAAG,MAAM;AACvCC,IAAAA,YAAY,CAACC,OAAb,CAAqB/Q,OAAO,GAAG,GAAV,GAAgBC,OAAhB,GAA0B,GAA1B,GAAgC2B,OAAhC,GAA0C,eAA/D,EAAgFwF,gBAAhF,EADuC,CAC2D;AACnG,GAFD;;AAIA,QAAM4J,4BAA4B,GAAG,MAAM;AACzC,QAAIC,QAAQ,GAAGH,YAAY,CAACI,OAAb,CAAqBlR,OAAO,GAAG,GAAV,GAAgBC,OAAhB,GAA0B,GAA1B,GAAgC2B,OAAhC,GAA0C,eAA/D,CAAf;AACAqP,IAAAA,QAAQ,IAAI/J,UAAZ,GAAyB7F,eAAe,CAAC4P,QAAD,CAAxC,GAAqD,IAArD,CAFyC,CAEiB;AAC3D,GAHD;;AAKA,QAAME,YAAY,GAAG,OAAOpD,SAAP,EAAkBnM,OAAlB,EAA2BwK,EAA3B,KAAgC;AACnD,QAAIgF,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,SAAjB,EAA4BrR,OAAO,CAAC4M,QAAR,EAA5B;AACAuE,IAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AAEA,QAAIC,GAAG,GAAGxE,IAAI,CAACC,SAAL,CAAe;AAAEe,MAAAA,SAAS,EAAEA,SAAb;AAAwBnM,MAAAA,OAAO,EAAEA;AAAjC,KAAf,CAAV;AACA,UAAMkN,QAAQ,GAAG,MAAMtC,KAAK,CAAC1N,OAAO,GAAC,OAAT,EAAkB;AAC5C2N,MAAAA,MAAM,EAAE,MADoC;AAE5CC,MAAAA,OAAO,EAAE0E,SAFmC;AAG5CtE,MAAAA,IAAI,EAAEyE,GAHsC;AAI5CC,MAAAA,QAAQ,EAAE;AAJkC,KAAlB,CAA5B;AAMA,UAAMzC,QAAQ,GAAG,MAAMD,QAAQ,CAAC1B,IAAT,EAAvB;AACA,WAAOhB,EAAE,CAAC2C,QAAD,CAAT;AACD,GAdD;;AAgBA,iBAAe0C,YAAf,CAA6BC,UAA7B,EAAyCC,OAAzC,EAAkDvF,EAAlD,EAAsD;AACpD,UAAMwF,gBAAgB,GAAG,IAAInS,gBAAJ,CAAqB;AAAE6Q,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAzB;AACA,UAAMuB,UAAU,GAAG,IAAInS,UAAJ,CAAe;AAAEoS,MAAAA,YAAY,EAAE,IAAhB;AAAsBxB,MAAAA,OAAO,EAAE;AAA/B,KAAf,CAAnB;AAEA,UAAM;AAAEyB,MAAAA,kBAAF;AAAsBC,MAAAA;AAAtB,QAAuC,MAAMJ,gBAAgB,CAACK,cAAjB,CAAgC;AAAEC,MAAAA,QAAQ,EAAE,sBAAZ;AAAoCR,MAAAA;AAApC,KAAhC,CAAnD;AACA,UAAM;AAAES,MAAAA;AAAF,QAAc,MAAMN,UAAU,CAACO,cAAX,CAA0BL,kBAA1B,EAA8CC,YAA9C,EAA4D,sBAA5D,EAAoF;AAAEK,MAAAA,WAAW,EAAEX;AAAf,KAApF,EAAiHC,OAAjH,CAA1B;AACA,WAAOvF,EAAE,CAAC;AAACkG,MAAAA,UAAU,EAAEH;AAAb,KAAD,CAAT;AACD;;AAED,QAAMI,UAAU,GAAG,OAAOxE,SAAP,EAAkBnM,OAAlB,EAA2B4L,IAA3B,EAAiCpB,EAAjC,KAAwC;AACzD,QAAIgF,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,SAAjB,EAA4BrR,OAAO,CAAC4M,QAAR,EAA5B;AACAuE,IAAAA,SAAS,CAACE,MAAV,CAAiB,SAAjB,EAA4B,YAA5B;AACAF,IAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AAEA,QAAIC,GAAG,GAAGxE,IAAI,CAACC,SAAL,CAAe;AAAEe,MAAAA,SAAS,EAAEA,SAAb;AAAwBP,MAAAA,IAAI,EAAEA;AAA9B,KAAf,CAAV;AACA,UAAMsB,QAAQ,GAAG,MAAMtC,KAAK,CAAC5N,UAAU,GAAG,WAAb,GAA2BgD,OAA5B,EAAqC;AAC/D6K,MAAAA,MAAM,EAAE,MADuD;AAE/DC,MAAAA,OAAO,EAAE0E,SAFsD;AAG/DtE,MAAAA,IAAI,EAAEyE,GAHyD;AAI/DC,MAAAA,QAAQ,EAAE;AAJqD,KAArC,CAA5B;AAMA,UAAMzC,QAAQ,GAAG,MAAMD,QAAQ,CAAC1B,IAAT,EAAvB;AACA,WAAOhB,EAAE,CAAC2C,QAAD,CAAT;AACD,GAfD;;AAiBA,QAAMyD,YAAY,GAAG,OAAOzE,SAAP,EAAkBnM,OAAlB,EAA2BwK,EAA3B,KAAkC;AACrD,QAAIgF,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,SAAjB,EAA4BrR,OAAO,CAAC4M,QAAR,EAA5B;AACAuE,IAAAA,SAAS,CAACE,MAAV,CAAiB,SAAjB,EAA4B,YAA5B;AACAF,IAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AAEA,QAAIC,GAAG,GAAGxE,IAAI,CAACC,SAAL,CAAe;AAAEe,MAAAA,SAAS,EAAEA;AAAb,KAAf,CAAV;AACA,UAAMe,QAAQ,GAAG,MAAMtC,KAAK,CAAC5N,UAAU,GAAG,SAAb,GAAyBgD,OAA1B,EAAmC;AAC7D6K,MAAAA,MAAM,EAAE,MADqD;AAE7DC,MAAAA,OAAO,EAAE0E,SAFoD;AAG7DtE,MAAAA,IAAI,EAAEyE,GAHuD;AAI7DC,MAAAA,QAAQ,EAAE;AAJmD,KAAnC,CAA5B;AAMA,UAAMzC,QAAQ,GAAG,MAAMD,QAAQ,CAAC1B,IAAT,EAAvB;AACA,WAAOhB,EAAE,CAAC2C,QAAD,CAAT;AACD,GAfD;;AAiBA,QAAM0D,iBAAiB,GAAG,YAAY;AACpCpG,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAEA,QAAIoG,KAAK,GAAG,KAAZ;;AACA,QAAIC,MAAJ;;AACA,QAAI;AACF,UAAIpJ,cAAc,CAACtJ,OAAD,CAAlB,EAA6B;AAC3BsK,QAAAA,cAAc,GAAG0B,kBAAkB,CAAC1C,cAAc,CAACtJ,OAAD,CAAf,CAAnC;AACAM,QAAAA,WAAW,CAAC,MAAMmK,aAAa,CAACpK,QAAd,EAAP,CAAX;AACAO,QAAAA,QAAQ,CAAC,MAAM+R,IAAI,CAACC,GAAL,CAAS,EAAT,EAAavS,QAAb,CAAP,CAAR;AACAG,QAAAA,YAAY,CACV,MAAMiK,aAAa,CAChBlK,SADG,CACOR,OADP,EACgBnB,iBAAiB,CAACwL,cAAlB,CAAiCpK,OAAjC,CADhB,EAEHgN,IAFG,CAEGvM,OAAD,IAAyCA,OAAO,CAACmM,QAAR,EAF3C,CADI,CAAZ;AAKAlM,QAAAA,UAAU,CAAC,MAAM+J,aAAa,CAACoI,SAAd,CAAwB9S,OAAxB,EAAiCiN,IAAjC,CAAuCvM,OAAD,IAAyCA,OAAO,CAACmM,QAAR,EAA/E,CAAP,CAAV;;AAEA,YAAIkG,MAAM,CAACvS,SAAD,CAAN,IAAqBuS,MAAM,CAACnS,KAAD,CAA/B,EAAwC;AACtCG,UAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,SAFD,MAEO;AACLA,UAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD;;AACD4R,QAAAA,MAAM,GAAG,MAAMpI,cAAc,CAACyI,gBAAf,CAAgCzJ,cAAc,CAACG,YAA/C,CAAf,CAhB2B,CAkB3B;AACD,OAnBD,MAmBO;AACLiJ,QAAAA,MAAM,GAAI,MAAMpI,cAAc,CAAC0I,OAAf,CAAuBrR,OAAvB,CAAhB;AACD;;AACDsR,MAAAA,MAAM;AACP,KAxBD,CAwBE,OAAMC,GAAN,EAAU;AACVR,MAAAA,MAAM,GAAG,4CAAT;AACAO,MAAAA,MAAM;AACP;;AAED,mBAAeA,MAAf,GAAuB;AACrB;AACA,UAAIE,UAAJ;;AACA,UAAI7J,cAAc,CAACtJ,OAAD,CAAlB,EAA6B;AAC3BoM,QAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ,EAA4D,IAA5D,EAAkEtM,OAAlE,EAA2E,IAA3E,EAAiFnB,iBAAiB,CAACwL,cAAlB,CAAiCpK,OAAjC,CAAjF;AACAmT,QAAAA,UAAU,GAAG,MAAM7I,cAAc,CAAC8I,gBAAf,CAAgCrT,OAAhC,EAAyCnB,iBAAiB,CAACwL,cAAlB,CAAiCpK,OAAjC,CAAzC,CAAnB;AACAgB,QAAAA,WAAW,CAACmS,UAAD,CAAX;AACA/G,QAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0D,UAA1D,EAAsE8G,UAAtE,EAAkF,YAAlF,EAAgGlM,UAAhG,EAA4G,MAA5G,EAAoHpC,IAApH;AACAuH,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB1L,KAArB,EAA4B,UAA5B,EAAwCN,QAAxC,EAAkD,WAAlD,EAA+DE,SAA/D,EAA0E,SAA1E,EAAqFE,OAArF,EAA8F,iBAA9F,EAAiHI,eAAjH;AACD,OAND,MAMO;AACLsS,QAAAA,UAAU,GAAG,MAAM7I,cAAc,CAAC8I,gBAAf,CAAgCrT,OAAhC,EAAyCnB,iBAAiB,CAACqL,YAAlB,CAA+BjK,OAA/B,CAAzC,CAAnB;AACAgB,QAAAA,WAAW,CAACmS,UAAD,CAAX;AACD,OAZoB,CAcrB;;;AACArL,MAAAA,QAAQ,CAAC4K,MAAD,CAAR;AACA5N,MAAAA,OAAO,CAAC4N,MAAM,KAAK3S,OAAX,IAAuBsI,EAAE,KAAKtI,OAAP,IAAkB2S,MAAM,KAAK,4CAArD,CAAP;AACA1N,MAAAA,eAAe,CAACqD,EAAE,KAAKtI,OAAP,IAAkB2S,MAAM,KAAK,4CAA9B,CAAf;AACA3B,MAAAA,4BAA4B;AAC7B;AAEF,GAvDD;;AAyDA,QAAMsC,OAAO,GAAG,MAAOlK,IAAP,IAAgB;AAC9BlJ,IAAAA,OAAO,CACJ6L,SADH,CACa/L,OADb,EAEG8N,WAFH,CAEe,YAAYlM,OAF3B,EAGGqL,IAHH,CAGSc,SAAD,IAAe;AACnB,UAAIjC,OAAO,GAAGnI,cAAc,CAAC4J,MAAf,CAAsBzB,OAAO,IAAE;AAAE,eAAOA,OAAO,CAAC0B,IAAR,IAAgB,KAAvB;AAA6B,OAA9D,EAAgE,CAAhE,EAAmE1B,OAAjF;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyByB,SAAzB,EAAoC3E,IAApC;AACAoD,MAAAA,KAAK,CAAC5N,UAAU,GAAG,aAAb,GAA6BkN,OAA9B,EAAuC;AAC1CW,QAAAA,MAAM,EAAE,MADkC;AAE1CC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,OAAO,EAAE,YAFF;AAGPC,UAAAA,OAAO,EAAE3M,OAAO,CAAC4M,QAAR;AAHF,SAFiC;AAO1CC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACf,qBAAWpL,OADI;AAEf,uBAAamM,SAFE;AAGf,kBAAQ3E;AAHO,SAAf;AAPoC,OAAvC,CAAL,CAYG6D,IAZH,CAYQ,gBAAgBC,QAAhB,EAA0B;AAChC,YAAIC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAjB;AACAf,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Ba,IAA/B;AAED,OAhBD;AAiBD,KAvBH;AAwBD,GAzBD;;AA2BA,QAAMoG,gBAAgB,GAAG,MAAM;AAC7BtM,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,QAAIuM,gBAAgB,GAAGjK,cAAc,CAACH,IAAf,GAAqBvK,iBAAiB,CAACwL,cAAlB,CAAiCpK,OAAjC,CAArB,GAAgEpB,iBAAiB,CAACqL,YAAlB,CAA+BjK,OAA/B,CAAvF;AACEyK,IAAAA,aAAD,CACE+I,OADF,CACUD,gBADV,EAC4B,iBAD5B,EAEEvG,IAFF,CAEO,CAAC;AAAE5I,MAAAA;AAAF,KAAD,KAAgC;AACpCC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAJF,EAKEsJ,KALF,CAKSC,KAAD,IAA0B;AAC/B,UAAI,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEwB,IAAP,KAAe,IAAnB,EAAyB;AACvBnI,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KATF;AAUF,GAbD;;AAeA,QAAMyM,UAAU,GAAG,YAAY;AAC7B,QAAIhK,YAAJ;;AACA,QAAIH,cAAc,CAACtJ,OAAD,CAAlB,EAA6B;AAC3BsK,MAAAA,cAAc,GAAG0B,kBAAkB,CAAC1C,cAAc,CAACtJ,OAAD,CAAf,CAAnC;AACAyJ,MAAAA,YAAY,GAAGH,cAAc,CAACG,YAA9B;AAED;;AAEDxJ,IAAAA,OAAO,CACJ6L,SADH,CACa/L,OADb,EAEG8N,WAFH,CAEe,aAAavE,cAAc,CAACtJ,OAAD,CAAd,GAAyByJ,YAAzB,GAAuC9H,OAApD,CAFf,EAGGqL,IAHH,CAGSc,SAAD,IAAe;AACnBnJ,MAAAA,QAAQ,CAAC;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAD,CAAR;;AACA,UAAIG,YAAY,IAAII,MAAM,IAAI,SAA1B,IAAuC,CAACyE,iBAA5C,EAA+D;AAC7DC,QAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD;;AACDqH,MAAAA,YAAY,CAACpD,SAAD,EAAYnM,OAAZ,EAAsB+R,KAAD,IAAS;AACxClC,QAAAA,YAAY,CAAC7P,OAAD,EAAU+R,KAAK,CAACA,KAAhB,EAAwBC,IAAD,IAAQ;AACzC,cAAIC,KAAK,GAAG5U,QAAQ,CAAC6U,GAAT,CAAaC,OAAb,CAAqBpR,iBAArB,EAAwCiR,IAAI,CAACtB,UAA7C,CAAZ;AACA,cAAI0B,OAAO,GAAGjH,IAAI,CAACkH,KAAL,CAAWJ,KAAK,CAAChH,QAAN,CAAe5N,QAAQ,CAACiV,GAAT,CAAaC,IAA5B,CAAX,CAAd;AACAlO,UAAAA,YAAY,CAAC+N,OAAO,CAACnF,MAAT,CAAZ;AACAlJ,UAAAA,WAAW,CAACqO,OAAO,CAACI,MAAT,CAAX;AACAzQ,UAAAA,cAAc,CAAC0Q,OAAf,CAAuB,MAAMvI,OAAN,IAAe;AACpC,gBAAIA,OAAO,CAAC0B,IAAR,IAAgB,KAApB,EAA2B;AACzB1B,cAAAA,OAAO,CAACxK,GAAR,GAAc,MAAMgT,SAAS,CAACxI,OAAD,EAAUkI,OAAO,CAACI,MAAlB,CAA7B;AACD,aAFD,MAEO;AACLtI,cAAAA,OAAO,CAACxK,GAAR,GAAciT,MAAM,CAACC,eAAP,CAAuBR,OAAO,CAACI,MAA/B,EAAuCtI,OAAO,CAAC2I,IAA/C,CAAd;AACD;;AACD,gBAAI3I,OAAO,CAAC0B,IAAR,IAAgB,KAApB,EAA2B3H,aAAa,CAACiG,OAAO,CAACxK,GAAT,CAAb;AAC3B,gBAAIwK,OAAO,CAAC0B,IAAR,IAAgB,KAApB,EAA2BzH,aAAa,CAAC+F,OAAO,CAACxK,GAAT,CAAb;AAC5B,WARD;AASAsD,UAAAA,QAAQ,CAAC;AAACC,YAAAA,MAAM,EAAE;AAAT,WAAD,CAAR;AACAuG,UAAAA,eAAe;AAChB,SAhBW,CAAZ;AAiBD,OAlBW,CAAZ,CALmB,CAwBrB;AACD,KA5BD;AA6BD,GArCD;;AAuCA,QAAMkJ,SAAS,GAAG,OAAOxI,OAAP,EAAqBsI,MAArB,KAAsC;AACtD,UAAMM,MAAW,GAAG,MAAMlV,cAAc,CAAC;AACvCmV,MAAAA,SAAS,EAAEP,MAD4B;AAEvCQ,MAAAA,QAAQ,EAAE;AAF6B,KAAD,CAAxC;AAIAvI,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCoI,MAAM,CAACG,QAAP,CAAgB,CAAhB,CAAvC;AACA,UAAM7U,OAAO,GAAG0U,MAAM,CAACG,QAAP,CAAgB,CAAhB,CAAhB;AACA/I,IAAAA,OAAO,CAACxK,GAAR,GAActB,OAAO,CAAC8U,aAAtB;AACA,WAAOhJ,OAAO,CAACxK,GAAf;AACD,GATD;;AAWA,QAAMyT,eAAe,GAAG,MAAOvH,IAAP,IAAgB;AACtCtN,IAAAA,OAAO,CACJ6L,SADH,CACa/L,OADb,EAEG8N,WAFH,CAEe,gBAAgBlM,OAF/B,EAGGqL,IAHH,CAGSc,SAAD,IAAe;AAEnB1B,MAAAA,OAAO,CAACC,GAAR,CAAY,kEAAZ,EAAgFyB,SAAhF;AACA1B,MAAAA,OAAO,CAACC,GAAR,CAAYkB,IAAI,CAACpE,IAAjB,EAAuBoE,IAAI,CAACA,IAA5B,EAAkCA,IAAI,CAAC1B,OAAvC;AACAkJ,MAAAA,SAAS,CAACpT,OAAD,EAAU4L,IAAI,CAACA,IAAf,EAAqBA,IAAI,CAAC1B,OAA1B,EAAmC0B,IAAI,CAACpE,IAAxC,EAA8C2E,SAA9C,EAAyD,MAAI;AACpE1B,QAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACD,OAFQ,CAAT;AAGD,KAVH;AAWD,GAZD;;AAcA,WAAS0I,SAAT,CAAmBpT,OAAnB,EAA4B4L,IAA5B,EAAkC1B,OAAlC,EAA2C1C,IAA3C,EAAiD2E,SAAjD,EAA4D3B,EAA5D,EAAgE;AAC9DI,IAAAA,KAAK,CAAC5N,UAAU,GAAG,QAAb,GAAsBgD,OAAvB,EAAgC;AACnC6K,MAAAA,MAAM,EAAE,MAD2B;AAEnCC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,OAAO,EAAE,YAFF;AAGPC,QAAAA,OAAO,EAAE3M,OAAO,CAAC4M,QAAR;AAHF,OAF0B;AAOnCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB,gBAAQQ,IAAI,GAAEA,IAAF,GAAQ,IADD;AAEnB,mBAAW1B,OAAO,GAAEA,OAAF,GAAW,IAFV;AAGnB,gBAAQ1C,IAAI,GAAEA,IAAF,GAAQ,IAHD;AAInB,qBAAa2E,SAAS,GAAEA,SAAF,GAAa;AAJhB,OAAf;AAP6B,KAAhC,CAAL,CAaGd,IAbH,CAaQ,gBAAgBC,QAAhB,EAA0B;AAChC,UAAIC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAjB;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBa,IAAvB;AACAyB,MAAAA,cAAc,CAAC,EAAD,EAAKhN,OAAL,EAAeiN,MAAD,IAAU;AACpCzL,QAAAA,cAAc,CAACyL,MAAD,CAAd;AACA,eAAOzC,EAAE,EAAT;AACD,OAHa,CAAd;AAID,KApBD;AAqBD;;AAED,QAAM6I,iBAAiB,GAAG,MAAOzH,IAAP,IAAwB;AAChDtN,IAAAA,OAAO,CACJ6L,SADH,CACa/L,OADb,EAEG8N,WAFH,CAEe,cAAclM,OAF7B,EAGGqL,IAHH,CAGSc,SAAD,IAAe;AACnBwE,MAAAA,UAAU,CAACxE,SAAD,EAAYnM,OAAZ,EAAqB4L,IAArB,EAA4B0H,MAAD,IAAY;AAC/C7F,QAAAA,QAAQ;AACT,OAFS,CAAV;AAGD,KAPH;AAQD,GATD;;AAWA,QAAM8F,gBAAgB,GAAG,YAAY;AACnCjV,IAAAA,OAAO,CACJ6L,SADH,CACa/L,OADb,EAEG8N,WAFH,CAEe,YAAYlM,OAF3B,EAGGqL,IAHH,CAGSc,SAAD,IAAe;AACnByE,MAAAA,YAAY,CAACzE,SAAD,EAAYnM,OAAZ,EAAsBsT,MAAD,IAAY;AAC3ClS,QAAAA,aAAa,CAACkS,MAAM,CAACjS,UAAR,CAAb;AACD,OAFW,CAAZ;AAGD,KAPH;AAQD,GATD;;AAWA,QAAMmS,WAAW,GAAG,YAAY;AAC9B,QAAI7L,cAAc,CAACtJ,OAAD,CAAlB,EAA6B;AAC3B;AACA;AACAmK,MAAAA,oBAAoB,CAACiL,KAArB,CAA2B9L,cAAc,CAACtJ,OAAD,CAAzC,EAAoDsJ,cAAc,CAAC3H,OAAnE,EAA4EqL,IAA5E,CAAiF,CAAC;AAAE5I,QAAAA;AAAF,OAAD,KAAgC;AAC/Gc,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAuI,QAAAA,UAAU,CAAC,MAAM;AACfpJ,UAAAA,OAAO,CAACD,IAAD,CAAP;AACD,SAFS,EAEP,GAFO,CAAV,CAF+G,CAIvG;AACT,OALD;AAMD,KATD,MASO;AACLkG,MAAAA,cAAc,CAAC+K,IAAf,CAAoB1T,OAApB,EAA6BqL,IAA7B,CAAkC,CAAC;AAAE5I,QAAAA;AAAF,OAAD,KAAgC;AAChEc,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAuI,QAAAA,UAAU,CAAC,MAAM;AACfpJ,UAAAA,OAAO,CAACD,IAAD,CAAP;AACD,SAFS,EAEP,GAFO,CAAV,CAFgE,CAIxD;AACT,OALD;AAMD;AACF,GAlBD;;AAoBA,QAAMkR,aAAa,GAAInJ,EAAD,IAAM;AAC1BI,IAAAA,KAAK,CAAC5N,UAAU,GAAG,8BAAb,GAA4CqB,OAAO,CAAC4M,QAAR,EAA5C,GAA+D,oBAAhE,EAAsF;AACzFJ,MAAAA,MAAM,EAAE,KADiF;AAEzFC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,OAAO,EAAE;AAFF;AAFgF,KAAtF,CAAL,CAMGM,IANH,CAMQ,gBAAgBC,QAAhB,EAA0B;AAChC,UAAIC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAjB;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBa,IAAzB;AACA,aAAOf,EAAE,EAAT;AACD,KAVD;AAWD,GAZD;;AAcA,QAAMoJ,kBAAkB,GAAG,YAAY;AACrC,QAAIlP,sBAAJ,EAA4B;AAC1B;AACD;;AACDC,IAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACA,QAAIkP,UAAU,GAAG,4BAAjB,CALqC,CAKS;;AAC9C,QAAIC,IAAI,GAAG,YAAX,CANqC,CAMb;;AACxB,QAAIC,KAAK,GAAG,CAAZ,CAPqC,CAOvB;;AACd,QAAIC,SAAS,GAAG,CAAhB,CARqC,CAQnB;;AAElB,QAAIC,IAAI,GAAGH,IAAI,CAACzG,MAAhB;AACA,QAAI6G,EAAE,GAAG,CAAT;AACA,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,KAAK,GAAG,EAAZ;;AACC,KAAC,SAASC,MAAT,CAAgBC,CAAhB,EAAmB;AACnBzI,MAAAA,UAAU,CAAC,YAAY;AACrB,YAAI,EAAEyI,CAAN,EAAS;AACPD,UAAAA,MAAM,CAACC,CAAD,CAAN;AACD,SAFD,MAEO;AACL5P,UAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACD;;AACD6P,QAAAA,SAAS,CAACD,CAAD,CAAT;AACAL,QAAAA,EAAE,GAAGA,EAAE,GAAG,CAAV;AACD,OARS,EAQPH,KARO,CAAV;AASD,KAVA,EAUEE,IAAI,GAAGD,SAAP,GAAmB,CAVrB;;AAWD,aAASQ,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,WAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,GAAGE,IAA3B,EAAiCI,CAAC,EAAlC,EAAsC;AACpC;AACA,YAAIG,GAAG,GAAG1D,IAAI,CAAC2D,KAAL,CAAWd,UAAU,CAACxG,MAAX,GAAoB2D,IAAI,CAAC4D,MAAL,EAA/B,CAAV,CAFoC,CAGpC;;AACA,YAAIC,MAAM,GAAGhB,UAAU,CAACiB,MAAX,CAAkBJ,GAAlB,CAAb;AACAN,QAAAA,KAAK,GAAGA,KAAK,GAAGS,MAAhB;AACD;;AACD,UAAIX,EAAE,IAAIF,SAAS,GAAG,CAAtB,EAAyB;AACvBG,QAAAA,IAAI;AACL;;AACD,UAAID,EAAE,IAAIF,SAAV,EAAqB;AACnB;AACA;AACAK,QAAAA,KAAK,GAAGA,KAAK,GAAGP,IAAI,CAACgB,MAAL,CAAYX,IAAI,GAAG,CAAnB,CAAhB;AACAD,QAAAA,EAAE,GAAG,CAAL;AACD,OAhBqB,CAiBtB;;;AACAzP,MAAAA,kBAAkB,CAAC4P,KAAK,GAAGD,KAAT,CAAlB;AACAA,MAAAA,KAAK,GAAG,EAAR;AACD;AACF,GA/CD;;AAiDA5X,EAAAA,SAAS,CAAC,MAAM;AACdiO,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA+C,IAAAA,QAAQ;AACT,GAHQ,EAGN,EAHM,CAAT;AAKAjR,EAAAA,SAAS,CAAC,MAAM;AACb4B,IAAAA,OAAO,IAAIC,OAAX,IAAsBgE,YAAtB,IAAsChE,OAAO,IAAIgE,YAAlD,IAAqE9D,KAAK,CAAC8B,QAAN,IAAkB9B,KAAK,CAAC8B,QAAN,IAAkB,MAArC,IAAiD9B,KAAK,CAACgC,aAAN,IAAuBhC,KAAK,CAACgC,aAAN,IAAuB,MAAnK,GAA8KsQ,iBAAiB,EAA/L,GAAoM,IAApM;AACD,GAFQ,CAAT;;AAIA,WAASkE,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,QAAIC,IAAI,GAAGD,KAAK,GAAEA,KAAK,CAAC1I,KAAN,CAAY,UAAZ,CAAF,GAA2B,CAAC,GAAD,CAA3C;AACA,WAAO2I,IAAI,CAAC,CAAD,CAAJ,CAAQC,IAAR,EAAP;AACD;;AAED,WAASC,UAAT,CAAoBzV,GAApB,EAAyB;AACvB,QAAIkF,eAAJ,EAAqB;AACnBlF,MAAAA,GAAG,GAAGkF,eAAN;AACD;;AACDgP,IAAAA,kBAAkB;AAClBnJ,IAAAA,OAAO,CAACC,GAAR,CAAY3I,cAAZ;AACA,QAAIqT,UAAU,GAAGrT,cAAc,CAAC,CAAD,CAAd,CAAkBmI,OAAlB,CAA0BmL,OAA1B,CAAkC,UAAlC,EAA8C,EAA9C,CAAjB;;AACA,QAAI;AACF,UAAIpD,KAAK,GAAG5U,QAAQ,CAAC6U,GAAT,CAAaC,OAAb,CAAqBiD,UAArB,EAAiC1V,GAAjC,CAAZ;AACAyL,MAAAA,IAAI,CAACkH,KAAL,CAAWJ,KAAK,CAAChH,QAAN,CAAe5N,QAAQ,CAACiV,GAAT,CAAaC,IAA5B,CAAX;AACArQ,MAAAA,eAAe,CAAC,KAAD,CAAf;AACA2C,MAAAA,kBAAkB,CAACnF,GAAD,CAAlB;AACAsC,MAAAA,iBAAiB,CAACsT,gBAAgB,CAAC5V,GAAD,CAAjB,CAAjB;AACA,UAAIqP,UAAU,GAAGhN,cAAc,CAAC4J,MAAf,CAAuBwC,IAAD,IAAU;AAAC,eAAOA,IAAI,CAACvC,IAAL,KAAc,KAArB;AAA2B,OAA5D,EAA8D,CAA9D,EAAiE1B,OAAlF;AACA,UAAI8E,UAAU,GAAGjN,cAAc,CAAC4J,MAAf,CAAuBwC,IAAD,IAAU;AAAC,eAAOA,IAAI,CAACvC,IAAL,KAAc,KAArB;AAA2B,OAA5D,EAA8D,CAA9D,EAAiE1B,OAAlF;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB3I,cAAvB;AACA+M,MAAAA,uBAAuB,CAAC,EAAD,EAAKC,UAAL,EAAiBC,UAAjB,EAA8B/B,MAAD,IAAU;AAC5DzL,QAAAA,cAAc,CAACyL,MAAD,CAAd;AACD,OAFsB,CAAvB,CATE,CAYF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KArCD,CAqCE,OAAOsE,GAAP,EAAY;AAAC9G,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmB6G,GAAnB;AAAwB;AACxC;;AAED,WAASgE,YAAT,GAAwB;AACtB9K,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,WAAO3I,cAAP;AACD;;AAED,WAASuT,gBAAT,CAA0B5V,GAA1B,EAA+B;AAC7BqC,IAAAA,cAAc,CAAC0Q,OAAf,CAAwBtE,IAAD,IAAU;AAC/B,UAAIA,IAAI,CAACjE,OAAL,CAAa0D,QAAb,CAAsB,SAAtB,CAAJ,EAAsC;AACpC,YAAI4H,UAAU,GAAGrH,IAAI,CAACjE,OAAL,CAAamL,OAAb,CAAqB,UAArB,EAAiC,EAAjC,CAAjB;AACAlH,QAAAA,IAAI,CAACjE,OAAL,GAAeiI,OAAO,CAACqD,UAAD,EAAa9V,GAAb,CAAtB;AACD;AACF,KALD;AAMA,WAAOqC,cAAP;AACD;;AAED,WAASoQ,OAAT,CAAiBqD,UAAjB,EAA6B9V,GAA7B,EAAkC;AAChC,QAAIuS,KAAK,GAAG5U,QAAQ,CAAC6U,GAAT,CAAaC,OAAb,CAAqBqD,UAArB,EAAiC9V,GAAjC,CAAZ;AACA,QAAI+V,aAAa,GAAGtK,IAAI,CAACkH,KAAL,CAAWJ,KAAK,CAAChH,QAAN,CAAe5N,QAAQ,CAACiV,GAAT,CAAaC,IAA5B,CAAX,CAApB;AACA,WAAOkD,aAAP;AACD;;AAED,WAASC,gBAAT,GAA4B;AAC1B/C,IAAAA,MAAM,CAACgD,IAAP,CACE,cACCtT,YAAY,IAAI,CAAhB,GAAoB,UAApB,GAAiCA,YAAY,IAAI,CAAhB,GAAoB,WAApB,GAAiC,EADnE,IAEA,oBAFA,IAGCA,YAAY,IAAI,GAAhB,GAAsB,QAAtB,GAAiCA,YAAY,IAAI,CAAhB,GAAoB,SAApB,GAA+B,EAHjE,KAIC+E,wBAAwB,GAAEA,wBAAF,GAA6BO,cAAc,CAACtJ,OAAD,CAAd,GAAyBsJ,cAAc,CAACtJ,OAAD,CAAvC,GAAkDpB,iBAAiB,CAAC2L,WAAlB,CAA8BvG,YAA9B,CAJxG,IAKA,GALA,IAMCsF,cAAc,GAAEA,cAAc,CAAC3H,OAAjB,GAA0BA,OANzC,CADF,EAQE,QARF;AASD;;AAED,WAAS4V,kBAAT,GAA8B;AAC5BjD,IAAAA,MAAM,CAACgD,IAAP,CACE,cACCtT,YAAY,IAAI,CAAhB,GAAoB,UAApB,GAAgCA,YAAY,IAAI,CAAhB,GAAoB,SAApB,GAAgC,EADjE,IAEA,4BAFA,IAGCA,YAAY,IAAI,GAAhB,GAAsB,QAAtB,GAAiC,EAHlC,KAIC+E,wBAAwB,GAAEA,wBAAF,GAA6BO,cAAc,GAAEA,cAAc,CAACtJ,OAAD,CAAhB,GAA2BpB,iBAAiB,CAAC2L,WAAlB,CAA8BvG,YAA9B,CAJ/F,IAKA,GALA,IAMCsF,cAAc,GAAEA,cAAc,CAAC3H,OAAjB,GAA0BA,OANzC,CADF,EAQE,QARF;AASD;;AAED;AAAEoH,IAAAA,wBAAwB,GACxBuB,cAAc,GAAGsB,gBAAgB,CAAC7C,wBAAwB,GAAEA,wBAAF,GAA4B,IAArD,CADT,GAExB,IAFA;AAEK;AACP,SACE,4BACG,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAM,IAAA,IAAI,EAAC,cAAX;AAA0B,IAAA,OAAO,EAAC,qBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAEC;AAAM,IAAA,IAAI,EAAC,cAAX;AAA0B,IAAA,OAAO,EAAC,gBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,EAGC;AAAM,IAAA,IAAI,EAAC,eAAX;AAA2B,IAAA,OAAO,EAAE3G,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHD,EAIC;AAAM,IAAA,IAAI,EAAC,qBAAX;AAAiC,IAAA,OAAO,EAAEsU,gBAAgB,CAAC9T,SAAD,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJD,EAKC;AAAM,IAAA,IAAI,EAAC,eAAX;AAA2B,IAAA,OAAO,EAAEE,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALD,EAMC;AACI,IAAA,uBAAuB,EAAE;AACvB0U,MAAAA,MAAM,EAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVqC,KAD7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAND,CADH,EAsBE,MAAC,SAAD;AAAW,IAAA,MAAM,EAAE3M,eAAnB;AAAoC,IAAA,OAAO,EAAEI,gBAA7C;AAA+D,IAAA,QAAQ,EAAE3G,QAAzE;AAAmF,IAAA,QAAQ,EAAEE,QAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBF,EAwBE,MAAC,SAAD;AACE,IAAA,MAAM,EAAE0G,eADV;AAEE,IAAA,OAAO,EAAEE,gBAFX;AAGE,IAAA,QAAQ,EAAE3F,QAHZ;AAIE,IAAA,UAAU,EAAEE,UAJd;AAKE,IAAA,UAAU,EAAEE,UALd;AAME,IAAA,UAAU,EAAEE,UANd;AAOE,IAAA,SAAS,EAAErC,cAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBF,EAiCGpC,SAAS,GACR,MAAC,UAAD;AACE,IAAA,MAAM,EAAE+J,gBADV;AAEE,IAAA,OAAO,EAAEE,iBAFX;AAGE,IAAA,OAAO,EAAE5J,OAHX;AAIE,IAAA,IAAI,EAAEkD,IAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADQ,GAON,IAxCN,EA2CE,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAEH,KAAK,CAACE,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,MAAM,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGqB,UAAU,GAAG,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAoB,EAFjC,EAGG,CAACQ,YAAD,IAAiB,CAACvE,aAAlB,GACG,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAC,QAAzB;AAAkC,IAAA,cAAc,EAAC,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AACE,IAAA,SAAS,EAAC,KADZ;AAEE,IAAA,IAAI,EAAC,IAFP;AAGE,IAAA,WAAW,EAAC,KAHd;AAIE,IAAA,WAAW,EAAE8B,YAAY,IAAIhE,OAAhB,GAA0B,YAA1B,GAAyCmF,MAAM,IAAI,SAAV,GAAsB,WAAtB,GAAoC,IAJ5F;AAKE,IAAA,OAAO,EAAC,IALV;AAME,IAAA,QAAQ,EAAC,QANX;AAOE,IAAA,UAAU,EAAC,QAPb;AAQE,IAAA,IAAI,EAAE,GARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWE,MAAC,GAAD;AACE,IAAA,EAAE,EAAC,GADL;AAEE,IAAA,UAAU,EAAC,UAFb;AAGE,IAAA,EAAE,EAAC,IAHL;AAIE,IAAA,UAAU,EAAC,OAJb;AAKE,IAAA,CAAC,EAAE,CALL;AAME,IAAA,SAAS,EAAC,QANZ;AAOE,IAAA,aAAa,EAAC,WAPhB;AAQE,IAAA,UAAU,EAAC,QARb;AASE,IAAA,KAAK,EAAC,UATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAWkBpG,cAAc,CAACiF,YAAD,CAXhC,CAXF,EAwCE,MAAC,GAAD;AACE,IAAA,EAAE,EAAC,GADL;AAEE,IAAA,UAAU,EAAC,UAFb;AAGE,IAAA,EAAE,EAAC,IAHL;AAIE,IAAA,UAAU,EAAC,OAJb;AAKE,IAAA,CAAC,EAAE,CALL;AAME,IAAA,SAAS,EAAC,QANZ,CAOE;AAPF;AAQE,IAAA,UAAU,EAAC,QARb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUG5B,SAVH,EAWG,CAACwB,YAAD,IAAiBE,eAAe,GAAG,CAAnC,GAAuC,SAASA,eAAe,CAAC2T,cAAhB,EAAhD,GAAmF,IAXtF,CAxCF,EAqDE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,aAAjB;AAA+B,IAAA,KAAK,EAAC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,yBAAjB;AAA2C,IAAA,GAAG,EAAE3U,UAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAQG+B,IAAI,IAAI7B,UAAR,GACC,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAM;AAACkS,MAAAA,gBAAgB;AAAG,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADD,GAEE,IAVL,CArDF,EAiEE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,GAAR;AAAY,IAAA,EAAE,EAAC,GAAf;AAAmB,IAAA,UAAU,EAAC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,CAAC/U,eAAD,IAAoB6D,YAAY,IAAIhE,OAApC,GACA,MAAC,IAAD;AAAM,IAAA,IAAI,EAAE,sBAAoB6H,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACUA,KADV,CADA,GAIE,IALJ,CADF,EAQE,MAAC,IAAD;AAAM,IAAA,EAAE,EAAE,CAAV;AAAa,IAAA,EAAE,EAAC,IAAhB;AAAqB,IAAA,EAAE,EAAC,GAAxB;AAA4B,IAAA,EAAE,EAAC,GAA/B;AAAmC,IAAA,QAAQ,EAAC,IAA5C;AAAiD,IAAA,SAAS,EAAC,QAA3D;AAAoE,IAAA,SAAS,EAAC,IAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AAAe,IAAA,OAAO,EAAE,CAAC3I,GAAD,CAAxB;AAA+B,IAAA,QAAQ,EAAEwX,gBAAgB,CAAC9T,SAAD,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CARF,CADF,CADF,CAjEF,EAkFE,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACzC,eAAD,GACC,MAAC,IAAD;AAAM,IAAA,QAAQ,MAAd;AAAe,IAAA,OAAO,EAAC,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAS,IAAA,EAAE,EAAC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,CADF,EAKE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGyD,YAAY,GACX,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,EAAE,EAAE,CAAV;AAAa,IAAA,KAAK,EAAEuC,eAAe,GAAG,WAAH,GAAiB,IAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,eAAe,GAAGA,eAAH,GAAqB,4CADvC,CADF,EAIE,MAAC,KAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,EAAE,EAAC,gBAFL;AAGE,IAAA,QAAQ,EAAGuR,CAAD,IAAOZ,UAAU,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV,CAH7B;AAIE,wBAAiB,sBAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADW,GAaX,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,eAAe,EAAEjM,SAAS,IAAI,OAAb,GAAsB,UAAtB,GAAkC,UAAjE;AAA6E,IAAA,UAAU,EAAC,UAAxF;AAAmG,IAAA,SAAS,EAAC,sBAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,KAAK,EAAC,UAAX;AAAsB,IAAA,aAAa,EAAC,MAApC;AAA2C,IAAA,QAAQ,EAAC,IAApD;AAAyD,IAAA,EAAE,EAAC,GAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,EAAE,EAAC,IAAT;AAAc,IAAA,EAAE,EAAE,CAAlB;AAAqB,IAAA,UAAU,EAAC,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAEqB;AACnB,IAAA,OAAO,EAAE,MAAK;AACZ6E,MAAAA,kBAAkB,CAAC,EAAD,EAAK7O,OAAL,EAAekW,CAAD,IAAK;AACnCxU,QAAAA,eAAe,CAAC,KAAD,CAAf;AACAF,QAAAA,cAAc,CAAC0U,CAAD,CAAd;AACD,OAHiB,CAAlB;AAID,KANkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFrB,CADF,EAYE,MAAC,IAAD;AAAM,IAAA,EAAE,EAAC,GAAT;AAAa,IAAA,KAAK,EAAElM,SAAS,IAAE,MAAX,GAAmB,YAAnB,GAAiC,aAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAsEmH,MAAM,CAAChP,eAAe,CAACgU,OAAhB,CAAwB,CAAxB,CAAD,CAAN,CAAmCL,cAAnC,EAAtE,CAZF,EAaIvU,WAAW,CAAC8L,MAAZ,GACA9L,WAAW,CAAC6U,GAAZ,CAAiBxK,IAAD,IAAU;AACxB,WACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,WAAD;AAAa,MAAA,SAAS,EAAE5B,SAAxB;AAAmC,MAAA,IAAI,EAAE4B,IAAzC;AAA+C,MAAA,IAAI,EAAGpI,MAAM,KAAK,SAAX,IAAwBI,SAAS,KAAKxF,OAAvC,IAAmD8E,IAAxG;AAA8G,MAAA,OAAO,EAAEwO,OAAvH;AAAgI,MAAA,SAAS,EAAEpK,WAAW,CAACE,IAAZ,GAAkB,KAAlB,GAAyB2L,eAApK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD,GAND,CADA,GAQG,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBP,EAsBIxR,eAAe,CAAC0L,MAAhB,GACA1L,eAAe,CAACyU,GAAhB,CAAqB7K,IAAD,IAAU;AAC5B,WACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAaA,IAAI,CAAC8K,aAAlB,CADF;AAGD,GAJD,CADA,GAME,CAAC1U,eAAe,CAAC0L,MAAjB,IAA2B,CAAC9L,WAAW,CAAC8L,MAAxC,GACF,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADE,GAEA,IA9BN,CADF,CAdJ,CADF,EAmDE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,SAAS,EAAErD,SAAvB;AAAkC,IAAA,UAAU,EAAEnI,UAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAnDF,CALF,CADD,GA8DG,IA/DN,EAiEG,CAACrD,eAAD,IAAoB,CAACyD,YAArB,GACC,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAoC,IAAA,cAAc,EAAC,eAAnD;AAAmE,IAAA,EAAE,EAAC,GAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAa,IAAA,cAAc,EAAC,eAA5B;AAA4C,IAAA,OAAO,EAAE,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE,MAAC,IAAD;AAAM,IAAA,CAAC,EAAC,OAAR;AAAgB,IAAA,OAAO,EAAC,QAAxB;AAAiC,IAAA,QAAQ,EAAC,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,cAAc,CAACqU,GAAf,CAAoBE,IAAD,IAAU;AAC5B,WACE,MAAC,MAAD;AACE,MAAA,SAAS,EAAC,oBADZ;AAGE,MAAA,EAAE,EAAE,CAHN;AAIE,MAAA,EAAE,EAAE,CAJN;AAKE,qBAAY,gBALd;AAME,MAAA,GAAG,EAAEA,IAAI,CAACpM,OANZ;AAOE,MAAA,OAAO,EAAE,MAAM;AACbtH,QAAAA,WAAW,CAAC0T,IAAI,CAAC1K,IAAN,CAAX;AACA9I,QAAAA,WAAW,CAACwT,IAAI,CAACpM,OAAN,CAAX;AACAd,QAAAA,eAAe;AAChB,OAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAaGkN,IAAI,CAAC1K,IAAL,IAAa,KAAb,GAAqB0K,IAAI,CAAC1K,IAAL,GAAY,EAAjC,GAAsC0K,IAAI,CAAC1K,IAAL,IAAa,KAAb,GAAqB0K,IAAI,CAAC1K,IAAL,GAAY,WAAjC,GAA+C0K,IAAI,CAAC1K,IAAL,IAAa,KAAb,GAAqB0K,IAAI,CAAC1K,IAAL,GAAY,MAAjC,GAAyC0K,IAAI,CAAC1K,IAbtI,CADF;AAiBD,GAlBA,CADH,CAFF,CADF,CADF,CADD,GA6BG,IA9FN,EAgGGpN,eAAe,IAAK,EAAEgF,MAAM,KAAK,SAAb,KAA2B4C,IAA3B,KAAoC/D,YAAY,KAAK,CAAjB,IAAsBA,YAAY,KAAK,CAAvC,IAA4CA,YAAY,KAAK,CAA7D,IAAkEA,YAAY,KAAK,GAAvH,CAApB,GACC,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAoC,IAAA,cAAc,EAAC,eAAnD;AAAmE,IAAA,EAAE,EAAC,GAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,MAAC,MAAD;AACE,IAAA,SAAS,EAAC,YADZ;AAEE,IAAA,KAAK,EAAC,KAFR;AAGE,IAAA,CAAC,EAAE,CAHL;AAIE,IAAA,OAAO,EAAE,MAAM;AAACqT,MAAAA,gBAAgB;AAAG,KAJrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,EAUI,MAAC,MAAD;AACE,IAAA,SAAS,EAAC,YADZ;AAEE,IAAA,KAAK,EAAC,KAFR;AAGE,IAAA,CAAC,EAAE,CAHL;AAIE,IAAA,OAAO,EAAE,MAAM;AAACE,MAAAA,kBAAkB;AAAG,KAJvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAVJ,EAkBKjW,SAAS,GACR,MAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,EAAlB;AAAqB,IAAA,OAAO,EAAE,MAAM;AAAEgK,MAAAA,gBAAgB;AAAI,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6DzG,IAAI,GAAG,WAAH,GAAmB,eAApF,kBADQ,GAEN,IApBR,CADD,GAyBG,IAzHN,EA0HG,CAAC1E,eAAD,IAAoB0E,IAApB,IAA4B,CAACoC,UAA7B,IAA2C,CAAClG,QAA5C,GAAwD,4BACvD,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAoC,IAAA,cAAc,EAAC,eAAnD;AAAmE,IAAA,EAAE,EAAC,GAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,SAAS,EAAC,YADZ;AAEE,IAAA,KAAK,EAAC,MAFR;AAEe,IAAA,OAAO,EAAE,MAAM;AAC5B,UAAI,CAACA,QAAL,EAAe;AACb,eAAOkO,mBAAmB,EAA1B;AACD;AACF,KAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADuD,CAAxD,GAWM,IArIT,EAuIG,CAAC9O,eAAD,IAAoB4H,IAApB,IAA4B,EAAE5C,MAAM,KAAK,SAAb,CAA5B,IAAuDpF,OAAvD,IAAkEiE,YAAY,KAAKhE,OAAnF,IAA8F6E,IAA9F,IAAsG,CAACQ,MAAvG,IAAiHtE,QAAjH,GACC,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAoC,IAAA,cAAc,EAAC,eAAnD;AAAmE,IAAA,EAAE,EAAC,GAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,KAAK,EAAC,MADR;AAEE,IAAA,OAAO,EAAE,MAAM;AACboU,MAAAA,WAAW;AACZ,KAJH;AAKE,IAAA,UAAU,EAAElQ,QALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGA,QAAQ,GAAG,cAAH,GAAoB,0BAP/B,CADF,CADD,GAYG,IAnJN,EAqJG,CAACpE,eAAD,IAAoB,CAACkG,SAArB,IAAkCsB,EAAE,IAAItI,OAAxC,GACC,MAAC,MAAD;AAAS,IAAA,KAAK,EAAC,MAAf;AAAsB,IAAA,EAAE,EAAE,CAA1B;AAA6B,IAAA,OAAO,EAAEuT,gBAAtC;AAAwD,IAAA,IAAI,EAAC,QAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADD,GAIC,IAzJJ,EA2JG,CAACnT,eAAD,IAAoB,CAAC4H,IAArB,IAA6B,CAAChB,SAA9B,IAA2ClG,eAA3C,IAA8DwH,EAAE,IAAItI,OAApE,IAA+EiE,YAAY,IAAIhE,OAA/F,IAA0GmF,MAAM,KAAK,SAArH,IAAkI,CAACsD,kBAAnI,GACC,4BACIa,cAAc,CAACH,IAAf,GACA,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,MAAd;AAAqB,IAAA,EAAE,EAAE,CAAzB;AAA4B,IAAA,OAAO,EAAE+E,eAArC;AAAsD,IAAA,UAAU,EAAI,CAACxE,cAAD,IAAmBE,iBAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2GA,iBAAiB,GAAE,yCAAF,GAA6C,CAACF,cAAD,GAAiB,2BAAjB,GAA6C,aAAtN,MADA,GAEE,IAHN,CADD,GAMC,IAjKJ,EAmKC,CAAC,CAAC3B,IAAD,IAAS5C,MAAM,IAAI,SAApB,KAAkCkD,EAAE,IAAItI,OAAxC,IAAmDiE,YAAY,IAAIhE,OAAnE,IAA8E,CAACyI,kBAA/E,IAAqGvF,WAAW,CAAC8L,MAAZ,GAAqB,CAA1H,GACC,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,MAAd;AAAqB,IAAA,EAAE,EAAE,CAAzB;AAA4B,IAAA,OAAO,EAAEpB,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADD,GAEG,IArKJ,EAuKE,CAACzN,eAAD,IAAoB6D,YAAY,KAAKhE,OAArC,IAAiDmF,MAAM,IAAI,SAAV,IAAuBI,SAAS,KAAKxF,OAAtF,IAAkGgF,YAAY,IAAII,MAAM,IAAI,SAA7H,GACG,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAoC,IAAA,cAAc,EAAC,eAAnD;AAAmE,IAAA,EAAE,EAAC,GAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,MAAd;AAAqB,IAAA,OAAO,EAAEsO,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG1O,YAAY,IAAII,MAAM,IAAI,SAA1B,IAAuC,CAACyE,iBAAxC,GAA2D,2CAA3D,GAAwG,UAD3G,CADF,CADH,GAMK,IA7KN,EA+KCrB,sBAAsB,GACrB,MAAC,MAAD;AAAQ,IAAA,UAAU,MAAlB;AAAmB,IAAA,IAAI,EAAC,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADqB,GAInB,IAnLJ,EAoLCE,kBAAkB,GACjB,MAAC,MAAD;AAAQ,IAAA,UAAU,MAAlB;AAAmB,IAAA,IAAI,EAAC,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADiB,GAIf,IAxLJ,CAlFF,EA4QG,CAACtI,eAAD,IAAoBmC,SAApB,GACC;AACE,QAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,MAAM,EAAC,KAAb;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAA0B,IAAA,EAAE,EAAE,EAA9B;AAAkC,IAAA,IAAI,EAAE,kCAAgCA,SAAxE;AAAmF,IAAA,UAAU,MAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEGE,cAAc,GACb,MAAC,IAAD;AAAM,IAAA,EAAE,EAAE,CAAV;AAAa,IAAA,IAAI,EAAE,kCAAgCA,cAAnD;AAAmE,IAAA,UAAU,MAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADa,GAEX,IAJN,CAFH,CAQC;AARD,IASG,IArRN,EAsRG6C,MAAM,GACH,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,EAAE,EAAE,CAAlB;AAAqB,IAAA,EAAE,EAAE,EAAzB;AAA6B,IAAA,UAAU,EAAC,UAAxC;AAAmD,IAAA,cAAc,EAAC,eAAlE;AAAkF,IAAA,EAAE,EAAC,GAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADF,CADG,GAID,IA1RR,EA2RE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,QAAjB;AAA0B,IAAA,KAAK,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,MAAM,IAAI,SAAV,GAAsB,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAtB,GAA+D,IADlE,CA3RF,EA8RGf,IAAI,GACH,MAAC,KAAD;AAAO,IAAA,MAAM,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEIyC,SAAS,GAAG,2BAAH,GAAiC5B,QAAQ,GAAG,yBAAH,GAA+B8B,SAAS,GAAE,4BAAF,GAAiCY,WAAW,GAAE,uBAAF,GAA4BgB,OAAO,GAAE,eAAF,GAAoB,0BAFjM,CADG,GAKD,IAnSN,CADF,CADH,GAwSGzF,WAAW,CAAC8L,MAAZ,GAAqB,CAArB,IAA0B9M,aAA1B,GACF,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,aAAjB;AAA+B,IAAA,KAAK,EAAC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIgB,WAAW,CAAC8L,MAAZ,IAAsB9L,WAAW,CAACoK,MAAZ,CAAmBwC,IAAI,IAAG;AAAC,WAAOA,IAAI,CAACoI,IAAL,IAAa,KAApB;AAA0B,GAArD,EAAuDlJ,MAAvD,GAAgE,CAAtF,GACE,MAAC,YAAD;AAAc,IAAA,IAAI,EAAE5M,SAApB;AAA+B,IAAA,KAAK,EAAEc,WAAW,CAAC,CAAD,CAAX,CAAekG,KAArD;AAA4D,IAAA,KAAK,EAAElG,WAAW,CAACoK,MAAZ,CAAmBsK,KAAK,IAAE;AAAC,aAAOA,KAAK,CAACxO,KAAN,KAAgBlG,WAAW,CAAC,CAAD,CAAX,CAAekG,KAAtC;AAA4C,KAAvE,EAAyE2O,GAAzE,CAA6EH,KAAK,IAAE;AAAC,aAAO;AAACxO,QAAAA,KAAK,EAAEwO,KAAK,CAACxO,KAAd;AAAqBuG,QAAAA,WAAW,EAAEiI,KAAK,CAACjI,WAAxC;AAAqDxG,QAAAA,IAAI,EAAEyO,KAAK,CAACzO,IAAjE;AAAuE+O,QAAAA,IAAI,EAAEN,KAAK,CAACM;AAAnF,OAAP;AAAgG,KAArL,CAAnE;AAA2P,IAAA,UAAU,EAAI;AAAC,kBAAY,IAAb;AAAmBC,MAAAA,QAAQ,EAAE;AAA7B,KAAzQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,GAGE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,yBAAjB;AAA2C,IAAA,GAAG,EAAErV,UAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJN,CADE,GASA2D,YAAY,GACd,MAAC,KAAD;AAAO,IAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,KAAK,EAAC,IADR;AAEE,IAAA,GAAG,EAAC,yHAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAC+C,GAD/C,EAEE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,SAAZ;AAAsB,IAAA,IAAI,EAAC,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF,CALF,CADc,GAab,IAjUL,EAkUGrC,IAAI,GACH,MAAC,gBAAD;AACE,IAAA,IAAI,EAAEA,IADR;AAEE,IAAA,UAAU,EAAE,MAAM;AAChB,UAAIa,QAAQ,IAAI,CAAC4B,SAAb,IAA0B,CAACU,cAA/B,EAA+C;AAC7C;AACAlD,QAAAA,OAAO,CAAC,IAAD,CAAP;AACAe,QAAAA,SAAS,CAAC,SAAD,CAAT;AACAF,QAAAA,WAAW,CAAC,KAAD,CAAX;AACAM,QAAAA,YAAY,CAACzF,OAAD,CAAZ;AACAuV,QAAAA,aAAa,CAAC,MAAI;AAChBvH,UAAAA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACqK,MAAT,GAAkB,UAAlB,GAA+BzW,OAA/C;AACD,SAFY,CAAb;AAGD,OATD,MASO,IAAI4F,cAAJ,EAAoB;AACzB;AACAqJ,QAAAA,0BAA0B;AAC1BtJ,QAAAA,uBAAuB,CAAC,IAAD,CAAvB;AACAE,QAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAnD,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OANM,MAMA,IAAGwC,SAAH,EAAc;AACnB;AACAC,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAsI,QAAAA,QAAQ;AACR/K,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OALM,MAKA,IAAG0C,SAAH,EAAc;AACnB;AACAC,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAoI,QAAAA,QAAQ;AACR/K,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OALM,MAKA,IAAGsD,WAAH,EAAgB;AACrB;AACAC,QAAAA,cAAc,CAAC,KAAD,CAAd;AACAwH,QAAAA,QAAQ;AACR/K,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OALM,MAKA,IAAGsE,OAAO,IAAIF,kBAAd,EAAkC;AACvC;AACA;AACE2D,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAzD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAvE,QAAAA,OAAO,CAAC,IAAD,CAAP,CALqC,CAMrC;;AACAqE,QAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAqF,QAAAA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACqK,MAAT,GAAkB,WAAlB,GAAgCzW,OAAhD,CARqC,CASvC;AACD,OAVM,MAUA;AACL;AACAoM,QAAAA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACqK,MAAT,GAAkB,WAAlB,GAAgCzW,OAAhD;AACAyK,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B1D,OAA3B;AACAyD,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BpH,QAA5B;AACAmH,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BxF,SAA7B;AACAuF,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC9E,cAAlC;AACA6E,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BtF,SAA7B;AACAqF,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;AACF,KArDH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,GAwDD,IA1XN,EA2XE,MAAC,GAAD;AAAK,IAAA,MAAM,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3XF,CA3CF,CADF;AA2aD","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n  Tooltip,\n  Collapse,\n  FormControl,\n  FormLabel,\n  useColorMode,\n  IconButton,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanel,\n  TabPanels\n} from '@chakra-ui/core'\n\nimport {HStack, VStack, Circle } from '@chakra-ui/react'\n// import TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { isETHAddress, validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses, SIG_API } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\nimport { CHAIN_ID_NAMES } from '../utils'\nimport CryptoJS from 'crypto-js'\nimport { addTokenToWallet, addMany } from '../public/web3'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport Embed from './Embed'\nimport NFTSlideshow from './embed/NFTSlideshow'\nimport CoinBalance from './partials/CoinBalance'\nimport { chakra } from '@chakra-ui/system'\nimport transakSDK from '@transak/transak-sdk'\nimport Attributes from './partials/Attributes';\nimport { getStxAddress, generateWallet } from '@stacks/wallet-sdk';\nimport FetchNodeDetails from \"@toruslabs/fetch-node-details\"\nimport TorusUtils from \"@toruslabs/torus.js\"\n\nconst API_VERSION = '/v2'\n\ndeclare global {\n  interface Window { phraseToKey: any, phrasePathToKey: any }\n}\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\nconst OfferModal = dynamic(() => import('./OfferModal'))\n\nexport default function Nft2() {\n  \n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [isCuratedMaster, setIsCuratedMaster] = useState(false)\n  const [decimals, setDecimals] = useState(null)\n  const [allowance, setAllowance] = useState(null)\n  const [balance, setBalance] = useState(null)\n  const [price, setPrice] = useState(null)\n  const [isCovalApproved, setIsCovalApproved] = useState(false)\n  const [approved, setApproved] = useState(false)\n  const [useOldMint, setUseOldMint] = useState(query.useOldMint)\n  const [mintPassword, setMintPassword] = useState(query.key)\n  const [showOffer, setShowOffer] = useState(query.offer || false)\n  const [framed, setFramed] = useState(query.framed || true)\n  const [tokenId, setTokenId] = useState(query.id)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [noLayout, setNoLayout] = useState(query.noLayout)\n  const [slideshowOnly, setSlideshowOnly] = useState(query.slideshowOnly || false)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultIPFS, setVaultIPFS] = useState('')\n  const [vaultImageIPFS, setVaultImageIPFS] = useState('')\n  const [vaultCiphertextV2, setVaultCiphertextV2] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [ownedImage, setOwnedImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [loadedValues, setLoadedValues] = useState(false)\n  const [vaultDataValues, setVaultDataValues] = useState([])\n  const [attributes, setAttributes] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [vaultChain, setVaultChain] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [mineUnMinted, setMineUnMinted] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [sealed, setSealed] = useState(false)\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [privValues, setKeyValues] = useState([])\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [hasCheckedNft, setHasCheckedNft] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n  const [preTransfering, setPreTransfering] = useState(false)\n  const [transferToAddress, setTransferToAddress] = useState(null)\n  const [transfering, setTransfering] = useState(false)\n  const [owner, setOwner] = useState(null)\n  // const [torus, setTorus] = useState(initTorus())\n  const [live, setLive] = useState(false)\n  const [nonce, setNonce] = useState(null)\n  const [mintSignature, setMintSignature] = useState(null)\n  const [to, setTo] = useState(null)\n  const [showVerifyingSignature, setShowVerifyingSignature] = useState(false)\n  const [showMakingVaultMsg, setShowMakingVaultMsg] = useState(false)\n  const [minting, setMinting] = useState(false)\n  const [isCrowdSale, setIsCrowdSale] = useState(false)\n  const [alternateContractAddress, setAlternateContractAddress] = useState(null)\n  const [targetAsset, setTargetAsset] = useState({name: '', image: '', metadata: ''})\n  const [targetContract, setTargetContract] = useState({name: '', chain: '', 4: '', 1: '', tokenId: {}, serialNumber: {'hex':''} })\n  const [canCuratedMint, setCanCuratedMint] = useState(false)\n  const [mintLockedForever, setMintLockedForever] = useState(false)\n\n  const [curatedMintingParameters, setCuratedMintingParameters] = useState({})\n  \n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n  let emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n  let covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true)\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n  const { isOpen: isOpenOfferModal, onOpen: onOpenOfferModal, onClose: onCloseOfferModal } = useDisclosure()\n  const { isOpen, onToggle } = useDisclosure()\n  const { isOpen: isManageAddressOpen, onToggle: onManageAddressToggle } = useDisclosure()\n\n  const { colorMode } = useColorMode()\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  const getVaultContract = (address = null) =>{\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  const getCuratedContract = (address = null) =>{\n    return new Contract(address, contractAddresses.erc1155Abi, library.getSigner(account).connectUnchecked())\n  }\n\n  const checkLiveliness = (tokenId, targetContract, cb)=>{\n    console.log(\"check liveliness next\", targetContract )\n    let endpoint = targetContract.name ? EMBLEM_API + API_VERSION + '/liveliness-curated' : EMBLEM_API + '/liveliness'\n    fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({tokenId: tokenId}),\n    }).then(async function (response) {\n      let data = await response.json()\n      setLive(data.live)\n      console.log(\"Liveliness check\", data)\n    })\n    return cb(false)\n  }\n\n  const delayedMint = () => {\n    // setCreating(true)\n      console.log(\"Delayed Minting\")\n      setShowVerifyingSignature(false)\n      setShowMakingVaultMsg(true)\n      setMinting(true)\n      console.log('---------@@@@@------', contractAddresses.vaultHandler[chainId])\n      let cipherTextHash = vaultAddresses.filter(address=>{ return address.coin == \"ETH\"})[0].address\n      ;(handlerContract as Contract)\n      .buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n          setShowMakingVaultMsg(false)\n          \n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n          setShowMakingVaultMsg(false)\n          // setMinting(false)\n      })    \n  }\n\n  const deleteVault = () =>{\n    library.getSigner(account)\n      .signMessage('Delete: ' + tokenId)\n      .then((signature) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_API + API_VERSION + '/delete', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata'\n          },\n          body: JSON.stringify({tokenId: tokenId, signature: signature, chainId: chainId.toString()}),\n        }).then(async function (response){\n          let data = await response.json()\n          location.href = location.href.split(\"/\")[0] + \"/vaults\"\n        })\n      })\n  }\n\n  const lazyMintCurated = () =>{\n    library.getSigner(account)\n      .signMessage('Curated Minting: ' + tokenId)\n      .then((signature) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_API + API_VERSION + '/mint-curated', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata'\n          },\n          body: JSON.stringify({tokenId: tokenId, signature: signature, chainId: chainId.toString()}),\n        }).then(async function (response){\n          let data = await response.json()\n          console.log(\"WTFFFFF\")\n          console.log(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1)\n          setCuratedMintingParameters(data)\n          ;(vaultHandlerContract as Contract)\n            .buyWithSignedPrice(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1)\n            .then(({ hash }: { hash: string }) => {\n              setTimeout(() => {\n                setHash(hash)\n                setShowMakingVaultMsg(true)\n                setMinting(true)\n              }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n            })\n            .catch((error: ErrorWithCode) => {\n              console.log('ERROR', error)\n                setShowMakingVaultMsg(false)\n                setMinting(false)\n            })\n          \n        })\n      })\n  }\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {\n      return cb(jsonData.balances)\n    } else {\n      return cb(values)\n    }\n  }\n\n  const handleApproveForall = () => {\n    setApproving(true)\n    if (targetContract.name) {\n      emblemContract = getCuratedContract(targetContract[chainId])\n      emblemContract.setApprovalForAll(contractAddresses.vaultHandlerV8[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n        }\n      })\n    } else {\n      (emblemContract as Contract)\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n        }\n      })\n    }\n  }\n\n  const getVault = async () => {\n    console.log('getvault')\n    const responce = await fetch(EMBLEM_API + API_VERSION + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    if (jsonData.collectionAddress){\n      setIsCrowdSale(true)\n      setAlternateContractAddress(jsonData.collectionAddress)\n    }\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      console.log(\"--------------- states -\", jsonData)\n      setStates(jsonData)\n      setLoadingApi(false)\n      setInvalidVault(false)\n    }\n  }\n\n  const setStates = (jsonData) => {\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\"+framed : null\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2)\n      console.log(\"ciphertextV2\", jsonData.ciphertextV2)\n    }\n    setMintLockedForever(jsonData.mintLocked && jsonData.mintLockBlock == 0)\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setOwnedImage(jsonData.ownedImage || null)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)): null\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(item=>{return item.trait_type === \"key\"})): null\n    jsonData.attributes ? setAttributes(jsonData.attributes): null\n    setVaultAddresses(jsonData.addresses)\n    setVaultIPFS(jsonData.ipfs || null)\n    setVaultImageIPFS(jsonData.image_ipfs || null)\n    jsonData.targetContract && jsonData.targetContract.tokenId == tokenId? setIsCuratedMaster(true): null\n    jsonData.targetAsset? setTargetAsset(jsonData.targetAsset) : null\n    jsonData.targetContract? setTargetContract(jsonData.targetContract) : null\n    jsonData.values && jsonData.targetAsset && jsonData.values.filter(item=>{\n      return item.coin.toLowerCase() == jsonData.targetContract.chain && \n      item.name == jsonData.targetAsset.name && \n      item.project == jsonData.targetContract.name\n    }).length > 0 ? setCanCuratedMint(true): null\n \n    setLive(jsonData.live == false ? false : true)\n    \n    setNonce(jsonData.nonce)\n    setMintSignature(jsonData.signature)\n    setTo(jsonData.to)\n    setVaultChain(jsonData.network)\n    setVaultChainId(\n      jsonData.network == 'mainnet' ? 1 : \n      jsonData.network == \"rinkeby\" ? 4 : \n      jsonData.network == \"goerli\" ? 5 : \n      jsonData.network == \"mumbai\" ? 80001 : \n      jsonData.network == \"matic\" ? 137 : \n      jsonData.network == \"xdai\" ? 100 : \n      jsonData.network == \"bsc\" ? 56 : \n      jsonData.network == \"fantom\" ? 250 : \n      jsonData.network == \"bitcoin\" ? 0 : \n      jsonData.network == \"aurora\" ? 1313161554 : \n      97\n    )\n    if (!jsonData.live) {\n      console.log(\"check liveliness start\")\n      checkLiveliness(tokenId, jsonData.targetContract, (isLive)=>{\n        setLive(isLive)\n      })\n    }\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    \n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)    \n    if (jsonData.sealed) {\n      setSealed(true)\n    } else {\n      setSealed(false)\n    }\n  }\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    if (loadedValues) {\n      return cb(false)\n    }\n    setLoadedValues(true)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true' , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword) // Save new state for later\n  }\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword')\n    storedPw && acceptable ? setMintPassword(storedPw) : null //setMintPassword(null)\n  }\n\n  const getSignedJWT = async (signature, tokenId, cb)=>{\n    var myHeaders = new Headers()\n    myHeaders.append('chainid', chainId.toString())\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, tokenId: tokenId })\n    const responce = await fetch(SIG_API+'/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  async function getTorusKeys( verifierId, idToken, cb) {\n    const fetchNodeDetails = new FetchNodeDetails({ network: \"mainnet\" });\n    const torusUtils = new TorusUtils({ enableOneKey: true, network: \"mainnet\" });\n\n    const { torusNodeEndpoints, torusIndexes } = await fetchNodeDetails.getNodeDetails({ verifier: 'tor-us-signer-vercel', verifierId });\n    const { privKey } = await torusUtils.retrieveShares(torusNodeEndpoints, torusIndexes, 'tor-us-signer-vercel', { verifier_id: verifierId }, idToken);\n    return cb({privateKey: privKey});\n  }\n\n  const addAddress = async (signature, tokenId, coin, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, coin: coin })\n    const responce = await fetch(EMBLEM_API + '/address/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const decryptEmbed = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    console.log(\"Contract states\")\n    \n    let owned = false\n    let _owner\n    try {\n      if (targetContract[chainId]) {\n        emblemContract = getCuratedContract(targetContract[chainId])\n        setDecimals(await covalContract.decimals())\n        setPrice(250 * Math.pow(10, decimals))\n        setAllowance(\n          await covalContract\n            .allowance(account, contractAddresses.vaultHandlerV8[chainId])\n            .then((balance: { toString: () => string }) => balance.toString())\n        )\n        setBalance(await covalContract.balanceOf(account).then((balance: { toString: () => string }) => balance.toString()))\n        \n        if (Number(allowance) >= Number(price)) {\n          setIsCovalApproved(true)\n        } else {\n          setIsCovalApproved(false)\n        }\n        _owner = await emblemContract.getOwnerOfSerial(targetContract.serialNumber)\n        \n        // console.log(\"--------------------------- owner\", _owner, approved, account, contractAddresses.vaultHandlerV8[chainId])\n      } else {\n        _owner  = await emblemContract.ownerOf(tokenId)\n      }\n      finish()\n    } catch(err){\n      _owner = \"0x0000000000000000000000000000000000000000\"\n      finish()\n    }\n\n    async function finish(){\n      // let acceptable = await handlerContract.getPreTransfer(tokenId)\n      let isApproved\n      if (targetContract[chainId]) {\n        console.log(\"@@@@@@@@@@@@@------- checking approved start\", \"me\", account, \"v8\", contractAddresses.vaultHandlerV8[chainId])\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId])\n        setApproved(isApproved)\n        console.log(\"@@@@@@@@@@@@@------- checking approved end\", \"approved\", isApproved, \"acceptable\", acceptable, \"mine\", mine)\n        console.log(\"price\", price, \"decimals\", decimals, \"allowance\", allowance, \"balance\", balance, \"isCovalApproved\", isCovalApproved)\n      } else {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId])\n        setApproved(isApproved)\n      }\n      \n      // setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n      setOwner(_owner)\n      setMine(_owner === account || (to === account && _owner === \"0x0000000000000000000000000000000000000000\"))\n      setMineUnMinted(to === account && _owner === \"0x0000000000000000000000000000000000000000\")\n      loadPasswordFromLocalStorage()\n    }\n    \n  }\n\n  const onRenew = async (name) => { \n    library\n      .getSigner(account)\n      .signMessage('Renew: ' + tokenId)\n      .then((signature) => {\n        let address = vaultAddresses.filter(address=>{ return address.coin == 'NMC'})[0].address\n        console.log('signature', signature, name)\n        fetch(EMBLEM_API + '/nmc/renew/' + address, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata',\n            chainid: chainId.toString()\n          },\n          body: JSON.stringify({\n                \"tokenId\": tokenId,\n                \"signature\": signature,\n                \"name\": name\n              })\n        }).then(async function (response) {\n          let data = await response.json()\n          console.log(\"Requested Renew\", data)\n          \n        })\n      })\n  }\n\n  const approveCovalFlow = () => {\n    setApproving(true)\n    let handlerToApprove = targetContract.name? contractAddresses.vaultHandlerV8[chainId]: contractAddresses.vaultHandler[chainId]\n    ;(covalContract as Contract)\n      .approve(handlerToApprove, '100000000000000')\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code == 4001) {\n          setApproving(false)\n        }\n      })\n  }\n  \n  const handleSign = async () => {\n    let serialNumber\n    if (targetContract[chainId]) {      \n      emblemContract = getCuratedContract(targetContract[chainId])\n      serialNumber = targetContract.serialNumber\n      \n    }\n\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + (targetContract[chainId]? serialNumber: tokenId))\n      .then((signature) => {\n        setState({loaded: false})\n        if (mineUnMinted && status != \"claimed\" && !mintLockedForever) {\n          setMintLockedForever(true)\n        }\n        getSignedJWT(signature, tokenId, (token)=>{\n          getTorusKeys(tokenId, token.token, (keys)=>{\n            var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey)\n            let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)) \n            setKeyValues(payload.values)\n            setMnemonic(payload.phrase)\n            vaultAddresses.forEach(async address=>{\n              if (address.coin == 'STX') {\n                address.key = await getSTXKey(address, payload.phrase)\n              } else {\n                address.key = window.phrasePathToKey(payload.phrase, address.path)\n              }\n              if (address.coin == 'BTC') setPrivKeyBTC(address.key)\n              if (address.coin == 'ETH') setPrivKeyETH(address.key)\n            })\n            setState({loaded: true})\n            onOpenKeysModal()\n          })          \n        })\n      // }\n    })\n  }\n\n  const getSTXKey = async (address: any, phrase: string)=>{\n    const wallet: any = await generateWallet({\n      secretKey: phrase,\n      password: '',\n    })\n    console.log('------ stacks account -', wallet.accounts[0])\n    const account = wallet.accounts[0];\n    address.key = account.stxPrivateKey\n    return address.key\n  }\n\n  const handleHideAsset = async (coin) => {\n    library\n      .getSigner(account)\n      .signMessage('HideAsset: ' + tokenId)\n      .then((signature) => {\n\n        console.log(\"----------------------------------------------------------------\", signature)\n        console.log(coin.name, coin.coin, coin.address)\n        hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, ()=>{\n          console.log(\"Done hiding coin and getting new balances\")\n        })\n      })\n  }\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/'+tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin? coin: null,\n        \"address\": address? address: null,\n        \"name\": name? name: null,\n        \"signature\": signature? signature: null\n      })\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"-------\", data)\n      getAllBalances([], tokenId, (values)=>{\n        setVaultValues(values)\n        return cb()\n      })\n    }) \n  }\n\n  const handleAddressSign = async (coin: string) => {\n    library\n      .getSigner(account)\n      .signMessage('Address: ' + tokenId)\n      .then((signature) => {\n        addAddress(signature, tokenId, coin, (result) => {\n          getVault()\n        })\n      })\n  }\n\n  const handleOwnedEmbed = async () => {\n    library\n      .getSigner(account)\n      .signMessage('Embed: ' + tokenId)\n      .then((signature) => {\n        decryptEmbed(signature, tokenId, (result) => {\n          setVaultImage(result.ownedImage)\n        })        \n      })\n  }\n\n  const handleClaim = async () => {\n    if (targetContract[chainId]) {\n      // emblemContract = getCuratedContract(targetContract[chainId])\n      // let tokenId = await emblemContract.getTokenIdForSerialNumber(targetContract.serialNumber)\n      vaultHandlerContract.claim(targetContract[chainId], targetContract.tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    } else {\n      emblemContract.burn(tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    }\n  }\n\n  const pingClaimLogs = (cb)=>{\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId='+chainId.toString()+'_vercel_no_cache=1', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"Log check\", data)\n      return cb()\n    })    \n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random())\n        //Get random letter\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      // $(\"#output\").html(fixed + block);\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    console.log('----')\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    (account && chainId && vaultChainId && chainId == vaultChainId) || ((query.noLayout && query.noLayout == 'true') || (query.slideshowOnly && query.slideshowOnly == 'true')) ? getContractStates() : null\n  })\n\n  function splitDescription(words) {\n    var desc = words? words.split('\\n\\n\\n\\n'): [\" \"]\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    console.log(vaultAddresses)\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      let ethAddress = vaultAddresses.filter((item) => {return item.coin === 'ETH'})[0].address\n      let btcAddress = vaultAddresses.filter((item) => {return item.coin === 'BTC'})[0].address\n      console.log(\"SUCCESS\", vaultAddresses)\n      getAllBalancesByAddress([], ethAddress, btcAddress, (values)=>{\n        setVaultValues(values)\n      })\n      // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {console.log('WTF', err)}\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\")\n    return vaultAddresses\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach((item) => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '')\n        item.address = decrypt(cipherText, key)\n      }      \n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  function visitOpenSeaLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : vaultChainId == 5 ? 'testnets.': '') +\n      'opensea.io/assets/' + \n      (vaultChainId == 137 ? 'matic/' : vaultChainId == 5 ? 'goerli/': '') +\n      (alternateContractAddress? alternateContractAddress : targetContract[chainId]? targetContract[chainId]: contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      (targetContract? targetContract.tokenId: tokenId)\n    , '_blank')\n  }\n\n  function visitLooksRareLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' :vaultChainId == 5 ? 'goerli.' : '') +\n      'looksrare.org/collections/' + \n      (vaultChainId == 137 ? 'matic/' : '') +\n      (alternateContractAddress? alternateContractAddress : targetContract? targetContract[chainId]: contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      (targetContract? targetContract.tokenId: tokenId) \n    , '_blank')\n  }\n\n  { alternateContractAddress?\n    emblemContract = getVaultContract(alternateContractAddress? alternateContractAddress: null)\n  : null}\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n        <script\n            dangerouslySetInnerHTML={{\n              __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              if (localStorage.getItem(\"darkMode\") == 'false') {\n                localStorage.setItem(\"darkMode\",\"true\"); location.href = location.href\n              }\n              `,\n            }}\n          />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n        privValues={privValues}\n        addresses={vaultAddresses}\n      />\n      {showOffer ? (\n        <OfferModal\n          isOpen={isOpenOfferModal}\n          onClose={onCloseOfferModal}\n          tokenId={tokenId}\n          mine={mine}\n        />\n      ) : null}\n      \n\n      <Loader loaded={state.loaded}>\n        <Box height=\"40px\"></Box>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault && !slideshowOnly ? (\n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                className=\"NFT\" \n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"blue.500\"\n                >\n                  Vault Network: {CHAIN_ID_NAMES[vaultChainId]}\n                </Box>\n                {/* {isCrowdSale ? (\n                  <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"red.500\"\n                >\n                  Part of a crowdsale, sealed for 1 week.\n                </Box>\n                ) : null} */}\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  // textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null}\n                </Box>\n                <Stack className=\"NFT-content\" align=\"center\">\n                  {/* { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                      <NFTSlideshow name={vaultName} image={vaultImage} items={vaultValues.map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n                    ) : (\n                      <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n                    )\n                  } */}\n                  <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n                  {mine && ownedImage ? (\n                    <Button onClick={() => {handleOwnedEmbed()}}>(OWNED) Show Full Embed</Button>\n                  ): null}\n                </Stack>\n                <Stack align=\"center\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                    <Stack>\n                      <Text fontSize=\"xs\">\n                      { !isCuratedMaster && vaultChainId == chainId ? (\n                        <Link href={\"./vaults?address=\"+owner}>\n                          Owner: {owner}\n                        </Link>\n                      ) : null }\n                      </Text>\n                      <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" className=\"md\">\n                        <ReactMarkdown plugins={[gfm]} children={splitDescription(vaultDesc)} />\n                      </Text>\n                      \n                    </Stack>                    \n                  </Box>                    \n                </Stack>\n                <Box p=\"6\">\n                  {!isCuratedMaster? (\n                    <Tabs isFitted variant='enclosed'>\n                      <TabList mb='1em'>\n                        <Tab>Balances</Tab>\n                        <Tab>Attributes</Tab>\n                      </TabList>\n                      <TabPanels>\n                        <TabPanel>\n                          {vaultPrivacy ? (\n                            <Box mb={5}>\n                              <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                                {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                              </Text>\n                              <Input\n                                type=\"password\"\n                                id=\"vault-password\"\n                                onChange={(e) => tryDecrypt(e.target.value)}\n                                aria-describedby=\"password-helper-text\"\n                              />\n                            </Box>\n                          ) : (\n                            <Box d=\"flex\" backgroundColor={colorMode == \"light\"? \"gray.100\": \"gray.700\"} alignItems=\"baseline\" className=\"coin-balance-content\">\n                              <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                                <Text as=\"h4\" mt={2} fontWeight=\"semibold\">\n                                \n                                  Current Contents:  <button\n                                  onClick={() =>{\n                                    getAllBalancesLive([], tokenId, (v)=>{\n                                      setLoadedValues(false)\n                                      setVaultValues(v)\n                                    })\n                                  }}\n                                > [Refresh Balances]</button>\n                                </Text>\n                                <Text as=\"p\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"}>${Number(vaultTotalValue.toFixed(4)).toLocaleString()}</Text>\n                                { vaultValues.length ? (\n                                  vaultValues.map((coin) => {\n                                    return (  \n                                      <Stack> \n                                        <CoinBalance colorMode={colorMode} coin={coin} mine={(status === 'claimed' && claimedBy === account) || mine} onRenew={onRenew} hideAsset={targetAsset.name? false: handleHideAsset}/>\n                                      </Stack>\n                                    )\n                                  })\n                                ) : (<Refreshing /> ) } \n                                { vaultDataValues.length ? (\n                                  vaultDataValues.map((data) => {\n                                    return (\n                                      <Text>Data: {data.attribute_key}</Text>\n                                    )                        \n                                  })\n                                ) : !vaultDataValues.length && !vaultValues.length ? (\n                                  <Text>Nothing in here! Fill 'er up!</Text>\n                                ) : null}\n                              </Box>\n                            </Box>\n                          )}\n                      </TabPanel>\n                        <TabPanel>\n                          <Attributes colorMode={colorMode} attributes={attributes}/>\n                          </TabPanel>\n                        </TabPanels>\n                    </Tabs>\n                  ) : null}                  \n                  \n                  {!isCuratedMaster && !vaultPrivacy ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <ButtonGroup justifyContent=\"space-between\" spacing={6}>\n                        <Stack>\n                          <Text>Deposit Addresses</Text>\n                          <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                            {vaultAddresses.map((addr) => {\n                              return (\n                                <Button\n                                  className=\"address_nft_button\"\n                                  \n                                  ml={2}\n                                  mt={2}\n                                  font-weight=\"100 !important\"\n                                  key={addr.address}\n                                  onClick={() => {\n                                    setCurrCoin(addr.coin)\n                                    setCurrAddr(addr.address)\n                                    onOpenAddrModal()\n                                  }}\n                                >\n                                  {addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP': addr.coin}\n                                </Button>\n                              )\n                            })}\n                        </Flex>\n                        </Stack>\n                      </ButtonGroup>\n                    </Box>\n                  ) : null}\n\n                  {isCuratedMaster || (!(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 4 || vaultChainId === 5 || vaultChainId === 137 ))? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      {/* <Stack d=\"flex\" width=\"100%\"> */}\n                        <Button\n                          className=\"nft_button\"\n                          width=\"50%\"\n                          m={5}\n                          onClick={() => {visitOpenSeaLink()}}\n                        >\n                          Opensea\n                        </Button>\n                        <Button\n                          className=\"nft_button\"\n                          width=\"50%\"\n                          m={5}\n                          onClick={() => {visitLooksRareLink()}}\n                        >\n                          LooksRare\n                        </Button>\n                        {showOffer? (\n                          <Button className=\"\" onClick={() => { onOpenOfferModal() }}>{mine? ('My Offers') : ('Make an Offer')} (NFT²NFT)</Button>\n                        ) : null}\n                        \n                      {/* </Stack> */}\n                    </Box>\n                  ) : null}\n                  {!isCuratedMaster && mine && !acceptable && !approved ? (<>\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button \n                        className=\"nft_button\"\n                        width=\"100%\" onClick={() => {\n                        if (!approved) {\n                          return handleApproveForall()\n                        }                                      \n                      }\n                    }>Approve Claiming</Button>\n                    </Box>\n                  </>) : null }\n                  \n                  {!isCuratedMaster && live && !(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed && approved ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        onClick={() => {\n                          handleClaim()\n                        }}\n                        isDisabled={claiming}\n                      >\n                        {claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)'}\n                      </Button>\n                    </Box>\n                  ) : null }\n\n                  {!isCovalApproved && !approving && to == account ? (\n                    <Button  width=\"100%\" mt={5} onClick={approveCovalFlow} type=\"submit\">\n                      Approve Coval\n                    </Button>\n                  ):null}\n\n                  {!isCuratedMaster && !live && !approving && isCovalApproved && to == account && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg ? (\n                    <>\n                      { targetContract.name ? (\n                        <Button width=\"100%\" mt={5} onClick={lazyMintCurated} isDisabled = {!canCuratedMint || mintLockedForever}>{mintLockedForever? 'Mint Locked - keys accessed before mint': !canCuratedMint? 'Please load vault to mint':' Mint Vault'} </Button>\n                      ) : null}\n                    </>\n                ) : null}\n                \n                {(!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? (\n                  <Button width=\"100%\" mt={5} onClick={deleteVault}>Delete Vault </Button>\n                ) : null}\n\n                {(!isCuratedMaster && vaultChainId === chainId && (status == 'claimed' && claimedBy === account) || mineUnMinted && status != \"claimed\")  ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={handleSign}>\n                        {mineUnMinted && status != \"claimed\" && !mintLockedForever? 'Get Keys (Unlocking will prevent minting)': 'Get Keys'}                        \n                      </Button>\n                    </Box>\n                  ) : null}\n                \n                {showVerifyingSignature ? (\n                  <Button isDisabled type=\"submit\">\n                    Verifying Signature ...\n                  </Button>\n                ) : null}\n                {showMakingVaultMsg ? (\n                  <Button isDisabled type=\"submit\">\n                    Minting Vault ...\n                  </Button>\n                ) : null}\n                </Box>\n                {!isCuratedMaster && vaultIPFS ? (\n                  // <Stack>\n                    <HStack align=\"center\">\n                      <Link target='new' mb={2} ml={35} href={'https://gateway.ipfs.io/ipfs/'+vaultIPFS} isExternal>View Metadata on IPFS </Link>\n                      {vaultImageIPFS? (\n                        <Link mb={2} href={'https://gateway.ipfs.io/ipfs/'+vaultImageIPFS} isExternal>View Image on IPFS </Link>\n                      ) : null}                      \n                    </HStack> \n                  // </Stack>\n                ) : null }\n                {sealed ? (\n                    <Box d=\"flex\" mb={2} ml={35} alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Text>*This vault is sealed forever.</Text>\n                    </Box>\n                  ) : null}\n                <Stack direction=\"column\" align=\"center\">\n                  {status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n                {hash ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    { accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving? \"Handling Approval Flow ...\" : transfering? \"Transfering Vault ...\":  minting? \"Minting Vault\" : \"Generating Gift Link ...\"}\n                  </Alert>\n                ) : null}\n              </Box>\n            </Flex>\n        ) : vaultValues.length > 0 && slideshowOnly? (\n          <Stack className=\"NFT-content\" align=\"center\">\n            { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                <NFTSlideshow name={vaultName} image={vaultValues[0].image} items={vaultValues.filter(value=>{return value.image !== vaultValues[0].image}).map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n              ) : (\n                <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n              )\n            }\n          </Stack>\n        ) : invalidVault ? (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        ): null}\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming && !accepting && !preTransfering) {\n                // alert(1)\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                pingClaimLogs(()=>{\n                  location.href = location.origin + '/nft?id=' + tokenId\n                })\n              } else if (preTransfering) {\n                // alert(2)\n                savePasswordToLocalStorage()\n                setShowTransferPassword(true)\n                setPreTransfering(false)\n                setHash(null)                \n              } else if(accepting) {\n                // alert(3)\n                setAccepting(false)                \n                getVault()\n                setHash(null)\n              } else if(approving) {\n                // alert(4)\n                setApproving(false)\n                getVault()\n                setHash(null)\n              } else if(transfering) {\n                // alert(5)\n                setTransfering(false)\n                getVault()\n                setHash(null)\n              } else if(minting || showMakingVaultMsg) {\n                // alert(5)\n                //checkLiveliness(tokenId, targetContract, (isLive)=>{\n                  console.log('GOD SAKES REDIRECT')\n                  setMinting(false)\n                  setHash(null)\n                  // setLive(isLive)\n                  setShowMakingVaultMsg(false)\n                  location.href = location.origin + '/nft2?id=' + tokenId\n                //})\n              } else {\n                // alert(6)          \n                location.href = location.origin + '/nft2?id=' + tokenId      \n                console.log('--- minting', minting) \n                console.log('--- claiming', claiming) \n                console.log('--- accepting', accepting) \n                console.log('--- preTransfering', preTransfering)\n                console.log('--- approving', approving)\n                console.log(\"Unknown state\")\n              }\n            }}\n          />\n        ) : null}\n        <Box height=\"40px\"></Box>\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}