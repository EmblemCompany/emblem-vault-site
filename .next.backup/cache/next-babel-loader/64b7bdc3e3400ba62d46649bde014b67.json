{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Stack, Button } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useState } from 'react';\nimport { VStack, Divider } from '@chakra-ui/react';\nimport { contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport { Contract } from '@ethersproject/contracts';\nexport default function Admin() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: true\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: stats,\n    1: setStats\n  } = useState([]);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address || null);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(0);\n  const {\n    0: limit,\n    1: setLimit\n  } = useState(10);\n  const {\n    0: shouldFetchData,\n    1: setShouldFetchData\n  } = useState(address ? true : false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: buttonDisabled,\n    1: setButtonDisabled\n  } = useState(false);\n  const {\n    0: factories,\n    1: setFactories\n  } = useState([]);\n  const {\n    0: clones,\n    1: setClones\n  } = useState([]);\n  const handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n\n  // useEffect(() => {\n  //   if (state.loaded == false && !loadingApi && address) {\n  //     setLoadingApi(false)\n  //     // getPnL()\n  //   }\n  // }, [])\n  // useEffect(() => {\n  //   if (shouldFetchData && address) {\n  //     console.log(\"Should load api after setting consts\", offset)\n  //     setShouldFetchData(false)\n  //     // getPnL()\n  //   } else {\n  //     console.log(\"wtf\")\n  //   }\n  // }, [shouldFetchData, offset])\n  // const fetchDataForLazyLoad = async () =>{    \n  //   console.log('setting new offset to', offset+limit)\n  //   setOffset(offset+limit)\n  //   setShouldFetchData(true)\n  // }\n  const HandleClick = async () => {\n    setLoadingApi(true);\n    GetContracts();\n  };\n\n  async function GetContracts() {\n    getClones();\n    let factories = await handlerContract.getAllRegisteredContractsOfType(8);\n    let factoryInfo = await getFactoryInto(factories, 0, []);\n    setFactories(factoryInfo);\n    setLoadingApi(false);\n  }\n\n  async function getFactoryInto(factories, index, values) {\n    let factory = factories[index];\n    let factoryContract = getFactoryContract(factory);\n    let factoryType = await factoryContract.factoryType();\n    let factoryClones = await factoryContract.getClones();\n    let factoryOwner = await factoryContract.owner();\n    let detailedClones = await getCloneInto(factoryClones, 0, factoryType, []);\n    values.push({\n      type: factoryType,\n      address: factory,\n      clones: detailedClones,\n      owner: factoryOwner\n    });\n\n    if (index + 1 == factories.length) {\n      return values;\n    } else {\n      return getFactoryInto(factories, index + 1, values);\n    }\n  }\n\n  async function getClones() {\n    let _clones = [];\n    let erc1155 = await handlerContract.getAllRegisteredContractsOfType(1);\n    erc1155.forEach((clone, index) => {\n      _clones.push({\n        address: clone,\n        type: \"ERC1155\"\n      });\n    });\n    let erc721 = await handlerContract.getAllRegisteredContractsOfType(2);\n    erc721.forEach((clone, index) => {\n      _clones.push({\n        address: clone,\n        type: \"ERC721\"\n      });\n    });\n    let erc20 = await handlerContract.getAllRegisteredContractsOfType(4);\n    erc20.forEach((clone, index) => {\n      _clones.push({\n        address: clone,\n        type: \"ERC20\"\n      });\n    });\n    setClones(_clones);\n    console.log(\"clones from of type\", _clones);\n  }\n\n  async function getCloneInto(_clones, index, cloneType, values) {\n    let clone = _clones[index];\n    let cloneContract = getCloneContract(clone, cloneType);\n    let cloneOwner = await cloneContract.owner();\n    let cloneName = await cloneContract.name();\n    values.push({\n      address: clone,\n      owner: cloneOwner,\n      name: cloneName\n    });\n\n    if (index + 1 == _clones.length) {\n      return values;\n    } else {\n      return getCloneInto(_clones, index + 1, cloneType, values);\n    }\n  }\n\n  function getCloneContract(address, cloneType) {\n    let abi;\n\n    switch (cloneType) {\n      case \"ERC20\":\n        abi = contractAddresses.erc20Abi;\n        break;\n\n      case \"ERC721\":\n        abi = contractAddresses.erc721Abi;\n        break;\n\n      case \"ERC1155\":\n        abi = contractAddresses.erc1155Abi;\n        break;\n    }\n\n    return new Contract(address, abi, library.getSigner(account).connectUnchecked());\n  }\n\n  function getFactoryContract(address) {\n    return new Contract(address, contractAddresses.clonableFactoryAbi, library.getSigner(account).connectUnchecked());\n  }\n\n  const mockData = {\n    \"handler\": \"0x5B8189BCC7565C03C98994b5D7BfbeB1a4296FfE\"\n  };\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    w: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: HandleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, \"Click\"), factories.length > 0 ? factories.map((factory, index) => {\n    return __jsx(VStack, {\n      key: \"factory-\" + index,\n      p: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 15\n      }\n    }, __jsx(Box, {\n      w: \"100%\",\n      \"min-width\": \"40px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, __jsx(Text, {\n      w: \"100%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 19\n      }\n    }, factory.owner == account ? \"Owned\" : null, \" \", factory.type, \" Factory: \", factory.address), factory.clones.map((clone, index) => {\n      return __jsx(React.Fragment, null, __jsx(Text, {\n        key: clone.address,\n        ml: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 27\n        }\n      }, clone.owner == account ? \"Owned\" : null, \" \", factory.type, \" : \", clone.address, \" \"), __jsx(Divider, {\n        orientation: \"horizontal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 27\n        }\n      }), __jsx(Text, {\n        key: clone.name + index,\n        ml: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 27\n        }\n      }, \"Name: \", clone.name || \"Not Named\"));\n    }), __jsx(Divider, {\n      orientation: \"horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 19\n      }\n    })));\n  }) : null, clones.length > 0 ? clones.map((clone, index) => {\n    return __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 15\n      }\n    }, clone.type, \" : \", clone.address);\n  }) : null)));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx"],"names":["Box","Flex","Text","Stack","Button","Loader","Refreshing","useRouter","useWeb3React","useState","VStack","Divider","contractAddresses","useContract","Contract","Admin","query","account","chainId","library","state","setState","loaded","loadingApi","setLoadingApi","stats","setStats","address","setAddress","offset","setOffset","limit","setLimit","shouldFetchData","setShouldFetchData","hasMore","setHasMore","buttonDisabled","setButtonDisabled","factories","setFactories","clones","setClones","handlerContract","vaultHandlerV8","vaultHandlerV8Abi","HandleClick","GetContracts","getClones","getAllRegisteredContractsOfType","factoryInfo","getFactoryInto","index","values","factory","factoryContract","getFactoryContract","factoryType","factoryClones","factoryOwner","owner","detailedClones","getCloneInto","push","type","length","_clones","erc1155","forEach","clone","erc721","erc20","console","log","cloneType","cloneContract","getCloneContract","cloneOwner","cloneName","name","abi","erc20Abi","erc721Abi","erc1155Abi","getSigner","connectUnchecked","clonableFactoryAbi","mockData","map"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport {HStack, VStack, Circle, Divider } from '@chakra-ui/react'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\n\nimport { Contract } from '@ethersproject/contracts'\n\nexport default function Admin() {\n  const { query } = useRouter()\n  const { account, chainId, library } = useWeb3React()\n  const [state, setState] = useState({ loaded: true })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [stats, setStats] = useState([])\n  const [address, setAddress] = useState(query.address || null)\n  const [offset, setOffset] = useState(0)\n  const [limit, setLimit] = useState(10)\n  const [shouldFetchData, setShouldFetchData] = useState(address? true: false)\n  const [hasMore, setHasMore] = useState(true)\n  const [buttonDisabled, setButtonDisabled] = useState(false)\n\n  const [factories, setFactories] = useState([])\n  const [clones, setClones] = useState([])\n\n  const handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  // useEffect(() => {\n  //   if (state.loaded == false && !loadingApi && address) {\n  //     setLoadingApi(false)\n  //     // getPnL()\n  //   }\n  // }, [])\n\n  // useEffect(() => {\n  //   if (shouldFetchData && address) {\n  //     console.log(\"Should load api after setting consts\", offset)\n  //     setShouldFetchData(false)\n  //     // getPnL()\n  //   } else {\n  //     console.log(\"wtf\")\n  //   }\n  // }, [shouldFetchData, offset])\n\n  // const fetchDataForLazyLoad = async () =>{    \n  //   console.log('setting new offset to', offset+limit)\n  //   setOffset(offset+limit)\n  //   setShouldFetchData(true)\n  // }\n\n  const HandleClick = async()=>{\n    setLoadingApi(true)\n    GetContracts()\n  }\n\n  async function GetContracts() {\n    getClones()\n    let factories = await handlerContract.getAllRegisteredContractsOfType(8)\n    let factoryInfo = await getFactoryInto(factories, 0, [])\n    setFactories(factoryInfo)\n    setLoadingApi(false)\n  }\n\n  async function getFactoryInto(factories, index, values) {\n    let factory = factories[index]\n    let factoryContract = getFactoryContract(factory)\n    let factoryType = await factoryContract.factoryType()\n    let factoryClones = await factoryContract.getClones()\n    let factoryOwner = await factoryContract.owner()\n    let detailedClones = await getCloneInto(factoryClones, 0, factoryType, [])\n    \n    values.push({type: factoryType, address: factory, clones: detailedClones, owner: factoryOwner})\n\n    if (index+1 == factories.length) {\n      return values\n    } else {\n      return getFactoryInto(factories, index +1, values)\n    }\n  }\n\n  async function getClones() {\n    let _clones = []\n    let erc1155 = await handlerContract.getAllRegisteredContractsOfType(1)\n    erc1155.forEach((clone, index)=>{\n      _clones.push({address: clone, type: \"ERC1155\"})\n    })\n    let erc721 = await handlerContract.getAllRegisteredContractsOfType(2)\n    erc721.forEach((clone, index)=>{\n      _clones.push({address: clone, type: \"ERC721\"})\n    })\n    let erc20 = await handlerContract.getAllRegisteredContractsOfType(4)\n    erc20.forEach((clone, index)=>{\n      _clones.push({address: clone, type: \"ERC20\"})\n    })\n    setClones(_clones)\n    console.log(\"clones from of type\", _clones)\n  }\n\n  async function getCloneInto(_clones, index, cloneType, values) {\n    let clone = _clones[index]\n    let cloneContract = getCloneContract(clone, cloneType)\n    let cloneOwner = await cloneContract.owner()\n    let cloneName = await cloneContract.name()\n    values.push({address: clone, owner: cloneOwner, name: cloneName})\n\n    if (index+1 == _clones.length) {\n      return values\n    } else {\n      return getCloneInto(_clones, index +1, cloneType, values)\n    }\n  }\n\n  function getCloneContract(address, cloneType) {\n    let abi\n    switch(cloneType) {\n      case \"ERC20\":\n        abi = contractAddresses.erc20Abi\n        break;\n      case \"ERC721\":\n        abi = contractAddresses.erc721Abi\n        break;\n      case \"ERC1155\":\n        abi = contractAddresses.erc1155Abi\n        break;\n    }\n    return new Contract(address, abi, library.getSigner(account).connectUnchecked())\n  }\n\n  function getFactoryContract(address) {\n    return new Contract(address, contractAddresses.clonableFactoryAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  const mockData = {\n    \"handler\": \"0x5B8189BCC7565C03C98994b5D7BfbeB1a4296FfE\"\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Stack align=\"center\" w={\"100%\"}>\n        \n        <Button onClick={HandleClick}>Click</Button>\n\n        {factories.length > 0? (\n          factories.map((factory, index)=>{\n            return (\n              <VStack key={\"factory-\"+index} p={2} >\n                <Box w=\"100%\" min-width=\"40px\">     \n                  <Text w=\"100%\">{factory.owner == account? \"Owned\": null} {factory.type} Factory: {factory.address}</Text>\n                  {factory.clones.map( (clone, index)=>{\n                      return (\n                        <>\n                          <Text key={clone.address} ml={12}>{clone.owner == account? \"Owned\": null} {factory.type} : {clone.address} </Text>\n                          <Divider orientation=\"horizontal\" />\n                          <Text key={clone.name + index} ml={12}>Name: {clone.name || \"Not Named\"}</Text>\n                        </>\n                      )\n                    }\n                  )}\n                  <Divider orientation=\"horizontal\" />\n                </Box>\n              </VStack>\n            )\n          })\n        ) : null} \n        \n        { clones.length > 0? (\n          clones.map((clone, index)=>{\n            return (\n              <Text>{clone.type} : {clone.address}</Text>\n            )\n          })\n        ) : null}\n\n       </Stack>\n      </Flex>\n     \n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}