{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { resolve } from 'url';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Text, Stack, Slider, SliderTrack, SliderFilledTrack, SliderThumb, useColorMode, Button, Link, Switch } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR, DEFAULT_DEADLINE, DEFAULT_SLIPPAGE, QueryParameters } from '../constants';\nimport { useBodyKeyDown } from '../hooks';\nimport { useApproveMax, useDeadline, useSlippage, useFirstToken, useSecondToken } from '../context';\nexport default function Settings(_ref) {\n  var _process$env$COMMIT_S;\n\n  var isOpen = _ref.isOpen,\n      onClose = _ref.onClose;\n\n  var _useWeb3React = useWeb3React(),\n      chainId = _useWeb3React.chainId;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode,\n      toggleColorMode = _useColorMode.toggleColorMode;\n\n  var _useRouter = useRouter(),\n      pathname = _useRouter.pathname;\n\n  useBodyKeyDown('d', toggleColorMode);\n\n  var _useApproveMax = useApproveMax(),\n      _useApproveMax2 = _slicedToArray(_useApproveMax, 2),\n      approveMax = _useApproveMax2[0],\n      toggleApproveMax = _useApproveMax2[1];\n\n  var _useDeadline = useDeadline(),\n      _useDeadline2 = _slicedToArray(_useDeadline, 2),\n      deadline = _useDeadline2[0],\n      setDeadline = _useDeadline2[1];\n\n  var _useSlippage = useSlippage(),\n      _useSlippage2 = _slicedToArray(_useSlippage, 2),\n      slippage = _useSlippage2[0],\n      setSlippage = _useSlippage2[1];\n\n  var _useFirstToken = useFirstToken(),\n      _useFirstToken2 = _slicedToArray(_useFirstToken, 1),\n      firstToken = _useFirstToken2[0];\n\n  var _useSecondToken = useSecondToken(),\n      _useSecondToken2 = _slicedToArray(_useSecondToken, 1),\n      secondToken = _useSecondToken2[0];\n\n  var permalink = null;\n\n  if (typeof chainId === 'number' && (firstToken || secondToken) && (pathname === '/buy' || pathname === '/sell')) {\n    var permalinkParameters = _objectSpread(_defineProperty({}, QueryParameters.CHAIN, chainId), pathname === '/buy' ? _objectSpread(_objectSpread({}, firstToken ? _defineProperty({}, QueryParameters.OUTPUT, firstToken.address) : {}), secondToken ? _defineProperty({}, QueryParameters.INPUT, secondToken.address) : {}) : _objectSpread(_objectSpread({}, firstToken ? _defineProperty({}, QueryParameters.INPUT, firstToken.address) : {}), secondToken ? _defineProperty({}, QueryParameters.OUTPUT, secondToken.address) : {}));\n\n    permalink = resolve('https://emblem.finance', \"\".concat(pathname, \"?\").concat(Object.entries(permalinkParameters).map(function (_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 2),\n          key = _ref7[0],\n          value = _ref7[1];\n\n      return \"\".concat(key, \"=\").concat(value);\n    }).join('&')));\n  }\n\n  var _useState = useState(false),\n      copied = _useState[0],\n      setCopied = _useState[1];\n\n  useEffect(function () {\n    if (copied) {\n      var timeout = setTimeout(function () {\n        setCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [copied]);\n\n  function copyWithFlag(content) {\n    copy(content);\n    setCopied(true);\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true\n  }, __jsx(ModalOverlay, null), __jsx(ModalContent, {\n    color: COLOR[colorMode]\n  }, __jsx(ModalHeader, null, __jsx(Text, null, \"Settings (Version 3)\")), __jsx(ModalCloseButton, null), __jsx(ModalBody, null, __jsx(Stack, {\n    direction: \"column\"\n  }, __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\"\n  }, __jsx(Text, null, \"Dark Mode\"), __jsx(Switch, {\n    isChecked: colorMode === 'dark',\n    onChange: toggleColorMode\n  })), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\"\n  }, __jsx(Text, null, \"Approve Max\"), __jsx(Switch, {\n    isChecked: approveMax,\n    onChange: toggleApproveMax\n  })), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\"\n  }, __jsx(Text, null, \"Deadline\"), __jsx(Stack, {\n    direction: \"column\",\n    spacing: 0,\n    alignItems: \"flex-end\",\n    w: \"50%\",\n    flexShrink: 0\n  }, __jsx(Slider, {\n    min: 60,\n    max: 60 * 60,\n    step: 60,\n    value: deadline,\n    onChange: setDeadline\n  }, __jsx(SliderTrack, null), __jsx(SliderFilledTrack, null), __jsx(SliderThumb, null)), __jsx(Stack, {\n    direction: \"row\",\n    minHeight: \"1.5rem\"\n  }, deadline !== DEFAULT_DEADLINE && __jsx(Button, {\n    size: \"xs\",\n    onClick: function onClick() {\n      setDeadline(DEFAULT_DEADLINE);\n    }\n  }, \"Reset\"), __jsx(Text, null, deadline / 60, \" \", deadline === 60 ? 'minute' : 'minutes')))), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\"\n  }, __jsx(Text, null, \"Slippage Tolerance\"), __jsx(Stack, {\n    direction: \"column\",\n    spacing: 0,\n    alignItems: \"flex-end\",\n    w: \"50%\",\n    flexShrink: 0\n  }, __jsx(Slider, {\n    min: 0,\n    max: 100 * 4,\n    step: 10,\n    value: slippage,\n    onChange: setSlippage\n  }, __jsx(SliderTrack, null), __jsx(SliderFilledTrack, null), __jsx(SliderThumb, null)), __jsx(Stack, {\n    direction: \"row\",\n    minHeight: \"1.5rem\"\n  }, slippage !== DEFAULT_SLIPPAGE && __jsx(Button, {\n    size: \"xs\",\n    onClick: function onClick() {\n      setSlippage(DEFAULT_SLIPPAGE);\n    }\n  }, \"Reset\"), __jsx(Text, null, (slippage / 100).toFixed(slippage === 0 ? 0 : 1), \"%\")))))), __jsx(ModalFooter, {\n    justifyContent: \"space-between\"\n  }, typeof permalink === 'string' && __jsx(Button, {\n    variant: \"link\",\n    isDisabled: copied,\n    color: \"blue.500\",\n    width: \"min-content\",\n    onClick: function onClick() {\n      try {\n        // eslint-disable-next-line\n        ;\n        window.navigator.share({\n          title: 'Emblem Vault',\n          url: permalink\n        })[\"catch\"](function () {});\n      } catch (_unused) {\n        copyWithFlag(permalink);\n      }\n    }\n  }, copied ? 'Copied' : 'Share Permalink'), __jsx(Link, {\n    href: 'https://github.com/NoahZinsmeister/hypertext',\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    color: \"blue.500\"\n  }, \"Based on Hypertext.\"), __jsx(Link, {\n    href: \"https://github.com/EmblemCompany/emblem-vault-site/tree/\".concat(process.env.COMMIT_SHA),\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    color: \"blue.500\"\n  }, (_process$env$COMMIT_S = process.env.COMMIT_SHA) === null || _process$env$COMMIT_S === void 0 ? void 0 : _process$env$COMMIT_S.slice(0, 7)))));\n}","map":null,"metadata":{},"sourceType":"module"}