{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/PnL.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nexport default function PnL() {\n  _s();\n\n  var _this = this;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useState = useState({\n    loaded: false\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(false),\n      loadingApi = _useState2[0],\n      setLoadingApi = _useState2[1];\n\n  var _useState3 = useState(null),\n      stats = _useState3[0],\n      setStats = _useState3[1];\n\n  var _useState4 = useState(query.address || \"0x3B31925EeC78dA3CF15c4503604c13b0eEBC57e5\"),\n      address = _useState4[0],\n      setAddress = _useState4[1];\n\n  useEffect(function () {\n    if (state.loaded == false && !loadingApi) {\n      setLoadingApi(false);\n      getPnL();\n    }\n  }, []);\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"Fetch More Data Now\");\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getPnL = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log(\"getting logs\");\n              fetch('https://api.emblemvault.io/s:osautomate/offer/' + address + '?limit=10&offset=20', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              }).then( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {\n                  var jsonData;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          setLoadingApi(false);\n                          setState({\n                            loaded: true\n                          });\n                          _context2.next = 4;\n                          return response.json();\n\n                        case 4:\n                          jsonData = _context2.sent;\n                          setStats(jsonData);\n                          console.log(jsonData);\n\n                        case 7:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                return function (_x) {\n                  return _ref3.apply(this, arguments);\n                };\n              }());\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getPnL() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, stats ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }, \"Total Offers in USD: $\", stats.offers.toFixed(2)), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, \"Total Number of offers: $\", stats.offerCount.toFixed(2)), __jsx(InfiniteScroll, {\n    height: 400,\n    dataLength: 100 //This is important field to render the next data\n    ,\n    next: fetchData,\n    hasMore: true,\n    loader: __jsx(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }\n    }, \"Loading...\"),\n    endMessage: __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 19\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    }, \"Yay! You have seen it all\")) // below props only if you need pull down functionality\n    // refreshFunction={this.refresh}\n    // pullDownToRefresh\n    // pullDownToRefreshThreshold={50}\n    // pullDownToRefreshContent={\n    //   <h3 style={{ textAlign: 'center' }}>&#8595; Pull down to refresh</h3>\n    // }\n    // releaseToRefreshContent={\n    //   <h3 style={{ textAlign: 'center' }}>&#8593; Release to refresh</h3>\n    // }\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, stats.intelligences.map(function (item, index) {\n    return __jsx(Text, {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 27\n      }\n    }, item.name);\n  }))) : null)));\n}\n\n_s(PnL, \"kxa6AvLtpKWGYkumLPydfCV/1ck=\", false, function () {\n  return [useRouter, useWeb3React];\n});\n\n_c = PnL;\n\nvar _c;\n\n$RefreshReg$(_c, \"PnL\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/PnL.tsx"],"names":["Flex","Text","Stack","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","InfiniteScroll","PnL","query","account","chainId","loaded","state","setState","loadingApi","setLoadingApi","stats","setStats","address","setAddress","getPnL","fetchData","console","log","fetch","method","headers","then","response","json","jsonData","offers","toFixed","offerCount","textAlign","intelligences","map","item","index","name"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\n\nexport default function PnL() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [stats, setStats] = useState(null)\n  const [address, setAddress] = useState(query.address || \"0x3B31925EeC78dA3CF15c4503604c13b0eEBC57e5\")\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  useEffect(() => {\n    if (state.loaded == false && !loadingApi) {\n      setLoadingApi(false)\n      getPnL()\n    }\n  }, [])\n\n  const fetchData = async() =>{\n    console.log(\"Fetch More Data Now\")\n  }\n\n  const getPnL = async() =>{\n    console.log(\"getting logs\")\n    fetch('https://api.emblemvault.io/s:osautomate/offer/'+address+'?limit=10&offset=20', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(async function (response) {\n      setLoadingApi(false)\n      setState({ loaded: true })\n      let jsonData = await response.json()\n      setStats(jsonData)\n      console.log(jsonData)\n    })\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Stack align=\"center\">\n          {stats? (\n            <>\n              <Text>Total Offers in USD: ${stats.offers.toFixed(2)}</Text>\n              <Text>Total Number of offers: ${stats.offerCount.toFixed(2)}</Text>\n              <InfiniteScroll\n                height={400}\n                dataLength={100} //This is important field to render the next data\n                next={fetchData}\n                hasMore={true}\n                loader={<h4>Loading...</h4>}\n                endMessage={\n                  <p style={{ textAlign: 'center' }}>\n                    <b>Yay! You have seen it all</b>\n                  </p>\n                }\n                // below props only if you need pull down functionality\n                // refreshFunction={this.refresh}\n                // pullDownToRefresh\n                // pullDownToRefreshThreshold={50}\n                // pullDownToRefreshContent={\n                //   <h3 style={{ textAlign: 'center' }}>&#8595; Pull down to refresh</h3>\n                // }\n                // releaseToRefreshContent={\n                //   <h3 style={{ textAlign: 'center' }}>&#8593; Release to refresh</h3>\n                // }\n              >\n                {stats.intelligences.map((item, index)=>{\n                  return (<Text key={index}>{item.name}</Text>)\n                })}\n              </InfiniteScroll>\n            </>\n          ) : null }\n        </Stack>\n      </Flex>\n     \n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}