{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/pages/nft/[id].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport Nft from '../../components/Nft';\nimport Head from 'next/head';\nexport const EMBLEM_API = 'https://api.emblemvault.io';\nexport async function getProductsFromDatabase() {\n  const responce = await fetch(EMBLEM_API + '/ids/', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      service: 'evmetadata'\n    }\n  });\n  return await responce.json();\n}\nexport async function getStaticPaths() {\n  const records = await getProductsFromDatabase();\n  console.log(\"Records\", records);\n  const paths = records.map(product => ({\n    params: {\n      id: product.tokenId\n    }\n  })); // fallback: false means pages that don’t have the\n  // correct id will 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n} // params will contain the id for each generated page.\n\nexport async function getStaticProps({\n  params\n}) {\n  return {\n    props: {\n      product: params.id\n    }\n  };\n} // export default function Product({ product }) {\n//   // Render product\n// }\n\nexport default function VaultPage({\n  product\n}) {\n  const {\n    query\n  } = useRouter();\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: product,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  })), __jsx(Nft, {\n    id: product,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/pages/nft/[id].tsx"],"names":["useRouter","Nft","Head","EMBLEM_API","getProductsFromDatabase","responce","fetch","method","headers","service","json","getStaticPaths","records","console","log","paths","map","product","params","id","tokenId","fallback","getStaticProps","props","VaultPage","query"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAO,MAAMC,UAAU,GAAG,4BAAnB;AAEP,OAAO,eAAeC,uBAAf,GAAyC;AAC9C,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,UAAU,GAAG,OAAd,EAAuB;AACjDI,IAAAA,MAAM,EAAE,KADyC;AAEjDC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPC,MAAAA,OAAO,EAAE;AAFF;AAFwC,GAAvB,CAA5B;AAOA,SAAO,MAAMJ,QAAQ,CAACK,IAAT,EAAb;AACD;AACD,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,OAAO,GAAG,MAAMR,uBAAuB,EAA7C;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,OAAvB;AACA,QAAMG,KAAK,GAAGH,OAAO,CAACI,GAAR,CAAaC,OAAD,KAAc;AACtCC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,EAAE,EAAEF,OAAO,CAACG;AAAd;AAD8B,GAAd,CAAZ,CAAd,CAHqC,CAOrC;AACA;;AACA,SAAO;AAAEL,IAAAA,KAAF;AAASM,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,C,CAED;;AACA,OAAO,eAAeC,cAAf,CAA8B;AAAEJ,EAAAA;AAAF,CAA9B,EAA0C;AAC/C,SAAO;AACLK,IAAAA,KAAK,EAAE;AACLN,MAAAA,OAAO,EAAEC,MAAM,CAACC;AADX;AADF,GAAP;AAKD,C,CAED;AACA;AACA;;AACA,eAAe,SAASK,SAAT,CAAmB;AAACP,EAAAA;AAAD,CAAnB,EAA2C;AACxD,QAAM;AAAEQ,IAAAA;AAAF,MAAYzB,SAAS,EAA3B;AAEA,SACE,4BACA,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,IAAI,EAAC,cAAX;AAA0B,IAAA,OAAO,EAAEiB,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADA,EAIA,MAAC,GAAD;AAAK,IAAA,EAAE,EAAEA,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJA,CADF;AAQD","sourcesContent":["import { useRouter } from 'next/router'\nimport Nft from '../../components/Nft'\nimport Head from 'next/head'\nexport const EMBLEM_API = 'https://api.emblemvault.io'\n\nexport async function getProductsFromDatabase() {\n  const responce = await fetch(EMBLEM_API + '/ids/', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      service: 'evmetadata',\n    },\n  })\n  return await responce.json()\n}\nexport async function getStaticPaths() {\n  const records = await getProductsFromDatabase()\n  console.log(\"Records\", records)\n  const paths = records.map((product) => ({\n    params: { id: product.tokenId }\n  }))\n\n  // fallback: false means pages that don’t have the\n  // correct id will 404.\n  return { paths, fallback: false }\n}\n\n// params will contain the id for each generated page.\nexport async function getStaticProps({ params }) {\n  return {\n    props: {\n      product: params.id\n    }\n  }\n}\n\n// export default function Product({ product }) {\n//   // Render product\n// }\nexport default function VaultPage({product}): JSX.Element {\n  const { query } = useRouter()\n  \n  return (\n    <>\n    <Head>\n      <meta name=\"twitter:card\" content={product} />\n    </Head>\n    <Nft id={product}/>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}