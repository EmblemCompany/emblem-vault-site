{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { FormControl, FormLabel, FormHelperText, Input, Stack, Box, Flex, Textarea, Button } from '@chakra-ui/core';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport Loader from 'react-loader';\nimport { usePapaParse } from 'react-papaparse';\nexport default function Batch() {\n  _s();\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState([]),\n      batches = _useState[0],\n      setBatches = _useState[1];\n\n  var _useState2 = useState(query.action || 'list'),\n      action = _useState2[0],\n      setAction = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      batchName = _useState3[0],\n      setBatchName = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      imageBaseUrl = _useState4[0],\n      setImageBaseUrl = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      inscriptionBaseUrl = _useState5[0],\n      setInscriptionBaseUrl = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      addressType = _useState6[0],\n      setAddressType = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      titleTemplate = _useState7[0],\n      setTitleTemplate = _useState7[1];\n\n  var _useState8 = useState(\"\"),\n      descriptionTemplate = _useState8[0],\n      setDescriptionTemplate = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      total = _useState9[0],\n      setTotal = _useState9[1];\n\n  var _useState10 = useState(\"\"),\n      batchData = _useState10[0],\n      setBatchData = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      batchDataJson = _useState11[0],\n      setBatchDataJson = _useState11[1];\n\n  var _useState12 = useState(query.batch_id || \"\"),\n      batchId = _useState12[0],\n      setBatchId = _useState12[1];\n\n  var _useState13 = useState({\n    loaded: false\n  }),\n      state = _useState13[0],\n      setState = _useState13[1];\n\n  var _usePapaParse = usePapaParse(),\n      readString = _usePapaParse.readString,\n      jsonToCSV = _usePapaParse.jsonToCSV;\n\n  useEffect(function () {\n    if (!state.loaded && batchId && !batchName) {\n      getBatch();\n    } else if (!state.loaded && !batchId && !batchName && action == 'list') {\n      getBatches();\n    } else {\n      setState({\n        loaded: true\n      });\n    }\n  }, []);\n\n  var getBatch = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/batch?batchId=\".concat(batchId), requestOptions).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n                  var record, parsedJson, csvData;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return response.json();\n\n                        case 2:\n                          record = _context.sent;\n                          setState({\n                            loaded: true\n                          });\n                          setBatchName(record.batch_name);\n                          setImageBaseUrl(record.image_base_url);\n                          setInscriptionBaseUrl(record.inscription_base_url);\n                          setAddressType(record.address_type);\n                          setTitleTemplate(record.title_template);\n                          setDescriptionTemplate(record.description_template);\n                          parsedJson = JSON.parse(record.data);\n                          setBatchDataJson(parsedJson);\n                          csvData = jsonToCSV(parsedJson);\n                          setBatchData(csvData);\n                          setTotal((parsedJson.length - 1).toString());\n\n                        case 15:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getBatch() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getBatches = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/batches\", requestOptions).then( /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response) {\n                  var records;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return response.json();\n\n                        case 2:\n                          records = _context3.sent;\n                          console.log(records);\n                          setBatches(records);\n                          setState({\n                            loaded: true\n                          });\n\n                        case 6:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function (_x2) {\n                  return _ref4.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function getBatches() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(event) {\n      var myHeaders, jsonData, serializedForm;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              event.preventDefault();\n              myHeaders = new Headers();\n              myHeaders.append(\"Content-Type\", \"application/json\");\n              _context6.next = 5;\n              return csvToJson(batchData);\n\n            case 5:\n              jsonData = _context6.sent;\n              serializedForm = {\n                batchName: batchName,\n                imageBaseUrl: imageBaseUrl,\n                inscriptionBaseUrl: inscriptionBaseUrl,\n                addressType: addressType,\n                titleTemplate: titleTemplate,\n                descriptionTemplate: descriptionTemplate,\n                total: total,\n                batchId: batchId,\n                batchData: jsonData.data\n              };\n              fetch(EMBLEM_API + '/addBatch', {\n                method: 'POST',\n                headers: myHeaders,\n                body: JSON.stringify(serializedForm)\n              }).then( /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(response) {\n                  var data;\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return response.json();\n\n                        case 2:\n                          data = _context5.sent;\n\n                          if (data.id) {\n                            setBatchId(data.id);\n                          }\n\n                        case 4:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n\n                return function (_x4) {\n                  return _ref6.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function handleSubmit(_x3) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  function csvToJson(data) {\n    return new Promise(function (resolve, reject) {\n      readString(data, {\n        worker: true,\n        complete: function complete(results) {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  function isValidBatchData() {\n    if (!batchDataJson) return false;\n    var hasRows = batchDataJson.length > 1;\n    if (!hasRows) return false;\n    var correctColumns = batchDataJson[0].length == 4;\n    var correctHeaders = batchDataJson[0][0] == 'asset_number' && batchDataJson[0][1] == 'inscription_number' && batchDataJson[0][2] == 'inscription_hash' && batchDataJson[0][3] == 'to';\n    return hasRows && correctColumns && correctHeaders;\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, action && (action == 'edit' || action == 'add') ? __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"batch-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 19\n    }\n  }, \"Batch Name\"), __jsx(Input, {\n    type: \"text\",\n    id: \"batch-name\",\n    \"aria-describedby\": \"batch-name-text\",\n    value: batchName,\n    onChange: function onChange(e) {\n      return setBatchName(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 19\n    }\n  }), __jsx(FormHelperText, {\n    id: \"batch-name-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 19\n    }\n  }, \"Give it a unique name for this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"image-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 19\n    }\n  }, \"Image Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"image-base-url\",\n    \"aria-describedby\": \"image-base-url-text\",\n    value: imageBaseUrl,\n    onChange: function onChange(e) {\n      return setImageBaseUrl(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 19\n    }\n  }), __jsx(FormHelperText, {\n    id: \"image-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 19\n    }\n  }, \"Enter the base url for the images in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"inscription-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 19\n    }\n  }, \"Inscription Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"inscription-base-url\",\n    \"aria-describedby\": \"inscription-base-url-text\",\n    value: inscriptionBaseUrl,\n    onChange: function onChange(e) {\n      return setInscriptionBaseUrl(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 19\n    }\n  }), __jsx(FormHelperText, {\n    id: \"inscription-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 19\n    }\n  }, \"Enter the base url for the inscriptions in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"address-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 19\n    }\n  }, \"Address Type\"), __jsx(Input, {\n    type: \"text\",\n    id: \"address-type\",\n    \"aria-describedby\": \"address-type-text\",\n    value: addressType,\n    onChange: function onChange(e) {\n      return setAddressType(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 19\n    }\n  }), __jsx(FormHelperText, {\n    id: \"address-type-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 19\n    }\n  }, \"Enter the address type for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"title-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 19\n    }\n  }, \"Title Template\"), __jsx(Textarea, {\n    id: \"title-template\",\n    size: \"lg\",\n    \"aria-describedby\": \"title-template-text\",\n    minLength: 3,\n    maxLength: 4024,\n    value: titleTemplate,\n    onChange: function onChange(e) {\n      return setTitleTemplate(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 19\n    }\n  }), __jsx(FormHelperText, {\n    id: \"title-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 19\n    }\n  }, \"Enter the title template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 19\n    }\n  }, \"Description Template\"), __jsx(Textarea, {\n    id: \"description-template\",\n    size: \"lg\",\n    \"aria-describedby\": \"description-template-text\",\n    minLength: 3,\n    maxLength: 1024,\n    value: descriptionTemplate,\n    onChange: function onChange(e) {\n      return setDescriptionTemplate(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 19\n    }\n  }), __jsx(FormHelperText, {\n    id: \"description-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 19\n    }\n  }, \"Enter the description template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 17\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 19\n    }\n  }, \"Total\"), __jsx(Input, {\n    isDisabled: true,\n    type: \"number\",\n    id: \"total\",\n    \"aria-describedby\": \"total-text\",\n    value: total,\n    onChange: function onChange(e) {\n      return setTotal(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 19\n    }\n  }), __jsx(FormHelperText, {\n    id: \"total-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 19\n    }\n  }, \"Enter the total number of items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 17\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 19\n    }\n  }, \"Records\"), __jsx(Textarea, {\n    id: \"records\",\n    size: \"lg\",\n    fontSize: 'xx-small',\n    \"aria-describedby\": \"records-text\",\n    minLength: 3,\n    value: batchData,\n    onChange: /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(e) {\n        var jsonData;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                setBatchData(e.target.value);\n                _context7.next = 3;\n                return csvToJson(e.target.value);\n\n              case 3:\n                jsonData = _context7.sent;\n                setBatchDataJson(jsonData.data);\n                setTotal(jsonData.data.length > 1 ? (jsonData.data.length - 1).toString() : '0');\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      return function (_x5) {\n        return _ref7.apply(this, arguments);\n      };\n    }(),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 19\n    }\n  }), __jsx(FormHelperText, {\n    id: \"records-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 19\n    }\n  }, \"Enter the CSV rows from the helper spreadsheet\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    isDisabled: !isValidBatchData(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 17\n    }\n  }, \"Submit\")))) : action == 'list' ? __jsx(Box, {\n    maxW: \"lg\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 11\n    }\n  }, \"ffffff\") : null));\n}\n\n_s(Batch, \"uyKEzzLXAsaPdi/Fs2CNTyYXVu0=\", false, function () {\n  return [useRouter, usePapaParse];\n});\n\n_c = Batch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Batch\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx"],"names":["FormControl","FormLabel","FormHelperText","Input","Stack","Box","Flex","Textarea","Button","useRouter","useEffect","useState","EMBLEM_API","Loader","usePapaParse","Batch","query","batches","setBatches","action","setAction","batchName","setBatchName","imageBaseUrl","setImageBaseUrl","inscriptionBaseUrl","setInscriptionBaseUrl","addressType","setAddressType","titleTemplate","setTitleTemplate","descriptionTemplate","setDescriptionTemplate","total","setTotal","batchData","setBatchData","batchDataJson","setBatchDataJson","batch_id","batchId","setBatchId","loaded","state","setState","readString","jsonToCSV","getBatch","getBatches","requestOptions","method","fetch","then","response","json","record","batch_name","image_base_url","inscription_base_url","address_type","title_template","description_template","parsedJson","JSON","parse","data","csvData","length","toString","err","console","log","records","handleSubmit","event","preventDefault","myHeaders","Headers","append","csvToJson","jsonData","serializedForm","headers","body","stringify","id","Promise","resolve","reject","worker","complete","results","isValidBatchData","hasRows","correctColumns","correctHeaders","e","target","value"],"mappings":"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","sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Stack,\n  Box,\n  Flex,\n  Text,\n  Textarea,\n  Button\n} from '@chakra-ui/core'\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport Loader from 'react-loader'\nimport { usePapaParse } from 'react-papaparse';\n\nexport default function Batch() {\n  const { query } = useRouter()\n  const [batches, setBatches] = useState([])\n  const [action, setAction] = useState(query.action || 'list')\n  const [batchName, setBatchName] = useState(\"\");\n  const [imageBaseUrl, setImageBaseUrl] = useState(\"\");\n  const [inscriptionBaseUrl, setInscriptionBaseUrl] = useState(\"\");\n  const [addressType, setAddressType] = useState(\"\");\n  const [titleTemplate, setTitleTemplate] = useState(\"\");\n  const [descriptionTemplate, setDescriptionTemplate] = useState(\"\");\n  const [total, setTotal] = useState(\"\");\n  const [batchData, setBatchData] = useState(\"\");\n  const [batchDataJson, setBatchDataJson] = useState(\"\");\n  const [batchId, setBatchId] = useState(query.batch_id || \"\")\n  const [state, setState] = useState({ loaded: false })\n  const { readString, jsonToCSV } = usePapaParse();\n\n\n  useEffect(() => {\n    if (!state.loaded && batchId && !batchName) {\n      getBatch()\n    } else if (!state.loaded && !batchId && !batchName && action == 'list') {\n      getBatches()\n    } else {\n      setState({ loaded: true })\n    }\n  }, [])\n\n  const getBatch = async () => {\n    var requestOptions: any = {\n      method: 'GET'\n    };\n\n    fetch(EMBLEM_API + `/batch?batchId=${batchId}`, requestOptions).then(async (response) => {\n      let record = await response.json()\n      setState({ loaded: true })\n      setBatchName(record.batch_name)\n      setImageBaseUrl(record.image_base_url)\n      setInscriptionBaseUrl(record.inscription_base_url)\n      setAddressType(record.address_type)\n      setTitleTemplate(record.title_template)\n      setDescriptionTemplate(record.description_template)\n      let parsedJson = JSON.parse(record.data)\n      setBatchDataJson(parsedJson)\n      let csvData = jsonToCSV(parsedJson)\n      setBatchData(csvData)\n      setTotal((parsedJson.length - 1).toString())\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const getBatches = async () => {\n    var requestOptions: any = {\n      method: 'GET'\n    };\n\n    fetch(EMBLEM_API + `/batches`, requestOptions).then(async (response) => {\n      let records = await response.json()\n      console.log(records)\n      setBatches(records)\n      setState({ loaded: true })\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    let jsonData: any = await csvToJson(batchData)\n    const serializedForm = {\n      batchName,\n      imageBaseUrl,\n      inscriptionBaseUrl,\n      addressType,\n      titleTemplate,\n      descriptionTemplate,\n      total,\n      batchId,\n      batchData: jsonData.data\n\n    };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm),\n    }).then(async (response) => {\n      let data = await response.json()\n      if (data.id) {\n        setBatchId(data.id)\n      }\n    }).catch(err => {\n      console.log(err)\n    })\n  };\n\n  function csvToJson(data) {\n    return new Promise((resolve, reject) => {\n      readString(data, {\n        worker: true,\n        complete: (results: any) => {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  function isValidBatchData() {\n    if (!batchDataJson) return false\n    let hasRows = batchDataJson.length > 1\n    if (!hasRows) return false\n    let correctColumns = batchDataJson[0].length == 4\n    let correctHeaders = batchDataJson[0][0] == 'asset_number' && batchDataJson[0][1] == 'inscription_number' && batchDataJson[0][2] == 'inscription_hash' && batchDataJson[0][3] == 'to'\n    return hasRows && correctColumns && correctHeaders\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n        {action && (action == 'edit' || action == 'add') ? (\n          <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n            <form onSubmit={handleSubmit}>\n              <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"batch-name\">Batch Name</FormLabel>\n                  <Input\n                    type=\"text\"\n                    id=\"batch-name\"\n                    aria-describedby=\"batch-name-text\"\n                    value={batchName}\n                    onChange={(e) => setBatchName(e.target.value)}\n                    autoComplete=\"off\"\n                  />\n                  <FormHelperText id=\"batch-name-text\">Give it a unique name for this batch.</FormHelperText>\n                </FormControl>\n\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"image-base-url\">Image Base Url</FormLabel>\n                  <Input\n                    type=\"text\"\n                    id=\"image-base-url\"\n                    aria-describedby=\"image-base-url-text\"\n                    value={imageBaseUrl}\n                    onChange={(e) => setImageBaseUrl(e.target.value)}\n                    autoComplete=\"off\"\n                  />\n                  <FormHelperText id=\"image-base-url-text\">\n                    Enter the base url for the images in this batch.\n                  </FormHelperText>\n                </FormControl>\n\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"inscription-base-url\">Inscription Base Url</FormLabel>\n                  <Input\n                    type=\"text\"\n                    id=\"inscription-base-url\"\n                    aria-describedby=\"inscription-base-url-text\"\n                    value={inscriptionBaseUrl}\n                    onChange={(e) => setInscriptionBaseUrl(e.target.value)}\n                    autoComplete=\"off\"\n                  />\n                  <FormHelperText id=\"inscription-base-url-text\">\n                    Enter the base url for the inscriptions in this batch.\n                  </FormHelperText>\n                </FormControl>\n\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"address-type\">Address Type</FormLabel>\n                  <Input\n                    type=\"text\"\n                    id=\"address-type\"\n                    aria-describedby=\"address-type-text\"\n                    value={addressType}\n                    onChange={(e) => setAddressType(e.target.value)}\n                    autoComplete=\"off\"\n                  />\n                  <FormHelperText id=\"address-type-text\">\n                    Enter the address type for the items in this batch.\n                  </FormHelperText>\n                </FormControl>\n\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"title-template\">Title Template</FormLabel>\n                  <Textarea\n                    id=\"title-template\"\n                    size=\"lg\"\n                    aria-describedby=\"title-template-text\"\n                    minLength={3}\n                    maxLength={4024}\n                    value={titleTemplate}\n                    onChange={(e) => setTitleTemplate(e.target.value)}\n                    autoComplete=\"off\"\n                  />\n                  <FormHelperText id=\"title-template-text\">\n                    Enter the title template for the items in this batch.\n                  </FormHelperText>\n                </FormControl>\n\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"description-template\">Description Template</FormLabel>\n                  <Textarea\n                    id=\"description-template\"\n                    size=\"lg\"\n                    aria-describedby=\"description-template-text\"\n                    minLength={3}\n                    maxLength={1024}\n                    value={descriptionTemplate}\n                    onChange={(e) => setDescriptionTemplate(e.target.value)}\n                    autoComplete=\"off\"\n                  />\n                  <FormHelperText id=\"description-template-text\">\n                    Enter the description template for the items in this batch.\n                  </FormHelperText>\n                </FormControl>\n\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"total\">Total</FormLabel>\n                  <Input\n                    isDisabled={true}\n                    type=\"number\"\n                    id=\"total\"\n                    aria-describedby=\"total-text\"\n                    value={total}\n                    onChange={(e) => setTotal(e.target.value)}\n                    autoComplete=\"off\"\n                  />\n                  <FormHelperText id=\"total-text\">\n                    Enter the total number of items in this batch.\n                  </FormHelperText>\n                </FormControl>\n\n                <FormControl isRequired>\n                  <FormLabel htmlFor=\"description-template\">Records</FormLabel>\n                  <Textarea\n                    id=\"records\"\n                    size=\"lg\"\n                    fontSize={'xx-small'}\n                    aria-describedby=\"records-text\"\n                    minLength={3}\n                    value={batchData}\n                    onChange={async (e) => {\n                      setBatchData(e.target.value)\n                      let jsonData: any = await csvToJson(e.target.value)\n                      setBatchDataJson(jsonData.data)\n                      setTotal(jsonData.data.length > 1 ? (jsonData.data.length - 1).toString() : '0')\n                    }}\n                    autoComplete=\"off\"\n                  />\n                  <FormHelperText id=\"records-text\">\n                    Enter the CSV rows from the helper spreadsheet\n                  </FormHelperText>\n                </FormControl>\n              </Stack>\n              <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                <Button mt={4} type=\"submit\" isDisabled={!isValidBatchData()} >\n                  Submit\n                </Button>\n              </Stack>\n            </form>\n          </Box>\n        ) : action == 'list'? (\n          <Box maxW=\"lg\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n            ffffff\n          </Box>\n        ): null}\n      </Flex>\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}