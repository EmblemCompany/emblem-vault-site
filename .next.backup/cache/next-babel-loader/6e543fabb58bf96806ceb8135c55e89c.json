{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Vault.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, useDisclosure } from '@chakra-ui/core';\nimport { useWeb3React } from '@web3-react/core';\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { validImage } from '../utils';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nvar AddrModal = dynamic(_c = function _c() {\n  return import('./AddrModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./AddrModal')];\n    },\n    modules: ['./AddrModal']\n  }\n});\n_c2 = AddrModal;\nexport default function Vault() {\n  _s();\n\n  var _this = this;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query,\n      pathname = _useRouter.pathname,\n      replace = _useRouter.replace;\n\n  var _React$useState = React.useState(query.id),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      tokenId = _React$useState2[0],\n      setTokenId = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      vaultName = _React$useState4[0],\n      setVaultName = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      vaultDesc = _React$useState6[0],\n      setVaultDesc = _React$useState6[1];\n\n  var _React$useState7 = React.useState(''),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      vaultImage = _React$useState8[0],\n      setVaultImage = _React$useState8[1];\n\n  var _React$useState9 = React.useState([]),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      vaultValues = _React$useState10[0],\n      setVaultValues = _React$useState10[1];\n\n  var _React$useState11 = React.useState([]),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      vaultAddresses = _React$useState12[0],\n      setVaultAddresses = _React$useState12[1];\n\n  var _React$useState13 = React.useState(false),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      vaultPrivacy = _React$useState14[0],\n      setVaultPrivacy = _React$useState14[1];\n\n  var _React$useState15 = React.useState(null),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      hash = _React$useState16[0],\n      setHash = _React$useState16[1];\n\n  var _React$useState17 = React.useState(''),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      currCoin = _React$useState18[0],\n      setCurrCoin = _React$useState18[1];\n\n  var _React$useState19 = React.useState(''),\n      _React$useState20 = _slicedToArray(_React$useState19, 2),\n      currAddr = _React$useState20[0],\n      setCurrAddr = _React$useState20[1];\n\n  var _React$useState21 = React.useState({\n    loaded: false\n  }),\n      _React$useState22 = _slicedToArray(_React$useState21, 2),\n      state = _React$useState22[0],\n      setState = _React$useState22[1];\n\n  var _React$useState23 = React.useState(false),\n      _React$useState24 = _slicedToArray(_React$useState23, 2),\n      allowed = _React$useState24[0],\n      setAllowed = _React$useState24[1];\n\n  var _React$useState25 = React.useState(false),\n      _React$useState26 = _slicedToArray(_React$useState25, 2),\n      mine = _React$useState26[0],\n      setMine = _React$useState26[1];\n\n  var _React$useState27 = React.useState(false),\n      _React$useState28 = _slicedToArray(_React$useState27, 2),\n      claiming = _React$useState28[0],\n      setClaiming = _React$useState28[1];\n\n  var handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  var _useDisclosure = useDisclosure(),\n      isOpenAddrModal = _useDisclosure.isOpen,\n      onOpenAddrModal = _useDisclosure.onOpen,\n      onCloseAddrModal = _useDisclosure.onClose;\n\n  var getVault = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(EMBLEM_API + '/meta/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  chainId: chainId.toString()\n                }\n              });\n\n            case 2:\n              responce = _context.sent;\n              _context.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context.sent;\n              console.log(jsonData);\n              setVaultName(jsonData.name);\n              setVaultImage(jsonData.image);\n              setVaultDesc(jsonData.description);\n              setVaultValues(jsonData.values);\n              setVaultDesc(jsonData.description);\n              setVaultAddresses(jsonData.addresses);\n              setState({\n                loaded: true\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getVault() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var owner;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return emblemContract.ownerOf(tokenId);\n\n            case 2:\n              owner = _context2.sent;\n              setMine(owner === account);\n\n              if (mine) {\n                setAllowed(true);\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getContractStates() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleApprove = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(function (_ref4) {\n                var hash = _ref4.hash;\n                setHash(hash);\n              });\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function handleApprove() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleClaim = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              // console.log(tokenId)\n              setClaiming(true);\n              emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(function (_ref6) {\n                var hash = _ref6.hash;\n                alert(claiming);\n                setHash(hash);\n              });\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function handleClaim() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getVault();\n  }, []);\n  useEffect(function () {\n    getContractStates();\n  });\n\n  function splitDescription(words) {\n    var desc = words.split('Emblem Vault Basic');\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(pass) {\n    console.log(pass);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }), __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, vaultName), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, __jsx(Image, {\n    src: validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png',\n    size: \"250px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  })), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  }, splitDescription(vaultDesc))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    fontWeight: \"semibold\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 19\n    }\n  }, \"Current Contents:\"), vaultPrivacy ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 23\n    }\n  }, \"Contents hidden. Enter password to unlock.\"), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: function onChange(e) {\n      return tryDecrypt(e.target.value);\n    },\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 23\n    }\n  })) : vaultValues.length ? vaultValues.map(function (coin) {\n    return __jsx(Text, {\n      key: coin.name,\n      isTruncated: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 25\n      }\n    }, coin.name, \": \", coin.balance);\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  }, \"Nothing in here! Fill 'er up!\"))), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"center\",\n    spacing: \"1rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }, __jsx(ButtonGroup, {\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 19\n    }\n  }, vaultAddresses.map(function (addr) {\n    return __jsx(Button, {\n      key: addr.address,\n      onClick: function onClick() {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 25\n      }\n    }, \"Put \", addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin, \" In\");\n  })))), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  }, mine ? __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      if (allowed) {\n        handleClaim();\n      } else {\n        handleApprove();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 19\n    }\n  }, allowed ? 'Claim' : 'Approve') : '')))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      alert(claiming);\n\n      if (claiming) {\n        alert('Claim tx complete. Now ask server for keys');\n      } //setHash(null)\n\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }) : null));\n}\n\n_s(Vault, \"hsyr3MelGf7MzTNPrxKTmhP075w=\", false, function () {\n  return [useWeb3React, useRouter, useContract, useContract, useDisclosure];\n});\n\n_c3 = Vault;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AddrModal$dynamic\");\n$RefreshReg$(_c2, \"AddrModal\");\n$RefreshReg$(_c3, \"Vault\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Vault.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","useDisclosure","useWeb3React","React","useEffect","useRouter","Loader","dynamic","validImage","TransactionToast","EMBLEM_API","BURN_ADDRESS","contractAddresses","useContract","AddrModal","Vault","account","chainId","query","pathname","replace","useState","id","tokenId","setTokenId","vaultName","setVaultName","vaultDesc","setVaultDesc","vaultImage","setVaultImage","vaultValues","setVaultValues","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","loaded","state","setState","allowed","setAllowed","mine","setMine","claiming","setClaiming","handlerContract","vaultHandler","vaultHandlerAbi","emblemContract","emblemVault","emblemAbi","isOpenAddrModal","isOpen","onOpenAddrModal","onOpen","onCloseAddrModal","onClose","getVault","fetch","method","headers","service","toString","responce","json","jsonData","console","log","name","image","description","values","addresses","getContractStates","ownerOf","owner","handleApprove","setApprovalForAll","then","handleClaim","transferFrom","alert","splitDescription","words","desc","split","trim","tryDecrypt","pass","e","target","value","length","map","coin","balance","addr","address"],"mappings":"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","sourcesContent":["import { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, useDisclosure } from '@chakra-ui/core'\n\nimport { useWeb3React } from '@web3-react/core'\nimport React, { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\n\nimport { validImage } from '../utils'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { Contract } from '@ethersproject/contracts'\nimport { useContract } from '../hooks'\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\n\nexport default function Vault() {\n  const { account, chainId } = useWeb3React()\n  const { query, pathname, replace } = useRouter()\n  const [tokenId, setTokenId] = React.useState(query.id)\n  const [vaultName, setVaultName] = React.useState('')\n  const [vaultDesc, setVaultDesc] = React.useState('')\n  const [vaultImage, setVaultImage] = React.useState('')\n  const [vaultValues, setVaultValues] = React.useState([])\n  const [vaultAddresses, setVaultAddresses] = React.useState([])\n  const [vaultPrivacy, setVaultPrivacy] = React.useState(false)\n  const [hash, setHash] = React.useState(null)\n  const [currCoin, setCurrCoin] = React.useState('')\n  const [currAddr, setCurrAddr] = React.useState('')\n  const [state, setState] = React.useState({ loaded: false })\n  const [allowed, setAllowed] = React.useState(false)\n  const [mine, setMine] = React.useState(false)\n  const [claiming, setClaiming] = React.useState(false)\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n\n  const getVault = async () => {\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainId: chainId.toString(),\n      },\n    })\n    const jsonData = await responce.json()\n    console.log(jsonData)\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setVaultDesc(jsonData.description)\n    setVaultValues(jsonData.values)\n    setVaultDesc(jsonData.description)\n    setVaultAddresses(jsonData.addresses)\n    setState({ loaded: true })\n  }\n\n  const getContractStates = async () => {\n    let owner = await emblemContract.ownerOf(tokenId)\n    setMine(owner === account)\n    if (mine) {\n      setAllowed(true)\n    }\n  }\n\n  const handleApprove = async () => {\n    emblemContract\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const handleClaim = async () => {\n    // console.log(tokenId)\n    setClaiming(true);\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({ hash }: { hash: string }) => {\n      alert(claiming)\n      setHash(hash)\n    })\n  }\n\n  useEffect(() => {\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    getContractStates()\n  })\n\n  function splitDescription(words) {\n    var desc = words.split('Emblem Vault Basic')\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(pass) {\n    console.log(pass)\n  }\n\n  return (\n    <>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <Loader loaded={state.loaded}>\n        <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n          <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\" alignItems=\"center\">\n            <Box\n              mt=\"1\"\n              fontWeight=\"semibold\"\n              as=\"h3\"\n              lineHeight=\"tight\"\n              p={2}\n              textAlign=\"center\"\n              textTransform=\"uppercase\"\n              alignItems=\"center\"\n            >\n              {vaultName}\n            </Box>\n            <Stack align=\"center\">\n              <Image\n                src={validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png'}\n                size=\"250px\"\n              />\n            </Stack>\n            <Stack align=\"center\">\n              <Box mt=\"1\" fontWeight=\"semibold\" as=\"h4\" lineHeight=\"tight\">\n                {splitDescription(vaultDesc)}\n              </Box>\n            </Stack>\n            <Box p=\"6\">\n              <Box d=\"flex\" alignItems=\"baseline\">\n                <Box color=\"gray.500\" fontWeight=\"semibold\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                  <h4>Current Contents:</h4>\n                  {vaultPrivacy ? (\n                    <>\n                      <Text>Contents hidden. Enter password to unlock.</Text>\n                      <Input\n                        type=\"password\"\n                        id=\"vault-password\"\n                        onChange={(e) => tryDecrypt(e.target.value)}\n                        aria-describedby=\"password-helper-text\"\n                      />\n                    </>\n                  ) : vaultValues.length ? (\n                    vaultValues.map((coin) => {\n                      return (\n                        <Text key={coin.name} isTruncated>\n                          {coin.name}: {coin.balance}\n                        </Text>\n                      )\n                    })\n                  ) : (\n                    <Text>Nothing in here! Fill 'er up!</Text>\n                  )}\n                </Box>\n              </Box>\n              <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                <Stack direction=\"row\" align=\"center\" spacing=\"1rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                  <ButtonGroup spacing={4}>\n                    {vaultAddresses.map((addr) => {\n                      return (\n                        <Button\n                          key={addr.address}\n                          onClick={() => {\n                            setCurrCoin(addr.coin)\n                            setCurrAddr(addr.address)\n                            onOpenAddrModal()\n                          }}\n                        >\n                          Put {addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin} In\n                        </Button>\n                      )\n                    })}\n                  </ButtonGroup>\n                </Stack>\n              </Box>\n              <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                {mine ? (\n                  <Button\n                    width=\"100%\"\n                    onClick={() => {\n                      if (allowed) {\n                        handleClaim()\n                      } else {\n                        handleApprove()\n                      }\n                    }}\n                  >\n                    {allowed ? 'Claim' : 'Approve'}\n                  </Button>\n                ) : (\n                  ''\n                )}\n              </Box>\n            </Box>\n          </Box>\n        </Flex>\n        {hash ? (\n            <TransactionToast\n              hash={hash}\n              onComplete={() => {     \n                alert(claiming)           \n                if (claiming) {\n                  alert('Claim tx complete. Now ask server for keys')\n                }\n                //setHash(null)\n              }}\n            />\n          ) : (\n            null\n          )}\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}