{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/SwapChain.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nexport default function SwapChain() {\n  _s();\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId; // const [vaults, setVaults] = useState([])\n\n\n  var _useState = useState({\n    loaded: false\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(false),\n      loadingApi = _useState2[0],\n      setLoadingApi = _useState2[1];\n\n  var _useState3 = useState(null),\n      balance = _useState3[0],\n      setBalance = _useState3[1];\n\n  var _useState4 = useState(query.address),\n      address = _useState4[0],\n      setAddress = _useState4[1];\n\n  var _useState5 = useState(query.experimental),\n      experimental = _useState5[0],\n      setExperimental = _useState5[1]; // const getVaults = async () => {\n  //   loadCache()\n  //   try {\n  //     const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental? '?experimental=true' : ''), {\n  //       method: 'GET',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         service: 'evmetadata',\n  //         chainId: chainId.toString(),\n  //       },\n  //     })\n  //     const jsonData = await response.json()\n  //     setState({ loaded: true })\n  //     setVaults(jsonData)\n  //     saveCache(jsonData)\n  //     setLoadingApi(false)\n  //     // console.log(jsonData)\n  //   } catch (error) {}\n  // }\n  // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_vaults')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_vaults', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n\n  var _useState6 = useState(''),\n      acct = _useState6[0],\n      setAcct = _useState6[1];\n\n  useEffect(function () {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      }); // getVaults()\n    }\n  }, [account, acct]);\n\n  var _useState7 = useState(chainId),\n      chain = _useState7[0],\n      setChain = _useState7[1];\n\n  useEffect(function () {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      }); // getVaults()\n    }\n  }, [chainId, chain]);\n  useEffect(function () {\n    account && chainId ? setState({\n      loaded: true\n    }) : null;\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"Transfer Coval from \", chainId == 137 ? \"Matic\" : \"Ethereum\", \" Network to \", chainId == 137 ? \"Etherum\" : \"Matic\", \" Network\")));\n}\n\n_s(SwapChain, \"no+ZYwPSALrdwo1zEDUXjHCZW4A=\", false, function () {\n  return [useRouter, useWeb3React];\n});\n\n_c = SwapChain;\n\nvar _c;\n\n$RefreshReg$(_c, \"SwapChain\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/SwapChain.tsx"],"names":["Flex","Text","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","SwapChain","query","account","chainId","loaded","state","setState","loadingApi","setLoadingApi","balance","setBalance","address","setAddress","experimental","setExperimental","acct","setAcct","chain","setChain"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Spinner } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { EMBLEM_API } from '../constants'\n\nexport default function SwapChain() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  // const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [balance, setBalance] = useState(null)\n  const [address, setAddress] = useState(query.address)\n  const [experimental, setExperimental] = useState(query.experimental)\n\n  // const getVaults = async () => {\n  //   loadCache()\n  //   try {\n  //     const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental? '?experimental=true' : ''), {\n  //       method: 'GET',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         service: 'evmetadata',\n  //         chainId: chainId.toString(),\n  //       },\n  //     })\n  //     const jsonData = await response.json()\n  //     setState({ loaded: true })\n  //     setVaults(jsonData)\n  //     saveCache(jsonData)\n  //     setLoadingApi(false)\n  //     // console.log(jsonData)\n  //   } catch (error) {}\n  // }\n\n  // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_vaults')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_vaults', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setState({ loaded: false })\n      // getVaults()\n    }\n  }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      // getVaults()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    account && chainId ? setState({ loaded: true }) : null\n  }, [])\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\" mt={10}>\n        <Text>Transfer Coval from {chainId == 137 ? \"Matic\" : \"Ethereum\"} Network to {chainId == 137 ? \"Etherum\" : \"Matic\"} Network</Text>\n      </Flex>\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}