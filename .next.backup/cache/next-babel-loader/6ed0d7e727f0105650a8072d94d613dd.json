{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Leaderboard.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nexport default function LeaderBoard() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: loadingOwners,\n    1: setLoadingOwners\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: owners,\n    1: setOwners\n  } = useState([]);\n  const {\n    0: totalSupply,\n    1: setTotalSupply\n  } = useState(0);\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  const getOwners = async () => {\n    setState({\n      loaded: true\n    });\n\n    if (!loadingOwners) {\n      setOwners([]);\n      setLoadingOwners(true);\n    } else {\n      return;\n    }\n\n    let totalSupply = await emblemContract.totalSupply();\n    setTotalSupply(totalSupply.toString());\n    console.log(totalSupply);\n    getTokensByIndex(Number(totalSupply.toString()), 0, () => {\n      function compare(a, b) {\n        if (a.value > b.value) return 1;\n        if (b.value > a.value) return -1;\n        return 0;\n      }\n\n      console.log('sorted owners', JSON.stringify(owners), Object.keys(owners));\n      setLoadingOwners(false);\n      saveCache(owners);\n    });\n  };\n\n  const getValueForNft = async (tokenId, cb) => {\n    try {\n      const response = await fetch(EMBLEM_API + '/value/' + tokenId, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        }\n      });\n      const jsonData = await response.json();\n      return cb(jsonData.value || 0);\n    } catch (err) {\n      return cb(0);\n    }\n  };\n\n  async function getTokensByIndex(count, index, cb) {\n    let tokenId = await emblemContract.tokenByIndex(index);\n    console.log('tokenId', tokenId.toString(), index);\n    getOwner(tokenId.toString(), () => {\n      if (count - 1 < index + 1) {\n        return cb();\n      } else {\n        return getTokensByIndex(count, index + 1, cb);\n      }\n    });\n  }\n\n  async function getOwner(tokenId, cb) {\n    let owner = await emblemContract.ownerOf(tokenId);\n\n    if (owner === '0x0000000000000000000000000000000000000000' || owner.toLowerCase() === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180') {\n      return cb();\n    }\n\n    if (owners.filter(item => {\n      return item.owner === owner;\n    }).length < 1) {\n      getValueForNft(tokenId, value => {\n        console.log(\"tokenId Value\", tokenId, value);\n        owners.push({\n          address: owner,\n          value: value,\n          vaults: [{\n            tokenId: tokenId,\n            value: value\n          }]\n        });\n        setOwners(owners);\n      });\n    } else {\n      getValueForNft(tokenId, value => {\n        console.log(\"tokenId Value\", tokenId, value);\n        owners.filter(item => {\n          return item.owner === owner;\n        })[0].vaults.push({\n          address: owner,\n          tokenId: tokenId.toString(),\n          value: owners.filter(item => {\n            return item.owner === owner;\n          })[0].value\n        });\n        setOwners(owners);\n      });\n    }\n\n    return cb();\n  }\n\n  const saveCache = owners => {\n    localStorage.setItem((address ? address : account) + '_' + chainId + '_leader', JSON.stringify(owners)); // Save new state for later\n  };\n\n  const {\n    0: chain,\n    1: setChain\n  } = useState(chainId);\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getOwners();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    account && chainId ? getOwners() : setState({\n      loaded: true\n    });\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, loadingOwners ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 24\n    }\n  }) : '', __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, owners.map(owner => {\n    return __jsx(Stack, {\n      key: owner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }\n    }, __jsx(Text, {\n      key: owner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, owner));\n  }))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Leaderboard.tsx"],"names":["Flex","Text","Stack","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","EMBLEM_API","contractAddresses","useContract","LeaderBoard","query","account","chainId","vaults","setVaults","state","setState","loaded","loadingApi","setLoadingApi","loadingOwners","setLoadingOwners","address","setAddress","owners","setOwners","totalSupply","setTotalSupply","emblemContract","emblemVault","emblemAbi","getOwners","toString","console","log","getTokensByIndex","Number","compare","a","b","value","JSON","stringify","Object","keys","saveCache","getValueForNft","tokenId","cb","response","fetch","method","headers","service","jsonData","json","err","count","index","tokenByIndex","getOwner","owner","ownerOf","toLowerCase","filter","item","length","push","localStorage","setItem","chain","setChain","map"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Spinner } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\n\nexport default function LeaderBoard() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [loadingOwners, setLoadingOwners] = useState(false)\n  const [address, setAddress] = useState(query.address)\n  const [owners, setOwners] = useState([])\n  const [totalSupply, setTotalSupply] = useState(0)\n\n\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const getOwners = async () => {\n    setState({ loaded: true })\n    if (!loadingOwners) {\n      setOwners([])\n      setLoadingOwners(true)\n    } else {\n      return\n    }\n    let totalSupply = await (emblemContract as Contract).totalSupply()\n    setTotalSupply(totalSupply.toString())\n    console.log(totalSupply)\n    getTokensByIndex(Number(totalSupply.toString()), 0, () => {\n      function compare(a, b) {\n        if (a.value > b.value) return 1;\n        if (b.value > a.value) return -1;      \n        return 0;\n      }\n\n      console.log('sorted owners', JSON.stringify(owners), Object.keys(owners))\n      setLoadingOwners(false)\n      saveCache(owners)\n    })\n  }\n\n  const getValueForNft = async (tokenId, cb) =>{\n    try {\n      const response = await fetch(EMBLEM_API + '/value/' + tokenId, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n      })\n      const jsonData = await response.json()\n      return cb(jsonData.value || 0)\n    } catch(err){ return cb(0)    }\n  }\n\n  async function getTokensByIndex(count, index, cb) {\n    let tokenId = await (emblemContract as Contract).tokenByIndex(index)\n    console.log('tokenId', tokenId.toString(), index)\n    getOwner(tokenId.toString(), ()=>{\n      if (count - 1 < index + 1) {\n          return cb()\n        } else {\n          return getTokensByIndex(count, index + 1, cb)\n        }\n    })\n  }\n\n  async function getOwner(tokenId, cb) {\n    let owner = await (emblemContract as Contract).ownerOf(tokenId)\n    if (owner === '0x0000000000000000000000000000000000000000' || owner.toLowerCase() === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180') {\n      return cb()\n    }\n    if (owners.filter(item=>{return item.owner === owner}).length < 1) {\n      getValueForNft(tokenId, value=>{\n        console.log(\"tokenId Value\", tokenId, value)\n        owners.push({address: owner, value: value, vaults: [{ tokenId: tokenId, value: value}]})\n        setOwners(owners)\n      })\n    } else {\n      getValueForNft(tokenId, value=>{\n        console.log(\"tokenId Value\", tokenId, value)\n        owners.filter(item=>{return item.owner === owner})[0].vaults.push({ address: owner, tokenId: tokenId.toString(), value: owners.filter(item=>{return item.owner === owner})[0].value })\n        setOwners(owners)\n      })\n    }\n    return cb()\n  }\n\n  const saveCache = (owners) => {\n    localStorage.setItem((address ? address : account) + '_' + chainId + '_leader', JSON.stringify(owners)) // Save new state for later\n  }\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      getOwners()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    account && chainId ? getOwners() : setState({ loaded: true })\n  }, [])\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingOwners ? <Refreshing /> : ''}\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n        <Stack>\n          {owners.map((owner) => {\n            return (\n            <Stack key={owner}>  \n            <Text key={owner} >{owner}</Text>\n              {/* <Text as=\"a\" key={index}>Address: {index.address} Vaults: {owners[owner].vaults.length} TVL: {owners[owner].value}</Text> */}\n            </Stack>\n            )\n          })}\n        </Stack>        \n      </Flex>\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}