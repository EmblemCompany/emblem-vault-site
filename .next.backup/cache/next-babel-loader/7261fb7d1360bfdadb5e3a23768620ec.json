{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/partials/BridgeDeposits.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useWeb3React } from '@web3-react/core';\nimport { useState } from 'react';\nimport { EMBLEM_API } from '../../constants';\nvar useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  }\n});\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return {\n    name: name,\n    calories: calories,\n    fat: fat,\n    carbs: carbs,\n    protein: protein\n  };\n}\n\nvar rows = [//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  //   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  //   createData('Eclair', 262, 16.0, 24, 6.0),\n  //   createData('Cupcake', 305, 3.7, 67, 4.3),\n  //   createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\nexport default function BridgeDeposits() {\n  _s();\n\n  var _this = this;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useState = useState([]),\n      dataRows = _useState[0],\n      setDataRows = _useState[1];\n\n  var classes = useStyles();\n  getDeposits(function (deposits) {\n    setDataRows(deposits);\n  });\n  return __jsx(TableContainer, {\n    component: Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    className: classes.table,\n    \"aria-label\": \"simple table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"Dessert (100g serving) \", chainId), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"Calories\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, \"Fat\\xA0(g)\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"Carbs\\xA0(g)\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Protein\\xA0(g)\"))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, dataRows.map(function (row) {\n    return __jsx(TableRow, {\n      key: row.name,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, __jsx(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }\n    }, row.name), __jsx(TableCell, {\n      align: \"right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }\n    }, row.blockNumber), __jsx(TableCell, {\n      align: \"right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 15\n      }\n    }, row.transactionHash), __jsx(TableCell, {\n      align: \"right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    }, row.carbs), __jsx(TableCell, {\n      align: \"right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    }, row.protein));\n  }))));\n\n  function getDeposits(_x) {\n    return _getDeposits.apply(this, arguments);\n  }\n\n  function _getDeposits() {\n    _getDeposits = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(EMBLEM_API + '/transfersOutDb?pending=true', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'chainid': chainId.toString(),\n                  'service': 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context.sent;\n              _context.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context.sent;\n              return _context.abrupt(\"return\", cb(jsonData));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getDeposits.apply(this, arguments);\n  }\n}\n\n_s(BridgeDeposits, \"GsfOiOiEaf918qYqmFJ1kHy3VrE=\", false, function () {\n  return [useWeb3React, useStyles];\n});\n\n_c = BridgeDeposits;\n\nvar _c;\n\n$RefreshReg$(_c, \"BridgeDeposits\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/partials/BridgeDeposits.tsx"],"names":["React","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","useWeb3React","useState","EMBLEM_API","useStyles","table","minWidth","createData","name","calories","fat","carbs","protein","rows","BridgeDeposits","account","chainId","dataRows","setDataRows","classes","getDeposits","deposits","map","row","blockNumber","transactionHash","cb","fetch","method","headers","toString","responce","json","jsonData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../../constants'\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nfunction createData(name: string, calories: number, fat: number, carbs: number, protein: number) {\n  return { name, calories, fat, carbs, protein };\n}\n\n\n\nlet rows = [\n//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n//   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n//   createData('Eclair', 262, 16.0, 24, 6.0),\n//   createData('Cupcake', 305, 3.7, 67, 4.3),\n//   createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\n\nexport default function BridgeDeposits() {\n  const { account, chainId } = useWeb3React()\n  const [dataRows, setDataRows] = useState([])\n  const classes = useStyles();\n  getDeposits(deposits=>{\n    setDataRows(deposits)\n  })\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Dessert (100g serving) {chainId}</TableCell>\n            <TableCell align=\"right\">Calories</TableCell>\n            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {dataRows.map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.blockNumber}</TableCell>\n              <TableCell align=\"right\">{row.transactionHash}</TableCell>\n              <TableCell align=\"right\">{row.carbs}</TableCell>\n              <TableCell align=\"right\">{row.protein}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n\n  async function getDeposits(cb) {\n\n    const responce = await fetch(EMBLEM_API + '/transfersOutDb?pending=true', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'chainid': chainId.toString(),\n          'service': 'evmetadata',\n        },\n      })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n}"]},"metadata":{},"sourceType":"module"}