{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Leaderboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Link, Image, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { validImage } from '../utils';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nexport default function LeaderBoard() {\n  _s();\n\n  var _this = this;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useState = useState([]),\n      vaults = _useState[0],\n      setVaults = _useState[1];\n\n  var _useState2 = useState({\n    loaded: false\n  }),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(false),\n      loadingApi = _useState3[0],\n      setLoadingApi = _useState3[1];\n\n  var _useState4 = useState(query.address),\n      address = _useState4[0],\n      setAddress = _useState4[1];\n\n  var _useState5 = useState({}),\n      owners = _useState5[0],\n      setOwners = _useState5[1];\n\n  var _useState6 = useState({}),\n      totalSupply = _useState6[0],\n      setTotalSupply = _useState6[1];\n\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  var getVaults = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              getOwners();\n              loadCache();\n              _context.prev = 2;\n              _context.next = 5;\n              return fetch(EMBLEM_API + '/vaults/' + (address ? address : account), {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  chainId: chainId.toString()\n                }\n              });\n\n            case 5:\n              response = _context.sent;\n              _context.next = 8;\n              return response.json();\n\n            case 8:\n              jsonData = _context.sent;\n              setState({\n                loaded: true\n              });\n              setVaults(jsonData);\n              saveCache(jsonData);\n              setLoadingApi(false); // console.log(jsonData)\n\n              _context.next = 17;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](2);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 15]]);\n    }));\n\n    return function getVaults() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getOwners = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var totalSupply;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return emblemContract.totalSupply();\n\n            case 2:\n              totalSupply = _context2.sent;\n              setTotalSupply(totalSupply.toString());\n              getTokensByIndex(0, function () {\n                console.log('owners', owners);\n              }); // ; (emblemContract as Contract).totalSupply().then((supply) => {\n              //   getTokensByIndex(Number(supply.toString()), 0, () => {\n              //     console.log('owners', owners)\n              //   })\n              // })\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getOwners() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  function getTokensByIndex(_x, _x2) {\n    return _getTokensByIndex.apply(this, arguments);\n  }\n\n  function _getTokensByIndex() {\n    _getTokensByIndex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(index, cb) {\n      var count, tokenId;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              count = Number(totalSupply);\n              _context3.next = 3;\n              return emblemContract.tokenByIndex(index);\n\n            case 3:\n              tokenId = _context3.sent;\n              console.log('tokenId', tokenId.toString());\n              getOwner(tokenId.toString(), function (owner) {\n                console.log('owner', owner);\n              }); // ; (emblemContract as Contract).tokenByIndex(index).then((err, tokenId) => {\n              //   getOwner(tokenId, () => {\n              //     if (count - 1 < index + 1) {\n              //       return cb()\n              //     } else {\n              //       return getTokensByIndex(count, index + 1, cb)\n              //     }\n              //   })\n              // })\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _getTokensByIndex.apply(this, arguments);\n  }\n\n  function getOwner(_x3, _x4) {\n    return _getOwner.apply(this, arguments);\n  }\n\n  function _getOwner() {\n    _getOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(tokenId, cb) {\n      var owner;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return emblemContract.ownerOf(tokenId);\n\n            case 2:\n              owner = _context4.sent;\n\n              if (!owners[owner]) {\n                console.log(\"No Owner set yet\");\n                owners[owner] = [{\n                  tokenId: tokenId\n                }];\n              }\n\n              return _context4.abrupt(\"return\", cb(owner));\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _getOwner.apply(this, arguments);\n  }\n\n  var loadCache = function loadCache() {\n    var vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_leader')); // Load vaults from storage before updating from server!\n\n    if (vaults) {\n      setState({\n        loaded: true\n      });\n      setVaults(vaults);\n      setLoadingApi(true);\n    }\n  };\n\n  var saveCache = function saveCache(vaults) {\n    localStorage.setItem((address ? address : account) + '_' + chainId + '_leader', JSON.stringify(vaults)); // Save new state for later\n  };\n\n  var _useState7 = useState(''),\n      acct = _useState7[0],\n      setAcct = _useState7[1];\n\n  useEffect(function () {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [account, acct]);\n\n  var _useState8 = useState(chainId),\n      chain = _useState8[0],\n      setChain = _useState8[1];\n\n  useEffect(function () {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(function () {\n    account && chainId ? getVaults() : setState({\n      loaded: true\n    });\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, vaults.length ? vaults.map(function (vault, index) {\n    var pieces = location.pathname.split('/');\n    pieces.pop();\n    var url = location.origin + pieces.join('/') + '/vault?id=' + vault.tokenId;\n    var flexSettings = {\n      flex: '1',\n      minW: '300px',\n      maxW: '300px',\n      borderWidth: '1px',\n      color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    var redirect = function redirect() {\n      location.href = url;\n    };\n\n    return __jsx(Box, _extends({\n      key: index\n    }, flexSettings, {\n      onClick: redirect,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }\n    }), __jsx(Text, {\n      fontWeight: \"semibold\",\n      textAlign: \"center\",\n      mt: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }, vault.name, !vault[\"private\"] ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n      align: \"center\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }, __jsx(Image, {\n      src: validImage(vault.image) ? vault.image : 'https://circuitsofvalue.com/public/coval-logo.png',\n      p: 2,\n      width: \"250px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 19\n      }\n    })), __jsx(Box, {\n      d: \"flex\",\n      alignItems: \"baseline\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }, __jsx(Box, {\n      color: \"gray.500\",\n      fontWeight: \"semibold\",\n      letterSpacing: \"wide\",\n      fontSize: \"sm\",\n      ml: \"2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 19\n      }\n    }, vault[\"private\"] ? __jsx(React.Fragment, null, __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 25\n      }\n    }, \"Contents hidden. Click to view the vault and unlock values.\")) : vault.values.length ? vault.values.map(function (coin, index) {\n      if (index < 4) return __jsx(Text, {\n        key: coin.name,\n        isTruncated: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 29\n        }\n      }, coin.name, \": \", coin.balance);else if (index == 4) return __jsx(Text, {\n        fontWeight: \"bold\",\n        mt: 2,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 29\n        }\n      }, \"... Click to see the rest ...\");\n    }) : __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 23\n      }\n    }, \"Nothing in here! \", __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 42\n      }\n    }), \"Click to fill 'er up!\"))), __jsx(Stack, {\n      align: \"center\",\n      mt: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }, vault.status == 'claimed' ? __jsx(Text, {\n      color: \"green.500\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 48\n      }\n    }, \"CLAIMED\") : null));\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }\n  }, \"YOU DON'T SEEM TO HAVE ANY VAULTS.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }, \"CREATE ONE HERE!\")), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }, \"Supply: \", totalSupply)));\n}\n\n_s(LeaderBoard, \"rH33RJQ+tKinz6V8oAoth4JUSsk=\", false, function () {\n  return [useRouter, useWeb3React, useContract];\n});\n\n_c = LeaderBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeaderBoard\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Leaderboard.tsx"],"names":["Box","Flex","Text","Link","Image","Stack","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","validImage","EMBLEM_API","contractAddresses","useContract","LeaderBoard","query","account","chainId","vaults","setVaults","loaded","state","setState","loadingApi","setLoadingApi","address","setAddress","owners","setOwners","totalSupply","setTotalSupply","emblemContract","emblemVault","emblemAbi","getVaults","getOwners","loadCache","fetch","method","headers","service","toString","response","json","jsonData","saveCache","getTokensByIndex","console","log","index","cb","count","Number","tokenByIndex","tokenId","getOwner","owner","ownerOf","JSON","parse","localStorage","getItem","setItem","stringify","acct","setAcct","chain","setChain","length","map","vault","pieces","location","pathname","split","pop","url","origin","join","flexSettings","flex","minW","maxW","borderWidth","color","mx","mb","rounded","overflow","borderColor","status","cursor","redirect","href","name","totalValue","image","values","coin","balance"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Spinner } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\n\nexport default function LeaderBoard() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [address, setAddress] = useState(query.address)\n  const [owners, setOwners] = useState({})\n  const [totalSupply, setTotalSupply] = useState({})\n\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const getVaults = async () => {\n    getOwners()\n    loadCache()\n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString(),\n        },\n      })\n      const jsonData = await response.json()\n      setState({ loaded: true })\n      setVaults(jsonData)\n      saveCache(jsonData)\n      setLoadingApi(false)\n      // console.log(jsonData)\n    } catch (error) {}\n  }\n\n  const getOwners = async () => {\n    let totalSupply = await (emblemContract as Contract).totalSupply()\n    setTotalSupply(totalSupply.toString())\n    getTokensByIndex(0, () => {\n      console.log('owners', owners)\n    })\n    // ; (emblemContract as Contract).totalSupply().then((supply) => {\n    //   getTokensByIndex(Number(supply.toString()), 0, () => {\n    //     console.log('owners', owners)\n    //   })\n    // })\n  }\n\n  async function getTokensByIndex(index, cb) {\n    let count = Number(totalSupply)\n    let tokenId = await (emblemContract as Contract).tokenByIndex(index)\n    console.log('tokenId', tokenId.toString())\n    getOwner(tokenId.toString(), (owner)=>{\n      console.log('owner', owner)\n    })\n    // ; (emblemContract as Contract).tokenByIndex(index).then((err, tokenId) => {\n    //   getOwner(tokenId, () => {\n    //     if (count - 1 < index + 1) {\n    //       return cb()\n    //     } else {\n    //       return getTokensByIndex(count, index + 1, cb)\n    //     }\n    //   })\n    // })\n  }\n\n  async function getOwner(tokenId, cb) {\n    let owner = await (emblemContract as Contract).ownerOf(tokenId)\n    if (!owners[owner]) {\n      console.log(\"No Owner set yet\")\n      owners[owner] = [{ tokenId: tokenId}]\n    }\n    return cb(owner)\n    // ; (emblemContract as Contract).ownerOf(tokenId).then((err, address) => {\n    //   if (address === '0x0000000000000000000000000000000000000000' || address === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180') {\n    //     return cb()\n    //   }\n    //   if (!owners[address]) {\n    //     owners[address] = [{ tokenId: tokenId.toString() }]\n    //     return cb()\n    //   } else {\n    //     owners[address].push({ tokenId: tokenId.toString() })\n    //     return cb()\n    //   }\n    // })\n  }\n\n  const loadCache = () => {\n    let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_leader')) // Load vaults from storage before updating from server!\n    if (vaults) {\n      setState({ loaded: true })\n      setVaults(vaults)\n      setLoadingApi(true)\n    }\n  }\n\n  const saveCache = (vaults) => {\n    localStorage.setItem((address ? address : account) + '_' + chainId + '_leader', JSON.stringify(vaults)) // Save new state for later\n  }\n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    account && chainId ? getVaults() : setState({ loaded: true })\n  }, [])\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\" mt={10}>\n        {vaults.length ? (\n          vaults.map((vault, index) => {\n            let pieces = location.pathname.split('/')\n            pieces.pop()\n            let url = location.origin + pieces.join('/') + '/vault?id=' + vault.tokenId\n            const flexSettings = {\n              flex: '1',\n              minW: '300px',\n              maxW: '300px',\n              borderWidth: '1px',\n              color: 'white',\n              mx: '6',\n              mb: '6',\n              rounded: 'lg',\n              overflow: 'hidden',\n              borderColor: vault.status == 'claimed' ? 'green !important' : '',\n              cursor: 'pointer',\n            }\n            const redirect = function () {\n              location.href = url\n            }\n            return (\n              <Box key={index} {...flexSettings} onClick={redirect}>\n                <Text fontWeight=\"semibold\" textAlign=\"center\" mt={2}>\n                  {vault.name}\n                  {!vault.private ? ': ~$' + vault.totalValue : null}\n                </Text>\n                <Stack align=\"center\">\n                  <Image\n                    src={validImage(vault.image) ? vault.image : 'https://circuitsofvalue.com/public/coval-logo.png'}\n                    p={2}\n                    width=\"250px\"\n                  />\n                </Stack>\n                <Box d=\"flex\" alignItems=\"baseline\">\n                  <Box color=\"gray.500\" fontWeight=\"semibold\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                    {vault.private ? (\n                      <>\n                        <Text>Contents hidden. Click to view the vault and unlock values.</Text>\n                      </>\n                    ) : vault.values.length ? (\n                      vault.values.map((coin, index) => {\n                        if (index < 4)\n                          return (\n                            <Text key={coin.name} isTruncated>\n                              {coin.name}: {coin.balance}\n                            </Text>\n                          )\n                        else if (index == 4)\n                          return (\n                            <Text fontWeight=\"bold\" mt={2}>\n                              ... Click to see the rest ...\n                            </Text>\n                          )\n                      })\n                    ) : (\n                      <Text>\n                        Nothing in here! <br />\n                        Click to fill 'er up!\n                      </Text>\n                    )}\n                  </Box>\n                </Box>\n                <Stack align=\"center\" mt={3}>\n                  {vault.status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n              </Box>\n            )\n          })\n        ) : (\n          <Text>\n            YOU DON'T SEEM TO HAVE ANY VAULTS.{' '}\n            <Link color=\"#638cd8\" href=\"../create\">\n              CREATE ONE HERE!\n            </Link>\n          </Text>\n        )}\n        <Text>Supply: {totalSupply}</Text>\n      </Flex>\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}