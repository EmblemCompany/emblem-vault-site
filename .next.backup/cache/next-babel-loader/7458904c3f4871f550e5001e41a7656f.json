{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Leaderboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nexport default function LeaderBoard() {\n  _s();\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useState = useState([]),\n      vaults = _useState[0],\n      setVaults = _useState[1];\n\n  var _useState2 = useState({\n    loaded: false\n  }),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(false),\n      loadingApi = _useState3[0],\n      setLoadingApi = _useState3[1];\n\n  var _useState4 = useState(query.address),\n      address = _useState4[0],\n      setAddress = _useState4[1];\n\n  var _useState5 = useState({}),\n      owners = _useState5[0],\n      setOwners = _useState5[1];\n\n  var _useState6 = useState(0),\n      totalSupply = _useState6[0],\n      setTotalSupply = _useState6[1];\n\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  var getVaults = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              getOwners();\n              loadCache();\n              _context.prev = 2;\n              _context.next = 5;\n              return fetch(EMBLEM_API + '/vaults/' + (address ? address : account), {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  chainId: chainId.toString()\n                }\n              });\n\n            case 5:\n              response = _context.sent;\n              _context.next = 8;\n              return response.json();\n\n            case 8:\n              jsonData = _context.sent;\n              setState({\n                loaded: true\n              });\n              setVaults(jsonData);\n              saveCache(jsonData);\n              setLoadingApi(false); // console.log(jsonData)\n\n              _context.next = 17;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](2);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 15]]);\n    }));\n\n    return function getVaults() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getOwners = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var totalSupply;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return emblemContract.totalSupply();\n\n            case 2:\n              totalSupply = _context2.sent;\n              setTotalSupply(totalSupply.toString());\n              getTokensByIndex(0, function () {\n                console.log('owners', owners);\n              }); // ; (emblemContract as Contract).totalSupply().then((supply) => {\n              //   getTokensByIndex(Number(supply.toString()), 0, () => {\n              //     console.log('owners', owners)\n              //   })\n              // })\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getOwners() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  function getTokensByIndex(_x, _x2) {\n    return _getTokensByIndex.apply(this, arguments);\n  }\n\n  function _getTokensByIndex() {\n    _getTokensByIndex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(index, cb) {\n      var count, tokenId;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              count = Number(totalSupply);\n              _context3.next = 3;\n              return emblemContract.tokenByIndex(index);\n\n            case 3:\n              tokenId = _context3.sent;\n              console.log('tokenId', tokenId.toString());\n              getOwner(tokenId.toString(), function () {\n                if (count - 1 < index + 1) {\n                  return cb();\n                } else {\n                  return getTokensByIndex(index + 1, cb);\n                }\n              }); // ; (emblemContract as Contract).tokenByIndex(index).then((err, tokenId) => {\n              //   getOwner(tokenId, () => {\n              //     if (count - 1 < index + 1) {\n              //       return cb()\n              //     } else {\n              //       return getTokensByIndex(count, index + 1, cb)\n              //     }\n              //   })\n              // })\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _getTokensByIndex.apply(this, arguments);\n  }\n\n  function getOwner(_x3, _x4) {\n    return _getOwner.apply(this, arguments);\n  }\n\n  function _getOwner() {\n    _getOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(tokenId, cb) {\n      var owner;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return emblemContract.ownerOf(tokenId);\n\n            case 2:\n              owner = _context4.sent;\n\n              if (!(owner === '0x0000000000000000000000000000000000000000' || owner === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180')) {\n                _context4.next = 5;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", cb());\n\n            case 5:\n              if (!owners[owner]) {\n                owners[owner] = [{\n                  tokenId: tokenId\n                }];\n              } else {\n                owners[owner].push({\n                  tokenId: tokenId.toString()\n                });\n              }\n\n              return _context4.abrupt(\"return\", cb());\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _getOwner.apply(this, arguments);\n  }\n\n  var loadCache = function loadCache() {\n    var vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_leader')); // Load vaults from storage before updating from server!\n\n    if (vaults) {\n      setState({\n        loaded: true\n      });\n      setVaults(vaults);\n      setLoadingApi(true);\n    }\n  };\n\n  var saveCache = function saveCache(vaults) {\n    localStorage.setItem((address ? address : account) + '_' + chainId + '_leader', JSON.stringify(vaults)); // Save new state for later\n  };\n\n  var _useState7 = useState(''),\n      acct = _useState7[0],\n      setAcct = _useState7[1];\n\n  useEffect(function () {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [account, acct]);\n\n  var _useState8 = useState(chainId),\n      chain = _useState8[0],\n      setChain = _useState8[1];\n\n  useEffect(function () {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(function () {\n    account && chainId ? getVaults() : setState({\n      loaded: true\n    });\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, \"Supply: \", totalSupply)));\n}\n\n_s(LeaderBoard, \"krPKi5bZrroGMLoktnfMoQoIzME=\", false, function () {\n  return [useRouter, useWeb3React, useContract];\n});\n\n_c = LeaderBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeaderBoard\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Leaderboard.tsx"],"names":["Flex","Text","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","EMBLEM_API","contractAddresses","useContract","LeaderBoard","query","account","chainId","vaults","setVaults","loaded","state","setState","loadingApi","setLoadingApi","address","setAddress","owners","setOwners","totalSupply","setTotalSupply","emblemContract","emblemVault","emblemAbi","getVaults","getOwners","loadCache","fetch","method","headers","service","toString","response","json","jsonData","saveCache","getTokensByIndex","console","log","index","cb","count","Number","tokenByIndex","tokenId","getOwner","ownerOf","owner","push","JSON","parse","localStorage","getItem","setItem","stringify","acct","setAcct","chain","setChain"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Spinner } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\n\nexport default function LeaderBoard() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [address, setAddress] = useState(query.address)\n  const [owners, setOwners] = useState({})\n  const [totalSupply, setTotalSupply] = useState(0)\n\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const getVaults = async () => {\n    getOwners()\n    loadCache()\n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString(),\n        },\n      })\n      const jsonData = await response.json()\n      setState({ loaded: true })\n      setVaults(jsonData)\n      saveCache(jsonData)\n      setLoadingApi(false)\n      // console.log(jsonData)\n    } catch (error) {}\n  }\n\n  const getOwners = async () => {\n    let totalSupply = await (emblemContract as Contract).totalSupply()\n    setTotalSupply(totalSupply.toString())\n    getTokensByIndex(0, () => {\n      console.log('owners', owners)\n    })\n    // ; (emblemContract as Contract).totalSupply().then((supply) => {\n    //   getTokensByIndex(Number(supply.toString()), 0, () => {\n    //     console.log('owners', owners)\n    //   })\n    // })\n  }\n\n  async function getTokensByIndex(index, cb) {\n    let count = Number(totalSupply)\n    let tokenId = await (emblemContract as Contract).tokenByIndex(index)\n    console.log('tokenId', tokenId.toString())\n    getOwner(tokenId.toString(), ()=>{\n      if (count - 1 < index + 1) {\n          return cb()\n        } else {\n          return getTokensByIndex(index + 1, cb)\n        }\n    })\n    // ; (emblemContract as Contract).tokenByIndex(index).then((err, tokenId) => {\n    //   getOwner(tokenId, () => {\n    //     if (count - 1 < index + 1) {\n    //       return cb()\n    //     } else {\n    //       return getTokensByIndex(count, index + 1, cb)\n    //     }\n    //   })\n    // })\n  }\n\n  async function getOwner(tokenId, cb) {\n    let owner = await (emblemContract as Contract).ownerOf(tokenId)\n    if (owner === '0x0000000000000000000000000000000000000000' || owner === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180') {\n      return cb()\n    }\n    if (!owners[owner]) {\n      owners[owner] = [{ tokenId: tokenId}]\n    } else {\n      owners[owner].push({ tokenId: tokenId.toString() })\n    }\n    return cb()\n    // ; (emblemContract as Contract).ownerOf(tokenId).then((err, address) => {\n    //   if (address === '0x0000000000000000000000000000000000000000' || address === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180') {\n    //     return cb()\n    //   }\n    //   if (!owners[address]) {\n    //     owners[address] = [{ tokenId: tokenId.toString() }]\n    //     return cb()\n    //   } else {\n    //     owners[address].push({ tokenId: tokenId.toString() })\n    //     return cb()\n    //   }\n    // })\n  }\n\n  const loadCache = () => {\n    let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_leader')) // Load vaults from storage before updating from server!\n    if (vaults) {\n      setState({ loaded: true })\n      setVaults(vaults)\n      setLoadingApi(true)\n    }\n  }\n\n  const saveCache = (vaults) => {\n    localStorage.setItem((address ? address : account) + '_' + chainId + '_leader', JSON.stringify(vaults)) // Save new state for later\n  }\n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    account && chainId ? getVaults() : setState({ loaded: true })\n  }, [])\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n        <Text>Supply: {totalSupply}</Text>\n      </Flex>\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}