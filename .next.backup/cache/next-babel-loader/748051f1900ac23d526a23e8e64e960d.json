{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/partials/BridgeDeposits.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useWeb3React } from '@web3-react/core';\nimport { useState } from 'react';\nimport { EMBLEM_API } from '../../constants';\nimport { fromContractValue, CHAIN_ID_NAMES } from '../../utils';\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  }\n});\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return {\n    name,\n    calories,\n    fat,\n    carbs,\n    protein\n  };\n}\n\nlet rows = [//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  //   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  //   createData('Eclair', 262, 16.0, 24, 6.0),\n  //   createData('Cupcake', 305, 3.7, 67, 4.3),\n  //   createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\nexport default function BridgeDeposits(props) {\n  let previousChainId;\n  const {\n    account\n  } = useWeb3React();\n  const {\n    0: showPending,\n    1: setShowPending\n  } = useState(false);\n  const {\n    0: hasDataRows,\n    1: setHasDataRows\n  } = useState(false);\n  const {\n    0: dataRows,\n    1: setDataRows\n  } = useState([]);\n  const {\n    0: chainId,\n    1: setChainId\n  } = useState(props.chainId);\n  const classes = useStyles();\n  React.useEffect(() => {\n    console.log(chainId, props.chainId);\n\n    if (chainId !== props.chainId) {\n      setChainId(props.chainId);\n      console.log(\"refresh data\");\n      setHasDataRows(false);\n    }\n  });\n  !hasDataRows ? getDeposits(deposits => {\n    setHasDataRows(true);\n    setDataRows(deposits);\n  }) : null;\n  return __jsx(React.Fragment, null, __jsx(TableContainer, {\n    component: Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, __jsx(Table, {\n    className: classes.table,\n    \"aria-label\": \"simple table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }, __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 29\n    }\n  }, \"Amount \"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 29\n    }\n  }, \"For\"), __jsx(TableCell, {\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }, \"Hash\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 29\n    }\n  }, \"To Chain\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  }, \"Status\"))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }, dataRows.sort((a, b) => b.blockNumber > a.blockNumber ? 1 : -1).map(row => Number(row.returnValues.amount) < 200000000000000 ? __jsx(TableRow, {\n    className: account == row.returnValues.sender ? \"MyRow\" : \"\",\n    key: row.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 33\n    }\n  }, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 37\n    }\n  }, Number(fromContractValue(row.returnValues.amount, 'gwei') * 10).toLocaleString()), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 37\n    }\n  }, row.returnValues.sender), __jsx(TableCell, {\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 37\n    }\n  }, row.transactionHash), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 37\n    }\n  }, CHAIN_ID_NAMES[row.returnValues.chainId]), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 37\n    }\n  }, row.transferred ? \"Complete\" : \"Pending\")) : null)))));\n\n  async function getDeposits(cb) {\n    const responce = await fetch(EMBLEM_API + '/transfersOutDb?pending=' + showPending, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'chainid': chainId.toString(),\n        'service': 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  }\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/partials/BridgeDeposits.tsx"],"names":["React","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","useWeb3React","useState","EMBLEM_API","fromContractValue","CHAIN_ID_NAMES","useStyles","table","minWidth","createData","name","calories","fat","carbs","protein","rows","BridgeDeposits","props","previousChainId","account","showPending","setShowPending","hasDataRows","setHasDataRows","dataRows","setDataRows","chainId","setChainId","classes","useEffect","console","log","getDeposits","deposits","sort","a","b","blockNumber","map","row","Number","returnValues","amount","sender","toLocaleString","transactionHash","transferred","cb","responce","fetch","method","headers","toString","jsonData","json"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport useEffect from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Checkbox } from '@chakra-ui/core'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useState } from 'react'\nimport { EMBLEM_API } from '../../constants'\nimport { fromContractValue, CHAIN_ID_NAMES } from '../../utils'\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\nfunction createData(name: string, calories: number, fat: number, carbs: number, protein: number) {\n    return { name, calories, fat, carbs, protein };\n}\n\n\n\nlet rows = [\n    //   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n    //   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n    //   createData('Eclair', 262, 16.0, 24, 6.0),\n    //   createData('Cupcake', 305, 3.7, 67, 4.3),\n    //   createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\n\ninterface DepositProps {\n    chainId: number;\n  }\n\nexport default function BridgeDeposits(props: DepositProps) {\n    let previousChainId\n    \n    const { account } = useWeb3React()\n    const [showPending, setShowPending] = useState(false)\n    const [hasDataRows, setHasDataRows] = useState(false)\n    const [dataRows, setDataRows] = useState([])\n    const [chainId, setChainId] = useState(props.chainId)\n    const classes = useStyles();\n\n    React.useEffect(()=>{\n        console.log(chainId, props.chainId)\n        if (chainId !== props.chainId) {\n            setChainId(props.chainId)\n            console.log(\"refresh data\")\n            setHasDataRows(false)\n        }        \n    })\n    \n    !hasDataRows ? (\n        getDeposits(deposits => {\n            setHasDataRows(true)\n            setDataRows(deposits)\n        })\n    ) : null\n    return (\n        <>\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Amount </TableCell>\n                            <TableCell align=\"right\">For</TableCell>\n                            <TableCell align=\"left\">Hash</TableCell>\n                            <TableCell align=\"right\">To Chain</TableCell>\n                            <TableCell align=\"right\">Status</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {dataRows.sort((a, b) => (b.blockNumber > a.blockNumber) ? 1 : -1).map((row) => (\n                            Number(row.returnValues.amount) < 200000000000000 ? \n                            (\n                                <TableRow className={account == row.returnValues.sender ? \"MyRow\" : \"\"} key={row.name}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {Number(fromContractValue(row.returnValues.amount, 'gwei')*10).toLocaleString()}\n                                    </TableCell>\n                                    <TableCell align=\"right\">{row.returnValues.sender}</TableCell>\n                                    <TableCell align=\"left\">{row.transactionHash}</TableCell>\n                                    <TableCell align=\"right\">{CHAIN_ID_NAMES[row.returnValues.chainId]}</TableCell>\n                                    <TableCell align=\"right\">{row.transferred? \"Complete\": \"Pending\"}</TableCell>\n                                </TableRow>\n                            ) : null\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n\n    async function getDeposits(cb) {\n\n        const responce = await fetch(EMBLEM_API + '/transfersOutDb?pending='+showPending, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'chainid': chainId.toString(),\n                'service': 'evmetadata',\n            },\n        })\n        const jsonData = await responce.json()\n        return cb(jsonData)\n    }\n}"]},"metadata":{},"sourceType":"module"}