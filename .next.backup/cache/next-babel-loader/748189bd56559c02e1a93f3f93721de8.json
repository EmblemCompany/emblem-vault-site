{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nexport default function PnL() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: stats,\n    1: setStats\n  } = useState([]);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address || \"0x3B31925EeC78dA3CF15c4503604c13b0eEBC57e5\");\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(0);\n  const {\n    0: limit,\n    1: setLimit\n  } = useState(10);\n  const {\n    0: shouldFetchData,\n    1: setShouldFetchData\n  } = useState(false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  useEffect(() => {\n    if (state.loaded == false && !loadingApi) {\n      setLoadingApi(false);\n      getPnL();\n    }\n  }, []);\n  useEffect(() => {\n    if (shouldFetchData) {\n      console.log(\"Should load api after setting consts\", offset);\n      setShouldFetchData(false);\n      getPnL();\n    } else {\n      console.log(\"wtf\");\n    }\n  }, [shouldFetchData, offset]);\n\n  const fetchData = async () => {\n    console.log('setting new offset to', offset + limit);\n    setOffset(offset + limit);\n    setShouldFetchData(true);\n  };\n\n  const getPnL = async () => {\n    console.log(\"getting logs\");\n    fetch('https://api.emblemvault.io/s:osautomate/offer/' + address + '?limit=' + limit + '&offset=' + offset, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(async function (response) {\n      setLoadingApi(false);\n      setState({\n        loaded: true\n      });\n      let jsonData = await response.json();\n      setStats(stats.concat(jsonData.intelligences));\n      console.log(jsonData);\n\n      if (jsonData.intelligences.length == 0) {\n        setHasMore(false);\n      }\n    });\n  };\n\n  return __jsx(Loader, {\n    loaded: state.loaded\n  }, loadingApi ? __jsx(Refreshing, null) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10\n  }, __jsx(Stack, {\n    align: \"center\"\n  }, stats.length > 0 ? __jsx(React.Fragment, null, __jsx(InfiniteScroll, {\n    height: 200,\n    dataLength: stats.length //This is important field to render the next data\n    ,\n    next: fetchData,\n    hasMore: hasMore,\n    loader: __jsx(Refreshing, null),\n    endMessage: __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(\"b\", null, \"Yay! You have seen it all\"))\n  }, stats.map((item, index) => {\n    return __jsx(Text, {\n      key: index\n    }, item.collection, \" : \", item.name ? item.name : item.tokenId);\n  }))) : null)));\n}","map":null,"metadata":{},"sourceType":"module"}