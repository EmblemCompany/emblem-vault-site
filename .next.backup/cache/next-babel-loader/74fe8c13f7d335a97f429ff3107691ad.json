{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx\",\n    _s3 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Text, Stack, Button, useColorMode, Select, Input } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR, contractAddresses } from '../constants';\nimport { useWeb3React } from '@web3-react/core';\nimport { NETWORK_SHORTNAMES } from '../utils'; // import { useContract } from '../hooks'\n\nimport { Contract } from '@ethersproject/contracts';\nexport var EMBLEM_API = 'https://api.emblemvault.io';\nexport default function OfferModal(_ref) {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$(),\n      _this = this;\n\n  var isOpen = _ref.isOpen,\n      onClose = _ref.onClose,\n      contract = _ref.contract;\n\n  //   const address = addrAddr\n  //   const coin = addrCoin\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useState = useState(false),\n      copied = _useState[0],\n      setCopied = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      loaded = _useState3[0],\n      setLoaded = _useState3[1];\n\n  var _useState4 = useState({\n    address: '',\n    balance: 0,\n    tokenType: '',\n    name: ''\n  }),\n      offeringToken = _useState4[0],\n      setOfferingToken = _useState4[1];\n\n  var _useState5 = useState([]),\n      tokenBalances = _useState5[0],\n      setTokenBalances = _useState5[1];\n\n  var _useState6 = useState(0),\n      offeringTokenBalance = _useState6[0],\n      setOfferingTokenBalance = _useState6[1];\n\n  var _useState7 = useState(''),\n      acct = _useState7[0],\n      setAcct = _useState7[1];\n\n  var _useState8 = useState(0),\n      decimals = _useState8[0],\n      setDecimals = _useState8[1];\n\n  var _useState9 = useState(0),\n      allowance = _useState9[0],\n      setAllowance = _useState9[1];\n\n  var getErc20Contract = function getErc20Contract(address) {\n    _s();\n\n    console.log(\"contract\", address);\n    return useContract(address, contractAddresses.covalAbi, true);\n  };\n\n  _s(getErc20Contract, \"OieRxpBRupXKKSB/Daj7yBGbdgo=\", false, function () {\n    return [useContract];\n  });\n\n  var getTradeContract = function getTradeContract() {\n    _s2();\n\n    return useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true);\n  };\n\n  _s2(getTradeContract, \"OieRxpBRupXKKSB/Daj7yBGbdgo=\", false, function () {\n    return [useContract];\n  });\n\n  var useContract = function useContract(address, ABI) {\n    var withSigner = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return new Contract(address, ABI, withSigner ? library.getSigner(account).connectUnchecked() : library);\n  };\n\n  useEffect(function () {\n    if (account && acct != account) {\n      setAcct(account);\n      setLoaded(false);\n    }\n  }, [account, acct]);\n  useEffect(function () {\n    if (copied) {\n      var timeout = setTimeout(function () {\n        setCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [copied]);\n  useEffect(function () {\n    if (!loaded && !loading) {\n      setLoading(true);\n      getBalances(account, /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(balances) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  setTokenBalances(balances);\n                  setLoading(false);\n                  setLoaded(true);\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  });\n\n  var handleApprove = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address) {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              contract = getErc20Contract(address);\n              console.log('decimals', decimals);\n              _context2.next = 4;\n              return contract.approve(contractAddresses.nftrade[chainId], offeringTokenBalance * Math.pow(10, +decimals));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleApprove(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var getContractInfo = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(address) {\n      var contract, _dec;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              contract = getErc20Contract(address);\n              console.log(contract);\n              _context3.next = 4;\n              return contract.decimals();\n\n            case 4:\n              _dec = _context3.sent;\n              setDecimals(_dec);\n              _context3.t0 = setAllowance;\n              _context3.next = 9;\n              return contract.allowance(account, contractAddresses.nftrade[chainId]).then(function (balance) {\n                return (balance * Math.pow(10, -_dec)).toString();\n              });\n\n            case 9:\n              _context3.t1 = _context3.sent;\n              (0, _context3.t0)(_context3.t1);\n              _context3.t2 = setOfferingTokenBalance;\n              _context3.next = 14;\n              return contract.balanceOf(account).then(function (balance) {\n                return (balance * Math.pow(10, -_dec)).toString();\n              });\n\n            case 14:\n              _context3.t3 = _context3.sent;\n              (0, _context3.t2)(_context3.t3);\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getContractInfo(_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var getBalances = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return fetch(EMBLEM_API + '/' + NETWORK_SHORTNAMES[chainId] + '/balance/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context4.sent;\n              _context4.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context4.sent;\n              return _context4.abrupt(\"return\", cb(jsonData.values));\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function getBalances(_x4, _x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  function copyWithFlag(content) {\n    copy(content);\n    setCopied(true);\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    color: COLOR[colorMode],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, \"Offer\")), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }), __jsx(Stack, {\n    mt: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }, account, \" network: \", NETWORK_SHORTNAMES[chainId]), __jsx(Select, {\n    w: \"100%\",\n    value: offeringToken.address,\n    onChange: function onChange(e) {\n      var token = tokenBalances.filter(function (item) {\n        return item.address == e.target.value;\n      })[0];\n      setOfferingToken(token);\n      token.tokenType == \"ERC-20\" ? getContractInfo(token.address) : null;\n      console.log(tokenBalances.filter(function (item) {\n        return item.address == e.target.value;\n      })[0]);\n      console.log(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, __jsx(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 21\n    }\n  }, \"Choose a Token\"), tokenBalances.map(function (coin, index) {\n    if (coin.tokenType !== 'native') return __jsx(\"option\", {\n      value: coin.address,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 25\n      }\n    }, coin.name);\n  })), offeringToken.balance > 0 && offeringToken.tokenType == \"ERC-20\" && allowance > 0 ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 25\n    }\n  }, \"Max \", offeringTokenBalance), __jsx(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 25\n    }\n  })) : null), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, offeringToken.tokenType == 'ERC-20' ? offeringTokenBalance > 0 && allowance == 0 ? __jsx(Button, {\n    onClick: function onClick() {\n      handleApprove(offeringToken.address);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 25\n    }\n  }, \"Approve offer of \", offeringToken.name) : offeringToken && offeringTokenBalance == 0 ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 25\n    }\n  }, \"Insufficient Balance\") : __jsx(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 25\n    }\n  }, \"Make Offer\") : null))), __jsx(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s3(OfferModal, \"rd3YbHKe0cUnFU3VSwwQx+a3G0A=\", false, function () {\n  return [useColorMode, useWeb3React];\n});\n\n_c = OfferModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"OfferModal\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx"],"names":["React","useEffect","useState","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","Text","Stack","Button","useColorMode","Select","Input","copy","COLOR","contractAddresses","useWeb3React","NETWORK_SHORTNAMES","Contract","EMBLEM_API","OfferModal","isOpen","onClose","contract","colorMode","account","chainId","library","copied","setCopied","loading","setLoading","loaded","setLoaded","address","balance","tokenType","name","offeringToken","setOfferingToken","tokenBalances","setTokenBalances","offeringTokenBalance","setOfferingTokenBalance","acct","setAcct","decimals","setDecimals","allowance","setAllowance","getErc20Contract","console","log","useContract","covalAbi","getTradeContract","nftrade","nftradeAbi","ABI","withSigner","getSigner","connectUnchecked","timeout","setTimeout","clearTimeout","getBalances","balances","handleApprove","approve","Math","pow","getContractInfo","_dec","then","toString","balanceOf","cb","fetch","method","headers","service","responce","json","jsonData","values","copyWithFlag","content","e","token","filter","item","target","value","map","coin","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Text,\n  Stack,\n  Button,\n  useColorMode,\n  Select,\n  Input,\n} from '@chakra-ui/core'\nimport copy from 'copy-to-clipboard'\nimport QRCode from 'qrcode.react'\nimport { COLOR, contractAddresses } from '../constants'\nimport { useWeb3React } from '@web3-react/core'\nimport { NETWORK_SHORTNAMES } from '../utils'\n// import { useContract } from '../hooks'\nimport { useTokenBalance, useTokenAllowance, useETHBalance } from '../data'\nimport { Contract, ContractInterface } from '@ethersproject/contracts'\nexport const EMBLEM_API = 'https://api.emblemvault.io'\n\nexport default function OfferModal({\n  isOpen,\n  onClose,\n  contract,\n//   addrAddr,\n}: {\n  isOpen: boolean\n  onClose: () => void\n  contract\n//   addrAddr: string\n}): JSX.Element {\n//   const address = addrAddr\n//   const coin = addrCoin\n\n  const { colorMode } = useColorMode()\n  const { account, chainId, library } = useWeb3React()\n  const [copied, setCopied] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loaded, setLoaded] = useState(false)\n  const [offeringToken, setOfferingToken] = useState({address:'', balance: 0, tokenType:'', name: ''})\n  const [tokenBalances, setTokenBalances] = useState([])\n  const [offeringTokenBalance, setOfferingTokenBalance] = useState(0)\n  const [acct, setAcct] = useState('')\n  const [decimals, setDecimals] = useState(0)\n  const [allowance, setAllowance] = useState(0)\n  \n  \n  const getErc20Contract = (address) =>{\n    console.log(\"contract\", address)\n    return useContract(address, contractAddresses.covalAbi, true)\n  }\n\n  const getTradeContract = ()=>{\n    return useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true)\n  }\n\n  const useContract = (address?: string, ABI?: ContractInterface, withSigner = false): Contract | undefined => {\n    return new Contract(address, ABI, withSigner ? library.getSigner(account).connectUnchecked() : library)\n  }\n\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setLoaded(false)\n    }\n  }, [account, acct])\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [copied])\n\n  useEffect(() => {\n      if (!loaded && !loading) {\n        setLoading(true)\n        getBalances(account, async balances =>{\n            setTokenBalances(balances)\n            setLoading(false)\n            setLoaded(true)\n        })\n      }\n  })\n\n  const handleApprove = async(address)=>{\n    let contract = getErc20Contract(address)\n    console.log('decimals', decimals)\n    await contract.approve(contractAddresses.nftrade[chainId], (offeringTokenBalance * Math.pow(10, +decimals)))\n  }\n\n  const getContractInfo = async (address)=>{\n    let contract = getErc20Contract(address)\n    console.log(contract)\n    let _dec = await contract.decimals()\n    setDecimals(_dec)\n    setAllowance(\n        await contract\n        .allowance(account, contractAddresses.nftrade[chainId])\n        .then(balance=>(balance * Math.pow(10, -_dec)).toString())\n    )\n    setOfferingTokenBalance(\n        await contract\n        .balanceOf(account)\n        .then(balance=>(balance * Math.pow(10, -_dec)).toString())\n    )\n  }\n\n  const getBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/'+NETWORK_SHORTNAMES[chainId]+'/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    // setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n    return cb(jsonData.values)\n  }\n\n  function copyWithFlag(content: string): void {\n    copy(content)\n    setCopied(true)\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent color={COLOR[colorMode]}>\n        <ModalHeader>\n          <Text>Offer</Text>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Stack direction=\"column\">\n            <Stack direction=\"row\" align=\"center\" justify=\"center\">\n              {/* <QRCode value={coin==\"BTC\" ? \"bitcoin:\"+address: address} onClick={() => copyWithFlag(address)} /> */}\n            </Stack>\n\n            <Stack mt=\"6\">\n              <Text>{account} network: {NETWORK_SHORTNAMES[chainId]}</Text>\n                <Select w=\"100%\" value={offeringToken.address}\n                    onChange={(e) => {\n                    let token = tokenBalances.filter((item)=>{return item.address == e.target.value})[0]\n                    setOfferingToken(token)\n                    token.tokenType ==\"ERC-20\" ? getContractInfo(token.address) : null\n                    console.log(tokenBalances.filter((item)=>{return item.address == e.target.value})[0])\n                    console.log(e.target.value)\n                    }}\n                >\n                    <option value=\"0\" >Choose a Token</option>\n                    {tokenBalances.map((coin, index) => {\n                        if (coin.tokenType !== 'native')\n                        return (\n                        <option value={coin.address}>{coin.name}</option>\n                        )\n                    })}\n                </Select>\n                {offeringToken.balance > 0 && offeringToken.tokenType==\"ERC-20\" && allowance > 0 ? (\n                    <>\n                        <Text>Max {offeringTokenBalance}</Text>\n\n                        <Input></Input>\n                    </>\n                ) : null}\n                              \n            </Stack>\n            <Stack direction=\"row\" justify=\"center\">\n                {offeringToken.tokenType =='ERC-20' ? (\n                    offeringTokenBalance > 0 && allowance == 0 ? (\n                        <Button onClick={()=>{handleApprove(offeringToken.address)}}>Approve offer of {offeringToken.name}</Button>\n                    ) : offeringToken && offeringTokenBalance == 0 ? (\n                        <Text>Insufficient Balance</Text>\n                    ) : (\n                        <Button>Make Offer</Button>\n                    )\n                ) : null}\n            \n                \n              {/* <Button onClick={() => copyWithFlag('address')}>\n                {copied ? <Text>Copied!</Text> : <Text isTruncated>{'address'}</Text>}\n              </Button> */}\n            </Stack>\n          </Stack>\n        </ModalBody>\n        <ModalFooter></ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}