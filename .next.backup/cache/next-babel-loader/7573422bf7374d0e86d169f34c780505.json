{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Vault.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, useDisclosure } from '@chakra-ui/core';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { validImage } from '../utils';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport Tilt from 'react-tilt';\nconst AddrModal = dynamic(() => import('./AddrModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./AddrModal')],\n    modules: ['./AddrModal']\n  }\n});\nconst KeysModal = dynamic(() => import('./KeysModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./KeysModal')],\n    modules: ['./KeysModal']\n  }\n});\nexport default function Vault() {\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    query,\n    pathname,\n    replace\n  } = useRouter();\n  const {\n    0: tokenId,\n    1: setTokenId\n  } = useState(query.id);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState('');\n  const {\n    0: vaultDesc,\n    1: setVaultDesc\n  } = useState('');\n  const {\n    0: vaultImage,\n    1: setVaultImage\n  } = useState('');\n  const {\n    0: vaultValues,\n    1: setVaultValues\n  } = useState([]);\n  const {\n    0: vaultAddresses,\n    1: setVaultAddresses\n  } = useState([]);\n  const {\n    0: vaultPrivacy,\n    1: setVaultPrivacy\n  } = useState(false);\n  const {\n    0: vaultChainId,\n    1: setVaultChainId\n  } = useState(null);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: currCoin,\n    1: setCurrCoin\n  } = useState('');\n  const {\n    0: currAddr,\n    1: setCurrAddr\n  } = useState('');\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: allowed,\n    1: setAllowed\n  } = useState(false);\n  const {\n    0: mine,\n    1: setMine\n  } = useState(false);\n  const {\n    0: claiming,\n    1: setClaiming\n  } = useState(false);\n  const {\n    0: status,\n    1: setStatus\n  } = useState('claimed');\n  const {\n    0: claimedBy,\n    1: setClaimedBy\n  } = useState(null);\n  const {\n    0: mnemonic,\n    1: setMnemonic\n  } = useState('');\n  const {\n    0: privKeyBTC,\n    1: setPrivKeyBTC\n  } = useState('');\n  const {\n    0: privKeyETH,\n    1: setPrivKeyETH\n  } = useState('');\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: decryptedEffect,\n    1: setDecryptedEffect\n  } = useState('');\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  const {\n    isOpen: isOpenAddrModal,\n    onOpen: onOpenAddrModal,\n    onClose: onCloseAddrModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenKeysModal,\n    onOpen: onOpenKeysModal,\n    onClose: onCloseKeysModal\n  } = useDisclosure();\n\n  const getVault = async () => {\n    loadCache();\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log(jsonData);\n    setStates(jsonData);\n    saveCache(jsonData);\n    setLoadingApi(false);\n  };\n\n  const setStates = jsonData => {\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setVaultDesc(jsonData.description);\n    setVaultValues(jsonData.values);\n    setVaultDesc(jsonData.description);\n    setVaultAddresses(jsonData.addresses);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : 4);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    }\n\n    setState({\n      loaded: true\n    });\n    let isPvt = jsonData.addresses.filter(item => {\n      return item.address.includes('private:');\n    }).length > 0;\n    console.log(\"pvt\", isPvt);\n    setVaultPrivacy(isPvt);\n  };\n\n  const loadCache = () => {\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  const saveCache = vault => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature\n    });\n    const responce = await fetch(EMBLEM_API + '/verify/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  };\n\n  const getContractStates = async () => {\n    let owner = await emblemContract.ownerOf(tokenId);\n    setMine(owner === account);\n\n    if (mine) {\n      setAllowed(true);\n    }\n\n    console.log('status', status, 'claimedBy', claimedBy);\n  };\n\n  const handleApprove = async () => {\n    emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library.getSigner(account).signMessage('Claim: ' + tokenId).then(signature => {\n      getKeys(signature, tokenId, result => {\n        // alert('Mnemonic: ' + result.decrypted.phrase)\n        setMnemonic(result.decrypted.phrase);\n        setPrivKeyBTC('BTC KEY');\n        setPrivKeyETH('ETH KEY');\n        onOpenKeysModal();\n        console.log(result.decrypted);\n      });\n    });\n  };\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({\n      hash\n    }) => {\n      setClaiming(true);\n      setTimeout(() => {\n        setHash(hash);\n        handleSign();\n        onOpenKeysModal();\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    });\n  };\n\n  const startDecryptEffect = async () => {\n    var theLetters = \"abcdefghijklmnopqrstuvwxyz\"; //You can customize what letters it will cycle through\n\n    var ctnt = \"Decrypting\"; // Your text goes here\n\n    var speed = 5; // ms per frame\n\n    var increment = 8; // frames per step. Must be >2\n\n    var clen = ctnt.length;\n    var si = 0;\n    var stri = 0;\n    var block = \"\";\n    var fixed = \"\";\n\n    (function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i);\n        }\n\n        nextFrame(i);\n        si = si + 1;\n      }, speed);\n    })(clen * increment + 1);\n\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n        var letter = theLetters.charAt(num);\n        block = block + letter;\n      }\n\n      if (si == increment - 1) {\n        stri++;\n      }\n\n      if (si == increment) {\n        // Add a letter; \n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1);\n        si = 0;\n      } // $(\"#output\").html(fixed + block);\n\n\n      setDecryptedEffect(fixed + block);\n      block = \"\";\n    }\n  };\n\n  useEffect(() => {\n    getVault();\n  }, []);\n  useEffect(() => {\n    console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId);\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null;\n  });\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n');\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(pass) {\n    startDecryptEffect();\n    console.log(pass);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }\n  }), __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 22\n    }\n  }) : '', __jsx(Tilt, {\n    className: \"Tilt\",\n    options: {\n      max: experimental ? 19 : 0,\n      scale: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    mt: 15,\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  }, vaultChainId != chainId ? __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"orange.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 15\n    }\n  }, \"Vault is on a different network than you are.\") : null, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }\n  }, vaultName), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }\n  }, __jsx(Image, {\n    src: validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png',\n    width: \"250px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 15\n    }\n  })), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 17\n    }\n  }, splitDescription(vaultDesc)))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 19\n    }\n  }, \"Current Contents:\"), vaultPrivacy ? __jsx(React.Fragment, null, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 23\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: e => tryDecrypt(e.target.value),\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 23\n    }\n  })) : vaultValues.length ? vaultValues.map(coin => {\n    return __jsx(Text, {\n      key: coin.name,\n      isTruncated: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 25\n      }\n    }, coin.name, \": \", coin.balance);\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 21\n    }\n  }, \"Nothing in here! Fill 'er up!\"))), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"center\",\n    spacing: \"1rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 17\n    }\n  }, __jsx(ButtonGroup, {\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 19\n    }\n  }, vaultAddresses.map(addr => {\n    return __jsx(Button, {\n      key: addr.address,\n      onClick: () => {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 25\n      }\n    }, \"Put \", addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin, \" In\");\n  })))) : null, status === 'claimed' && claimedBy === account ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 19\n    }\n  }, \"Get Keys\")) : __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 17\n    }\n  }, __jsx(Button, _extends({\n    width: \"100%\",\n    as: \"a\"\n  }, {\n    href: 'https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + contractAddresses.emblemVault[vaultChainId] + '/' + tokenId,\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 19\n    }\n  }), mine ? 'Sell/Gift/Send' : 'Make an Offer')), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 15\n    }\n  }, mine ? __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      if (allowed) {\n        handleClaim();\n      } else {\n        handleApprove();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 19\n    }\n  }, allowed ? 'Claim' : 'Approve') : ''))))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      if (claiming) {\n        setHash(null);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 11\n    }\n  }) : null));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Vault.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","useDisclosure","useWeb3React","useEffect","useState","useRouter","Refreshing","Loader","dynamic","validImage","TransactionToast","EMBLEM_API","BURN_ADDRESS","contractAddresses","useContract","Tilt","AddrModal","KeysModal","Vault","account","chainId","library","query","pathname","replace","tokenId","setTokenId","id","experimental","setExperimental","vaultName","setVaultName","vaultDesc","setVaultDesc","vaultImage","setVaultImage","vaultValues","setVaultValues","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultChainId","setVaultChainId","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","state","setState","loaded","allowed","setAllowed","mine","setMine","claiming","setClaiming","status","setStatus","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","emblemContract","emblemVault","emblemAbi","isOpen","isOpenAddrModal","onOpen","onOpenAddrModal","onClose","onCloseAddrModal","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","getVault","loadCache","responce","fetch","method","headers","service","jsonData","json","console","log","setStates","saveCache","name","image","description","values","addresses","network","isPvt","filter","item","address","includes","length","vault","JSON","parse","localStorage","getItem","setItem","stringify","getKeys","signature","cb","myHeaders","Headers","append","toString","raw","body","redirect","getContractStates","owner","ownerOf","handleApprove","setApprovalForAll","vaultHandler","then","handleSign","getSigner","signMessage","result","decrypted","phrase","handleClaim","transferFrom","setTimeout","startDecryptEffect","theLetters","ctnt","speed","increment","clen","si","stri","block","fixed","rustle","i","nextFrame","pos","num","Math","floor","random","letter","charAt","splitDescription","words","desc","split","trim","tryDecrypt","pass","max","scale","e","target","value","map","coin","balance","addr","href","rel"],"mappings":"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","sourcesContent":["import { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, useDisclosure, Spinner } from '@chakra-ui/core'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { validImage } from '../utils'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\n\nexport default function Vault() {\n  const { account, chainId, library } = useWeb3React()\n  const { query, pathname, replace } = useRouter()\n  const [tokenId, setTokenId] = useState(query.id)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [allowed, setAllowed] = useState(false)\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n\n  const getVault = async () => {\n    loadCache()\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    console.log(jsonData)\n    setStates(jsonData)\n    saveCache(jsonData)\n    setLoadingApi(false)\n  }\n\n  const setStates = (jsonData)=>{\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setVaultDesc(jsonData.description)\n    setVaultValues(jsonData.values)\n    setVaultDesc(jsonData.description)\n    setVaultAddresses(jsonData.addresses)\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : 4)\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    setState({ loaded: true })\n    let isPvt = jsonData.addresses.filter(item=>{return item.address.includes('private:')}).length > 0\n    console.log(\"pvt\", isPvt)\n    setVaultPrivacy(isPvt)\n  }\n\n  const loadCache = ()=>{\n    let vault = JSON.parse(localStorage.getItem(account + '_'+ chainId+'_' + tokenId +'_vault')) // Load vaults from storage before updating from server!\n    if (vault) {\n      setState({ loaded: true })\n      setStates(vault)\n      setLoadingApi(true)\n    }\n  }\n\n  const saveCache = (vault)=>{\n    localStorage.setItem(account + '_'+ chainId+'_' + tokenId +'_vault', JSON.stringify(vault))  // Save new state for later\n  }\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/verify/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    let owner = await emblemContract.ownerOf(tokenId)\n    setMine(owner === account)\n    if (mine) {\n      setAllowed(true)\n    }\n    console.log('status', status, 'claimedBy', claimedBy)\n  }\n\n  const handleApprove = async () => {\n    emblemContract\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + tokenId)\n      .then((signature) => {\n        getKeys(signature, tokenId, (result) => {\n          // alert('Mnemonic: ' + result.decrypted.phrase)\n          setMnemonic(result.decrypted.phrase)\n          setPrivKeyBTC('BTC KEY')\n          setPrivKeyETH('ETH KEY')\n          onOpenKeysModal()\n          console.log(result.decrypted)\n        })\n      })\n  }\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({ hash }: { hash: string }) => {\n      setClaiming(true)\n      setTimeout(() => {\n        setHash(hash)\n        handleSign()\n        onOpenKeysModal()\n      }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    })\n  }\n\n  const startDecryptEffect = async ()=>{\n    var theLetters = \"abcdefghijklmnopqrstuvwxyz\"; //You can customize what letters it will cycle through\n    var ctnt = \"Decrypting\"; // Your text goes here\n    var speed = 5; // ms per frame\n    var increment = 8; // frames per step. Must be >2\n\n        \n    var clen = ctnt.length;       \n    var si = 0;\n    var stri = 0;\n    var block = \"\";\n    var fixed = \"\";\n    (function rustle (i) {          \n      setTimeout(function () {\n        if (--i){rustle(i);}\n        nextFrame(i);\n        si = si + 1;        \n      }, speed);\n      })(clen*increment+1); \n      function nextFrame(pos){\n        for (var i=0; i<clen-stri; i++) {\n          //Random number\n          var num = Math.floor(theLetters.length * Math.random());\n          //Get random letter\n          var letter = theLetters.charAt(num);\n          block = block + letter;\n        }\n        if (si == (increment-1)){\n          stri++;\n        }\n        if (si == increment){\n        // Add a letter; \n        // every speed*10 ms\n        fixed = fixed +  ctnt.charAt(stri - 1);\n        si = 0;\n        }\n        // $(\"#output\").html(fixed + block);\n        setDecryptedEffect(fixed + block)\n        block = \"\";\n      }\n  }\n\n  useEffect(() => {\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null\n  })\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n')\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(pass) {\n    startDecryptEffect()\n    console.log(pass)\n  }\n\n  return (\n    <>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n      />\n\n      <Loader loaded={state.loaded}>\n      {loadingApi ? (<Refreshing/>) : ''}\n      <Tilt className=\"Tilt\" options={{ max : experimental? 19: 0, scale: 1 }}  >      \n        <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n          <Box\n            maxW=\"sm\"\n            borderWidth=\"1px\"\n            borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n            rounded=\"lg\"\n            overflow=\"hidden\"\n            alignItems=\"center\"\n            mt={15}\n            minW={390}\n          >\n            {vaultChainId != chainId ? (\n              <Box\n                mt=\"1\"\n                fontWeight=\"semibold\"\n                as=\"h3\"\n                lineHeight=\"tight\"\n                p={2}\n                textAlign=\"center\"\n                textTransform=\"uppercase\"\n                alignItems=\"center\"\n                color=\"orange.500\"\n              >\n                Vault is on a different network than you are.\n              </Box>\n            ) : null}\n            <Box\n              mt=\"1\"\n              fontWeight=\"semibold\"\n              as=\"h3\"\n              lineHeight=\"tight\"\n              p={2}\n              textAlign=\"center\"\n              textTransform=\"uppercase\"\n              alignItems=\"center\"\n            >\n              {vaultName}\n            </Box>\n            <Stack align=\"center\">\n              <Image\n                src={validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png'}\n                width=\"250px\"\n              />\n            </Stack>\n            <Stack align=\"center\">\n              <Box mt=\"1\" ml=\"4\" lineHeight=\"tight\">\n                <Text as=\"h4\" ml=\"4\" mr=\"4\">\n                  {splitDescription(vaultDesc)}\n                </Text>\n              </Box>\n            </Stack>\n            <Box p=\"6\">\n              <Box d=\"flex\" alignItems=\"baseline\">\n                <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                  <Text as=\"h4\" fontWeight=\"semibold\">\n                    Current Contents:\n                  </Text>\n                  {vaultPrivacy ? (\n                    <>\n                      <Text pb={2} color={decryptedEffect? 'green.500': null } >{decryptedEffect? decryptedEffect : 'Contents hidden. Enter password to unlock.'}</Text>\n                      <Input\n                        type=\"password\"\n                        id=\"vault-password\"\n                        onChange={(e) => tryDecrypt(e.target.value)}\n                        aria-describedby=\"password-helper-text\"\n                      />\n                    </>\n                  ) : vaultValues.length ? (\n                    vaultValues.map((coin) => {\n                      return (\n                        <Text key={coin.name} isTruncated>\n                          {coin.name}: {coin.balance}\n                        </Text>\n                      )\n                    })\n                  ) : (\n                    <Text>Nothing in here! Fill 'er up!</Text>\n                  )}\n                </Box>\n              </Box>\n              {!vaultPrivacy ? (\n              <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                <Stack direction=\"row\" align=\"center\" spacing=\"1rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                  <ButtonGroup spacing={4}>\n                    {vaultAddresses.map((addr) => {\n                      return (\n                        <Button\n                          key={addr.address}\n                          onClick={() => {\n                            setCurrCoin(addr.coin)\n                            setCurrAddr(addr.address)\n                            onOpenAddrModal()\n                          }}\n                        >\n                          Put {addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin} In\n                        </Button>\n                      )\n                    })}\n                  </ButtonGroup>\n                </Stack>\n              </Box> ) : null }\n              {status === 'claimed' && claimedBy === account ? (\n                <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                  <Button width=\"100%\" onClick={handleSign}>\n                    Get Keys\n                  </Button>\n                </Box>\n              ) : (\n                <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                  <Button\n                    width=\"100%\"\n                    as=\"a\"\n                    {...{\n                      href:\n                        'https://' +\n                        (vaultChainId == 4 ? 'rinkeby.' : '') +\n                        'opensea.io/assets/' +\n                        contractAddresses.emblemVault[vaultChainId] +\n                        '/' +\n                        tokenId,\n                      target: '_blank',\n                      rel: 'noopener noreferrer',\n                    }}\n                  >\n                    {mine ? 'Sell/Gift/Send' : 'Make an Offer'}\n                  </Button>\n                </Box>\n              )}\n              <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                {mine ? (\n                  <Button\n                    width=\"100%\"\n                    onClick={() => {\n                      if (allowed) {\n                        handleClaim()\n                      } else {\n                        handleApprove()\n                      }\n                    }}\n                  >\n                    {allowed ? 'Claim' : 'Approve'}\n                  </Button>\n                ) : (\n                  ''\n                )}\n              </Box>\n            </Box>\n          </Box>\n        </Flex>\n      </Tilt>\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming) {\n                setHash(null)\n              }\n            }}\n          />\n        ) : null}\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}