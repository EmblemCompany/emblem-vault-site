{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// import { Box, Flex, Text, Link, Image, Stack, Spinner, useColorMode } from '@chakra-ui/core'\nimport { Box, Flex, Text, Link, Stack, Button, Checkbox, CheckboxGroup, Radio, RadioGroup, Input, useColorMode } from '@chakra-ui/core';\nimport { HStack, VStack } from '@chakra-ui/react';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Embed from './Embed'; // import Select from \"react-dropdown-select\";\n\nimport ReactSelect, { components, createFilter } from 'react-select';\nexport default function Find() {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: pagePosition,\n    1: setPagePosition\n  } = useState(Number(query.start) || 0);\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: true\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    0: shouldFetchData,\n    1: setShouldFetchData\n  } = useState(false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(0);\n  const {\n    0: q,\n    1: setQ\n  } = useState(query && Object.keys(query).length > 0);\n  const {\n    0: hideClaimed,\n    1: setHideClaimed\n  } = useState(false);\n  const {\n    0: hideUnminted,\n    1: setHideUnminted\n  } = useState(false);\n  const {\n    0: assetName,\n    1: setAssetName\n  } = useState(query.name);\n  const {\n    0: tempAssetName,\n    1: setTempAssetName\n  } = useState(assetName || '');\n  const {\n    0: coin,\n    1: setCoin\n  } = useState(query.coin);\n  const {\n    0: tempCoin,\n    1: setTempCoin\n  } = useState(coin || '');\n  const {\n    0: project,\n    1: setProject\n  } = useState(query.project);\n  const {\n    0: tempProject,\n    1: setTempProject\n  } = useState(project || '');\n  const {\n    0: projects,\n    1: setProjects\n  } = useState([]);\n  const {\n    0: loadedProjects,\n    1: setLoadedProjects\n  } = useState(false);\n  const {\n    0: assets,\n    1: setAssets\n  } = useState([]);\n  const {\n    0: loadedAssets,\n    1: setLoadedAssets\n  } = useState(false);\n  const {\n    0: searchType,\n    1: setSearchType\n  } = useState(query.searchType || 'filter');\n  const {\n    0: tempSearchType,\n    1: setTempSearchType\n  } = useState(searchType.toString());\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState(query.vaultName);\n  const {\n    0: tempVaultName,\n    1: setTempVaultName\n  } = useState(vaultName || '');\n  const {\n    0: vaultDescription,\n    1: setVaultDescription\n  } = useState(query.vaultDescription);\n  const {\n    0: tempVaultDescription,\n    1: setTempVaultDescription\n  } = useState(vaultDescription);\n  const {\n    0: network,\n    1: setNetwork\n  } = useState(query.network || null);\n  const {\n    0: balanceChecks,\n    1: setBalanceChecks\n  } = useState(Object.keys(query).filter(key => {\n    return key !== \"vaultName\" && key !== \"vaultDescription\" && key !== \"searchType\";\n  }));\n  const {\n    0: metadataChecks,\n    1: setMetadataChecks\n  } = useState(Object.keys(query).filter(key => {\n    return key !== \"name\" && key !== \"coin\" && key !== \"project\" && key !== \"searchType\";\n  }));\n  const {\n    0: selectedItems,\n    1: setSelectedItems\n  } = useState([]);\n\n  const CustomOption = _ref => {\n    let {\n      children\n    } = _ref,\n        props = _objectWithoutProperties(_ref, [\"children\"]);\n\n    // eslint-disable-next-line no-unused-vars\n    const _props$innerProps = props.innerProps,\n          {\n      onMouseMove,\n      onMouseOver\n    } = _props$innerProps,\n          rest = _objectWithoutProperties(_props$innerProps, [\"onMouseMove\", \"onMouseOver\"]);\n\n    const newProps = _objectSpread(_objectSpread({}, props), {}, {\n      innerProps: rest\n    });\n\n    return __jsx(components.Option, _extends({}, newProps, {\n      className: \"custom-option\"\n    }), children);\n  };\n\n  const PAGE_SIZE = 20;\n\n  const getProjects = async () => {\n    try {\n      const response = await fetch(EMBLEM_API + '/search/projects', {\n        method: 'GET',\n        headers: {\n          service: 'evmetadata'\n        }\n      });\n      let jsonData = await response.json();\n      let formatted = [];\n      jsonData.sort().forEach(item => {\n        formatted.push({\n          value: item,\n          label: item\n        });\n      });\n      setProjects(formatted);\n    } catch (error) {}\n  };\n\n  const getAssets = async () => {\n    try {\n      const response = await fetch(EMBLEM_API + '/search/assets', {\n        method: 'GET',\n        headers: {\n          service: 'evmetadata'\n        }\n      });\n      let jsonData = await response.json();\n      let formatted = [];\n      jsonData.sort().forEach(item => {\n        formatted.push({\n          value: item,\n          label: item\n        });\n      });\n      setAssets(formatted); // console.log(formatted)\n    } catch (error) {}\n  };\n\n  const getVaults = async () => {\n    let body = {};\n\n    if (metadataChecks.length > 0) {\n      body.metadata = {};\n      metadataChecks.forEach(key => {\n        if (key == \"vaultDescription\") {\n          body.metadata[\"description\"] = tempVaultDescription;\n        }\n\n        if (key == \"vaultName\") {\n          body.metadata[\"name\"] = tempVaultName;\n        }\n      });\n    }\n\n    if (balanceChecks.length > 0) {\n      body.balance = {};\n      balanceChecks.forEach(key => {\n        if (key == \"name\") {\n          body.balance[\"name\"] = tempAssetName;\n        }\n\n        if (key == \"coin\") {\n          body.balance[\"coin\"] = tempCoin;\n        }\n\n        if (key == \"project\") {\n          body.balance[\"project\"] = tempProject;\n        }\n      });\n    }\n\n    try {\n      const response = await fetch(EMBLEM_API + '/find/' + tempSearchType + '?start=' + offset + '&size=' + PAGE_SIZE, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify(body)\n      });\n      let jsonData = await response.json();\n      console.log('------ vaults', jsonData);\n      jsonData.length == 0 || jsonData.length < PAGE_SIZE ? setHasMore(false) : setHasMore(true);\n      setVaults(vaults.concat(jsonData));\n      setState({\n        loaded: true\n      });\n      setLoadingApi(false);\n    } catch (error) {}\n  };\n\n  const fetchData = async () => {\n    console.log(offset, PAGE_SIZE, offset + PAGE_SIZE);\n    setOffset(offset + PAGE_SIZE);\n    setShouldFetchData(true);\n  };\n\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  useEffect(() => {\n    if (q && account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [account, acct]);\n  const {\n    0: chain,\n    1: setChain\n  } = useState(chainId);\n  useEffect(() => {\n    if (q && chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    // console.log('here', chainId, chain, account, state)\n    if (q && !account && !state.loaded) {\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    if (shouldFetchData) {\n      console.log('here 1');\n      setShouldFetchData(false);\n      setLoadingApi(true);\n      getVaults();\n    } else {\n      console.log('no fetch');\n    }\n  }, [shouldFetchData]);\n  useEffect(() => {\n    if (q && vaults.length == 0 && !loadingApi) {\n      console.log('here 2');\n      setShouldFetchData(true); // getVaults()\n    } else {\n      console.log('no fetch', q, vaults);\n    }\n  }, [q, vaults]);\n  useEffect(() => {\n    if (projects.length == 0 && !loadedProjects) {\n      setLoadedProjects(true);\n      getProjects();\n    }\n  });\n  useEffect(() => {\n    if (assets.length == 0 && !loadedAssets) {\n      setLoadedAssets(true);\n      getAssets();\n    }\n  });\n  let blockchains = [{\n    value: \"POLYGON\",\n    label: \"Polygon (Matic)\"\n  }, {\n    value: \"XCP\",\n    label: \"Counterparty\"\n  }, {\n    value: \"BTC\",\n    label: \"Bitcoin\"\n  }, {\n    value: \"BCH\",\n    label: \"Bitcoin Cash\"\n  }, {\n    value: \"DGB\",\n    label: \"Digibyte\"\n  }, {\n    value: \"DOGE\",\n    label: \"Dogecoin\"\n  }, {\n    value: \"ETH\",\n    label: \"Ethereum\"\n  }, {\n    value: \"FTM\",\n    label: \"Fantom\"\n  }, {\n    value: \"LTC\",\n    label: \"Litecoin\"\n  }, {\n    value: \"NMC\",\n    label: \"Namecoin\"\n  }, {\n    value: \"OMNI\",\n    label: \"Omni\"\n  }, {\n    value: \"xDai\",\n    label: \"xDai\"\n  }, {\n    value: \"XDP\",\n    label: \"Doge Party\"\n  }, {\n    value: \"XMP\",\n    label: \"Mona Party\"\n  }, {\n    value: \"XTZ\",\n    label: \"Tezos\"\n  }]; //   <option key=\"4\" value=\"BCH\">Bitcoin Cash</option>\n  //   <option key=\"5\" value=\"DGB\">Digibyte</option>\n  //   <option key=\"6\" value=\"DOGE\">Dogecoin</option>\n  //   <option key=\"7\" value=\"ETH\">Ethereum</option>\n  //   <option key=\"8\" value=\"FTM\">Fantom</option>\n  //   <option key=\"9\" value=\"LTC\">Litecoin</option>\n  //   <option key=\"10\" value=\"NMC\">Namecoin</option>\n  //   <option key=\"12\" value=\"xDai\">xDai</option>\n  //   <option key=\"13\" value=\"OMNI\">Omni</option>\n  //   <option key=\"14\" value=\"XDP\">Doge Party</option>\n  //   <option key=\"15\" value=\"XMP\">Mona Party</option>\n  //   <option key=\"16\" value=\"XTZ\">Tezos</option>\n\n  function addOrRemoveBalanceFilter(target) {\n    if (balanceChecks.includes(target)) {\n      setBalanceChecks(balanceChecks.filter(item => item !== target));\n    } else {\n      setBalanceChecks(balanceChecks.concat(target));\n    }\n\n    console.log('balance checks', balanceChecks);\n  }\n\n  function addOrRemoveMetadataFilter(target) {\n    if (metadataChecks.includes(target)) {\n      setMetadataChecks(metadataChecks.filter(item => item !== target));\n    } else {\n      setMetadataChecks(metadataChecks.concat(target));\n    }\n\n    console.log('metadata checks', metadataChecks);\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded\n  }, loadingApi ? __jsx(Refreshing, null) : '', __jsx(VStack, {\n    width: \"100%\",\n    align: \"center\",\n    justifyContent: \"center\"\n  }, __jsx(RadioGroup, {\n    onChange: e => {\n      setTempSearchType(e.target.value);\n    },\n    defaultValue: tempSearchType,\n    value: tempSearchType\n  }, __jsx(Stack, {\n    spacing: 4,\n    direction: \"row\"\n  }, __jsx(Radio, {\n    isChecked: tempSearchType == \"filter\" ? true : false,\n    value: \"filter\"\n  }, \"Filter (AND)\"), __jsx(Radio, {\n    isChecked: tempSearchType === \"or\" ? true : false,\n    value: \"or\"\n  }, \"Search (OR)\"))), __jsx(CheckboxGroup, null, __jsx(HStack, null, __jsx(Checkbox, {\n    isDisabled: metadataChecks.length > 0,\n    key: \"check1\",\n    isChecked: balanceChecks.includes('name'),\n    value: \"name\",\n    onChange: e => {\n      addOrRemoveBalanceFilter(e.target.value);\n    }\n  }, \"Asset Name\"), __jsx(Checkbox, {\n    isDisabled: metadataChecks.length > 0,\n    key: \"check2\",\n    isChecked: balanceChecks.includes('coin'),\n    value: \"coin\",\n    onChange: e => {\n      addOrRemoveBalanceFilter(e.target.value);\n    }\n  }, \"Blockchain\"), __jsx(Checkbox, {\n    isDisabled: metadataChecks.length > 0,\n    key: \"check3\",\n    isChecked: balanceChecks.includes('project'),\n    value: \"project\",\n    onChange: e => {\n      addOrRemoveBalanceFilter(e.target.value);\n    }\n  }, \"Project\"), __jsx(Checkbox, {\n    isDisabled: balanceChecks.length > 0,\n    key: \"check4\",\n    isChecked: metadataChecks.includes('vaultName'),\n    value: \"vaultName\",\n    onChange: e => {\n      addOrRemoveMetadataFilter(e.target.value);\n    }\n  }, \"Vault Name\"), __jsx(Checkbox, {\n    isDisabled: balanceChecks.length > 0,\n    key: \"check5\",\n    isChecked: metadataChecks.includes('vaultDescription'),\n    value: \"vaultDescription\",\n    onChange: e => {\n      addOrRemoveMetadataFilter(e.target.value);\n    }\n  }, \"Vault Description\"), __jsx(Checkbox, {\n    isChecked: hideClaimed == true,\n    key: \"check6\",\n    value: \"hideClaimed\",\n    onChange: e => {\n      setHideClaimed(!hideClaimed);\n    }\n  }, \"Hide Claimed\"), __jsx(Checkbox, {\n    isChecked: hideUnminted == true,\n    key: \"check6\",\n    value: \"hideUnminted\",\n    onChange: e => {\n      setHideUnminted(!hideUnminted);\n    }\n  }, \"Hide Un-Minted\"))), balanceChecks.map((check, index) => {\n    return __jsx(VStack, null, __jsx(Text, null, index == 0 ? null : tempSearchType == \"or\" ? \"or\" : \"and\", \" \", check == \"coin\" ? \"from Blockchain\" : check == \"name\" ? \"within balances for the Asset Name of\" : \"of the Project\"), check == \"name\" ? // <Input value={tempAssetName} onChange={(e) => setTempAssetName(e.target.value)} ></Input>\n    __jsx(ReactSelect, {\n      onChange: e => setTempAssetName(e.value),\n      defaultValue: assets.filter(asset => {\n        return asset.value == tempAssetName;\n      })[0],\n      components: {\n        Option: CustomOption\n      },\n      classNamePrefix: \"custom-select\",\n      filterOption: createFilter({\n        ignoreAccents: false\n      }),\n      options: assets\n    }) : check == \"coin\" ? __jsx(ReactSelect, {\n      onChange: e => setTempCoin(e.value),\n      defaultValue: blockchains.filter(asset => {\n        return asset.value == tempCoin;\n      })[0],\n      components: {\n        Option: CustomOption\n      },\n      classNamePrefix: \"custom-select\",\n      filterOption: createFilter({\n        ignoreAccents: false\n      }),\n      options: blockchains\n    }) // <Select value={tempCoin} onChange={(e)=>{setTempCoin(e.target.value)}}>\n    //   <option key=\"1\" value=\"POLYGON\">Polygon (Matic)</option>\n    //   <option key=\"2\" value=\"XCP\">Counterparty</option>\n    //   <option key=\"3\" value=\"BTC\">Bitcoin</option>\n    //   <option key=\"4\" value=\"BCH\">Bitcoin Cash</option>\n    //   <option key=\"5\" value=\"DGB\">Digibyte</option>\n    //   <option key=\"6\" value=\"DOGE\">Dogecoin</option>\n    //   <option key=\"7\" value=\"ETH\">Ethereum</option>\n    //   <option key=\"8\" value=\"FTM\">Fantom</option>\n    //   <option key=\"9\" value=\"LTC\">Litecoin</option>\n    //   <option key=\"10\" value=\"NMC\">Namecoin</option>\n    //   <option key=\"11\" value=\"OMNI\">Omni</option>\n    //   <option key=\"12\" value=\"xDai\">xDai</option>\n    //   <option key=\"13\" value=\"OMNI\">Omni</option>\n    //   <option key=\"14\" value=\"XDP\">Doge Party</option>\n    //   <option key=\"15\" value=\"XMP\">Mona Party</option>\n    //   <option key=\"16\" value=\"XTZ\">Tezos</option>\n    // </Select>\n    : check == \"project\" ? __jsx(ReactSelect, {\n      onChange: e => setTempProject(e.value),\n      defaultValue: projects.filter(asset => {\n        return asset.value == tempProject;\n      })[0],\n      components: {\n        Option: CustomOption\n      },\n      classNamePrefix: \"custom-select\",\n      filterOption: createFilter({\n        ignoreAccents: false\n      }),\n      options: projects\n    }) // <Select value={tempProject} onChange={(e)=>{setTempProject(e.target.value)}}>\n    //   {projects.map((project, index)=>{\n    //     return (<option key={\"project-\"+index} value={project}>{project}</option>)\n    //   })}\n    // </Select>\n    : null);\n  }), metadataChecks.map((check, index) => {\n    return __jsx(VStack, null, __jsx(Text, null, index == 0 ? null : tempSearchType == \"or\" ? \"or\" : \"and\", \" \", check == \"vaultName\" ? \"within vault name\" : check == \"vaultDescription\" ? \"within vault description\" : null), check == \"vaultName\" ? __jsx(Input, {\n      value: tempVaultName,\n      onChange: e => setTempVaultName(e.target.value)\n    }) : check == \"vaultDescription\" ? __jsx(Input, {\n      value: tempVaultDescription,\n      onChange: e => setTempVaultDescription(e.target.value)\n    }) : null);\n  }), __jsx(Button, {\n    m: 2,\n    isDisabled: balanceChecks.length < 1 && metadataChecks.length < 1,\n    onClick: () => {\n      setOffset(0);\n      setState({\n        loaded: false\n      });\n      setVaults([]);\n      setQ(true);\n      let loc = location.href.split('?')[0] + '?';\n      metadataChecks.forEach(key => {\n        if (key == \"vaultDescription\") {\n          loc = loc + key + '=' + tempVaultDescription + \"&\";\n        }\n\n        if (key == \"vaultName\") {\n          loc = loc + key + '=' + tempVaultName + \"&\";\n        }\n      });\n      balanceChecks.forEach(key => {\n        console.log(key);\n\n        if (key == \"name\") {\n          loc = loc + key + '=' + tempAssetName + \"&\";\n        }\n\n        if (key == \"coin\") {\n          loc = loc + key + '=' + tempCoin + \"&\";\n        }\n\n        if (key == \"project\") {\n          loc = loc + key + '=' + tempProject + \"&\";\n        }\n      });\n\n      if (tempSearchType) {\n        loc = loc + \"searchType=\" + tempSearchType + \"&\";\n      } // let loc = location.href.split('?')[0]+\"?q=\"+temp_q +  \"&network=\" + network\n\n\n      console.log(\"SEARCH\", loc);\n      window.history.pushState('', 'Title', loc);\n    }\n  }, \"Search\")), q ? __jsx(InfiniteScroll, {\n    className: \"infinite-scroll\",\n    scrollableTarget: \"shannon-container\" // height={200}\n    ,\n    dataLength: vaults.length //This is important field to render the next data\n    ,\n    next: fetchData,\n    hasMore: hasMore,\n    loader: __jsx(Refreshing, null),\n    endMessage: __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(\"b\", null, \"Yay! You have seen it all\"))\n  }, __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10\n  }, vaults.length ? vaults.map((vault, index) => {\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n    let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId;\n    const flexSettings = {\n      flex: '1',\n      minW: '200px',\n      maxW: '200px',\n      borderWidth: '1px',\n      // color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    const redirect = function () {\n      setLoadingApi(true);\n      location.href = url;\n    };\n\n    if (hideClaimed && vault.status == 'claimed' || hideUnminted && !vault.live) {\n      return null;\n    } else {\n      return __jsx(Link, {\n        href: url,\n        className: \"vaultLink\"\n      }, __jsx(Box, _extends({\n        className: \"NFT newest\",\n        key: index\n      }, flexSettings, {\n        onClick: redirect\n      }), __jsx(Text, {\n        fontWeight: \"semibold\",\n        textAlign: \"center\",\n        mt: 2,\n        pl: 2,\n        isTruncated: true\n      }, vault.name, !vault.private && vault.totalValue > 0 ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n        align: \"center\"\n      }, __jsx(Embed, {\n        className: \"d-block w-100 NFT-newest-image\",\n        url: vault.image\n      })), __jsx(Box, {\n        d: \"flex\",\n        alignItems: \"baseline\"\n      }), __jsx(Stack, {\n        align: \"center\",\n        mt: 3\n      }, vault.status == 'claimed' ? __jsx(Text, {\n        color: \"green.500\"\n      }, \"CLAIMED\") : null, __jsx(Text, {\n        fontSize: \"xs\"\n      }, \"Id: \", vault.tokenId))));\n    }\n  }) : __jsx(Text, null, \"YOU DON'T SEEM TO HAVE ANY VAULTS.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\"\n  }, \"CREATE ONE HERE!\")))) : null);\n}","map":null,"metadata":{},"sourceType":"module"}