{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/PnL.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nexport default function PnL() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React(); // const [vaults, setVaults] = useState([])\n\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: stats,\n    1: setStats\n  } = useState(null);\n  useEffect(() => {\n    if (state.loaded == false && !loadingApi) {\n      setLoadingApi(false);\n      getStats();\n    }\n  }, []);\n\n  const getStats = async () => {\n    console.log(\"getting logs\");\n    fetch('https://api.emblemvault.io/s:osautomate/earnings/emblem-vault', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(async function (response) {\n      setLoadingApi(false);\n      setState({\n        loaded: true\n      });\n      let jsonData = await response.json();\n      setStats(jsonData);\n      console.log(jsonData);\n    });\n  };\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, stats ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }, \"Total Sales in USD: $\", stats.totalUsd.toFixed(2)), __jsx(Text, {\n    m: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }, \" \"), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }, \"------------- Opensea -------------\"), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, \"# of Sales: \", stats.opensea.saleCount), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }, \"Total Sales in USD: $\", stats.opensea.totalUsd.toFixed(2)), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }, \"Total Sales in ETH: \", stats.opensea.totalEth.toFixed(2)), __jsx(Text, {\n    m: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, \" \"), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, \"---------- Emblem.finance ----------\"), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, \"# of Sales: \", stats.vaultSales.saleCount), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, \"Total Sales in USD: $\", stats.vaultSales.totalSalesUsd.toFixed(2)), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, \"COVAL balance: \", stats.vaultSales.covalBalance.toFixed(2))) : null)));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/PnL.tsx"],"names":["Flex","Text","Stack","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","PnL","query","account","chainId","state","setState","loaded","loadingApi","setLoadingApi","stats","setStats","getStats","console","log","fetch","method","headers","then","response","jsonData","json","totalUsd","toFixed","opensea","saleCount","totalEth","vaultSales","totalSalesUsd","covalBalance"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\n\n\nexport default function PnL() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  // const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [stats, setStats] = useState(null)\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  useEffect(() => {\n    if (state.loaded == false && !loadingApi) {\n      setLoadingApi(false)\n      getStats()\n    }\n  }, [])\n\n  const getStats = async() =>{\n    console.log(\"getting logs\")\n    fetch('https://api.emblemvault.io/s:osautomate/earnings/emblem-vault', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(async function (response) {\n      setLoadingApi(false)\n      setState({ loaded: true })\n      let jsonData = await response.json()\n      setStats(jsonData)\n      console.log(jsonData)\n    })\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Stack align=\"center\">\n          {stats? (\n            <>\n              <Text>Total Sales in USD: ${stats.totalUsd.toFixed(2)}</Text>\n              <Text m={3}> </Text>\n              <Text>------------- Opensea -------------</Text>\n              <Text># of Sales: {stats.opensea.saleCount}</Text>\n              <Text>Total Sales in USD: ${stats.opensea.totalUsd.toFixed(2)}</Text>\n              <Text>Total Sales in ETH: {stats.opensea.totalEth.toFixed(2)}</Text>\n              <Text m={3}> </Text>\n              <Text>---------- Emblem.finance ----------</Text>\n              <Text># of Sales: {stats.vaultSales.saleCount}</Text>\n              <Text>Total Sales in USD: ${stats.vaultSales.totalSalesUsd.toFixed(2)}</Text>\n              <Text>COVAL balance: {stats.vaultSales.covalBalance.toFixed(2)}</Text>\n            </>\n          ) : null }\n        </Stack>\n      </Flex>\n     \n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}