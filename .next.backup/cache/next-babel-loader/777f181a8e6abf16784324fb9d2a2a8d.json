{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/PnL.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nexport default function PnL() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: stats,\n    1: setStats\n  } = useState(null);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address || \"0x3B31925EeC78dA3CF15c4503604c13b0eEBC57e5\");\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(0);\n  const {\n    0: limit,\n    1: setLimit\n  } = useState(10);\n  useEffect(() => {\n    if (state.loaded == false && !loadingApi) {\n      setLoadingApi(false);\n      getPnL();\n    }\n  }, []);\n\n  const fetchData = async () => {\n    setOffset(offset + limit);\n    getPnL();\n  };\n\n  const getPnL = async () => {\n    console.log(\"getting logs\");\n    fetch('https://api.emblemvault.io/s:osautomate/offer/' + address + '?limit=' + limit + '&offset=' + offset, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(async function (response) {\n      setLoadingApi(false);\n      setState({\n        loaded: true\n      });\n      let jsonData = await response.json();\n      setStats(jsonData);\n      console.log(jsonData);\n    });\n  };\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, stats ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, \"Total Offers in USD: $\", stats.offers.toFixed(2)), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, \"Total Number of offers: $\", stats.offerCount.toFixed(2)), __jsx(InfiniteScroll, {\n    height: 200,\n    dataLength: 100 //This is important field to render the next data\n    ,\n    next: fetchData,\n    hasMore: true,\n    loader: __jsx(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }\n    }, \"Loading...\"),\n    endMessage: __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 19\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }, \"Yay! You have seen it all\")) // below props only if you need pull down functionality\n    // refreshFunction={this.refresh}\n    // pullDownToRefresh\n    // pullDownToRefreshThreshold={50}\n    // pullDownToRefreshContent={\n    //   <h3 style={{ textAlign: 'center' }}>&#8595; Pull down to refresh</h3>\n    // }\n    // releaseToRefreshContent={\n    //   <h3 style={{ textAlign: 'center' }}>&#8593; Release to refresh</h3>\n    // }\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, stats.intelligences.map((item, index) => {\n    return __jsx(Text, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 27\n      }\n    }, item.name);\n  }))) : null)));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/PnL.tsx"],"names":["Flex","Text","Stack","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","InfiniteScroll","PnL","query","account","chainId","state","setState","loaded","loadingApi","setLoadingApi","stats","setStats","address","setAddress","offset","setOffset","limit","setLimit","getPnL","fetchData","console","log","fetch","method","headers","then","response","jsonData","json","offers","toFixed","offerCount","textAlign","intelligences","map","item","index","name"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\n\nexport default function PnL() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [stats, setStats] = useState(null)\n  const [address, setAddress] = useState(query.address || \"0x3B31925EeC78dA3CF15c4503604c13b0eEBC57e5\")\n  const [offset, setOffset] = useState(0)\n  const [limit, setLimit] = useState(10)\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  useEffect(() => {\n    if (state.loaded == false && !loadingApi) {\n      setLoadingApi(false)\n      getPnL()\n    }\n  }, [])\n\n  const fetchData = async() =>{\n    setOffset(offset+limit)\n    getPnL()\n  }\n\n  const getPnL = async() =>{\n    console.log(\"getting logs\")\n    fetch('https://api.emblemvault.io/s:osautomate/offer/'+address+'?limit='+limit+'&offset='+offset, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(async function (response) {\n      setLoadingApi(false)\n      setState({ loaded: true })\n      let jsonData = await response.json()\n      setStats(jsonData)\n      console.log(jsonData)\n    })\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Stack align=\"center\">\n          {stats? (\n            <>\n              <Text>Total Offers in USD: ${stats.offers.toFixed(2)}</Text>\n              <Text>Total Number of offers: ${stats.offerCount.toFixed(2)}</Text>\n              <InfiniteScroll\n                height={200}\n                dataLength={100} //This is important field to render the next data\n                next={fetchData}\n                hasMore={true}\n                loader={<h4>Loading...</h4>}\n                endMessage={\n                  <p style={{ textAlign: 'center' }}>\n                    <b>Yay! You have seen it all</b>\n                  </p>\n                }\n                // below props only if you need pull down functionality\n                // refreshFunction={this.refresh}\n                // pullDownToRefresh\n                // pullDownToRefreshThreshold={50}\n                // pullDownToRefreshContent={\n                //   <h3 style={{ textAlign: 'center' }}>&#8595; Pull down to refresh</h3>\n                // }\n                // releaseToRefreshContent={\n                //   <h3 style={{ textAlign: 'center' }}>&#8593; Release to refresh</h3>\n                // }\n              >\n                {stats.intelligences.map((item, index)=>{\n                  return (<Text key={index}>{item.name}</Text>)\n                })}\n              </InfiniteScroll>\n            </>\n          ) : null }\n        </Stack>\n      </Flex>\n     \n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}