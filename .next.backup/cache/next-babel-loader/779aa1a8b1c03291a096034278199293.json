{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { FormControl, FormLabel, FormHelperText, Input, Stack, Box, Flex, Textarea, Button } from '@chakra-ui/core';\nimport { useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nexport default function Batch() {\n  // alert(EMBLEM_API)\n  const {\n    0: batchName,\n    1: setBatchName\n  } = useState(\"\");\n  const {\n    0: imageBaseUrl,\n    1: setImageBaseUrl\n  } = useState(\"\");\n  const {\n    0: inscriptionBaseUrl,\n    1: setInscriptionBaseUrl\n  } = useState(\"\");\n  const {\n    0: addressType,\n    1: setAddressType\n  } = useState(\"\");\n  const {\n    0: titleTemplate,\n    1: setTitleTemplate\n  } = useState(\"\");\n  const {\n    0: descriptionTemplate,\n    1: setDescriptionTemplate\n  } = useState(\"\");\n  const {\n    0: total,\n    1: setTotal\n  } = useState(\"\");\n\n  const handleSubmit = event => {\n    event.preventDefault(); // alert(EMBLEM_API)\n    // let wtf = EMBLEM_API\n    // alert(wtf)\n\n    const serializedForm = {\n      batchName,\n      imageBaseUrl,\n      inscriptionBaseUrl,\n      addressType,\n      titleTemplate,\n      descriptionTemplate,\n      total\n    };\n    let apiSuffix = '/addBatch'; //(chainId == 137 || chainId == 1) ? '/mint3' : '/mint'\n\n    fetch(EMBLEM_API + apiSuffix, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: '{}'\n    }).then(async response => {\n      let data = await response.json();\n      console.log(\"WTFFFFF\", data);\n    }).catch(err => {\n      console.log(err);\n    }); // const serializedForm = {\n    //   batchName,\n    //   imageBaseUrl,\n    //   inscriptionBaseUrl,\n    //   addressType,\n    //   titleTemplate,\n    //   descriptionTemplate,\n    //   total\n    // };\n    // fetch(EMBLEM_API + '/addBatch', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //     service: 'evmetadata',\n    //   },\n    //   // We convert the React state to JSON and send it as the POST body\n    //   body: JSON.stringify(serializedForm),\n    // }).then(async function (response) {\n    //   let data = await response.json()\n    //   console.log(\"WTFFFFF\", data)\n    // }).catch(err=>{\n    //   console.log(err)\n    // })\n  };\n\n  return __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"batch-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, \"Batch Name\"), __jsx(Input, {\n    type: \"text\",\n    id: \"batch-name\",\n    \"aria-describedby\": \"batch-name-text\",\n    value: batchName,\n    onChange: e => setBatchName(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"batch-name-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, \"Give it a unique name for this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"image-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, \"Image Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"image-base-url\",\n    \"aria-describedby\": \"image-base-url-text\",\n    value: imageBaseUrl,\n    onChange: e => setImageBaseUrl(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"image-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, \"Enter the base url for the images in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"inscription-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, \"Inscription Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"inscription-base-url\",\n    \"aria-describedby\": \"inscription-base-url-text\",\n    value: inscriptionBaseUrl,\n    onChange: e => setInscriptionBaseUrl(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"inscription-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, \"Enter the base url for the inscriptions in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"address-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, \"Address Type\"), __jsx(Input, {\n    type: \"text\",\n    id: \"address-type\",\n    \"aria-describedby\": \"address-type-text\",\n    value: addressType,\n    onChange: e => setAddressType(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"address-type-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, \"Enter the address type for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"title-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, \"Title Template\"), __jsx(Textarea, {\n    id: \"title-template\",\n    size: \"lg\",\n    \"aria-describedby\": \"title-template-text\",\n    minLength: 3,\n    maxLength: 4024,\n    value: titleTemplate,\n    onChange: e => setTitleTemplate(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"title-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, \"Enter the title template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, \"Description Template\"), __jsx(Textarea, {\n    id: \"description-template\",\n    size: \"lg\",\n    \"aria-describedby\": \"description-template-text\",\n    minLength: 3,\n    maxLength: 1024,\n    value: descriptionTemplate,\n    onChange: e => setDescriptionTemplate(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"description-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, \"Enter the description template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }, \"Total\"), __jsx(Input, {\n    type: \"number\",\n    id: \"total\",\n    \"aria-describedby\": \"total-text\",\n    value: total,\n    onChange: e => setTotal(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"total-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }, \"Enter the total number of items in this batch.\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }\n  }, \"Submit\")))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx"],"names":["FormControl","FormLabel","FormHelperText","Input","Stack","Box","Flex","Textarea","Button","useState","EMBLEM_API","Batch","batchName","setBatchName","imageBaseUrl","setImageBaseUrl","inscriptionBaseUrl","setInscriptionBaseUrl","addressType","setAddressType","titleTemplate","setTitleTemplate","descriptionTemplate","setDescriptionTemplate","total","setTotal","handleSubmit","event","preventDefault","serializedForm","apiSuffix","fetch","method","headers","service","body","then","response","data","json","console","log","catch","err","e","target","value"],"mappings":"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","sourcesContent":["import { Link, Image, Spinner, useColorMode } from '@chakra-ui/core'\nimport {\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  FormErrorMessage,\n  Input,\n  Stack,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Box,\n  Flex,\n  RadioGroup,\n  Radio,\n  Textarea,\n  Button,\n  ButtonGroup,\n  Text,\n  Divider,\n  Alert,\n  AlertIcon,\n  Collapse,\n  useDisclosure,\n  Select\n} from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Embed from './Embed'\n\n\nexport default function Batch() {\n  // alert(EMBLEM_API)\n  const [batchName, setBatchName] = useState(\"\");\n  const [imageBaseUrl, setImageBaseUrl] = useState(\"\");\n  const [inscriptionBaseUrl, setInscriptionBaseUrl] = useState(\"\");\n  const [addressType, setAddressType] = useState(\"\");\n  const [titleTemplate, setTitleTemplate] = useState(\"\");\n  const [descriptionTemplate, setDescriptionTemplate] = useState(\"\");\n  const [total, setTotal] = useState(\"\");\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // alert(EMBLEM_API)\n    // let wtf = EMBLEM_API\n    // alert(wtf)\n\n    const serializedForm = {\n        batchName,\n        imageBaseUrl,\n        inscriptionBaseUrl,\n        addressType,\n        titleTemplate,\n        descriptionTemplate,\n        total\n      };\n    let apiSuffix = '/addBatch' //(chainId == 137 || chainId == 1) ? '/mint3' : '/mint'\n    fetch(EMBLEM_API + apiSuffix, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: '{}',\n    }).then(async(response)=> {\n        let data = await response.json()\n        console.log(\"WTFFFFF\", data)\n      }).catch(err=>{\n        console.log(err)\n      })\n    // const serializedForm = {\n    //   batchName,\n    //   imageBaseUrl,\n    //   inscriptionBaseUrl,\n    //   addressType,\n    //   titleTemplate,\n    //   descriptionTemplate,\n    //   total\n    // };\n    // fetch(EMBLEM_API + '/addBatch', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //     service: 'evmetadata',\n    //   },\n    //   // We convert the React state to JSON and send it as the POST body\n    //   body: JSON.stringify(serializedForm),\n    // }).then(async function (response) {\n    //   let data = await response.json()\n    //   console.log(\"WTFFFFF\", data)\n    // }).catch(err=>{\n    //   console.log(err)\n    // })\n  };\n\n  return (  \n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n    <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n    \n        <form onSubmit={handleSubmit}>\n      <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"batch-name\">Batch Name</FormLabel>\n          <Input\n            type=\"text\"\n            id=\"batch-name\"\n            aria-describedby=\"batch-name-text\"\n            value={batchName}\n            onChange={(e) => setBatchName(e.target.value)}\n            autoComplete=\"off\"\n          />\n          <FormHelperText id=\"batch-name-text\">Give it a unique name for this batch.</FormHelperText>\n        </FormControl>\n        \n        <FormControl isRequired>\n          <FormLabel htmlFor=\"image-base-url\">Image Base Url</FormLabel>\n          <Input\n            type=\"text\"\n            id=\"image-base-url\"\n            aria-describedby=\"image-base-url-text\"\n            value={imageBaseUrl}\n            onChange={(e) => setImageBaseUrl(e.target.value)}\n            autoComplete=\"off\"\n          />\n          <FormHelperText id=\"image-base-url-text\">\n            Enter the base url for the images in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"inscription-base-url\">Inscription Base Url</FormLabel>\n          <Input\n            type=\"text\"\n            id=\"inscription-base-url\"\n            aria-describedby=\"inscription-base-url-text\"\n            value={inscriptionBaseUrl}\n            onChange={(e) => setInscriptionBaseUrl(e.target.value)}\n            autoComplete=\"off\"\n          />\n          <FormHelperText id=\"inscription-base-url-text\">\n            Enter the base url for the inscriptions in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"address-type\">Address Type</FormLabel>\n          <Input\n            type=\"text\"\n            id=\"address-type\"\n            aria-describedby=\"address-type-text\"\n            value={addressType}\n            onChange={(e) => setAddressType(e.target.value)}\n            autoComplete=\"off\"\n          />\n          <FormHelperText id=\"address-type-text\">\n            Enter the address type for the items in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"title-template\">Title Template</FormLabel>\n          <Textarea\n              id=\"title-template\"\n              size=\"lg\"\n              aria-describedby=\"title-template-text\"\n              minLength={3}\n              maxLength={4024}\n              value={titleTemplate}\n              onChange={(e) => setTitleTemplate(e.target.value)}\n              autoComplete=\"off\"\n          />\n          <FormHelperText id=\"title-template-text\">\n            Enter the title template for the items in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"description-template\">Description Template</FormLabel>\n          <Textarea\n              id=\"description-template\"\n              size=\"lg\"\n              aria-describedby=\"description-template-text\"\n              minLength={3}\n              maxLength={1024}\n              value={descriptionTemplate}\n              onChange={(e) => setDescriptionTemplate(e.target.value)}\n              autoComplete=\"off\"\n          />\n          <FormHelperText id=\"description-template-text\">\n            Enter the description template for the items in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"total\">Total</FormLabel>\n          <Input\n            type=\"number\"\n            id=\"total\"\n            aria-describedby=\"total-text\"\n            value={total}\n            onChange={(e) => setTotal(e.target.value)}\n            autoComplete=\"off\"\n          />\n          <FormHelperText id=\"total-text\">\n            Enter the total number of items in this batch.\n          </FormHelperText>\n        </FormControl>\n      </Stack>\n      <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n        <Button mt={4} type=\"submit\">\n          Submit\n        </Button>\n      </Stack>\n        </form>\n      </Box>\n   </Flex>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}