{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/TokenBalance.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Suspense } from 'react';\nimport { Button, Text, IconButton, useColorMode } from 'chakra-ui/react';\nimport { useWeb3React } from '@web3-react/core';\nimport { addTokenToWallet } from '../public/web3';\nimport { BG } from '../constants';\nimport { useTokenBalance } from '../data';\nimport TokenLogo from './TokenLogo';\nimport ErrorBoundary from './ErrorBoundary';\nimport { useShowUSD } from '../context';\nimport { useUSDTokenPrice } from '../hooks';\n\nfunction Balance(_ref) {\n  _s();\n\n  var token = _ref.token;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account;\n\n  var _useTokenBalance = useTokenBalance(token, account, true),\n      data = _useTokenBalance.data;\n\n  var _useShowUSD = useShowUSD(),\n      _useShowUSD2 = _slicedToArray(_useShowUSD, 1),\n      showUSD = _useShowUSD2[0];\n\n  var USDTokenPrice = useUSDTokenPrice(token);\n  return __jsx(Button, {\n    as: \"a\",\n    rightIcon: \"external-link\",\n    variant: \"outline\",\n    backgroundColor: BG[colorMode],\n    onClick: function onClick() {\n      var tokenInfo = JSON.parse(JSON.stringify(token));\n      tokenInfo.image = \"https://circuitsofvalue.com/public/coval-logo.png\";\n      addTokenToWallet(tokenInfo);\n    },\n    //href: formatEtherscanLink(ExplorerTXType.TokenBalance, [token, account as string]),\n    target: '_blank',\n    rel: 'noopener noreferrer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, __jsx(TokenLogo, {\n    token: token,\n    size: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), __jsx(Text, {\n    ml: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, showUSD && USDTokenPrice ? \"$\".concat(data.multiply(USDTokenPrice).toFixed(2, {\n    groupSeparator: ','\n  })) : data.toSignificant(6, {\n    groupSeparator: ','\n  })));\n}\n\n_s(Balance, \"sxyl4DE9KwbPwn3VTeqKmVGfskQ=\", false, function () {\n  return [useColorMode, useWeb3React, useTokenBalance, useShowUSD, useUSDTokenPrice];\n});\n\n_c = Balance;\nexport default function TokenBalance(_ref2) {\n  _s2();\n\n  var token = _ref2.token;\n\n  var _useColorMode2 = useColorMode(),\n      colorMode = _useColorMode2.colorMode;\n\n  return __jsx(ErrorBoundary, {\n    fallback: __jsx(IconButton, {\n      variant: \"outline\",\n      backgroundColor: BG[colorMode],\n      icon: \"warning\",\n      \"aria-label\": \"Failed\",\n      isDisabled: true,\n      cursor: \"default !important\",\n      _hover: {},\n      _active: {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, __jsx(Suspense, {\n    fallback: __jsx(Button, {\n      variant: \"outline\",\n      backgroundColor: BG[colorMode],\n      isLoading: true,\n      cursor: \"default !important\",\n      _hover: {},\n      _active: {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, __jsx(Balance, {\n    token: token,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s2(TokenBalance, \"2Uu86IH3do63pkN3s1ysdRMmJuc=\", false, function () {\n  return [useColorMode];\n});\n\n_c2 = TokenBalance;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Balance\");\n$RefreshReg$(_c2, \"TokenBalance\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/TokenBalance.tsx"],"names":["Suspense","Button","Text","IconButton","useColorMode","useWeb3React","addTokenToWallet","BG","useTokenBalance","TokenLogo","ErrorBoundary","useShowUSD","useUSDTokenPrice","Balance","token","colorMode","account","data","showUSD","USDTokenPrice","tokenInfo","JSON","parse","stringify","image","target","rel","multiply","toFixed","groupSeparator","toSignificant","TokenBalance"],"mappings":"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","sourcesContent":["import { Suspense } from 'react'\nimport { Button, Text, IconButton, useColorMode } from 'chakra-ui/react'\nimport { useWeb3React} from '@web3-react/core'\nimport { addTokenToWallet } from '../public/web3'\nimport { Token, TokenAmount } from '@uniswap/sdk'\nimport { formatEtherscanLink, ExplorerTXType } from '../utils'\nimport { BG } from '../constants'\nimport { useTokenBalance } from '../data'\nimport TokenLogo from './TokenLogo'\nimport ErrorBoundary from './ErrorBoundary'\nimport { useShowUSD } from '../context'\nimport { useUSDTokenPrice } from '../hooks'\n\nfunction Balance({ token }: { token: Token }): JSX.Element {\n  const { colorMode } = useColorMode()\n  const { account} = useWeb3React()\n  const { data } = useTokenBalance(token, account, true)\n  const [showUSD] = useShowUSD()\n  const USDTokenPrice = useUSDTokenPrice(token)\n\n  return (\n    <Button\n      as=\"a\"\n      rightIcon=\"external-link\"\n      variant=\"outline\"\n      backgroundColor={BG[colorMode]}\n      onClick={() => {\n        let tokenInfo = JSON.parse(JSON.stringify(token))\n        tokenInfo.image = \"https://circuitsofvalue.com/public/coval-logo.png\"\n        addTokenToWallet(tokenInfo)\n      }}\n      {...{\n        //href: formatEtherscanLink(ExplorerTXType.TokenBalance, [token, account as string]),\n        target: '_blank',\n        rel: 'noopener noreferrer',\n      }}\n    >\n      <TokenLogo token={token} size=\"1.5rem\" />\n      <Text ml=\"0.5rem\">\n        {showUSD && USDTokenPrice\n          ? `$${(data as TokenAmount).multiply(USDTokenPrice).toFixed(2, { groupSeparator: ',' })}`\n          : (data as TokenAmount).toSignificant(6, { groupSeparator: ',' })}\n      </Text>\n    </Button>\n  )  \n}\n\n\n\nexport default function TokenBalance({ token }: { token: Token }): JSX.Element {\n  const { colorMode } = useColorMode()\n  return (\n    <ErrorBoundary\n      fallback={\n        <IconButton\n          variant=\"outline\"\n          backgroundColor={BG[colorMode]}\n          icon=\"warning\"\n          aria-label=\"Failed\"\n          isDisabled\n          cursor=\"default !important\"\n          _hover={{}}\n          _active={{}}\n        />\n      }\n    >\n      <Suspense\n        fallback={\n          <Button\n            variant=\"outline\"\n            backgroundColor={BG[colorMode]}\n            isLoading\n            cursor=\"default !important\"\n            _hover={{}}\n            _active={{}}\n          >\n            {null}\n          </Button>\n        }\n      >\n        <Balance token={token} />\n      </Suspense>\n    </ErrorBoundary>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}