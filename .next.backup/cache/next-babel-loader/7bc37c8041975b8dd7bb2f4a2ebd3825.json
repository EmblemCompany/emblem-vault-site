{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useLayoutEffect, useEffect } from 'react';\nimport NextApp from 'next/app';\nimport Head from 'next/head';\nimport { ThemeProvider, CSSReset, ColorModeProvider } from '@chakra-ui/core';\nimport { Web3Provider } from '@ethersproject/providers';\nimport { Web3ReactProvider, useWeb3React } from '@web3-react/core';\nimport 'doka/doka.css';\nimport theme from '../theme';\nimport { useQueryParameters } from '../hooks';\nimport Base from '../components/Base';\nimport Favicon from '../components/Favicon';\nimport Provider from '../context';\nimport Layout from '../components/Layout';\nimport Error from '../components/Error';\nimport SwitchToChain from '../components/SwitchToChain';\nimport '../styles.css';\nimport '@reach/combobox/styles.css';\nimport { QueryParameters } from '../constants';\nimport Loading from '../components/Loading';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nlet tokenId;\nconst useIsomorphicLayoutEffect = false ? useLayoutEffect : useEffect;\n\nfunction FunctionalApp({\n  Component\n}) {\n  const {\n    0: painted,\n    1: setPainted\n  } = useState(false);\n  useIsomorphicLayoutEffect(() => {\n    setPainted(true);\n  }, []);\n  const {\n    error,\n    chainId\n  } = useWeb3React();\n  const queryParameters = useQueryParameters();\n  const requiredChainId = queryParameters[QueryParameters.CHAIN];\n  return !painted ? null : __jsx(ColorModeProvider, null, __jsx(Favicon, null), __jsx(Provider, null, __jsx(Layout, null, error ? __jsx(Error, null) : typeof chainId !== 'number' ? __jsx(Loading, null) : typeof requiredChainId === 'number' && chainId !== requiredChainId ? __jsx(SwitchToChain, {\n    requiredChainId: requiredChainId\n  }) : __jsx(Component, null))));\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction getLibrary(provider) {\n  return new Web3Provider(provider);\n}\n\nexport default class App extends NextApp {\n  render() {\n    const {\n      Component\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(Base, null), __jsx(Head, null, __jsx(\"title\", {\n      key: \"title\"\n    }, tokenId, \" Emblem Vault\"), __jsx(\"meta\", {\n      key: \"description\",\n      name: \"Description\",\n      content: \"An entire wallet inside a token\"\n    }), __jsx(\"script\", {\n      src: \"https://cdn.trackjs.com/agent/v3/latest/t.js\"\n    }), __jsx(\"script\", {\n      src: \"/jquery.js\"\n    }), __jsx(\"script\", {\n      src: \"/tilt.jquery.js\"\n    }), __jsx(\"script\", {\n      dangerouslySetInnerHTML: {\n        __html: `\n                window.TrackJS && TrackJS.install({ \n                  token: \"45e5b3e45c734f6c890f25e66f17d43d\",\n                  application: \"ev\"\n                  // for more configuration options, see https://docs.trackjs.com\n                });\n                if (location.href.includes('/vault?')) {\n                  location.href = location.href.replace('/vault?', '/nft?')\n                }\n              `\n      }\n    })), __jsx(Web3ReactProvider, {\n      getLibrary: getLibrary\n    }, __jsx(ThemeProvider, {\n      theme: theme\n    }, __jsx(CSSReset, null), __jsx(FunctionalApp, {\n      Component: Component\n    }))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}