{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Leaderboard.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nexport default function LeaderBoard() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: loadingOwners,\n    1: setLoadingOwners\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: owners,\n    1: setOwners\n  } = useState({});\n  const {\n    0: totalSupply,\n    1: setTotalSupply\n  } = useState(0);\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  const getVaults = async () => {\n    getOwners();\n    loadCache();\n\n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString()\n        }\n      });\n      const jsonData = await response.json();\n      setState({\n        loaded: true\n      });\n      setVaults(jsonData);\n      saveCache(jsonData);\n      setLoadingApi(false); // console.log(jsonData)\n    } catch (error) {}\n  };\n\n  const getOwners = async () => {\n    if (!loadingOwners) {\n      setLoadingOwners(true);\n    } else {\n      return;\n    }\n\n    let totalSupply = await emblemContract.totalSupply();\n    setTotalSupply(totalSupply.toString());\n    console.log(totalSupply);\n    getTokensByIndex(Number(totalSupply.toString()), 0, () => {\n      console.log('owners', owners);\n      setLoadingOwners(false);\n    });\n  };\n\n  async function getTokensByIndex(count, index, cb) {\n    let tokenId = await emblemContract.tokenByIndex(index);\n    console.log('tokenId', tokenId.toString(), index);\n    getOwner(tokenId.toString(), () => {\n      if (count - 1 < index + 1) {\n        return cb();\n      } else {\n        return getTokensByIndex(count, index + 1, cb);\n      }\n    });\n  }\n\n  async function getOwner(tokenId, cb) {\n    let owner = await emblemContract.ownerOf(tokenId);\n\n    if (owner === '0x0000000000000000000000000000000000000000' || owner === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180') {\n      return cb();\n    }\n\n    if (!owners[owner]) {\n      owners[owner] = [{\n        tokenId: tokenId\n      }];\n    } else {\n      owners[owner].push({\n        tokenId: tokenId.toString()\n      });\n    }\n\n    return cb();\n  }\n\n  const loadCache = () => {\n    let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_leader')); // Load vaults from storage before updating from server!\n\n    if (vaults) {\n      setState({\n        loaded: true\n      });\n      setVaults(vaults);\n      setLoadingApi(true);\n    }\n  };\n\n  const saveCache = vaults => {\n    localStorage.setItem((address ? address : account) + '_' + chainId + '_leader', JSON.stringify(vaults)); // Save new state for later\n  };\n\n  const {\n    0: acct,\n    1: setAcct\n  } = useState(''); // useEffect(() => {\n  //   if (account && acct != account) {\n  //     setAcct(account)\n  //     setState({ loaded: false })\n  //     getVaults()\n  //   }\n  // }, [account, acct])\n\n  const {\n    0: chain,\n    1: setChain\n  } = useState(chainId);\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    account && chainId ? getVaults() : setState({\n      loaded: true\n    });\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, \"Supply: \", totalSupply)));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Leaderboard.tsx"],"names":["Flex","Text","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","EMBLEM_API","contractAddresses","useContract","LeaderBoard","query","account","chainId","vaults","setVaults","state","setState","loaded","loadingApi","setLoadingApi","loadingOwners","setLoadingOwners","address","setAddress","owners","setOwners","totalSupply","setTotalSupply","emblemContract","emblemVault","emblemAbi","getVaults","getOwners","loadCache","response","fetch","method","headers","service","toString","jsonData","json","saveCache","error","console","log","getTokensByIndex","Number","count","index","cb","tokenId","tokenByIndex","getOwner","owner","ownerOf","push","JSON","parse","localStorage","getItem","setItem","stringify","acct","setAcct","chain","setChain"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Spinner } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\n\nexport default function LeaderBoard() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [loadingOwners, setLoadingOwners] = useState(false)\n  const [address, setAddress] = useState(query.address)\n  const [owners, setOwners] = useState({})\n  const [totalSupply, setTotalSupply] = useState(0)\n\n\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const getVaults = async () => {\n    getOwners()\n    loadCache()\n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString(),\n        },\n      })\n      const jsonData = await response.json()\n      setState({ loaded: true })\n      setVaults(jsonData)\n      saveCache(jsonData)\n      setLoadingApi(false)\n      // console.log(jsonData)\n    } catch (error) {}\n  }\n\n  const getOwners = async () => {\n    if (!loadingOwners) {\n      setLoadingOwners(true)\n    } else {\n      return\n    }\n    let totalSupply = await (emblemContract as Contract).totalSupply()\n    setTotalSupply(totalSupply.toString())\n    console.log(totalSupply)\n    getTokensByIndex(Number(totalSupply.toString()), 0, () => {\n      console.log('owners', owners)\n      setLoadingOwners(false)\n    })\n  }\n\n  async function getTokensByIndex(count, index, cb) {\n    let tokenId = await (emblemContract as Contract).tokenByIndex(index)\n    console.log('tokenId', tokenId.toString(), index)\n    getOwner(tokenId.toString(), ()=>{\n      if (count - 1 < index + 1) {\n          return cb()\n        } else {\n          return getTokensByIndex(count, index + 1, cb)\n        }\n    })\n  }\n\n  async function getOwner(tokenId, cb) {\n    let owner = await (emblemContract as Contract).ownerOf(tokenId)\n    if (owner === '0x0000000000000000000000000000000000000000' || owner === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180') {\n      return cb()\n    }\n    if (!owners[owner]) {\n      owners[owner] = [{ tokenId: tokenId}]\n    } else {\n      owners[owner].push({ tokenId: tokenId.toString() })\n    }\n    return cb()\n  }\n\n  const loadCache = () => {\n    let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_leader')) // Load vaults from storage before updating from server!\n    if (vaults) {\n      setState({ loaded: true })\n      setVaults(vaults)\n      setLoadingApi(true)\n    }\n  }\n\n  const saveCache = (vaults) => {\n    localStorage.setItem((address ? address : account) + '_' + chainId + '_leader', JSON.stringify(vaults)) // Save new state for later\n  }\n\n  const [acct, setAcct] = useState('')\n  // useEffect(() => {\n  //   if (account && acct != account) {\n  //     setAcct(account)\n  //     setState({ loaded: false })\n  //     getVaults()\n  //   }\n  // }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    account && chainId ? getVaults() : setState({ loaded: true })\n  }, [])\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n        <Text>Supply: {totalSupply}</Text>\n      </Flex>\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}