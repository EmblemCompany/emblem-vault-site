{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nftrade.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Flex, Text, Link, Stack, Button, FormControl, Input, FormHelperText, Select } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { Embed } from './Embed';\nimport { useContract } from '../hooks';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { TransactionToast } from './TransactionToast';\nexport default function NFTrade() {\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    query\n  } = useRouter();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: myVaults,\n    1: setMyVaults\n  } = useState([]);\n  const {\n    0: myVaultsLoaded,\n    1: setMyVaultsLoaded\n  } = useState(false);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: q,\n    1: setQ\n  } = useState(query.q);\n  const {\n    0: temp_q,\n    1: setTempQ\n  } = useState(q || '');\n  const {\n    0: network,\n    1: setNetwork\n  } = useState(query.network || null);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    0: offeringTokenId,\n    1: setOfferingTokenId\n  } = useState(null);\n  const {\n    0: offeringTokenAllowed,\n    1: setOfferingTokenAllowed\n  } = useState(null);\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  const nftradeContract = useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true);\n\n  const getVaults = async () => {\n    setLoadingApi(true);\n\n    try {\n      const response = await fetch(EMBLEM_API + '/search', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          q: q,\n          network: network\n        })\n      });\n      const jsonData = await response.json();\n      setState({\n        loaded: true\n      });\n      jsonData.forEach(async (data, index) => {\n        let owner = await checkOwner(data.tokenId);\n        let offerCount = await getOfferCount(data.tokenId); // console.log(\"owner\", owner, account)\n        // jsonData[index].mine = owner === account\n\n        jsonData[index].offerCount = offerCount;\n        console.log(\"count\", offerCount);\n      });\n      setVaults(jsonData);\n      setLoadingApi(false);\n    } catch (error) {}\n  };\n\n  const getMyVaults = async () => {\n    console.log(\"Getting My Vaults\");\n    setMyVaultsLoaded(true);\n\n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental ? '?experimental=true' : ''), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString()\n        }\n      });\n      const jsonData = await response.json();\n      setMyVaults(jsonData);\n      console.log(jsonData);\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    // console.log(q, state, loadingApi)\n    nftradeStuff();\n\n    if (q && !state.loaded && !loadingApi) {\n      console.log(\"Load Search\");\n      getVaults();\n    }\n  });\n\n  async function nftradeStuff() {\n    !myVaultsLoaded ? await getMyVaults() : null; // let _owner  = await nftradeContract.ownerOf(tokenId)\n  }\n\n  async function getOfferCount(tokenId) {\n    let offerCount = await nftradeContract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId);\n    return Number(offerCount);\n  }\n\n  async function checkAllowance(tokenId) {\n    let allowed = await emblemContract.getApproved(tokenId);\n    setOfferingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\");\n  }\n\n  async function checkOwner(tokenId) {\n    let owner = await emblemContract.ownerOf(tokenId);\n    return owner;\n  }\n\n  const approveOffer = () => {\n    ;\n    emblemContract.approve(contractAddresses.nftrade[chainId], offeringTokenId).then(({\n      hash\n    }) => {\n      setHash(hash);\n    }); // .catch((error: ErrorWithCode) => {\n    //   if (error?.code == 4001) {\n    //     setApproving(false)\n    //   }\n    // })\n  };\n\n  const makeOffer = tokenId => {\n    ;\n    nftradeContract.addOffer(contractAddresses.emblemVault[chainId], offeringTokenId, contractAddresses.emblemVault[chainId], tokenId).then(({\n      hash\n    }) => {\n      setHash(hash);\n    }); // .catch((error: ErrorWithCode) => {\n    //   if (error?.code == 4001) {\n    //     setApproving(false)\n    //   }\n    // })\n  };\n\n  return __jsx(Loader, {\n    loaded: state.loaded || !q,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    id: \"search-query\",\n    width: \"45%\",\n    \"aria-describedby\": \"search-query-helper-text\",\n    placeholder: \"0xdeadbeef\",\n    maxLength: 42,\n    value: temp_q,\n    onChange: e => setTempQ(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    m: 2,\n    onClick: () => {\n      setState({\n        loaded: false\n      });\n      setQ(temp_q);\n      let loc = location.href.split('?')[0] + \"?q=\" + temp_q + \"&network=\" + network;\n      window.history.pushState(temp_q, 'Title', loc);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, \"Search\"), __jsx(Select, {\n    w: \"45%\",\n    placeholder: \"All Networks\",\n    value: network || '',\n    onChange: e => {\n      setNetwork(e.target.value);\n      console.log(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, __jsx(\"option\", {\n    value: \"matic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  }, \"Matic\"), __jsx(\"option\", {\n    value: \"mainnet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 15\n    }\n  }, \"Ethereum Mainnet\"), __jsx(\"option\", {\n    value: \"rinkeby\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }, \"Ethereum Rinkeby\"))), __jsx(FormHelperText, {\n    id: \"search-query-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, \"Search for Emblem Vaults by: Name, Description, Type, Contents\"))), __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, vaults.length ? vaults.map((vault, index) => {\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n    let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId;\n    const flexSettings = {\n      flex: '1',\n      minW: '300px',\n      maxW: '300px',\n      borderWidth: '1px',\n      color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    const redirect = function () {\n      location.href = url;\n    };\n\n    return __jsx(Stack, {\n      key: \"stack_\" + index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 15\n      }\n    }, __jsx(Box, _extends({\n      key: index\n    }, flexSettings, {\n      onClick: redirect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }\n    }), __jsx(Text, {\n      fontWeight: \"semibold\",\n      textAlign: \"center\",\n      mt: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 19\n      }\n    }, vault.name, !vault.private ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 19\n      }\n    }, __jsx(Embed, {\n      url: vault.image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }\n    })), __jsx(Box, {\n      d: \"flex\",\n      alignItems: \"baseline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 19\n      }\n    }, __jsx(Box, {\n      color: \"gray.500\",\n      fontWeight: \"semibold\",\n      letterSpacing: \"wide\",\n      fontSize: \"sm\",\n      ml: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }\n    }, vault.private ? __jsx(React.Fragment, null, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 27\n      }\n    }, \"Contents hidden. Click to view the vault and unlock values.\")) : vault.values.length ? vault.values.map((coin, index) => {\n      if (index < 4) return __jsx(Text, {\n        key: coin.name,\n        isTruncated: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 31\n        }\n      }, coin.name, \": \", coin.balance);else if (index == 4) return __jsx(Text, {\n        fontWeight: \"bold\",\n        mt: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 31\n        }\n      }, \"... Click to see the rest ...\");\n    }) : __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 29\n      }\n    }, \"Nothing in here! \", __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 48\n      }\n    }), \"Click to fill 'er up!\"), __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 27\n      }\n    }, \"Offers: \", vault.offerCount))), __jsx(Stack, {\n      align: \"center\",\n      mt: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 19\n      }\n    }, vault.status == 'claimed' ? __jsx(Text, {\n      color: \"green.500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 50\n      }\n    }, \"CLAIMED\") : null)), __jsx(Select, {\n      placeholder: \"Offer NFT\",\n      onChange: e => {\n        let tokenId = e.target.value; // console.log(e.target.value)\n\n        setOfferingTokenId(tokenId);\n        checkAllowance(tokenId);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }\n    }, myVaults.map((vault, index) => {\n      return __jsx(\"option\", {\n        key: index,\n        value: vault.tokenId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 25\n        }\n      }, vault.name);\n    })), offeringTokenId ? offeringTokenAllowed ? __jsx(Button, {\n      onClick: () => {\n        makeOffer(vault.tokenId);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 45\n      }\n    }, \"Make Offer\") : __jsx(Button, {\n      onClick: approveOffer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 118\n      }\n    }, \"Approve\") : null);\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 11\n    }\n  }, \"Search Resulted in 0 Vaults.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  }, \"CREATE ONE HERE!\"))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      setHash(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }\n  }) : null);\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nftrade.tsx"],"names":["Box","Flex","Text","Link","Stack","Button","FormControl","Input","FormHelperText","Select","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","Embed","useContract","EMBLEM_API","contractAddresses","TransactionToast","NFTrade","account","chainId","library","query","vaults","setVaults","myVaults","setMyVaults","myVaultsLoaded","setMyVaultsLoaded","state","setState","loaded","loadingApi","setLoadingApi","hash","setHash","q","setQ","temp_q","setTempQ","network","setNetwork","address","setAddress","experimental","setExperimental","offeringTokenId","setOfferingTokenId","offeringTokenAllowed","setOfferingTokenAllowed","emblemContract","emblemVault","emblemAbi","nftradeContract","nftrade","nftradeAbi","getVaults","response","fetch","method","headers","service","body","JSON","stringify","jsonData","json","forEach","data","index","owner","checkOwner","tokenId","offerCount","getOfferCount","console","log","error","getMyVaults","toString","nftradeStuff","Number","checkAllowance","allowed","getApproved","ownerOf","approveOffer","approve","then","makeOffer","addOffer","e","target","value","loc","location","href","split","window","history","pushState","length","map","vault","pieces","pathname","pop","url","origin","join","flexSettings","flex","minW","maxW","borderWidth","color","mx","mb","rounded","overflow","borderColor","status","cursor","redirect","name","private","totalValue","image","values","coin","balance"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, FormControl, FormLabel, Input, FormHelperText, Select } from '@chakra-ui/core'\nimport Loader from 'react-loader'\n\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { Embed } from './Embed'\nimport { setTimeout } from 'timers'\nimport { useContract } from '../hooks'\nimport { Contract } from '@ethersproject/contracts'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { TransactionToast } from './TransactionToast'\n\n\nexport default function NFTrade() {\n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [vaults, setVaults] = useState([])\n  const [myVaults, setMyVaults] = useState([])\n  const [myVaultsLoaded, setMyVaultsLoaded] = useState(false)\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [hash, setHash] = useState(null)\n  const [q, setQ] = useState(query.q)\n  const [temp_q, setTempQ] = useState(q || '')\n  const [network, setNetwork] = useState(query.network || null)\n  const [address, setAddress] = useState(query.address)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [offeringTokenId, setOfferingTokenId] = useState(null)\n  const [offeringTokenAllowed, setOfferingTokenAllowed] = useState(null)\n\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n  const nftradeContract = useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true)\n  \n  const getVaults = async () => {    \n    setLoadingApi(true)\n    try {      \n      const response = await fetch(EMBLEM_API + '/search', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({q: q, network: network})\n      })\n      const jsonData = await response.json()\n      setState({ loaded: true })\n      jsonData.forEach(async (data, index)=>{    \n        let owner = await checkOwner(data.tokenId)    \n        let offerCount = await getOfferCount(data.tokenId)\n        \n        // console.log(\"owner\", owner, account)\n        // jsonData[index].mine = owner === account\n        jsonData[index].offerCount = offerCount\n        console.log(\"count\", offerCount)\n      })\n      setVaults(jsonData)\n      setLoadingApi(false)\n    } catch (error) {}\n  }\n\n  const getMyVaults = async () => {\n    console.log(\"Getting My Vaults\")\n    setMyVaultsLoaded(true)\n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental? '?experimental=true' : ''), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString(),\n        },\n      })\n      const jsonData = await response.json()\n      setMyVaults(jsonData)\n      console.log(jsonData)\n    } catch (error) {}\n  }\n\n\n\n  useEffect(() => {\n    // console.log(q, state, loadingApi)\n    nftradeStuff()\n    if (q && !state.loaded && !loadingApi) {\n      console.log(\"Load Search\")\n      getVaults()\n    }\n  })\n\n  async function nftradeStuff() {\n    !myVaultsLoaded ? await getMyVaults() : null\n    // let _owner  = await nftradeContract.ownerOf(tokenId)\n  }\n\n  async function getOfferCount(tokenId) {\n    let offerCount  = await nftradeContract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId)\n    return Number(offerCount)\n  }\n\n  async function checkAllowance(tokenId) {\n    let allowed  = await emblemContract.getApproved(tokenId)\n    setOfferingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\")\n  }\n\n  async function checkOwner(tokenId) {\n    let owner  = await emblemContract.ownerOf(tokenId)\n    return owner\n  }\n\n  const approveOffer = () => {\n    ;(emblemContract as Contract)\n      .approve(contractAddresses.nftrade[chainId], offeringTokenId)\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n  }\n\n  const makeOffer = (tokenId) => {\n    ;(nftradeContract as Contract)\n      .addOffer(contractAddresses.emblemVault[chainId], offeringTokenId, contractAddresses.emblemVault[chainId], tokenId)\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n  }\n\n  return (\n    <Loader loaded={state.loaded || !q}>\n      {loadingApi ? <Refreshing /> : ''}\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\" >\n        <FormControl isRequired>\n          <Flex width=\"full\" align=\"center\" justifyContent=\"center\" flexWrap=\"wrap\">\n            <Input\n              type=\"text\"\n              id=\"search-query\"\n              width='45%'\n              aria-describedby=\"search-query-helper-text\"\n              placeholder=\"0xdeadbeef\"\n              maxLength={42}\n              value={temp_q}\n              onChange={(e) =>\n                setTempQ(e.target.value)\n              }\n            />\n            <Button\n              m={2}\n              onClick={() => {\n                setState({ loaded: false })\n                setQ(temp_q)\n                let loc = location.href.split('?')[0]+\"?q=\"+temp_q +  \"&network=\" + network\n                window.history.pushState(temp_q, 'Title', loc);\n              }}\n            >Search\n            </Button>\n            <Select w=\"45%\" placeholder=\"All Networks\" value={network || ''}\n              onChange={(e)=>{\n                setNetwork(e.target.value)\n                console.log(e.target.value)\n              }}\n            >\n              <option value=\"matic\">Matic</option>\n              <option value=\"mainnet\">Ethereum Mainnet</option>\n              <option value=\"rinkeby\">Ethereum Rinkeby</option>\n            </Select>\n          </Flex>\n          \n          <FormHelperText id=\"search-query-helper-text\">\n            Search for Emblem Vaults by: Name, Description, Type, Contents\n        </FormHelperText>\n        </FormControl>\n      </Flex>\n      <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\" mt={10}>\n        {vaults.length ? (\n          vaults.map((vault, index) => {\n            let pieces = location.pathname.split('/')\n            pieces.pop()\n            let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId\n            const flexSettings = {\n              flex: '1',\n              minW: '300px',\n              maxW: '300px',\n              borderWidth: '1px',\n              color: 'white',\n              mx: '6',\n              mb: '6',\n              rounded: 'lg',\n              overflow: 'hidden',\n              borderColor: vault.status == 'claimed' ? 'green !important' : '',\n              cursor: 'pointer',\n            }\n            const redirect = function () {\n              location.href = url\n            }\n            return (\n              <Stack key={\"stack_\"+index}>\n                <Box key={index} {...flexSettings} onClick={redirect}>\n                  <Text fontWeight=\"semibold\" textAlign=\"center\" mt={2}>\n                    {vault.name}\n                    {!vault.private ? ': ~$' + vault.totalValue : null}\n                  </Text>\n                  <Stack align=\"center\">\n                    <Embed url={vault.image}/>\n                  </Stack>\n                  <Box d=\"flex\" alignItems=\"baseline\">\n                    <Box color=\"gray.500\" fontWeight=\"semibold\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                      {vault.private ? (\n                        <>\n                          <Text>Contents hidden. Click to view the vault and unlock values.</Text>\n                        </>\n                      ) : vault.values.length ? (\n                        vault.values.map((coin, index) => {\n                          if (index < 4)\n                            return (\n                              <Text key={coin.name} isTruncated>\n                                {coin.name}: {coin.balance}\n                              </Text>\n                            )\n                          else if (index == 4)\n                            return (\n                              <Text fontWeight=\"bold\" mt={2}>\n                                ... Click to see the rest ...\n                              </Text>\n                            )\n                        })\n                      ) : (\n                            <Text>\n                              Nothing in here! <br />\n                          Click to fill 'er up!\n                            </Text>\n                          )}\n                          <Text>Offers: {vault.offerCount}</Text>\n                    </Box>\n                    \n                  </Box>                \n                  <Stack align=\"center\" mt={3}>\n                    {vault.status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                  </Stack>\n                      \n                </Box>\n                <Select placeholder=\"Offer NFT\" \n                    onChange={(e)=>{\n                      let tokenId = e.target.value\n                      // console.log(e.target.value)\n                      setOfferingTokenId(tokenId)\n                      checkAllowance(tokenId)\n                    }}\n                  >\n                    {myVaults.map((vault, index) => {\n                      return (\n                        <option key={index} value={vault.tokenId}>{vault.name}</option>\n                      )\n                    })}\n                  </Select>\n                  {offeringTokenId ? (\n                    offeringTokenAllowed ? (<Button onClick={()=>{makeOffer(vault.tokenId)}}>Make Offer</Button>) : (<Button onClick={approveOffer}>Approve</Button>)\n                  ) : null}\n                  \n              </Stack>\n            )\n          })\n        ) : (\n          <Text>\n            Search Resulted in 0 Vaults.{' '}\n            <Link color=\"#638cd8\" href=\"../create\">\n              CREATE ONE HERE!\n            </Link>\n          </Text>\n        )}\n      </Flex>\n      {hash ? (\n      <TransactionToast\n          hash={hash}\n          onComplete={() => {\n            setHash(null)\n          }}\n        />\n      ): null }\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}