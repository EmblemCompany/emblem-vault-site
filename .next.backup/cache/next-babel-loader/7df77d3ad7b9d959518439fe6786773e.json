{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Create.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FormControl, FormLabel, FormHelperText, FormErrorMessage, Input, Stack, Tabs, TabList, TabPanels, Tab, TabPanel, Box, Flex, RadioGroup, Radio, Textarea, Button, ButtonGroup, Text, Divider, Alert, AlertIcon, Collapse, useDisclosure, Select } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport { isETHAddress } from '../utils';\nimport Embed from './Embed'; // react-doka\n\nimport { DokaImageEditorModal } from 'react-doka';\nimport transakSDK from '@transak/transak-sdk'; // doka\n\nimport { // editor\nlocale_en_gb, createDefaultImageReader, createDefaultImageWriter // plugins\n, setPlugins, plugin_crop, plugin_crop_locale_en_gb, plugin_crop_defaults, plugin_finetune, plugin_finetune_locale_en_gb, plugin_finetune_defaults, plugin_filter, plugin_filter_locale_en_gb, plugin_filter_defaults, plugin_annotate, plugin_annotate_locale_en_gb, markup_editor_defaults, markup_editor_locale_en_gb } from 'doka';\nsetPlugins(plugin_crop, plugin_finetune, plugin_filter, plugin_annotate);\n\nvar editorDefaults = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n  imageReader: createDefaultImageReader(),\n  imageWriter: createDefaultImageWriter()\n}, plugin_crop_defaults), plugin_finetune_defaults), plugin_filter_defaults), markup_editor_defaults), {}, {\n  locale: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, locale_en_gb), plugin_crop_locale_en_gb), plugin_finetune_locale_en_gb), plugin_filter_locale_en_gb), plugin_annotate_locale_en_gb), markup_editor_locale_en_gb)\n});\n\nvar tokenId,\n    cipherTextHash,\n    nonce,\n    signature = null;\nvar mintPassword = null;\nexport default function Create(props) {\n  _s();\n\n  // modal\n  var _useState = useState(false),\n      modalVisible = _useState[0],\n      setModalVisible = _useState[1];\n\n  var _useState2 = useState(''),\n      modalResult = _useState2[0],\n      setModalResult = _useState2[1];\n\n  var _useState3 = useState(true),\n      showEditorButton = _useState3[0],\n      setShowEditorButton = _useState3[1];\n\n  var _useDisclosure = useDisclosure(),\n      isOpen = _useDisclosure.isOpen,\n      onToggle = _useDisclosure.onToggle;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState4 = useState(0),\n      tabIndex = _useState4[0],\n      setTabIndex = _useState4[1];\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useState5 = useState(account || ''),\n      vaultAddress = _useState5[0],\n      setVaultAddress = _useState5[1];\n\n  var _useState6 = useState('Public'),\n      vaultPubPriv = _useState6[0],\n      setVaultPubPriv = _useState6[1];\n\n  var _useState7 = useState(''),\n      vaultName = _useState7[0],\n      setVaultName = _useState7[1];\n\n  var _useState8 = useState(''),\n      vaultDesc = _useState8[0],\n      setVaultDesc = _useState8[1];\n\n  var _useState9 = useState(''),\n      vaultImage = _useState9[0],\n      setVaultImage = _useState9[1];\n\n  var _useState10 = useState(''),\n      ownedImage = _useState10[0],\n      setOwnedImage = _useState10[1];\n\n  var _useState11 = useState(''),\n      password = _useState11[0],\n      setPassword = _useState11[1]; // const [service, setService] = useState('')\n\n\n  var _useState12 = useState(false),\n      isCovalApproved = _useState12[0],\n      setIsCovalApproved = _useState12[1];\n\n  var _useState13 = useState({\n    loaded: true,\n    \"private\": false\n  }),\n      state = _useState13[0],\n      setState = _useState13[1];\n\n  var _useState14 = useState(null),\n      hash = _useState14[0],\n      setHash = _useState14[1]; // const [cipherTextHash, setCipherTextHash] = useState(null)\n  // const [tokenId, setTokenId] = useState(null)\n  // const [mintPassword, setMintPassword] = useState(null)\n  // const [nonce, setNonce] = useState(null)\n  // const [signature, setSignature] = useState(null)\n\n\n  var _useState15 = useState(true),\n      experimental = _useState15[0],\n      setExperimental = _useState15[1];\n\n  var _useState16 = useState(false),\n      showPreVaultMsg = _useState16[0],\n      setShowPreVaultMsg = _useState16[1];\n\n  var _useState17 = useState(false),\n      showMakingVaultMsg = _useState17[0],\n      setShowMakingVaultMsg = _useState17[1];\n\n  var _useState18 = useState(null),\n      decimals = _useState18[0],\n      setDecimals = _useState18[1];\n\n  var _useState19 = useState(null),\n      allowance = _useState19[0],\n      setAllowance = _useState19[1];\n\n  var _useState20 = useState(null),\n      balance = _useState20[0],\n      setBalance = _useState20[1];\n\n  var _useState21 = useState(null),\n      price = _useState21[0],\n      setPrice = _useState21[1];\n\n  var _useState22 = useState(false),\n      creating = _useState22[0],\n      setCreating = _useState22[1];\n\n  var _useState23 = useState(false),\n      approving = _useState23[0],\n      setApproving = _useState23[1];\n\n  var _useState24 = useState(''),\n      vaultKey = _useState24[0],\n      setVaultKey = _useState24[1];\n\n  var _useState25 = useState(''),\n      vaultValue = _useState25[0],\n      setVaultValue = _useState25[1];\n\n  var _useState26 = useState(\"image\"),\n      vaultType = _useState26[0],\n      setVaultType = _useState26[1];\n\n  var _useState27 = useState(false),\n      showEmbed = _useState27[0],\n      setShowEmbed = _useState27[1];\n\n  var handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  var covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true);\n  var transak;\n\n  var initializeTransak = function initializeTransak(address, coin) {\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',\n      // Your API Key\n      environment: 'PRODUCTION',\n      // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '',\n      // Your customer's wallet address\n      themeColor: '000000',\n      // App theme color\n      fiatCurrency: 'USD',\n      // INR/GBP\n      // fiatAmount: 350,\n      email: '',\n      // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    }); // To get all the events\n\n    transak.on(transak.ALL_EVENTS, function (data) {\n      console.log(data);\n    }); // This will trigger when the user marks payment is made.\n\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, function (orderData) {\n      console.log(orderData);\n      transak.close();\n    });\n    transak.init();\n  };\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = setDecimals;\n              _context.next = 3;\n              return covalContract.decimals();\n\n            case 3:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              _context.t2 = setAllowance;\n              _context.next = 8;\n              return covalContract.allowance(account, contractAddresses.vaultHandler[chainId]).then(function (balance) {\n                return balance.toString();\n              });\n\n            case 8:\n              _context.t3 = _context.sent;\n              (0, _context.t2)(_context.t3);\n              _context.t4 = setBalance;\n              _context.next = 13;\n              return covalContract.balanceOf(account).then(function (balance) {\n                return balance.toString();\n              });\n\n            case 13:\n              _context.t5 = _context.sent;\n              (0, _context.t4)(_context.t5);\n              _context.t6 = setPrice;\n              _context.next = 18;\n              return handlerContract.price().then(function (balance) {\n                return balance.toString();\n              });\n\n            case 18:\n              _context.t7 = _context.sent;\n              (0, _context.t6)(_context.t7);\n\n              // console.log(\n              //   'balance',\n              //   balance,\n              //   'allowance',\n              //   allowance,\n              //   'price',\n              //   price,\n              //   Number(allowance) >= Number(price),\n              //   Number(balance) > Number(price)\n              // )\n              if (Number(allowance) >= Number(price)) {\n                setIsCovalApproved(true);\n              } else {\n                setIsCovalApproved(false);\n              }\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getContractStates() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var fireMetaMask = function fireMetaMask() {\n    setCreating(true) // console.log(vaultAddress, tokenId, cipherTextHash, nonce, signature)\n    ;\n    handlerContract.buyWithSignature(vaultAddress, tokenId, cipherTextHash, nonce, signature).then(function (_ref2) {\n      var hash = _ref2.hash;\n      setTimeout(function () {\n        setHash(hash); // setCreating(false)\n\n        setShowMakingVaultMsg(true);\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(\"tx failed.\", error);\n      } else {\n        setCreating(false);\n        setShowPreVaultMsg(false);\n      }\n    });\n  };\n\n  var approveCovalFlow = function approveCovalFlow() {\n    setApproving(true);\n    covalContract.approve(contractAddresses.vaultHandler[chainId], '100000000000000').then(function (_ref3) {\n      var hash = _ref3.hash;\n      setHash(hash);\n    })[\"catch\"](function (error) {\n      if ((error === null || error === void 0 ? void 0 : error.code) == 4001) {\n        setApproving(false);\n      }\n    });\n  };\n\n  var handleSubmit = function handleSubmit(evt) {\n    evt.preventDefault(); // if (service !== 'kms') {\n    //   return alert('incorrect password')\n    // }\n\n    setState({\n      loaded: false,\n      \"private\": state[\"private\"]\n    });\n    var body = {\n      fromAddress: account,\n      toAddress: vaultAddress,\n      description: vaultDesc,\n      name: vaultName,\n      ownedImage: ownedImage,\n      image: vaultImage,\n      chainId: chainId,\n      \"private\": state[\"private\"],\n      password: password || '',\n      values: []\n    };\n\n    if (vaultKey && vaultValue) {\n      body.values.push({\n        \"key\": vaultKey,\n        value: vaultValue\n      });\n    }\n\n    console.log(JSON.stringify(body));\n    fetch(EMBLEM_API + '/mint2', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify(body)\n    }).then( /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {\n        var body;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                setState({\n                  loaded: true,\n                  \"private\": state[\"private\"]\n                });\n                _context2.next = 3;\n                return response.json();\n\n              case 3:\n                body = _context2.sent;\n                tokenId = body.data.tokenId; // console.log(body.data.nonce, body.data.signature, body.data.cipherTextHash)\n\n                if (chainId === 137) {\n                  nonce = body.data.nonce;\n                  signature = body.data.signature;\n                  cipherTextHash = body.data.cipherTextHash;\n                  fireMetaMask();\n                  setShowPreVaultMsg(false);\n                } else {\n                  mintPassword = body.password;\n                  setHash(body.data.tx);\n                  setShowPreVaultMsg(true);\n                }\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  };\n\n  function previewFile() {\n    var preview = document.querySelector('#preview');\n    var inputelement = document.querySelector('input[type=file]'); //.files[0];\n\n    var reader = new FileReader();\n\n    if (inputelement.files[0].size > 5000000) {\n      delete inputelement.files;\n      return alert('File too large');\n    } else {// alert('under')\n    }\n\n    reader.addEventListener('load', function () {\n      var _reader$result;\n\n      // convert image file to base64 string\n      if (preview) preview.src = ((_reader$result = reader.result) === null || _reader$result === void 0 ? void 0 : _reader$result.toString()) || '';\n      if (preview) setVaultImage(preview.src);\n      setShowEditorButton(true);\n      setModalResult('');\n    }, false);\n\n    if (inputelement.files) {\n      reader.readAsDataURL(inputelement.files[0]);\n    }\n  }\n\n  var _useState28 = useState(''),\n      acct = _useState28[0],\n      setAcct = _useState28[1];\n\n  useEffect(function () {\n    if (account && acct != account) {\n      setAcct(account);\n      setVaultAddress(account);\n    }\n  }, [account, acct]);\n  useEffect(function () {\n    account && chainId ? getContractStates() : null;\n  });\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 9\n    }\n  }, __jsx(Tabs, {\n    defaultIndex: 0,\n    index: tabIndex,\n    onChange: function onChange(index) {\n      return setTabIndex(index);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 11\n    }\n  }, __jsx(TabList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 13\n    }\n  }, __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 15\n    }\n  }, \"Make\"), __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 15\n    }\n  }, \"My\"), __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 15\n    }\n  }, \"Vault\")), __jsx(TabPanels, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 13\n    }\n  }, __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    spacing: \"2rem\",\n    flexGrow: 1,\n    justifyContent: \"center\",\n    px: \"2rem\",\n    py: \"2rem\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 17\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 19\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    isInvalid: vaultAddress && !isETHAddress(vaultAddress),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"owner-address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 23\n    }\n  }, \"Vault Owner Address\"), __jsx(Input, {\n    type: \"text\",\n    id: \"owner-address\",\n    \"aria-describedby\": \"owner-helper-text\",\n    placeholder: \"0xdeadbeef\",\n    maxLength: 42,\n    value: vaultAddress,\n    onChange: function onChange(e) {\n      return setVaultAddress(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"owner-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 23\n    }\n  }, \"What is the address of the first owner of this vault? Pro tip: When you connect a web3 wallet, this will populate automagically with your address.\"), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 23\n    }\n  }, \"Address is not a valid ETH address\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 19\n    }\n  }, __jsx(FormControl, {\n    as: \"fieldset\",\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 23\n    }\n  }, \"Public or Private?\"), __jsx(RadioGroup, {\n    id: \"pubpriv\",\n    defaultValue: \"Public\",\n    onChange: function onChange(e) {\n      setVaultPubPriv(e.target.value);\n      setState({\n        loaded: state.loaded,\n        \"private\": e.target.value === 'Private'\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 23\n    }\n  }, __jsx(Radio, {\n    value: \"Public\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 25\n    }\n  }, \"Public\"), __jsx(Radio, {\n    value: \"Private\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 25\n    }\n  }, \"Private\")), __jsx(FormHelperText, {\n    id: \"email-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 23\n    }\n  }, \"Do you want the contents and addresses to be password protected?\")), state[\"private\"] ? __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 23\n    }\n  }, __jsx(FormLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 25\n    }\n  }, \"Password\"), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: function onChange(e) {\n      return setPassword(e.target.value);\n    },\n    \"aria-describedby\": \"password-helper-text\",\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 25\n    }\n  }), __jsx(FormHelperText, {\n    id: \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 25\n    }\n  }, \"Used to encrypt/decrypt\")) : ''), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 19\n    }\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return setTabIndex(1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 21\n    }\n  }, \"Next\")))), __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    spacing: \"2rem\",\n    flexGrow: 1,\n    justifyContent: \"center\",\n    px: \"2rem\",\n    py: \"2rem\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 17\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 19\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    isInvalid: vaultName && vaultName.length < 3 && vaultName.length > 200,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"vault-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 23\n    }\n  }, \"Vault Name\"), __jsx(Input, {\n    type: \"text\",\n    id: \"vault-name\",\n    \"aria-describedby\": \"vault-name-text\",\n    minLength: 3,\n    maxLength: 200,\n    value: vaultName,\n    onChange: function onChange(e) {\n      return setVaultName(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"vault-name-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 23\n    }\n  }, \"Give it some love so you can find it later.\"), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 23\n    }\n  }, \"Name needs at least 3 characters. 200 is max.\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 19\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    isInvalid: vaultDesc && vaultDesc.length < 3 && vaultDesc.length > 1024,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"vault-desc\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 23\n    }\n  }, \"Vault Description\"), __jsx(Textarea, {\n    id: \"vault-desc\",\n    size: \"lg\",\n    \"aria-describedby\": \"vault-desc-text\",\n    minLength: 3,\n    maxLength: 1024,\n    value: vaultDesc,\n    onChange: function onChange(e) {\n      return setVaultDesc(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"vault-desc-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 23\n    }\n  }, \"Add some fluffy text to tell people what the point is!\"), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 23\n    }\n  }, \"Description needs to be at least 3 characters. 1024 is max.\"))), __jsx(Button, {\n    onClick: onToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 19\n    }\n  }, \"Include Encrypted Text In Vault\"), __jsx(Collapse, {\n    isOpen: isOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 19\n    }\n  }, experimental ? __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 23\n    }\n  }, __jsx(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 23\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"vault-key\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 25\n    }\n  }, \"Key\"), __jsx(Input, {\n    type: \"text\",\n    id: \"vault-key\",\n    \"aria-describedby\": \"vault-key-text\",\n    maxLength: 200,\n    value: vaultKey,\n    onChange: function onChange(e) {\n      return setVaultKey(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 25\n    }\n  }), __jsx(FormHelperText, {\n    id: \"vault-key-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 25\n    }\n  }, \"Key Name (Public)\"), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 25\n    }\n  }, \"---Some Error\")), __jsx(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 23\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"vault-value\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 25\n    }\n  }, \"Value\"), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-value\",\n    \"aria-describedby\": \"vault-value-text\",\n    maxLength: 200,\n    value: vaultValue,\n    onChange: function onChange(e) {\n      return setVaultValue(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 25\n    }\n  }), __jsx(FormHelperText, {\n    id: \"vault-value-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 25\n    }\n  }, \"Key Value (Encrypted)\"), __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 25\n    }\n  }, \"---Some Error\"))) : null), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 19\n    }\n  }, __jsx(ButtonGroup, {\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return setTabIndex(0);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 23\n    }\n  }, \"Back\"), __jsx(Button, {\n    onClick: function onClick() {\n      return setTabIndex(2);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 23\n    }\n  }, \"Next\"))))), __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    spacing: \"2rem\",\n    flexGrow: 1,\n    justifyContent: \"center\",\n    px: \"2rem\",\n    py: \"2rem\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 17\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 19\n    }\n  }, __jsx(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 21\n    }\n  }, __jsx(Box, {\n    p: 1,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 23\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 25\n    }\n  }, vaultType !== \"upload\" ? __jsx(React.Fragment, null, __jsx(FormLabel, {\n    htmlFor: \"vault-image-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 33\n    }\n  }, \"Embed Display URL\"), __jsx(Input, {\n    type: \"text\",\n    id: \"vault-image-url\",\n    \"aria-describedby\": \"vault-image-url-text\",\n    minLength: 3,\n    maxLength: 200,\n    value: vaultImage,\n    defaultValue: \"http://\",\n    onChange: function onChange(e) {\n      setVaultImage(e.target.value);\n      setShowEmbed(true);\n      console.log(\"showEmbed\", showEmbed);\n    },\n    autoComplete: \"off\",\n    w: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 33\n    }\n  }), __jsx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 33\n    }\n  }), __jsx(FormLabel, {\n    mt: 3,\n    htmlFor: \"owned-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 33\n    }\n  }, \"Optional URL For Vault Owner *\"), __jsx(Input, {\n    type: \"text\",\n    id: \"owned-url\",\n    \"aria-describedby\": \"owned-url-text\",\n    minLength: 3,\n    maxLength: 200,\n    value: ownedImage,\n    defaultValue: \"http://\",\n    onChange: function onChange(e) {\n      setOwnedImage(e.target.value);\n    },\n    autoComplete: \"off\",\n    w: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 33\n    }\n  })) : __jsx(React.Fragment, null, __jsx(FormLabel, {\n    htmlFor: \"vault-img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 31\n    }\n  }, \"Vault Image\"), __jsx(\"input\", {\n    type: \"file\",\n    onChange: function onChange() {\n      return previewFile();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 31\n    }\n  }), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 31\n    }\n  })), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 27\n    }\n  }), __jsx(FormLabel, {\n    htmlFor: \"type-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 27\n    }\n  }, \"Display Type\"), __jsx(Select, {\n    id: \"type-selector\",\n    w: \"45%\",\n    value: vaultType,\n    onChange: function onChange(e) {\n      setVaultType(e.target.value);\n      console.log(\"type\", vaultType);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 27\n    }\n  }, __jsx(\"option\", {\n    value: \"embed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 29\n    }\n  }, \"Embed (url)\"), __jsx(\"option\", {\n    value: \"upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 29\n    }\n  }, \"Image (upload)\")), vaultType == \"upload\" ? __jsx(React.Fragment, null, __jsx(\"img\", {\n    id: \"preview\",\n    src: modalResult,\n    width: \"250\",\n    \"margin-top\": \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 35\n    }\n  }), modalVisible && __jsx(DokaImageEditorModal, _extends({}, editorDefaults, {\n    className: \"doka\",\n    src: vaultImage,\n    onLoad: function onLoad(res) {\n      return console.log('load modal image', res);\n    },\n    onHide: function onHide() {\n      return setModalVisible(false);\n    },\n    onProcess: function onProcess(_ref5) {\n      var dest = _ref5.dest;\n      var reader = new FileReader();\n      reader.readAsDataURL(dest);\n\n      reader.onloadend = function () {\n        var _reader$result2;\n\n        var base64data = (_reader$result2 = reader.result) === null || _reader$result2 === void 0 ? void 0 : _reader$result2.toString();\n        setVaultImage(base64data);\n        setModalResult(URL.createObjectURL(dest));\n        setShowEditorButton(false);\n      };\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 37\n    }\n  })), showEditorButton && vaultImage ? __jsx(Button, {\n    mt: 2,\n    onClick: function onClick() {\n      return setModalVisible(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 35\n    }\n  }, \"Edit Image\") : null) : showEmbed == true ? __jsx(React.Fragment, null, __jsx(Embed, {\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 33\n    }\n  })) : null)))), isCovalApproved ? __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 21\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    p: 1,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 23\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 25\n    }\n  }, \"Creating a vault spends \", price * Math.pow(10, -decimals), \" Coval from your wallet\"))) : null, Number(balance) < Number(price) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 640,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\" // as=\"a\"\n    // {...{\n    //   href:\n    //     location.origin +\n    //     '/buy?chain=' +\n    //     chainId +\n    //     '&output=0x3D658390460295FB963f54dC0899cfb1c30776Df&input=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    //   target: '_blank',\n    //   rel: 'noopener noreferrer',\n    // }}\n    ,\n    onClick: function onClick() {\n      initializeTransak(vaultAddress, 'COVAL');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 23\n    }\n  }, \"Buy $Coval\")) : null, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 19\n    }\n  }, __jsx(ButtonGroup, {\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 661,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return setTabIndex(1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 662,\n      columnNumber: 23\n    }\n  }, \"Back\"), !account ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 25\n    }\n  }, \"No Wallet Connected!\") : !vaultAddress || !isETHAddress(vaultAddress) || !vaultName || vaultName.length < 3 || !vaultDesc || vaultDesc.length < 3 || !vaultImage ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 25\n    }\n  }, \"Check Fields!\") // ) : !service ? (\n  //   <Button isDisabled type=\"submit\">\n  //     Creation Password?\n  //   </Button>\n  : !isCovalApproved && !approving ? __jsx(Button, {\n    onClick: approveCovalFlow,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 682,\n      columnNumber: 25\n    }\n  }, \"Approve Coval\") : !isCovalApproved && approving ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 686,\n      columnNumber: 25\n    }\n  }, \"Approving ...\") : Number(balance) < Number(price) ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 25\n    }\n  }, \"Insufficient Balance\") : hash || creating || showPreVaultMsg || showMakingVaultMsg ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 25\n    }\n  }, \"Making Vault ...\") : __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 25\n    }\n  }, \"DO IT!\")))), showPreVaultMsg ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 706,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 21\n    }\n  }), \"Talking to contract ...\") : null, showMakingVaultMsg ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 712,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 713,\n      columnNumber: 21\n    }\n  }), \"Making vault ... one moment\") : null, approving ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 718,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 719,\n      columnNumber: 21\n    }\n  }), \"Handling approval flow ...\") : null))))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      setHash(null);\n\n      if (!creating) {\n        if (!approving) {\n          fireMetaMask();\n          setShowPreVaultMsg(false);\n        } else {\n          setApproving(false);\n        }\n      } else {\n        setTimeout(function () {\n          setShowMakingVaultMsg(false);\n          location.href = location.origin + '/nft?id=' + tokenId;\n        }, 500);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 742,\n      columnNumber: 9\n    }\n  }) : null);\n}\n\n_s(Create, \"8s2SRkOzbK1MKfoYvqtUIhShWBM=\", false, function () {\n  return [useDisclosure, useRouter, useWeb3React, useContract, useContract];\n});\n\n_c = Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Create.tsx"],"names":["FormControl","FormLabel","FormHelperText","FormErrorMessage","Input","Stack","Tabs","TabList","TabPanels","Tab","TabPanel","Box","Flex","RadioGroup","Radio","Textarea","Button","ButtonGroup","Text","Divider","Alert","AlertIcon","Collapse","useDisclosure","Select","Loader","useWeb3React","useEffect","useState","useRouter","TransactionToast","EMBLEM_API","contractAddresses","useContract","isETHAddress","Embed","DokaImageEditorModal","transakSDK","locale_en_gb","createDefaultImageReader","createDefaultImageWriter","setPlugins","plugin_crop","plugin_crop_locale_en_gb","plugin_crop_defaults","plugin_finetune","plugin_finetune_locale_en_gb","plugin_finetune_defaults","plugin_filter","plugin_filter_locale_en_gb","plugin_filter_defaults","plugin_annotate","plugin_annotate_locale_en_gb","markup_editor_defaults","markup_editor_locale_en_gb","editorDefaults","imageReader","imageWriter","locale","tokenId","cipherTextHash","nonce","signature","mintPassword","Create","props","modalVisible","setModalVisible","modalResult","setModalResult","showEditorButton","setShowEditorButton","isOpen","onToggle","query","tabIndex","setTabIndex","account","chainId","vaultAddress","setVaultAddress","vaultPubPriv","setVaultPubPriv","vaultName","setVaultName","vaultDesc","setVaultDesc","vaultImage","setVaultImage","ownedImage","setOwnedImage","password","setPassword","isCovalApproved","setIsCovalApproved","loaded","state","setState","hash","setHash","experimental","setExperimental","showPreVaultMsg","setShowPreVaultMsg","showMakingVaultMsg","setShowMakingVaultMsg","decimals","setDecimals","allowance","setAllowance","balance","setBalance","price","setPrice","creating","setCreating","approving","setApproving","vaultKey","setVaultKey","vaultValue","setVaultValue","vaultType","setVaultType","showEmbed","setShowEmbed","handlerContract","vaultHandler","vaultHandlerAbi","covalContract","coval","covalAbi","transak","initializeTransak","address","coin","apiKey","environment","defaultCryptoCurrency","walletAddress","themeColor","fiatCurrency","email","redirectURL","hostURL","window","location","origin","widgetHeight","widgetWidth","on","ALL_EVENTS","data","console","log","EVENTS","TRANSAK_ORDER_SUCCESSFUL","orderData","close","init","getContractStates","then","toString","balanceOf","Number","fireMetaMask","buyWithSignature","setTimeout","error","code","approveCovalFlow","approve","handleSubmit","evt","preventDefault","body","fromAddress","toAddress","description","name","image","values","push","value","JSON","stringify","fetch","method","headers","service","response","json","tx","previewFile","preview","document","querySelector","inputelement","reader","FileReader","files","size","alert","addEventListener","src","result","readAsDataURL","acct","setAcct","index","e","target","length","res","dest","onloadend","base64data","URL","createObjectURL","Math","pow","href"],"mappings":"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","sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  FormErrorMessage,\n  Input,\n  Stack,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Box,\n  Flex,\n  RadioGroup,\n  Radio,\n  Textarea,\n  Button,\n  ButtonGroup,\n  Text,\n  Divider,\n  Alert,\n  AlertIcon,\n  Collapse,\n  useDisclosure,\n  Select\n} from '@chakra-ui/core'\n\nimport Loader from 'react-loader'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, contractAddresses } from '../constants'\nimport { Contract } from '@ethersproject/contracts'\nimport { useContract } from '../hooks'\nimport { isETHAddress } from '../utils'\nimport Embed from './Embed'\n// react-doka\nimport { DokaImageEditor, DokaImageEditorModal, DokaImageEditorOverlay } from 'react-doka';\nimport transakSDK from '@transak/transak-sdk'\n\n// doka\nimport {\n    // editor\n    locale_en_gb,\n    createDefaultImageReader,\n    createDefaultImageWriter,\n\n    // plugins\n    setPlugins,\n    plugin_crop,\n    plugin_crop_locale_en_gb,\n    plugin_crop_defaults,\n    plugin_finetune,\n    plugin_finetune_locale_en_gb,\n    plugin_finetune_defaults,\n    plugin_filter,\n    plugin_filter_locale_en_gb,\n    plugin_filter_defaults,\n    plugin_annotate,\n    plugin_annotate_locale_en_gb,\n    markup_editor_defaults,\n    markup_editor_locale_en_gb,\n} from 'doka';\n\nsetPlugins(plugin_crop, plugin_finetune, plugin_filter, plugin_annotate);\n\nconst editorDefaults = {\n    imageReader: createDefaultImageReader(),\n    imageWriter: createDefaultImageWriter(),\n    ...plugin_crop_defaults,\n    ...plugin_finetune_defaults,\n    ...plugin_filter_defaults,\n    ...markup_editor_defaults,\n    locale: {\n        ...locale_en_gb,\n        ...plugin_crop_locale_en_gb,\n        ...plugin_finetune_locale_en_gb,\n        ...plugin_filter_locale_en_gb,\n        ...plugin_annotate_locale_en_gb,\n        ...markup_editor_locale_en_gb,\n    },\n};\n\nlet tokenId, cipherTextHash, nonce, signature = null\nlet mintPassword = null\n\nexport default function Create(props: any) {\n  // modal\n  const [modalVisible, setModalVisible] = useState(false);\n  const [modalResult, setModalResult] = useState('');\n  const [showEditorButton, setShowEditorButton] = useState(true);\n\n  const { isOpen, onToggle } = useDisclosure()\n  const { query } = useRouter()\n  const [tabIndex, setTabIndex] = useState(0)\n  const { account, chainId } = useWeb3React()\n  const [vaultAddress, setVaultAddress] = useState(account || '')\n  const [vaultPubPriv, setVaultPubPriv] = useState('Public')\n  const [vaultName, setVaultName] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [ownedImage, setOwnedImage] = useState('')\n  const [password, setPassword] = useState('')\n  // const [service, setService] = useState('')\n  const [isCovalApproved, setIsCovalApproved] = useState(false)\n  const [state, setState] = useState({ loaded: true, private: false })\n  const [hash, setHash] = useState(null)\n  // const [cipherTextHash, setCipherTextHash] = useState(null)\n  // const [tokenId, setTokenId] = useState(null)\n  // const [mintPassword, setMintPassword] = useState(null)\n  // const [nonce, setNonce] = useState(null)\n  // const [signature, setSignature] = useState(null)\n  const [experimental, setExperimental] = useState(true)\n  const [showPreVaultMsg, setShowPreVaultMsg] = useState(false)\n  const [showMakingVaultMsg, setShowMakingVaultMsg] = useState(false)\n  const [decimals, setDecimals] = useState(null)\n  const [allowance, setAllowance] = useState(null)\n  const [balance, setBalance] = useState(null)\n  const [price, setPrice] = useState(null)\n  const [creating, setCreating] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [vaultKey, setVaultKey] = useState('')  \n  const [vaultValue, setVaultValue] = useState('')\n  const [vaultType, setVaultType] = useState(\"image\")\n  const [showEmbed, setShowEmbed] = useState(false)\n  \n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true)\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  let transak\n  const initializeTransak = (address?: string, coin? : string)=>{\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',  // Your API Key\n      environment: 'PRODUCTION', // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '', // Your customer's wallet address\n      themeColor: '000000', // App theme color\n      fiatCurrency: 'USD', // INR/GBP\n      // fiatAmount: 350,\n      email: '', // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    });\n  \n    // To get all the events\n    transak.on(transak.ALL_EVENTS, (data) => {\n      console.log(data)\n    });\n  \n    // This will trigger when the user marks payment is made.\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, (orderData) => {\n      console.log(orderData);\n      transak.close();\n    });\n  \n    transak.init()\n  }\n\n  const getContractStates = async () => {\n    setDecimals(await covalContract.decimals())\n    setAllowance(\n      await covalContract\n        .allowance(account, contractAddresses.vaultHandler[chainId])\n        .then((balance: { toString: () => string }) => balance.toString())\n    )\n    setBalance(await covalContract.balanceOf(account).then((balance: { toString: () => string }) => balance.toString()))\n    setPrice(await handlerContract.price().then((balance: { toString: () => string }) => balance.toString()))\n    // console.log(\n    //   'balance',\n    //   balance,\n    //   'allowance',\n    //   allowance,\n    //   'price',\n    //   price,\n    //   Number(allowance) >= Number(price),\n    //   Number(balance) > Number(price)\n    // )\n    if (Number(allowance) >= Number(price)) {\n      setIsCovalApproved(true)\n    } else {\n      setIsCovalApproved(false)\n    }\n  }\n\n  const fireMetaMask = () => {\n    setCreating(true)\n    // console.log(vaultAddress, tokenId, cipherTextHash, nonce, signature)\n    ;(handlerContract as Contract)\n      .buyWithSignature(vaultAddress, tokenId, cipherTextHash, nonce, signature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n          // setCreating(false)\n          setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setCreating(false)\n          setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const approveCovalFlow = () => {\n    setApproving(true)\n    ;(covalContract as Contract)\n      .approve(contractAddresses.vaultHandler[chainId], '100000000000000')\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code == 4001) {\n          setApproving(false)\n        }\n      })\n  }\n\n  const handleSubmit = (evt: { preventDefault: () => void }) => {\n    evt.preventDefault()\n    // if (service !== 'kms') {\n    //   return alert('incorrect password')\n    // }\n    setState({ loaded: false, private: state.private })\n    let body = {\n      fromAddress: account,\n      toAddress: vaultAddress,\n      description: vaultDesc,\n      name: vaultName,\n      ownedImage: ownedImage,\n      image: vaultImage,\n      chainId: chainId,\n      private: state.private,\n      password: password || '',\n      values: []\n    }\n    if (vaultKey && vaultValue) {\n      body.values.push({\"key\": vaultKey, value: vaultValue})\n    }\n    console.log(JSON.stringify(body))\n    fetch(EMBLEM_API + '/mint2', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify(body),\n    }).then(async function (response) {\n      setState({ loaded: true, private: state.private })\n      let body = await response.json()\n      tokenId = body.data.tokenId\n      // console.log(body.data.nonce, body.data.signature, body.data.cipherTextHash)\n      if (chainId === 137) {\n        nonce = body.data.nonce\n        signature = body.data.signature\n        cipherTextHash = body.data.cipherTextHash\n        fireMetaMask()\n        setShowPreVaultMsg(false)\n      } else {\n        mintPassword = body.password\n        setHash(body.data.tx)\n        setShowPreVaultMsg(true)\n      }\n    })\n  }\n\n  function previewFile() {\n    const preview = document.querySelector('#preview') as HTMLImageElement\n    const inputelement = document.querySelector('input[type=file]') as HTMLInputElement //.files[0];\n    const reader = new FileReader()\n    if (inputelement.files[0].size > 5000000) {\n      delete inputelement.files\n      return alert('File too large')\n    } else {\n      // alert('under')\n    }\n    reader.addEventListener(\n      'load',\n      function () {\n        // convert image file to base64 string\n        if (preview) preview.src = reader.result?.toString() || ''\n        if (preview) setVaultImage(preview.src)\n        setShowEditorButton(true)\n        setModalResult('')\n      },\n      false\n    )\n\n    if (inputelement.files) {\n\n      \n      reader.readAsDataURL(inputelement.files[0])\n    }\n  }\n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setVaultAddress(account)\n    }\n  }, [account, acct])\n\n  useEffect(() => {\n    account && chainId ? getContractStates() : null\n  })\n\n  return (\n    <Loader loaded={state.loaded}>\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n        <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n          <Tabs defaultIndex={0} index={tabIndex} onChange={(index) => setTabIndex(index)}>\n            <TabList>\n              <Tab>Make</Tab>\n              <Tab>My</Tab>\n              <Tab>Vault</Tab>\n              {/* <Tab>EDIT</Tab> */}\n            </TabList>\n\n            <TabPanels>\n              <TabPanel>\n                <Stack\n                  direction=\"column\"\n                  align=\"center\"\n                  spacing=\"2rem\"\n                  flexGrow={1}\n                  justifyContent=\"center\"\n                  px=\"2rem\"\n                  py=\"2rem\"\n                  shouldWrapChildren\n                >\n                  <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <FormControl isRequired isInvalid={vaultAddress && !isETHAddress(vaultAddress)}>\n                      <FormLabel htmlFor=\"owner-address\">Vault Owner Address</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"owner-address\"\n                        aria-describedby=\"owner-helper-text\"\n                        placeholder=\"0xdeadbeef\"\n                        maxLength={42}\n                        value={vaultAddress}\n                        onChange={(e) => setVaultAddress(e.target.value)}\n                      />\n                      <FormHelperText id=\"owner-helper-text\">\n                        What is the address of the first owner of this vault? Pro tip: When you connect a web3 wallet,\n                        this will populate automagically with your address.\n                      </FormHelperText>\n                      <FormErrorMessage>Address is not a valid ETH address</FormErrorMessage>\n                    </FormControl>\n                  </Stack>\n\n                  <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <FormControl as=\"fieldset\" isRequired>\n                      <FormLabel>Public or Private?</FormLabel>\n                      <RadioGroup\n                        id=\"pubpriv\"\n                        defaultValue=\"Public\"\n                        onChange={(e) => {\n                          setVaultPubPriv(e.target.value)\n                          setState({ loaded: state.loaded, private: e.target.value === 'Private' })\n                        }}\n                      >\n                        <Radio value=\"Public\">Public</Radio>\n                        <Radio value=\"Private\">Private</Radio>\n                      </RadioGroup>\n                      <FormHelperText id=\"email-helper-text\">\n                        Do you want the contents and addresses to be password protected?\n                      </FormHelperText>\n                    </FormControl>\n                    {state.private ? (\n                      <FormControl isRequired>\n                        <FormLabel>Password</FormLabel>\n                        <Input\n                          type=\"password\"\n                          id=\"vault-password\"\n                          onChange={(e) => setPassword(e.target.value)}\n                          aria-describedby=\"password-helper-text\"\n                          autoComplete=\"off\"\n                        />\n                        <FormHelperText id=\"password-helper-text\">Used to encrypt/decrypt</FormHelperText>\n                      </FormControl>\n                    ) : (\n                      ''\n                    )}\n                  </Stack>\n                  <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <Button onClick={() => setTabIndex(1)}>Next</Button>\n                  </Stack>\n                </Stack>\n              </TabPanel>\n\n              <TabPanel>\n                <Stack\n                  direction=\"column\"\n                  align=\"center\"\n                  spacing=\"2rem\"\n                  flexGrow={1}\n                  justifyContent=\"center\"\n                  px=\"2rem\"\n                  py=\"2rem\"\n                  shouldWrapChildren\n                >\n                  <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <FormControl isRequired isInvalid={vaultName && vaultName.length < 3 && vaultName.length > 200}>\n                      <FormLabel htmlFor=\"vault-name\">Vault Name</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"vault-name\"\n                        aria-describedby=\"vault-name-text\"\n                        minLength={3}\n                        maxLength={200}\n                        value={vaultName}\n                        onChange={(e) => setVaultName(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"vault-name-text\">Give it some love so you can find it later.</FormHelperText>\n                      <FormErrorMessage>Name needs at least 3 characters. 200 is max.</FormErrorMessage>\n                    </FormControl>\n                  </Stack>\n                  <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <FormControl isRequired isInvalid={vaultDesc && vaultDesc.length < 3 && vaultDesc.length > 1024}>\n                      <FormLabel htmlFor=\"vault-desc\">Vault Description</FormLabel>\n                      <Textarea\n                        id=\"vault-desc\"\n                        size=\"lg\"\n                        aria-describedby=\"vault-desc-text\"\n                        minLength={3}\n                        maxLength={1024}\n                        value={vaultDesc}\n                        onChange={(e) => setVaultDesc(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"vault-desc-text\">\n                        Add some fluffy text to tell people what the point is!\n                      </FormHelperText>\n                      <FormErrorMessage>Description needs to be at least 3 characters. 1024 is max.</FormErrorMessage>\n                    </FormControl>\n                  </Stack>\n                  <Button onClick={onToggle}>Include Encrypted Text In Vault</Button>\n                  <Collapse isOpen={isOpen}>\n                    {experimental? (\n                      <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                      <FormControl>\n                        <FormLabel htmlFor=\"vault-key\">Key</FormLabel>\n                        <Input\n                          type=\"text\"\n                          id=\"vault-key\"\n                          aria-describedby=\"vault-key-text\"\n                          maxLength={200}\n                          value={vaultKey}\n                          onChange={(e) => setVaultKey(e.target.value)}\n                          autoComplete=\"off\"\n                        />\n                        <FormHelperText id=\"vault-key-text\">Key Name (Public)</FormHelperText>\n                        <FormErrorMessage>---Some Error</FormErrorMessage>\n                      </FormControl>\n                      <FormControl>\n                        <FormLabel htmlFor=\"vault-value\">Value</FormLabel>\n                        <Input\n                          type=\"password\"\n                          id=\"vault-value\"\n                          aria-describedby=\"vault-value-text\"\n                          maxLength={200}\n                          value={vaultValue}\n                          onChange={(e) => setVaultValue(e.target.value)}\n                          autoComplete=\"off\"\n                        />\n                        <FormHelperText id=\"vault-value-text\">Key Value (Encrypted)</FormHelperText>\n                        <FormErrorMessage>---Some Error</FormErrorMessage>\n                      </FormControl>\n                    </Stack>\n                    ) : null}\n                  </Collapse>\n                  <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <ButtonGroup spacing={4}>\n                      <Button onClick={() => setTabIndex(0)}>Back</Button>\n                      <Button onClick={() => setTabIndex(2)}>Next</Button>\n                    </ButtonGroup>\n                  </Stack>\n                </Stack>\n              </TabPanel>\n\n              <TabPanel>\n                <Stack\n                  direction=\"column\"\n                  align=\"center\"\n                  spacing=\"2rem\"\n                  flexGrow={1}\n                  justifyContent=\"center\"\n                  px=\"2rem\"\n                  py=\"2rem\"\n                  shouldWrapChildren\n                >\n                  <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <FormControl>\n                      \n                      <Box p={1} rounded=\"lg\" overflow=\"hidden\">\n                        <Stack align=\"center\" p={1}>                          \n                          {\n                            vaultType !== \"upload\" ? (\n                              <>\n                                <FormLabel htmlFor=\"vault-image-url\">Embed Display URL</FormLabel>\n                                <Input\n                                  type=\"text\"\n                                  id=\"vault-image-url\"\n                                  aria-describedby=\"vault-image-url-text\"\n                                  minLength={3}\n                                  maxLength={200}\n                                  value={vaultImage}\n                                  defaultValue=\"http://\"\n                                  onChange={(e) => {\n                                    setVaultImage(e.target.value)\n                                    setShowEmbed(true)\n                                    console.log(\"showEmbed\", showEmbed)\n                                  }}\n                                  autoComplete=\"off\"\n                                  w={300}\n                                />\n                                <hr/>\n                                <FormLabel mt={3} htmlFor=\"owned-url\">Optional URL For Vault Owner *</FormLabel>\n                                <Input\n                                  type=\"text\"\n                                  id=\"owned-url\"\n                                  aria-describedby=\"owned-url-text\"\n                                  minLength={3}\n                                  maxLength={200}\n                                  value={ownedImage}\n                                  defaultValue=\"http://\"\n                                  onChange={(e) => {\n                                    setOwnedImage(e.target.value)\n                                  }}\n                                  autoComplete=\"off\"\n                                  w={300}\n                                />\n                              </>\n                            ) : (\n                              <>\n                              <FormLabel htmlFor=\"vault-img\">Vault Image</FormLabel>\n                              <input type=\"file\" onChange={() => previewFile()} />\n                              <Divider />\n                              </>\n                            )\n                          }\n                          <Divider />\n                          <FormLabel htmlFor=\"type-selector\">Display Type</FormLabel>\n                          <Select id=\"type-selector\" w=\"45%\" value={vaultType}\n                            onChange={(e)=>{\n                              setVaultType(e.target.value)\n                              console.log(\"type\", vaultType)\n                            }}\n                          >\n                            <option value=\"embed\" >Embed (url)</option>\n                            <option value=\"upload\" >Image (upload)</option>\n                            {/* <option value=\"embed\" >Embed (url)</option>\n                            <option value=\"video\" >Video (url)</option> */}\n                          </Select>\n                          {\n                            vaultType == \"upload\" ? (\n                              <>\n                                \n                                  <img id=\"preview\" src={modalResult} width=\"250\" margin-top=\"6\"></img>\n                                \n                                \n                                {modalVisible && (\n                                    <DokaImageEditorModal\n                                        {...editorDefaults}\n                                        className='doka'\n                                        src={vaultImage}\n                                        onLoad={(res) => console.log('load modal image', res)}\n                                        onHide={() => setModalVisible(false)}\n                                        onProcess={({ dest }) => {\n                                          var reader = new FileReader();\n                                            reader.readAsDataURL(dest); \n                                            reader.onloadend = function() {\n                                                var base64data = reader.result?.toString();                \n                                                setVaultImage(base64data)\n                                                setModalResult(URL.createObjectURL(dest))\n                                                setShowEditorButton(false)\n                                            }\n                                          }\n                                        }\n                                    />\n                                )}\n                                {/* {!!modalResult.length && (\n                                    <p>\n                                        <img src={modalResult} alt=\"\" />\n                                    </p>\n                                )} */}\n                                {showEditorButton && vaultImage? (\n                                  <Button mt={2} onClick={() => setModalVisible(true)}>Edit Image</Button>\n                                ):null}\n                              </>\n                            ) : showEmbed == true ? (\n                              <>                                \n                                <Embed url={vaultImage}/>\n                              </>\n                            ) : null\n                          }\n                          \n                        </Stack>\n                      </Box>\n                    </FormControl>\n                  </Stack>\n\n                  {/* <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <FormControl>\n                      <FormLabel htmlFor=\"service\">API password:</FormLabel>\n                      <Input\n                        type=\"password\"\n                        id=\"service\"\n                        aria-describedby=\"service\"\n                        onChange={(e) => setService(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                    </FormControl>\n                  </Stack> */}\n\n                  {isCovalApproved ? (\n                    <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                      <Box maxW=\"sm\" borderWidth=\"1px\" p={1} rounded=\"lg\" overflow=\"hidden\">\n                        <Text>Creating a vault spends {price * Math.pow(10, -decimals)} Coval from your wallet</Text>\n                      </Box>\n                    </Stack>\n                  ) : null}\n\n                  {Number(balance) < Number(price) ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\">\n                      <Button\n                        width=\"100%\"\n                        // as=\"a\"\n                        // {...{\n                        //   href:\n                        //     location.origin +\n                        //     '/buy?chain=' +\n                        //     chainId +\n                        //     '&output=0x3D658390460295FB963f54dC0899cfb1c30776Df&input=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n                        //   target: '_blank',\n                        //   rel: 'noopener noreferrer',\n                        // }}\n                        onClick={()=>{initializeTransak(vaultAddress, 'COVAL')}}\n                      >\n                        Buy $Coval\n                      </Button>\n                    </Box>\n                  ) : null}\n\n                  <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <ButtonGroup spacing={4}>\n                      <Button onClick={() => setTabIndex(1)}>Back</Button>\n                      {!account ? (\n                        <Button isDisabled type=\"submit\">\n                          No Wallet Connected!\n                        </Button>\n                      ) : !vaultAddress ||\n                        !isETHAddress(vaultAddress) ||\n                        !vaultName ||\n                        vaultName.length < 3 ||\n                        !vaultDesc ||\n                        vaultDesc.length < 3 || \n                        !vaultImage ? (\n                        <Button isDisabled type=\"submit\">\n                          Check Fields!\n                        </Button>\n                      // ) : !service ? (\n                      //   <Button isDisabled type=\"submit\">\n                      //     Creation Password?\n                      //   </Button>\n                      ) : !isCovalApproved && !approving ? (\n                        <Button onClick={approveCovalFlow} type=\"submit\">\n                          Approve Coval\n                        </Button>\n                      ) : !isCovalApproved && approving ? (\n                        <Button isDisabled type=\"submit\">\n                          Approving ...\n                        </Button>\n                      ) : Number(balance) < Number(price) ? (\n                        <Button isDisabled type=\"submit\">\n                          Insufficient Balance\n                        </Button>\n                      ) : hash || creating || showPreVaultMsg || showMakingVaultMsg ? (\n                        <Button isDisabled type=\"submit\">\n                          Making Vault ...\n                        </Button>\n                      ) : (\n                        <Button onClick={handleSubmit} type=\"submit\">\n                          DO IT!\n                        </Button>\n                      )}\n                    </ButtonGroup>\n                  </Stack>\n                </Stack>\n                {showPreVaultMsg ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    Talking to contract ...\n                  </Alert>\n                ) : null}\n                {showMakingVaultMsg ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    Making vault ... one moment\n                  </Alert>\n                ) : null}\n                {approving ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    Handling approval flow ...\n                  </Alert>\n                ) : null}\n              </TabPanel>\n              {/* <TabPanel>\n                <Stack>\n                <div style={{ height: '70vh', backgroundColor: 'white' }}>\n                  <DokaImageEditor\n                      {...editorDefaults}\n                      className='doka'\n                      src={'./image.jpeg'}\n                      onLoad={(res: any) => console.log('load inline image', res)}\n                      onProcess={({ dest }) => setInlineResult(URL.createObjectURL(dest))}\n                  />\n                </div>\n                </Stack>\n              </TabPanel> */}\n            </TabPanels>\n          </Tabs>\n        </Box>\n      </Flex>\n      {hash ? (\n        <TransactionToast\n          hash={hash}\n          onComplete={() => {\n            setHash(null)\n            if (!creating) {\n              if (!approving) {\n                fireMetaMask()\n                setShowPreVaultMsg(false)\n              } else {\n                setApproving(false)\n              }\n            } else {\n              setTimeout(() => {\n                setShowMakingVaultMsg(false)\n                location.href = location.origin + '/nft?id=' + tokenId\n              }, 500)\n            }\n          }}\n        />\n      ) : null}\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}