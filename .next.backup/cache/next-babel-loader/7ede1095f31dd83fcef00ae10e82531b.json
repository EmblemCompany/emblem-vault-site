{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, Text, Stack, Button, useColorMode } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR } from '../constants';\nexport default function KeysModal({\n  isOpen,\n  onClose,\n  mnemonic,\n  privKeyBTC,\n  privKeyETH,\n  privValues\n}) {\n  const phrase = mnemonic;\n  const btcKey = privKeyBTC;\n  const ethKey = privKeyETH;\n  const values = privValues;\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    0: phraseCopied,\n    1: setPhraseCopied\n  } = useState(false);\n  useEffect(() => {\n    if (phraseCopied) {\n      const timeout = setTimeout(() => {\n        setPhraseCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [phraseCopied]);\n  const {\n    0: BTCKeyCopied,\n    1: setBTCKeyCopied\n  } = useState(false);\n  useEffect(() => {\n    if (BTCKeyCopied) {\n      const timeout = setTimeout(() => {\n        setBTCKeyCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [BTCKeyCopied]);\n  const {\n    0: ETHKeyCopied,\n    1: setETHKeyCopied\n  } = useState(false);\n  useEffect(() => {\n    if (ETHKeyCopied) {\n      const timeout = setTimeout(() => {\n        setETHKeyCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ETHKeyCopied]);\n  const {\n    0: valueCopied,\n    1: setValueCopied\n  } = useState(false);\n  useEffect(() => {\n    if (valueCopied) {\n      const timeout = setTimeout(() => {\n        setValueCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [valueCopied]);\n\n  function copyWithFlag(content, whichOne) {\n    copy(content);\n    whichOne == 'phrase' ? setPhraseCopied(true) : whichOne == 'BTCKey' ? setBTCKeyCopied(true) : whichOne == 'ETHKey' ? setETHKeyCopied(true) : whichOne == 'values' ? setValueCopied(true) : null;\n  } // console.log(\"----------- keys modal\")\n\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true\n  }, __jsx(ModalOverlay, null), __jsx(ModalContent, {\n    color: COLOR[colorMode]\n  }, __jsx(ModalHeader, null, __jsx(Text, null, \"Your Vault Keys\")), __jsx(ModalCloseButton, null), __jsx(ModalBody, null, __jsx(Stack, {\n    direction: \"column\",\n    mb: 10\n  }, __jsx(Stack, {\n    direction: \"row\"\n  }, __jsx(Text, null, \"Your mnemonic phrase (click to copy):\")), __jsx(Stack, {\n    direction: \"row\"\n  }, __jsx(Button, {\n    width: \"100%\",\n    whiteSpace: \"unset\",\n    height: \"unset\",\n    p: 2,\n    onClick: () => copyWithFlag(phrase, 'phrase'),\n    isActive: true\n  }, phraseCopied ? __jsx(Text, null, \"Copied!\") : __jsx(Text, null, phrase))), __jsx(Stack, {\n    direction: \"row\",\n    mt: 4\n  }, __jsx(Text, null, \"Your BTC private key (click to copy):\")), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\"\n  }, __jsx(Button, {\n    whiteSpace: \"unset\",\n    height: \"unset\",\n    p: 2,\n    onClick: () => copyWithFlag(btcKey, 'BTCKey')\n  }, BTCKeyCopied ? __jsx(Text, null, \"Copied!\") : __jsx(Text, {\n    isTruncated: true\n  }, btcKey))), __jsx(Stack, {\n    direction: \"row\",\n    mt: 4\n  }, __jsx(Text, null, \"Your ETH private key (click to copy):\")), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"space-between\"\n  }, __jsx(Button, {\n    whiteSpace: \"unset\",\n    height: \"unset\",\n    p: 2,\n    onClick: () => copyWithFlag(ethKey, 'ETHKey')\n  }, ETHKeyCopied ? __jsx(Text, null, \"Copied!\") : __jsx(Text, {\n    isTruncated: true\n  }, ethKey))), privValues && privValues.length > 0 ? __jsx(React.Fragment, null, __jsx(Stack, {\n    direction: \"row\",\n    mt: 4\n  }, __jsx(Text, null, \"Your Values (click to copy): \")), privValues.map((item, index) => {\n    return __jsx(Stack, {\n      direction: \"row\",\n      key: index,\n      justify: \"space-between\"\n    }, __jsx(Text, {\n      isTruncated: true\n    }, item.key), __jsx(Button, {\n      whiteSpace: \"unset\",\n      height: \"unset\",\n      p: 2,\n      onClick: () => copyWithFlag(item.value, 'values')\n    }, valueCopied ? __jsx(Text, null, \"Copied!\") : __jsx(Text, {\n      isTruncated: true\n    }, item.value)));\n  })) : null))));\n}","map":null,"metadata":{},"sourceType":"module"}