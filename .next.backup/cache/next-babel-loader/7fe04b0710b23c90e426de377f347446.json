{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Simulator.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, Input, Link, useDisclosure, useColorMode } from '@chakra-ui/core';\nimport TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport CryptoJS from 'crypto-js';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nimport NFTSlideshow from './embed/NFTSlideshow';\nimport CoinBalance from './partials/CoinBalance';\nimport transakSDK from '@transak/transak-sdk';\nvar AddrModal = dynamic(_c = function _c() {\n  return import('./AddrModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./AddrModal')];\n    },\n    modules: ['./AddrModal']\n  }\n});\n_c2 = AddrModal;\nvar KeysModal = dynamic(_c3 = function _c3() {\n  return import('./KeysModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./KeysModal')];\n    },\n    modules: ['./KeysModal']\n  }\n});\n_c4 = KeysModal;\nvar OfferModal = dynamic(_c5 = function _c5() {\n  return import('./OfferModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./OfferModal')];\n    },\n    modules: ['./OfferModal']\n  }\n});\n_c6 = OfferModal;\nexport default function Simulator() {\n  _s();\n\n  var _this = this;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(false),\n      approved = _useState[0],\n      setApproved = _useState[1];\n\n  var _useState2 = useState(query.key),\n      mintPassword = _useState2[0],\n      setMintPassword = _useState2[1];\n\n  var _useState3 = useState(query.offer || false),\n      showOffer = _useState3[0],\n      setShowOffer = _useState3[1];\n\n  var _useState4 = useState(query.framed || true),\n      framed = _useState4[0],\n      setFramed = _useState4[1];\n\n  var _useState5 = useState('266157498622821'),\n      tokenId = _useState5[0],\n      setTokenId = _useState5[1];\n\n  var _useState6 = useState(query.experimental),\n      experimental = _useState6[0],\n      setExperimental = _useState6[1];\n\n  var _useState7 = useState(''),\n      vaultName = _useState7[0],\n      setVaultName = _useState7[1];\n\n  var _useState8 = useState(''),\n      vaultIPFS = _useState8[0],\n      setVaultIPFS = _useState8[1];\n\n  var _useState9 = useState(''),\n      vaultImageIPFS = _useState9[0],\n      setVaultImageIPFS = _useState9[1];\n\n  var _useState10 = useState(''),\n      vaultCiphertextV2 = _useState10[0],\n      setVaultCiphertextV2 = _useState10[1];\n\n  var _useState11 = useState(''),\n      vaultDesc = _useState11[0],\n      setVaultDesc = _useState11[1];\n\n  var _useState12 = useState(''),\n      vaultImage = _useState12[0],\n      setVaultImage = _useState12[1];\n\n  var _useState13 = useState(''),\n      ownedImage = _useState13[0],\n      setOwnedImage = _useState13[1];\n\n  var _useState14 = useState([]),\n      vaultValues = _useState14[0],\n      setVaultValues = _useState14[1];\n\n  var _useState15 = useState(false),\n      loadedValues = _useState15[0],\n      setLoadedValues = _useState15[1];\n\n  var _useState16 = useState([]),\n      vaultDataValues = _useState16[0],\n      setVaultDataValues = _useState16[1];\n\n  var _useState17 = useState([]),\n      vaultAddresses = _useState17[0],\n      setVaultAddresses = _useState17[1];\n\n  var _useState18 = useState(false),\n      vaultPrivacy = _useState18[0],\n      setVaultPrivacy = _useState18[1];\n\n  var _useState19 = useState(0),\n      vaultTotalValue = _useState19[0],\n      setVaultTotalValue = _useState19[1];\n\n  var _useState20 = useState(null),\n      vaultChainId = _useState20[0],\n      setVaultChainId = _useState20[1];\n\n  var _useState21 = useState(null),\n      vaultChain = _useState21[0],\n      setVaultChain = _useState21[1];\n\n  var _useState22 = useState(null),\n      hash = _useState22[0],\n      setHash = _useState22[1];\n\n  var _useState23 = useState(''),\n      currCoin = _useState23[0],\n      setCurrCoin = _useState23[1];\n\n  var _useState24 = useState(''),\n      currAddr = _useState24[0],\n      setCurrAddr = _useState24[1];\n\n  var _useState25 = useState({\n    loaded: false\n  }),\n      state = _useState25[0],\n      setState = _useState25[1];\n\n  var _useState26 = useState(false),\n      mine = _useState26[0],\n      setMine = _useState26[1];\n\n  var _useState27 = useState(false),\n      claiming = _useState27[0],\n      setClaiming = _useState27[1];\n\n  var _useState28 = useState('claimed'),\n      status = _useState28[0],\n      setStatus = _useState28[1];\n\n  var _useState29 = useState(null),\n      claimedBy = _useState29[0],\n      setClaimedBy = _useState29[1];\n\n  var _useState30 = useState(''),\n      mnemonic = _useState30[0],\n      setMnemonic = _useState30[1];\n\n  var _useState31 = useState(''),\n      privKeyBTC = _useState31[0],\n      setPrivKeyBTC = _useState31[1];\n\n  var _useState32 = useState(''),\n      privKeyETH = _useState32[0],\n      setPrivKeyETH = _useState32[1];\n\n  var _useState33 = useState([]),\n      privValues = _useState33[0],\n      setKeyValues = _useState33[1];\n\n  var _useState34 = useState(false),\n      loadingApi = _useState34[0],\n      setLoadingApi = _useState34[1];\n\n  var _useState35 = useState(''),\n      decryptedEffect = _useState35[0],\n      setDecryptedEffect = _useState35[1];\n\n  var _useState36 = useState(false),\n      decryptedEffectRunning = _useState36[0],\n      setDecryptedEffectRunning = _useState36[1];\n\n  var _useState37 = useState(''),\n      decryptPassword = _useState37[0],\n      setDecryptPassword = _useState37[1];\n\n  var _useState38 = useState(false),\n      invalidVault = _useState38[0],\n      setInvalidVault = _useState38[1];\n\n  var _useState39 = useState(false),\n      hasCheckedNft = _useState39[0],\n      setHasCheckedNft = _useState39[1];\n\n  var _useState40 = useState(false),\n      accepting = _useState40[0],\n      setAccepting = _useState40[1];\n\n  var _useState41 = useState(false),\n      approving = _useState41[0],\n      setApproving = _useState41[1];\n\n  var _useState42 = useState(false),\n      acceptable = _useState42[0],\n      setAcceptable = _useState42[1];\n\n  var _useState43 = useState(''),\n      transferPassword = _useState43[0],\n      setTransferPassword = _useState43[1];\n\n  var _useState44 = useState(false),\n      showTransferPassword = _useState44[0],\n      setShowTransferPassword = _useState44[1];\n\n  var _useState45 = useState(false),\n      preTransfering = _useState45[0],\n      setPreTransfering = _useState45[1];\n\n  var _useState46 = useState(null),\n      transferToAddress = _useState46[0],\n      setTransferToAddress = _useState46[1];\n\n  var _useState47 = useState(false),\n      transfering = _useState47[0],\n      setTransfering = _useState47[1];\n\n  var _useState48 = useState(null),\n      owner = _useState48[0],\n      setOwner = _useState48[1];\n\n  var _useState49 = useState(initTorus()),\n      torus = _useState49[0],\n      setTorus = _useState49[1];\n\n  var _useState50 = useState(false),\n      live = _useState50[0],\n      setLive = _useState50[1];\n\n  var _useState51 = useState(null),\n      nonce = _useState51[0],\n      setNonce = _useState51[1];\n\n  var _useState52 = useState(null),\n      mintSignature = _useState52[0],\n      setMintSignature = _useState52[1];\n\n  var _useState53 = useState(null),\n      to = _useState53[0],\n      setTo = _useState53[1];\n\n  var _useState54 = useState(false),\n      showMakingVaultMsg = _useState54[0],\n      setShowMakingVaultMsg = _useState54[1];\n\n  var _useState55 = useState(false),\n      minting = _useState55[0],\n      setMinting = _useState55[1]; // const [transferImage, setTransferImage] = useState('')\n\n\n  var handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  var _useDisclosure = useDisclosure(),\n      isOpenAddrModal = _useDisclosure.isOpen,\n      onOpenAddrModal = _useDisclosure.onOpen,\n      onCloseAddrModal = _useDisclosure.onClose;\n\n  var _useDisclosure2 = useDisclosure(),\n      isOpenKeysModal = _useDisclosure2.isOpen,\n      onOpenKeysModal = _useDisclosure2.onOpen,\n      onCloseKeysModal = _useDisclosure2.onClose;\n\n  var _useDisclosure3 = useDisclosure(),\n      isOpenOfferModal = _useDisclosure3.isOpen,\n      onOpenOfferModal = _useDisclosure3.onOpen,\n      onCloseOfferModal = _useDisclosure3.onClose;\n\n  var _useDisclosure4 = useDisclosure(),\n      isOpen = _useDisclosure4.isOpen,\n      onToggle = _useDisclosure4.onToggle;\n\n  var _useDisclosure5 = useDisclosure(),\n      isManageAddressOpen = _useDisclosure5.isOpen,\n      onManageAddressToggle = _useDisclosure5.onToggle;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var transak;\n  var transferImage;\n\n  function initTorus() {\n    return _initTorus.apply(this, arguments);\n  }\n\n  function _initTorus() {\n    _initTorus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n      var _torus;\n\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _torus = new TorusSdk({\n                baseUrl: \"\".concat(window.location.origin, \"/serviceworker\"),\n                enableLogging: true,\n                network: \"testnet\" // details for test net\n\n              });\n              _context15.next = 3;\n              return _torus.init({\n                skipSw: true,\n                skipInit: true,\n                skipPrefetch: true\n              });\n\n            case 3:\n              console.log(\"Initialized Torus\");\n              return _context15.abrupt(\"return\", _torus);\n\n            case 5:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15);\n    }));\n    return _initTorus.apply(this, arguments);\n  }\n\n  var initializeTransak = function initializeTransak(address, coin) {\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',\n      // Your API Key\n      environment: 'PRODUCTION',\n      // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '',\n      // Your customer's wallet address\n      themeColor: '000000',\n      // App theme color\n      fiatCurrency: 'USD',\n      // INR/GBP\n      // fiatAmount: 350,\n      email: '',\n      // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    }); // To get all the events\n\n    transak.on(transak.ALL_EVENTS, function (data) {\n      console.log(data);\n    }); // This will trigger when the user marks payment is made.\n\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, function (orderData) {\n      console.log(orderData);\n      transak.close();\n    });\n    transak.init();\n  };\n\n  var checkLiveliness = function checkLiveliness(tokenId, cb) {\n    fetch(EMBLEM_API + '/liveliness', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        tokenId: tokenId\n      })\n    }).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context.sent;\n                // setLive(data.live)\n                console.log(\"Liveliness check\", data);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    return cb();\n  };\n\n  var transferVault = function transferVault() {\n    setTransfering(true);\n    emblemContract.transferFrom(account, transferToAddress, tokenId).then(function (_ref2) {\n      var hash = _ref2.hash;\n      setHash(hash);\n    })[\"catch\"](function (error) {});\n  };\n\n  var delayedMint = function delayedMint() {\n    // setCreating(true)\n    setMinting(true);\n    var cipherTextHash = vaultAddresses.filter(function (address) {\n      return address.coin == \"ETH\";\n    })[0].address;\n    handlerContract.buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature).then(function (_ref3) {\n      var hash = _ref3.hash;\n      setTimeout(function () {\n        setHash(hash); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {// setShowMakingVaultMsg(false)\n      // setMinting(false)\n    });\n  };\n\n  var fireMetaMask = function fireMetaMask() {\n    console.log(mintPassword);\n    setAccepting(true);\n    getWitness(function (witness) {\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;\n      handlerContract.transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature).then(function (_ref4) {\n        var hash = _ref4.hash;\n        setTimeout(function () {\n          setHash(hash); // setShowMakingVaultMsg(true)\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })[\"catch\"](function (error) {\n        setAccepting(false);\n\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(\"tx failed.\", error);\n        } else {// setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      });\n    });\n  };\n\n  var addPreTransfer = function addPreTransfer() {\n    console.log('transferImage', \"0x\" + transferImage);\n    setPreTransfering(true);\n    handlerContract.addPreTransfer(tokenId, \"0x\" + transferImage).then(function (_ref5) {\n      var hash = _ref5.hash;\n      // setTimeout(() => {\n      setHash(hash);\n      console.log(\"Set Pre Transfering True\", preTransfering); // setShowMakingVaultMsg(true)\n      // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      if (error === null || error === void 0 ? void 0 : error.code) {\n        console.log(\"Error?\");\n        setPreTransfering(false);\n        setShowTransferPassword(false);\n        setTransferPassword('');\n      } else {// setShowTransferPassword(!showTransferPassword? true : false)\n        // setPreTransfering(false)\n        // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  var handleApproveForall = function handleApproveForall() {\n    setApproving(true);\n    emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(function (_ref6) {\n      var hash = _ref6.hash;\n      setTimeout(function () {\n        setHash(hash); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(\"tx failed.\", error);\n      } else {\n        setApproving(false); // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  var getVault = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              loadCache();\n              _context2.next = 3;\n              return fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 3:\n              responce = _context2.sent;\n              _context2.next = 6;\n              return responce.json();\n\n            case 6:\n              jsonData = _context2.sent;\n\n              // console.log('vault response was ', jsonData)\n              if (jsonData.image_ipfs) {\n                getIPFSImage(jsonData.image_ipfs);\n              }\n\n              if (!jsonData.name) {\n                setState({\n                  loaded: true\n                });\n                setInvalidVault(true);\n              } else {\n                setStates(jsonData);\n                saveCache(jsonData);\n                setLoadingApi(false);\n                setInvalidVault(false);\n              }\n\n              !vaultPrivacy && !loadedValues && vaultAddresses.length > 0 ? getAllBalancesLive([], tokenId, function (v) {\n                if (v) {\n                  setVaultValues(v);\n                }\n              }) : null;\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getVault() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var getIPFSImage = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(hash) {\n      var responce, jsonData, preview;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return fetch('https://gateway.ipfs.io/ipfs/' + hash, {\n                method: 'GET',\n                headers: {// redirect:'follow'\n                }\n              });\n\n            case 2:\n              responce = _context3.sent;\n              _context3.next = 5;\n              return responce.text();\n\n            case 5:\n              jsonData = _context3.sent;\n              // setVaultImage(jsonData) \n              preview = document.querySelector('img.d-block');\n              preview.src = jsonData;\n              console.log(jsonData);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getIPFSImage(_x2) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var getWitness = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return fetch(EMBLEM_API + '/witness/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  chainid: chainId.toString()\n                }\n              });\n\n            case 2:\n              responce = _context4.sent;\n              _context4.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context4.sent;\n\n              if (!jsonData.signature) {\n                _context4.next = 11;\n                break;\n              }\n\n              console.log('witness', jsonData);\n              return _context4.abrupt(\"return\", cb(jsonData));\n\n            case 11:\n              return _context4.abrupt(\"return\", cb(false));\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function getWitness(_x3) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var setStates = function setStates(jsonData) {\n    framed && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\" + framed : null;\n\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2);\n      console.log(\"ciphertextV2\", jsonData.ciphertextV2);\n    }\n\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setOwnedImage(jsonData.ownedImage || null);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    setVaultValues(vaultValues.concat(jsonData.values));\n    setVaultDataValues(jsonData.attributes.filter(function (item) {\n      return item.trait_type === \"key\";\n    }));\n    setVaultAddresses(jsonData.addresses);\n    setVaultIPFS(jsonData.ipfs || null);\n    setVaultImageIPFS(jsonData.image_ipfs || null); // if (jsonData.live == false) {\n    //   checkLiveliness(jsonData.tokenId, ()=>{\n    //   })\n    // }\n    // setLive(jsonData.live == false ? false : true)\n\n    setNonce(jsonData.nonce);\n    setMintSignature(jsonData.signature);\n    setTo(jsonData.to);\n    setVaultChain(jsonData.network);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : jsonData.network == \"xdai\" ? 100 : jsonData.network == \"bsc\" ? 56 : jsonData.network == \"fantom\" ? 250 : 97);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    } // console.log('inside getstates. mine is ', mine)\n\n\n    setState({\n      loaded: true\n    });\n    var isPvt = jsonData.addresses.filter(function (item) {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n  }; // const getEthBalances = async (address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n  //   setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n  //   // console.log('get eth balances', jsonData.values)\n  //   return cb(jsonData.values)\n  // }\n  // const getBtcBalance = async (values, address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // setVaultValues(values.concat(jsonData.values))\n  //   return cb(values.concat(jsonData.values))\n  // }\n  // const getNftBalance = async (values, address, cb) => {\n  //   // console.log(address)\n  //   const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   if (jsonData.length > 0) {\n  //     // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n  //     return cb(values.concat(jsonData))\n  //   } else {\n  //     return cb(values)\n  //   }\n  // }\n  // const getAllBalances = async (values, tokenId, cb) => {\n  //   // console.log(address)\n  //   const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   console.log('responce', responce, jsonData)\n  //   if (jsonData.balances.length > 0) {      \n  //     return cb(values.concat(jsonData.balances))\n  //   } else {\n  //     return cb(values)\n  //   }\n  // }\n\n\n  var getAllBalancesLive = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(values, tokenId, cb) {\n      var ethAddress, btcAddress, nmcAddress, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              setVaultValues([]); // console.log(address)\n\n              if (!loadedValues) {\n                _context5.next = 3;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", cb(false));\n\n            case 3:\n              setLoadedValues(true);\n              console.log(vaultAddresses);\n              ethAddress = vaultAddresses.filter(function (address) {\n                return address.coin == 'ETH';\n              });\n              btcAddress = vaultAddresses.filter(function (address) {\n                return address.coin == 'BTC';\n              });\n              nmcAddress = 'NHGaeLmkGovyUWx6tnkg6RfebZmDBYkUko'; //vaultAddresses.filter(address=>{ return address.coin == 'NMC'})\n\n              _context5.next = 10;\n              return fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress + '/' + nmcAddress, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 10:\n              responce = _context5.sent;\n              _context5.next = 13;\n              return responce.json();\n\n            case 13:\n              jsonData = _context5.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context5.next = 19;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 19:\n              return _context5.abrupt(\"return\", cb(values));\n\n            case 20:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function getAllBalancesLive(_x4, _x5, _x6) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalancesByAddress = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(values, ethAddress, btcAddress, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context6.sent;\n              _context6.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context6.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context6.next = 11;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 11:\n              return _context6.abrupt(\"return\", cb(values));\n\n            case 12:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function getAllBalancesByAddress(_x7, _x8, _x9, _x10) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  var saveCache = function saveCache(vault) {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  var loadCache = function loadCache() {\n    var vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  var savePasswordToLocalStorage = function savePasswordToLocalStorage() {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  var loadPasswordFromLocalStorage = function loadPasswordFromLocalStorage() {\n    var storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  }; // const getKeys = async (signature, tokenId, cb) => {\n  //   var myHeaders = new Headers()\n  //   myHeaders.append('chainId', chainId.toString())\n  //   myHeaders.append('service', 'evmetadata')\n  //   myHeaders.append('Content-Type', 'application/json')\n  //   var raw = JSON.stringify({ signature: signature })\n  //   const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n  //     method: 'POST',\n  //     headers: myHeaders,\n  //     body: raw,\n  //     redirect: 'follow',\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log('getKeys response is ', jsonData)\n  //   return cb(jsonData)\n  // }\n  // const getSignedJWT = async (signature, tokenId, cb)=>{\n  //   var myHeaders = new Headers()\n  //   myHeaders.append('chainid', chainId.toString())\n  //   myHeaders.append('Content-Type', 'application/json')\n  //   var raw = JSON.stringify({ signature: signature, tokenId: tokenId })\n  //   const responce = await fetch('https://tor-us-signer.vercel.app/sign', {\n  //     method: 'POST',\n  //     headers: myHeaders,\n  //     body: raw,\n  //     redirect: 'follow',\n  //   })\n  //   const jsonData = await responce.json()\n  //   return cb(jsonData)\n  // }\n  // const getRemoteKey = async (tokenId, token, cb)=> {   \n  //   let error = false\n  //   let keys = await (await torus).getTorusKey(\n  //       \"tor-us-signer-vercel\", \n  //       tokenId,\n  //       { verifier_id: tokenId }, \n  //       token, \n  //     ).catch(err=>{\n  //       error = err.message\n  //     })\n  //     if (error) {\n  //       console.log(\"error\", error)\n  //       return cb(false)\n  //     } else {\n  //       return cb(keys)\n  //     }\n  // }\n\n\n  var addAddress = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(signature, tokenId, coin, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature,\n                coin: coin\n              });\n              _context7.next = 7;\n              return fetch(EMBLEM_API + '/address/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context7.sent;\n              _context7.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context7.sent;\n              return _context7.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function addAddress(_x11, _x12, _x13, _x14) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  var decryptEmbed = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature\n              });\n              _context8.next = 7;\n              return fetch(EMBLEM_API + '/embed/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context8.sent;\n              _context8.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context8.sent;\n              return _context8.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function decryptEmbed(_x15, _x16, _x17) {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      var owned, _owner, finish, _finish;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _finish = function _finish3() {\n                _finish = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n                  var acceptable, isApproved;\n                  return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          _context9.next = 2;\n                          return handlerContract.getPreTransfer(tokenId);\n\n                        case 2:\n                          acceptable = _context9.sent;\n                          _context9.next = 5;\n                          return emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n\n                        case 5:\n                          isApproved = _context9.sent;\n                          setApproved(isApproved);\n                          setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\");\n                          setOwner(_owner);\n                          setMine(_owner === account);\n                          loadPasswordFromLocalStorage();\n\n                        case 11:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }));\n                return _finish.apply(this, arguments);\n              };\n\n              finish = function _finish2() {\n                return _finish.apply(this, arguments);\n              };\n\n              owned = false;\n              _context10.prev = 3;\n              _context10.next = 6;\n              return emblemContract.ownerOf(tokenId);\n\n            case 6:\n              _owner = _context10.sent;\n              finish();\n              _context10.next = 14;\n              break;\n\n            case 10:\n              _context10.prev = 10;\n              _context10.t0 = _context10[\"catch\"](3);\n              _owner = \"0x0000000000000000000000000000000000000000\";\n              finish();\n\n            case 14:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, null, [[3, 10]]);\n    }));\n\n    return function getContractStates() {\n      return _ref14.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {// console.log(\"mine?\", mine)\n    // console.log(\"claiming?\", claiming)\n    // console.log(\"accepting?\", accepting)\n    // console.log(\"acceptable\", acceptable)\n  });\n\n  var hasAddress = function hasAddress(coin) {\n    console.log(coin, vaultAddresses.filter(function (address) {\n      return address.coin == coin;\n    }).length > 0);\n    return vaultAddresses.filter(function (address) {\n      return address.coin == coin;\n    }).length > 0;\n  }; // const handleSign = async () => {\n  //   library\n  //     .getSigner(account)\n  //     .signMessage('Claim: ' + tokenId)\n  //     .then((signature) => {\n  //       if (!vaultCiphertextV2) {\n  //       getKeys(signature, tokenId, (result) => {\n  //         // console.log('HandleSign response is ' + result)\n  //         setMnemonic(result.decrypted.phrase)\n  //         setPrivKeyBTC(\n  //           result.decrypted.keys.filter((key) => {\n  //             return key.coin === 'btc'\n  //           })[0].privkey\n  //         )\n  //         setPrivKeyETH(\n  //           result.decrypted.keys.filter((key) => {\n  //             return key.coin === 'eth'\n  //           })[0].privkey\n  //         )\n  //         setKeyValues(result.decrypted.values)\n  //         onOpenKeysModal()\n  //       })\n  //     } else {\n  //       getSignedJWT(signature, tokenId, (token)=>{\n  //         // console.log(\"Got JWT\", token)\n  //         getRemoteKey(tokenId, token.token, (keys)=>{\n  //           // console.log(\"Got Keys\", keys)\n  //           var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey)\n  //           let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n  //           // console.log(\"Decrypted payload locally\", payload)    \n  //           setKeyValues(payload.values)\n  //           setMnemonic(payload.phrase)\n  //           let btcKey = window.phrasePathToKey(payload.phrase, vaultAddresses.filter(address=>{ return address.coin == 'BTC'})[0].path)\n  //           setPrivKeyBTC(btcKey)\n  //           let ethKey = window.phrasePathToKey(payload.phrase, vaultAddresses.filter(address=>{ return address.coin == 'ETH'})[0].path)\n  //           setPrivKeyETH(ethKey)\n  //           vaultAddresses.forEach(address=>{              \n  //             address.key = window.phrasePathToKey(payload.phrase,address.path)\n  //           })\n  //           // setKeyValues(vaultAddresses)\n  //           onOpenKeysModal()\n  //         })          \n  //       })\n  //     }\n  //   })\n  // }\n\n\n  var handleAddressSign = /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(coin) {\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              library.getSigner(account).signMessage('Address: ' + tokenId).then(function (signature) {\n                addAddress(signature, tokenId, coin, function (result) {\n                  getVault();\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    return function handleAddressSign(_x18) {\n      return _ref15.apply(this, arguments);\n    };\n  }();\n\n  var handleOwnedEmbed = /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              library.getSigner(account).signMessage('Embed: ' + tokenId).then(function (signature) {\n                decryptEmbed(signature, tokenId, function (result) {\n                  setVaultImage(result.ownedImage);\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    return function handleOwnedEmbed() {\n      return _ref16.apply(this, arguments);\n    };\n  }();\n\n  var handleClaim = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              emblemContract.burn(tokenId).then(function (_ref18) {\n                var hash = _ref18.hash;\n                setClaiming(true);\n                setTimeout(function () {\n                  setHash(hash);\n                }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n              });\n\n            case 1:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    return function handleClaim() {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n\n  var startDecryptEffect = /*#__PURE__*/function () {\n    var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n      var theLetters, ctnt, speed, increment, clen, si, stri, block, fixed, nextFrame;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              nextFrame = function _nextFrame(pos) {\n                for (var i = 0; i < clen - stri; i++) {\n                  //Random number\n                  var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n                  var letter = theLetters.charAt(num);\n                  block = block + letter;\n                }\n\n                if (si == increment - 1) {\n                  stri++;\n                }\n\n                if (si == increment) {\n                  // Add a letter;\n                  // every speed*10 ms\n                  fixed = fixed + ctnt.charAt(stri - 1);\n                  si = 0;\n                } // $(\"#output\").html(fixed + block);\n\n\n                setDecryptedEffect(fixed + block);\n                block = '';\n              };\n\n              if (!decryptedEffectRunning) {\n                _context14.next = 3;\n                break;\n              }\n\n              return _context14.abrupt(\"return\");\n\n            case 3:\n              setDecryptedEffectRunning(true);\n              theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n              ctnt = 'Decrypting'; // Your text goes here\n\n              speed = 5; // ms per frame\n\n              increment = 8; // frames per step. Must be >2\n\n              clen = ctnt.length;\n              si = 0;\n              stri = 0;\n              block = '';\n              fixed = '';\n\n              (function rustle(i) {\n                setTimeout(function () {\n                  if (--i) {\n                    rustle(i);\n                  } else {\n                    setDecryptedEffectRunning(false);\n                  }\n\n                  nextFrame(i);\n                  si = si + 1;\n                }, speed);\n              })(clen * increment + 1);\n\n            case 14:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    return function startDecryptEffect() {\n      return _ref19.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    alert(1); // setTokenId('266157498622821')\n\n    getVault();\n  }, []);\n  useEffect(function () {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null; // console.log('in the usefeect that clls getcontractstates')\n  });\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n');\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    console.log(vaultAddresses);\n    var ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      var ethAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'ETH';\n      })[0].address;\n      var btcAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'BTC';\n      })[0].address;\n      console.log(\"SUCCESS\", vaultAddresses);\n      getAllBalancesByAddress([], ethAddress, btcAddress, function (values) {\n        setVaultValues(values);\n      }); // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {\n      console.log('WTF', err);\n    }\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\");\n    return vaultAddresses;\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(function (item) {\n      if (item.address.includes('private')) {\n        var cipherText = item.address.replace('private:', '');\n        item.address = decrypt(cipherText, key);\n      }\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  function visitOpenSeaLink() {\n    location.href = 'https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + (vaultChainId == 137 ? 'matic/' : '') + contractAddresses.emblemVault[vaultChainId] + '/' + tokenId;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 892,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 893,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 894,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 895,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 896,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 897,\n      columnNumber: 9\n    }\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: \"\\n              // $(\\\".NFT\\\").tilt({    \\n              //     maxTilt: 3\\n              // });\\n              $(\\\".NFT\\\").trigger('mouseenter');\\n              $(\\\".NFT\\\").trigger('mouseclick'), '.NFT';\\n              \"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 898,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 910,\n      columnNumber: 7\n    }\n  }), showOffer ? __jsx(OfferModal, {\n    isOpen: isOpenOfferModal,\n    onClose: onCloseOfferModal,\n    tokenId: tokenId,\n    mine: mine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 922,\n      columnNumber: 9\n    }\n  }) : null, __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 931,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 932,\n      columnNumber: 9\n    }\n  }), loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 933,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault ? __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 935,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    className: \"NFT\",\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 936,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"blue.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 947,\n      columnNumber: 17\n    }\n  }, \"Vault Network: \", CHAIN_ID_NAMES[vaultChainId]), __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\" // textTransform=\"uppercase\"\n    ,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 960,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null), __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 973,\n      columnNumber: 17\n    }\n  }, vaultValues.length && vaultValues.filter(function (item) {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultImage,\n    items: vaultValues.map(function (value) {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 975,\n      columnNumber: 23\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 977,\n      columnNumber: 23\n    }\n  }), mine && ownedImage ? __jsx(Button, {\n    onClick: function onClick() {\n      handleOwnedEmbed();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 981,\n      columnNumber: 21\n    }\n  }, \"(OWNED) Show Full Embed\") : null), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 984,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 985,\n      columnNumber: 19\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 986,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    fontSize: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 987,\n      columnNumber: 23\n    }\n  }, vaultChainId == chainId ? __jsx(Link, {\n    href: \"./vaultlist?address=\" + owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 989,\n      columnNumber: 25\n    }\n  }, \"Owner: \", owner) : null), __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 994,\n      columnNumber: 23\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 995,\n      columnNumber: 25\n    }\n  }))))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1001,\n      columnNumber: 17\n    }\n  }, vaultPrivacy ? __jsx(Box, {\n    mb: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1003,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1004,\n      columnNumber: 23\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: function onChange(e) {\n      return tryDecrypt(e.target.value);\n    },\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1007,\n      columnNumber: 23\n    }\n  })) : __jsx(Box, {\n    d: \"flex\",\n    backgroundColor: colorMode == \"light\" ? \"gray.100\" : \"gray.700\",\n    alignItems: \"baseline\",\n    className: \"coin-balance-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1015,\n      columnNumber: 21\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1016,\n      columnNumber: 23\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    mt: 2,\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1017,\n      columnNumber: 25\n    }\n  }, \"Current Contents:  \", __jsx(\"button\", {\n    onClick: function onClick() {\n      getAllBalancesLive([], tokenId, function (v) {\n        setLoadedValues(false);\n        setVaultValues(v);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1019,\n      columnNumber: 46\n    }\n  }, \" [Refresh Balances]\")), __jsx(Text, {\n    as: \"p\",\n    color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1028,\n      columnNumber: 25\n    }\n  }, \"$\", Number(vaultTotalValue.toFixed(4)).toLocaleString()), vaultValues.length ? vaultValues.map(function (coin) {\n    return __jsx(Stack, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032,\n        columnNumber: 31\n      }\n    }, __jsx(CoinBalance, {\n      colorMode: colorMode,\n      coin: coin,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1033,\n        columnNumber: 33\n      }\n    }));\n  }) : null, vaultDataValues.length ? vaultDataValues.map(function (data) {\n    return __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1041,\n        columnNumber: 31\n      }\n    }, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1045,\n      columnNumber: 27\n    }\n  }, \"Nothing in here! Fill 'er up!\") : null))))) : __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1055,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1056,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1060,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1062,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      if (claiming && !accepting && !preTransfering) {\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account); // handleSign()\n      } else if (preTransfering) {\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        setApproving(false);\n        getVault();\n        setHash(null);\n      } else if (transfering) {\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else if (minting) {\n        checkLiveliness(tokenId, function () {\n          setMinting(false);\n          setLive(true); // setShowMakingVaultMsg(false)\n          // location.href = location.origin + '/nft?id=' + tokenId\n        });\n      } else {\n        console.log('minting', minting);\n        console.log('claiming', claiming);\n        console.log('accepting', accepting);\n        console.log('preTransfering', preTransfering);\n        console.log('approving', approving);\n        console.log(\"Unknown state\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1069,\n      columnNumber: 11\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1113,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(Simulator, \"DU8gDy57Jkdiv0msbMiLFwaDBnk=\", false, function () {\n  return [useWeb3React, useRouter, useContract, useContract, useDisclosure, useDisclosure, useDisclosure, useDisclosure, useDisclosure, useColorMode];\n});\n\n_c7 = Simulator;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"AddrModal$dynamic\");\n$RefreshReg$(_c2, \"AddrModal\");\n$RefreshReg$(_c3, \"KeysModal$dynamic\");\n$RefreshReg$(_c4, \"KeysModal\");\n$RefreshReg$(_c5, \"OfferModal$dynamic\");\n$RefreshReg$(_c6, \"OfferModal\");\n$RefreshReg$(_c7, \"Simulator\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Simulator.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","Input","Link","useDisclosure","useColorMode","TorusSdk","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","Loader","dynamic","TransactionToast","EMBLEM_API","contractAddresses","useContract","CHAIN_ID_NAMES","CryptoJS","ReactMarkdown","gfm","Embed","NFTSlideshow","CoinBalance","transakSDK","AddrModal","KeysModal","OfferModal","Simulator","account","chainId","library","query","approved","setApproved","key","mintPassword","setMintPassword","offer","showOffer","setShowOffer","framed","setFramed","tokenId","setTokenId","experimental","setExperimental","vaultName","setVaultName","vaultIPFS","setVaultIPFS","vaultImageIPFS","setVaultImageIPFS","vaultCiphertextV2","setVaultCiphertextV2","vaultDesc","setVaultDesc","vaultImage","setVaultImage","ownedImage","setOwnedImage","vaultValues","setVaultValues","loadedValues","setLoadedValues","vaultDataValues","setVaultDataValues","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","vaultChain","setVaultChain","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","loaded","state","setState","mine","setMine","claiming","setClaiming","status","setStatus","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","privValues","setKeyValues","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","hasCheckedNft","setHasCheckedNft","accepting","setAccepting","approving","setApproving","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","preTransfering","setPreTransfering","transferToAddress","setTransferToAddress","transfering","setTransfering","owner","setOwner","initTorus","torus","setTorus","live","setLive","nonce","setNonce","mintSignature","setMintSignature","to","setTo","showMakingVaultMsg","setShowMakingVaultMsg","minting","setMinting","handlerContract","vaultHandler","vaultHandlerAbi","emblemContract","emblemVault","emblemAbi","isOpenAddrModal","isOpen","onOpenAddrModal","onOpen","onCloseAddrModal","onClose","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","isOpenOfferModal","onOpenOfferModal","onCloseOfferModal","onToggle","isManageAddressOpen","onManageAddressToggle","colorMode","transak","transferImage","_torus","baseUrl","window","location","origin","enableLogging","network","init","skipSw","skipInit","skipPrefetch","console","log","initializeTransak","address","coin","apiKey","environment","defaultCryptoCurrency","walletAddress","themeColor","fiatCurrency","email","redirectURL","hostURL","widgetHeight","widgetWidth","on","ALL_EVENTS","data","EVENTS","TRANSAK_ORDER_SUCCESSFUL","orderData","close","checkLiveliness","cb","fetch","method","headers","service","chainid","toString","body","JSON","stringify","then","response","json","transferVault","transferFrom","error","delayedMint","cipherTextHash","filter","buyWithSignature","setTimeout","fireMetaMask","getWitness","witness","transferWithCode","signature","code","addPreTransfer","handleApproveForall","setApprovalForAll","getVault","loadCache","responce","jsonData","image_ipfs","getIPFSImage","name","setStates","saveCache","length","getAllBalancesLive","v","text","preview","document","querySelector","src","image","includes","ciphertextV2","description","totalValue","concat","values","attributes","item","trait_type","addresses","ipfs","isPvt","ethAddress","btcAddress","nmcAddress","balances","getAllBalancesByAddress","vault","localStorage","setItem","parse","getItem","savePasswordToLocalStorage","loadPasswordFromLocalStorage","storedPw","addAddress","myHeaders","Headers","append","raw","redirect","decryptEmbed","getContractStates","finish","getPreTransfer","isApprovedForAll","isApproved","_from","_owner","owned","ownerOf","hasAddress","handleAddressSign","getSigner","signMessage","result","handleOwnedEmbed","handleClaim","burn","startDecryptEffect","nextFrame","pos","i","clen","stri","num","Math","floor","theLetters","random","letter","charAt","block","si","increment","fixed","ctnt","speed","rustle","alert","splitDescription","words","desc","split","trim","tryDecrypt","ciphertext","replace","bytes","AES","decrypt","enc","Utf8","decryptAddresses","err","getAddresses","forEach","cipherText","decryptedData","visitOpenSeaLink","href","__html","toLocaleString","type","map","value","canSwipe","e","target","Number","toFixed","attribute_key"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n  Tooltip,\n  Collapse,\n  FormControl,\n  FormLabel,\n  useColorMode,\n  IconButton\n} from '@chakra-ui/core'\n\nimport {HStack, VStack, Circle } from '@chakra-ui/react'\nimport TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { isETHAddress, validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\nimport { CHAIN_ID_NAMES } from '../utils'\nimport CryptoJS from 'crypto-js'\nimport { addTokenToWallet, addMany } from '../public/web3'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport Embed from './Embed'\nimport NFTSlideshow from './embed/NFTSlideshow'\nimport CoinBalance from './partials/CoinBalance'\nimport { chakra } from '@chakra-ui/system'\nimport transakSDK from '@transak/transak-sdk'\ndeclare global {\n  interface Window { phraseToKey: any, phrasePathToKey: any }\n}\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\nconst OfferModal = dynamic(() => import('./OfferModal'))\n\nexport default function Simulator() {\n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [approved, setApproved] = useState(false)\n  const [mintPassword, setMintPassword] = useState(query.key)\n  const [showOffer, setShowOffer] = useState(query.offer || false)\n  const [framed, setFramed] = useState(query.framed || true)\n  const [tokenId, setTokenId] = useState('266157498622821')\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultIPFS, setVaultIPFS] = useState('')\n  const [vaultImageIPFS, setVaultImageIPFS] = useState('')\n  const [vaultCiphertextV2, setVaultCiphertextV2] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [ownedImage, setOwnedImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [loadedValues, setLoadedValues] = useState(false)\n  const [vaultDataValues, setVaultDataValues] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [vaultChain, setVaultChain] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [privValues, setKeyValues] = useState([])\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [hasCheckedNft, setHasCheckedNft] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n  const [preTransfering, setPreTransfering] = useState(false)\n  const [transferToAddress, setTransferToAddress] = useState(null)\n  const [transfering, setTransfering] = useState(false)\n  const [owner, setOwner] = useState(null)\n  const [torus, setTorus] = useState(initTorus())\n  const [live, setLive] = useState(false)\n  const [nonce, setNonce] = useState(null)\n  const [mintSignature, setMintSignature] = useState(null)\n  const [to, setTo] = useState(null)\n  const [showMakingVaultMsg, setShowMakingVaultMsg] = useState(false)\n  const [minting, setMinting] = useState(false)\n  // const [transferImage, setTransferImage] = useState('')\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n  const { isOpen: isOpenOfferModal, onOpen: onOpenOfferModal, onClose: onCloseOfferModal } = useDisclosure()\n  const { isOpen, onToggle } = useDisclosure()\n  const { isOpen: isManageAddressOpen, onToggle: onManageAddressToggle } = useDisclosure()\n\n  const { colorMode } = useColorMode()\n\n  let transak\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  let transferImage;\n\n  async function initTorus() {\n    let _torus = new TorusSdk({\n      baseUrl: `${window.location.origin}/serviceworker`,\n      enableLogging: true,\n      network: \"testnet\", // details for test net\n    });\n    await _torus.init({skipSw: true, skipInit: true, skipPrefetch: true})\n    console.log(\"Initialized Torus\")\n    return _torus\n  }\n\n  const initializeTransak = (address?: string, coin? : string)=>{\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',  // Your API Key\n      environment: 'PRODUCTION', // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '', // Your customer's wallet address\n      themeColor: '000000', // App theme color\n      fiatCurrency: 'USD', // INR/GBP\n      // fiatAmount: 350,\n      email: '', // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    });\n  \n    // To get all the events\n    transak.on(transak.ALL_EVENTS, (data) => {\n      console.log(data)\n    });\n  \n    // This will trigger when the user marks payment is made.\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, (orderData) => {\n      console.log(orderData);\n      transak.close();\n    });\n  \n    transak.init()\n  }\n\n  const checkLiveliness = (tokenId, cb)=>{\n    fetch(EMBLEM_API + '/liveliness', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({tokenId: tokenId}),\n    }).then(async function (response) {\n      let data = await response.json()\n      // setLive(data.live)\n      console.log(\"Liveliness check\", data)\n    })\n    return cb()\n  }\n\n  const transferVault = () => {\n    setTransfering(true)\n    ;(emblemContract as Contract).transferFrom(account, transferToAddress, tokenId)\n    .then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n    .catch((error: ErrorWithCode) => {})\n  }\n\n  const delayedMint = () => {\n    // setCreating(true)\n      setMinting(true)\n      let cipherTextHash = vaultAddresses.filter(address=>{ return address.coin == \"ETH\"})[0].address\n      ;(handlerContract as Contract)\n      .buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n          // setShowMakingVaultMsg(true)\n          \n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n          // setShowMakingVaultMsg(false)\n          // setMinting(false)\n      })    \n  }\n\n  const fireMetaMask = () => {\n    console.log(mintPassword)\n    setAccepting(true)\n    getWitness(witness=>{\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;(handlerContract as Contract)\n      .transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        setAccepting(false)\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          // setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n    })\n    \n  }\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\"+transferImage)\n    setPreTransfering(true)\n    ;(handlerContract as Contract)\n      .addPreTransfer(tokenId, \"0x\"+transferImage)\n      .then(({ hash }: { hash: string }) => {\n        // setTimeout(() => {\n          setHash(hash)\n          console.log(\"Set Pre Transfering True\", preTransfering)\n          // setShowMakingVaultMsg(true)\n        // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code){   \n            console.log(\"Error?\")       \n            setPreTransfering(false)\n            setShowTransferPassword(false)\n            setTransferPassword('')\n        } else {\n          // setShowTransferPassword(!showTransferPassword? true : false)\n          // setPreTransfering(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const handleApproveForall = () => {\n    setApproving(true)\n    ;(emblemContract as Contract)\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const getVault = async () => {\n    loadCache()\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log('vault response was ', jsonData)\n    if (jsonData.image_ipfs) {\n      getIPFSImage(jsonData.image_ipfs)\n    }\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      setStates(jsonData)\n      saveCache(jsonData)\n      setLoadingApi(false)\n      setInvalidVault(false)\n    }\n    {\n      !vaultPrivacy && !loadedValues && vaultAddresses.length > 0 ?    \n      getAllBalancesLive([], tokenId, (v)=>{\n        if (v) {\n          setVaultValues(v)\n        }        \n      }) : null\n    }\n  }\n\n  const getIPFSImage = async function(hash){\n    // alert(0)\n    const responce = await fetch('https://gateway.ipfs.io/ipfs/'+hash, {\n      method: 'GET',\n      headers: {\n        // redirect:'follow'\n      },\n    })\n    let jsonData = await responce.text()\n    // setVaultImage(jsonData) \n    const preview = document.querySelector('img.d-block') as HTMLImageElement \n    preview.src = jsonData\n    console.log(jsonData)  \n  }\n\n  const getWitness = async (cb) => {\n    const responce = await fetch(EMBLEM_API + '/witness/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log('vault response was ', jsonData)\n    if (jsonData.signature) {\n      console.log('witness', jsonData)\n      return cb(jsonData)\n    } else {\n      return cb(false)\n    }\n  }\n\n  const setStates = (jsonData) => {\n    framed && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\"+framed : null\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2)\n      console.log(\"ciphertextV2\", jsonData.ciphertextV2)\n    }\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setOwnedImage(jsonData.ownedImage || null)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    setVaultValues(vaultValues.concat(jsonData.values))\n    setVaultDataValues(jsonData.attributes.filter(item=>{return item.trait_type === \"key\"}))\n    setVaultAddresses(jsonData.addresses)\n    setVaultIPFS(jsonData.ipfs || null)\n    setVaultImageIPFS(jsonData.image_ipfs || null)\n    // if (jsonData.live == false) {\n    //   checkLiveliness(jsonData.tokenId, ()=>{\n\n    //   })\n    // }\n    // setLive(jsonData.live == false ? false : true)\n    setNonce(jsonData.nonce)\n    setMintSignature(jsonData.signature)\n    setTo(jsonData.to)\n    setVaultChain(jsonData.network)\n    setVaultChainId(\n      jsonData.network == 'mainnet' ? 1 : \n      jsonData.network == \"rinkeby\" ? 4 : \n      jsonData.network == \"mumbai\" ? 80001 : \n      jsonData.network == \"matic\" ? 137 : \n      jsonData.network == \"xdai\" ? 100 : \n      jsonData.network == \"bsc\" ? 56 : \n      jsonData.network == \"fantom\" ? 250 : \n      97\n    )\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    // console.log('inside getstates. mine is ', mine)\n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)\n  }\n\n  // const getEthBalances = async (address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n  //   setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n  //   // console.log('get eth balances', jsonData.values)\n  //   return cb(jsonData.values)\n  // }\n\n  // const getBtcBalance = async (values, address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // setVaultValues(values.concat(jsonData.values))\n  //   return cb(values.concat(jsonData.values))\n  // }\n\n  // const getNftBalance = async (values, address, cb) => {\n  //   // console.log(address)\n  //   const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   if (jsonData.length > 0) {\n  //     // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n  //     return cb(values.concat(jsonData))\n  //   } else {\n  //     return cb(values)\n  //   }\n  // }\n\n  // const getAllBalances = async (values, tokenId, cb) => {\n  //   // console.log(address)\n  //   const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n    \n  //   const jsonData = await responce.json()\n  //   console.log('responce', responce, jsonData)\n  //   if (jsonData.balances.length > 0) {      \n  //     return cb(values.concat(jsonData.balances))\n  //   } else {\n  //     return cb(values)\n  //   }\n  // }\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    setVaultValues([])\n    // console.log(address)\n    if (loadedValues) {\n      return cb(false)\n    }\n    setLoadedValues(true)\n    console.log(vaultAddresses)\n    let ethAddress = vaultAddresses.filter(address=>{ return address.coin == 'ETH'})\n    let btcAddress = vaultAddresses.filter(address=>{ return address.coin == 'BTC'})\n    let nmcAddress = 'NHGaeLmkGovyUWx6tnkg6RfebZmDBYkUko'//vaultAddresses.filter(address=>{ return address.coin == 'NMC'})\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress + '/' + nmcAddress , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const saveCache = (vault) => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)) // Save new state for later\n  }\n\n  const loadCache = () => {\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')) // Load vaults from storage before updating from server!\n    if (vault) {\n      setState({ loaded: true })\n      setStates(vault)\n      setLoadingApi(true)\n    }\n  }\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword) // Save new state for later\n  }\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword')\n    storedPw && acceptable ? setMintPassword(storedPw) : null //setMintPassword(null)\n  }\n\n  // const getKeys = async (signature, tokenId, cb) => {\n  //   var myHeaders = new Headers()\n  //   myHeaders.append('chainId', chainId.toString())\n  //   myHeaders.append('service', 'evmetadata')\n  //   myHeaders.append('Content-Type', 'application/json')\n\n  //   var raw = JSON.stringify({ signature: signature })\n  //   const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n  //     method: 'POST',\n  //     headers: myHeaders,\n  //     body: raw,\n  //     redirect: 'follow',\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log('getKeys response is ', jsonData)\n  //   return cb(jsonData)\n  // }\n\n  // const getSignedJWT = async (signature, tokenId, cb)=>{\n  //   var myHeaders = new Headers()\n  //   myHeaders.append('chainid', chainId.toString())\n  //   myHeaders.append('Content-Type', 'application/json')\n\n  //   var raw = JSON.stringify({ signature: signature, tokenId: tokenId })\n  //   const responce = await fetch('https://tor-us-signer.vercel.app/sign', {\n  //     method: 'POST',\n  //     headers: myHeaders,\n  //     body: raw,\n  //     redirect: 'follow',\n  //   })\n  //   const jsonData = await responce.json()\n  //   return cb(jsonData)\n  // }\n\n  // const getRemoteKey = async (tokenId, token, cb)=> {   \n  //   let error = false\n  //   let keys = await (await torus).getTorusKey(\n  //       \"tor-us-signer-vercel\", \n  //       tokenId,\n  //       { verifier_id: tokenId }, \n  //       token, \n  //     ).catch(err=>{\n  //       error = err.message\n  //     })\n  //     if (error) {\n  //       console.log(\"error\", error)\n  //       return cb(false)\n  //     } else {\n  //       return cb(keys)\n  //     }\n  // }\n\n  const addAddress = async (signature, tokenId, coin, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, coin: coin })\n    const responce = await fetch(EMBLEM_API + '/address/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const decryptEmbed = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    let owned = false\n    let _owner\n    try {\n      _owner  = await emblemContract.ownerOf(tokenId)\n      finish()\n    } catch(err){\n      _owner = \"0x0000000000000000000000000000000000000000\"\n      finish()\n    }\n\n    async function finish(){\n      let acceptable = await handlerContract.getPreTransfer(tokenId)\n      let isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId])\n      setApproved(isApproved)\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n      setOwner(_owner)\n      setMine(_owner === account)\n      loadPasswordFromLocalStorage()\n    }\n    \n  }\n\n  useEffect(()=>{\n    // console.log(\"mine?\", mine)\n    // console.log(\"claiming?\", claiming)\n    // console.log(\"accepting?\", accepting)\n    // console.log(\"acceptable\", acceptable)\n  })\n\n  const hasAddress = (coin)=>{\n    console.log(coin, vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0)\n    return vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0\n  }\n  \n  // const handleSign = async () => {\n  //   library\n  //     .getSigner(account)\n  //     .signMessage('Claim: ' + tokenId)\n  //     .then((signature) => {\n  //       if (!vaultCiphertextV2) {\n  //       getKeys(signature, tokenId, (result) => {\n  //         // console.log('HandleSign response is ' + result)\n  //         setMnemonic(result.decrypted.phrase)\n  //         setPrivKeyBTC(\n  //           result.decrypted.keys.filter((key) => {\n  //             return key.coin === 'btc'\n  //           })[0].privkey\n  //         )\n  //         setPrivKeyETH(\n  //           result.decrypted.keys.filter((key) => {\n  //             return key.coin === 'eth'\n  //           })[0].privkey\n  //         )\n  //         setKeyValues(result.decrypted.values)\n  //         onOpenKeysModal()\n  //       })\n  //     } else {\n  //       getSignedJWT(signature, tokenId, (token)=>{\n  //         // console.log(\"Got JWT\", token)\n  //         getRemoteKey(tokenId, token.token, (keys)=>{\n  //           // console.log(\"Got Keys\", keys)\n  //           var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey)\n  //           let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n  //           // console.log(\"Decrypted payload locally\", payload)    \n  //           setKeyValues(payload.values)\n  //           setMnemonic(payload.phrase)\n            \n  //           let btcKey = window.phrasePathToKey(payload.phrase, vaultAddresses.filter(address=>{ return address.coin == 'BTC'})[0].path)\n  //           setPrivKeyBTC(btcKey)\n  //           let ethKey = window.phrasePathToKey(payload.phrase, vaultAddresses.filter(address=>{ return address.coin == 'ETH'})[0].path)\n  //           setPrivKeyETH(ethKey)\n  //           vaultAddresses.forEach(address=>{              \n  //             address.key = window.phrasePathToKey(payload.phrase,address.path)\n  //           })\n  //           // setKeyValues(vaultAddresses)\n  //           onOpenKeysModal()\n  //         })          \n  //       })\n  //     }\n  //   })\n  // }\n\n  const handleAddressSign = async (coin: string) => {\n    library\n      .getSigner(account)\n      .signMessage('Address: ' + tokenId)\n      .then((signature) => {\n        addAddress(signature, tokenId, coin, (result) => {\n          getVault()\n        })\n      })\n  }\n\n  const handleOwnedEmbed = async () => {\n    library\n      .getSigner(account)\n      .signMessage('Embed: ' + tokenId)\n      .then((signature) => {\n        decryptEmbed(signature, tokenId, (result) => {\n          setVaultImage(result.ownedImage)\n        })        \n      })\n  }\n\n  const handleClaim = async () => {\n    emblemContract.burn(tokenId).then(({ hash }: { hash: string }) => {\n      setClaiming(true)\n      setTimeout(() => {\n        setHash(hash)\n      }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    })\n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random())\n        //Get random letter\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      // $(\"#output\").html(fixed + block);\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    alert(1)\n    // setTokenId('266157498622821')\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null\n    // console.log('in the usefeect that clls getcontractstates')\n  })\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n')\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    console.log(vaultAddresses)\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      let ethAddress = vaultAddresses.filter((item) => {return item.coin === 'ETH'})[0].address\n      let btcAddress = vaultAddresses.filter((item) => {return item.coin === 'BTC'})[0].address\n      console.log(\"SUCCESS\", vaultAddresses)\n      getAllBalancesByAddress([], ethAddress, btcAddress, (values)=>{\n        setVaultValues(values)\n      })\n      // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {console.log('WTF', err)}\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\")\n    return vaultAddresses\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach((item) => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '')\n        item.address = decrypt(cipherText, key)\n      }      \n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  function visitOpenSeaLink() {\n    location.href = (\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : '') +\n      'opensea.io/assets/' + \n      (vaultChainId == 137 ? 'matic/' : '') +\n      contractAddresses.emblemVault[vaultChainId] +\n      '/' +\n      tokenId \n    )\n  }\n\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n        <script\n            dangerouslySetInnerHTML={{\n              __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              `,\n            }}\n          />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      {/* <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n        privValues={privValues}\n        addresses={vaultAddresses}\n      /> */}\n      {showOffer ? (\n        <OfferModal\n          isOpen={isOpenOfferModal}\n          onClose={onCloseOfferModal}\n          tokenId={tokenId}\n          mine={mine}\n        />\n      ) : null}\n      \n\n      <Loader loaded={state.loaded}>\n        <Box height=\"40px\"></Box>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault ? (          \n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                className=\"NFT\" \n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"blue.500\"\n                >\n                  Vault Network: {CHAIN_ID_NAMES[vaultChainId]}\n                </Box>\n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  // textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null}\n                </Box>\n                <Stack className=\"NFT-content\" align=\"center\">\n                  { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                      <NFTSlideshow name={vaultName} image={vaultImage} items={vaultValues.map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n                    ) : (\n                      <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n                    )\n                  }\n                  {mine && ownedImage ? (\n                    <Button onClick={() => {handleOwnedEmbed()}}>(OWNED) Show Full Embed</Button>\n                  ): null}\n                </Stack>\n                <Stack align=\"center\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                    <Stack>\n                      <Text fontSize=\"xs\">\n                      { vaultChainId == chainId ? (\n                        <Link href={\"./vaultlist?address=\"+owner}>\n                          Owner: {owner}\n                        </Link>\n                      ) : null }\n                      </Text>\n                      <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" >\n                        <ReactMarkdown plugins={[gfm]} children={splitDescription(vaultDesc)} />\n                      </Text>\n                      \n                    </Stack>                    \n                  </Box>                    \n                </Stack>\n                <Box p=\"6\">\n                  {vaultPrivacy ? (\n                    <Box mb={5}>\n                      <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                        {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                      </Text>\n                      <Input\n                        type=\"password\"\n                        id=\"vault-password\"\n                        onChange={(e) => tryDecrypt(e.target.value)}\n                        aria-describedby=\"password-helper-text\"\n                      />\n                    </Box>\n                  ) : (\n                    <Box d=\"flex\" backgroundColor={colorMode == \"light\"? \"gray.100\": \"gray.700\"} alignItems=\"baseline\" className=\"coin-balance-content\">\n                      <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                        <Text as=\"h4\" mt={2} fontWeight=\"semibold\">\n                        \n                          Current Contents:  <button\n                          onClick={() =>{\n                            getAllBalancesLive([], tokenId, (v)=>{\n                              setLoadedValues(false)\n                              setVaultValues(v)\n                            })\n                          }}\n                        > [Refresh Balances]</button>\n                        </Text>\n                        <Text as=\"p\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"}>${Number(vaultTotalValue.toFixed(4)).toLocaleString()}</Text>\n                        { vaultValues.length ? (\n                          vaultValues.map((coin) => {\n                            return (  \n                              <Stack> \n                                <CoinBalance colorMode={colorMode} coin={coin}/>  \n                              </Stack>\n                            )\n                          })\n                        ) : null } \n                        { vaultDataValues.length ? (\n                          vaultDataValues.map((data) => {\n                            return (\n                              <Text>Data: {data.attribute_key}</Text>\n                            )                        \n                          })\n                        ) : !vaultDataValues.length && !vaultValues.length ? (\n                          <Text>Nothing in here! Fill 'er up!</Text>\n                        ) : null}\n                      </Box>\n                    </Box>\n                  )}   \n                </Box>\n                \n              </Box>\n            </Flex>\n        ) : (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        )}\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming && !accepting && !preTransfering) {\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                // handleSign()\n              } else if (preTransfering) {\n                savePasswordToLocalStorage()\n                setShowTransferPassword(true)\n                setPreTransfering(false)\n                setHash(null)                \n              } else if(accepting) {\n                setAccepting(false)                \n                getVault()\n                setHash(null)\n              } else if(approving) {\n                setApproving(false)\n                getVault()\n                setHash(null)\n              } else if(transfering) {\n                setTransfering(false)\n                getVault()\n                setHash(null)\n              } else if(minting) {\n                checkLiveliness(tokenId, ()=>{\n                  setMinting(false)\n                  setLive(true)\n                  // setShowMakingVaultMsg(false)\n                  // location.href = location.origin + '/nft?id=' + tokenId\n                })\n              } else {\n                console.log('minting', minting) \n                console.log('claiming', claiming) \n                console.log('accepting', accepting) \n                console.log('preTransfering', preTransfering)\n                console.log('approving', approving)\n                console.log(\"Unknown state\")\n              }\n            }}\n          />\n        ) : null}\n        <Box height=\"40px\"></Box>\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}