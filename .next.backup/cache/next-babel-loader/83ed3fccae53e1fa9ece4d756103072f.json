{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/TokenBalance.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Suspense } from 'react';\nimport { Button, Text, IconButton, useColorMode } from '@chakra-ui/core';\nimport { useWeb3React, Web3ReactProvider } from '@web3-react/core';\nimport { BG } from '../constants';\nimport { useTokenBalance } from '../data';\nimport TokenLogo from './TokenLogo';\nimport ErrorBoundary from './ErrorBoundary';\nimport { useShowUSD } from '../context';\nimport { useUSDTokenPrice } from '../hooks';\n\nfunction Balance({\n  token\n}) {\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    data\n  } = useTokenBalance(token, account, true);\n  const [showUSD] = useShowUSD();\n  const USDTokenPrice = useUSDTokenPrice(token);\n  return __jsx(Button, _extends({\n    as: \"a\",\n    rightIcon: \"external-link\",\n    variant: \"outline\",\n    backgroundColor: BG[colorMode],\n    onClick: hook\n  }, {\n    //href: formatEtherscanLink(ExplorerTXType.TokenBalance, [token, account as string]),\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }), __jsx(TokenLogo, {\n    token: token,\n    size: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), __jsx(Text, {\n    ml: \"0.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, showUSD && USDTokenPrice ? `$${data.multiply(USDTokenPrice).toFixed(2, {\n    groupSeparator: ','\n  })}` : data.toSignificant(6, {\n    groupSeparator: ','\n  })));\n}\n\nfunction hook() {\n  console.log(Web3ReactProvider); //   new Web3().currentProvider.sendAsync({\n  //     method: 'metamask_watchAsset',\n  //     params: {\n  //         \"type\":\"ERC20\", // Initially only supports ERC20, but eventually more!\n  //         \"options\":{\n  //             \"address\": \"0x3d658390460295fb963f54dc0899cfb1c30776df\", // The address that the token is at.\n  //             \"symbol\": \"Coval.Matic\", // A ticker symbol or shorthand, up to 5 chars.\n  //             \"decimals\": 8, // The number of decimals in the token\n  //             \"image\": \"https://circuitsofvalue.com/public/coval-logo.png\", // A string url of the token logo\n  //         },\n  //     },\n  //     id: Math.round(Math.random() * 100000),\n  // }, (err, addedBoolean) => {\n  // })\n}\n\nexport default function TokenBalance({\n  token\n}) {\n  const {\n    colorMode\n  } = useColorMode();\n  return __jsx(ErrorBoundary, {\n    fallback: __jsx(IconButton, {\n      variant: \"outline\",\n      backgroundColor: BG[colorMode],\n      icon: \"warning\",\n      \"aria-label\": \"Failed\",\n      isDisabled: true,\n      cursor: \"default !important\",\n      _hover: {},\n      _active: {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, __jsx(Suspense, {\n    fallback: __jsx(Button, {\n      variant: \"outline\",\n      backgroundColor: BG[colorMode],\n      isLoading: true,\n      cursor: \"default !important\",\n      _hover: {},\n      _active: {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, __jsx(Balance, {\n    token: token,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/TokenBalance.tsx"],"names":["Suspense","Button","Text","IconButton","useColorMode","useWeb3React","Web3ReactProvider","BG","useTokenBalance","TokenLogo","ErrorBoundary","useShowUSD","useUSDTokenPrice","Balance","token","colorMode","account","data","showUSD","USDTokenPrice","hook","target","rel","multiply","toFixed","groupSeparator","toSignificant","console","log","TokenBalance"],"mappings":"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","sourcesContent":["import { Suspense } from 'react'\nimport { Button, Text, IconButton, useColorMode } from '@chakra-ui/core'\nimport { useWeb3React, Web3ReactProvider} from '@web3-react/core'\nimport { Token, TokenAmount } from '@uniswap/sdk'\nimport { formatEtherscanLink, ExplorerTXType } from '../utils'\nimport { BG } from '../constants'\nimport { useTokenBalance } from '../data'\nimport TokenLogo from './TokenLogo'\nimport ErrorBoundary from './ErrorBoundary'\nimport { useShowUSD } from '../context'\nimport { useUSDTokenPrice } from '../hooks'\n\nfunction Balance({ token }: { token: Token }): JSX.Element {\n  const { colorMode } = useColorMode()\n  const { account} = useWeb3React()\n  const { data } = useTokenBalance(token, account, true)\n\n  const [showUSD] = useShowUSD()\n  const USDTokenPrice = useUSDTokenPrice(token)\n\n  return (\n    <Button\n      as=\"a\"\n      rightIcon=\"external-link\"\n      variant=\"outline\"\n      backgroundColor={BG[colorMode]}\n      onClick={hook}\n      {...{\n        //href: formatEtherscanLink(ExplorerTXType.TokenBalance, [token, account as string]),\n        target: '_blank',\n        rel: 'noopener noreferrer',\n      }}\n    >\n      <TokenLogo token={token} size=\"1.5rem\" />\n      <Text ml=\"0.5rem\">\n        {showUSD && USDTokenPrice\n          ? `$${(data as TokenAmount).multiply(USDTokenPrice).toFixed(2, { groupSeparator: ',' })}`\n          : (data as TokenAmount).toSignificant(6, { groupSeparator: ',' })}\n      </Text>\n    </Button>\n  )\n}\n\nfunction hook() { \n  console.log(Web3ReactProvider)\n  //   new Web3().currentProvider.sendAsync({\n  //     method: 'metamask_watchAsset',\n  //     params: {\n  //         \"type\":\"ERC20\", // Initially only supports ERC20, but eventually more!\n  //         \"options\":{\n  //             \"address\": \"0x3d658390460295fb963f54dc0899cfb1c30776df\", // The address that the token is at.\n  //             \"symbol\": \"Coval.Matic\", // A ticker symbol or shorthand, up to 5 chars.\n  //             \"decimals\": 8, // The number of decimals in the token\n  //             \"image\": \"https://circuitsofvalue.com/public/coval-logo.png\", // A string url of the token logo\n  //         },\n  //     },\n  //     id: Math.round(Math.random() * 100000),\n  // }, (err, addedBoolean) => {\n\n  // })\n}\n\nexport default function TokenBalance({ token }: { token: Token }): JSX.Element {\n  const { colorMode } = useColorMode()\n  return (\n    <ErrorBoundary\n      fallback={\n        <IconButton\n          variant=\"outline\"\n          backgroundColor={BG[colorMode]}\n          icon=\"warning\"\n          aria-label=\"Failed\"\n          isDisabled\n          cursor=\"default !important\"\n          _hover={{}}\n          _active={{}}\n        />\n      }\n    >\n      <Suspense\n        fallback={\n          <Button\n            variant=\"outline\"\n            backgroundColor={BG[colorMode]}\n            isLoading\n            cursor=\"default !important\"\n            _hover={{}}\n            _active={{}}\n          >\n            {null}\n          </Button>\n        }\n      >\n        <Balance token={token} />\n      </Suspense>\n    </ErrorBoundary>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}