{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Stack, Button } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useState } from 'react';\nimport { VStack, Divider } from '@chakra-ui/react';\nimport { contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport { Contract } from '@ethersproject/contracts';\nexport default function Admin() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: true\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: stats,\n    1: setStats\n  } = useState([]);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address || null);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(0);\n  const {\n    0: limit,\n    1: setLimit\n  } = useState(10);\n  const {\n    0: shouldFetchData,\n    1: setShouldFetchData\n  } = useState(address ? true : false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: buttonDisabled,\n    1: setButtonDisabled\n  } = useState(false);\n  const {\n    0: factories,\n    1: setFactories\n  } = useState([]);\n  const {\n    0: factoryTypes,\n    1: setFactoryTypes\n  } = useState([]);\n  const handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n\n  // useEffect(() => {\n  //   if (state.loaded == false && !loadingApi && address) {\n  //     setLoadingApi(false)\n  //     // getPnL()\n  //   }\n  // }, [])\n  // useEffect(() => {\n  //   if (shouldFetchData && address) {\n  //     console.log(\"Should load api after setting consts\", offset)\n  //     setShouldFetchData(false)\n  //     // getPnL()\n  //   } else {\n  //     console.log(\"wtf\")\n  //   }\n  // }, [shouldFetchData, offset])\n  // const fetchDataForLazyLoad = async () =>{    \n  //   console.log('setting new offset to', offset+limit)\n  //   setOffset(offset+limit)\n  //   setShouldFetchData(true)\n  // }\n  const HandleClick = async () => {\n    GetContracts();\n  };\n\n  async function GetContracts() {\n    let results = [];\n    let factories = await handlerContract.getAllRegisteredContractsOfType(8);\n    await getFactoryInto(0, []);\n\n    async function getFactoryInto(index, types) {\n      let factory = factories[index];\n      let factoryContract = getFactoryContract(factory);\n      let factoryType = await factoryContract.factoryType();\n      let clones = await factoryContract.getClones();\n      types.push({\n        type: factoryType,\n        address: factory,\n        clones: clones\n      });\n\n      if (index + 1 == factories.length) {\n        return setFactories(types);\n      } else {\n        return getFactoryInto(index + 1, types);\n      }\n    }\n  }\n\n  function getFactoryContract(address) {\n    return new Contract(address, contractAddresses.clonableFactoryAbi, library.getSigner(account).connectUnchecked());\n  }\n\n  const mockData = {\n    \"handler\": \"0x5B8189BCC7565C03C98994b5D7BfbeB1a4296FfE\"\n  };\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    w: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: HandleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Click\"), factories.length > 0 ? factories.map((factory, index) => {\n    return __jsx(VStack, {\n      key: \"factory-\" + index,\n      p: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }\n    }, __jsx(Box, {\n      w: \"100%\",\n      \"min-width\": \"40px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, __jsx(Text, {\n      w: \"100%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 19\n      }\n    }, factory.type, \" Factory: \", factory.address), factory.clones.map(clone => {\n      return __jsx(Text, {\n        ml: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 31\n        }\n      }, factory.type, \" : \", clone);\n    }), __jsx(Divider, {\n      orientation: \"horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 19\n      }\n    })));\n  }) : null)));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx"],"names":["Box","Flex","Text","Stack","Button","Loader","Refreshing","useRouter","useWeb3React","useState","VStack","Divider","contractAddresses","useContract","Contract","Admin","query","account","chainId","library","state","setState","loaded","loadingApi","setLoadingApi","stats","setStats","address","setAddress","offset","setOffset","limit","setLimit","shouldFetchData","setShouldFetchData","hasMore","setHasMore","buttonDisabled","setButtonDisabled","factories","setFactories","factoryTypes","setFactoryTypes","handlerContract","vaultHandlerV8","vaultHandlerV8Abi","HandleClick","GetContracts","results","getAllRegisteredContractsOfType","getFactoryInto","index","types","factory","factoryContract","getFactoryContract","factoryType","clones","getClones","push","type","length","clonableFactoryAbi","getSigner","connectUnchecked","mockData","map","clone"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAAuCC,KAAvC,EAA8CC,MAA9C,QAA8H,iBAA9H;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAAoBC,QAApB,QAAoC,OAApC;AAEA,SAAgBC,MAAhB,EAAgCC,OAAhC,QAA+C,kBAA/C;AACA,SAAiDC,iBAAjD,QAA0E,cAA1E;AACA,SAASC,WAAT,QAA4B,UAA5B;AAEA,SAASC,QAAT,QAAyB,0BAAzB;AAEA,eAAe,SAASC,KAAT,GAAiB;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAYT,SAAS,EAA3B;AACA,QAAM;AAAEU,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAgCX,YAAY,EAAlD;AACA,QAAM;AAAA,OAACY,KAAD;AAAA,OAAQC;AAAR,MAAoBZ,QAAQ,CAAC;AAAEa,IAAAA,MAAM,EAAE;AAAV,GAAD,CAAlC;AACA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8Bf,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAACgB,KAAD;AAAA,OAAQC;AAAR,MAAoBjB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACkB,OAAD;AAAA,OAAUC;AAAV,MAAwBnB,QAAQ,CAACO,KAAK,CAACW,OAAN,IAAiB,IAAlB,CAAtC;AACA,QAAM;AAAA,OAACE,MAAD;AAAA,OAASC;AAAT,MAAsBrB,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM;AAAA,OAACsB,KAAD;AAAA,OAAQC;AAAR,MAAoBvB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACwB,eAAD;AAAA,OAAkBC;AAAlB,MAAwCzB,QAAQ,CAACkB,OAAO,GAAE,IAAF,GAAQ,KAAhB,CAAtD;AACA,QAAM;AAAA,OAACQ,OAAD;AAAA,OAAUC;AAAV,MAAwB3B,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAAC4B,cAAD;AAAA,OAAiBC;AAAjB,MAAsC7B,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAM;AAAA,OAAC8B,SAAD;AAAA,OAAYC;AAAZ,MAA4B/B,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAA,OAACgC,YAAD;AAAA,OAAeC;AAAf,MAAkCjC,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAMkC,eAAe,GAAG9B,WAAW,CAACD,iBAAiB,CAACgC,cAAlB,CAAiC1B,OAAjC,CAAD,EAA4CN,iBAAiB,CAACiC,iBAA9D,EAAiF,IAAjF,CAAnC;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,QAAMC,WAAW,GAAG,YAAS;AAC3BC,IAAAA,YAAY;AACb,GAFD;;AAIA,iBAAeA,YAAf,GAA8B;AAC5B,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIT,SAAS,GAAG,MAAMI,eAAe,CAACM,+BAAhB,CAAgD,CAAhD,CAAtB;AACA,UAAMC,cAAc,CAAC,CAAD,EAAI,EAAJ,CAApB;;AAEA,mBAAeA,cAAf,CAA8BC,KAA9B,EAAqCC,KAArC,EAA4C;AAC1C,UAAIC,OAAO,GAAGd,SAAS,CAACY,KAAD,CAAvB;AACA,UAAIG,eAAe,GAAGC,kBAAkB,CAACF,OAAD,CAAxC;AACA,UAAIG,WAAW,GAAG,MAAMF,eAAe,CAACE,WAAhB,EAAxB;AACA,UAAIC,MAAM,GAAG,MAAMH,eAAe,CAACI,SAAhB,EAAnB;AACAN,MAAAA,KAAK,CAACO,IAAN,CAAW;AAACC,QAAAA,IAAI,EAAEJ,WAAP;AAAoB7B,QAAAA,OAAO,EAAE0B,OAA7B;AAAsCI,QAAAA,MAAM,EAAEA;AAA9C,OAAX;;AAEA,UAAIN,KAAK,GAAC,CAAN,IAAWZ,SAAS,CAACsB,MAAzB,EAAiC;AAC/B,eAAOrB,YAAY,CAACY,KAAD,CAAnB;AACD,OAFD,MAEO;AACL,eAAOF,cAAc,CAACC,KAAK,GAAE,CAAR,EAAWC,KAAX,CAArB;AACD;AACF;AAIF;;AAED,WAASG,kBAAT,CAA4B5B,OAA5B,EAAqC;AACnC,WAAO,IAAIb,QAAJ,CAAaa,OAAb,EAAsBf,iBAAiB,CAACkD,kBAAxC,EAA4D3C,OAAO,CAAC4C,SAAR,CAAkB9C,OAAlB,EAA2B+C,gBAA3B,EAA5D,CAAP;AACD;;AAED,QAAMC,QAAQ,GAAG;AACf,eAAW;AADI,GAAjB;AAIA,SACE,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAE7C,KAAK,CAACE,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,UAAU,GAAG,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAoB,EADjC,EAGE,MAAC,IAAD;AAAM,IAAA,CAAC,EAAC,MAAR;AAAe,IAAA,OAAO,EAAC,QAAvB;AAAgC,IAAA,EAAE,EAAE,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAC,QAAb;AAAsB,IAAA,CAAC,EAAE,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEA,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEuB,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFA,EAICP,SAAS,CAACsB,MAAV,GAAmB,CAAnB,GACCtB,SAAS,CAAC2B,GAAV,CAAc,CAACb,OAAD,EAAUF,KAAV,KAAkB;AAC9B,WACE,MAAC,MAAD;AAAQ,MAAA,GAAG,EAAE,aAAWA,KAAxB;AAA+B,MAAA,CAAC,EAAE,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,CAAC,EAAC,MAAP;AAAc,mBAAU,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,CAAC,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgBE,OAAO,CAACO,IAAxB,gBAAwCP,OAAO,CAAC1B,OAAhD,CADF,EAEG0B,OAAO,CAACI,MAAR,CAAeS,GAAf,CAAoBC,KAAK,IAAE;AACxB,aAAQ,MAAC,IAAD;AAAM,QAAA,EAAE,EAAE,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAed,OAAO,CAACO,IAAvB,SAAgCO,KAAhC,CAAR;AACD,KAFF,CAFH,EAME,MAAC,OAAD;AAAS,MAAA,WAAW,EAAC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF,CADF;AAYD,GAbD,CADD,GAgBG,IApBJ,CADF,CAHF,CADF;AA+BD","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport {HStack, VStack, Circle, Divider } from '@chakra-ui/react'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\n\nimport { Contract } from '@ethersproject/contracts'\n\nexport default function Admin() {\n  const { query } = useRouter()\n  const { account, chainId, library } = useWeb3React()\n  const [state, setState] = useState({ loaded: true })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [stats, setStats] = useState([])\n  const [address, setAddress] = useState(query.address || null)\n  const [offset, setOffset] = useState(0)\n  const [limit, setLimit] = useState(10)\n  const [shouldFetchData, setShouldFetchData] = useState(address? true: false)\n  const [hasMore, setHasMore] = useState(true)\n  const [buttonDisabled, setButtonDisabled] = useState(false)\n\n  const [factories, setFactories] = useState([])\n  const [factoryTypes, setFactoryTypes] = useState([])\n\n  const handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  // useEffect(() => {\n  //   if (state.loaded == false && !loadingApi && address) {\n  //     setLoadingApi(false)\n  //     // getPnL()\n  //   }\n  // }, [])\n\n  // useEffect(() => {\n  //   if (shouldFetchData && address) {\n  //     console.log(\"Should load api after setting consts\", offset)\n  //     setShouldFetchData(false)\n  //     // getPnL()\n  //   } else {\n  //     console.log(\"wtf\")\n  //   }\n  // }, [shouldFetchData, offset])\n\n  // const fetchDataForLazyLoad = async () =>{    \n  //   console.log('setting new offset to', offset+limit)\n  //   setOffset(offset+limit)\n  //   setShouldFetchData(true)\n  // }\n\n  const HandleClick = async()=>{\n    GetContracts()\n  }\n\n  async function GetContracts() {\n    let results = []\n    let factories = await handlerContract.getAllRegisteredContractsOfType(8)\n    await getFactoryInto(0, [])\n\n    async function getFactoryInto(index, types) {\n      let factory = factories[index]\n      let factoryContract = getFactoryContract(factory)\n      let factoryType = await factoryContract.factoryType()\n      let clones = await factoryContract.getClones()\n      types.push({type: factoryType, address: factory, clones: clones})\n\n      if (index+1 == factories.length) {\n        return setFactories(types)\n      } else {\n        return getFactoryInto(index +1, types)\n      }\n    }\n    \n    \n    \n  }\n\n  function getFactoryContract(address) {\n    return new Contract(address, contractAddresses.clonableFactoryAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  const mockData = {\n    \"handler\": \"0x5B8189BCC7565C03C98994b5D7BfbeB1a4296FfE\"\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Stack align=\"center\" w={\"100%\"}>\n        \n        <Button onClick={HandleClick}>Click</Button>\n\n        {factories.length > 0? (\n          factories.map((factory, index)=>{\n            return (\n              <VStack key={\"factory-\"+index} p={2} >\n                <Box w=\"100%\" min-width=\"40px\">     \n                  <Text w=\"100%\">{factory.type} Factory: {factory.address}</Text>\n                  {factory.clones.map( clone=>{\n                      return (<Text ml={12}>{factory.type} : {clone}</Text>)\n                    }\n                  )}\n                  <Divider orientation=\"horizontal\" />\n                </Box>\n              </VStack>\n            )\n          })\n          \n        ) : null}\n       </Stack>\n      </Flex>\n     \n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}