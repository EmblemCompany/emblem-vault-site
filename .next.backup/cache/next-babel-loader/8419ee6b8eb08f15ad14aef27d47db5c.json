{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _excluded = [\"pathname\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { JSBI, Fraction, Percent, Token, WETH, ChainId } from '@uniswap/sdk';\nimport { isAddress, toWei, fromWei } from 'web3-utils';\nimport { isIPFS } from './constants'; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\n\nexport function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\nexport function shortenHex(hex) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  return \"\".concat(hex.substring(0, length + 2), \"\\u2026\").concat(hex.substring(hex.length - length));\n}\nexport var CHAIN_ID_NAMES = {\n  0: 'Bitcoin',\n  1: 'Ethereum Mainnet',\n  3: 'Ropsten',\n  4: 'Rinkeby',\n  5: 'GÃ¶rli',\n  42: 'Kovan',\n  80001: 'Mumbai',\n  137: 'Polygon',\n  97: 'bnbsc',\n  100: 'xDai',\n  56: 'Binance Smart Chain',\n  250: 'Fantom',\n  1313161554: 'Aurora'\n};\nexport var INFURA_PREFIXES = {\n  0: 'bitcoin',\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  80001: 'mumbai',\n  137: 'matic',\n  97: 'bnbsc',\n  100: 'xdai',\n  56: 'bsc',\n  250: 'fantom',\n  1313161554: 'aurora'\n};\nexport var ExplorerTXType;\n\n(function (ExplorerTXType) {\n  ExplorerTXType[ExplorerTXType[\"Account\"] = 0] = \"Account\";\n  ExplorerTXType[ExplorerTXType[\"TokenBalance\"] = 1] = \"TokenBalance\";\n  ExplorerTXType[ExplorerTXType[\"Transaction\"] = 2] = \"Transaction\";\n  ExplorerTXType[ExplorerTXType[\"Token\"] = 3] = \"Token\";\n})(ExplorerTXType || (ExplorerTXType = {}));\n\nexport var EXPLORER_PREFIXES = {\n  1: 'etherscan.io',\n  3: 'ropsten.etherscan.io',\n  4: 'rinkeby.etherscan.io',\n  5: 'goerli.',\n  42: 'kovan.',\n  80001: 'mumbai-explorer.matic.today',\n  137: 'polygonscan.com',\n  97: 'bnbsc',\n  100: 'blockscout.com/xdai/mainnet',\n  56: 'bscscan.com',\n  250: 'ftmscan.com',\n  1313161554: 'aurorascan.dev'\n};\nexport var NETWORK_SHORTNAMES = {\n  1: 'eth',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  80001: 'mumbai',\n  137: 'matic',\n  97: 'bsctest',\n  100: 'xdai',\n  56: 'bsc',\n  250: 'fantom',\n  1313161554: 'aurora'\n};\nexport function formatEtherscanLink(type, data) {\n  switch (type) {\n    case ExplorerTXType.Account:\n      {\n        var _ref = data,\n            _ref2 = _slicedToArray(_ref, 2),\n            chainId = _ref2[0],\n            address = _ref2[1];\n\n        return \"https://\".concat(EXPLORER_PREFIXES[chainId], \"/address/\").concat(address);\n      }\n\n    case ExplorerTXType.TokenBalance:\n      {\n        var _ref3 = data,\n            _ref4 = _slicedToArray(_ref3, 2),\n            token = _ref4[0],\n            _address = _ref4[1];\n\n        return \"https://\".concat(EXPLORER_PREFIXES[token.chainId], \"/token/\").concat(token.address, \"?a=\").concat(_address);\n      }\n\n    case ExplorerTXType.Transaction:\n      {\n        var _ref5 = data,\n            _ref6 = _slicedToArray(_ref5, 2),\n            _chainId = _ref6[0],\n            hash = _ref6[1];\n\n        return \"https://\".concat(EXPLORER_PREFIXES[_chainId], \"/tx/\").concat(hash);\n      }\n\n    case ExplorerTXType.Token:\n      {\n        var _ref7 = data,\n            _ref8 = _slicedToArray(_ref7, 2),\n            _chainId2 = _ref8[0],\n            _hash = _ref8[1];\n\n        return \"https://\".concat(EXPLORER_PREFIXES[_chainId2], \"/token/\").concat(_hash);\n      }\n  }\n}\nvar SAI = new Token(ChainId.MAINNET, '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359', 18);\nexport function getTokenDisplayValue(token) {\n  var _token$symbol;\n\n  return token.equals(WETH[token.chainId]) ? 'ETH' : token.equals(SAI) ? 'SAI' : (_token$symbol = token.symbol) !== null && _token$symbol !== void 0 ? _token$symbol : 'UNKNOWN';\n}\nexport function getPercentChange(referenceRate, newRate) {\n  var flipOrder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // calculate (referenceRate - newRate) / referenceRate or (newRate - referenceRate) / referenceRate\n  var difference = new Fraction(flipOrder ? JSBI.subtract(JSBI.multiply(newRate.adjusted.numerator, referenceRate.adjusted.denominator), JSBI.multiply(referenceRate.adjusted.numerator, newRate.adjusted.denominator)) : JSBI.subtract(JSBI.multiply(referenceRate.adjusted.numerator, newRate.adjusted.denominator), JSBI.multiply(newRate.adjusted.numerator, referenceRate.adjusted.denominator)), JSBI.multiply(referenceRate.adjusted.denominator, newRate.adjusted.denominator));\n  var percentChange = difference.multiply(referenceRate.adjusted.invert());\n  return new Percent(percentChange.numerator, percentChange.denominator);\n}\nexport function modifyUrlObjectForIPFS(url) {\n  var parsedUrl = typeof url === 'string' ? {\n    pathname: url\n  } : url;\n\n  var pathname = parsedUrl.pathname,\n      rest = _objectWithoutProperties(parsedUrl, _excluded);\n\n  var modifiedPathname = pathname === '/' ? './' : \".\".concat(pathname).concat(isIPFS ? '.html' : '');\n  return {\n    href: parsedUrl,\n    as: _objectSpread(_objectSpread({}, rest), {}, {\n      pathname: modifiedPathname\n    })\n  };\n}\nexport function validImage(data) {\n  if (data && (data.includes('http') || data.includes('data:image'))) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function isETHAddress(address) {\n  return isAddress(address);\n}\nexport function toContractValue(amount, decimal) {\n  return toWei(amount, decimal);\n}\nexport function fromContractValue(amount, decimal) {\n  return Number(fromWei(amount, decimal));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/utils.ts"],"names":["JSBI","Fraction","Percent","Token","WETH","ChainId","isAddress","toWei","fromWei","isIPFS","escapeRegExp","string","replace","shortenHex","hex","length","substring","CHAIN_ID_NAMES","INFURA_PREFIXES","ExplorerTXType","EXPLORER_PREFIXES","NETWORK_SHORTNAMES","formatEtherscanLink","type","data","Account","chainId","address","TokenBalance","token","Transaction","hash","SAI","MAINNET","getTokenDisplayValue","equals","symbol","getPercentChange","referenceRate","newRate","flipOrder","difference","subtract","multiply","adjusted","numerator","denominator","percentChange","invert","modifyUrlObjectForIPFS","url","parsedUrl","pathname","rest","modifiedPathname","href","as","validImage","includes","isETHAddress","toContractValue","amount","decimal","fromContractValue","Number"],"mappings":"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","sourcesContent":["import { JSBI, Fraction, Percent, Price, Token, WETH, ChainId } from '@uniswap/sdk'\nimport { UrlObject } from 'url'\nimport { isAddress, toWei, fromWei } from 'web3-utils'\n\nimport { isIPFS } from './constants'\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport function shortenHex(hex: string, length = 4): string {\n  return `${hex.substring(0, length + 2)}â¦${hex.substring(hex.length - length)}`\n}\n\nexport const CHAIN_ID_NAMES: { [key: number]: string } = {\n  0: 'Bitcoin',\n  1: 'Ethereum Mainnet',\n  3: 'Ropsten',\n  4: 'Rinkeby',\n  5: 'GÃ¶rli',\n  42: 'Kovan',\n  80001: 'Mumbai',\n  137: 'Polygon',\n  97: 'bnbsc',\n  100: 'xDai',\n  56: 'Binance Smart Chain',\n  250: 'Fantom',\n  1313161554: 'Aurora'\n}\n\nexport const INFURA_PREFIXES: { [key: number]: string } = {\n  0: 'bitcoin',\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  80001: 'mumbai',\n  137: 'matic',\n  97: 'bnbsc',\n  100: 'xdai',\n  56: 'bsc',\n  250: 'fantom',\n  1313161554: 'aurora'\n}\n\nexport enum ExplorerTXType {\n  Account,\n  TokenBalance,\n  Transaction,\n  Token\n}\n\nexport const EXPLORER_PREFIXES: { [key: number]: string } = {\n  1: 'etherscan.io',\n  3: 'ropsten.etherscan.io',\n  4: 'rinkeby.etherscan.io',\n  5: 'goerli.',\n  42: 'kovan.',\n  80001: 'mumbai-explorer.matic.today',\n  137: 'polygonscan.com',\n  97: 'bnbsc',\n  100: 'blockscout.com/xdai/mainnet',\n  56: 'bscscan.com',\n  250: 'ftmscan.com',\n  1313161554: 'aurorascan.dev'\n}\n\nexport const NETWORK_SHORTNAMES: { [key: number]: string } = {\n  1: 'eth',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  80001: 'mumbai',\n  137: 'matic',\n  97: 'bsctest',\n  100: 'xdai',\n  56: 'bsc',\n  250: 'fantom',\n  1313161554: 'aurora'\n}\n\ninterface ExplorerTypeData {\n  [ExplorerTXType.Account]: [number, string]\n  [ExplorerTXType.TokenBalance]: [Token, string]\n  [ExplorerTXType.Transaction]: [number, string]\n  [ExplorerTXType.Token]: [number, string]\n}\n\nexport function formatEtherscanLink(type: ExplorerTXType, data: ExplorerTypeData[ExplorerTXType]): string {\n  switch (type) {\n    case ExplorerTXType.Account: {\n      const [chainId, address] = data as ExplorerTypeData[ExplorerTXType.Account]\n      return `https://${EXPLORER_PREFIXES[chainId]}/address/${address}`\n    }\n    case ExplorerTXType.TokenBalance: {\n      const [token, address] = data as ExplorerTypeData[ExplorerTXType.TokenBalance]\n      return `https://${EXPLORER_PREFIXES[token.chainId]}/token/${token.address}?a=${address}`\n    }\n    case ExplorerTXType.Transaction: {\n      const [chainId, hash] = data as ExplorerTypeData[ExplorerTXType.Transaction]\n      return `https://${EXPLORER_PREFIXES[chainId]}/tx/${hash}`\n    }\n    case ExplorerTXType.Token: {\n      const [chainId, hash] = data as ExplorerTypeData[ExplorerTXType.Transaction]\n      return `https://${EXPLORER_PREFIXES[chainId]}/token/${hash}`\n    }\n  }\n}\n\nconst SAI = new Token(ChainId.MAINNET, '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359', 18)\nexport function getTokenDisplayValue(token: Token): string {\n  return token.equals(WETH[token.chainId]) ? 'ETH' : token.equals(SAI) ? 'SAI' : token.symbol ?? 'UNKNOWN'\n}\n\nexport function getPercentChange(referenceRate: Price, newRate: Price, flipOrder = false): Percent {\n  // calculate (referenceRate - newRate) / referenceRate or (newRate - referenceRate) / referenceRate\n  const difference = new Fraction(\n    flipOrder\n      ? JSBI.subtract(\n          JSBI.multiply(newRate.adjusted.numerator, referenceRate.adjusted.denominator),\n          JSBI.multiply(referenceRate.adjusted.numerator, newRate.adjusted.denominator)\n        )\n      : JSBI.subtract(\n          JSBI.multiply(referenceRate.adjusted.numerator, newRate.adjusted.denominator),\n          JSBI.multiply(newRate.adjusted.numerator, referenceRate.adjusted.denominator)\n        ),\n    JSBI.multiply(referenceRate.adjusted.denominator, newRate.adjusted.denominator)\n  )\n  const percentChange = difference.multiply(referenceRate.adjusted.invert())\n  return new Percent(percentChange.numerator, percentChange.denominator)\n}\n\nexport function modifyUrlObjectForIPFS(\n  url: string | UrlObject\n): {\n  href: UrlObject\n  as: UrlObject\n} {\n  const parsedUrl = typeof url === 'string' ? { pathname: url } : url\n  const { pathname, ...rest } = parsedUrl\n  const modifiedPathname = pathname === '/' ? './' : `.${pathname}${isIPFS ? '.html' : ''}`\n\n  return {\n    href: parsedUrl,\n    as: {\n      ...rest,\n      pathname: modifiedPathname,\n    },\n  }\n}\n\nexport function validImage(data) {\n  if (data && (data.includes('http') || data.includes('data:image'))) {\n    return true\n  } else {\n    return false\n  }\n}\n\nexport function isETHAddress(address) {\n  return isAddress(address)\n}\n\nexport function toContractValue(amount, decimal) {\n  return toWei(amount, decimal)\n}\n\nexport function fromContractValue(amount, decimal) : number {\n  return Number(fromWei(amount, decimal))\n}\n"]},"metadata":{},"sourceType":"module"}