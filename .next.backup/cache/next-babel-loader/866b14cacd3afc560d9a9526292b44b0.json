{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { FormControl, FormLabel, Stack, Tabs, TabList, TabPanels, Tab, TabPanel, Box, Flex, Button, ButtonGroup, Divider, Select, Image, Input } from '@chakra-ui/core';\nimport { useRouter } from 'next/router';\nimport Loader from 'react-loader';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { curatedContracts, curatedAssets, EMBLEM_V2_API, ORD_API } from '../constants';\nimport { Checkbox } from '@material-ui/core';\nlet tokenId = null;\nexport default function CreateCurated(props) {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: tabIndex,\n    1: setTabIndex\n  } = useState(0);\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: vaultAddress,\n    1: setVaultAddress\n  } = useState(account || '');\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: true,\n    private: false\n  });\n  const {\n    0: targetAsset,\n    1: setTargetAsset\n  } = useState({\n    name: '',\n    image: ''\n  });\n  const {\n    0: targetContract,\n    1: setTargetContract\n  } = useState({\n    name: '',\n    chain: '',\n    image: data => {\n      return '';\n    },\n    allowed: data => {\n      return false;\n    },\n    allowedName: data => {\n      return false;\n    },\n    placeholder: () => {\n      return '';\n    },\n    loading: () => {\n      return '';\n    }\n  });\n  const {\n    0: enableCurated,\n    1: setEnableCurated\n  } = useState(query.curated == 't');\n  const {\n    0: mintDisabled,\n    1: setMintDisabled\n  } = useState(true);\n  const {\n    0: curatedError,\n    1: setCuratedError\n  } = useState('');\n  const {\n    0: curatedContentType,\n    1: setCuratedContentType\n  } = useState('');\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(false); // blank vault\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setState({\n      loaded: false,\n      private: state.private\n    });\n    let body = {\n      fromAddress: account,\n      toAddress: vaultAddress,\n      chainId: chainId,\n      experimental: true,\n      targetContract: targetContract,\n      targetAsset: targetAsset\n    };\n    let apiSuffix = '/create-curated';\n    fetch(EMBLEM_V2_API + apiSuffix, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      },\n      body: JSON.stringify(body)\n    }).then(async function (response) {\n      setState({\n        loaded: true,\n        private: state.private\n      });\n      let body = await response.json();\n      tokenId = body.data.tokenId || body.data.targetContract.tokenId;\n      setTimeout(() => {\n        location.href = location.origin + '/nft2?id=' + tokenId;\n      }, 500);\n    });\n  };\n\n  function getOrdinalRecord(num, cb) {\n    fetch(ORD_API + 'num/' + num, {\n      method: 'GET'\n    }).then(async function (response) {\n      let body = await response.json();\n      return cb(body.data[0]);\n    });\n  }\n\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account);\n      setVaultAddress(account);\n    }\n  }, [account, acct]);\n  let typingTimer;\n\n  function handleKeyUpNameInput(e) {\n    clearTimeout(typingTimer);\n    console.log(e.target.value);\n    typingTimer = setTimeout(() => {\n      let name = `${targetContract.name} ${e.target.value}`;\n\n      if (targetContract.allowedName(name)) {\n        setCuratedError('');\n        getOrdinalRecord(e.target.value, ordRecord => {\n          setCuratedContentType(ordRecord ? ordRecord.content_type : \"\");\n\n          if (targetContract.allowed(ordRecord)) {\n            setCuratedError('');\n            setMintDisabled(false);\n            setTargetAsset({\n              name: name,\n              image: targetContract.image(ordRecord)\n            });\n          } else {\n            setCuratedContentType(\"\");\n            setCuratedError(ordRecord ? `JSON/BRC-20 inscriptions not allowed` : 'Not a valid #');\n            setMintDisabled(true);\n            setTargetAsset({\n              name: '',\n              image: targetContract.placeholder()\n            });\n          }\n        });\n      } else {\n        setCuratedContentType(\"\");\n        setCuratedError('Invalid format: example (-1337)');\n        setMintDisabled(true);\n        setTargetAsset({\n          name: '',\n          image: ''\n        });\n      }\n    }, 1000);\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\"\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\"\n  }, __jsx(Tabs, {\n    defaultIndex: 0,\n    index: tabIndex,\n    onChange: index => setTabIndex(index)\n  }, __jsx(TabList, null, __jsx(Tab, null, \"Create Curated Vault\")), __jsx(TabPanels, null, __jsx(TabPanel, null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    spacing: \"2rem\",\n    flexGrow: 1,\n    justifyContent: \"center\",\n    px: \"2rem\",\n    py: \"2rem\",\n    shouldWrapChildren: true\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(FormControl, null, __jsx(Box, {\n    p: 1,\n    rounded: \"lg\",\n    overflow: \"hidden\"\n  }, __jsx(Stack, {\n    align: \"center\",\n    p: 1\n  }, __jsx(Divider, null), __jsx(FormLabel, {\n    htmlFor: \"project-selector\"\n  }, \"Choose Curated Collection\"), __jsx(Select, {\n    id: \"project-selector\",\n    w: \"100%\",\n    value: targetContract.name,\n    onChange: e => {\n      let contractData = curatedContracts.filter(item => {\n        return item.name == e.target.value;\n      })[0];\n      console.log('------', contractData);\n      setTargetContract(contractData);\n    }\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"---Choose Project---\"), curatedContracts.map(project => {\n    return enableCurated || project.name == 'Emblem Test' || project.name == 'Rare Pepe' || project.name == 'Cursed Ordinal' || project.name == 'Ethscription' ? __jsx(\"option\", {\n      value: project.name\n    }, project.name) : null;\n  })), targetContract.name && targetContract[\"_type\"] !== 'erc721' ? __jsx(Select, {\n    id: \"asset-selector\",\n    w: \"100%\",\n    value: targetAsset.name,\n    onChange: e => {\n      setMintDisabled(false);\n      setTargetAsset(curatedAssets[targetContract.chain][targetContract.name].filter(item => {\n        return item.name == e.target.value;\n      })[0]);\n    }\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"---Choose One---\"), curatedAssets[targetContract.chain][targetContract.name] ? curatedAssets[targetContract.chain][targetContract.name].map(asset => {\n    return __jsx(\"option\", {\n      value: asset.name\n    }, asset.name);\n  }) : null) : targetContract.name && targetContract[\"_type\"] == 'erc721' ? __jsx(React.Fragment, null, __jsx(Input, {\n    isDisabled: checked,\n    onKeyUp: e => {\n      handleKeyUpNameInput(e);\n    },\n    w: \"100%\",\n    placeholder: 'Inscription Number (-1337)'\n  }), __jsx(Box, {\n    my: 3\n  }, __jsx(Checkbox, {\n    checked: checked,\n    onChange: e => {\n      if (e.target.checked) {\n        setTargetAsset({\n          name: \"Loading...\",\n          image: targetContract.loading()\n        });\n        setCuratedError('');\n        setCuratedContentType('');\n        setMintDisabled(false);\n        setChecked(true);\n      } else {\n        setTargetAsset({\n          name: '',\n          image: ''\n        });\n        setMintDisabled(true);\n        setChecked(false);\n      }\n    }\n  }), \"Inscription number unknown.\"), __jsx(React.Fragment, null, curatedError), __jsx(React.Fragment, null, curatedContentType)) : null, targetAsset.image ? __jsx(Image, {\n    p: \"20px\",\n    h: \"100%\",\n    className: \"d-block w-100\",\n    src: curatedContentType == 'text/plain;charset=utf-8' ? targetContract.placeholder() : targetAsset.image,\n    width: \"250px\"\n  }) : null)))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(ButtonGroup, {\n    spacing: 4\n  }, !account ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\"\n  }, \"No Wallet Connected!\") : __jsx(Button, {\n    isDisabled: mintDisabled,\n    onClick: e => {\n      handleSubmit(e);\n    },\n    type: \"submit\"\n  }, \"Create \", targetContract.name.toString(), \" Vault\"))))))))));\n}","map":null,"metadata":{},"sourceType":"module"}