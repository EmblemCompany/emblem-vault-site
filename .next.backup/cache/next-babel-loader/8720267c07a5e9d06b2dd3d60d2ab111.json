{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/SwitchToChain.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Button, Stack, Text } from '@chakra-ui/react';\nimport { useRouter } from 'next/router';\nimport { CHAIN_ID_NAMES, modifyUrlObjectForIPFS } from '../utils';\nexport default function SwitchToChain(_ref) {\n  _s();\n\n  var requiredChainId = _ref.requiredChainId;\n\n  var _useRouter = useRouter(),\n      pathname = _useRouter.pathname,\n      push = _useRouter.push;\n\n  var _modifyUrlObjectForIP = modifyUrlObjectForIPFS(pathname),\n      href = _modifyUrlObjectForIP.href,\n      as = _modifyUrlObjectForIP.as;\n\n  return __jsx(Flex, {\n    flexGrow: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, __jsx(Text, {\n    fontSize: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, \"Please connect to the \", requiredChainId === 1 ? 'Ethereum' : '', \" \", CHAIN_ID_NAMES[requiredChainId], requiredChainId !== 1 ? ' testnet' : '', \".\"), __jsx(Button, {\n    width: \"min-content\",\n    onClick: function onClick() {\n      push(href, as, {\n        shallow: true\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, \"Here by mistake?\")));\n}\n\n_s(SwitchToChain, \"iByxMMxcsL+Mr6fMHv/yYcNrWLw=\", false, function () {\n  return [useRouter];\n});\n\n_c = SwitchToChain;\n\nvar _c;\n\n$RefreshReg$(_c, \"SwitchToChain\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/SwitchToChain.tsx"],"names":["Flex","Button","Stack","Text","useRouter","CHAIN_ID_NAMES","modifyUrlObjectForIPFS","SwitchToChain","requiredChainId","pathname","push","href","as","shallow"],"mappings":";;;;;AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,IAA9B,QAA0C,kBAA1C;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,cAAT,EAAyBC,sBAAzB,QAAuD,UAAvD;AAEA,eAAe,SAASC,aAAT,OAAsF;AAAA;;AAAA,MAA7DC,eAA6D,QAA7DA,eAA6D;;AACnG,mBAA2BJ,SAAS,EAApC;AAAA,MAAQK,QAAR,cAAQA,QAAR;AAAA,MAAkBC,IAAlB,cAAkBA,IAAlB;;AAEA,8BAAqBJ,sBAAsB,CAACG,QAAD,CAA3C;AAAA,MAAQE,IAAR,yBAAQA,IAAR;AAAA,MAAcC,EAAd,yBAAcA,EAAd;;AAEA,SACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAE,CAAhB;AAAmB,IAAA,UAAU,EAAC,QAA9B;AAAuC,IAAA,cAAc,EAAC,QAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,QAAjB;AAA0B,IAAA,UAAU,EAAC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACyBJ,eAAe,KAAK,CAApB,GAAwB,UAAxB,GAAqC,EAD9D,OACmEH,cAAc,CAACG,eAAD,CADjF,EAEGA,eAAe,KAAK,CAApB,GAAwB,UAAxB,GAAqC,EAFxC,MADF,EAME,MAAC,MAAD;AACE,IAAA,KAAK,EAAC,aADR;AAEE,IAAA,OAAO,EAAE,mBAAY;AACnBE,MAAAA,IAAI,CAACC,IAAD,EAAOC,EAAP,EAAW;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAX,CAAJ;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANF,CADF,CADF;AAmBD;;GAxBuBN,a;UACKH,S;;;KADLG,a","sourcesContent":["import { Flex, Button, Stack, Text } from '@chakra-ui/react'\nimport { useRouter } from 'next/router'\n\nimport { CHAIN_ID_NAMES, modifyUrlObjectForIPFS } from '../utils'\n\nexport default function SwitchToChain({ requiredChainId }: { requiredChainId: number }): JSX.Element {\n  const { pathname, push } = useRouter()\n\n  const { href, as } = modifyUrlObjectForIPFS(pathname)\n\n  return (\n    <Flex flexGrow={1} alignItems=\"center\" justifyContent=\"center\">\n      <Stack direction=\"column\" alignItems=\"center\">\n        <Text fontSize=\"1.5rem\">\n          Please connect to the {requiredChainId === 1 ? 'Ethereum' : ''} {CHAIN_ID_NAMES[requiredChainId]}\n          {requiredChainId !== 1 ? ' testnet' : ''}.\n        </Text>\n\n        <Button\n          width=\"min-content\"\n          onClick={(): void => {\n            push(href, as, { shallow: true })\n          }}\n        >\n          Here by mistake?\n        </Button>\n      </Stack>\n    </Flex>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}