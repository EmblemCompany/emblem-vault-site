{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { FormControl, FormLabel, FormHelperText, Input, Stack, Box, Flex, Textarea, Button } from '@chakra-ui/core';\nimport { useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nexport default function Batch() {\n  // alert(EMBLEM_API)\n  const {\n    0: batchName,\n    1: setBatchName\n  } = useState(\"\");\n  const {\n    0: imageBaseUrl,\n    1: setImageBaseUrl\n  } = useState(\"\");\n  const {\n    0: inscriptionBaseUrl,\n    1: setInscriptionBaseUrl\n  } = useState(\"\");\n  const {\n    0: addressType,\n    1: setAddressType\n  } = useState(\"\");\n  const {\n    0: titleTemplate,\n    1: setTitleTemplate\n  } = useState(\"\");\n  const {\n    0: descriptionTemplate,\n    1: setDescriptionTemplate\n  } = useState(\"\");\n  const {\n    0: total,\n    1: setTotal\n  } = useState(\"\");\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const serializedForm = {\n      batchName,\n      imageBaseUrl,\n      inscriptionBaseUrl,\n      addressType,\n      titleTemplate,\n      descriptionTemplate,\n      total\n    };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify(serializedForm)\n    }).then(async function (response) {\n      let data = await response.json();\n      console.log(\"WTFFFFF\", data);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  return __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\"\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"batch-name\"\n  }, \"Batch Name\"), __jsx(Input, {\n    type: \"text\",\n    id: \"batch-name\",\n    \"aria-describedby\": \"batch-name-text\",\n    value: batchName,\n    onChange: e => setBatchName(e.target.value),\n    autoComplete: \"off\"\n  }), __jsx(FormHelperText, {\n    id: \"batch-name-text\"\n  }, \"Give it a unique name for this batch.\")), __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"image-base-url\"\n  }, \"Image Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"image-base-url\",\n    \"aria-describedby\": \"image-base-url-text\",\n    value: imageBaseUrl,\n    onChange: e => setImageBaseUrl(e.target.value),\n    autoComplete: \"off\"\n  }), __jsx(FormHelperText, {\n    id: \"image-base-url-text\"\n  }, \"Enter the base url for the images in this batch.\")), __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"inscription-base-url\"\n  }, \"Inscription Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"inscription-base-url\",\n    \"aria-describedby\": \"inscription-base-url-text\",\n    value: inscriptionBaseUrl,\n    onChange: e => setInscriptionBaseUrl(e.target.value),\n    autoComplete: \"off\"\n  }), __jsx(FormHelperText, {\n    id: \"inscription-base-url-text\"\n  }, \"Enter the base url for the inscriptions in this batch.\")), __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"address-type\"\n  }, \"Address Type\"), __jsx(Input, {\n    type: \"text\",\n    id: \"address-type\",\n    \"aria-describedby\": \"address-type-text\",\n    value: addressType,\n    onChange: e => setAddressType(e.target.value),\n    autoComplete: \"off\"\n  }), __jsx(FormHelperText, {\n    id: \"address-type-text\"\n  }, \"Enter the address type for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"title-template\"\n  }, \"Title Template\"), __jsx(Textarea, {\n    id: \"title-template\",\n    size: \"lg\",\n    \"aria-describedby\": \"title-template-text\",\n    minLength: 3,\n    maxLength: 4024,\n    value: titleTemplate,\n    onChange: e => setTitleTemplate(e.target.value),\n    autoComplete: \"off\"\n  }), __jsx(FormHelperText, {\n    id: \"title-template-text\"\n  }, \"Enter the title template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\"\n  }, \"Description Template\"), __jsx(Textarea, {\n    id: \"description-template\",\n    size: \"lg\",\n    \"aria-describedby\": \"description-template-text\",\n    minLength: 3,\n    maxLength: 1024,\n    value: descriptionTemplate,\n    onChange: e => setDescriptionTemplate(e.target.value),\n    autoComplete: \"off\"\n  }), __jsx(FormHelperText, {\n    id: \"description-template-text\"\n  }, \"Enter the description template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"total\"\n  }, \"Total\"), __jsx(Input, {\n    type: \"number\",\n    id: \"total\",\n    \"aria-describedby\": \"total-text\",\n    value: total,\n    onChange: e => setTotal(e.target.value),\n    autoComplete: \"off\"\n  }), __jsx(FormHelperText, {\n    id: \"total-text\"\n  }, \"Enter the total number of items in this batch.\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(Button, {\n    mt: 4,\n    type: \"submit\"\n  }, \"Submit\")))));\n}","map":null,"metadata":{},"sourceType":"module"}