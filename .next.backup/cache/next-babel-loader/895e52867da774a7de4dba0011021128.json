{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Embed.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { validImage } from '../utils';\nimport { Image } from '@chakra-ui/core';\nimport SketchFab from './embed/SketchFab';\nimport ShaderToy from './embed/ShaderToy';\nimport Bandcamp from './embed/Bandcamp';\nimport SoundCloud from './embed/SoundCloud';\nimport Clyp from './embed/Clyp';\nimport Sketchup from './embed/Sketchup';\nimport Clara from './embed/Clara';\nimport MyMiniFactory from './embed/MyMiniFactory';\nimport { Audius } from './embed/Audius';\n\nfunction readMeta(_x) {\n  return _readMeta.apply(this, arguments);\n}\n\nfunction _readMeta() {\n  _readMeta = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var responce;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url, {\n              method: 'GET',\n              redirect: 'follow',\n              mode: 'no-cors'\n            });\n\n          case 2:\n            responce = _context.sent;\n            console.log(response); // const jsonData = await responce.json()\n            // return responce.image || \"\"\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _readMeta.apply(this, arguments);\n}\n\nexport var Embed = /*#__PURE__*/function (_Component) {\n  _inherits(Embed, _Component);\n\n  var _super = _createSuper(Embed);\n\n  function Embed() {\n    _classCallCheck(this, Embed);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Embed, [{\n    key: \"render\",\n    value: function render() {\n      var url = this.props.url || \"\";\n      return __jsx(React.Fragment, null, url.includes('sketchfab.com/') ? __jsx(SketchFab, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }\n      }) : url.includes('shadertoy.com/') ? __jsx(ShaderToy, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }\n      }) : url.includes('bandcamp.com/') ? __jsx(Bandcamp, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }\n      }) : url.includes('soundcloud.com/') ? __jsx(SoundCloud, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }\n      }) : url.includes('clyp.it/') ? __jsx(Clyp, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }\n      }) : url.includes('sketchup.com/') ? __jsx(Sketchup, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }) : url.includes('clara.io/') ? __jsx(Clara, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }\n      }) : url.includes('myminifactory.com/') ? __jsx(MyMiniFactory, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      }) : url.includes('audius.co/') ? __jsx(Audius, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }) : url.includes('.json') ? __jsx(Image, {\n        className: \"d-block w-100\",\n        src: validImage(readMeta(url)) ? url : 'https://circuitsofvalue.com/public/coval-logo.png',\n        width: \"250px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }\n      }) : __jsx(Image, {\n        className: \"d-block w-100\",\n        src: validImage(url) ? url : 'https://circuitsofvalue.com/public/coval-logo.png',\n        width: \"250px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }\n      }));\n    }\n  }]);\n\n  return Embed;\n}(Component);\nexport default Embed;","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Embed.tsx"],"names":["React","Component","validImage","Image","SketchFab","ShaderToy","Bandcamp","SoundCloud","Clyp","Sketchup","Clara","MyMiniFactory","Audius","readMeta","url","fetch","method","redirect","mode","responce","console","log","response","Embed","props","includes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { validImage } from '../utils'\nimport { Image } from '@chakra-ui/core'\nimport SketchFab from './embed/SketchFab'\nimport ShaderToy from './embed/ShaderToy'\nimport Bandcamp from './embed/Bandcamp'\nimport SoundCloud from './embed/SoundCloud'\nimport Clyp from './embed/Clyp'\nimport Sketchup from './embed/Sketchup'\nimport Clara from './embed/Clara'\nimport MyMiniFactory from './embed/MyMiniFactory'\nimport { Audius } from './embed/Audius'\n\ntype EmbedProps = {\n  url: string\n}\n\nasync function readMeta(url){\n  const responce = await fetch(url, {\n    method: 'GET',\n    redirect: 'follow',\n    mode: 'no-cors'    \n  })\n  console.log(response)\n  // const jsonData = await responce.json()\n  // return responce.image || \"\"\n}\n\nexport class Embed extends Component<EmbedProps> {\n  render() {\n    let url = this.props.url || \"\"\n    return (\n      <>\n        {url.includes('sketchfab.com/') ? (\n          <SketchFab\n            url={url}\n          />\n        ) : url.includes('shadertoy.com/') ? (\n          <ShaderToy\n            url={url}\n          />\n        ) : url.includes('bandcamp.com/') ? (\n          <Bandcamp\n            url={url}\n          />\n        ) : url.includes('soundcloud.com/') ? (\n          <SoundCloud\n            url={url}\n          />\n        ) : url.includes('clyp.it/') ? (\n          <Clyp\n            url={url}\n          />\n        ) : url.includes('sketchup.com/') ? (\n          <Sketchup\n            url={url}\n          />\n        ) : url.includes('clara.io/') ? (\n          <Clara\n            url={url}\n          />\n        ) : url.includes('myminifactory.com/') ? (\n          <MyMiniFactory\n            url={url}\n          />\n        ) : url.includes('audius.co/') ? (\n          <Audius\n            url={url}\n          />\n        ) : url.includes('.json') ? (\n          <Image\n              className=\"d-block w-100\"\n              src={validImage(readMeta(url)) ? url : 'https://circuitsofvalue.com/public/coval-logo.png'}\n              width=\"250px\"\n            />\n        ) : (\n              <Image\n                className=\"d-block w-100\"\n                src={validImage(url) ? url : 'https://circuitsofvalue.com/public/coval-logo.png'}\n                width=\"250px\"\n              />\n            )}\n      </>\n    )\n  }\n}\n\nexport default Embed\n"]},"metadata":{},"sourceType":"module"}