{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport useSWR from 'swr';\nimport { Token, TokenAmount, Pair, JSBI, ChainId } from '@uniswap/sdk';\nimport { useWeb3React } from '@web3-react/core';\nimport { parseBytes32String } from '@ethersproject/strings';\nimport { getAddress } from '@ethersproject/address';\nimport IERC20 from '@uniswap/v2-core/build/IERC20.json';\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json';\nimport { ZERO, ADDRESS_ZERO, ERC20_BYTES32 } from './constants';\nimport { useContract, useKeepSWRDataLiveAsBlocksArrive } from './hooks';\nexport var DataType;\n\n(function (DataType) {\n  DataType[DataType[\"BlockNumber\"] = 0] = \"BlockNumber\";\n  DataType[DataType[\"ETHBalance\"] = 1] = \"ETHBalance\";\n  DataType[DataType[\"TokenBalance\"] = 2] = \"TokenBalance\";\n  DataType[DataType[\"TokenAllowance\"] = 3] = \"TokenAllowance\";\n  DataType[DataType[\"Reserves\"] = 4] = \"Reserves\";\n  DataType[DataType[\"Token\"] = 5] = \"Token\";\n  DataType[DataType[\"RemoteTokens\"] = 6] = \"RemoteTokens\";\n})(DataType || (DataType = {}));\n\nfunction getBlockNumber(library) {\n  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", library.getBlockNumber());\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nexport function useBlockNumber() {\n  var _useWeb3React = useWeb3React(),\n      library = _useWeb3React.library;\n\n  var shouldFetch = !!library;\n  return useSWR(shouldFetch ? [DataType.BlockNumber] : null, getBlockNumber(library), {\n    refreshInterval: 10 * 1000\n  });\n}\n\nfunction getETHBalance(library) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(chainId, address) {\n      var ETH;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              ETH = new Token(chainId, ADDRESS_ZERO, 18);\n              return _context2.abrupt(\"return\", library.getBalance(address).then(function (balance) {\n                return new TokenAmount(ETH, balance.toString());\n              }));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nexport function useETHBalance(address) {\n  var suspense = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var _useWeb3React2 = useWeb3React(),\n      chainId = _useWeb3React2.chainId,\n      library = _useWeb3React2.library;\n\n  var shouldFetch = typeof chainId === 'number' && typeof address === 'string' && !!library;\n  var result = useSWR(shouldFetch ? [chainId, address, DataType.ETHBalance] : null, getETHBalance(library), {\n    suspense: suspense\n  });\n  useKeepSWRDataLiveAsBlocksArrive(result.mutate);\n  return result;\n}\n\nfunction getTokenBalance(contract, token) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(address) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", contract.balanceOf(address).then(function (balance) {\n                return new TokenAmount(token, balance.toString());\n              }));\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n}\n\nexport function useTokenBalance(token, address) {\n  var suspense = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var contract = useContract(token === null || token === void 0 ? void 0 : token.address, IERC20.abi);\n  var result = useSWR(typeof address === 'string' && token && contract ? [address, token.chainId, token.address, DataType.TokenBalance] : null, getTokenBalance(contract, token), {\n    suspense: suspense\n  });\n  useKeepSWRDataLiveAsBlocksArrive(result.mutate);\n  return result;\n}\n\nfunction getTokenAllowance(contract, token) {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(owner, spender) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", contract.allowance(owner, spender).then(function (balance) {\n                return new TokenAmount(token, balance.toString());\n              }));\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4, _x5) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n}\n\nexport function useTokenAllowance(token, owner, spender) {\n  var contract = useContract(token === null || token === void 0 ? void 0 : token.address, IERC20.abi);\n  var result = useSWR(typeof owner === 'string' && typeof spender === 'string' && token && contract ? [owner, spender, token.chainId, token.address, DataType.TokenAllowance] : null, getTokenAllowance(contract, token));\n  useKeepSWRDataLiveAsBlocksArrive(result.mutate);\n  return result;\n}\n\nfunction getReserves(contract, token0, token1) {\n  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", contract.getReserves().then(function (_ref6) {\n              var reserve0 = _ref6.reserve0,\n                  reserve1 = _ref6.reserve1;\n              var pair = new Pair(new TokenAmount(token0, reserve0.toString()), new TokenAmount(token1, reserve1.toString()));\n              return JSBI.equal(pair.reserve0.raw, ZERO) || JSBI.equal(pair.reserve1.raw, ZERO) ? null : pair;\n            })[\"catch\"](function () {\n              return null;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nexport function useReserves(tokenA, tokenB) {\n  var invalid = !!tokenA && !!tokenB && tokenA.equals(tokenB);\n\n  var _ref7 = !!tokenA && !!tokenB && !invalid ? tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] : [],\n      _ref8 = _slicedToArray(_ref7, 2),\n      token0 = _ref8[0],\n      token1 = _ref8[1];\n\n  var pairAddress = !!token0 && !!token1 ? Pair.getAddress(token0, token1) : undefined;\n  var contract = useContract(pairAddress, IUniswapV2Pair.abi);\n  var result = useSWR(token0 && pairAddress && contract && token1 ? [token0.chainId, pairAddress, DataType.Reserves] : null, getReserves(contract, token0, token1));\n  useKeepSWRDataLiveAsBlocksArrive(result.mutate);\n  return result;\n}\n\nfunction getOnchainToken(contract, contractBytes32) {\n  return /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(chainId, address) {\n      var _yield$Promise$all, _yield$Promise$all2, decimals, symbol, name;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return Promise.all([contract.decimals()[\"catch\"](function () {\n                return null;\n              }), contract.symbol()[\"catch\"](function () {\n                return contractBytes32.symbol().then(parseBytes32String)[\"catch\"](function () {\n                  return 'UNKNOWN';\n                });\n              }), contract.name()[\"catch\"](function () {\n                return contractBytes32.name().then(parseBytes32String)[\"catch\"](function () {\n                  return 'Unknown';\n                });\n              })]);\n\n            case 2:\n              _yield$Promise$all = _context6.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);\n              decimals = _yield$Promise$all2[0];\n              symbol = _yield$Promise$all2[1];\n              name = _yield$Promise$all2[2];\n              return _context6.abrupt(\"return\", decimals === null ? null : new Token(chainId, address, decimals, symbol, name));\n\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x6, _x7) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nexport function useOnchainToken(address) {\n  var suspense = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var _useWeb3React3 = useWeb3React(),\n      chainId = _useWeb3React3.chainId;\n\n  var contract = useContract(address, IERC20.abi);\n  var contractBytes32 = useContract(address, ERC20_BYTES32);\n  return useSWR(typeof chainId === 'number' && typeof address === 'string' && contract && contractBytes32 ? [chainId, address, DataType.Token] : null, getOnchainToken(contract, contractBytes32), {\n    dedupingInterval: 60 * 1000,\n    refreshInterval: 60 * 1000,\n    suspense: suspense\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getRemoteTokens(_x8) {\n  return _getRemoteTokens.apply(this, arguments);\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction _getRemoteTokens() {\n  _getRemoteTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(searchQuery) {\n    var _yield$import, request;\n\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return import('graphql-request');\n\n          case 2:\n            _yield$import = _context7.sent;\n            request = _yield$import.request;\n            return _context7.abrupt(\"return\", request('https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2', \"\\nquery getRemoteTokens($searchQuery: String!) {\\n  tokens(where: { symbol_contains: $searchQuery }) {\\n    id\\n    symbol\\n    name\\n  }\\n}\", {\n              searchQuery: searchQuery\n            }).then(function (result) {\n              return result.tokens.map(function (token) {\n                var _token$symbol, _token$name;\n\n                return {\n                  address: getAddress(token.id),\n                  symbol: (_token$symbol = token.symbol) !== null && _token$symbol !== void 0 ? _token$symbol : 'UNKNOWN',\n                  name: (_token$name = token.name) !== null && _token$name !== void 0 ? _token$name : 'Unknown'\n                };\n              });\n            }));\n\n          case 5:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _getRemoteTokens.apply(this, arguments);\n}\n\nexport function useRemoteTokens() {\n  var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var suspense = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var _useWeb3React4 = useWeb3React(),\n      chainId = _useWeb3React4.chainId;\n\n  var shouldFetch = chainId === ChainId.MAINNET && query.length > 0;\n  return useSWR(shouldFetch ? [query, DataType.RemoteTokens] : null, getRemoteTokens, {\n    dedupingInterval: 60 * 5 * 1000,\n    refreshInterval: 60 * 5 * 1000,\n    suspense: suspense\n  });\n}","map":null,"metadata":{},"sourceType":"module"}