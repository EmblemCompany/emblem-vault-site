{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Image, Stack, Button, Input } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { HStack, VStack, Circle, Divider } from '@chakra-ui/react';\nexport default function PnL() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: true\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: stats,\n    1: setStats\n  } = useState([]);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address || null);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(0);\n  const {\n    0: limit,\n    1: setLimit\n  } = useState(10);\n  const {\n    0: shouldFetchData,\n    1: setShouldFetchData\n  } = useState(address ? true : false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: buttonDisabled,\n    1: setButtonDisabled\n  } = useState(false);\n  useEffect(() => {\n    if (state.loaded == false && !loadingApi && address) {\n      setLoadingApi(false);\n      getPnL();\n    }\n  }, []);\n  useEffect(() => {\n    if (shouldFetchData && address) {\n      console.log(\"Should load api after setting consts\", offset);\n      setShouldFetchData(false);\n      getPnL();\n    } else {\n      console.log(\"wtf\");\n    }\n  }, [shouldFetchData, offset]);\n\n  const fetchData = async () => {\n    console.log('setting new offset to', offset + limit);\n    setOffset(offset + limit);\n    setShouldFetchData(true);\n  };\n\n  const getPnL = async () => {\n    setButtonDisabled(true);\n    console.log(\"getting logs\");\n    fetch('https://api.emblemvault.io/s:osautomate/offer/' + address + '?limit=' + limit + '&offset=' + offset, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(async function (response) {\n      setLoadingApi(false); // setState({ loaded: true })\n\n      let jsonData = await response.json();\n      setStats(stats.concat(jsonData.intelligences));\n      setButtonDisabled(false);\n      console.log(jsonData);\n\n      if (jsonData.intelligences.length == 0) {\n        setHasMore(false);\n      }\n    });\n  };\n\n  return __jsx(Loader, {\n    loaded: state.loaded\n  }, loadingApi ? __jsx(Refreshing, null) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10\n  }, __jsx(Stack, {\n    align: \"center\",\n    w: \"100%\"\n  }, __jsx(HStack, {\n    w: \"20%\",\n    mt: 2\n  }, __jsx(Input, {\n    placeholder: \"Address: 0x...\",\n    w: \"100%\",\n    onChange: e => {\n      setAddress(e.target.value);\n    },\n    value: address\n  }), __jsx(Button, {\n    isDisabled: buttonDisabled,\n    onClick: () => {\n      setShouldFetchData(true);\n      setStats([]);\n    }\n  }, \"Generate\")), buttonDisabled ? __jsx(Refreshing, null) : '', stats.length > 0 ? __jsx(React.Fragment, null, __jsx(InfiniteScroll, {\n    className: \"infinite-scroll\",\n    scrollableTarget: \"shannon-container\" // height={200}\n    ,\n    dataLength: stats.length //This is important field to render the next data\n    ,\n    next: fetchData,\n    hasMore: hasMore,\n    loader: __jsx(Refreshing, null),\n    endMessage: __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(\"b\", null, \"Yay! You have seen it all\"))\n  }, stats.map((item, index) => {\n    return __jsx(React.Fragment, null, __jsx(Stack, {\n      direction: \"row\",\n      h: \"35px\",\n      p: 2\n    }, __jsx(Divider, {\n      orientation: \"vertical\"\n    })), __jsx(HStack, {\n      key: \"container-\" + index,\n      p: 2,\n      m: 5,\n      \"border-width\": 1\n    }, __jsx(Box, {\n      className: \"coin-image-container\",\n      m: 2,\n      \"min-width\": \"40px\"\n    }, item.image ? __jsx(Image, {\n      width: \"50px\",\n      src: item.image\n    }) : __jsx(Circle, {\n      size: \"40px\",\n      bg: \"gray\",\n      color: \"white\",\n      isTruncated: true\n    }, item.collection[0])), __jsx(VStack, {\n      p: \"10px\",\n      w: \"100%\"\n    }, __jsx(HStack, {\n      w: \"100%\"\n    }, __jsx(Text, {\n      float: \"left\",\n      pb: 2,\n      width: \"100%\",\n      fontWeight: \"bold\",\n      isTruncated: true\n    }, item.collection, \" : \", item.name ? item.name : '#' + item.tokenId)), __jsx(HStack, {\n      w: \"100%\",\n      pt: 5,\n      spacing: \"4px\",\n      className: \"coin-display-row\"\n    }, __jsx(Text, {\n      position: \"relative\",\n      fontSize: \"xs\",\n      width: \"15%\",\n      color: \"gray\"\n    }, \"Purchased for \", item.totalCost, \" \\u039E\"), __jsx(Text, {\n      width: \"25%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }, item.offerAmount > 0 ? 'Best Offer: ' + item.offerAmount.toFixed(4) + ' Ξ' : 'No Offers'), __jsx(Text, {\n      width: \"25%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }, item.forSale ? 'For Sale: ' + item.salePrice + ' Ξ' : 'Not for sale'), __jsx(Text, {\n      width: \"15%\",\n      \"text-align\": \"center\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }, \"Floor: \", item.floor, \" \\u039E\")), __jsx(HStack, {\n      w: \"100%\",\n      pt: 5,\n      spacing: \"4px\",\n      className: \"coin-display-row\"\n    }, __jsx(Text, {\n      position: \"relative\",\n      fontSize: \"xs\",\n      width: \"15%\",\n      color: \"gray\"\n    }), __jsx(Text, {\n      width: \"25%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }, item.offerPnL ? 'Offer / Cost △ : ' + (item.offerPnL || 0).toFixed(4) + ' Ξ' : ''), __jsx(Text, {\n      width: \"25%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }, item.forSale ? 'If Sold Profit: ' + item.salePnL.toFixed(4) + ' Ξ' : ''), __jsx(Text, {\n      width: \"15%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }), __jsx(Text, {\n      width: \"15%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    })), __jsx(HStack, {\n      w: \"100%\",\n      pt: 5,\n      spacing: \"4px\",\n      className: \"coin-display-row\"\n    }, __jsx(Text, {\n      position: \"relative\",\n      fontSize: \"xs\",\n      width: \"15%\",\n      color: \"gray\"\n    }), __jsx(Text, {\n      width: \"25%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }, item.offerVsFloor ? 'Offer / Floor △: ' + item.offerVsFloor.toFixed(4) + ' Ξ' : ''), __jsx(Text, {\n      width: \"25%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }, item.forSale ? 'Sale / Floor △: ' + item.saleVsFloor.toFixed(4) + ' Ξ' : ''), __jsx(Text, {\n      width: \"15%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    }), __jsx(Text, {\n      width: \"15%\",\n      fontSize: \"xs\",\n      right: \"40px\"\n    })))));\n  }))) : null)));\n}","map":null,"metadata":{},"sourceType":"module"}