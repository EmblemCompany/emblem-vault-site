{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/TradeSummary.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useState } from 'react';\nimport { Stack, Stat, useColorMode, StatLabel, StatNumber, StatHelpText, IconButton, Icon, StatArrow } from '@chakra-ui/core';\nimport { getTokenDisplayValue, getPercentChange } from '../utils';\nimport { useWindowSize, useUSDTokenPrice } from '../hooks';\nimport { useShowUSD } from '../context';\n\nfunction InvisibleWidthMaintainer({\n  children\n}) {\n  return __jsx(\"span\", {\n    style: {\n      display: 'block',\n      maxHeight: 0,\n      visibility: 'hidden'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 10\n    }\n  }, children);\n}\n\nexport default function TradeSummary({\n  route,\n  trade,\n  warning,\n  danger\n}) {\n  var _ref, _route$midPrice, _ref2, _route$midPrice2, _ref3, _ref3$adjusted, _ref3$adjusted$multip, _route$midPrice3, _ref4, _trade$executionPrice, _ref5, _trade$executionPrice2, _ref6, _ref6$adjusted, _ref6$adjusted$multip, _trade$executionPrice3, _ref7, _trade$nextMidPrice, _ref8, _trade$nextMidPrice2, _ref9, _ref9$adjusted, _ref9$adjusted$multip, _trade$nextMidPrice3;\n\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    height,\n    width\n  } = useWindowSize();\n  const isVertical = height && width && height > width;\n  const {\n    0: invert,\n    1: setInvert\n  } = useState(false);\n  const path = !!!route ? [] : (invert ? route.path : route.path.slice().reverse()).map(getTokenDisplayValue);\n  const [showUSD] = useShowUSD();\n  const USDTokenPrice = useUSDTokenPrice(invert ? route === null || route === void 0 ? void 0 : route.input : route === null || route === void 0 ? void 0 : route.output); // mid price\n\n  const formattedMidPrice = (_ref = invert ? route === null || route === void 0 ? void 0 : (_route$midPrice = route.midPrice) === null || _route$midPrice === void 0 ? void 0 : _route$midPrice.invert() : route === null || route === void 0 ? void 0 : route.midPrice) === null || _ref === void 0 ? void 0 : _ref.toSignificant(4, {\n    groupSeparator: ','\n  });\n  const hiddenMidPrice = (_ref2 = invert ? route === null || route === void 0 ? void 0 : route.midPrice : route === null || route === void 0 ? void 0 : (_route$midPrice2 = route.midPrice) === null || _route$midPrice2 === void 0 ? void 0 : _route$midPrice2.invert()) === null || _ref2 === void 0 ? void 0 : _ref2.toSignificant(4, {\n    groupSeparator: ','\n  });\n  const USDMidPrice = USDTokenPrice && ((_ref3 = invert ? route === null || route === void 0 ? void 0 : (_route$midPrice3 = route.midPrice) === null || _route$midPrice3 === void 0 ? void 0 : _route$midPrice3.invert() : route === null || route === void 0 ? void 0 : route.midPrice) === null || _ref3 === void 0 ? void 0 : (_ref3$adjusted = _ref3.adjusted) === null || _ref3$adjusted === void 0 ? void 0 : (_ref3$adjusted$multip = _ref3$adjusted.multiply(USDTokenPrice)) === null || _ref3$adjusted$multip === void 0 ? void 0 : _ref3$adjusted$multip.toFixed(2, {\n    groupSeparator: ','\n  })); // fill price\n\n  const formattedFillPrice = (_ref4 = invert ? trade === null || trade === void 0 ? void 0 : (_trade$executionPrice = trade.executionPrice) === null || _trade$executionPrice === void 0 ? void 0 : _trade$executionPrice.invert() : trade === null || trade === void 0 ? void 0 : trade.executionPrice) === null || _ref4 === void 0 ? void 0 : _ref4.toSignificant(4, {\n    groupSeparator: ','\n  });\n  const hiddenFillPrice = (_ref5 = invert ? trade === null || trade === void 0 ? void 0 : trade.executionPrice : trade === null || trade === void 0 ? void 0 : (_trade$executionPrice2 = trade.executionPrice) === null || _trade$executionPrice2 === void 0 ? void 0 : _trade$executionPrice2.invert()) === null || _ref5 === void 0 ? void 0 : _ref5.toSignificant(4, {\n    groupSeparator: ','\n  });\n  const USDFillPrice = USDTokenPrice && ((_ref6 = invert ? trade === null || trade === void 0 ? void 0 : (_trade$executionPrice3 = trade.executionPrice) === null || _trade$executionPrice3 === void 0 ? void 0 : _trade$executionPrice3.invert() : trade === null || trade === void 0 ? void 0 : trade.executionPrice) === null || _ref6 === void 0 ? void 0 : (_ref6$adjusted = _ref6.adjusted) === null || _ref6$adjusted === void 0 ? void 0 : (_ref6$adjusted$multip = _ref6$adjusted.multiply(USDTokenPrice)) === null || _ref6$adjusted$multip === void 0 ? void 0 : _ref6$adjusted$multip.toFixed(2, {\n    groupSeparator: ','\n  })); // next mid price\n\n  const formattedNextMidPrice = (_ref7 = invert ? trade === null || trade === void 0 ? void 0 : (_trade$nextMidPrice = trade.nextMidPrice) === null || _trade$nextMidPrice === void 0 ? void 0 : _trade$nextMidPrice.invert() : trade === null || trade === void 0 ? void 0 : trade.nextMidPrice) === null || _ref7 === void 0 ? void 0 : _ref7.toSignificant(4, {\n    groupSeparator: ','\n  });\n  const hiddenNextMidPrice = (_ref8 = invert ? trade === null || trade === void 0 ? void 0 : trade.nextMidPrice : trade === null || trade === void 0 ? void 0 : (_trade$nextMidPrice2 = trade.nextMidPrice) === null || _trade$nextMidPrice2 === void 0 ? void 0 : _trade$nextMidPrice2.invert()) === null || _ref8 === void 0 ? void 0 : _ref8.toSignificant(4, {\n    groupSeparator: ','\n  });\n  const USDNextMidPrice = USDTokenPrice && ((_ref9 = invert ? trade === null || trade === void 0 ? void 0 : (_trade$nextMidPrice3 = trade.nextMidPrice) === null || _trade$nextMidPrice3 === void 0 ? void 0 : _trade$nextMidPrice3.invert() : trade === null || trade === void 0 ? void 0 : trade.nextMidPrice) === null || _ref9 === void 0 ? void 0 : (_ref9$adjusted = _ref9.adjusted) === null || _ref9$adjusted === void 0 ? void 0 : (_ref9$adjusted$multip = _ref9$adjusted.multiply(USDTokenPrice)) === null || _ref9$adjusted$multip === void 0 ? void 0 : _ref9$adjusted$multip.toFixed(2, {\n    groupSeparator: ','\n  }));\n  return __jsx(Stack, {\n    direction: isVertical ? 'column' : 'row',\n    align: isVertical ? 'center' : 'flex-start',\n    spacing: 0,\n    visibility: !!route ? 'visible' : 'hidden',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, __jsx(Stat, {\n    p: \"1rem\",\n    backgroundColor: colorMode === 'light' ? 'gray.100' : 'rgba(255,255,255,0.04)',\n    borderRadius: \"0.25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, __jsx(IconButton, {\n    transition: \"none\",\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    icon: \"view\",\n    variant: \"ghost\",\n    size: \"sm\",\n    \"aria-label\": \"Invert\",\n    onClick: () => {\n      setInvert(invert => !invert);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), __jsx(StatLabel, {\n    w: \"max-content\",\n    pr: \"2rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, \"Mid Price\"), __jsx(StatNumber, {\n    w: \"max-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, !!!route ? '0.0' : __jsx(React.Fragment, null, __jsx(InvisibleWidthMaintainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, hiddenMidPrice), showUSD && USDMidPrice ? `$${USDMidPrice}` : formattedMidPrice)), __jsx(StatHelpText, {\n    w: \"max-content\",\n    m: 0,\n    height: \"initial\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, showUSD && USDMidPrice ? ` / 1 ${path.slice(-1)}` : __jsx(React.Fragment, null, path.length === 0 ? '‎' : path.slice(0, path.length - 1).join(' / '), path.length === 0 ? '‎' : ` / 1 ${path.slice(-1)}`))), !!trade && __jsx(React.Fragment, null, __jsx(Icon, {\n    name: isVertical ? 'chevron-down' : 'chevron-right',\n    size: \"3rem\",\n    m: isVertical ? '1rem auto' : 'auto 1rem',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }), __jsx(Stat, {\n    p: \"1rem\",\n    backgroundColor: colorMode === 'light' ? 'gray.100' : 'rgba(255,255,255,0.04)',\n    borderRadius: \"0.25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, __jsx(StatLabel, {\n    w: \"max-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, \"Fill Price\"), __jsx(StatNumber, {\n    w: \"max-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, __jsx(InvisibleWidthMaintainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 15\n    }\n  }, hiddenFillPrice), showUSD && USDNextMidPrice ? `$${USDNextMidPrice}` : formattedFillPrice), __jsx(StatHelpText, {\n    w: \"max-content\",\n    m: 0,\n    opacity: 1,\n    color: warning ? colorMode === 'light' ? 'yellow.500' : 'yellow.200' : undefined,\n    fontWeight: warning ? 600 : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, warning && __jsx(StatArrow, _extends({\n    name: !danger ? 'warning-2' : 'not-allowed',\n    color: colorMode === 'light' ? 'yellow.500' : 'yellow.200'\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 17\n    }\n  })), trade.slippage.toSignificant(3, {\n    groupSeparator: ','\n  }), \"% price impact\")), __jsx(Icon, {\n    name: isVertical ? 'chevron-down' : 'chevron-right',\n    size: \"3rem\",\n    m: isVertical ? '1rem auto' : 'auto 1rem',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }), __jsx(Stat, {\n    p: \"1rem\",\n    backgroundColor: colorMode === 'light' ? 'gray.100' : 'rgba(255,255,255,0.04)',\n    borderRadius: \"0.25rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, __jsx(StatLabel, {\n    w: \"max-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, \"Mid Price\"), __jsx(StatNumber, {\n    w: \"max-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }, __jsx(InvisibleWidthMaintainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  }, hiddenNextMidPrice), showUSD && USDFillPrice ? `$${USDFillPrice}` : formattedNextMidPrice), __jsx(StatHelpText, {\n    w: \"max-content\",\n    m: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  }, __jsx(StatArrow, {\n    type: invert ? 'increase' : 'decrease',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  }), getPercentChange(invert ? trade.route.midPrice.invert() : trade.route.midPrice, invert ? trade.nextMidPrice.invert() : trade.nextMidPrice, invert).toSignificant(3, {\n    groupSeparator: ','\n  }), \"%\"))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/TradeSummary.tsx"],"names":["useState","Stack","Stat","useColorMode","StatLabel","StatNumber","StatHelpText","IconButton","Icon","StatArrow","getTokenDisplayValue","getPercentChange","useWindowSize","useUSDTokenPrice","useShowUSD","InvisibleWidthMaintainer","children","display","maxHeight","visibility","TradeSummary","route","trade","warning","danger","colorMode","height","width","isVertical","invert","setInvert","path","slice","reverse","map","showUSD","USDTokenPrice","input","output","formattedMidPrice","midPrice","toSignificant","groupSeparator","hiddenMidPrice","USDMidPrice","adjusted","multiply","toFixed","formattedFillPrice","executionPrice","hiddenFillPrice","USDFillPrice","formattedNextMidPrice","nextMidPrice","hiddenNextMidPrice","USDNextMidPrice","length","join","undefined","name","color","slippage"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport {\n  Stack,\n  Stat,\n  useColorMode,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  IconButton,\n  Icon,\n  StatArrow,\n} from '@chakra-ui/core'\nimport { Route, Trade } from '@uniswap/sdk'\n\nimport { getTokenDisplayValue, getPercentChange } from '../utils'\nimport { useWindowSize, useUSDTokenPrice } from '../hooks'\nimport { useShowUSD } from '../context'\n\nfunction InvisibleWidthMaintainer({ children }: { children?: string }): JSX.Element {\n  return <span style={{ display: 'block', maxHeight: 0, visibility: 'hidden' }}>{children}</span>\n}\n\nexport default function TradeSummary({\n  route,\n  trade,\n  warning,\n  danger,\n}: {\n  route?: Route | null\n  trade?: Trade\n  warning: boolean\n  danger: boolean\n}): JSX.Element {\n  const { colorMode } = useColorMode()\n\n  const { height, width } = useWindowSize()\n  const isVertical = height && width && height > width\n\n  const [invert, setInvert] = useState(false)\n\n  const path = !!!route ? [] : (invert ? route.path : route.path.slice().reverse()).map(getTokenDisplayValue)\n\n  const [showUSD] = useShowUSD()\n  const USDTokenPrice = useUSDTokenPrice(invert ? route?.input : route?.output)\n\n  // mid price\n  const formattedMidPrice = (invert ? route?.midPrice?.invert() : route?.midPrice)?.toSignificant(4, {\n    groupSeparator: ',',\n  })\n  const hiddenMidPrice = (invert ? route?.midPrice : route?.midPrice?.invert())?.toSignificant(4, {\n    groupSeparator: ',',\n  })\n  const USDMidPrice =\n    USDTokenPrice &&\n    (invert ? route?.midPrice?.invert() : route?.midPrice)?.adjusted?.multiply(USDTokenPrice)?.toFixed(2, {\n      groupSeparator: ',',\n    })\n\n  // fill price\n  const formattedFillPrice = (invert ? trade?.executionPrice?.invert() : trade?.executionPrice)?.toSignificant(4, {\n    groupSeparator: ',',\n  })\n  const hiddenFillPrice = (invert ? trade?.executionPrice : trade?.executionPrice?.invert())?.toSignificant(4, {\n    groupSeparator: ',',\n  })\n  const USDFillPrice =\n    USDTokenPrice &&\n    (invert ? trade?.executionPrice?.invert() : trade?.executionPrice)?.adjusted?.multiply(USDTokenPrice)?.toFixed(2, {\n      groupSeparator: ',',\n    })\n\n  // next mid price\n  const formattedNextMidPrice = (invert ? trade?.nextMidPrice?.invert() : trade?.nextMidPrice)?.toSignificant(4, {\n    groupSeparator: ',',\n  })\n  const hiddenNextMidPrice = (invert ? trade?.nextMidPrice : trade?.nextMidPrice?.invert())?.toSignificant(4, {\n    groupSeparator: ',',\n  })\n  const USDNextMidPrice =\n    USDTokenPrice &&\n    (invert ? trade?.nextMidPrice?.invert() : trade?.nextMidPrice)?.adjusted?.multiply(USDTokenPrice)?.toFixed(2, {\n      groupSeparator: ',',\n    })\n\n  return (\n    <Stack\n      direction={isVertical ? 'column' : 'row'}\n      align={isVertical ? 'center' : 'flex-start'}\n      spacing={0}\n      visibility={!!route ? 'visible' : 'hidden'}\n    >\n      <Stat\n        p=\"1rem\"\n        backgroundColor={colorMode === 'light' ? 'gray.100' : 'rgba(255,255,255,0.04)'}\n        borderRadius=\"0.25rem\"\n      >\n        <IconButton\n          transition=\"none\"\n          position=\"absolute\"\n          top={0}\n          right={0}\n          icon=\"view\"\n          variant=\"ghost\"\n          size=\"sm\"\n          aria-label=\"Invert\"\n          onClick={(): void => {\n            setInvert((invert) => !invert)\n          }}\n        />\n\n        <StatLabel w=\"max-content\" pr=\"2rem\">\n          Mid Price\n        </StatLabel>\n\n        <StatNumber w=\"max-content\">\n          {!!!route ? (\n            '0.0'\n          ) : (\n            <>\n              <InvisibleWidthMaintainer>{hiddenMidPrice}</InvisibleWidthMaintainer>\n              {showUSD && USDMidPrice ? `$${USDMidPrice}` : formattedMidPrice}\n            </>\n          )}\n        </StatNumber>\n        <StatHelpText w=\"max-content\" m={0} height=\"initial\">\n          {showUSD && USDMidPrice ? (\n            ` / 1 ${path.slice(-1)}`\n          ) : (\n            <>\n              {path.length === 0 ? '‎' : path.slice(0, path.length - 1).join(' / ')}\n              {path.length === 0 ? '‎' : ` / 1 ${path.slice(-1)}`}\n            </>\n          )}\n        </StatHelpText>\n      </Stat>\n\n      {!!trade && (\n        <>\n          <Icon\n            name={isVertical ? 'chevron-down' : 'chevron-right'}\n            size=\"3rem\"\n            m={isVertical ? '1rem auto' : 'auto 1rem'}\n          />\n\n          <Stat\n            p=\"1rem\"\n            backgroundColor={colorMode === 'light' ? 'gray.100' : 'rgba(255,255,255,0.04)'}\n            borderRadius=\"0.25rem\"\n          >\n            <StatLabel w=\"max-content\">Fill Price</StatLabel>\n            <StatNumber w=\"max-content\">\n              <InvisibleWidthMaintainer>{hiddenFillPrice}</InvisibleWidthMaintainer>\n              {showUSD && USDNextMidPrice ? `$${USDNextMidPrice}` : formattedFillPrice}\n            </StatNumber>\n            <StatHelpText\n              w=\"max-content\"\n              m={0}\n              opacity={1}\n              color={warning ? (colorMode === 'light' ? 'yellow.500' : 'yellow.200') : undefined}\n              fontWeight={warning ? 600 : undefined}\n            >\n              {warning && (\n                <StatArrow\n                  {...{\n                    name: !danger ? 'warning-2' : 'not-allowed',\n                    color: colorMode === 'light' ? 'yellow.500' : 'yellow.200',\n                  }}\n                />\n              )}\n              {trade.slippage.toSignificant(3, { groupSeparator: ',' })}% price impact\n            </StatHelpText>\n          </Stat>\n\n          <Icon\n            name={isVertical ? 'chevron-down' : 'chevron-right'}\n            size=\"3rem\"\n            m={isVertical ? '1rem auto' : 'auto 1rem'}\n          />\n\n          <Stat\n            p=\"1rem\"\n            backgroundColor={colorMode === 'light' ? 'gray.100' : 'rgba(255,255,255,0.04)'}\n            borderRadius=\"0.25rem\"\n          >\n            <StatLabel w=\"max-content\">Mid Price</StatLabel>\n            <StatNumber w=\"max-content\">\n              <InvisibleWidthMaintainer>{hiddenNextMidPrice}</InvisibleWidthMaintainer>\n              {showUSD && USDFillPrice ? `$${USDFillPrice}` : formattedNextMidPrice}\n            </StatNumber>\n            <StatHelpText w=\"max-content\" m={0}>\n              <StatArrow type={invert ? 'increase' : 'decrease'} />\n              {getPercentChange(\n                invert ? trade.route.midPrice.invert() : trade.route.midPrice,\n                invert ? trade.nextMidPrice.invert() : trade.nextMidPrice,\n                invert\n              ).toSignificant(3, { groupSeparator: ',' })}\n              %\n            </StatHelpText>\n          </Stat>\n        </>\n      )}\n    </Stack>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}