{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/SwapChain.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Stack, Button, Input } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useContract } from '../hooks';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { TransactionToast } from './TransactionToast';\nimport { parseUnits } from '@ethersproject/units';\nexport default function SwapChain() {\n  _s();\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId; // const [vaults, setVaults] = useState([])\n\n\n  var _useState = useState({\n    loaded: false\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(false),\n      loadingApi = _useState2[0],\n      setLoadingApi = _useState2[1];\n\n  var _useState3 = useState(false),\n      approving = _useState3[0],\n      setApproving = _useState3[1];\n\n  var _useState4 = useState(false),\n      transfering = _useState4[0],\n      setTransfering = _useState4[1];\n\n  var _useState5 = useState(null),\n      balance = _useState5[0],\n      setBalance = _useState5[1];\n\n  var _useState6 = useState(query.address),\n      address = _useState6[0],\n      setAddress = _useState6[1];\n\n  var _useState7 = useState(query.experimental),\n      experimental = _useState7[0],\n      setExperimental = _useState7[1];\n\n  var _useState8 = useState(null),\n      decimals = _useState8[0],\n      setDecimals = _useState8[1];\n\n  var _useState9 = useState(null),\n      allowance = _useState9[0],\n      setAllowance = _useState9[1];\n\n  var _useState10 = useState(0),\n      covalApprovedFor = _useState10[0],\n      setIsCovalApproved = _useState10[1];\n\n  var _useState11 = useState(null),\n      hash = _useState11[0],\n      setHash = _useState11[1];\n\n  var _useState12 = useState(0),\n      swapAmount = _useState12[0],\n      setSwapAmount = _useState12[1];\n\n  var _useState13 = useState(false),\n      isInvalid = _useState13[0],\n      setIsInvalid = _useState13[1];\n\n  var handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  var covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true);\n\n  var transferToChain = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setTransfering(true);\n              handlerContract.transferToChain(chainId == 137 ? 1 : 137, swapAmount.toString()).then(function (_ref2) {\n                var hash = _ref2.hash;\n                setHash(hash);\n              })[\"catch\"](function (error) {\n                if ((error === null || error === void 0 ? void 0 : error.code) == 4001) {\n                  setTransfering(false);\n                }\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function transferToChain() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setHash(null);\n              _context2.t0 = setDecimals;\n              _context2.next = 4;\n              return covalContract.decimals();\n\n            case 4:\n              _context2.t1 = _context2.sent;\n              (0, _context2.t0)(_context2.t1);\n              _context2.t2 = setAllowance;\n              _context2.next = 9;\n              return covalContract.allowance(account, contractAddresses.vaultHandler[chainId]).then(function (balance) {\n                return balance.toString();\n              });\n\n            case 9:\n              _context2.t3 = _context2.sent;\n              (0, _context2.t2)(_context2.t3);\n              _context2.t4 = setBalance;\n              _context2.next = 14;\n              return covalContract.balanceOf(account).then(function (balance) {\n                return balance.toString();\n              });\n\n            case 14:\n              _context2.t5 = _context2.sent;\n              (0, _context2.t4)(_context2.t5);\n\n              if (Number(allowance) >= Number(0)) {\n                setIsCovalApproved(allowance);\n              }\n\n              setState({\n                loaded: true\n              });\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getContractStates() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var approveCovalFlow = function approveCovalFlow() {\n    setApproving(true);\n    covalContract.approve(contractAddresses.vaultHandler[chainId], balance.toString()).then(function (_ref4) {\n      var hash = _ref4.hash;\n      setHash(hash);\n    })[\"catch\"](function (error) {\n      if ((error === null || error === void 0 ? void 0 : error.code) == 4001) {\n        setApproving(false);\n      }\n    });\n  };\n\n  var getTransferLogs = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              console.log(\"getting logs\");\n              fetch(EMBLEM_API + '/transfersOut', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  chainid: chainId.toString()\n                }\n              }).then( /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(response) {\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          console.log(\"doing transfers\");\n                          fetch(EMBLEM_API + '/doTransfers', {\n                            method: 'GET',\n                            headers: {\n                              'Content-Type': 'application/json',\n                              service: 'evmetadata',\n                              chainid: chainId.toString()\n                            }\n                          }).then( /*#__PURE__*/function () {\n                            var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response) {\n                              return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                                while (1) {\n                                  switch (_context3.prev = _context3.next) {\n                                    case 0:\n                                      getContractStates();\n\n                                    case 1:\n                                    case \"end\":\n                                      return _context3.stop();\n                                  }\n                                }\n                              }, _callee3);\n                            }));\n\n                            return function (_x2) {\n                              return _ref7.apply(this, arguments);\n                            };\n                          }());\n\n                        case 2:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }));\n\n                return function (_x) {\n                  return _ref6.apply(this, arguments);\n                };\n              }());\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function getTransferLogs() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  function SwapText(_ref8) {\n    var children = _ref8.children,\n        rest = _objectWithoutProperties(_ref8, [\"children\"]);\n\n    return __jsx(Text, _extends({\n      fontSize: \"2xl\",\n      lineHeight: 1,\n      py: \"0.3rem\"\n    }, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }\n    }), children);\n  }\n\n  var _useState14 = useState(''),\n      acct = _useState14[0],\n      setAcct = _useState14[1];\n\n  useEffect(function () {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getContractStates();\n    }\n  }, [account, acct]);\n\n  var _useState15 = useState(chainId),\n      chain = _useState15[0],\n      setChain = _useState15[1];\n\n  useEffect(function () {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getContractStates();\n    }\n  }, [chainId, chain]);\n  useEffect(function () {\n    account && chainId ? setState({\n      loaded: true\n    }) : null;\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, true ? __jsx(React.Fragment, null, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"1rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 15\n    }\n  }, __jsx(SwapText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, \"I want to transfer \"), __jsx(Input, {\n    variant: \"flushed\",\n    fontSize: \"1xl\",\n    textAlign: \"center\" // universal input options\n    ,\n    inputMode: \"decimal\",\n    title: \"Token Amount\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\" // text-specific options\n    ,\n    type: \"text\",\n    placeholder: \"0\",\n    minLength: 1,\n    maxLength: 79,\n    isInvalid: isInvalid,\n    onChange: function onChange(e) {\n      var calculatedAmount = Number(parseUnits(e.target.value, decimals).toString());\n\n      if (calculatedAmount > Number(balance) || calculatedAmount > Number(allowance)) {\n        setIsInvalid(true);\n      } else {\n        setIsInvalid(false);\n      }\n\n      setSwapAmount(calculatedAmount);\n    },\n    spellCheck: \"false\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }), __jsx(SwapText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 19\n    }\n  }, \"$Coval\")), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"1rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 15\n    }\n  }, __jsx(SwapText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, \" from \", chainId == 137 ? \"Matic\" : \"Ethereum\", \" Network to \", chainId == 137 ? \"Etherum\" : \"Matic\", \" Network \"), swapAmount > 0 ? __jsx(Button, {\n    isDisabled: isInvalid,\n    onClick: transferToChain,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 19\n    }\n  }, isInvalid ? \"Invalid Transfer Amount\" : \"Transfer Now\") : null)) : null, allowance == 0 && balance > 0 && !approving ? __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"s\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    onClick: approveCovalFlow,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }, \"Approve Transfer of up \", balance * Math.pow(10, -decimals), \" Coval\"))) : balance == 0 ? __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"s\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 15\n    }\n  }, \"You have no Coval to transfer\")) : !approving ? __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"s\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 15\n    }\n  }, \"Approved to transfer up to \", allowance * Math.pow(10, -decimals), \" Coval. Note: Swaps between networks can take up to 25 minutes.\")) : null, !approving && Number(balance) > Number(allowance) ? __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"s\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    onClick: approveCovalFlow,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 15\n    }\n  }, \"Approve Transfer \", balance * Math.pow(10, -decimals) - allowance * Math.pow(10, -decimals), \" additional Coval\"))) : null)), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      if (transfering) {\n        setTransfering(false);\n        getTransferLogs();\n      } else {\n        setApproving(false);\n        getContractStates();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  }) : null);\n}\n\n_s(SwapChain, \"8M8hjABzUi7VoROznsE9nt6umTY=\", false, function () {\n  return [useRouter, useWeb3React, useContract, useContract];\n});\n\n_c = SwapChain;\n\nvar _c;\n\n$RefreshReg$(_c, \"SwapChain\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/SwapChain.tsx"],"names":["Box","Flex","Text","Stack","Button","Input","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","useContract","EMBLEM_API","contractAddresses","TransactionToast","parseUnits","SwapChain","query","account","chainId","loaded","state","setState","loadingApi","setLoadingApi","approving","setApproving","transfering","setTransfering","balance","setBalance","address","setAddress","experimental","setExperimental","decimals","setDecimals","allowance","setAllowance","covalApprovedFor","setIsCovalApproved","hash","setHash","swapAmount","setSwapAmount","isInvalid","setIsInvalid","handlerContract","vaultHandler","vaultHandlerAbi","covalContract","coval","covalAbi","transferToChain","toString","then","error","code","getContractStates","balanceOf","Number","approveCovalFlow","approve","getTransferLogs","console","log","fetch","method","headers","service","chainid","response","SwapText","children","rest","acct","setAcct","chain","setChain","e","calculatedAmount","target","value","Math","pow"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage, toContractValue } from '../utils'\nimport { useContract } from '../hooks'\nimport { Contract } from '@ethersproject/contracts'\nimport { EMBLEM_API, contractAddresses } from '../constants'\nimport { TransactionToast } from './TransactionToast'\nimport { parseUnits } from '@ethersproject/units'\n\nexport default function SwapChain() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  // const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [transfering, setTransfering] = useState(false)\n  const [balance, setBalance] = useState(null)\n  const [address, setAddress] = useState(query.address)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [decimals, setDecimals] = useState(null)\n  const [allowance, setAllowance] = useState(null)\n  const [covalApprovedFor, setIsCovalApproved] = useState(0)\n  const [hash, setHash] = useState(null)\n  const [swapAmount, setSwapAmount] = useState(0)\n  const [isInvalid, setIsInvalid] = useState(false)\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true)\n\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  const transferToChain = async () => {\n    setTransfering(true)\n    ;(handlerContract as Contract)\n    .transferToChain(chainId == 137 ? 1: 137, swapAmount.toString())\n    .then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n    .catch((error: ErrorWithCode) => {\n      if (error?.code == 4001) {\n        setTransfering(false)\n      }\n    })\n  }\n\n  const getContractStates = async () => {\n    setHash(null)\n    setDecimals(await covalContract.decimals())\n    setAllowance(\n      await covalContract\n        .allowance(account, contractAddresses.vaultHandler[chainId])\n        .then((balance: { toString: () => string }) => balance.toString())\n    )\n    setBalance(await covalContract.balanceOf(account).then((balance: { toString: () => string }) => balance.toString()))\n    if (Number(allowance) >= Number(0)) {      \n      setIsCovalApproved(allowance)\n    }\n    setState({ loaded: true })\n  }\n\n  const approveCovalFlow = () => {\n    setApproving(true)\n    ;(covalContract as Contract)\n      .approve(contractAddresses.vaultHandler[chainId], balance.toString())\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code == 4001) {\n          setApproving(false)\n        }\n      })\n  }\n\n  const getTransferLogs = async () =>{\n    console.log(\"getting logs\")\n    fetch(EMBLEM_API + '/transfersOut', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      }\n    }).then(async function (response) {\n      console.log(\"doing transfers\")\n      fetch(EMBLEM_API + '/doTransfers', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        }\n      }).then(async function (response) {\n        getContractStates()\n      })\n    })\n  }\n\n  function SwapText({ children, ...rest }: BoxProps): JSX.Element {\n    return (\n      <Text fontSize=\"2xl\" lineHeight={1} py=\"0.3rem\" {...rest}>\n        {children}\n      </Text>\n    )\n  }\n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setState({ loaded: false })\n      getContractStates()\n    }\n  }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      getContractStates()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    account && chainId ? setState({ loaded: true }) : null\n  }, [])\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Stack align=\"center\">\n          {true ? (\n            <>\n              {/* <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"s\" fontStyle=\"\" >\n                  Transfer up to {allowance > balance ? balance * Math.pow(10, -decimals) : allowance * Math.pow(10, -decimals) } Coval from {chainId == 137 ? \"Matic\" : \"Ethereum\"} Network to {chainId == 137 ? \"Etherum\" : \"Matic\"} Network\n                </Text>              \n              </Box>\n              {balance > allowance ? (                 \n                <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                  <Button onClick={approveCovalFlow} type=\"submit\">\n                    Increase transfer allowance to { balance * Math.pow(10, -decimals) } Coval\n                  </Button>\n                </Box>\n              ) : null } */}\n              <Stack direction=\"row\" align=\"flex-start\" spacing=\"1rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                <SwapText>I want to transfer </SwapText>\n                <Input variant=\"flushed\"\n                  fontSize=\"1xl\"\n                  textAlign=\"center\"\n                  // universal input options\n                  inputMode=\"decimal\"\n                  title=\"Token Amount\"\n                  autoComplete=\"off\"\n                  autoCorrect=\"off\"\n                  // text-specific options\n                  type=\"text\"\n                  placeholder=\"0\"\n                  minLength={1}\n                  maxLength={79}\n                  isInvalid={isInvalid}\n                  onChange={(e) => {\n                    let calculatedAmount = Number(parseUnits(e.target.value, decimals).toString())\n                    \n                    if (calculatedAmount > Number(balance) || calculatedAmount > Number(allowance)) {\n                      setIsInvalid(true)\n                    } else {                      \n                      setIsInvalid(false)\n                    }\n                    setSwapAmount(calculatedAmount)\n                  }}\n                  spellCheck=\"false\"/>\n                  <SwapText>$Coval</SwapText>                  \n              </Stack>\n              <Stack direction=\"row\" align=\"flex-start\" spacing=\"1rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                <SwapText> from {chainId == 137 ? \"Matic\" : \"Ethereum\"} Network to {chainId == 137 ? \"Etherum\" : \"Matic\"} Network </SwapText>\n                { swapAmount > 0 ? (\n                  <Button isDisabled={isInvalid} onClick={transferToChain}>\n                    { isInvalid ? \"Invalid Transfer Amount\" : \"Transfer Now\"}\n                  </Button>\n                ) : null }\n              </Stack>\n            </>    \n          ) : null }\n          {\n          allowance == 0 && balance > 0 && !approving ? (\n            <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n              <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"s\" fontStyle=\"italic\" >\n                <Button onClick={approveCovalFlow} type=\"submit\">\n                  Approve Transfer of up {balance * Math.pow(10, -decimals)} Coval\n                </Button>\n              </Text>\n            </Box>\n          ) : balance == 0 ? (\n            <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n              <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"s\" fontStyle=\"italic\" >\n                You have no Coval to transfer\n              </Text>\n            </Box>\n          ) : !approving ? (\n            <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n              <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"s\" fontStyle=\"italic\" >\n                Approved to transfer up to {allowance * Math.pow(10, -decimals)} Coval. Note: Swaps between networks can take up to 25 minutes.\n              </Text>\n            </Box>\n          ) : null }\n          { !approving && Number(balance) > Number(allowance) ? (\n            <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n              <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"s\" fontStyle=\"italic\" >\n              <Button onClick={approveCovalFlow} type=\"submit\">\n                  Approve Transfer {balance * Math.pow(10, -decimals) - allowance * Math.pow(10, -decimals)} additional Coval\n                </Button>\n              </Text>\n            </Box>\n          ) : null }\n        </Stack>\n      </Flex>\n      {hash ? (\n        <TransactionToast\n          hash={hash}\n          onComplete={() => {\n              if (transfering) {\n                setTransfering(false)\n                getTransferLogs()\n              } else {                \n                setApproving(false)\n                getContractStates()\n              }              \n          }}\n        />\n      ) : null}\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}