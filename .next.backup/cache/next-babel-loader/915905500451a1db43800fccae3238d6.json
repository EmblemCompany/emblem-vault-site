{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure, Collapse, FormLabel, useColorMode } from '@chakra-ui/core';\nimport { HStack } from '@chakra-ui/react';\nimport TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { isETHAddress } from '../utils';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport CryptoJS from 'crypto-js';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nimport NFTSlideshow from './embed/NFTSlideshow';\nimport CoinBalance from './partials/CoinBalance';\nimport transakSDK from '@transak/transak-sdk';\nvar AddrModal = dynamic(_c = function _c() {\n  return import('./AddrModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./AddrModal')];\n    },\n    modules: ['./AddrModal']\n  }\n});\n_c2 = AddrModal;\nvar KeysModal = dynamic(_c3 = function _c3() {\n  return import('./KeysModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./KeysModal')];\n    },\n    modules: ['./KeysModal']\n  }\n});\n_c4 = KeysModal;\nvar OfferModal = dynamic(_c5 = function _c5() {\n  return import('./OfferModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./OfferModal')];\n    },\n    modules: ['./OfferModal']\n  }\n});\n_c6 = OfferModal;\nexport default function Nft() {\n  _s();\n\n  var _this = this;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(false),\n      approved = _useState[0],\n      setApproved = _useState[1];\n\n  var _useState2 = useState(query.key),\n      mintPassword = _useState2[0],\n      setMintPassword = _useState2[1];\n\n  var _useState3 = useState(query.offer || false),\n      showOffer = _useState3[0],\n      setShowOffer = _useState3[1];\n\n  var _useState4 = useState(query.framed || true),\n      framed = _useState4[0],\n      setFramed = _useState4[1];\n\n  var _useState5 = useState(query.id),\n      tokenId = _useState5[0],\n      setTokenId = _useState5[1];\n\n  var _useState6 = useState(query.experimental),\n      experimental = _useState6[0],\n      setExperimental = _useState6[1];\n\n  var _useState7 = useState(''),\n      vaultName = _useState7[0],\n      setVaultName = _useState7[1];\n\n  var _useState8 = useState(''),\n      vaultIPFS = _useState8[0],\n      setVaultIPFS = _useState8[1];\n\n  var _useState9 = useState(''),\n      vaultImageIPFS = _useState9[0],\n      setVaultImageIPFS = _useState9[1];\n\n  var _useState10 = useState(''),\n      vaultCiphertextV2 = _useState10[0],\n      setVaultCiphertextV2 = _useState10[1];\n\n  var _useState11 = useState(''),\n      vaultDesc = _useState11[0],\n      setVaultDesc = _useState11[1];\n\n  var _useState12 = useState(''),\n      vaultImage = _useState12[0],\n      setVaultImage = _useState12[1];\n\n  var _useState13 = useState(''),\n      ownedImage = _useState13[0],\n      setOwnedImage = _useState13[1];\n\n  var _useState14 = useState([]),\n      vaultValues = _useState14[0],\n      setVaultValues = _useState14[1];\n\n  var _useState15 = useState(false),\n      loadedValues = _useState15[0],\n      setLoadedValues = _useState15[1];\n\n  var _useState16 = useState([]),\n      vaultDataValues = _useState16[0],\n      setVaultDataValues = _useState16[1];\n\n  var _useState17 = useState([]),\n      vaultAddresses = _useState17[0],\n      setVaultAddresses = _useState17[1];\n\n  var _useState18 = useState(false),\n      vaultPrivacy = _useState18[0],\n      setVaultPrivacy = _useState18[1];\n\n  var _useState19 = useState(0),\n      vaultTotalValue = _useState19[0],\n      setVaultTotalValue = _useState19[1];\n\n  var _useState20 = useState(null),\n      vaultChainId = _useState20[0],\n      setVaultChainId = _useState20[1];\n\n  var _useState21 = useState(null),\n      hash = _useState21[0],\n      setHash = _useState21[1];\n\n  var _useState22 = useState(''),\n      currCoin = _useState22[0],\n      setCurrCoin = _useState22[1];\n\n  var _useState23 = useState(''),\n      currAddr = _useState23[0],\n      setCurrAddr = _useState23[1];\n\n  var _useState24 = useState({\n    loaded: false\n  }),\n      state = _useState24[0],\n      setState = _useState24[1];\n\n  var _useState25 = useState(false),\n      mine = _useState25[0],\n      setMine = _useState25[1];\n\n  var _useState26 = useState(false),\n      claiming = _useState26[0],\n      setClaiming = _useState26[1];\n\n  var _useState27 = useState('claimed'),\n      status = _useState27[0],\n      setStatus = _useState27[1];\n\n  var _useState28 = useState(null),\n      claimedBy = _useState28[0],\n      setClaimedBy = _useState28[1];\n\n  var _useState29 = useState(''),\n      mnemonic = _useState29[0],\n      setMnemonic = _useState29[1];\n\n  var _useState30 = useState(''),\n      privKeyBTC = _useState30[0],\n      setPrivKeyBTC = _useState30[1];\n\n  var _useState31 = useState(''),\n      privKeyETH = _useState31[0],\n      setPrivKeyETH = _useState31[1];\n\n  var _useState32 = useState([]),\n      privValues = _useState32[0],\n      setKeyValues = _useState32[1];\n\n  var _useState33 = useState(false),\n      loadingApi = _useState33[0],\n      setLoadingApi = _useState33[1];\n\n  var _useState34 = useState(''),\n      decryptedEffect = _useState34[0],\n      setDecryptedEffect = _useState34[1];\n\n  var _useState35 = useState(false),\n      decryptedEffectRunning = _useState35[0],\n      setDecryptedEffectRunning = _useState35[1];\n\n  var _useState36 = useState(''),\n      decryptPassword = _useState36[0],\n      setDecryptPassword = _useState36[1];\n\n  var _useState37 = useState(false),\n      invalidVault = _useState37[0],\n      setInvalidVault = _useState37[1];\n\n  var _useState38 = useState(false),\n      hasCheckedNft = _useState38[0],\n      setHasCheckedNft = _useState38[1];\n\n  var _useState39 = useState(false),\n      accepting = _useState39[0],\n      setAccepting = _useState39[1];\n\n  var _useState40 = useState(false),\n      approving = _useState40[0],\n      setApproving = _useState40[1];\n\n  var _useState41 = useState(false),\n      acceptable = _useState41[0],\n      setAcceptable = _useState41[1];\n\n  var _useState42 = useState(''),\n      transferPassword = _useState42[0],\n      setTransferPassword = _useState42[1];\n\n  var _useState43 = useState(false),\n      showTransferPassword = _useState43[0],\n      setShowTransferPassword = _useState43[1];\n\n  var _useState44 = useState(false),\n      preTransfering = _useState44[0],\n      setPreTransfering = _useState44[1];\n\n  var _useState45 = useState(null),\n      transferToAddress = _useState45[0],\n      setTransferToAddress = _useState45[1];\n\n  var _useState46 = useState(false),\n      transfering = _useState46[0],\n      setTransfering = _useState46[1];\n\n  var _useState47 = useState(null),\n      owner = _useState47[0],\n      setOwner = _useState47[1];\n\n  var _useState48 = useState(initTorus()),\n      torus = _useState48[0],\n      setTorus = _useState48[1];\n\n  var _useState49 = useState(false),\n      live = _useState49[0],\n      setLive = _useState49[1];\n\n  var _useState50 = useState(null),\n      nonce = _useState50[0],\n      setNonce = _useState50[1];\n\n  var _useState51 = useState(null),\n      mintSignature = _useState51[0],\n      setMintSignature = _useState51[1];\n\n  var _useState52 = useState(null),\n      to = _useState52[0],\n      setTo = _useState52[1];\n\n  var _useState53 = useState(false),\n      showMakingVaultMsg = _useState53[0],\n      setShowMakingVaultMsg = _useState53[1];\n\n  var _useState54 = useState(false),\n      minting = _useState54[0],\n      setMinting = _useState54[1]; // const [transferImage, setTransferImage] = useState('')\n\n\n  var handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  var _useDisclosure = useDisclosure(),\n      isOpenAddrModal = _useDisclosure.isOpen,\n      onOpenAddrModal = _useDisclosure.onOpen,\n      onCloseAddrModal = _useDisclosure.onClose;\n\n  var _useDisclosure2 = useDisclosure(),\n      isOpenKeysModal = _useDisclosure2.isOpen,\n      onOpenKeysModal = _useDisclosure2.onOpen,\n      onCloseKeysModal = _useDisclosure2.onClose;\n\n  var _useDisclosure3 = useDisclosure(),\n      isOpenOfferModal = _useDisclosure3.isOpen,\n      onOpenOfferModal = _useDisclosure3.onOpen,\n      onCloseOfferModal = _useDisclosure3.onClose;\n\n  var _useDisclosure4 = useDisclosure(),\n      isOpen = _useDisclosure4.isOpen,\n      onToggle = _useDisclosure4.onToggle;\n\n  var _useDisclosure5 = useDisclosure(),\n      isManageAddressOpen = _useDisclosure5.isOpen,\n      onManageAddressToggle = _useDisclosure5.onToggle;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var transak;\n  var transferImage;\n\n  function initTorus() {\n    return _initTorus.apply(this, arguments);\n  }\n\n  function _initTorus() {\n    _initTorus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n      var _torus;\n\n      return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              _torus = new TorusSdk({\n                baseUrl: \"\".concat(window.location.origin, \"/serviceworker\"),\n                enableLogging: true,\n                network: \"testnet\" // details for test net\n\n              });\n              _context23.next = 3;\n              return _torus.init({\n                skipSw: true,\n                skipInit: true,\n                skipPrefetch: true\n              });\n\n            case 3:\n              console.log(\"Initialized Torus\");\n              return _context23.abrupt(\"return\", _torus);\n\n            case 5:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee23);\n    }));\n    return _initTorus.apply(this, arguments);\n  }\n\n  var initializeTransak = function initializeTransak(address, coin) {\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',\n      // Your API Key\n      environment: 'PRODUCTION',\n      // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '',\n      // Your customer's wallet address\n      themeColor: '000000',\n      // App theme color\n      fiatCurrency: 'USD',\n      // INR/GBP\n      // fiatAmount: 350,\n      email: '',\n      // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    }); // To get all the events\n\n    transak.on(transak.ALL_EVENTS, function (data) {\n      console.log(data);\n    }); // This will trigger when the user marks payment is made.\n\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, function (orderData) {\n      console.log(orderData);\n      transak.close();\n    });\n    transak.init();\n  };\n\n  var checkLiveliness = function checkLiveliness(tokenId, cb) {\n    fetch(EMBLEM_API + '/liveliness', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        tokenId: tokenId\n      })\n    }).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"Liveliness check\", response);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    return cb();\n  };\n\n  var transferVault = function transferVault() {\n    setTransfering(true);\n    emblemContract.transferFrom(account, transferToAddress, tokenId).then(function (_ref2) {\n      var hash = _ref2.hash;\n      setHash(hash);\n    })[\"catch\"](function (error) {});\n  };\n\n  var delayedMint = function delayedMint() {\n    // setCreating(true)\n    var cipherTextHash = vaultAddresses.filter(function (address) {\n      return address.coin == \"ETH\";\n    })[0].address;\n    handlerContract.buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature).then(function (_ref3) {\n      var hash = _ref3.hash;\n      setTimeout(function () {\n        setHash(hash); // setShowMakingVaultMsg(true)\n\n        setMinting(true);\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      // setShowMakingVaultMsg(false)\n      setMinting(false);\n    });\n  };\n\n  var fireMetaMask = function fireMetaMask() {\n    console.log(mintPassword);\n    setAccepting(true);\n    getWitness(function (witness) {\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;\n      handlerContract.transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature).then(function (_ref4) {\n        var hash = _ref4.hash;\n        setTimeout(function () {\n          setHash(hash); // setShowMakingVaultMsg(true)\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })[\"catch\"](function (error) {\n        setAccepting(false);\n\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(\"tx failed.\", error);\n        } else {// setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      });\n    });\n  };\n\n  var addPreTransfer = function addPreTransfer() {\n    console.log('transferImage', \"0x\" + transferImage);\n    setPreTransfering(true);\n    handlerContract.addPreTransfer(tokenId, \"0x\" + transferImage).then(function (_ref5) {\n      var hash = _ref5.hash;\n      // setTimeout(() => {\n      setHash(hash);\n      console.log(\"Set Pre Transfering True\", preTransfering); // setShowMakingVaultMsg(true)\n      // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      if (error === null || error === void 0 ? void 0 : error.code) {\n        console.log(\"Error?\");\n        setPreTransfering(false);\n        setShowTransferPassword(false);\n        setTransferPassword('');\n      } else {// setShowTransferPassword(!showTransferPassword? true : false)\n        // setPreTransfering(false)\n        // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  var handleApproveForall = function handleApproveForall() {\n    setApproving(true);\n    emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(function (_ref6) {\n      var hash = _ref6.hash;\n      setTimeout(function () {\n        setHash(hash); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(\"tx failed.\", error);\n      } else {\n        setApproving(false); // setShowPreVaultMsg(false)\n      }\n    });\n  }; // \n\n\n  function deriveKeys(_x2, _x3, _x4) {\n    return _deriveKeys.apply(this, arguments);\n  }\n\n  function _deriveKeys() {\n    _deriveKeys = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(decrypted, coins, cb) {\n      var pk, keys, doDerive;\n      return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              doDerive = function _doDerive(index, cb) {\n                var coin = coins[index];\n                derive(pk, coin, function (key) {\n                  keys.push(key);\n\n                  if (coins.length === index + 1) {\n                    decrypted.keys = keys;\n                    return cb(decrypted);\n                  } else {\n                    return doDerive(index + 1, cb);\n                  }\n                });\n              };\n\n              pk = decrypted.key;\n              keys = [];\n              doDerive(0, cb);\n\n            case 4:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, _callee24);\n    }));\n    return _deriveKeys.apply(this, arguments);\n  }\n\n  function derive(_x5, _x6, _x7) {\n    return _derive.apply(this, arguments);\n  }\n\n  function _derive() {\n    _derive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(key, coin, cb) {\n      var responce, derived;\n      return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              _context25.next = 2;\n              return fetch('https://api.emblemvault.io/s:derive/' + key + '/' + coin + '?format=bip44&include=all', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context25.sent;\n              _context25.next = 5;\n              return responce.json();\n\n            case 5:\n              derived = _context25.sent;\n              // let derived = JSON.parse(jsonData.body)\n              derived.coin = coin;\n              return _context25.abrupt(\"return\", cb(derived));\n\n            case 8:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee25);\n    }));\n    return _derive.apply(this, arguments);\n  }\n\n  var getVault = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              loadCache();\n              _context2.next = 3;\n              return fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 3:\n              responce = _context2.sent;\n              _context2.next = 6;\n              return responce.json();\n\n            case 6:\n              jsonData = _context2.sent;\n\n              // console.log('vault response was ', jsonData)\n              if (jsonData.image_ipfs) {\n                getIPFSImage(jsonData.image_ipfs);\n              }\n\n              if (!jsonData.name) {\n                setState({\n                  loaded: true\n                });\n                setInvalidVault(true);\n              } else {\n                setStates(jsonData);\n                saveCache(jsonData);\n                setLoadingApi(false);\n                setInvalidVault(false);\n              }\n\n              !vaultPrivacy && !loadedValues ? getAllBalancesLive([], tokenId, function (v) {\n                if (v) {\n                  setVaultValues(v);\n                }\n              }) : null;\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getVault() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var getIPFSImage = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(hash) {\n      var responce, jsonData, preview;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return fetch('https://gateway.ipfs.io/ipfs/' + hash, {\n                method: 'GET',\n                headers: {// redirect:'follow'\n                }\n              });\n\n            case 2:\n              responce = _context3.sent;\n              _context3.next = 5;\n              return responce.text();\n\n            case 5:\n              jsonData = _context3.sent;\n              // setVaultImage(jsonData) \n              preview = document.querySelector('img.d-block');\n              preview.src = jsonData;\n              console.log(jsonData);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getIPFSImage(_x8) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var getWitness = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return fetch(EMBLEM_API + '/witness/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  chainid: chainId.toString()\n                }\n              });\n\n            case 2:\n              responce = _context4.sent;\n              _context4.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context4.sent;\n\n              if (!jsonData.signature) {\n                _context4.next = 11;\n                break;\n              }\n\n              console.log('witness', jsonData);\n              return _context4.abrupt(\"return\", cb(jsonData));\n\n            case 11:\n              return _context4.abrupt(\"return\", cb(false));\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function getWitness(_x9) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var setStates = function setStates(jsonData) {\n    framed && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\" + framed : null;\n\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2);\n      console.log(\"ciphertextV2\", jsonData.ciphertextV2);\n    }\n\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setOwnedImage(jsonData.ownedImage || null);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    setVaultValues(vaultValues.concat(jsonData.values));\n    setVaultDataValues(jsonData.attributes.filter(function (item) {\n      return item.trait_type === \"key\";\n    }));\n    setVaultAddresses(jsonData.addresses);\n    setVaultIPFS(jsonData.ipfs || null);\n    setVaultImageIPFS(jsonData.image_ipfs || null);\n\n    if (jsonData.live == false) {\n      checkLiveliness(jsonData.tokenId, function () {});\n    }\n\n    setLive(jsonData.live == false ? false : true);\n    setNonce(jsonData.nonce);\n    setMintSignature(jsonData.signature);\n    setTo(jsonData.to);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : jsonData.network == \"xdai\" ? 100 : jsonData.network == \"bsc\" ? 56 : jsonData.network == \"fantom\" ? 250 : 97);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    } // console.log('inside getstates. mine is ', mine)\n\n\n    setState({\n      loaded: true\n    });\n    var isPvt = jsonData.addresses.filter(function (item) {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n  };\n\n  var getEthBalances = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return fetch(EMBLEM_API + '/eth/balance/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context5.sent;\n              _context5.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context5.sent;\n              // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n              setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue)); // console.log('get eth balances', jsonData.values)\n\n              return _context5.abrupt(\"return\", cb(jsonData.values));\n\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function getEthBalances(_x10, _x11) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n\n  var getBtcBalance = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(values, address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return fetch(EMBLEM_API + '/btc/balance/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context6.sent;\n              _context6.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context6.sent;\n              return _context6.abrupt(\"return\", cb(values.concat(jsonData.values)));\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function getBtcBalance(_x12, _x13, _x14) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  var getNftBalance = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(values, address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return fetch(EMBLEM_API + '/eth/nft/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context7.sent;\n              _context7.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context7.sent;\n\n              if (!(jsonData.length > 0)) {\n                _context7.next = 10;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", cb(values.concat(jsonData)));\n\n            case 10:\n              return _context7.abrupt(\"return\", cb(values));\n\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function getNftBalance(_x15, _x16, _x17) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalances = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(values, tokenId, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return fetch(EMBLEM_API + '/vault/balance/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context8.sent;\n              _context8.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context8.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context8.next = 11;\n                break;\n              }\n\n              return _context8.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 11:\n              return _context8.abrupt(\"return\", cb(values));\n\n            case 12:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function getAllBalances(_x18, _x19, _x20) {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalancesLive = /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(values, tokenId, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!loadedValues) {\n                _context9.next = 2;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", cb(false));\n\n            case 2:\n              setLoadedValues(true);\n              _context9.next = 5;\n              return fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 5:\n              responce = _context9.sent;\n              _context9.next = 8;\n              return responce.json();\n\n            case 8:\n              jsonData = _context9.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context9.next = 14;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 14:\n              return _context9.abrupt(\"return\", cb(values));\n\n            case 15:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function getAllBalancesLive(_x21, _x22, _x23) {\n      return _ref14.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalancesByAddress = /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(values, ethAddress, btcAddress, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context10.sent;\n              _context10.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context10.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context10.next = 11;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 11:\n              return _context10.abrupt(\"return\", cb(values));\n\n            case 12:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function getAllBalancesByAddress(_x24, _x25, _x26, _x27) {\n      return _ref15.apply(this, arguments);\n    };\n  }();\n\n  var saveCache = function saveCache(vault) {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  var loadCache = function loadCache() {\n    var vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  var savePasswordToLocalStorage = function savePasswordToLocalStorage() {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  var loadPasswordFromLocalStorage = function loadPasswordFromLocalStorage() {\n    var storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  };\n\n  var getKeys = /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature\n              });\n              _context11.next = 7;\n              return fetch(EMBLEM_API + '/claim/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context11.sent;\n              _context11.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context11.sent;\n              return _context11.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    return function getKeys(_x28, _x29, _x30) {\n      return _ref16.apply(this, arguments);\n    };\n  }();\n\n  var getSignedJWT = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainid', chainId.toString());\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature,\n                tokenId: tokenId\n              });\n              _context12.next = 6;\n              return fetch('https://tor-us-signer.vercel.app/sign', {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 6:\n              responce = _context12.sent;\n              _context12.next = 9;\n              return responce.json();\n\n            case 9:\n              jsonData = _context12.sent;\n              return _context12.abrupt(\"return\", cb(jsonData));\n\n            case 11:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    return function getSignedJWT(_x31, _x32, _x33) {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n\n  var getRemoteKey = /*#__PURE__*/function () {\n    var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(tokenId, token, cb) {\n      var error, keys;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              error = false;\n              _context13.next = 3;\n              return torus;\n\n            case 3:\n              _context13.next = 5;\n              return _context13.sent.getTorusKey(\"tor-us-signer-vercel\", tokenId, {\n                verifier_id: tokenId\n              }, token)[\"catch\"](function (err) {\n                error = err.message;\n              });\n\n            case 5:\n              keys = _context13.sent;\n\n              if (!error) {\n                _context13.next = 11;\n                break;\n              }\n\n              console.log(\"error\", error);\n              return _context13.abrupt(\"return\", cb(false));\n\n            case 11:\n              return _context13.abrupt(\"return\", cb(keys));\n\n            case 12:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    return function getRemoteKey(_x34, _x35, _x36) {\n      return _ref18.apply(this, arguments);\n    };\n  }();\n\n  var addAddress = /*#__PURE__*/function () {\n    var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(signature, tokenId, coin, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature,\n                coin: coin\n              });\n              _context14.next = 7;\n              return fetch(EMBLEM_API + '/address/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context14.sent;\n              _context14.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context14.sent;\n              return _context14.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    return function addAddress(_x37, _x38, _x39, _x40) {\n      return _ref19.apply(this, arguments);\n    };\n  }();\n\n  var decryptEmbed = /*#__PURE__*/function () {\n    var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature\n              });\n              _context15.next = 7;\n              return fetch(EMBLEM_API + '/embed/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context15.sent;\n              _context15.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context15.sent;\n              return _context15.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15);\n    }));\n\n    return function decryptEmbed(_x41, _x42, _x43) {\n      return _ref20.apply(this, arguments);\n    };\n  }();\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n      var owned, _owner, finish, _finish;\n\n      return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              _finish = function _finish3() {\n                _finish = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n                  var acceptable, isApproved;\n                  return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n                    while (1) {\n                      switch (_context16.prev = _context16.next) {\n                        case 0:\n                          _context16.next = 2;\n                          return handlerContract.getPreTransfer(tokenId);\n\n                        case 2:\n                          acceptable = _context16.sent;\n                          _context16.next = 5;\n                          return emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n\n                        case 5:\n                          isApproved = _context16.sent;\n                          setApproved(isApproved);\n                          setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\");\n                          setOwner(_owner);\n                          setMine(_owner === account);\n                          loadPasswordFromLocalStorage();\n\n                        case 11:\n                        case \"end\":\n                          return _context16.stop();\n                      }\n                    }\n                  }, _callee16);\n                }));\n                return _finish.apply(this, arguments);\n              };\n\n              finish = function _finish2() {\n                return _finish.apply(this, arguments);\n              };\n\n              owned = false;\n              _context17.prev = 3;\n              _context17.next = 6;\n              return emblemContract.ownerOf(tokenId);\n\n            case 6:\n              _owner = _context17.sent;\n              finish();\n              _context17.next = 14;\n              break;\n\n            case 10:\n              _context17.prev = 10;\n              _context17.t0 = _context17[\"catch\"](3);\n              _owner = \"0x0000000000000000000000000000000000000000\";\n              finish();\n\n            case 14:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, null, [[3, 10]]);\n    }));\n\n    return function getContractStates() {\n      return _ref21.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {// console.log(\"mine?\", mine)\n    // console.log(\"claiming?\", claiming)\n    // console.log(\"accepting?\", accepting)\n    // console.log(\"acceptable\", acceptable)\n  });\n\n  var hasAddress = function hasAddress(coin) {\n    console.log(coin, vaultAddresses.filter(function (address) {\n      return address.coin == coin;\n    }).length > 0);\n    return vaultAddresses.filter(function (address) {\n      return address.coin == coin;\n    }).length > 0;\n  };\n\n  var handleSign = /*#__PURE__*/function () {\n    var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n      return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              library.getSigner(account).signMessage('Claim: ' + tokenId).then(function (signature) {\n                if (!vaultCiphertextV2) {\n                  getKeys(signature, tokenId, function (result) {\n                    // console.log('HandleSign response is ' + result)\n                    setMnemonic(result.decrypted.phrase);\n                    setPrivKeyBTC(result.decrypted.keys.filter(function (key) {\n                      return key.coin === 'btc';\n                    })[0].privkey);\n                    setPrivKeyETH(result.decrypted.keys.filter(function (key) {\n                      return key.coin === 'eth';\n                    })[0].privkey);\n                    setKeyValues(result.decrypted.values);\n                    onOpenKeysModal();\n                  });\n                } else {\n                  getSignedJWT(signature, tokenId, function (token) {\n                    // console.log(\"Got JWT\", token)\n                    getRemoteKey(tokenId, token.token, function (keys) {\n                      // console.log(\"Got Keys\", keys)\n                      var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey);\n                      var payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)); // console.log(\"Decrypted payload locally\", payload)    \n\n                      setKeyValues(payload.values);\n                      setMnemonic(payload.phrase);\n                      deriveKeys(payload, ['btc', 'eth'], function (derived) {\n                        // console.log(\"DERIVED\", derived )\n                        setPrivKeyBTC(derived.keys.filter(function (key) {\n                          return key.coin === 'btc';\n                        })[0].privkey);\n                        setPrivKeyETH(derived.keys.filter(function (key) {\n                          return key.coin === 'eth';\n                        })[0].privkey);\n                        onOpenKeysModal(); // return res.json({ success: true, decrypted })\n                      });\n                    });\n                  });\n                }\n              });\n\n            case 1:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18);\n    }));\n\n    return function handleSign() {\n      return _ref22.apply(this, arguments);\n    };\n  }();\n\n  var handleAddressSign = /*#__PURE__*/function () {\n    var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(coin) {\n      return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              library.getSigner(account).signMessage('Address: ' + tokenId).then(function (signature) {\n                addAddress(signature, tokenId, coin, function (result) {\n                  getVault();\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19);\n    }));\n\n    return function handleAddressSign(_x44) {\n      return _ref23.apply(this, arguments);\n    };\n  }();\n\n  var handleOwnedEmbed = /*#__PURE__*/function () {\n    var _ref24 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n      return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              library.getSigner(account).signMessage('Embed: ' + tokenId).then(function (signature) {\n                decryptEmbed(signature, tokenId, function (result) {\n                  setVaultImage(result.ownedImage);\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20);\n    }));\n\n    return function handleOwnedEmbed() {\n      return _ref24.apply(this, arguments);\n    };\n  }();\n\n  var handleClaim = /*#__PURE__*/function () {\n    var _ref25 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {\n      return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(function (_ref26) {\n                var hash = _ref26.hash;\n                setClaiming(true);\n                setTimeout(function () {\n                  setHash(hash);\n                }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n              });\n\n            case 1:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21);\n    }));\n\n    return function handleClaim() {\n      return _ref25.apply(this, arguments);\n    };\n  }();\n\n  var startDecryptEffect = /*#__PURE__*/function () {\n    var _ref27 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n      var theLetters, ctnt, speed, increment, clen, si, stri, block, fixed, nextFrame;\n      return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              nextFrame = function _nextFrame(pos) {\n                for (var i = 0; i < clen - stri; i++) {\n                  //Random number\n                  var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n                  var letter = theLetters.charAt(num);\n                  block = block + letter;\n                }\n\n                if (si == increment - 1) {\n                  stri++;\n                }\n\n                if (si == increment) {\n                  // Add a letter;\n                  // every speed*10 ms\n                  fixed = fixed + ctnt.charAt(stri - 1);\n                  si = 0;\n                } // $(\"#output\").html(fixed + block);\n\n\n                setDecryptedEffect(fixed + block);\n                block = '';\n              };\n\n              if (!decryptedEffectRunning) {\n                _context22.next = 3;\n                break;\n              }\n\n              return _context22.abrupt(\"return\");\n\n            case 3:\n              setDecryptedEffectRunning(true);\n              theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n              ctnt = 'Decrypting'; // Your text goes here\n\n              speed = 5; // ms per frame\n\n              increment = 8; // frames per step. Must be >2\n\n              clen = ctnt.length;\n              si = 0;\n              stri = 0;\n              block = '';\n              fixed = '';\n\n              (function rustle(i) {\n                setTimeout(function () {\n                  if (--i) {\n                    rustle(i);\n                  } else {\n                    setDecryptedEffectRunning(false);\n                  }\n\n                  nextFrame(i);\n                  si = si + 1;\n                }, speed);\n              })(clen * increment + 1);\n\n            case 14:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22);\n    }));\n\n    return function startDecryptEffect() {\n      return _ref27.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getVault();\n  }, []);\n  useEffect(function () {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null; // console.log('in the usefeect that clls getcontractstates')\n  });\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n');\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    console.log(vaultAddresses);\n    var ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      var ethAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'ETH';\n      })[0].address;\n      var btcAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'BTC';\n      })[0].address;\n      console.log(\"SUCCESS\", vaultAddresses);\n      getAllBalancesByAddress([], ethAddress, btcAddress, function (values) {\n        setVaultValues(values);\n      }); // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {\n      console.log('WTF', err);\n    }\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(function (item) {\n      if (item.address.includes('private')) {\n        var cipherText = item.address.replace('private:', '');\n        item.address = decrypt(cipherText, key);\n      }\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  function visitOpenSeaLink() {\n    location.href = 'https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + (vaultChainId == 137 ? 'matic/' : '') + contractAddresses.emblemVault[vaultChainId] + '/' + tokenId;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 914,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 915,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 916,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 917,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 918,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 919,\n      columnNumber: 9\n    }\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: \"\\n              // $(\\\".NFT\\\").tilt({    \\n              //     maxTilt: 3\\n              // });\\n              $(\\\".NFT\\\").trigger('mouseenter');\\n              $(\\\".NFT\\\").trigger('mouseclick'), '.NFT';\\n              \"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 920,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 932,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    privValues: privValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 934,\n      columnNumber: 7\n    }\n  }), showOffer ? __jsx(OfferModal, {\n    isOpen: isOpenOfferModal,\n    onClose: onCloseOfferModal,\n    tokenId: tokenId,\n    mine: mine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 943,\n      columnNumber: 9\n    }\n  }) : null, __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 952,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 953,\n      columnNumber: 9\n    }\n  }), loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 954,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault ? __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 956,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    className: \"NFT\",\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 957,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"blue.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 968,\n      columnNumber: 17\n    }\n  }, \"Vault Network: \", CHAIN_ID_NAMES[vaultChainId]), __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\" // textTransform=\"uppercase\"\n    ,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 981,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null), __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 994,\n      columnNumber: 17\n    }\n  }, vaultValues.length && vaultValues.filter(function (item) {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultImage,\n    items: vaultValues.map(function (value) {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 996,\n      columnNumber: 23\n    }\n  }) : __jsx(Embed, {\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 998,\n      columnNumber: 23\n    }\n  }), mine && ownedImage ? __jsx(Button, {\n    onClick: function onClick() {\n      handleOwnedEmbed();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1002,\n      columnNumber: 21\n    }\n  }, \"(OWNED) Show Full Embed\") : null), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1005,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1006,\n      columnNumber: 19\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1007,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    fontSize: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1008,\n      columnNumber: 23\n    }\n  }, vaultChainId == chainId ? __jsx(Link, {\n    href: \"./vaultlist?address=\" + owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1010,\n      columnNumber: 25\n    }\n  }, \"Owner: \", owner) : null), __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1015,\n      columnNumber: 23\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1016,\n      columnNumber: 25\n    }\n  }))))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1022,\n      columnNumber: 17\n    }\n  }, vaultPrivacy ? __jsx(Box, {\n    mb: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1024,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1025,\n      columnNumber: 23\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: function onChange(e) {\n      return tryDecrypt(e.target.value);\n    },\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1028,\n      columnNumber: 23\n    }\n  })) : __jsx(Box, {\n    d: \"flex\",\n    backgroundColor: colorMode == \"light\" ? \"gray.100\" : \"gray.700\",\n    alignItems: \"baseline\",\n    className: \"coin-balance-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1036,\n      columnNumber: 21\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1037,\n      columnNumber: 23\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    mt: 2,\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1038,\n      columnNumber: 25\n    }\n  }, \"Current Contents:  \", __jsx(\"button\", {\n    onClick: function onClick() {\n      getAllBalancesLive([], tokenId, function (v) {\n        setLoadedValues(false);\n        setVaultValues(v);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1040,\n      columnNumber: 46\n    }\n  }, \" [Refresh Balances]\")), __jsx(Text, {\n    as: \"p\",\n    color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1049,\n      columnNumber: 25\n    }\n  }, \"$\", Number(vaultTotalValue.toFixed(4)).toLocaleString()), vaultValues.length ? vaultValues.map(function (coin) {\n    return __jsx(Stack, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 31\n      }\n    }, __jsx(CoinBalance, {\n      colorMode: colorMode,\n      coin: coin,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1054,\n        columnNumber: 33\n      }\n    }));\n  }) : null, vaultDataValues.length ? vaultDataValues.map(function (data) {\n    return __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1062,\n        columnNumber: 31\n      }\n    }, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1066,\n      columnNumber: 27\n    }\n  }, \"Nothing in here! Fill 'er up!\") : null)), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1073,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1074,\n      columnNumber: 23\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1075,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1076,\n      columnNumber: 27\n    }\n  }, \"Deposit Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1077,\n      columnNumber: 27\n    }\n  }, vaultAddresses.map(function (addr) {\n    return __jsx(Button, {\n      className: \"nft_button\",\n      ml: 2,\n      mt: 2,\n      \"font-weight\": \"100 !important\",\n      key: addr.address,\n      onClick: function onClick() {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1080,\n        columnNumber: 33\n      }\n    }, addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP' : addr.coin);\n  })), mine && vaultAddresses.length < 5 ? __jsx(React.Fragment, null, __jsx(\"button\", {\n    className: \"nft_button\",\n    onClick: function onClick() {// onManageAddressToggle()\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1100,\n      columnNumber: 29\n    }\n  }, \"Manage Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1103,\n      columnNumber: 29\n    }\n  }, __jsx(Collapse, {\n    isOpen: isManageAddressOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1104,\n      columnNumber: 31\n    }\n  }, !hasAddress('DOGE') ? __jsx(Button, {\n    mr: 2,\n    onClick: function onClick() {\n      handleAddressSign('DOGE');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1106,\n      columnNumber: 35\n    }\n  }, \"Add DOGE\") : null, !hasAddress('DGB') ? __jsx(Button, {\n    mr: 2,\n    onClick: function onClick() {\n      handleAddressSign('DGB');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1109,\n      columnNumber: 35\n    }\n  }, \"Add Digibyte\") : null))) : null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1115,\n      columnNumber: 25\n    }\n  }, \"Load Vault with Credit Card\"), __jsx(HStack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1116,\n      columnNumber: 25\n    }\n  }, vaultAddresses.map(function (addr) {\n    if (addr.coin == 'ETH' || addr.coin == 'BTC') return __jsx(Button, {\n      className: \"nft_button\",\n      width: \"165px\",\n      key: addr.address,\n      onClick: function onClick() {\n        initializeTransak(addr.address, addr.coin);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1120,\n        columnNumber: 31\n      }\n    }, \"Buy \", addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin);\n  }))))) : null, !(status === 'claimed') && (vaultChainId === 1 || vaultChainId === 4 || vaultChainId === 137) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1142,\n      columnNumber: 21\n    }\n  }, __jsx(Stack, {\n    d: \"flex\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1143,\n      columnNumber: 23\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: function onClick() {\n      visitOpenSeaLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1144,\n      columnNumber: 25\n    }\n  }, mine ? 'Sell (Opensea)' : 'Make an Offer (Opensea)'), showOffer ? __jsx(Button, {\n    className: \"\",\n    onClick: function onClick() {\n      onOpenOfferModal();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1152,\n      columnNumber: 27\n    }\n  }, mine ? 'My Offers' : 'Make an Offer', \" (NFT\\xB2NFT)\") : null)) : null, !(status === 'claimed') && mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1160,\n      columnNumber: 22\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1161,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: onToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1162,\n      columnNumber: 27\n    }\n  }, \"Transfer Vault\"), __jsx(Collapse, {\n    isOpen: isOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1163,\n      columnNumber: 27\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1164,\n      columnNumber: 29\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"owner-address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1165,\n      columnNumber: 29\n    }\n  }, \"Address\"), __jsx(Input, {\n    mt: 1,\n    type: \"text\",\n    id: \"transferAddress\",\n    value: transferToAddress || '',\n    onChange: function onChange(e) {\n      console.log(\"Transfer to\", e.target.value);\n      setTransferToAddress(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1166,\n      columnNumber: 31\n    }\n  })), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1178,\n      columnNumber: 29\n    }\n  }, __jsx(Button, {\n    isDisabled: !isETHAddress(transferToAddress),\n    onClick: function onClick() {\n      onToggle();\n      transferVault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1179,\n      columnNumber: 31\n    }\n  }, \"Transfer Now\")))))) : null, mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1190,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: function onClick() {\n      if (!approved) {\n        return handleApproveForall();\n      } else {\n        var key = CryptoJS.lib.WordArray.random(128 / 8).toString();\n        var sha = CryptoJS.SHA256(key).toString();\n        console.log('plain', key);\n        console.log('sha', sha);\n        setTransferPassword(key);\n        transferImage = sha;\n        setTimeout(function () {\n          addPreTransfer();\n        }, 500);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1191,\n      columnNumber: 23\n    }\n  }, \" \", approved ? \"Get Link (Send Vault Via Link)\" : \"Approve Gifting\", \" \"))) : null, (showTransferPassword || mintPassword) && acceptable ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1212,\n      columnNumber: 23\n    }\n  }, __jsx(Link, {\n    href: location.protocol + '//' + location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1213,\n      columnNumber: 25\n    }\n  }, \"Copy Gift Link\"), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1214,\n      columnNumber: 25\n    }\n  }, \"Password: \", transferPassword || mintPassword)) : null, acceptable && claimedBy !== account ? __jsx(React.Fragment, null, __jsx(Button, {\n    mt: 2,\n    width: \"100%\",\n    onClick: function onClick() {\n      fireMetaMask();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1219,\n      columnNumber: 23\n    }\n  }, \"Accept\"), __jsx(Input, {\n    mt: 2,\n    type: \"password\",\n    id: \"mintPassword\",\n    minLength: 3,\n    maxLength: 200,\n    value: mintPassword || '',\n    onChange: function onChange(e) {\n      console.log('grrr', e.target.value, mintPassword);\n      setMintPassword(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1220,\n      columnNumber: 23\n    }\n  })) : null, !(status === 'claimed') && account && vaultChainId === chainId && mine ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1237,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      handleClaim();\n    },\n    isDisabled: claiming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1238,\n      columnNumber: 23\n    }\n  }, claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)')) // || !live && nonce && mintSignature && vaultCiphertextV2 && to == account\n  : status === 'claimed' && claimedBy === account && vaultChainId === chainId ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1250,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1251,\n      columnNumber: 23\n    }\n  }, \"Get Keys\")) : null, !live && nonce && mintSignature && vaultCiphertextV2 && to == account ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: delayedMint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1257,\n      columnNumber: 19\n    }\n  }, \"Mint Me\") : null, showMakingVaultMsg ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1260,\n      columnNumber: 19\n    }\n  }, \"Making Vault ...\") : null), vaultIPFS ? __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1266,\n      columnNumber: 19\n    }\n  }, __jsx(HStack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1267,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    target: \"new\",\n    mb: 2,\n    ml: 35,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1268,\n      columnNumber: 23\n    }\n  }, \"View Metadata on IPFS \"), vaultImageIPFS ? __jsx(Link, {\n    mb: 2,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultImageIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1270,\n      columnNumber: 25\n    }\n  }, \"View Image on IPFS \") : null)) : null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1275,\n      columnNumber: 17\n    }\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1276,\n      columnNumber: 42\n    }\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1279,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1280,\n      columnNumber: 21\n    }\n  }), accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving ? \"Handling Approval Flow ...\" : transfering ? \"Transfering Vault ...\" : minting ? \"Minting Vault\" : \"Generating Gift Link ...\") : null)) : __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1287,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1288,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1292,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1294,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      if (claiming && !accepting && !preTransfering) {\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account);\n        handleSign();\n      } else if (preTransfering) {\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        setApproving(false);\n        getVault();\n        setHash(null);\n      } else if (transfering) {\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else if (minting) {\n        checkLiveliness(tokenId, function () {\n          setMinting(false); // setShowMakingVaultMsg(false)\n\n          location.href = location.origin + '/nft?id=' + tokenId;\n        });\n      } else {\n        console.log('claiming', claiming);\n        console.log('accepting', accepting);\n        console.log('preTransfering', preTransfering);\n        console.log('approving', approving);\n        console.log(\"Unknown state\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1301,\n      columnNumber: 11\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1343,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(Nft, \"VAMaTgsyP8d1e7i0WAneYp2gxas=\", false, function () {\n  return [useWeb3React, useRouter, useContract, useContract, useDisclosure, useDisclosure, useDisclosure, useDisclosure, useDisclosure, useColorMode];\n});\n\n_c7 = Nft;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"AddrModal$dynamic\");\n$RefreshReg$(_c2, \"AddrModal\");\n$RefreshReg$(_c3, \"KeysModal$dynamic\");\n$RefreshReg$(_c4, \"KeysModal\");\n$RefreshReg$(_c5, \"OfferModal$dynamic\");\n$RefreshReg$(_c6, \"OfferModal\");\n$RefreshReg$(_c7, \"Nft\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","Link","Alert","AlertIcon","useDisclosure","Collapse","FormLabel","useColorMode","HStack","TorusSdk","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","Loader","dynamic","isETHAddress","TransactionToast","EMBLEM_API","BURN_ADDRESS","contractAddresses","useContract","CHAIN_ID_NAMES","CryptoJS","ReactMarkdown","gfm","Embed","NFTSlideshow","CoinBalance","transakSDK","AddrModal","KeysModal","OfferModal","Nft","account","chainId","library","query","approved","setApproved","key","mintPassword","setMintPassword","offer","showOffer","setShowOffer","framed","setFramed","id","tokenId","setTokenId","experimental","setExperimental","vaultName","setVaultName","vaultIPFS","setVaultIPFS","vaultImageIPFS","setVaultImageIPFS","vaultCiphertextV2","setVaultCiphertextV2","vaultDesc","setVaultDesc","vaultImage","setVaultImage","ownedImage","setOwnedImage","vaultValues","setVaultValues","loadedValues","setLoadedValues","vaultDataValues","setVaultDataValues","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","loaded","state","setState","mine","setMine","claiming","setClaiming","status","setStatus","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","privValues","setKeyValues","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","hasCheckedNft","setHasCheckedNft","accepting","setAccepting","approving","setApproving","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","preTransfering","setPreTransfering","transferToAddress","setTransferToAddress","transfering","setTransfering","owner","setOwner","initTorus","torus","setTorus","live","setLive","nonce","setNonce","mintSignature","setMintSignature","to","setTo","showMakingVaultMsg","setShowMakingVaultMsg","minting","setMinting","handlerContract","vaultHandler","vaultHandlerAbi","emblemContract","emblemVault","emblemAbi","isOpenAddrModal","isOpen","onOpenAddrModal","onOpen","onCloseAddrModal","onClose","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","isOpenOfferModal","onOpenOfferModal","onCloseOfferModal","onToggle","isManageAddressOpen","onManageAddressToggle","colorMode","transak","transferImage","_torus","baseUrl","window","location","origin","enableLogging","network","init","skipSw","skipInit","skipPrefetch","console","log","initializeTransak","address","coin","apiKey","environment","defaultCryptoCurrency","walletAddress","themeColor","fiatCurrency","email","redirectURL","hostURL","widgetHeight","widgetWidth","on","ALL_EVENTS","data","EVENTS","TRANSAK_ORDER_SUCCESSFUL","orderData","close","checkLiveliness","cb","fetch","method","headers","service","chainid","toString","body","JSON","stringify","then","response","transferVault","transferFrom","error","delayedMint","cipherTextHash","filter","buyWithSignature","setTimeout","fireMetaMask","getWitness","witness","transferWithCode","signature","code","addPreTransfer","handleApproveForall","setApprovalForAll","deriveKeys","decrypted","coins","doDerive","index","derive","pk","keys","push","length","responce","json","derived","getVault","loadCache","jsonData","image_ipfs","getIPFSImage","name","setStates","saveCache","getAllBalancesLive","v","text","preview","document","querySelector","src","image","includes","ciphertextV2","description","totalValue","concat","values","attributes","item","trait_type","addresses","ipfs","isPvt","getEthBalances","Number","getBtcBalance","getNftBalance","getAllBalances","balances","getAllBalancesByAddress","ethAddress","btcAddress","vault","localStorage","setItem","parse","getItem","savePasswordToLocalStorage","loadPasswordFromLocalStorage","storedPw","getKeys","myHeaders","Headers","append","raw","redirect","getSignedJWT","getRemoteKey","token","getTorusKey","verifier_id","err","message","addAddress","decryptEmbed","getContractStates","finish","getPreTransfer","isApprovedForAll","isApproved","_from","_owner","owned","ownerOf","hasAddress","handleSign","getSigner","signMessage","result","phrase","privkey","bytes","AES","decrypt","privateKey","payload","enc","Utf8","handleAddressSign","handleOwnedEmbed","handleClaim","startDecryptEffect","nextFrame","pos","i","clen","stri","num","Math","floor","theLetters","random","letter","charAt","block","si","increment","fixed","ctnt","speed","rustle","splitDescription","words","desc","split","trim","tryDecrypt","ciphertext","replace","decryptAddresses","forEach","cipherText","decryptedData","visitOpenSeaLink","href","__html","toLocaleString","type","map","value","canSwipe","e","target","toFixed","attribute_key","addr","lib","WordArray","sha","SHA256","protocol","host"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n  Tooltip,\n  Collapse,\n  FormControl,\n  FormLabel,\n  useColorMode,\n  IconButton\n} from '@chakra-ui/core'\n\nimport {HStack, VStack, Circle } from '@chakra-ui/react'\nimport TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { isETHAddress, validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\nimport { CHAIN_ID_NAMES } from '../utils'\nimport CryptoJS from 'crypto-js'\nimport { addTokenToWallet, addMany } from '../public/web3'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport Embed from './Embed'\nimport NFTSlideshow from './embed/NFTSlideshow'\nimport CoinBalance from './partials/CoinBalance'\nimport { chakra } from '@chakra-ui/system'\nimport transakSDK from '@transak/transak-sdk'\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\nconst OfferModal = dynamic(() => import('./OfferModal'))\n\nexport default function Nft() {\n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [approved, setApproved] = useState(false)\n  const [mintPassword, setMintPassword] = useState(query.key)\n  const [showOffer, setShowOffer] = useState(query.offer || false)\n  const [framed, setFramed] = useState(query.framed || true)\n  const [tokenId, setTokenId] = useState(query.id)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultIPFS, setVaultIPFS] = useState('')\n  const [vaultImageIPFS, setVaultImageIPFS] = useState('')\n  const [vaultCiphertextV2, setVaultCiphertextV2] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [ownedImage, setOwnedImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [loadedValues, setLoadedValues] = useState(false)\n  const [vaultDataValues, setVaultDataValues] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [privValues, setKeyValues] = useState([])\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [hasCheckedNft, setHasCheckedNft] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n  const [preTransfering, setPreTransfering] = useState(false)\n  const [transferToAddress, setTransferToAddress] = useState(null)\n  const [transfering, setTransfering] = useState(false)\n  const [owner, setOwner] = useState(null)\n  const [torus, setTorus] = useState(initTorus())\n  const [live, setLive] = useState(false)\n  const [nonce, setNonce] = useState(null)\n  const [mintSignature, setMintSignature] = useState(null)\n  const [to, setTo] = useState(null)\n  const [showMakingVaultMsg, setShowMakingVaultMsg] = useState(false)\n  const [minting, setMinting] = useState(false)\n  // const [transferImage, setTransferImage] = useState('')\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n  const { isOpen: isOpenOfferModal, onOpen: onOpenOfferModal, onClose: onCloseOfferModal } = useDisclosure()\n  const { isOpen, onToggle } = useDisclosure()\n  const { isOpen: isManageAddressOpen, onToggle: onManageAddressToggle } = useDisclosure()\n\n  const { colorMode } = useColorMode()\n\n  let transak\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  let transferImage;\n\n  async function initTorus() {\n    let _torus = new TorusSdk({\n      baseUrl: `${window.location.origin}/serviceworker`,\n      enableLogging: true,\n      network: \"testnet\", // details for test net\n    });\n    await _torus.init({skipSw: true, skipInit: true, skipPrefetch: true})\n    console.log(\"Initialized Torus\")\n    return _torus\n  }\n\n  const initializeTransak = (address?: string, coin? : string)=>{\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',  // Your API Key\n      environment: 'PRODUCTION', // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '', // Your customer's wallet address\n      themeColor: '000000', // App theme color\n      fiatCurrency: 'USD', // INR/GBP\n      // fiatAmount: 350,\n      email: '', // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    });\n  \n    // To get all the events\n    transak.on(transak.ALL_EVENTS, (data) => {\n      console.log(data)\n    });\n  \n    // This will trigger when the user marks payment is made.\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, (orderData) => {\n      console.log(orderData);\n      transak.close();\n    });\n  \n    transak.init()\n  }\n\n  const checkLiveliness = (tokenId, cb)=>{\n    fetch(EMBLEM_API + '/liveliness', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({tokenId: tokenId}),\n    }).then(async function (response) {\n      console.log(\"Liveliness check\", response)\n    })\n    return cb()\n  }\n\n  const transferVault = () => {\n    setTransfering(true)\n    ;(emblemContract as Contract).transferFrom(account, transferToAddress, tokenId)\n    .then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n    .catch((error: ErrorWithCode) => {})\n  }\n\n  const delayedMint = () => {\n    // setCreating(true)\n      let cipherTextHash = vaultAddresses.filter(address=>{ return address.coin == \"ETH\"})[0].address\n      ;(handlerContract as Contract)\n      .buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n          // setShowMakingVaultMsg(true)\n          setMinting(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n          // setShowMakingVaultMsg(false)\n          setMinting(false)\n      })    \n  }\n\n  const fireMetaMask = () => {\n    console.log(mintPassword)\n    setAccepting(true)\n    getWitness(witness=>{\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;(handlerContract as Contract)\n      .transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        setAccepting(false)\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          // setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n    })\n    \n  }\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\"+transferImage)\n    setPreTransfering(true)\n    ;(handlerContract as Contract)\n      .addPreTransfer(tokenId, \"0x\"+transferImage)\n      .then(({ hash }: { hash: string }) => {\n        // setTimeout(() => {\n          setHash(hash)\n          console.log(\"Set Pre Transfering True\", preTransfering)\n          // setShowMakingVaultMsg(true)\n        // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code){   \n            console.log(\"Error?\")       \n            setPreTransfering(false)\n            setShowTransferPassword(false)\n            setTransferPassword('')\n        } else {\n          // setShowTransferPassword(!showTransferPassword? true : false)\n          // setPreTransfering(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const handleApproveForall = () => {\n    setApproving(true)\n    ;(emblemContract as Contract)\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  // \n\n  async function deriveKeys(decrypted, coins, cb) {\n    let pk = decrypted.key\n    let keys = []\n    doDerive(0, cb)\n    function doDerive(index, cb) {\n        let coin = coins[index]\n        derive(pk, coin, (key) => {\n            keys.push(key)\n            if (coins.length === index + 1) {\n                decrypted.keys = keys\n                return cb(decrypted)\n            } else {\n                return doDerive(index + 1, cb)\n            }\n        })\n    }\n  }\n  \n  async function derive(key, coin, cb) {\n    const responce = await fetch('https://api.emblemvault.io/s:derive/' + key + '/' + coin + '?format=bip44&include=all', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const derived = await responce.json()\n    // let derived = JSON.parse(jsonData.body)\n        derived.coin = coin\n    return cb(derived)\n  }\n\n  const getVault = async () => {\n    loadCache()\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log('vault response was ', jsonData)\n    if (jsonData.image_ipfs) {\n      getIPFSImage(jsonData.image_ipfs)\n    }\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      setStates(jsonData)\n      saveCache(jsonData)\n      setLoadingApi(false)\n      setInvalidVault(false)\n    }\n    {\n      !vaultPrivacy && !loadedValues ?    \n      getAllBalancesLive([], tokenId, (v)=>{\n        if (v) {\n          setVaultValues(v)\n        }        \n      }) : null\n    }\n  }\n\n  const getIPFSImage = async function(hash){\n    // alert(0)\n    const responce = await fetch('https://gateway.ipfs.io/ipfs/'+hash, {\n      method: 'GET',\n      headers: {\n        // redirect:'follow'\n      },\n    })\n    let jsonData = await responce.text()\n    // setVaultImage(jsonData) \n    const preview = document.querySelector('img.d-block') as HTMLImageElement \n    preview.src = jsonData\n    console.log(jsonData)  \n  }\n\n  const getWitness = async (cb) => {\n    const responce = await fetch(EMBLEM_API + '/witness/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log('vault response was ', jsonData)\n    if (jsonData.signature) {\n      console.log('witness', jsonData)\n      return cb(jsonData)\n    } else {\n      return cb(false)\n    }\n  }\n\n  const setStates = (jsonData) => {\n    framed && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\"+framed : null\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2)\n      console.log(\"ciphertextV2\", jsonData.ciphertextV2)\n    }\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setOwnedImage(jsonData.ownedImage || null)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    setVaultValues(vaultValues.concat(jsonData.values))\n    setVaultDataValues(jsonData.attributes.filter(item=>{return item.trait_type === \"key\"}))\n    setVaultAddresses(jsonData.addresses)\n    setVaultIPFS(jsonData.ipfs || null)\n    setVaultImageIPFS(jsonData.image_ipfs || null)\n    if (jsonData.live == false) {\n      checkLiveliness(jsonData.tokenId, ()=>{\n        \n      })\n    }\n    setLive(jsonData.live == false ? false : true)\n    setNonce(jsonData.nonce)\n    setMintSignature(jsonData.signature)\n    setTo(jsonData.to)\n    setVaultChainId(\n      jsonData.network == 'mainnet' ? 1 : \n      jsonData.network == \"rinkeby\" ? 4 : \n      jsonData.network == \"mumbai\" ? 80001 : \n      jsonData.network == \"matic\" ? 137 : \n      jsonData.network == \"xdai\" ? 100 : \n      jsonData.network == \"bsc\" ? 56 : \n      jsonData.network == \"fantom\" ? 250 : \n      97\n    )\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    // console.log('inside getstates. mine is ', mine)\n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)\n  }\n\n  const getEthBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n    return cb(jsonData.values)\n  }\n\n  const getBtcBalance = async (values, address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // setVaultValues(values.concat(jsonData.values))\n    return cb(values.concat(jsonData.values))\n  }\n\n  const getNftBalance = async (values, address, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    if (jsonData.length > 0) {\n      // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n      return cb(values.concat(jsonData))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    // setVaultValues([])\n    // console.log(address)\n    if (loadedValues) {\n      return cb(false)\n    }\n    setLoadedValues(true)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true' , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const saveCache = (vault) => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)) // Save new state for later\n  }\n\n  const loadCache = () => {\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')) // Load vaults from storage before updating from server!\n    if (vault) {\n      setState({ loaded: true })\n      setStates(vault)\n      setLoadingApi(true)\n    }\n  }\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword) // Save new state for later\n  }\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword')\n    storedPw && acceptable ? setMintPassword(storedPw) : null //setMintPassword(null)\n  }\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    // console.log('getKeys response is ', jsonData)\n    return cb(jsonData)\n  }\n\n  const getSignedJWT = async (signature, tokenId, cb)=>{\n    var myHeaders = new Headers()\n    myHeaders.append('chainid', chainId.toString())\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, tokenId: tokenId })\n    const responce = await fetch('https://tor-us-signer.vercel.app/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getRemoteKey = async (tokenId, token, cb)=> {   \n    let error = false\n    let keys = await (await torus).getTorusKey(\n        \"tor-us-signer-vercel\", \n        tokenId,\n        { verifier_id: tokenId }, \n        token, \n      ).catch(err=>{\n        error = err.message\n      })\n      if (error) {\n        console.log(\"error\", error)\n        return cb(false)\n      } else {\n        return cb(keys)\n      }\n  }\n\n  const addAddress = async (signature, tokenId, coin, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, coin: coin })\n    const responce = await fetch(EMBLEM_API + '/address/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    // console.log('getKeys response is ', jsonData)\n    return cb(jsonData)\n  }\n\n  const decryptEmbed = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    // console.log('getKeys response is ', jsonData)\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    let owned = false\n    let _owner\n    try {\n      _owner  = await emblemContract.ownerOf(tokenId)\n      finish()\n    } catch(err){\n      _owner = \"0x0000000000000000000000000000000000000000\"\n      finish()\n    }\n\n    async function finish(){\n      let acceptable = await handlerContract.getPreTransfer(tokenId)\n      let isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId])\n      setApproved(isApproved)\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n      setOwner(_owner)\n      setMine(_owner === account)\n      loadPasswordFromLocalStorage()\n    }\n    \n  }\n\n  useEffect(()=>{\n    // console.log(\"mine?\", mine)\n    // console.log(\"claiming?\", claiming)\n    // console.log(\"accepting?\", accepting)\n    // console.log(\"acceptable\", acceptable)\n  })\n\n  const hasAddress = (coin)=>{\n    console.log(coin, vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0)\n    return vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0\n  }\n\n  const handleSign = async () => {\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + tokenId)\n      .then((signature) => {\n        if (!vaultCiphertextV2) {\n        getKeys(signature, tokenId, (result) => {\n          // console.log('HandleSign response is ' + result)\n          setMnemonic(result.decrypted.phrase)\n          setPrivKeyBTC(\n            result.decrypted.keys.filter((key) => {\n              return key.coin === 'btc'\n            })[0].privkey\n          )\n          setPrivKeyETH(\n            result.decrypted.keys.filter((key) => {\n              return key.coin === 'eth'\n            })[0].privkey\n          )\n          setKeyValues(result.decrypted.values)\n          onOpenKeysModal()\n        })\n      } else {\n        getSignedJWT(signature, tokenId, (token)=>{\n          // console.log(\"Got JWT\", token)\n          getRemoteKey(tokenId, token.token, (keys)=>{\n            // console.log(\"Got Keys\", keys)\n            var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey)\n            let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n            // console.log(\"Decrypted payload locally\", payload)    \n            setKeyValues(payload.values)\n            setMnemonic(payload.phrase)\n            deriveKeys(payload, ['btc', 'eth'], (derived) => {\n              // console.log(\"DERIVED\", derived )\n              setPrivKeyBTC(\n                derived.keys.filter((key) => {\n                  return key.coin === 'btc'\n                })[0].privkey\n              )\n              setPrivKeyETH(\n                derived.keys.filter((key) => {\n                  return key.coin === 'eth'\n                })[0].privkey\n              )\n              onOpenKeysModal()\n              // return res.json({ success: true, decrypted })\n            })\n          })          \n        })\n      }\n    })\n  }\n\n  const handleAddressSign = async (coin: string) => {\n    library\n      .getSigner(account)\n      .signMessage('Address: ' + tokenId)\n      .then((signature) => {\n        addAddress(signature, tokenId, coin, (result) => {\n          getVault()\n        })\n      })\n  }\n\n  const handleOwnedEmbed = async () => {\n    library\n      .getSigner(account)\n      .signMessage('Embed: ' + tokenId)\n      .then((signature) => {\n        decryptEmbed(signature, tokenId, (result) => {\n          setVaultImage(result.ownedImage)\n        })        \n      })\n  }\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({ hash }: { hash: string }) => {\n      setClaiming(true)\n      setTimeout(() => {\n        setHash(hash)\n      }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    })\n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random())\n        //Get random letter\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      // $(\"#output\").html(fixed + block);\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null\n    // console.log('in the usefeect that clls getcontractstates')\n  })\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n')\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    console.log(vaultAddresses)\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      let ethAddress = vaultAddresses.filter((item) => {return item.coin === 'ETH'})[0].address\n      let btcAddress = vaultAddresses.filter((item) => {return item.coin === 'BTC'})[0].address\n      console.log(\"SUCCESS\", vaultAddresses)\n      getAllBalancesByAddress([], ethAddress, btcAddress, (values)=>{\n        setVaultValues(values)\n      })\n      // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {console.log('WTF', err)}\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach((item) => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '')\n        item.address = decrypt(cipherText, key)\n      }      \n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  function visitOpenSeaLink() {\n    location.href = (\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : '') +\n      'opensea.io/assets/' + \n      (vaultChainId == 137 ? 'matic/' : '') +\n      contractAddresses.emblemVault[vaultChainId] +\n      '/' +\n      tokenId \n    )\n  }\n\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n        <script\n            dangerouslySetInnerHTML={{\n              __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              `,\n            }}\n          />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n        privValues={privValues}\n      />\n      {showOffer ? (\n        <OfferModal\n          isOpen={isOpenOfferModal}\n          onClose={onCloseOfferModal}\n          tokenId={tokenId}\n          mine={mine}\n        />\n      ) : null}\n      \n\n      <Loader loaded={state.loaded}>\n        <Box height=\"40px\"></Box>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault ? (          \n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                className=\"NFT\" \n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"blue.500\"\n                >\n                  Vault Network: {CHAIN_ID_NAMES[vaultChainId]}\n                </Box>\n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  // textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null}\n                </Box>\n                <Stack className=\"NFT-content\" align=\"center\">\n                  { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                      <NFTSlideshow name={vaultName} image={vaultImage} items={vaultValues.map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n                    ) : (\n                      <Embed url={vaultImage}/>\n                    )\n                  }\n                  {mine && ownedImage ? (\n                    <Button onClick={() => {handleOwnedEmbed()}}>(OWNED) Show Full Embed</Button>\n                  ): null}\n                </Stack>\n                <Stack align=\"center\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                    <Stack>\n                      <Text fontSize=\"xs\">\n                      { vaultChainId == chainId ? (\n                        <Link href={\"./vaultlist?address=\"+owner}>\n                          Owner: {owner}\n                        </Link>\n                      ) : null }\n                      </Text>\n                      <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" >\n                        <ReactMarkdown plugins={[gfm]} children={splitDescription(vaultDesc)} />\n                      </Text>\n                      \n                    </Stack>                    \n                  </Box>                    \n                </Stack>\n                <Box p=\"6\">\n                  {vaultPrivacy ? (\n                    <Box mb={5}>\n                      <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                        {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                      </Text>\n                      <Input\n                        type=\"password\"\n                        id=\"vault-password\"\n                        onChange={(e) => tryDecrypt(e.target.value)}\n                        aria-describedby=\"password-helper-text\"\n                      />\n                    </Box>\n                  ) : (\n                    <Box d=\"flex\" backgroundColor={colorMode == \"light\"? \"gray.100\": \"gray.700\"} alignItems=\"baseline\" className=\"coin-balance-content\">\n                      <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                        <Text as=\"h4\" mt={2} fontWeight=\"semibold\">\n                        \n                          Current Contents:  <button\n                          onClick={() =>{\n                            getAllBalancesLive([], tokenId, (v)=>{\n                              setLoadedValues(false)\n                              setVaultValues(v)\n                            })\n                          }}\n                        > [Refresh Balances]</button>\n                        </Text>\n                        <Text as=\"p\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"}>${Number(vaultTotalValue.toFixed(4)).toLocaleString()}</Text>\n                        { vaultValues.length ? (\n                          vaultValues.map((coin) => {\n                            return (  \n                              <Stack> \n                                <CoinBalance colorMode={colorMode} coin={coin}/>  \n                              </Stack>\n                            )\n                          })\n                        ) : null } \n                        { vaultDataValues.length ? (\n                          vaultDataValues.map((data) => {\n                            return (\n                              <Text>Data: {data.attribute_key}</Text>\n                            )                        \n                          })\n                        ) : !vaultDataValues.length && !vaultValues.length ? (\n                          <Text>Nothing in here! Fill 'er up!</Text>\n                        ) : null}\n                      </Box>\n                    </Box>\n                  )}                  \n                  \n                  {!vaultPrivacy ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <ButtonGroup justifyContent=\"space-between\" spacing={6}>\n                        <Stack>\n                          <Text>Deposit Addresses</Text>\n                          <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                            {vaultAddresses.map((addr) => {\n                              return (\n                                <Button\n                                  className=\"nft_button\"\n                                  \n                                  ml={2}\n                                  mt={2}\n                                  font-weight=\"100 !important\"\n                                  key={addr.address}\n                                  onClick={() => {\n                                    setCurrCoin(addr.coin)\n                                    setCurrAddr(addr.address)\n                                    onOpenAddrModal()\n                                  }}\n                                >\n                                  {addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP': addr.coin}\n                                </Button>\n                              )\n                            })}\n                        </Flex>\n                        {mine && vaultAddresses.length < 5 ? (\n                          <>\n                            <button className=\"nft_button\" onClick={()=>{\n                              // onManageAddressToggle()\n                            }}>Manage Addresses</button>\n                            <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                              <Collapse isOpen={isManageAddressOpen}>\n                                { !hasAddress('DOGE') ? (\n                                  <Button mr={2} onClick={()=>{ handleAddressSign('DOGE') }}>Add DOGE</Button>\n                                ) : null }\n                                { !hasAddress('DGB') ? (\n                                  <Button mr={2} onClick={()=>{ handleAddressSign('DGB') }}>Add Digibyte</Button>\n                                ) : null }\n                              </Collapse>\n                            </Flex>\n                          </>\n                        ) : null}                        \n                        <Text>Load Vault with Credit Card</Text>\n                        <HStack>\n                          {vaultAddresses.map((addr) => {\n                            if (addr.coin == 'ETH' || addr.coin == 'BTC')\n                            return (\n                              <Button\n                                className = 'nft_button'\n                                width=\"165px\"\n                                key={addr.address}\n                                onClick={() => {\n                                  initializeTransak(addr.address, addr.coin)\n                                }}\n                              >\n                                Buy {addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin}\n                              </Button>\n                            )\n                          })}\n                        </HStack>\n                        {/* <Button onClick={() => {\n                          initializeTransak()\n                        }}>Add Crypto with Credit Card</Button> */}\n                        </Stack>\n                      </ButtonGroup>\n                    </Box>\n                  ) : null}\n\n                  {!(status === 'claimed') && (vaultChainId === 1 || vaultChainId === 4 || vaultChainId === 137 )? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Stack d=\"flex\" width=\"100%\">\n                        <Button\n                          className=\"nft_button\"\n                          width=\"100%\"\n                          onClick={() => {visitOpenSeaLink()}}\n                        >\n                          {mine ? 'Sell (Opensea)' : 'Make an Offer (Opensea)'}\n                        </Button>\n                        {showOffer? (\n                          <Button className=\"\" onClick={() => { onOpenOfferModal() }}>{mine? ('My Offers') : ('Make an Offer')} (NFT²NFT)</Button>\n                        ) : null}\n                        \n                      </Stack>\n                    </Box>\n                  ) : null}\n                  {!(status === 'claimed') && mine && !acceptable?  (\n                    <>\n                     <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\" width=\"100%\">\n                        <Stack direction=\"column\" align=\"center\" width=\"100%\">\n                          <Button className=\"nft_button\" width=\"100%\" onClick={onToggle}>Transfer Vault</Button>\n                          <Collapse isOpen={isOpen}>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                            <FormLabel htmlFor=\"owner-address\">Address</FormLabel>\n                              <Input\n                                mt={1}\n                                type=\"text\"\n                                id=\"transferAddress\"\n                                value={transferToAddress || ''}\n                                onChange={(e) => {                              \n                                  console.log(\"Transfer to\", e.target.value)\n                                  setTransferToAddress(e.target.value)\n                                }}\n                                autoComplete=\"off\"\n                              />\n                            </Box>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                              <Button isDisabled={!isETHAddress(transferToAddress)} onClick={()=>{\n                                onToggle()\n                                transferVault()\n                              }}>Transfer Now</Button> \n                            </Box>\n                          </Collapse>\n                        </Stack>\n                      </Box>\n                    </>\n                  ):null }\n                  {mine && !acceptable ? (<>\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button \n                        className=\"nft_button\"\n                        width=\"100%\" onClick={() => {\n                        if (!approved) {\n                          return handleApproveForall()\n                        } else {\n                          let key = CryptoJS.lib.WordArray.random(128/8).toString()\n                          let sha = CryptoJS.SHA256(key).toString()\n                          console.log('plain', key)\n                          console.log('sha', sha)\n                          setTransferPassword(key)\n                          transferImage = sha                          \n                          setTimeout(()=>{\n                            addPreTransfer()\n                          }, 500)\n                        }                                             \n                      }\n                    }> {approved ? \"Get Link (Send Vault Via Link)\" : \"Approve Gifting\" } </Button>\n                    </Box>\n                  </>) : null }\n                  {(showTransferPassword || mintPassword) && acceptable ? (\n                      <Box>\n                        <Link href={location.protocol +'//'+ location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword)}>Copy Gift Link</Link>\n                        <Text>Password: {(transferPassword || mintPassword)}</Text>\n                      </Box>\n                      ) : null}\n                  {acceptable && claimedBy !== account ? (\n                  <>\n                      <Button mt={2} width=\"100%\" onClick={()=>{fireMetaMask()}}>Accept</Button>\n                      <Input\n                        mt={2}\n                        type=\"password\"\n                        id=\"mintPassword\"\n                        minLength={3}\n                        maxLength={200}\n                        value={mintPassword || ''}\n                        onChange={(e) => {\n                          console.log('grrr', e.target.value, mintPassword)\n                          setMintPassword(e.target.value)}\n                        }\n                        autoComplete=\"off\"\n                      />\n                  </>\n                    ) : null}\n\n                  {!(status === 'claimed') && account && vaultChainId === chainId && mine ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        onClick={() => {\n                          handleClaim()\n                        }}\n                        isDisabled={claiming}\n                      >\n                        {claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)'}\n                      </Button>\n                    </Box>\n                    // || !live && nonce && mintSignature && vaultCiphertextV2 && to == account\n                  ) : (status === 'claimed' && claimedBy === account && vaultChainId === chainId)  ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={handleSign}>\n                        Get Keys\n                      </Button>\n                    </Box>\n                  ) : null}\n                  {!live && nonce && mintSignature && vaultCiphertextV2 && to == account ? (\n                  <Button width=\"100%\" mt={5} onClick={delayedMint}>Mint Me</Button>\n                ) : null}\n                {showMakingVaultMsg ? (\n                  <Button isDisabled type=\"submit\">\n                    Making Vault ...\n                  </Button>\n                ) : null}\n                </Box>\n                {vaultIPFS ? (\n                  <Stack>\n                    <HStack align=\"center\">\n                      <Link target='new' mb={2} ml={35} href={'https://gateway.ipfs.io/ipfs/'+vaultIPFS} isExternal>View Metadata on IPFS </Link>\n                      {vaultImageIPFS? (\n                        <Link mb={2} href={'https://gateway.ipfs.io/ipfs/'+vaultImageIPFS} isExternal>View Image on IPFS </Link>\n                      ) : null}                      \n                    </HStack> \n                  </Stack>\n                ) : null }\n                <Stack direction=\"column\" align=\"center\">\n                  {status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n                {hash ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    { accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving? \"Handling Approval Flow ...\" : transfering? \"Transfering Vault ...\":  minting? \"Minting Vault\" : \"Generating Gift Link ...\"}\n                  </Alert>\n                ) : null}\n              </Box>\n            </Flex>\n        ) : (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        )}\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming && !accepting && !preTransfering) {\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                handleSign()\n              } else if (preTransfering) {\n                savePasswordToLocalStorage()\n                setShowTransferPassword(true)\n                setPreTransfering(false)\n                setHash(null)                \n              } else if(accepting) {\n                setAccepting(false)                \n                getVault()\n                setHash(null)\n              } else if(approving) {\n                setApproving(false)\n                getVault()\n                setHash(null)\n              } else if(transfering) {\n                setTransfering(false)\n                getVault()\n                setHash(null)\n              } else if(minting) {\n                checkLiveliness(tokenId, ()=>{\n                  setMinting(false)\n                  // setShowMakingVaultMsg(false)\n                  location.href = location.origin + '/nft?id=' + tokenId\n                })\n              } else {\n                console.log('claiming', claiming) \n                console.log('accepting', accepting) \n                console.log('preTransfering', preTransfering)\n                console.log('approving', approving)\n                console.log(\"Unknown state\")\n              }\n            }}\n          />\n        ) : null}\n        <Box height=\"40px\"></Box>\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}