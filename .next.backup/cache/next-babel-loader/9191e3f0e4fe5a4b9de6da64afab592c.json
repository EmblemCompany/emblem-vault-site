{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar isEvent = function isEvent(key) {\n  return /^on[A-Z]/.test(key);\n};\n\nvar getEventsFromProps = function getEventsFromProps(props) {\n  return Object.keys(props).filter(isEvent).map(getEventFromKey);\n};\n\nvar getEventFromKey = function getEventFromKey(key) {\n  return key.substr(2).toLowerCase();\n};\n\nexport var unsub = function unsub(component) {\n  var events = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  (component.unsubs || []). // events not supplied, or event is in events list\n  filter(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        event = _ref2[0];\n\n    return !events || events.includes(event);\n  }).forEach(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        unsub = _ref4[1];\n\n    return unsub();\n  });\n};\nexport var sub = function sub(component, props) {\n  // unsub existing subscriptions\n  unsub(component, getEventsFromProps(props)); // subscribe\n\n  component.unsubs = Object.keys(props).filter(isEvent).map(function (key) {\n    var type = getEventFromKey(key);\n    return [type, component.editor.on(type, props[key])];\n  });\n};","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/node_modules/react-doka/events.js"],"names":["isEvent","key","test","getEventsFromProps","props","Object","keys","filter","map","getEventFromKey","substr","toLowerCase","unsub","component","events","undefined","unsubs","event","includes","forEach","sub","type","editor","on"],"mappings":";;AAAA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD;AAAA,SAAS,WAAWC,IAAX,CAAgBD,GAAhB,CAAT;AAAA,CAAhB;;AAEA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD;AAAA,SAAWC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,CAA0BP,OAA1B,EAAmCQ,GAAnC,CAAuCC,eAAvC,CAAX;AAAA,CAA3B;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACR,GAAD;AAAA,SAASA,GAAG,CAACS,MAAJ,CAAW,CAAX,EAAcC,WAAd,EAAT;AAAA,CAAxB;;AAEA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,SAAD,EAAmC;AAAA,MAAvBC,MAAuB,uEAAdC,SAAc;AACpD,GAACF,SAAS,CAACG,MAAV,IAAoB,EAArB,GACI;AACCT,EAAAA,MAFL,CAEY;AAAA;AAAA,QAAEU,KAAF;;AAAA,WAAa,CAACH,MAAD,IAAWA,MAAM,CAACI,QAAP,CAAgBD,KAAhB,CAAxB;AAAA,GAFZ,EAGKE,OAHL,CAGa;AAAA;AAAA,QAAIP,KAAJ;;AAAA,WAAeA,KAAK,EAApB;AAAA,GAHb;AAIH,CALM;AAOP,OAAO,IAAMQ,GAAG,GAAG,SAANA,GAAM,CAACP,SAAD,EAAYT,KAAZ,EAAsB;AACrC;AACAQ,EAAAA,KAAK,CAACC,SAAD,EAAYV,kBAAkB,CAACC,KAAD,CAA9B,CAAL,CAFqC,CAIrC;;AACAS,EAAAA,SAAS,CAACG,MAAV,GAAmBX,MAAM,CAACC,IAAP,CAAYF,KAAZ,EACdG,MADc,CACPP,OADO,EAEdQ,GAFc,CAEV,UAACP,GAAD,EAAS;AACV,QAAMoB,IAAI,GAAGZ,eAAe,CAACR,GAAD,CAA5B;AACA,WAAO,CAACoB,IAAD,EAAOR,SAAS,CAACS,MAAV,CAAiBC,EAAjB,CAAoBF,IAApB,EAA0BjB,KAAK,CAACH,GAAD,CAA/B,CAAP,CAAP;AACH,GALc,CAAnB;AAMH,CAXM","sourcesContent":["const isEvent = (key) => /^on[A-Z]/.test(key);\n\nconst getEventsFromProps = (props) => Object.keys(props).filter(isEvent).map(getEventFromKey);\n\nconst getEventFromKey = (key) => key.substr(2).toLowerCase();\n\nexport const unsub = (component, events = undefined) => {\n    (component.unsubs || [])\n        // events not supplied, or event is in events list\n        .filter(([event]) => !events || events.includes(event))\n        .forEach(([, unsub]) => unsub());\n};\n\nexport const sub = (component, props) => {\n    // unsub existing subscriptions\n    unsub(component, getEventsFromProps(props));\n\n    // subscribe\n    component.unsubs = Object.keys(props)\n        .filter(isEvent)\n        .map((key) => {\n            const type = getEventFromKey(key);\n            return [type, component.editor.on(type, props[key])];\n        });\n};\n"]},"metadata":{},"sourceType":"module"}