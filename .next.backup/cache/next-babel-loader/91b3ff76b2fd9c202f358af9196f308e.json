{"ast":null,"code":"var __jsx = React.createElement;\nimport { FormControl, FormLabel, FormHelperText, Input, Stack, Tabs, TabList, TabPanels, Tab, TabPanel, Box, Flex, RadioGroup, Radio, Textarea, Button, ButtonGroup } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport { useWeb3React } from '@web3-react/core';\nimport React, { useEffect } from 'react';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API } from '../constants';\nexport default function Create(props) {\n  const [tabIndex, setTabIndex] = React.useState(0);\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const [vaultAddress, setVaultAddress] = React.useState(account || '');\n  const [vaultPubPriv, setVaultPubPriv] = React.useState('Public');\n  const [vaultName, setVaultName] = React.useState('');\n  const [vaultDesc, setVaultDesc] = React.useState('');\n  const [vaultImage, setVaultImage] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [service, setService] = React.useState('');\n  const [isCovalApproved, setIsCovalApproved] = React.useState(false);\n  const [state, setState] = React.useState({\n    loaded: true,\n    private: false\n  });\n  const [hash, setHash] = React.useState(null);\n\n  const handlePrivateRadio = e => {\n    console.log('Changed Private visibility', e);\n  };\n\n  const approveCovalFlow = () => {\n    alert('Approve?');\n    setIsCovalApproved(true);\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setState({\n      loaded: false,\n      private: state.private\n    });\n    fetch(EMBLEM_API + '/mint', {\n      method: 'POST',\n      headers: {\n        Authorization: 'Basic YWRtaW46c3VwZXJzZWNyZXQ=',\n        'Content-Type': 'application/json',\n        service: service\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        fromAddress: account,\n        toAddress: vaultAddress,\n        description: vaultDesc,\n        name: vaultName,\n        image: vaultImage,\n        chainId: chainId,\n        private: state.private,\n        password: password || ''\n      })\n    }).then(async function (response) {\n      setState({\n        loaded: true,\n        private: state.private\n      });\n      let body = await response.json();\n      setHash(body.data.tx);\n    });\n  };\n\n  function previewFile() {\n    const preview = document.querySelector('img');\n    const inputelement = document.querySelector('input[type=file]'); //.files[0];\n\n    const reader = new FileReader();\n    reader.addEventListener('load', function () {\n      var _reader$result;\n\n      // convert image file to base64 string\n      if (preview) preview.src = ((_reader$result = reader.result) === null || _reader$result === void 0 ? void 0 : _reader$result.toString()) || '';\n      if (preview) setVaultImage(preview.src);\n    }, false);\n\n    if (inputelement.files) {\n      reader.readAsDataURL(inputelement.files[0]);\n    }\n  }\n\n  const [acct, setAcct] = React.useState('');\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account);\n      setVaultAddress(account);\n    }\n  }, [account, acct]);\n  return __jsx(Loader, {\n    loaded: state.loaded\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\"\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\"\n  }, __jsx(Tabs, {\n    defaultIndex: 0,\n    index: tabIndex,\n    onChange: index => setTabIndex(index)\n  }, __jsx(TabList, null, __jsx(Tab, null, \"Make\"), __jsx(Tab, null, \"My\"), __jsx(Tab, null, \"Vault\")), __jsx(TabPanels, null, __jsx(TabPanel, null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    spacing: \"2rem\",\n    flexGrow: 1,\n    justifyContent: \"center\",\n    px: \"2rem\",\n    py: \"2rem\",\n    shouldWrapChildren: true\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"owner-address\"\n  }, \"Vault Owner Address\"), __jsx(Input, {\n    type: \"text\",\n    id: \"owner-address\",\n    \"aria-describedby\": \"owner-helper-text\",\n    placeholder: \"0xdeadbeef\",\n    value: vaultAddress,\n    onChange: e => setVaultAddress(e.target.value)\n  }), __jsx(FormHelperText, {\n    id: \"owner-helper-text\"\n  }, \"What is the address of the first owner of this vault? Pro tip: When you connect a web3 wallet, this will populate automagically with your address.\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(FormControl, {\n    as: \"fieldset\",\n    isRequired: true\n  }, __jsx(FormLabel, null, \"Public or Private?\"), __jsx(RadioGroup, {\n    id: \"pubpriv\",\n    defaultValue: \"Public\",\n    onChange: e => {\n      setVaultPubPriv(e.target.value);\n      setState({\n        loaded: state.loaded,\n        private: e.target.value === 'Private'\n      });\n      console.log('Private', e.target.value === 'Private');\n    }\n  }, __jsx(Radio, {\n    value: \"Public\"\n  }, \"Public\"), __jsx(Radio, {\n    value: \"Private\"\n  }, \"Private\")), __jsx(FormHelperText, {\n    id: \"email-helper-text\"\n  }, \"Do you want people to be able to see the contents?\")), state.private ? __jsx(FormControl, null, __jsx(FormLabel, null, \"Password\"), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: e => setPassword(e.target.value),\n    \"aria-describedby\": \"password-helper-text\"\n  }), __jsx(FormHelperText, {\n    id: \"password-helper-text\"\n  }, \"This password will encrypt and decrypt the contents of this vault\")) : ''), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(Button, {\n    onClick: () => setTabIndex(1)\n  }, \"Next\")))), __jsx(TabPanel, null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    spacing: \"2rem\",\n    flexGrow: 1,\n    justifyContent: \"center\",\n    px: \"2rem\",\n    py: \"2rem\",\n    shouldWrapChildren: true\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"vault-name\"\n  }, \"Vault Name\"), __jsx(Input, {\n    type: \"text\",\n    id: \"vault-name\",\n    \"aria-describedby\": \"vault-name-text\",\n    value: vaultName,\n    onChange: e => setVaultName(e.target.value)\n  }), __jsx(FormHelperText, {\n    id: \"vault-name-text\"\n  }, \"Give it some love so you can find it later.\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"vault-desc\"\n  }, \"Vault Description\"), __jsx(Textarea, {\n    id: \"vault-desc\",\n    size: \"lg\",\n    \"aria-describedby\": \"vault-desc-text\",\n    value: vaultDesc,\n    onChange: e => setVaultDesc(e.target.value)\n  }), __jsx(FormHelperText, {\n    id: \"vault-desc-text\"\n  }, \"Want to add some fluffy text to tell people what the point is?\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(ButtonGroup, {\n    spacing: 4\n  }, __jsx(Button, {\n    onClick: () => setTabIndex(0)\n  }, \"Back\"), __jsx(Button, {\n    onClick: () => setTabIndex(2)\n  }, \"Next\"))))), __jsx(TabPanel, null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    spacing: \"2rem\",\n    flexGrow: 1,\n    justifyContent: \"center\",\n    px: \"2rem\",\n    py: \"2rem\",\n    shouldWrapChildren: true\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(FormControl, null, __jsx(FormLabel, {\n    htmlFor: \"vault-img\"\n  }, \"Vault Image\"), __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    p: 1,\n    rounded: \"lg\",\n    overflow: \"hidden\"\n  }, __jsx(\"input\", {\n    type: \"file\",\n    onChange: () => previewFile()\n  }), __jsx(\"br\", null), __jsx(\"img\", {\n    src: \"\",\n    width: \"200\",\n    alt: \"Image preview...\"\n  })))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(FormControl, null, __jsx(FormLabel, {\n    htmlFor: \"service\"\n  }, \"Password:\"), __jsx(Input, {\n    type: \"password\",\n    id: \"service\",\n    \"aria-describedby\": \"service\",\n    onChange: e => setService(e.target.value)\n  }))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(ButtonGroup, {\n    spacing: 4\n  }, __jsx(Button, {\n    onClick: () => setTabIndex(1)\n  }, \"Back\"), !account ? __jsx(Button, {\n    isDisabled: true,\n    onClick: handleSubmit,\n    type: \"submit\"\n  }, \"No Wallet Connected!\") : !vaultAddress || !vaultName || !vaultDesc ? __jsx(Button, {\n    isDisabled: true,\n    onClick: handleSubmit,\n    type: \"submit\"\n  }, \"Missing Fields!\") : !service ? __jsx(Button, {\n    isDisabled: true,\n    onClick: handleSubmit,\n    type: \"submit\"\n  }, \"Creation Password?\") : !isCovalApproved ? __jsx(Button, {\n    onClick: approveCovalFlow,\n    type: \"submit\"\n  }, \"Approve Coval\") : __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"submit\"\n  }, \"DO IT!\"))))))))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      location.href = location.origin + '/vaultlist';\n    }\n  }) : '');\n}","map":null,"metadata":{},"sourceType":"module"}