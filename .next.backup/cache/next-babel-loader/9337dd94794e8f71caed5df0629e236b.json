{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Stack, Button } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { TransactionToast } from './TransactionToast';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { VStack, Divider } from '@chakra-ui/react';\nimport { contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport { Contract } from '@ethersproject/contracts';\nexport default function Admin() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: true\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(true);\n  const {\n    0: refreshing,\n    1: setRefreshing\n  } = useState(true);\n  const {\n    0: stats,\n    1: setStats\n  } = useState([]);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address || null);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(0);\n  const {\n    0: limit,\n    1: setLimit\n  } = useState(10);\n  const {\n    0: shouldFetchData,\n    1: setShouldFetchData\n  } = useState(address ? true : false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: buttonDisabled,\n    1: setButtonDisabled\n  } = useState(false);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: factories,\n    1: setFactories\n  } = useState([]);\n  const {\n    0: clones,\n    1: setClones\n  } = useState([]);\n  const handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  // useEffect(() => {\n  //   if (state.loaded == false && !loadingApi && address) {\n  //     setLoadingApi(false)\n  //     // getPnL()\n  //   }\n  // }, [])\n  // useEffect(() => {\n  //   if (shouldFetchData && address) {\n  //     console.log(\"Should load api after setting consts\", offset)\n  //     setShouldFetchData(false)\n  //     // getPnL()\n  //   } else {\n  //     console.log(\"wtf\")\n  //   }\n  // }, [shouldFetchData, offset])\n  // const fetchDataForLazyLoad = async () =>{    \n  //   console.log('setting new offset to', offset+limit)\n  //   setOffset(offset+limit)\n  //   setShouldFetchData(true)\n  // }\n  useEffect(() => {\n    if (loadingApi && refreshing) {\n      // alert(0)\n      GetContracts();\n    }\n  });\n\n  const StartRefresh = async () => {\n    setRefreshing(true);\n    setLoadingApi(true);\n  };\n\n  async function createClone(cloneType) {\n    let factory = factories.filter(factory => {\n      return factory.type == cloneType;\n    })[0];\n    let factoryContract = getFactoryContract(factory.address);\n    factoryContract.createClone(account).then(({\n      hash\n    }) => {\n      console.log(\"hash\", hash);\n      setHash(hash);\n    });\n  }\n\n  async function GetContracts() {\n    setLoadingApi(false);\n    getClones();\n    let factories = await handlerContract.getAllRegisteredContractsOfType(8);\n    let factoryInfo = await getFactoryInto(factories, 0, []);\n    setFactories(factoryInfo);\n    setRefreshing(false);\n    setState({\n      loaded: true\n    });\n  }\n\n  async function getFactoryInto(factories, index, values) {\n    let factory = factories[index];\n    let factoryContract = getFactoryContract(factory);\n    let factoryType = await factoryContract.factoryType();\n    let factoryClones = await factoryContract.getClones();\n    let factoryOwner = await factoryContract.owner();\n    let detailedClones = await getCloneInto(factoryClones, 0, factoryType, []);\n    values.push({\n      type: factoryType,\n      address: factory,\n      clones: detailedClones,\n      owner: factoryOwner\n    });\n\n    if (index + 1 == factories.length) {\n      return values;\n    } else {\n      return getFactoryInto(factories, index + 1, values);\n    }\n  }\n\n  async function getClones() {\n    let erc1155 = await handlerContract.getAllRegisteredContractsOfType(1);\n    console.log(\"---------\", erc1155, erc1155.length);\n    erc1155 = await getCloneInto(erc1155, 0, \"ERC1155\", []);\n    let erc721 = await handlerContract.getAllRegisteredContractsOfType(2);\n    erc721 = await getCloneInto(erc721, 0, \"ERC721\", []);\n    let erc20 = await handlerContract.getAllRegisteredContractsOfType(4);\n    erc20 = await getCloneInto(erc20, 0, \"ERC20\", []);\n    setClones(erc1155.concat(erc721).concat(erc20));\n  }\n\n  async function getCloneInto(_clones, index, cloneType, values) {\n    if (_clones.length == 0) return values;\n    let clone = _clones[index];\n    let cloneContract = getCloneContract(clone, cloneType);\n    let cloneOwner = await cloneContract.owner();\n    let cloneName = await cloneContract.name();\n    let decimals = cloneType == \"ERC20\" ? await cloneContract.decimals() : 0;\n    let cloneBalance = cloneType == \"ERC20\" ? calculateBalance((await cloneContract.balanceOf(account)).toNumber(), decimals) : cloneType == \"ERC1155\" ? await getERC1155TokenBalance(cloneContract, account) : 0;\n    values.push({\n      address: clone,\n      owner: cloneOwner,\n      name: cloneName,\n      type: cloneType,\n      balance: cloneBalance,\n      decimals: decimals\n    });\n\n    if (index + 1 == _clones.length) {\n      return values;\n    } else {\n      return getCloneInto(_clones, index + 1, cloneType, values);\n    }\n  }\n\n  async function getERC1155TokenBalance(contract, address) {\n    alert(0);\n    let ids = await contract.getTokenIds();\n    let myIds = getMyBalanceByIds(ids, 0, contract, address, []);\n\n    async function getMyBalanceByIds(tokenIds, index, contract, address, values) {\n      let id = tokenIds[index];\n      let tokenBalance = await contract.balanceOf(address, id.toNumber());\n\n      if (tokenBalance.toNumber() > 0) {\n        alert(id.toNumber());\n        alert(tokenBalance.toNumber());\n      }\n\n      if (index + 1 == tokenIds.length) {\n        return values;\n      } else {\n        return getMyBalanceByIds(tokenIds, index + 1, contract, address, values);\n      }\n    }\n\n    console.log(\"ids\", ids);\n    return ids.length;\n  }\n\n  function getCloneContract(address, cloneType) {\n    let abi;\n\n    switch (cloneType) {\n      case \"ERC20\":\n        abi = contractAddresses.erc20Abi;\n        break;\n\n      case \"ERC721\":\n        abi = contractAddresses.erc721Abi;\n        break;\n\n      case \"ERC1155\":\n        abi = contractAddresses.erc1155Abi;\n        break;\n    }\n\n    return new Contract(address, abi, library.getSigner(account).connectUnchecked());\n  }\n\n  function getFactoryContract(address) {\n    return new Contract(address, contractAddresses.clonableFactoryAbi, library.getSigner(account).connectUnchecked());\n  }\n\n  function calculateBalance(balance, decimals) {\n    return balance / Math.pow(10, parseInt(decimals));\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 5\n    }\n  }, refreshing ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    w: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: StartRefresh,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }, \"Refresh Data\"), clones.length > 0 ? clones.map((clone, index) => {\n    return __jsx(VStack, {\n      key: \"factory-\" + index,\n      p: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 15\n      }\n    }, __jsx(Box, {\n      w: \"100%\",\n      \"min-width\": \"40px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }, __jsx(Text, {\n      key: clone.address,\n      ml: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 19\n      }\n    }, clone.owner == account ? \"Owned\" : null, \" \", clone.type, \" : \", clone.address, \" \"), __jsx(Divider, {\n      orientation: \"horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 19\n      }\n    }), __jsx(Text, {\n      key: clone.name + index,\n      ml: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 19\n      }\n    }, \"Name: \", clone.name || \"Not Named\"), __jsx(Divider, {\n      orientation: \"horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 19\n      }\n    }), __jsx(Text, {\n      key: clone.balance + index,\n      ml: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 19\n      }\n    }, \"Balance: \", clone.balance)));\n  }) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      setHash(null);\n      StartRefresh();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }) : null, \"(\", __jsx(VStack, {\n    p: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    w: \"100%\",\n    \"min-width\": \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    w: 300,\n    m: 2,\n    onClick: () => {\n      createClone(\"ERC20\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 15\n    }\n  }, \"Create ERC20\"), __jsx(Divider, {\n    orientation: \"horizontal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 15\n    }\n  }), __jsx(Button, {\n    w: 300,\n    m: 2,\n    onClick: () => {\n      createClone(\"ERC721\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 15\n    }\n  }, \"Create ERC721\"), __jsx(Divider, {\n    orientation: \"horizontal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 15\n    }\n  }), __jsx(Button, {\n    w: 300,\n    m: 2,\n    onClick: () => {\n      createClone(\"ERC1155\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 15\n    }\n  }, \"Create ERC1155\"))), \")\")));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx"],"names":["Box","Flex","Text","Stack","Button","Loader","Refreshing","useRouter","TransactionToast","useWeb3React","useEffect","useState","VStack","Divider","contractAddresses","useContract","Contract","Admin","query","account","chainId","library","state","setState","loaded","loadingApi","setLoadingApi","refreshing","setRefreshing","stats","setStats","address","setAddress","offset","setOffset","limit","setLimit","shouldFetchData","setShouldFetchData","hasMore","setHasMore","buttonDisabled","setButtonDisabled","hash","setHash","factories","setFactories","clones","setClones","handlerContract","vaultHandlerV8","vaultHandlerV8Abi","GetContracts","StartRefresh","createClone","cloneType","factory","filter","type","factoryContract","getFactoryContract","then","console","log","getClones","getAllRegisteredContractsOfType","factoryInfo","getFactoryInto","index","values","factoryType","factoryClones","factoryOwner","owner","detailedClones","getCloneInto","push","length","erc1155","erc721","erc20","concat","_clones","clone","cloneContract","getCloneContract","cloneOwner","cloneName","name","decimals","cloneBalance","calculateBalance","balanceOf","toNumber","getERC1155TokenBalance","balance","contract","alert","ids","getTokenIds","myIds","getMyBalanceByIds","tokenIds","id","tokenBalance","abi","erc20Abi","erc721Abi","erc1155Abi","getSigner","connectUnchecked","clonableFactoryAbi","Math","pow","parseInt","map"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { TransactionToast } from './TransactionToast'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport {HStack, VStack, Circle, Divider } from '@chakra-ui/react'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\n\nimport { Contract } from '@ethersproject/contracts'\n\nexport default function Admin() {\n  const { query } = useRouter()\n  const { account, chainId, library } = useWeb3React()\n  const [state, setState] = useState({ loaded: true })\n  const [loadingApi, setLoadingApi] = useState(true)\n  const [refreshing, setRefreshing] = useState(true)\n  const [stats, setStats] = useState([])\n  const [address, setAddress] = useState(query.address || null)\n  const [offset, setOffset] = useState(0)\n  const [limit, setLimit] = useState(10)\n  const [shouldFetchData, setShouldFetchData] = useState(address? true: false)\n  const [hasMore, setHasMore] = useState(true)\n  const [buttonDisabled, setButtonDisabled] = useState(false)\n\n  const [hash, setHash] = useState(null)\n  const [factories, setFactories] = useState([])\n  const [clones, setClones] = useState([])\n\n  const handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  // useEffect(() => {\n  //   if (state.loaded == false && !loadingApi && address) {\n  //     setLoadingApi(false)\n  //     // getPnL()\n  //   }\n  // }, [])\n\n  // useEffect(() => {\n  //   if (shouldFetchData && address) {\n  //     console.log(\"Should load api after setting consts\", offset)\n  //     setShouldFetchData(false)\n  //     // getPnL()\n  //   } else {\n  //     console.log(\"wtf\")\n  //   }\n  // }, [shouldFetchData, offset])\n\n  // const fetchDataForLazyLoad = async () =>{    \n  //   console.log('setting new offset to', offset+limit)\n  //   setOffset(offset+limit)\n  //   setShouldFetchData(true)\n  // }\n\n    useEffect(() => {\n      if (loadingApi && refreshing) {\n        // alert(0)\n        GetContracts()\n      }\n    })\n\n  const StartRefresh = async()=>{\n    setRefreshing(true)\n    setLoadingApi(true)\n  }\n\n  async function createClone(cloneType) {\n    let factory = factories.filter(factory=>{ return factory.type == cloneType})[0]\n    let factoryContract = getFactoryContract(factory.address)\n    factoryContract.createClone(account).then(({ hash }: { hash: string }) => {\n      console.log(\"hash\", hash)\n      setHash(hash)\n    })\n  }\n\n  async function GetContracts() {\n    setLoadingApi(false)\n    getClones()\n    let factories = await handlerContract.getAllRegisteredContractsOfType(8)\n    let factoryInfo = await getFactoryInto(factories, 0, [])\n    setFactories(factoryInfo)\n    setRefreshing(false)\n    setState({loaded: true})\n  }\n\n  async function getFactoryInto(factories, index, values) {\n    let factory = factories[index]\n    let factoryContract = getFactoryContract(factory)\n    let factoryType = await factoryContract.factoryType()\n    let factoryClones = await factoryContract.getClones()\n    let factoryOwner = await factoryContract.owner()\n    let detailedClones = await getCloneInto(factoryClones, 0, factoryType, [])\n    \n    values.push({type: factoryType, address: factory, clones: detailedClones, owner: factoryOwner})\n\n    if (index+1 == factories.length) {\n      return values\n    } else {\n      return getFactoryInto(factories, index +1, values)\n    }\n  }\n\n  async function getClones() {\n    let erc1155 = await handlerContract.getAllRegisteredContractsOfType(1)\n    console.log(\"---------\", erc1155, erc1155.length)\n    erc1155 = await getCloneInto(erc1155, 0, \"ERC1155\", [])\n    let erc721 = await handlerContract.getAllRegisteredContractsOfType(2)\n    erc721 = await getCloneInto(erc721, 0, \"ERC721\", [])\n    let erc20 = await handlerContract.getAllRegisteredContractsOfType(4)\n    erc20 = await getCloneInto(erc20, 0, \"ERC20\", [])\n    setClones(erc1155.concat(erc721).concat(erc20))\n  }\n\n  async function getCloneInto(_clones, index, cloneType, values) {\n    if (_clones.length == 0) return values\n    let clone = _clones[index]\n    let cloneContract = getCloneContract(clone, cloneType)\n    let cloneOwner = await cloneContract.owner()\n    let cloneName = await cloneContract.name()\n    let decimals = cloneType == \"ERC20\"?  await cloneContract.decimals() : 0\n    let cloneBalance = cloneType == \"ERC20\"?  calculateBalance((await cloneContract.balanceOf(account)).toNumber(), decimals) : cloneType == \"ERC1155\" ? await getERC1155TokenBalance(cloneContract, account) : 0\n\n    values.push({address: clone, owner: cloneOwner, name: cloneName, type: cloneType, balance: cloneBalance, decimals: decimals})\n\n    if (index+1 == _clones.length) {\n      return values\n    } else {\n      return getCloneInto(_clones, index +1, cloneType, values)\n    }\n  }\n\n  async function getERC1155TokenBalance(contract, address) {\n    alert(0)\n    let ids = await contract.getTokenIds()\n    let myIds = getMyBalanceByIds(ids, 0, contract, address, [])\n\n  async function getMyBalanceByIds(tokenIds, index, contract, address, values) {\n      let id = tokenIds[index]\n      let tokenBalance = await contract.balanceOf(address, id.toNumber())\n      if (tokenBalance.toNumber() > 0) {\n        alert(id.toNumber())\n        alert(tokenBalance.toNumber())\n      }\n      if (index+1 == tokenIds.length) {\n        return values\n      } else {\n        return getMyBalanceByIds(tokenIds, index +1, contract, address, values)\n      }\n    }\n    console.log(\"ids\", ids)\n    return ids.length\n  }\n\n  function getCloneContract(address, cloneType) {\n    let abi\n    switch(cloneType) {\n      case \"ERC20\":\n        abi = contractAddresses.erc20Abi\n        break;\n      case \"ERC721\":\n        abi = contractAddresses.erc721Abi\n        break;\n      case \"ERC1155\":\n        abi = contractAddresses.erc1155Abi\n        break;\n    }\n    return new Contract(address, abi, library.getSigner(account).connectUnchecked())\n  }\n\n  function getFactoryContract(address) {\n    return new Contract(address, contractAddresses.clonableFactoryAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  function calculateBalance(balance: number, decimals: string) {\n    return balance / Math.pow(10, parseInt(decimals))\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      {refreshing ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Stack align=\"center\" w={\"100%\"}>\n        \n        <Button onClick={StartRefresh}>Refresh Data</Button>\n\n        {/* {factories.length > 0? (\n          factories.map((factory, index)=>{\n            return (\n              <VStack key={\"factory-\"+index} p={2} >\n                <Box w=\"100%\" min-width=\"40px\">     \n                  <Text w=\"100%\">{factory.owner == account? \"Owned\": null} {factory.type} Factory: {factory.address}</Text>\n                  {factory.clones.map( (clone, index)=>{\n                      return (\n                        <>\n                          <Text key={clone.address} ml={12}>{clone.owner == account? \"Owned\": null} {factory.type} : {clone.address} </Text>\n                          <Divider orientation=\"horizontal\" />\n                          <Text key={clone.name + index} ml={12}>Name: {clone.name || \"Not Named\"}</Text>\n                        </>\n                      )\n                    }\n                  )}\n                  <Divider orientation=\"horizontal\" />\n                </Box>\n              </VStack>\n            )\n          })\n        ) : null}  */}\n        \n        { clones.length > 0? (\n          clones.map((clone, index)=>{\n            return (\n              <VStack key={\"factory-\"+index} p={2} >\n                <Box w=\"100%\" min-width=\"40px\">  \n                  <Text key={clone.address} ml={12}>{clone.owner == account? \"Owned\": null} {clone.type} : {clone.address} </Text>\n                  <Divider orientation=\"horizontal\" />\n                  <Text key={clone.name + index} ml={12}>Name: {clone.name || \"Not Named\"}</Text>\n                  <Divider orientation=\"horizontal\" />\n                  <Text key={clone.balance + index} ml={12}>Balance: {clone.balance}</Text>\n                </Box>\n              </VStack>\n            )\n          })\n        ) : null } \n        { hash? (\n          <TransactionToast\n          hash={hash}\n          onComplete={() => {\n            setHash(null)\n            StartRefresh()          \n          }}\n        />\n        ) : null}\n        (\n          <VStack p={2} >\n            <Box w=\"100%\" min-width=\"40px\">\n              <Button w={300} m={2} onClick={()=>{createClone(\"ERC20\")}}>Create ERC20</Button>\n              <Divider orientation=\"horizontal\" />\n              <Button w={300} m={2} onClick={()=>{createClone(\"ERC721\")}}>Create ERC721</Button>\n              <Divider orientation=\"horizontal\" />\n              <Button w={300} m={2} onClick={()=>{createClone(\"ERC1155\")}}>Create ERC1155</Button>\n            </Box>\n          </VStack>\n        )\n        \n        \n       </Stack>\n      </Flex>\n     \n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}