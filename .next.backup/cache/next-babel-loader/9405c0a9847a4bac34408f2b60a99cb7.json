{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Suspense } from 'react';\nimport { Button, Text, IconButton, useColorMode } from '@chakra-ui/core';\nimport { useWeb3React } from '@web3-react/core';\nimport { formatEtherscanLink, ExplorerTXType } from '../utils';\nimport { BG } from '../constants';\nimport { useTokenBalance } from '../data';\nimport TokenLogo from './TokenLogo';\nimport ErrorBoundary from './ErrorBoundary';\nimport { useShowUSD } from '../context';\nimport { useUSDTokenPrice } from '../hooks';\n\nfunction Balance({\n  token\n}) {\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    data\n  } = useTokenBalance(token, account, true);\n  const [showUSD] = useShowUSD();\n  const USDTokenPrice = useUSDTokenPrice(token);\n  return __jsx(Button, _extends({\n    as: \"a\",\n    rightIcon: \"external-link\",\n    variant: \"outline\",\n    backgroundColor: BG[colorMode]\n  }, {\n    href: formatEtherscanLink(ExplorerTXType.TokenBalance, [token, account]),\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }), __jsx(TokenLogo, {\n    token: token,\n    size: \"1.5rem\"\n  }), __jsx(Text, {\n    ml: \"0.5rem\"\n  }, showUSD && USDTokenPrice ? `$${data.multiply(USDTokenPrice).toFixed(2, {\n    groupSeparator: ','\n  })}` : data.toSignificant(6, {\n    groupSeparator: ','\n  })));\n}\n\nexport default function TokenBalance({\n  token\n}) {\n  const {\n    colorMode\n  } = useColorMode();\n  return __jsx(ErrorBoundary, {\n    fallback: __jsx(IconButton, {\n      variant: \"outline\",\n      backgroundColor: BG[colorMode],\n      icon: \"warning\",\n      \"aria-label\": \"Failed\",\n      isDisabled: true,\n      cursor: \"default !important\",\n      _hover: {},\n      _active: {}\n    })\n  }, __jsx(Suspense, {\n    fallback: __jsx(Button, {\n      variant: \"outline\",\n      backgroundColor: BG[colorMode],\n      isLoading: true,\n      cursor: \"default !important\",\n      _hover: {},\n      _active: {}\n    }, null)\n  }, __jsx(Balance, {\n    token: token\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}