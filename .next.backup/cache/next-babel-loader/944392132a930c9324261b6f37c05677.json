{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure, Collapse, FormLabel, useColorMode, Tabs, TabList, Tab, TabPanel, TabPanels } from '@chakra-ui/core';\nimport { HStack } from '@chakra-ui/react';\nimport TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport dynamic from 'next/dynamic';\nimport { isETHAddress } from '../utils';\nimport { Contract } from '@ethersproject/contracts';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport CryptoJS from 'crypto-js';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nimport NFTSlideshow from './embed/NFTSlideshow';\nimport CoinBalance from './partials/CoinBalance';\nimport Attributes from './partials/Attributes';\nimport Listings from './partials/Listings';\nconst AddrModal = dynamic(() => import('./AddrModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./AddrModal')],\n    modules: ['./AddrModal']\n  }\n});\nconst KeysModal = dynamic(() => import('./KeysModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./KeysModal')],\n    modules: ['./KeysModal']\n  }\n});\nconst OfferModal = dynamic(() => import('./OfferModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./OfferModal')],\n    modules: ['./OfferModal']\n  }\n});\nexport default function Nft() {\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    query\n  } = useRouter();\n  const {\n    0: clearCache,\n    1: setCache\n  } = useState(query.cc == 't');\n  const {\n    0: approved,\n    1: setApproved\n  } = useState(false);\n  const {\n    0: useOldMint,\n    1: setUseOldMint\n  } = useState(query.useOldMint);\n  const {\n    0: mintPassword,\n    1: setMintPassword\n  } = useState(query.key);\n  const {\n    0: showOffer,\n    1: setShowOffer\n  } = useState(query.offer || false);\n  const {\n    0: framed,\n    1: setFramed\n  } = useState(query.framed || true);\n  const {\n    0: tokenId,\n    1: setTokenId\n  } = useState(query.id);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    0: noLayout,\n    1: setNoLayout\n  } = useState(query.noLayout);\n  const {\n    0: slideshowOnly,\n    1: setSlideshowOnly\n  } = useState(query.slideshowOnly || false);\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState('');\n  const {\n    0: vaultIPFS,\n    1: setVaultIPFS\n  } = useState('');\n  const {\n    0: vaultImageIPFS,\n    1: setVaultImageIPFS\n  } = useState('');\n  const {\n    0: vaultCiphertextV2,\n    1: setVaultCiphertextV2\n  } = useState('');\n  const {\n    0: vaultDesc,\n    1: setVaultDesc\n  } = useState('');\n  const {\n    0: vaultImage,\n    1: setVaultImage\n  } = useState('');\n  const {\n    0: ownedImage,\n    1: setOwnedImage\n  } = useState('');\n  const {\n    0: vaultValues,\n    1: setVaultValues\n  } = useState([]);\n  const {\n    0: loadedValues,\n    1: setLoadedValues\n  } = useState(false);\n  const {\n    0: vaultDataValues,\n    1: setVaultDataValues\n  } = useState([]);\n  const {\n    0: attributes,\n    1: setAttributes\n  } = useState([]);\n  const {\n    0: vaultAddresses,\n    1: setVaultAddresses\n  } = useState([]);\n  const {\n    0: vaultPrivacy,\n    1: setVaultPrivacy\n  } = useState(false);\n  const {\n    0: vaultTotalValue,\n    1: setVaultTotalValue\n  } = useState(0);\n  const {\n    0: vaultChainId,\n    1: setVaultChainId\n  } = useState(null);\n  const {\n    0: vaultChain,\n    1: setVaultChain\n  } = useState(null);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: currCoin,\n    1: setCurrCoin\n  } = useState('');\n  const {\n    0: currAddr,\n    1: setCurrAddr\n  } = useState('');\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: mine,\n    1: setMine\n  } = useState(false);\n  const {\n    0: claiming,\n    1: setClaiming\n  } = useState(false);\n  const {\n    0: status,\n    1: setStatus\n  } = useState('claimed');\n  const {\n    0: sealed,\n    1: setSealed\n  } = useState(false);\n  const {\n    0: claimedBy,\n    1: setClaimedBy\n  } = useState(null);\n  const {\n    0: mnemonic,\n    1: setMnemonic\n  } = useState('');\n  const {\n    0: privKeyBTC,\n    1: setPrivKeyBTC\n  } = useState('');\n  const {\n    0: privKeyETH,\n    1: setPrivKeyETH\n  } = useState('');\n  const {\n    0: privValues,\n    1: setKeyValues\n  } = useState([]);\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: decryptedEffect,\n    1: setDecryptedEffect\n  } = useState('');\n  const {\n    0: decryptedEffectRunning,\n    1: setDecryptedEffectRunning\n  } = useState(false);\n  const {\n    0: decryptPassword,\n    1: setDecryptPassword\n  } = useState('');\n  const {\n    0: invalidVault,\n    1: setInvalidVault\n  } = useState(false);\n  const {\n    0: hasCheckedNft,\n    1: setHasCheckedNft\n  } = useState(false);\n  const {\n    0: accepting,\n    1: setAccepting\n  } = useState(false);\n  const {\n    0: approving,\n    1: setApproving\n  } = useState(false);\n  const {\n    0: acceptable,\n    1: setAcceptable\n  } = useState(false);\n  const {\n    0: transferPassword,\n    1: setTransferPassword\n  } = useState('');\n  const {\n    0: showTransferPassword,\n    1: setShowTransferPassword\n  } = useState(false);\n  const {\n    0: preTransfering,\n    1: setPreTransfering\n  } = useState(false);\n  const {\n    0: transferToAddress,\n    1: setTransferToAddress\n  } = useState(null);\n  const {\n    0: transfering,\n    1: setTransfering\n  } = useState(false);\n  const {\n    0: owner,\n    1: setOwner\n  } = useState(null);\n  const {\n    0: torus,\n    1: setTorus\n  } = useState(initTorus());\n  const {\n    0: live,\n    1: setLive\n  } = useState(false);\n  const {\n    0: nonce,\n    1: setNonce\n  } = useState(null);\n  const {\n    0: mintSignature,\n    1: setMintSignature\n  } = useState(null);\n  const {\n    0: to,\n    1: setTo\n  } = useState(null);\n  const {\n    0: showVerifyingSignature,\n    1: setShowVerifyingSignature\n  } = useState(false);\n  const {\n    0: showMakingVaultMsg,\n    1: setShowMakingVaultMsg\n  } = useState(false);\n  const {\n    0: minting,\n    1: setMinting\n  } = useState(false);\n  const {\n    0: isCrowdSale,\n    1: setIsCrowdSale\n  } = useState(false);\n  const {\n    0: alternateContractAddress,\n    1: setAlternateContractAddress\n  } = useState(null);\n  const {\n    0: targetAsset,\n    1: setTargetAsset\n  } = useState({\n    name: '',\n    image: '',\n    metadata: ''\n  });\n  const {\n    0: targetContract,\n    1: setTargetContract\n  } = useState({\n    name: '',\n    chain: '',\n    4: '',\n    1: '',\n    tokenId: {},\n    serialNumber: {\n      'hex': ''\n    }\n  });\n  const {\n    0: listings,\n    1: setListings\n  } = useState([]); // const [transferImage, setTransferImage] = useState('')\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  const vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  let emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  const {\n    isOpen: isOpenAddrModal,\n    onOpen: onOpenAddrModal,\n    onClose: onCloseAddrModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenKeysModal,\n    onOpen: onOpenKeysModal,\n    onClose: onCloseKeysModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenOfferModal,\n    onOpen: onOpenOfferModal,\n    onClose: onCloseOfferModal\n  } = useDisclosure();\n  const {\n    isOpen,\n    onToggle\n  } = useDisclosure();\n  const {\n    isOpen: isManageAddressOpen,\n    onToggle: onManageAddressToggle\n  } = useDisclosure();\n  const {\n    colorMode\n  } = useColorMode();\n  let transak;\n  let transferImage;\n\n  const getListings = async () => {\n    const options = {\n      method: 'GET',\n      headers: {\n        accept: '*/*',\n        'x-api-key': 'demo-api-key'\n      }\n    };\n    const response = await fetch('https://api.reservoir.tools/orders/asks/v3?token=0x82c7a8f707110f5fbb16184a5933e9f78a34c6ab%3A' + tokenId + '&includePrivate=false&includeMetadata=false&includeRawData=false&sortBy=createdAt&limit=50', options);\n    const jsonData = await response.json();\n\n    if (jsonData.orders) {\n      console.log('---------------- orders', jsonData);\n      setListings(jsonData.orders); // return cb(jsonData)\n    } else {// return cb(false)\n    }\n  };\n\n  async function initTorus() {\n    let _torus = new TorusSdk({\n      baseUrl: `${window.location.origin}/serviceworker`,\n      enableLogging: true,\n      network: \"testnet\" // details for test net\n\n    });\n\n    await _torus.init({\n      skipSw: true,\n      skipInit: true,\n      skipPrefetch: true\n    });\n    console.log(\"Initialized Torus\");\n    return _torus;\n  }\n\n  const getVaultContract = (address = null) => {\n    //return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked());\n  };\n\n  const getCuratedContract = (address = null) => {\n    return new Contract(address, contractAddresses.erc1155Abi, library.getSigner(account).connectUnchecked());\n  };\n\n  const checkLiveliness = (tokenId, cb) => {\n    fetch(EMBLEM_API + '/liveliness', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        tokenId: tokenId\n      })\n    }).then(async function (response) {\n      let data = await response.json();\n      setLive(data.live);\n      console.log(\"Liveliness check\", data);\n    });\n    return cb();\n  };\n\n  const transferVault = () => {\n    setTransfering(true);\n    emblemContract.transferFrom(account, transferToAddress, tokenId).then(({\n      hash\n    }) => {\n      setHash(hash);\n    }).catch(error => {});\n  };\n\n  const lazyMint = () => {\n    library.getSigner(account).signMessage('Delayed Minting: ' + tokenId).then(signature => {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + '/lazyMint', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        console.log(\"data\", data.data);\n        setMintSignature(data.data.signature);\n        setNonce(data.data.nonce);\n        setShowVerifyingSignature(true); // setCreating(true)\n\n        setTimeout(() => {\n          delayedMint();\n        }, 500);\n      });\n    });\n  };\n\n  const delayedMint = () => {\n    // setCreating(true)\n    console.log(\"Delayed Minting\");\n    setShowVerifyingSignature(false);\n    setShowMakingVaultMsg(true);\n    setMinting(true);\n    let cipherTextHash = vaultAddresses.filter(address => {\n      return address.coin == \"ETH\";\n    })[0].address;\n    console.log(\"--------------------------------------------------------Delayed Minting\", account, tokenId, cipherTextHash, nonce, mintSignature);\n    handlerContract.buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature).then(({\n      hash\n    }) => {\n      setTimeout(() => {\n        setHash(hash);\n        setShowMakingVaultMsg(false);\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      console.log(\"AAAAAHHHHHH\", error.code);\n      setShowMakingVaultMsg(false); // setMinting(false)\n    });\n  };\n\n  const fireMetaMask = () => {\n    console.log(mintPassword);\n    setAccepting(true);\n    getWitness(witness => {\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;\n      handlerContract.transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature).then(({\n        hash\n      }) => {\n        setTimeout(() => {\n          setHash(hash); // setShowMakingVaultMsg(true)\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      }).catch(error => {\n        setAccepting(false);\n\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(`tx failed.`, error);\n        } else {// setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      });\n    });\n  };\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\" + transferImage);\n    setPreTransfering(true);\n    handlerContract.addPreTransfer(tokenId, \"0x\" + transferImage).then(({\n      hash\n    }) => {\n      // setTimeout(() => {\n      setHash(hash);\n      console.log(\"Set Pre Transfering True\", preTransfering); // setShowMakingVaultMsg(true)\n      // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      if (error !== null && error !== void 0 && error.code) {\n        console.log(\"Error?\");\n        setPreTransfering(false);\n        setShowTransferPassword(false);\n        setTransferPassword('');\n      } else {// setShowTransferPassword(!showTransferPassword? true : false)\n        // setPreTransfering(false)\n        // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  const handleApproveForall = () => {\n    setApproving(true);\n    emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(({\n      hash\n    }) => {\n      setTimeout(() => {\n        setHash(hash); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(`tx failed.`, error);\n      } else {\n        setApproving(false); // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  const deleteVault = () => {\n    library.getSigner(account).signMessage('Delete: ' + tokenId).then(signature => {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + '/v2/delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        location.href = location.href.split(\"/\")[0] + \"/vaults\";\n      });\n    });\n  };\n\n  const getVault = async () => {\n    console.log('getvault');\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true' + (clearCache ? '&_vercel_no_cache=1' : ''), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        cc: clearCache ? 't' : ''\n      }\n    });\n    const jsonData = await responce.json();\n\n    if (jsonData.collectionAddress) {\n      setIsCrowdSale(true);\n      setAlternateContractAddress(jsonData.collectionAddress);\n    }\n\n    if (!jsonData.name) {\n      setState({\n        loaded: true\n      });\n      setInvalidVault(true);\n    } else {\n      setStates(jsonData);\n      setLoadingApi(false);\n      setInvalidVault(false);\n    }\n\n    getListings();\n    {\n      !vaultPrivacy && !loadedValues ? getAllBalancesLive([], tokenId, v => {\n        if (v) {\n          setVaultValues(v);\n        }\n      }) : null;\n    }\n  };\n\n  const getWitness = async cb => {\n    const responce = await fetch(EMBLEM_API + '/witness/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        cc: 't',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      }\n    });\n    const jsonData = await responce.json();\n\n    if (jsonData.signature) {\n      console.log('witness', jsonData);\n      return cb(jsonData);\n    } else {\n      return cb(false);\n    }\n  };\n\n  const setStates = jsonData => {\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\" + framed : null;\n\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2);\n      console.log(\"ciphertextV2\", jsonData.ciphertextV2);\n    }\n\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setOwnedImage(jsonData.ownedImage || null);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)) : null;\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(item => {\n      return item.trait_type === \"key\";\n    })) : null;\n    jsonData.attributes ? setAttributes(jsonData.attributes) : null;\n    setVaultAddresses(jsonData.addresses);\n    setVaultIPFS(jsonData.ipfs || null);\n    setVaultImageIPFS(jsonData.image_ipfs || null);\n    jsonData.targetAsset ? setTargetAsset(jsonData.targetAsset) : null;\n    jsonData.targetContract ? setTargetContract(jsonData.targetContract) : null;\n\n    if (jsonData.live == false) {\n      checkLiveliness(jsonData.tokenId, () => {});\n    }\n\n    setLive(jsonData.live == false ? false : true);\n    setNonce(jsonData.nonce);\n    setMintSignature(jsonData.signature);\n    setTo(jsonData.to);\n    setVaultChain(jsonData.network);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : jsonData.network == \"xdai\" ? 100 : jsonData.network == \"bsc\" ? 56 : jsonData.network == \"fantom\" ? 250 : jsonData.network == \"bitcoin\" ? 0 : jsonData.network == \"aurora\" ? 1313161554 : 97);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    } // console.log('inside getstates. mine is ', mine)\n\n\n    setState({\n      loaded: true\n    });\n    let isPvt = jsonData.addresses.filter(item => {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n\n    if (jsonData.sealed) {\n      setSealed(true);\n    } else {\n      setSealed(false);\n    }\n  };\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log('responce', responce, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    // setVaultValues([])\n    // console.log(address)\n    if (loadedValues) {\n      return cb(false);\n    }\n\n    setLoadedValues(true);\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log('responce', responce, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log('responce', responce, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const saveCache = vault => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  const loadCache = () => {\n    console.log('cache');\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  }; // const getKeys = async (signature, tokenId, cb) => {\n  //   var myHeaders = new Headers()\n  //   myHeaders.append('chainId', chainId.toString())\n  //   myHeaders.append('service', 'evmetadata')\n  //   myHeaders.append('Content-Type', 'application/json')\n  //   var raw = JSON.stringify({ signature: signature })\n  //   const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n  //     method: 'POST',\n  //     headers: myHeaders,\n  //     body: raw,\n  //     redirect: 'follow',\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log('getKeys response is ', jsonData)\n  //   return cb(jsonData)\n  // }\n\n\n  const getSignedJWT = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainid', chainId.toString());\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature,\n      tokenId: tokenId\n    });\n    const responce = await fetch('https://tor-us-signer.vercel.app/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  };\n\n  const getRemoteKey = async (tokenId, token, cb) => {\n    let error = false;\n    let keys = await (await torus).getTorusKey(\"tor-us-signer-vercel\", tokenId, {\n      verifier_id: tokenId\n    }, token).catch(err => {\n      error = err.message;\n    });\n\n    if (error) {\n      console.log(\"error\", error);\n      return cb(false);\n    } else {\n      return cb(keys);\n    }\n  };\n\n  const addAddress = async (signature, tokenId, coin, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature,\n      coin: coin\n    });\n    const responce = await fetch(EMBLEM_API + '/address/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  };\n\n  const decryptEmbed = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature\n    });\n    const responce = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  };\n\n  const getContractStates = async () => {\n    console.log(\"Contract states\");\n    let owned = false;\n\n    let _owner;\n\n    try {\n      if (targetContract[chainId]) {\n        console.log(\"Checking owner wth targetContract\");\n        emblemContract = getCuratedContract(targetContract[chainId]);\n        _owner = await emblemContract.getOwnerOfSerial(targetContract.serialNumber);\n        console.log(\"--------------------------- owner\", _owner, approved, account, contractAddresses.vaultHandlerV8[chainId]);\n      } else {\n        _owner = await emblemContract.ownerOf(tokenId);\n      }\n\n      finish();\n    } catch (err) {\n      _owner = \"0x0000000000000000000000000000000000000000\";\n      finish();\n    }\n\n    async function finish() {\n      let acceptable = await handlerContract.getPreTransfer(tokenId);\n      let isApproved;\n\n      if (targetContract[chainId]) {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId]);\n      } else {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n      }\n\n      setApproved(isApproved);\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\");\n      setOwner(_owner);\n      setMine(_owner === account);\n      loadPasswordFromLocalStorage();\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"mine?\", mine);\n    console.log(\"claiming?\", claiming);\n    console.log(\"accepting?\", accepting);\n    console.log(\"acceptable\", acceptable);\n  });\n\n  const hasAddress = coin => {\n    console.log(coin, vaultAddresses.filter(address => {\n      return address.coin == coin;\n    }).length > 0);\n    return vaultAddresses.filter(address => {\n      return address.coin == coin;\n    }).length > 0;\n  };\n\n  const onRenew = async name => {\n    library.getSigner(account).signMessage('Renew: ' + tokenId).then(signature => {\n      let address = vaultAddresses.filter(address => {\n        return address.coin == 'NMC';\n      })[0].address;\n      console.log('signature', signature, name);\n      fetch(EMBLEM_API + '/nmc/renew/' + address, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({\n          \"tokenId\": tokenId,\n          \"signature\": signature,\n          \"name\": name\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        console.log(\"Requested Renew\", data);\n      });\n    });\n  };\n\n  const handleSign = async () => {\n    let serialNumber;\n\n    if (targetContract[chainId]) {\n      emblemContract = getCuratedContract(targetContract[chainId]);\n      serialNumber = await emblemContract.getSerial(targetContract.tokenId, 0);\n    }\n\n    library.getSigner(account).signMessage('Claim: ' + (targetContract[chainId] ? serialNumber : tokenId)).then(signature => {\n      getSignedJWT(signature, tokenId, token => {\n        getRemoteKey(tokenId, token.token, keys => {\n          var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey);\n          let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n          setKeyValues(payload.values);\n          setMnemonic(payload.phrase);\n          vaultAddresses.forEach(address => {\n            address.key = window.phrasePathToKey(payload.phrase, address.path);\n            if (address.coin == 'BTC') setPrivKeyBTC(address.key);\n            if (address.coin == 'ETH') setPrivKeyETH(address.key);\n          }); // setKeyValues(vaultAddresses)\n\n          onOpenKeysModal();\n        });\n      }); // }\n    });\n  };\n\n  const handleHideAsset = async coin => {\n    library.getSigner(account).signMessage('HideAsset: ' + tokenId).then(signature => {\n      console.log(\"----------------------------------------------------------------\", signature);\n      console.log(coin.name, coin.coin, coin.address);\n      hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, () => {\n        console.log(\"Done hiding coin and getting new balances\");\n      });\n    });\n  };\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/' + tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin ? coin : null,\n        \"address\": address ? address : null,\n        \"name\": name ? name : null,\n        \"signature\": signature ? signature : null\n      })\n    }).then(async function (response) {\n      let data = await response.json();\n      console.log(\"-------\", data);\n      getAllBalances([], tokenId, values => {\n        setVaultValues(values);\n        return cb();\n      });\n    });\n  }\n\n  const handleAddressSign = async coin => {\n    library.getSigner(account).signMessage('Address: ' + tokenId).then(signature => {\n      addAddress(signature, tokenId, coin, result => {\n        getVault();\n      });\n    });\n  };\n\n  const handleOwnedEmbed = async () => {\n    library.getSigner(account).signMessage('Embed: ' + tokenId).then(signature => {\n      decryptEmbed(signature, tokenId, result => {\n        setVaultImage(result.ownedImage);\n      });\n    });\n  };\n\n  const handleClaim = async () => {\n    if (targetContract[chainId]) {\n      // emblemContract = getCuratedContract(targetContract[chainId])\n      // let tokenId = await emblemContract.getTokenIdForSerialNumber(targetContract.serialNumber)\n      vaultHandlerContract.claim(targetContract[chainId], targetContract.tokenId).then(({\n        hash\n      }) => {\n        setClaiming(true);\n        setTimeout(() => {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      });\n    } else {\n      emblemContract.burn(tokenId).then(({\n        hash\n      }) => {\n        setClaiming(true);\n        setTimeout(() => {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      });\n    }\n  };\n\n  const pingClaimLogs = cb => {\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId=' + chainId.toString() + '_vercel_no_cache=1', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        cc: 't'\n      }\n    }).then(async function (response) {\n      let data = await response.json();\n      console.log(\"Log check\", data);\n      return cb();\n    });\n  };\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return;\n    }\n\n    setDecryptedEffectRunning(true);\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n    var ctnt = 'Decrypting'; // Your text goes here\n\n    var speed = 5; // ms per frame\n\n    var increment = 8; // frames per step. Must be >2\n\n    var clen = ctnt.length;\n    var si = 0;\n    var stri = 0;\n    var block = '';\n    var fixed = '';\n\n    (function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i);\n        } else {\n          setDecryptedEffectRunning(false);\n        }\n\n        nextFrame(i);\n        si = si + 1;\n      }, speed);\n    })(clen * increment + 1);\n\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n        var letter = theLetters.charAt(num);\n        block = block + letter;\n      }\n\n      if (si == increment - 1) {\n        stri++;\n      }\n\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1);\n        si = 0;\n      } // $(\"#output\").html(fixed + block);\n\n\n      setDecryptedEffect(fixed + block);\n      block = '';\n    }\n  };\n\n  useEffect(() => {\n    console.log('----');\n    getVault();\n  }, []);\n  useEffect(() => {\n    account && chainId && vaultChainId && chainId == vaultChainId || query.noLayout && query.noLayout == 'true' || query.slideshowOnly && query.slideshowOnly == 'true' ? getContractStates() : null;\n  });\n\n  function splitDescription(words) {\n    var desc = words ? words.split('\\n\\n\\n\\n') : [\" \"];\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    console.log(vaultAddresses);\n    let ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      let ethAddress = vaultAddresses.filter(item => {\n        return item.coin === 'ETH';\n      })[0].address;\n      let btcAddress = vaultAddresses.filter(item => {\n        return item.coin === 'BTC';\n      })[0].address;\n      console.log(\"SUCCESS\", vaultAddresses);\n      getAllBalancesByAddress([], ethAddress, btcAddress, values => {\n        setVaultValues(values);\n      }); // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {\n      console.log('WTF', err);\n    }\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\");\n    return vaultAddresses;\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(item => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '');\n        item.address = decrypt(cipherText, key);\n      }\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  function visitOpenSeaLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + (vaultChainId == 137 ? 'matic/' : '') + (alternateContractAddress ? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) + '/' + tokenId, '_blank');\n  }\n\n  function visitLooksRareLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'looksrare.org/collections/' + (vaultChainId == 137 ? 'matic/' : '') + (alternateContractAddress ? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) + '/' + tokenId, '_blank');\n  }\n\n  {\n    alternateContractAddress ? emblemContract = getVaultContract(alternateContractAddress ? alternateContractAddress : null) : null;\n  }\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1001,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1002,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1003,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1004,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1005,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1006,\n      columnNumber: 9\n    }\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              if (localStorage.getItem(\"darkMode\") == 'false') {\n                localStorage.setItem(\"darkMode\",\"true\"); location.href = location.href\n              }\n              `\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1007,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1022,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    privValues: privValues,\n    addresses: vaultAddresses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1024,\n      columnNumber: 7\n    }\n  }), showOffer ? __jsx(OfferModal, {\n    isOpen: isOpenOfferModal,\n    onClose: onCloseOfferModal,\n    tokenId: tokenId,\n    mine: mine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1034,\n      columnNumber: 9\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1044,\n      columnNumber: 9\n    }\n  }), loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1045,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault && !slideshowOnly ? __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1047,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    className: \"NFT\",\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1048,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"blue.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1059,\n      columnNumber: 17\n    }\n  }, \"Vault Network: \", CHAIN_ID_NAMES[vaultChainId]), __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\" // textTransform=\"uppercase\"\n    ,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1088,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null), __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1101,\n      columnNumber: 17\n    }\n  }, vaultValues.length && vaultValues.filter(item => {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultImage,\n    items: vaultValues.map(value => {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1103,\n      columnNumber: 23\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1105,\n      columnNumber: 23\n    }\n  }), mine && ownedImage ? __jsx(Button, {\n    onClick: () => {\n      handleOwnedEmbed();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1109,\n      columnNumber: 21\n    }\n  }, \"(OWNED) Show Full Embed\") : null), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1112,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1113,\n      columnNumber: 19\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1114,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    fontSize: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1115,\n      columnNumber: 23\n    }\n  }, vaultChainId == chainId ? __jsx(Link, {\n    href: \"./vaults?address=\" + owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1117,\n      columnNumber: 25\n    }\n  }, \"Owner: \", owner) : null), __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1122,\n      columnNumber: 23\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1123,\n      columnNumber: 25\n    }\n  }))))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1129,\n      columnNumber: 17\n    }\n  }, __jsx(Tabs, {\n    isFitted: true,\n    variant: \"enclosed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1130,\n      columnNumber: 17\n    }\n  }, __jsx(TabList, {\n    mb: \"1em\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1131,\n      columnNumber: 19\n    }\n  }, __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1132,\n      columnNumber: 21\n    }\n  }, \"Balances\"), __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1133,\n      columnNumber: 21\n    }\n  }, \"Attributes\"), __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1134,\n      columnNumber: 21\n    }\n  }, \"Listings\")), __jsx(TabPanels, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1136,\n      columnNumber: 19\n    }\n  }, __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1137,\n      columnNumber: 21\n    }\n  }, vaultPrivacy ? __jsx(Box, {\n    mb: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1139,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1140,\n      columnNumber: 27\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: e => tryDecrypt(e.target.value),\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1143,\n      columnNumber: 27\n    }\n  })) : __jsx(Box, {\n    d: \"flex\",\n    backgroundColor: colorMode == \"light\" ? \"gray.100\" : \"gray.700\",\n    alignItems: \"baseline\",\n    className: \"coin-balance-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1151,\n      columnNumber: 25\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1152,\n      columnNumber: 27\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    mt: 2,\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1153,\n      columnNumber: 29\n    }\n  }, \"Current Contents:  \", __jsx(\"button\", {\n    onClick: () => {\n      getAllBalancesLive([], tokenId, v => {\n        setLoadedValues(false);\n        setVaultValues(v);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1155,\n      columnNumber: 50\n    }\n  }, \" [Refresh Balances]\")), __jsx(Text, {\n    as: \"p\",\n    color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1164,\n      columnNumber: 29\n    }\n  }, \"$\", Number(vaultTotalValue.toFixed(4)).toLocaleString()), vaultValues.length ? vaultValues.map(coin => {\n    return __jsx(Stack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1168,\n        columnNumber: 35\n      }\n    }, __jsx(CoinBalance, {\n      colorMode: colorMode,\n      coin: coin,\n      mine: status === 'claimed' && claimedBy === account || mine,\n      onRenew: onRenew,\n      hideAsset: handleHideAsset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1169,\n        columnNumber: 37\n      }\n    }));\n  }) : __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1173,\n      columnNumber: 34\n    }\n  }), vaultDataValues.length ? vaultDataValues.map(data => {\n    return __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1177,\n        columnNumber: 35\n      }\n    }, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1181,\n      columnNumber: 31\n    }\n  }, \"Nothing in here! Fill 'er up!\") : null))), __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1187,\n      columnNumber: 21\n    }\n  }, __jsx(Attributes, {\n    colorMode: colorMode,\n    attributes: attributes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1188,\n      columnNumber: 23\n    }\n  })), __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1190,\n      columnNumber: 21\n    }\n  }, __jsx(Listings, {\n    colorMode: colorMode,\n    listings: listings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1191,\n      columnNumber: 23\n    }\n  })))), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1197,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1198,\n      columnNumber: 23\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1199,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1200,\n      columnNumber: 27\n    }\n  }, \"Deposit Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1201,\n      columnNumber: 27\n    }\n  }, vaultAddresses.map(addr => {\n    return __jsx(Button, {\n      className: \"address_nft_button\",\n      ml: 2,\n      mt: 2,\n      \"font-weight\": \"100 !important\",\n      key: addr.address,\n      onClick: () => {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1204,\n        columnNumber: 33\n      }\n    }, addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP' : addr.coin);\n  })), (mine || status === 'claimed') && vaultAddresses.length < 10 ? __jsx(React.Fragment, null, __jsx(\"button\", {\n    className: \"nft_button\",\n    onClick: () => {\n      onManageAddressToggle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1224,\n      columnNumber: 29\n    }\n  }, \"Manage Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1227,\n      columnNumber: 29\n    }\n  }, __jsx(Collapse, {\n    isOpen: isManageAddressOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1228,\n      columnNumber: 31\n    }\n  }, !hasAddress('DOGE') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('DOGE');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1230,\n      columnNumber: 35\n    }\n  }, \"Add DOGE\") : null, !hasAddress('DGB') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('DGB');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1233,\n      columnNumber: 35\n    }\n  }, \"Add Digibyte\") : null, !hasAddress('NMC') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('NMC');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1236,\n      columnNumber: 35\n    }\n  }, \"Add Namecoin\") : null, !hasAddress('LTC') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('LTC');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1239,\n      columnNumber: 35\n    }\n  }, \"Add Litecoin\") : null, !hasAddress('MONA') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('MONA');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1242,\n      columnNumber: 35\n    }\n  }, \"Add Mona\") : null, !hasAddress('TEZOS') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('TEZOS');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1245,\n      columnNumber: 35\n    }\n  }, \"Add Tezos\") : null, !hasAddress('SOLANA') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: () => {\n      handleAddressSign('SOLANA');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1248,\n      columnNumber: 35\n    }\n  }, \"Add Solana\") : null))) : null))) : null, !(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 4 || vaultChainId === 137) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1260,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"50%\",\n    m: 5,\n    onClick: () => {\n      visitOpenSeaLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1262,\n      columnNumber: 25\n    }\n  }, \"Opensea\"), __jsx(Button, {\n    className: \"nft_button\",\n    width: \"50%\",\n    m: 5,\n    onClick: () => {\n      visitLooksRareLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1270,\n      columnNumber: 25\n    }\n  }, \"LooksRare\"), showOffer ? __jsx(Button, {\n    className: \"\",\n    onClick: () => {\n      onOpenOfferModal();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1279,\n      columnNumber: 27\n    }\n  }, mine ? 'My Offers' : 'Make an Offer', \" (NFT\\xB2NFT)\") : null) : null, !(status === 'claimed') && mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1287,\n      columnNumber: 22\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1288,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: onToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1289,\n      columnNumber: 27\n    }\n  }, \"Transfer Vault\"), __jsx(Collapse, {\n    isOpen: isOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1290,\n      columnNumber: 27\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1291,\n      columnNumber: 29\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"owner-address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1292,\n      columnNumber: 29\n    }\n  }, \"Address\"), __jsx(Input, {\n    mt: 1,\n    type: \"text\",\n    id: \"transferAddress\",\n    value: transferToAddress || '',\n    onChange: e => {\n      console.log(\"Transfer to\", e.target.value);\n      setTransferToAddress(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1293,\n      columnNumber: 31\n    }\n  })), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1305,\n      columnNumber: 29\n    }\n  }, __jsx(Button, {\n    isDisabled: !isETHAddress(transferToAddress),\n    onClick: () => {\n      onToggle();\n      transferVault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1306,\n      columnNumber: 31\n    }\n  }, \"Transfer Now\")))))) : null, mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1317,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: () => {\n      if (!approved) {\n        return handleApproveForall();\n      } else {\n        let key = CryptoJS.lib.WordArray.random(128 / 8).toString();\n        let sha = CryptoJS.SHA256(key).toString();\n        console.log('plain', key);\n        console.log('sha', sha);\n        setTransferPassword(key);\n        transferImage = sha;\n        setTimeout(() => {\n          addPreTransfer();\n        }, 500);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1318,\n      columnNumber: 23\n    }\n  }, \" \", approved ? \"Get Link (Send Vault Via Link)\" : \"Approve Gifting\", \" \"))) : null, (showTransferPassword || mintPassword) && acceptable ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1339,\n      columnNumber: 23\n    }\n  }, __jsx(Link, {\n    href: location.protocol + '//' + location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1340,\n      columnNumber: 25\n    }\n  }, \"Copy Gift Link\"), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1341,\n      columnNumber: 25\n    }\n  }, \"Password: \", transferPassword || mintPassword)) : null, acceptable && claimedBy !== account ? __jsx(React.Fragment, null, __jsx(Button, {\n    mt: 2,\n    width: \"100%\",\n    onClick: () => {\n      fireMetaMask();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1346,\n      columnNumber: 23\n    }\n  }, \"Accept\"), __jsx(Input, {\n    mt: 2,\n    type: \"password\",\n    id: \"mintPassword\",\n    minLength: 3,\n    maxLength: 200,\n    value: mintPassword || '',\n    onChange: e => {\n      console.log('grrr', e.target.value, mintPassword);\n      setMintPassword(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1347,\n      columnNumber: 23\n    }\n  })) : null, !(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1363,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      handleClaim();\n    },\n    isDisabled: claiming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1364,\n      columnNumber: 23\n    }\n  }, claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)')) // || !live && nonce && mintSignature && vaultCiphertextV2 && to == account\n  : status === 'claimed' && claimedBy === account && vaultChainId === chainId ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1376,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1377,\n      columnNumber: 23\n    }\n  }, \"Get Keys\")) : null, !live && to == account && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg ? __jsx(React.Fragment, null, useOldMint == \"true\" ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: delayedMint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1385,\n      columnNumber: 25\n    }\n  }, \"Mint Me v1\") : __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: lazyMint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1387,\n      columnNumber: 25\n    }\n  }, \"Mint Vault \")) : null, (!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: deleteVault,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1392,\n      columnNumber: 19\n    }\n  }, \"Delete Vault \") : null, showVerifyingSignature ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1395,\n      columnNumber: 19\n    }\n  }, \"Verifying Signature ...\") : null, showMakingVaultMsg ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1400,\n      columnNumber: 19\n    }\n  }, \"Minting Vault ...\") : null), vaultIPFS ? __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1406,\n      columnNumber: 19\n    }\n  }, __jsx(HStack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1407,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    target: \"new\",\n    mb: 2,\n    ml: 35,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1408,\n      columnNumber: 23\n    }\n  }, \"View Metadata on IPFS \"), vaultImageIPFS ? __jsx(Link, {\n    mb: 2,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultImageIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1410,\n      columnNumber: 25\n    }\n  }, \"View Image on IPFS \") : null)) : null, sealed ? __jsx(Box, {\n    d: \"flex\",\n    mb: 2,\n    ml: 35,\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1416,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1417,\n      columnNumber: 23\n    }\n  }, \"*This vault is sealed forever.\")) : null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1420,\n      columnNumber: 17\n    }\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1421,\n      columnNumber: 42\n    }\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1424,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1425,\n      columnNumber: 21\n    }\n  }), accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving ? \"Handling Approval Flow ...\" : transfering ? \"Transfering Vault ...\" : minting ? \"Minting Vault\" : \"Generating Gift Link ...\") : null)) : vaultValues.length > 0 && slideshowOnly ? __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1432,\n      columnNumber: 11\n    }\n  }, vaultValues.length && vaultValues.filter(item => {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultValues[0].image,\n    items: vaultValues.filter(value => {\n      return value.image !== vaultValues[0].image;\n    }).map(value => {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1434,\n      columnNumber: 17\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1436,\n      columnNumber: 17\n    }\n  })) : invalidVault ? __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1441,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1442,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1446,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1448,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      if (claiming && !accepting && !preTransfering) {\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account);\n        pingClaimLogs(() => {\n          location.href = location.origin + '/nft?id=' + tokenId + '&cc=t';\n        });\n      } else if (preTransfering) {\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        setApproving(false);\n        getVault();\n        setHash(null);\n      } else if (transfering) {\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else if (minting) {\n        checkLiveliness(tokenId, () => {\n          setMinting(false);\n          setLive(true); // setShowMakingVaultMsg(false)\n          // location.href = location.origin + '/nft?id=' + tokenId\n        });\n      } else {\n        console.log('minting', minting);\n        console.log('claiming', claiming);\n        console.log('accepting', accepting);\n        console.log('preTransfering', preTransfering);\n        console.log('approving', approving);\n        console.log(\"Unknown state\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1455,\n      columnNumber: 11\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1501,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","Link","Alert","AlertIcon","useDisclosure","Collapse","FormLabel","useColorMode","Tabs","TabList","Tab","TabPanel","TabPanels","HStack","TorusSdk","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","dynamic","isETHAddress","Contract","TransactionToast","EMBLEM_API","contractAddresses","useContract","CHAIN_ID_NAMES","CryptoJS","ReactMarkdown","gfm","Embed","NFTSlideshow","CoinBalance","Attributes","Listings","AddrModal","KeysModal","OfferModal","Nft","account","chainId","library","query","clearCache","setCache","cc","approved","setApproved","useOldMint","setUseOldMint","mintPassword","setMintPassword","key","showOffer","setShowOffer","offer","framed","setFramed","tokenId","setTokenId","id","experimental","setExperimental","noLayout","setNoLayout","slideshowOnly","setSlideshowOnly","vaultName","setVaultName","vaultIPFS","setVaultIPFS","vaultImageIPFS","setVaultImageIPFS","vaultCiphertextV2","setVaultCiphertextV2","vaultDesc","setVaultDesc","vaultImage","setVaultImage","ownedImage","setOwnedImage","vaultValues","setVaultValues","loadedValues","setLoadedValues","vaultDataValues","setVaultDataValues","attributes","setAttributes","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","vaultChain","setVaultChain","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","state","setState","loaded","mine","setMine","claiming","setClaiming","status","setStatus","sealed","setSealed","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","privValues","setKeyValues","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","hasCheckedNft","setHasCheckedNft","accepting","setAccepting","approving","setApproving","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","preTransfering","setPreTransfering","transferToAddress","setTransferToAddress","transfering","setTransfering","owner","setOwner","torus","setTorus","initTorus","live","setLive","nonce","setNonce","mintSignature","setMintSignature","to","setTo","showVerifyingSignature","setShowVerifyingSignature","showMakingVaultMsg","setShowMakingVaultMsg","minting","setMinting","isCrowdSale","setIsCrowdSale","alternateContractAddress","setAlternateContractAddress","targetAsset","setTargetAsset","name","image","metadata","targetContract","setTargetContract","chain","serialNumber","listings","setListings","handlerContract","vaultHandler","vaultHandlerAbi","vaultHandlerContract","vaultHandlerV8","vaultHandlerV8Abi","emblemContract","emblemVault","emblemAbi","isOpen","isOpenAddrModal","onOpen","onOpenAddrModal","onClose","onCloseAddrModal","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","isOpenOfferModal","onOpenOfferModal","onCloseOfferModal","onToggle","isManageAddressOpen","onManageAddressToggle","colorMode","transak","transferImage","getListings","options","method","headers","accept","response","fetch","jsonData","json","orders","console","log","_torus","baseUrl","window","location","origin","enableLogging","network","init","skipSw","skipInit","skipPrefetch","getVaultContract","address","getSigner","connectUnchecked","getCuratedContract","erc1155Abi","checkLiveliness","cb","service","chainid","toString","body","JSON","stringify","then","data","transferVault","transferFrom","catch","error","lazyMint","signMessage","signature","setTimeout","delayedMint","cipherTextHash","filter","coin","buyWithSignature","code","fireMetaMask","getWitness","witness","transferWithCode","addPreTransfer","handleApproveForall","setApprovalForAll","deleteVault","href","split","getVault","responce","collectionAddress","setStates","getAllBalancesLive","v","includes","ciphertextV2","description","totalValue","values","concat","item","trait_type","addresses","ipfs","image_ipfs","isPvt","length","getAllBalances","balances","getAllBalancesByAddress","ethAddress","btcAddress","saveCache","vault","localStorage","setItem","loadCache","parse","getItem","savePasswordToLocalStorage","loadPasswordFromLocalStorage","storedPw","getSignedJWT","myHeaders","Headers","append","raw","redirect","getRemoteKey","token","keys","getTorusKey","verifier_id","err","message","addAddress","decryptEmbed","getContractStates","owned","_owner","getOwnerOfSerial","ownerOf","finish","getPreTransfer","isApproved","isApprovedForAll","_from","hasAddress","onRenew","handleSign","getSerial","bytes","AES","decrypt","privateKey","payload","enc","Utf8","phrase","forEach","phrasePathToKey","path","handleHideAsset","hideAsset","handleAddressSign","result","handleOwnedEmbed","handleClaim","claim","burn","pingClaimLogs","startDecryptEffect","theLetters","ctnt","speed","increment","clen","si","stri","block","fixed","rustle","i","nextFrame","pos","num","Math","floor","random","letter","charAt","splitDescription","words","desc","trim","tryDecrypt","ciphertext","replace","decryptAddresses","getAddresses","cipherText","decryptedData","visitOpenSeaLink","open","visitLooksRareLink","__html","toLocaleString","type","map","value","canSwipe","e","target","Number","toFixed","attribute_key","addr","lib","WordArray","sha","SHA256","protocol","host"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n  Tooltip,\n  Collapse,\n  FormControl,\n  FormLabel,\n  useColorMode,\n  IconButton,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanel,\n  TabPanels\n} from '@chakra-ui/core'\n\nimport {HStack, VStack, Circle } from '@chakra-ui/react'\nimport TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { isETHAddress, validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\nimport { CHAIN_ID_NAMES } from '../utils'\nimport CryptoJS from 'crypto-js'\nimport { addTokenToWallet, addMany } from '../public/web3'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport Embed from './Embed'\nimport NFTSlideshow from './embed/NFTSlideshow'\nimport CoinBalance from './partials/CoinBalance'\nimport { chakra } from '@chakra-ui/system'\nimport transakSDK from '@transak/transak-sdk'\nimport Attributes from './partials/Attributes';\nimport Listings from './partials/Listings';\ndeclare global {\n  interface Window { phraseToKey: any, phrasePathToKey: any }\n}\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\nconst OfferModal = dynamic(() => import('./OfferModal'))\n\nexport default function Nft() {\n  \n \n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [clearCache, setCache] = useState(query.cc == 't')\n  const [approved, setApproved] = useState(false)\n  const [useOldMint, setUseOldMint] = useState(query.useOldMint)\n  const [mintPassword, setMintPassword] = useState(query.key)\n  const [showOffer, setShowOffer] = useState(query.offer || false)\n  const [framed, setFramed] = useState(query.framed || true)\n  const [tokenId, setTokenId] = useState(query.id)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [noLayout, setNoLayout] = useState(query.noLayout)\n  const [slideshowOnly, setSlideshowOnly] = useState(query.slideshowOnly || false)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultIPFS, setVaultIPFS] = useState('')\n  const [vaultImageIPFS, setVaultImageIPFS] = useState('')\n  const [vaultCiphertextV2, setVaultCiphertextV2] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [ownedImage, setOwnedImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [loadedValues, setLoadedValues] = useState(false)\n  const [vaultDataValues, setVaultDataValues] = useState([])\n  const [attributes, setAttributes] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [vaultChain, setVaultChain] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [sealed, setSealed] = useState(false)\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [privValues, setKeyValues] = useState([])\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [hasCheckedNft, setHasCheckedNft] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n  const [preTransfering, setPreTransfering] = useState(false)\n  const [transferToAddress, setTransferToAddress] = useState(null)\n  const [transfering, setTransfering] = useState(false)\n  const [owner, setOwner] = useState(null)\n  const [torus, setTorus] = useState(initTorus())\n  const [live, setLive] = useState(false)\n  const [nonce, setNonce] = useState(null)\n  const [mintSignature, setMintSignature] = useState(null)\n  const [to, setTo] = useState(null)\n  const [showVerifyingSignature, setShowVerifyingSignature] = useState(false)\n  const [showMakingVaultMsg, setShowMakingVaultMsg] = useState(false)\n  const [minting, setMinting] = useState(false)\n  const [isCrowdSale, setIsCrowdSale] = useState(false)\n  const [alternateContractAddress, setAlternateContractAddress] = useState(null)\n  const [targetAsset, setTargetAsset] = useState({name: '', image: '', metadata: ''})\n  const [targetContract, setTargetContract] = useState({name: '', chain: '', 4: '', 1: '', tokenId: {}, serialNumber: {'hex':''} })\n  const [listings, setListings] = useState([])\n  // const [transferImage, setTransferImage] = useState('')\n  \n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n  let emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n  const { isOpen: isOpenOfferModal, onOpen: onOpenOfferModal, onClose: onCloseOfferModal } = useDisclosure()\n  const { isOpen, onToggle } = useDisclosure()\n  const { isOpen: isManageAddressOpen, onToggle: onManageAddressToggle } = useDisclosure()\n\n  const { colorMode } = useColorMode()\n\n  let transak\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  let transferImage;\n\n  const getListings = async () => {\n    const options = {method: 'GET', headers: {accept: '*/*', 'x-api-key': 'demo-api-key'}};\n    const response = await fetch('https://api.reservoir.tools/orders/asks/v3?token=0x82c7a8f707110f5fbb16184a5933e9f78a34c6ab%3A'+tokenId+'&includePrivate=false&includeMetadata=false&includeRawData=false&sortBy=createdAt&limit=50', options)\n    const jsonData = await response.json()\n    if (jsonData.orders) {\n      console.log('---------------- orders', jsonData)\n      setListings(jsonData.orders)\n      // return cb(jsonData)\n    } else {\n      // return cb(false)\n    }\n  }\n\n  async function initTorus() {\n    let _torus = new TorusSdk({\n      baseUrl: `${window.location.origin}/serviceworker`,\n      enableLogging: true,\n      network: \"testnet\", // details for test net\n    });\n    await _torus.init({skipSw: true, skipInit: true, skipPrefetch: true})\n    console.log(\"Initialized Torus\")\n    return _torus\n  }\n\n  const getVaultContract = (address = null) =>{\n    //return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  const getCuratedContract = (address = null) =>{\n    return new Contract(address, contractAddresses.erc1155Abi, library.getSigner(account).connectUnchecked())\n  }\n\n  const checkLiveliness = (tokenId, cb)=>{\n    fetch(EMBLEM_API + '/liveliness', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({tokenId: tokenId}),\n    }).then(async function (response) {\n      let data = await response.json()\n      setLive(data.live)\n      console.log(\"Liveliness check\", data)\n    })\n    return cb()\n  }\n\n  const transferVault = () => {\n    setTransfering(true)\n    ;(emblemContract as Contract).transferFrom(account, transferToAddress, tokenId)\n    .then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n    .catch((error: ErrorWithCode) => {})\n  }\n\n  const lazyMint = () =>{\n    library.getSigner(account)\n    .signMessage('Delayed Minting: ' + tokenId)\n    .then((signature) => {\n      console.log(\"sig\", signature)\n      fetch(EMBLEM_API + '/lazyMint', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({tokenId: tokenId, signature: signature}),\n      }).then(async function (response) {\n            let data = await response.json()\n            console.log(\"data\", data.data)\n            setMintSignature(data.data.signature)\n            setNonce(data.data.nonce)\n            setShowVerifyingSignature(true)\n            // setCreating(true)\n            setTimeout(()=>{\n              delayedMint()\n            }, 500)\n      })\n    })\n  }\n\n  const delayedMint = () => {\n    // setCreating(true)\n      console.log(\"Delayed Minting\")\n      setShowVerifyingSignature(false)\n      setShowMakingVaultMsg(true)\n      setMinting(true)\n      let cipherTextHash = vaultAddresses.filter(address=>{ return address.coin == \"ETH\"})[0].address\n      console.log(\"--------------------------------------------------------Delayed Minting\", account, tokenId, cipherTextHash, nonce, mintSignature)\n      ;(handlerContract as Contract)\n      .buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n          setShowMakingVaultMsg(false)\n          \n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n          console.log(\"AAAAAHHHHHH\", error.code)\n          setShowMakingVaultMsg(false)\n          // setMinting(false)\n      })    \n  }\n\n  const fireMetaMask = () => {\n    console.log(mintPassword)\n    setAccepting(true)\n    getWitness(witness=>{\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;(handlerContract as Contract)\n      .transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        setAccepting(false)\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          // setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n    })\n    \n  }\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\"+transferImage)\n    setPreTransfering(true)\n    ;(handlerContract as Contract)\n      .addPreTransfer(tokenId, \"0x\"+transferImage)\n      .then(({ hash }: { hash: string }) => {\n        // setTimeout(() => {\n          setHash(hash)\n          console.log(\"Set Pre Transfering True\", preTransfering)\n          // setShowMakingVaultMsg(true)\n        // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code){   \n            console.log(\"Error?\")       \n            setPreTransfering(false)\n            setShowTransferPassword(false)\n            setTransferPassword('')\n        } else {\n          // setShowTransferPassword(!showTransferPassword? true : false)\n          // setPreTransfering(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const handleApproveForall = () => {\n    setApproving(true)\n    ;(emblemContract as Contract)\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const deleteVault = () =>{\n    library.getSigner(account)\n      .signMessage('Delete: ' + tokenId)\n      .then((signature) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_API + '/v2/delete', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata'\n          },\n          body: JSON.stringify({tokenId: tokenId, signature: signature, chainId: chainId.toString()}),\n        }).then(async function (response){\n          let data = await response.json()\n          location.href = location.href.split(\"/\")[0] + \"/vaults\"\n        })\n      })\n  }\n\n  const getVault = async () => {\n    console.log('getvault')\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true'+(clearCache ? '&_vercel_no_cache=1' : ''), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        cc: (clearCache ? 't' : '')\n      },\n    })\n    const jsonData = await responce.json()\n    if (jsonData.collectionAddress){\n      setIsCrowdSale(true)\n      setAlternateContractAddress(jsonData.collectionAddress)\n    }\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      setStates(jsonData)\n      setLoadingApi(false)\n      setInvalidVault(false)\n    }\n    getListings()\n    {\n      !vaultPrivacy && !loadedValues ?    \n      getAllBalancesLive([], tokenId, (v)=>{\n        if (v) {\n          setVaultValues(v)\n        }        \n      }) : null\n    }\n  }\n\n  const getWitness = async (cb) => {\n    const responce = await fetch(EMBLEM_API + '/witness/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        cc: 't',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n    })\n    const jsonData = await responce.json()\n    if (jsonData.signature) {\n      console.log('witness', jsonData)\n      return cb(jsonData)\n    } else {\n      return cb(false)\n    }\n  }\n\n  const setStates = (jsonData) => {\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\"+framed : null\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2)\n      console.log(\"ciphertextV2\", jsonData.ciphertextV2)\n    }\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setOwnedImage(jsonData.ownedImage || null)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)): null\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(item=>{return item.trait_type === \"key\"})): null\n    jsonData.attributes ? setAttributes(jsonData.attributes): null\n    setVaultAddresses(jsonData.addresses)\n    setVaultIPFS(jsonData.ipfs || null)\n    setVaultImageIPFS(jsonData.image_ipfs || null)\n    jsonData.targetAsset? setTargetAsset(jsonData.targetAsset) : null\n    jsonData.targetContract? setTargetContract(jsonData.targetContract) : null\n    if (jsonData.live == false) {\n      checkLiveliness(jsonData.tokenId, ()=>{\n\n      })\n    }\n    setLive(jsonData.live == false ? false : true)\n    setNonce(jsonData.nonce)\n    setMintSignature(jsonData.signature)\n    setTo(jsonData.to)\n    setVaultChain(jsonData.network)\n    setVaultChainId(\n      jsonData.network == 'mainnet' ? 1 : \n      jsonData.network == \"rinkeby\" ? 4 : \n      jsonData.network == \"mumbai\" ? 80001 : \n      jsonData.network == \"matic\" ? 137 : \n      jsonData.network == \"xdai\" ? 100 : \n      jsonData.network == \"bsc\" ? 56 : \n      jsonData.network == \"fantom\" ? 250 : \n      jsonData.network == \"bitcoin\" ? 0 : \n      jsonData.network == \"aurora\" ? 1313161554 : \n      97\n    )\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    // console.log('inside getstates. mine is ', mine)\n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)    \n    if (jsonData.sealed) {\n      setSealed(true)\n    } else {\n      setSealed(false)\n    }\n  }\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    // setVaultValues([])\n    // console.log(address)\n    if (loadedValues) {\n      return cb(false)\n    }\n    setLoadedValues(true)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true' , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const saveCache = (vault) => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)) // Save new state for later\n  }\n\n  const loadCache = () => {\n    console.log('cache')\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')) // Load vaults from storage before updating from server!\n    if (vault) {\n      setState({ loaded: true })\n      setStates(vault)\n      setLoadingApi(true)\n    }\n  }\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword) // Save new state for later\n  }\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword')\n    storedPw && acceptable ? setMintPassword(storedPw) : null //setMintPassword(null)\n  }\n\n  // const getKeys = async (signature, tokenId, cb) => {\n  //   var myHeaders = new Headers()\n  //   myHeaders.append('chainId', chainId.toString())\n  //   myHeaders.append('service', 'evmetadata')\n  //   myHeaders.append('Content-Type', 'application/json')\n\n  //   var raw = JSON.stringify({ signature: signature })\n  //   const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n  //     method: 'POST',\n  //     headers: myHeaders,\n  //     body: raw,\n  //     redirect: 'follow',\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log('getKeys response is ', jsonData)\n  //   return cb(jsonData)\n  // }\n\n  const getSignedJWT = async (signature, tokenId, cb)=>{\n    var myHeaders = new Headers()\n    myHeaders.append('chainid', chainId.toString())\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, tokenId: tokenId })\n    const responce = await fetch('https://tor-us-signer.vercel.app/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getRemoteKey = async (tokenId, token, cb)=> {   \n    let error = false\n    let keys = await (await torus).getTorusKey(\n        \"tor-us-signer-vercel\", \n        tokenId,\n        { verifier_id: tokenId }, \n        token, \n      ).catch(err=>{\n        error = err.message\n      })\n      if (error) {\n        console.log(\"error\", error)\n        return cb(false)\n      } else {\n        return cb(keys)\n      }\n  }\n\n  const addAddress = async (signature, tokenId, coin, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, coin: coin })\n    const responce = await fetch(EMBLEM_API + '/address/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const decryptEmbed = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    console.log(\"Contract states\")\n    let owned = false\n    let _owner\n    try {\n      if (targetContract[chainId]) {\n        console.log(\"Checking owner wth targetContract\")\n        emblemContract = getCuratedContract(targetContract[chainId])\n        _owner = await emblemContract.getOwnerOfSerial(targetContract.serialNumber)\n        console.log(\"--------------------------- owner\", _owner, approved, account, contractAddresses.vaultHandlerV8[chainId])\n      } else {\n        _owner  = await emblemContract.ownerOf(tokenId)\n      }\n      finish()\n    } catch(err){\n      _owner = \"0x0000000000000000000000000000000000000000\"\n      finish()\n    }\n\n    async function finish(){\n      let acceptable = await handlerContract.getPreTransfer(tokenId)\n      let isApproved\n      if (targetContract[chainId]) {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId])\n      } else {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId])\n      }\n      setApproved(isApproved)\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n      setOwner(_owner)\n      setMine(_owner === account)\n      loadPasswordFromLocalStorage()\n    }\n    \n  }\n\n  useEffect(()=>{\n    console.log(\"mine?\", mine)\n    console.log(\"claiming?\", claiming)\n    console.log(\"accepting?\", accepting)\n    console.log(\"acceptable\", acceptable)\n  })\n\n  const hasAddress = (coin)=>{\n    console.log(coin, vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0)\n    return vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0\n  }\n\n  const onRenew = async (name) => { \n    library\n      .getSigner(account)\n      .signMessage('Renew: ' + tokenId)\n      .then((signature) => {\n        let address = vaultAddresses.filter(address=>{ return address.coin == 'NMC'})[0].address\n        console.log('signature', signature, name)\n        fetch(EMBLEM_API + '/nmc/renew/' + address, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata',\n            chainid: chainId.toString()\n          },\n          body: JSON.stringify({\n                \"tokenId\": tokenId,\n                \"signature\": signature,\n                \"name\": name\n              })\n        }).then(async function (response) {\n          let data = await response.json()\n          console.log(\"Requested Renew\", data)\n          \n        })\n      })\n  }\n  \n  const handleSign = async () => {\n    let serialNumber\n    if (targetContract[chainId]) {      \n      emblemContract = getCuratedContract(targetContract[chainId])\n      serialNumber = await emblemContract.getSerial(targetContract.tokenId, 0)\n    }\n\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + (targetContract[chainId]? serialNumber: tokenId))\n      .then((signature) => {\n        getSignedJWT(signature, tokenId, (token)=>{\n          getRemoteKey(tokenId, token.token, (keys)=>{\n            var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey)\n            let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)) \n            setKeyValues(payload.values)\n            setMnemonic(payload.phrase)\n            vaultAddresses.forEach(address=>{              \n              address.key = window.phrasePathToKey(payload.phrase,address.path)\n              if (address.coin == 'BTC') setPrivKeyBTC(address.key)\n              if (address.coin == 'ETH') setPrivKeyETH(address.key)\n            })\n            // setKeyValues(vaultAddresses)\n            onOpenKeysModal()\n          })          \n        })\n      // }\n    })\n  }\n\n  const handleHideAsset = async (coin) => {\n    library\n      .getSigner(account)\n      .signMessage('HideAsset: ' + tokenId)\n      .then((signature) => {\n\n        console.log(\"----------------------------------------------------------------\", signature)\n        console.log(coin.name, coin.coin, coin.address)\n        hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, ()=>{\n          console.log(\"Done hiding coin and getting new balances\")\n        })\n      })\n  }\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/'+tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin? coin: null,\n        \"address\": address? address: null,\n        \"name\": name? name: null,\n        \"signature\": signature? signature: null\n      })\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"-------\", data)\n      getAllBalances([], tokenId, (values)=>{\n        setVaultValues(values)\n        return cb()\n      })\n    }) \n  }\n\n  const handleAddressSign = async (coin: string) => {\n    library\n      .getSigner(account)\n      .signMessage('Address: ' + tokenId)\n      .then((signature) => {\n        addAddress(signature, tokenId, coin, (result) => {\n          getVault()\n        })\n      })\n  }\n\n  const handleOwnedEmbed = async () => {\n    library\n      .getSigner(account)\n      .signMessage('Embed: ' + tokenId)\n      .then((signature) => {\n        decryptEmbed(signature, tokenId, (result) => {\n          setVaultImage(result.ownedImage)\n        })        \n      })\n  }\n\n  const handleClaim = async () => {\n    if (targetContract[chainId]) {\n      // emblemContract = getCuratedContract(targetContract[chainId])\n      // let tokenId = await emblemContract.getTokenIdForSerialNumber(targetContract.serialNumber)\n      vaultHandlerContract.claim(targetContract[chainId], targetContract.tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    } else {\n      emblemContract.burn(tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    }\n  }\n\n  const pingClaimLogs = (cb)=>{\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId='+chainId.toString()+'_vercel_no_cache=1', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        cc: 't'\n      }\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"Log check\", data)\n      return cb()\n    })    \n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random())\n        //Get random letter\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      // $(\"#output\").html(fixed + block);\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    console.log('----')\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    (account && chainId && vaultChainId && chainId == vaultChainId) || ((query.noLayout && query.noLayout == 'true') || (query.slideshowOnly && query.slideshowOnly == 'true')) ? getContractStates() : null\n  })\n\n  function splitDescription(words) {\n    var desc = words? words.split('\\n\\n\\n\\n'): [\" \"]\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    console.log(vaultAddresses)\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      let ethAddress = vaultAddresses.filter((item) => {return item.coin === 'ETH'})[0].address\n      let btcAddress = vaultAddresses.filter((item) => {return item.coin === 'BTC'})[0].address\n      console.log(\"SUCCESS\", vaultAddresses)\n      getAllBalancesByAddress([], ethAddress, btcAddress, (values)=>{\n        setVaultValues(values)\n      })\n      // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {console.log('WTF', err)}\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\")\n    return vaultAddresses\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach((item) => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '')\n        item.address = decrypt(cipherText, key)\n      }      \n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  function visitOpenSeaLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : '') +\n      'opensea.io/assets/' + \n      (vaultChainId == 137 ? 'matic/' : '') +\n      (alternateContractAddress? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      tokenId \n    , '_blank')\n  }\n\n  function visitLooksRareLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : '') +\n      'looksrare.org/collections/' + \n      (vaultChainId == 137 ? 'matic/' : '') +\n      (alternateContractAddress? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      tokenId \n    , '_blank')\n  }\n\n  { alternateContractAddress?\n    emblemContract = getVaultContract(alternateContractAddress? alternateContractAddress: null)\n  : null}\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n        <script\n            dangerouslySetInnerHTML={{\n              __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              if (localStorage.getItem(\"darkMode\") == 'false') {\n                localStorage.setItem(\"darkMode\",\"true\"); location.href = location.href\n              }\n              `,\n            }}\n          />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n        privValues={privValues}\n        addresses={vaultAddresses}\n      />\n      {showOffer ? (\n        <OfferModal\n          isOpen={isOpenOfferModal}\n          onClose={onCloseOfferModal}\n          tokenId={tokenId}\n          mine={mine}\n        />\n      ) : null}\n      \n\n      {/* <Loader loaded={state.loaded}> */}\n        <Box height=\"40px\"></Box>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault && !slideshowOnly ? (\n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                className=\"NFT\" \n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"blue.500\"\n                >\n                  Vault Network: {CHAIN_ID_NAMES[vaultChainId]}\n                </Box>\n                {/* {isCrowdSale ? (\n                  <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"red.500\"\n                >\n                  Part of a crowdsale, sealed for 1 week.\n                </Box>\n                ) : null} */}\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  // textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null}\n                </Box>\n                <Stack className=\"NFT-content\" align=\"center\">\n                  { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                      <NFTSlideshow name={vaultName} image={vaultImage} items={vaultValues.map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n                    ) : (\n                      <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n                    )\n                  }\n                  {mine && ownedImage ? (\n                    <Button onClick={() => {handleOwnedEmbed()}}>(OWNED) Show Full Embed</Button>\n                  ): null}\n                </Stack>\n                <Stack align=\"center\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                    <Stack>\n                      <Text fontSize=\"xs\">\n                      { vaultChainId == chainId ? (\n                        <Link href={\"./vaults?address=\"+owner}>\n                          Owner: {owner}\n                        </Link>\n                      ) : null }\n                      </Text>\n                      <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" className=\"md\">\n                        <ReactMarkdown plugins={[gfm]} children={splitDescription(vaultDesc)} />\n                      </Text>\n                      \n                    </Stack>                    \n                  </Box>                    \n                </Stack>\n                <Box p=\"6\">\n                <Tabs isFitted variant='enclosed'>\n                  <TabList mb='1em'>\n                    <Tab>Balances</Tab>\n                    <Tab>Attributes</Tab>\n                    <Tab>Listings</Tab>\n                  </TabList>\n                  <TabPanels>\n                    <TabPanel>\n                      {vaultPrivacy ? (\n                        <Box mb={5}>\n                          <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                            {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                          </Text>\n                          <Input\n                            type=\"password\"\n                            id=\"vault-password\"\n                            onChange={(e) => tryDecrypt(e.target.value)}\n                            aria-describedby=\"password-helper-text\"\n                          />\n                        </Box>\n                      ) : (\n                        <Box d=\"flex\" backgroundColor={colorMode == \"light\"? \"gray.100\": \"gray.700\"} alignItems=\"baseline\" className=\"coin-balance-content\">\n                          <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                            <Text as=\"h4\" mt={2} fontWeight=\"semibold\">\n                            \n                              Current Contents:  <button\n                              onClick={() =>{\n                                getAllBalancesLive([], tokenId, (v)=>{\n                                  setLoadedValues(false)\n                                  setVaultValues(v)\n                                })\n                              }}\n                            > [Refresh Balances]</button>\n                            </Text>\n                            <Text as=\"p\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"}>${Number(vaultTotalValue.toFixed(4)).toLocaleString()}</Text>\n                            { vaultValues.length ? (\n                              vaultValues.map((coin) => {\n                                return (  \n                                  <Stack> \n                                    <CoinBalance colorMode={colorMode} coin={coin} mine={(status === 'claimed' && claimedBy === account) || mine} onRenew={onRenew} hideAsset={handleHideAsset}/>\n                                  </Stack>\n                                )\n                              })\n                            ) : (<Refreshing /> ) } \n                            { vaultDataValues.length ? (\n                              vaultDataValues.map((data) => {\n                                return (\n                                  <Text>Data: {data.attribute_key}</Text>\n                                )                        \n                              })\n                            ) : !vaultDataValues.length && !vaultValues.length ? (\n                              <Text>Nothing in here! Fill 'er up!</Text>\n                            ) : null}\n                          </Box>\n                        </Box>\n                      )}\n                    </TabPanel>\n                    <TabPanel>\n                      <Attributes colorMode={colorMode} attributes={attributes}/>\n                    </TabPanel>\n                    <TabPanel>\n                      <Listings colorMode={colorMode} listings={listings}/>\n                    </TabPanel>\n                  </TabPanels>\n                </Tabs>\n                  \n                  {!vaultPrivacy ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <ButtonGroup justifyContent=\"space-between\" spacing={6}>\n                        <Stack>\n                          <Text>Deposit Addresses</Text>\n                          <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                            {vaultAddresses.map((addr) => {\n                              return (\n                                <Button\n                                  className=\"address_nft_button\"\n                                  \n                                  ml={2}\n                                  mt={2}\n                                  font-weight=\"100 !important\"\n                                  key={addr.address}\n                                  onClick={() => {\n                                    setCurrCoin(addr.coin)\n                                    setCurrAddr(addr.address)\n                                    onOpenAddrModal()\n                                  }}\n                                >\n                                  {addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP': addr.coin}\n                                </Button>\n                              )\n                            })}\n                        </Flex>\n                        {(mine || status === 'claimed') && vaultAddresses.length < 10 ? (\n                          <>\n                            <button className=\"nft_button\" onClick={()=>{\n                              onManageAddressToggle()\n                            }}>Manage Addresses</button>\n                            <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                              <Collapse isOpen={isManageAddressOpen}>\n                                { !hasAddress('DOGE') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('DOGE') }}>Add DOGE</Button>\n                                ) : null }\n                                { !hasAddress('DGB') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('DGB') }}>Add Digibyte</Button>\n                                ) : null }\n                                { !hasAddress('NMC') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('NMC') }}>Add Namecoin</Button>\n                                ) : null }\n                                { !hasAddress('LTC') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('LTC') }}>Add Litecoin</Button>\n                                ) : null }\n                                { !hasAddress('MONA') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('MONA') }}>Add Mona</Button>\n                                ) : null }\n                                { !hasAddress('TEZOS') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('TEZOS') }}>Add Tezos</Button>\n                                ) : null }\n                                { !hasAddress('SOLANA') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('SOLANA') }}>Add Solana</Button>\n                                ) : null }\n                              </Collapse>\n                            </Flex>\n                          </>\n                        ) : null}\n                        </Stack>\n                      </ButtonGroup>\n                    </Box>\n                  ) : null}\n\n                  {!(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 4 || vaultChainId === 137 )? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      {/* <Stack d=\"flex\" width=\"100%\"> */}\n                        <Button\n                          className=\"nft_button\"\n                          width=\"50%\"\n                          m={5}\n                          onClick={() => {visitOpenSeaLink()}}\n                        >\n                          Opensea\n                        </Button>\n                        <Button\n                          className=\"nft_button\"\n                          width=\"50%\"\n                          m={5}\n                          onClick={() => {visitLooksRareLink()}}\n                        >\n                          LooksRare\n                        </Button>\n                        {showOffer? (\n                          <Button className=\"\" onClick={() => { onOpenOfferModal() }}>{mine? ('My Offers') : ('Make an Offer')} (NFT²NFT)</Button>\n                        ) : null}\n                        \n                      {/* </Stack> */}\n                    </Box>\n                  ) : null}\n                  {!(status === 'claimed') && mine && !acceptable?  (\n                    <>\n                     <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\" width=\"100%\">\n                        <Stack direction=\"column\" align=\"center\" width=\"100%\">\n                          <Button className=\"nft_button\" width=\"100%\" onClick={onToggle}>Transfer Vault</Button>\n                          <Collapse isOpen={isOpen}>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                            <FormLabel htmlFor=\"owner-address\">Address</FormLabel>\n                              <Input\n                                mt={1}\n                                type=\"text\"\n                                id=\"transferAddress\"\n                                value={transferToAddress || ''}\n                                onChange={(e) => {                              \n                                  console.log(\"Transfer to\", e.target.value)\n                                  setTransferToAddress(e.target.value)\n                                }}\n                                autoComplete=\"off\"\n                              />\n                            </Box>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                              <Button isDisabled={!isETHAddress(transferToAddress)} onClick={()=>{\n                                onToggle()\n                                transferVault()\n                              }}>Transfer Now</Button> \n                            </Box>\n                          </Collapse>\n                        </Stack>\n                      </Box>\n                    </>\n                  ):null }\n                  {mine && !acceptable ? (<>\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button \n                        className=\"nft_button\"\n                        width=\"100%\" onClick={() => {\n                        if (!approved) {\n                          return handleApproveForall()\n                        } else {\n                          let key = CryptoJS.lib.WordArray.random(128/8).toString()\n                          let sha = CryptoJS.SHA256(key).toString()\n                          console.log('plain', key)\n                          console.log('sha', sha)\n                          setTransferPassword(key)\n                          transferImage = sha                          \n                          setTimeout(()=>{\n                            addPreTransfer()\n                          }, 500)\n                        }                                             \n                      }\n                    }> {approved ? \"Get Link (Send Vault Via Link)\" : \"Approve Gifting\" } </Button>\n                    </Box>\n                  </>) : null }\n                  {(showTransferPassword || mintPassword) && acceptable ? (\n                      <Box>\n                        <Link href={location.protocol +'//'+ location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword)}>Copy Gift Link</Link>\n                        <Text>Password: {(transferPassword || mintPassword)}</Text>\n                      </Box>\n                      ) : null}\n                  {acceptable && claimedBy !== account ? (\n                  <>\n                      <Button mt={2} width=\"100%\" onClick={()=>{fireMetaMask()}}>Accept</Button>\n                      <Input\n                        mt={2}\n                        type=\"password\"\n                        id=\"mintPassword\"\n                        minLength={3}\n                        maxLength={200}\n                        value={mintPassword || ''}\n                        onChange={(e) => {\n                          console.log('grrr', e.target.value, mintPassword)\n                          setMintPassword(e.target.value)}\n                        }\n                        autoComplete=\"off\"\n                      />\n                  </>\n                    ) : null}\n                  {!(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        onClick={() => {\n                          handleClaim()\n                        }}\n                        isDisabled={claiming}\n                      >\n                        {claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)'}\n                      </Button>\n                    </Box>\n                    // || !live && nonce && mintSignature && vaultCiphertextV2 && to == account\n                  ) : (status === 'claimed' && claimedBy === account && vaultChainId === chainId)  ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={handleSign}>\n                        Get Keys\n                      </Button>\n                    </Box>\n                  ) : null}\n                  {!live && to == account && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg ? (\n                    <>\n                      {useOldMint == \"true\"? (\n                        <Button width=\"100%\" mt={5} onClick={delayedMint}>Mint Me v1</Button>\n                      ) : (\n                        <Button width=\"100%\" mt={5} onClick={lazyMint}>Mint Vault </Button>\n                      )}\n                    </>\n                ) : null}\n                {(!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? (\n                  <Button width=\"100%\" mt={5} onClick={deleteVault}>Delete Vault </Button>\n                ) : null}\n                {showVerifyingSignature ? (\n                  <Button isDisabled type=\"submit\">\n                    Verifying Signature ...\n                  </Button>\n                ) : null}\n                {showMakingVaultMsg ? (\n                  <Button isDisabled type=\"submit\">\n                    Minting Vault ...\n                  </Button>\n                ) : null}\n                </Box>\n                {vaultIPFS ? (\n                  <Stack>\n                    <HStack align=\"center\">\n                      <Link target='new' mb={2} ml={35} href={'https://gateway.ipfs.io/ipfs/'+vaultIPFS} isExternal>View Metadata on IPFS </Link>\n                      {vaultImageIPFS? (\n                        <Link mb={2} href={'https://gateway.ipfs.io/ipfs/'+vaultImageIPFS} isExternal>View Image on IPFS </Link>\n                      ) : null}                      \n                    </HStack> \n                  </Stack>\n                ) : null }\n                {sealed ? (\n                    <Box d=\"flex\" mb={2} ml={35} alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Text>*This vault is sealed forever.</Text>\n                    </Box>\n                  ) : null}\n                <Stack direction=\"column\" align=\"center\">\n                  {status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n                {hash ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    { accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving? \"Handling Approval Flow ...\" : transfering? \"Transfering Vault ...\":  minting? \"Minting Vault\" : \"Generating Gift Link ...\"}\n                  </Alert>\n                ) : null}\n              </Box>\n            </Flex>\n        ) : vaultValues.length > 0 && slideshowOnly? (\n          <Stack className=\"NFT-content\" align=\"center\">\n            { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                <NFTSlideshow name={vaultName} image={vaultValues[0].image} items={vaultValues.filter(value=>{return value.image !== vaultValues[0].image}).map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n              ) : (\n                <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n              )\n            }\n          </Stack>\n        ) : invalidVault ? (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        ): null}\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming && !accepting && !preTransfering) {\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                pingClaimLogs(()=>{\n                  location.href = location.origin + '/nft?id=' + tokenId + '&cc=t';\n                })\n              } else if (preTransfering) {\n                savePasswordToLocalStorage()\n                setShowTransferPassword(true)\n                setPreTransfering(false)\n                setHash(null)                \n              } else if(accepting) {\n                setAccepting(false)                \n                getVault()\n                setHash(null)\n              } else if(approving) {\n                setApproving(false)\n                getVault()\n                setHash(null)\n              } else if(transfering) {\n                setTransfering(false)\n                getVault()\n                setHash(null)\n              } else if(minting) {\n                checkLiveliness(tokenId, ()=>{\n                  setMinting(false)\n                  setLive(true)\n                  // setShowMakingVaultMsg(false)\n                  // location.href = location.origin + '/nft?id=' + tokenId\n                })\n              } else {\n                console.log('minting', minting) \n                console.log('claiming', claiming) \n                console.log('accepting', accepting) \n                console.log('preTransfering', preTransfering)\n                console.log('approving', approving)\n                console.log(\"Unknown state\")\n              }\n            }}\n          />\n        ) : null}\n        <Box height=\"40px\"></Box>\n      {/* </Loader> */}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}