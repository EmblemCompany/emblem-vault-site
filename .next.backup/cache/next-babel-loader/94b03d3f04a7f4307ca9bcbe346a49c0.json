{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/AmountInput.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useLayoutEffect, useRef } from 'react';\nimport { Input } from '@chakra-ui/core';\nimport { escapeRegExp } from '../utils';\nconst REGEX = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`); // match escaped \".\" characters in a non-capturing group\n\nexport default function AmountInput({\n  controlled,\n  isInvalid,\n  isDisabled,\n  value,\n  onChange\n}) {\n  const ref = useRef(null);\n  useLayoutEffect(() => {\n    if (ref.current) ref.current.size = Math.max(1, value.length);\n  });\n  return __jsx(Input, {\n    ref: ref,\n    value: value,\n    onChange: event => {\n      // if the user is typing, interpret commas as decimal separators and replace them with periods\n      const value = event.target.value.replace(/,/g, !controlled ? '' : '.');\n\n      if (value === '' || REGEX.test(escapeRegExp(value))) {\n        onChange(value);\n      }\n    } // chakra options\n    ,\n    isDisabled: isDisabled,\n    _disabled: {\n      opacity: 0.4,\n      cursor: 'not-allowed'\n    },\n    isInvalid: isInvalid,\n    borderColor: !isInvalid ? 'transparent !important' : undefined,\n    isRequired: true,\n    variant: \"flushed\",\n    fontSize: \"3xl\",\n    textAlign: \"center\" // universal input options\n    ,\n    inputMode: \"decimal\",\n    title: \"Token Amount\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\" // text-specific options\n    ,\n    type: \"text\",\n    placeholder: \"0\",\n    minLength: 1,\n    maxLength: 79,\n    spellCheck: \"false\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/AmountInput.tsx"],"names":["useLayoutEffect","useRef","Input","escapeRegExp","REGEX","RegExp","AmountInput","controlled","isInvalid","isDisabled","value","onChange","ref","current","size","Math","max","length","event","target","replace","test","opacity","cursor","undefined"],"mappings":";;;AAAA,SAASA,eAAT,EAAuCC,MAAvC,QAAqD,OAArD;AACA,SAASC,KAAT,QAAsB,iBAAtB;AAEA,SAASC,YAAT,QAA6B,UAA7B;AAEA,MAAMC,KAAK,GAAGC,MAAM,CAAE,wBAAF,CAApB,C,CAA+C;;AAE/C,eAAe,SAASC,WAAT,CAAqB;AAClCC,EAAAA,UADkC;AAElCC,EAAAA,SAFkC;AAGlCC,EAAAA,UAHkC;AAIlCC,EAAAA,KAJkC;AAKlCC,EAAAA;AALkC,CAArB,EAYC;AACd,QAAMC,GAAG,GAAGX,MAAM,CAAmB,IAAnB,CAAlB;AACAD,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAIY,GAAG,CAACC,OAAR,EAAiBD,GAAG,CAACC,OAAJ,CAAYC,IAAZ,GAAmBC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYN,KAAK,CAACO,MAAlB,CAAnB;AAClB,GAFc,CAAf;AAIA,SACE,MAAC,KAAD;AACE,IAAA,GAAG,EAAEL,GADP;AAEE,IAAA,KAAK,EAAEF,KAFT;AAGE,IAAA,QAAQ,EAAGQ,KAAD,IAAgD;AACxD;AACA,YAAMR,KAAK,GAAGQ,KAAK,CAACC,MAAN,CAAaT,KAAb,CAAmBU,OAAnB,CAA2B,IAA3B,EAAiC,CAACb,UAAD,GAAc,EAAd,GAAmB,GAApD,CAAd;;AACA,UAAIG,KAAK,KAAK,EAAV,IAAgBN,KAAK,CAACiB,IAAN,CAAWlB,YAAY,CAACO,KAAD,CAAvB,CAApB,EAAqD;AACnDC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;AACF,KATH,CAUE;AAVF;AAWE,IAAA,UAAU,EAAED,UAXd;AAYE,IAAA,SAAS,EAAE;AACTa,MAAAA,OAAO,EAAE,GADA;AAETC,MAAAA,MAAM,EAAE;AAFC,KAZb;AAgBE,IAAA,SAAS,EAAEf,SAhBb;AAiBE,IAAA,WAAW,EAAE,CAACA,SAAD,GAAa,wBAAb,GAAwCgB,SAjBvD;AAkBE,IAAA,UAAU,EAAE,IAlBd;AAmBE,IAAA,OAAO,EAAC,SAnBV;AAoBE,IAAA,QAAQ,EAAC,KApBX;AAqBE,IAAA,SAAS,EAAC,QArBZ,CAsBE;AAtBF;AAuBE,IAAA,SAAS,EAAC,SAvBZ;AAwBE,IAAA,KAAK,EAAC,cAxBR;AAyBE,IAAA,YAAY,EAAC,KAzBf;AA0BE,IAAA,WAAW,EAAC,KA1Bd,CA2BE;AA3BF;AA4BE,IAAA,IAAI,EAAC,MA5BP;AA6BE,IAAA,WAAW,EAAC,GA7Bd;AA8BE,IAAA,SAAS,EAAE,CA9Bb;AA+BE,IAAA,SAAS,EAAE,EA/Bb;AAgCE,IAAA,UAAU,EAAC,OAhCb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAoCD","sourcesContent":["import { useLayoutEffect, ChangeEvent, useRef } from 'react'\nimport { Input } from '@chakra-ui/core'\n\nimport { escapeRegExp } from '../utils'\n\nconst REGEX = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters in a non-capturing group\n\nexport default function AmountInput({\n  controlled,\n  isInvalid,\n  isDisabled,\n  value,\n  onChange,\n}: {\n  controlled: boolean\n  isInvalid: boolean\n  isDisabled: boolean\n  value: string\n  onChange: (value: string) => void\n}): JSX.Element {\n  const ref = useRef<HTMLInputElement>(null)\n  useLayoutEffect(() => {\n    if (ref.current) ref.current.size = Math.max(1, value.length)\n  })\n\n  return (\n    <Input\n      ref={ref}\n      value={value}\n      onChange={(event: ChangeEvent<HTMLInputElement>): void => {\n        // if the user is typing, interpret commas as decimal separators and replace them with periods\n        const value = event.target.value.replace(/,/g, !controlled ? '' : '.')\n        if (value === '' || REGEX.test(escapeRegExp(value))) {\n          onChange(value)\n        }\n      }}\n      // chakra options\n      isDisabled={isDisabled}\n      _disabled={{\n        opacity: 0.4,\n        cursor: 'not-allowed',\n      }}\n      isInvalid={isInvalid}\n      borderColor={!isInvalid ? 'transparent !important' : undefined}\n      isRequired={true}\n      variant=\"flushed\"\n      fontSize=\"3xl\"\n      textAlign=\"center\"\n      // universal input options\n      inputMode=\"decimal\"\n      title=\"Token Amount\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      placeholder=\"0\"\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}