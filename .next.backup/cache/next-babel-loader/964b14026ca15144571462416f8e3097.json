{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/MyVaults.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Flex, Text, Link, Stack, useColorMode, Button } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Embed from './Embed';\nexport default function MyVaults() {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: pagePosition,\n    1: setPagePosition\n  } = useState(Number(query.start) || 0);\n  const {\n    0: curatedType,\n    1: setCuratedType\n  } = useState('live');\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: liveVaults,\n    1: setLiveVaults\n  } = useState([]);\n  const {\n    0: unMintedVaults,\n    1: setUnMintedVaults\n  } = useState([]);\n  const {\n    0: claimedVaults,\n    1: setClaimedVaults\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: vaultType,\n    1: setVaultType\n  } = useState(query.type || \"unclaimed\");\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    0: shouldFetchData,\n    1: setShouldFetchData\n  } = useState(false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(0);\n  const {\n    0: liveCollections,\n    1: setLiveCollections\n  } = useState([]);\n  const PAGE_SIZE = 20;\n\n  const getVaults = async () => {\n    try {\n      const response = await fetch(EMBLEM_API + '/myvaults/' + (address ? address : account) + '?start=' + offset + '&size=' + PAGE_SIZE + '&_vercel_no_cache=1', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          '_vercel_no_cache': '1',\n          service: 'evmetadata',\n          chainId: chainId.toString(),\n          vaultType: vaultType.toString()\n        }\n      });\n      let jsonData = await response.json();\n\n      if (vaultType.toString() != 'curated') {\n        setVaults(vaults.concat(jsonData));\n        setState({\n          loaded: true\n        });\n        setLoadingApi(false);\n        console.log(\"Records received\", jsonData.length);\n      } else if (vaultType.toString() == 'curated') {\n        setLiveVaults(jsonData.live);\n        setUnMintedVaults(jsonData.unMinted);\n        setClaimedVaults(jsonData.claimed);\n        setVaults(jsonData.live);\n        setState({\n          loaded: true\n        });\n        setLoadingApi(false);\n        setHasMore(false);\n        const uniqueArray = Array.from(new Set(jsonData.live.map(item => {\n          return item.targetContract.name;\n        })));\n        setLiveCollections(uniqueArray);\n      } else if (jsonData.length < PAGE_SIZE) {\n        setHasMore(false);\n      }\n    } catch (error) {}\n  };\n\n  const fetchData = async () => {\n    console.log(offset, PAGE_SIZE, offset + PAGE_SIZE);\n    setOffset(offset + PAGE_SIZE);\n    setShouldFetchData(true);\n  }; // const more = ()=>{\n  //   if (location.href.includes('start')) {\n  //     location.href = location.href.replace('start='+pagePosition, 'start='+(pagePosition + PAGE_SIZE))\n  //   } else {\n  //     location.href = location.href + '?start='+(pagePosition + PAGE_SIZE)\n  //   }\n  //   // setPagePosition(pagePosition + PAGE_SIZE)\n  //   // getVaults()\n  // }\n  // const less = ()=>{\n  //   if (pagePosition - PAGE_SIZE < 0) {\n  //     setPagePosition(PAGE_SIZE)\n  //   }\n  //   if (location.href.includes('start')) {\n  //     location.href = location.href.replace('start='+pagePosition, 'start='+(pagePosition - PAGE_SIZE))\n  //   } else {\n  //     location.href = location.href + '?start='+(pagePosition - PAGE_SIZE)\n  //   }\n  //   // setPagePosition(pagePosition + 3)\n  //   // getVaults()\n  // }\n  // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_newest')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_newest', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [account, acct]);\n  const {\n    0: chain,\n    1: setChain\n  } = useState(chainId);\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n\n  const showOrHideNavLink = path => {\n    return vaultType == path ? true : false;\n  };\n\n  const handleNewNavigationClick = path => {\n    if (!address) {\n      location.href = location.origin + location.pathname + \"?type=\" + path;\n    } else {\n      location.href = location.origin + location.pathname + \"?address=\" + address + \"&type=\" + path;\n    }\n  };\n\n  const handleNftsNavigationClick = () => {\n    if (!address) {\n      location.href = location.origin + '/nfts';\n    } else {\n      location.href = location.origin + '/nfts' + \"?address=\" + address;\n    }\n  };\n\n  useEffect(() => {\n    if (shouldFetchData) {\n      setShouldFetchData(false);\n      getVaults();\n    } else {}\n  }, [shouldFetchData]);\n  return __jsx(React.Fragment, null, __jsx(Stack, {\n    pl: \"10\",\n    spacing: 0,\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, __jsx(Button, {\n    isDisabled: showOrHideNavLink('curated'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      handleNewNavigationClick('curated');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, \"Curated\"), __jsx(Button, {\n    isDisabled: showOrHideNavLink('unclaimed'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      handleNewNavigationClick('unclaimed');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, \"Locked\"), __jsx(Button, {\n    isDisabled: showOrHideNavLink('claimed'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      handleNewNavigationClick('claimed');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, \"Unlocked\"), __jsx(Button, {\n    isDisabled: showOrHideNavLink('unminted'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      handleNewNavigationClick('unminted');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }, \"Not Minted\")), showOrHideNavLink('curated') ? __jsx(Stack, {\n    pl: \"8.7rem\",\n    spacing: 0,\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, liveVaults.length ? __jsx(Button, {\n    isDisabled: curatedType == 'live',\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      setVaults(liveVaults);\n      setCuratedType('live');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, \"Unclaimed (curated) \", liveVaults.length) : null, claimedVaults.length ? __jsx(Button, {\n    isDisabled: curatedType == 'claimed',\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      setVaults(claimedVaults);\n      setCuratedType('claimed');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  }, \"Claimed (curated) \", claimedVaults.length) : null, unMintedVaults.length ? __jsx(Button, {\n    isDisabled: curatedType == 'unminted',\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      setVaults(unMintedVaults);\n      setCuratedType('unminted');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 11\n    }\n  }, \"Not Minted (curated) \", unMintedVaults.length) : null) : null, __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 21\n    }\n  }) : '', __jsx(InfiniteScroll, {\n    className: \"infinite-scroll\",\n    scrollableTarget: \"shannon-container\" // height={200}\n    ,\n    dataLength: vaults.length //This is important field to render the next data\n    ,\n    next: !showOrHideNavLink('curated') ? fetchData : () => {},\n    hasMore: hasMore,\n    loader: __jsx(Refreshing, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 19\n      }\n    }),\n    endMessage: __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 15\n      }\n    }, \"No more vaults to load.\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }, vaults.length ? vaults.map((vault, index) => {\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n    let url = location.origin + pieces.join('/') + '/nft' + (vaultType == 'curated' ? '2' : '') + '?id=' + vault.tokenId + '&cc=t';\n    const flexSettings = {\n      flex: '1',\n      minW: '200px',\n      maxW: '200px',\n      borderWidth: '1px',\n      // color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    const redirect = function () {\n      setLoadingApi(true);\n      location.href = url;\n    };\n\n    return __jsx(Link, {\n      href: url,\n      className: \"vaultLink\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 15\n      }\n    }, __jsx(Box, _extends({\n      className: \"NFT newest\",\n      key: index\n    }, flexSettings, {\n      onClick: redirect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }\n    }), __jsx(Text, {\n      fontWeight: \"semibold\",\n      textAlign: \"center\",\n      mt: 2,\n      pl: 2,\n      isTruncated: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 19\n      }\n    }, vault.name, !vault.private && vault.totalValue > 0 ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 19\n      }\n    }, __jsx(Embed, {\n      className: \"d-block w-100 NFT-newest-image\",\n      url: vault.image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    })), __jsx(Stack, {\n      align: \"center\",\n      mt: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 19\n      }\n    }, vault.status == 'claimed' ? __jsx(Text, {\n      color: \"green.500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 50\n      }\n    }, \"UNLOCKED\") : null)));\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  }, \"YOU DON'T SEEM TO HAVE ANY VAULTS.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }, \"CREATE ONE HERE!\"))))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/MyVaults.tsx"],"names":["Box","Flex","Text","Link","Stack","useColorMode","Button","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","EMBLEM_API","InfiniteScroll","Embed","MyVaults","query","pagePosition","setPagePosition","Number","start","curatedType","setCuratedType","account","chainId","vaults","setVaults","liveVaults","setLiveVaults","unMintedVaults","setUnMintedVaults","claimedVaults","setClaimedVaults","state","setState","loaded","loadingApi","setLoadingApi","address","setAddress","vaultType","setVaultType","type","experimental","setExperimental","colorMode","shouldFetchData","setShouldFetchData","hasMore","setHasMore","offset","setOffset","liveCollections","setLiveCollections","PAGE_SIZE","getVaults","response","fetch","method","headers","service","toString","jsonData","json","concat","console","log","length","live","unMinted","claimed","uniqueArray","Array","from","Set","map","item","targetContract","name","error","fetchData","acct","setAcct","chain","setChain","showOrHideNavLink","path","handleNewNavigationClick","location","href","origin","pathname","handleNftsNavigationClick","textAlign","vault","index","pieces","split","pop","url","join","tokenId","flexSettings","flex","minW","maxW","borderWidth","mx","mb","rounded","overflow","borderColor","status","cursor","redirect","private","totalValue","image"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Spinner, useColorMode, Button } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Embed from './Embed'\n\nexport default function MyVaults() {\n  const { query } = useRouter()\n  const [pagePosition, setPagePosition] = useState(Number(query.start) || 0)\n  const [curatedType, setCuratedType] = useState('live')\n  const { account, chainId } = useWeb3React()\n  const [vaults, setVaults] = useState([])\n  const [liveVaults, setLiveVaults] = useState([])\n  const [unMintedVaults, setUnMintedVaults] = useState([])\n  const [claimedVaults, setClaimedVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [address, setAddress] = useState(query.address)\n  const [vaultType, setVaultType] = useState(query.type || \"unclaimed\")\n  const [experimental, setExperimental] = useState(query.experimental)\n  const { colorMode } = useColorMode()\n  const [shouldFetchData, setShouldFetchData] = useState(false)\n  const [hasMore, setHasMore] = useState(true)\n  const [offset, setOffset] = useState(0)\n  const [liveCollections, setLiveCollections] = useState([])\n  const PAGE_SIZE = 20\n\n  const getVaults = async () => {\n    try {\n      const response = await fetch(EMBLEM_API + '/myvaults/'+(address ? address : account)+'?start='+offset+'&size='+PAGE_SIZE+'&_vercel_no_cache=1', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          '_vercel_no_cache':'1',\n          service: 'evmetadata',\n          chainId: chainId.toString(),\n          vaultType: vaultType.toString()\n        },\n      })\n      let jsonData = await response.json()\n      if (vaultType.toString() != 'curated') {\n        setVaults(vaults.concat(jsonData))\n        setState({ loaded: true })\n        setLoadingApi(false)\n        console.log(\"Records received\", jsonData.length)\n      } else if (vaultType.toString() == 'curated'){\n        setLiveVaults(jsonData.live)\n        setUnMintedVaults(jsonData.unMinted)\n        setClaimedVaults(jsonData.claimed)\n        setVaults(jsonData.live)\n        setState({ loaded: true })\n        setLoadingApi(false)\n        setHasMore(false)\n        const uniqueArray: string[] = Array.from(new Set(jsonData.live.map(item=>{return item.targetContract.name})));\n        setLiveCollections(uniqueArray)\n      } else if (jsonData.length < PAGE_SIZE) {\n        setHasMore(false)\n      }\n    } catch (error) {}\n  }\n\n  const fetchData = async() =>{\n    console.log(offset, PAGE_SIZE, offset+PAGE_SIZE)\n    setOffset(offset+PAGE_SIZE)\n    setShouldFetchData(true)\n  }\n\n  // const more = ()=>{\n  //   if (location.href.includes('start')) {\n  //     location.href = location.href.replace('start='+pagePosition, 'start='+(pagePosition + PAGE_SIZE))\n  //   } else {\n  //     location.href = location.href + '?start='+(pagePosition + PAGE_SIZE)\n  //   }\n  //   // setPagePosition(pagePosition + PAGE_SIZE)\n  //   // getVaults()\n  // }\n\n  // const less = ()=>{\n  //   if (pagePosition - PAGE_SIZE < 0) {\n  //     setPagePosition(PAGE_SIZE)\n  //   }\n  //   if (location.href.includes('start')) {\n  //     location.href = location.href.replace('start='+pagePosition, 'start='+(pagePosition - PAGE_SIZE))\n  //   } else {\n  //     location.href = location.href + '?start='+(pagePosition - PAGE_SIZE)\n  //   }\n  //   // setPagePosition(pagePosition + 3)\n  //   // getVaults()\n  // }\n\n  // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_newest')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_newest', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [chainId, chain])\n\n  const showOrHideNavLink = (path: string)=> {\n    return vaultType == path ? true: false\n  }\n\n  const handleNewNavigationClick = (path)=>{\n    if (!address) {\n      location.href = location.origin + location.pathname + \"?type=\" + path\n    } else {\n      location.href = location.origin + location.pathname + \"?address=\" + address + \"&type=\" + path\n    }\n  }\n\n  const handleNftsNavigationClick = ()=>{\n    if (!address) {\n      location.href = location.origin + '/nfts'\n    } else {\n      location.href = location.origin + '/nfts' + \"?address=\" + address\n    }\n  }\n\n  useEffect(() => {\n    if (shouldFetchData) {\n      setShouldFetchData(false)\n      getVaults()\n    } else {\n    }\n  }, [shouldFetchData])\n\n  return (\n    <>\n    <Stack pl=\"10\" spacing={0} direction=\"row\">\n      <Button isDisabled={showOrHideNavLink('curated')} m={2} variant=\"ghost\" onClick={()=>{handleNewNavigationClick('curated')}}>\n          Curated\n      </Button>\n      <Button isDisabled={showOrHideNavLink('unclaimed')} m={2} variant=\"ghost\" onClick={()=>{handleNewNavigationClick('unclaimed')}}>\n          Locked\n      </Button>\n      <Button isDisabled={showOrHideNavLink('claimed')} m={2} variant=\"ghost\" onClick={()=>{handleNewNavigationClick('claimed')}}>\n          Unlocked\n      </Button>\n      <Button isDisabled={showOrHideNavLink('unminted')} m={2} variant=\"ghost\" onClick={()=>{handleNewNavigationClick('unminted')}}>\n          Not Minted\n      </Button>\n      {/* <Button isDisabled={showOrHideNavLink('created')} m={2} variant=\"ghost\" onClick={()=>{handleNewNavigationClick('created')}}>\n          Created by me\n      </Button>\n      <Button isDisabled={false} m={2} variant=\"ghost\" onClick={()=>{handleNftsNavigationClick()}}>\n          Other NFT's\n      </Button> */}\n    </Stack>\n    {showOrHideNavLink('curated')? (\n      <Stack pl=\"8.7rem\" spacing={0} direction=\"row\">\n        {liveVaults.length? (\n          <Button isDisabled={curatedType=='live'} m={2} variant=\"ghost\" onClick={()=>{setVaults(liveVaults); setCuratedType('live')}}>\n            Unclaimed (curated) {liveVaults.length}\n          </Button>\n        ): null}\n        {claimedVaults.length? (\n          <Button isDisabled={curatedType=='claimed'} m={2} variant=\"ghost\" onClick={()=>{setVaults(claimedVaults); setCuratedType('claimed')}}>\n            Claimed (curated) {claimedVaults.length}\n          </Button>\n        ): null}\n        {unMintedVaults.length? (\n          <Button isDisabled={curatedType=='unminted'} m={2} variant=\"ghost\" onClick={()=>{setVaults(unMintedVaults); setCuratedType('unminted')}}>\n            Not Minted (curated) {unMintedVaults.length}\n          </Button>\n        ): null}\n        \n      </Stack>\n    ): null}\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n        \n        <InfiniteScroll                \n          className=\"infinite-scroll\"\n          scrollableTarget=\"shannon-container\"\n          // height={200}\n          dataLength={vaults.length} //This is important field to render the next data\n          next={!showOrHideNavLink('curated')? fetchData: ()=>{}}\n          hasMore={hasMore}\n          loader={<Refreshing />}\n          endMessage={\n            <p style={{ textAlign: 'center' }}>\n              <b>No more vaults to load.</b> \n            </p>\n          }\n        >\n      <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\" mt={10}>        \n        {vaults.length ? (\n          vaults.map((vault, index) => {\n            let pieces = location.pathname.split('/')\n            pieces.pop()\n            let url = location.origin + pieces.join('/') + '/nft'+(vaultType == 'curated'? '2': '')+'?id=' + vault.tokenId + '&cc=t'\n            const flexSettings = {\n              flex: '1',\n              minW: '200px',\n              maxW: '200px',\n              borderWidth: '1px',\n              // color: 'white',\n              mx: '6',\n              mb: '6',\n              rounded: 'lg',\n              overflow: 'hidden',\n              borderColor: vault.status == 'claimed' ? 'green !important' : '',\n              cursor: 'pointer',\n            }\n            const redirect = function () {\n              setLoadingApi(true)\n              location.href = url\n            }\n            return (\n              <Link href={url} className=\"vaultLink\">\n                <Box className=\"NFT newest\" key={index} {...flexSettings} onClick={redirect}>\n                  <Text fontWeight=\"semibold\" textAlign=\"center\" mt={2} pl={2} isTruncated={true}>\n                    {vault.name}\n                    {!vault.private && vault.totalValue > 0 ? ': ~$' + vault.totalValue : null}\n                  </Text>\n                  <Stack align=\"center\">\n                    <Embed className=\"d-block w-100 NFT-newest-image\" url={vault.image}/>\n                  </Stack>\n                  <Stack align=\"center\" mt={3}>\n                    {vault.status == 'claimed' ? <Text color=\"green.500\">UNLOCKED</Text> : null}\n                  </Stack>\n                </Box>\n              </Link>\n            )\n          })\n          \n        ) : (\n          <Text>\n            YOU DON'T SEEM TO HAVE ANY VAULTS.{' '}\n            <Link color=\"#638cd8\" href=\"../create\">\n              CREATE ONE HERE!\n            </Link>\n          </Text>\n        )}\n        \n      </Flex>\n      </InfiniteScroll>\n    </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}