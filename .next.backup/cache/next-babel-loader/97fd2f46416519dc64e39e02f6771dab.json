{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Text, Stack, Button, useColorMode, Select, Input } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR, contractAddresses } from '../constants';\nimport { useWeb3React } from '@web3-react/core';\nimport { NETWORK_SHORTNAMES } from '../utils'; // import { useContract } from '../hooks'\n\nimport { Contract } from '@ethersproject/contracts';\nexport const EMBLEM_API = 'https://api.emblemvault.io';\nexport default function OfferModal({\n  isOpen,\n  onClose,\n  tokenId,\n  mine\n}) {\n  //   const address = addrAddr\n  //   const coin = addrCoin\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    0: copied,\n    1: setCopied\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n  const {\n    0: offeringToken,\n    1: setOfferingToken\n  } = useState({\n    address: '',\n    balance: 0,\n    tokenType: '',\n    name: ''\n  });\n  const {\n    0: tokenBalances,\n    1: setTokenBalances\n  } = useState([]);\n  const {\n    0: offeringTokenBalance,\n    1: setOfferingTokenBalance\n  } = useState(0);\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  const {\n    0: decimals,\n    1: setDecimals\n  } = useState(0);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(0);\n  const {\n    0: offerAmount,\n    1: setOfferAmount\n  } = useState(0);\n  const {\n    0: offerTokenId,\n    1: setOfferTokenId\n  } = useState(0);\n\n  const getErc20Contract = address => {\n    console.log(\"contract\", address);\n    return useContract(address, contractAddresses.covalAbi, true);\n  };\n\n  const getTradeContract = () => {\n    return useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true);\n  };\n\n  const useContract = (address, ABI, withSigner = false) => {\n    return new Contract(address, ABI, withSigner ? library.getSigner(account).connectUnchecked() : library);\n  };\n\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account);\n      setLoaded(false);\n    }\n  }, [account, acct]);\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [copied]);\n  useEffect(() => {\n    if (!loaded && !loading) {\n      setLoading(true);\n      getBalances(account, async balances => {\n        setTokenBalances(balances);\n        setLoading(false);\n        setLoaded(true);\n      });\n    }\n  });\n\n  const handleApprove = async address => {\n    let contract = getErc20Contract(address);\n    console.log('decimals', decimals);\n    await contract.approve(contractAddresses.nftrade[chainId], offeringTokenBalance * Math.pow(10, +decimals));\n  };\n\n  const makeOffer = async () => {\n    let contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n    await contract.addOffer(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount * Math.pow(10, +decimals));\n  };\n\n  const getContractInfo = async address => {\n    let contract = getErc20Contract(address);\n    console.log(contract);\n\n    let _dec = await contract.decimals();\n\n    setDecimals(_dec);\n    setAllowance(await contract.allowance(account, contractAddresses.nftrade[chainId]).then(balance => (balance * Math.pow(10, -_dec)).toString()));\n    setOfferingTokenBalance(await contract.balanceOf(account).then(balance => (balance * Math.pow(10, -_dec)).toString()));\n  };\n\n  const getBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/' + NETWORK_SHORTNAMES[chainId] + '/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json(); // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    // setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n\n    return cb(jsonData.values);\n  };\n\n  function copyWithFlag(content) {\n    copy(content);\n    setCopied(true);\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    color: COLOR[colorMode],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, \"Offer \", tokenId)), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"center\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }), __jsx(Stack, {\n    mt: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 15\n    }\n  }, account, \" network: \", NETWORK_SHORTNAMES[chainId]), __jsx(Select, {\n    w: \"100%\",\n    value: offeringToken.address,\n    onChange: e => {\n      let token = tokenBalances.filter(item => {\n        return item.address == e.target.value;\n      })[0];\n      setOfferingToken(token);\n      token.tokenType == \"ERC-20\" ? getContractInfo(token.address) : null;\n      console.log(tokenBalances.filter(item => {\n        return item.address == e.target.value;\n      })[0]);\n      console.log(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  }, __jsx(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  }, \"Choose a Token\"), tokenBalances.map((coin, index) => {\n    if (coin.tokenType !== 'native') return __jsx(\"option\", {\n      value: coin.address,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 25\n      }\n    }, coin.name);\n  })), offeringToken.balance > 0 && offeringToken.tokenType == \"ERC-20\" && allowance > 0 ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 25\n    }\n  }, \"Max: \", offeringTokenBalance), __jsx(Input, {\n    onChange: e => setOfferAmount(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 25\n    }\n  })) : null), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, offeringToken.tokenType == 'ERC-20' ? offeringTokenBalance > 0 && allowance == 0 ? __jsx(Button, {\n    onClick: () => {\n      handleApprove(offeringToken.address);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 25\n    }\n  }, \"Approve offer of \", offeringToken.name) : offeringToken && offeringTokenBalance == 0 ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 25\n    }\n  }, \"Insufficient Balance\") : __jsx(Button, {\n    onClick: () => {\n      makeOffer();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 25\n    }\n  }, \"Make Offer\") : null))), __jsx(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx"],"names":["React","useEffect","useState","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","Text","Stack","Button","useColorMode","Select","Input","copy","COLOR","contractAddresses","useWeb3React","NETWORK_SHORTNAMES","Contract","EMBLEM_API","OfferModal","isOpen","onClose","tokenId","mine","colorMode","account","chainId","library","copied","setCopied","loading","setLoading","loaded","setLoaded","offeringToken","setOfferingToken","address","balance","tokenType","name","tokenBalances","setTokenBalances","offeringTokenBalance","setOfferingTokenBalance","acct","setAcct","decimals","setDecimals","allowance","setAllowance","offerAmount","setOfferAmount","offerTokenId","setOfferTokenId","getErc20Contract","console","log","useContract","covalAbi","getTradeContract","nftrade","nftradeAbi","ABI","withSigner","getSigner","connectUnchecked","timeout","setTimeout","clearTimeout","getBalances","balances","handleApprove","contract","approve","Math","pow","makeOffer","addOffer","emblemVault","getContractInfo","_dec","then","toString","balanceOf","cb","responce","fetch","method","headers","service","jsonData","json","values","copyWithFlag","content","e","token","filter","item","target","value","map","coin","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Text,\n  Stack,\n  Button,\n  useColorMode,\n  Select,\n  Input,\n} from '@chakra-ui/core'\nimport copy from 'copy-to-clipboard'\nimport QRCode from 'qrcode.react'\nimport { COLOR, contractAddresses } from '../constants'\nimport { useWeb3React } from '@web3-react/core'\nimport { NETWORK_SHORTNAMES } from '../utils'\n// import { useContract } from '../hooks'\nimport { useTokenBalance, useTokenAllowance, useETHBalance } from '../data'\nimport { Contract, ContractInterface } from '@ethersproject/contracts'\nexport const EMBLEM_API = 'https://api.emblemvault.io'\n\nexport default function OfferModal({\n  isOpen,\n  onClose,\n  tokenId,\n  mine,\n}: {\n  isOpen: boolean\n  onClose: () => void\n  tokenId\n  mine: boolean\n}): JSX.Element {\n//   const address = addrAddr\n//   const coin = addrCoin\n\n  const { colorMode } = useColorMode()\n  const { account, chainId, library } = useWeb3React()\n  const [copied, setCopied] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loaded, setLoaded] = useState(false)\n  const [offeringToken, setOfferingToken] = useState({address:'', balance: 0, tokenType:'', name: ''})\n  const [tokenBalances, setTokenBalances] = useState([])\n  const [offeringTokenBalance, setOfferingTokenBalance] = useState(0)\n  const [acct, setAcct] = useState('')\n  const [decimals, setDecimals] = useState(0)\n  const [allowance, setAllowance] = useState(0)\n  const [offerAmount, setOfferAmount] = useState(0)\n  const [offerTokenId, setOfferTokenId] = useState(0)\n  \n  \n  const getErc20Contract = (address) =>{\n    console.log(\"contract\", address)\n    return useContract(address, contractAddresses.covalAbi, true)\n  }\n\n  const getTradeContract = ()=>{\n    return useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true)\n  }\n\n  const useContract = (address?: string, ABI?: ContractInterface, withSigner = false): Contract | undefined => {\n    return new Contract(address, ABI, withSigner ? library.getSigner(account).connectUnchecked() : library)\n  }\n\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setLoaded(false)\n    }\n  }, [account, acct])\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [copied])\n\n  useEffect(() => {\n      if (!loaded && !loading) {\n        setLoading(true)\n        getBalances(account, async balances =>{\n            setTokenBalances(balances)\n            setLoading(false)\n            setLoaded(true)\n        })\n      }\n  })\n\n  const handleApprove = async(address)=>{\n    let contract = getErc20Contract(address)\n    console.log('decimals', decimals)\n    await contract.approve(contractAddresses.nftrade[chainId], (offeringTokenBalance * Math.pow(10, +decimals)))\n  }\n\n  const makeOffer = async()=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.addOffer(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n  }\n\n  const getContractInfo = async (address)=>{\n    let contract = getErc20Contract(address)\n    console.log(contract)\n    let _dec = await contract.decimals()\n    setDecimals(_dec)\n    setAllowance(\n        await contract\n        .allowance(account, contractAddresses.nftrade[chainId])\n        .then(balance=>(balance * Math.pow(10, -_dec)).toString())\n    )\n    setOfferingTokenBalance(\n        await contract\n        .balanceOf(account)\n        .then(balance=>(balance * Math.pow(10, -_dec)).toString())\n    )\n  }\n\n  const getBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/'+NETWORK_SHORTNAMES[chainId]+'/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    // setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n    return cb(jsonData.values)\n  }\n\n  function copyWithFlag(content: string): void {\n    copy(content)\n    setCopied(true)\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent color={COLOR[colorMode]}>\n        <ModalHeader>\n          <Text>Offer {tokenId}</Text>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Stack direction=\"column\">\n            <Stack direction=\"row\" align=\"center\" justify=\"center\">\n              {/* <QRCode value={coin==\"BTC\" ? \"bitcoin:\"+address: address} onClick={() => copyWithFlag(address)} /> */}\n            </Stack>\n\n            <Stack mt=\"6\">\n              <Text>{account} network: {NETWORK_SHORTNAMES[chainId]}</Text>\n                <Select w=\"100%\" value={offeringToken.address}\n                    onChange={(e) => {\n                    let token = tokenBalances.filter((item)=>{return item.address == e.target.value})[0]\n                    setOfferingToken(token)\n                    token.tokenType ==\"ERC-20\" ? getContractInfo(token.address) : null\n                    console.log(tokenBalances.filter((item)=>{return item.address == e.target.value})[0])\n                    console.log(e.target.value)\n                    }}\n                >\n                    <option value=\"0\" >Choose a Token</option>\n                    {tokenBalances.map((coin, index) => {\n                        if (coin.tokenType !== 'native')\n                        return (\n                        <option value={coin.address}>{coin.name}</option>\n                        )\n                    })}\n                </Select>\n                {offeringToken.balance > 0 && offeringToken.tokenType==\"ERC-20\" && allowance > 0 ? (\n                    <>\n                        <Text>Max: {offeringTokenBalance}</Text>\n\n                        <Input onChange={(e) => setOfferAmount(e.target.value)}></Input>\n                    </>\n                ) : null}\n                              \n            </Stack>\n            <Stack direction=\"row\" justify=\"center\">\n                {offeringToken.tokenType =='ERC-20' ? (\n                    offeringTokenBalance > 0 && allowance == 0 ? (\n                        <Button onClick={()=>{handleApprove(offeringToken.address)}}>Approve offer of {offeringToken.name}</Button>\n                    ) : offeringToken && offeringTokenBalance == 0 ? (\n                        <Text>Insufficient Balance</Text>\n                    ) : (\n                        <Button onClick={()=>{makeOffer()}}>Make Offer</Button>\n                    )\n                ) : null}\n            \n                \n              {/* <Button onClick={() => copyWithFlag('address')}>\n                {copied ? <Text>Copied!</Text> : <Text isTruncated>{'address'}</Text>}\n              </Button> */}\n            </Stack>\n          </Stack>\n        </ModalBody>\n        <ModalFooter></ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}