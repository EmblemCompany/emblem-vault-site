{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Layout.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport BackgroundVideo from './BackgroundVideo';\nimport { Flex, IconButton, useDisclosure, Badge, LightMode, Stack, Box, Button } from '@chakra-ui/core';\nimport { useWeb3React } from '@web3-react/core';\nimport dynamic from 'next/dynamic';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport { useEagerConnect, useQueryParameters, useUSDETHPrice } from '../hooks';\nimport { useTransactions, useFirstToken, useSecondToken, useShowUSD } from '../context';\nimport ColorBox from './ColorBox';\nimport Account from './Account';\nimport { TransactionToast } from './TransactionToast';\nimport TokenBalance from './TokenBalance';\nimport { WETH, ChainId } from '@uniswap/sdk';\nimport WalletConnect from './WalletConnect';\nimport { QueryParameters } from '../constants';\nimport { Coval, CovalTest } from '../tokens';\nconst Settings = dynamic(() => import('./Settings'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./Settings')],\n    modules: ['./Settings']\n  }\n});\nexport default function Layout({\n  children\n}) {\n  const {\n    chainId,\n    account\n  } = useWeb3React();\n  const isTestnet = typeof chainId === 'number' && chainId !== 1;\n  const {\n    isOpen: isOpenSettings,\n    onOpen: onOpenSettings,\n    onClose: onCloseSettings\n  } = useDisclosure();\n  const [firstToken] = useFirstToken();\n  const [secondToken] = useSecondToken();\n  const [showUSD, setShowUSD] = useShowUSD();\n  const [transactions] = useTransactions(); // automatically try connecting to the injected connector on pageload\n\n  const triedToEagerConnect = useEagerConnect();\n  const queryParameters = useQueryParameters();\n  const requiredChainId = queryParameters[QueryParameters.CHAIN];\n  const USDETHPrice = useUSDETHPrice();\n\n  const handleNavigationclick = () => {\n    console.log(location.pathname);\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n\n    if (location.pathname.includes('vaultlist')) {\n      location.href = location.origin + pieces.join('/') + '/create';\n    } else {\n      location.href = location.origin + pieces.join('/') + '/vaultlist';\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Settings, {\n    isOpen: isOpenSettings,\n    onClose: onCloseSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), __jsx(BackgroundVideo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), __jsx(ColorBox, {\n    as: Flex,\n    flexDirection: \"column\",\n    borderColor: \"orange.500\",\n    borderWidth: isTestnet ? '.5rem' : '0',\n    minHeight: \"100vh\",\n    maxHeight: \"100vh\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, __jsx(Flex, {\n    justifyContent: \"space-between\",\n    flexShrink: 0,\n    overflowX: \"auto\",\n    p: \"1rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    spacing: 0,\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, __jsx(IconButton, {\n    m: 2,\n    icon: \"settings\",\n    variant: \"ghost\",\n    onClick: onOpenSettings,\n    \"aria-label\": \"Settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    m: 2,\n    variant: \"ghost\",\n    onClick: handleNavigationclick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, ' ', location.pathname.includes('vaultlist') ? 'Create Vault' : 'My Vaults')), __jsx(Account, {\n    triedToEagerConnect: triedToEagerConnect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  })), __jsx(Stack, {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    m: isTestnet ? '1.5rem' : '1rem',\n    mt: isTestnet ? '5rem' : '4.5rem',\n    alignItems: \"flex-end\",\n    spacing: \"1rem\",\n    zIndex: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, typeof account !== 'string' ? !triedToEagerConnect || (typeof chainId === 'number' ? chainId !== ChainId.MAINNET : typeof requiredChainId === 'number' && requiredChainId !== ChainId.MAINNET) ? null : __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, __jsx(WalletConnect, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  })) : // [DEFAULT_TOKENS.filter((tokenrrr) => tokenrrr.chainId == chainId)[0], firstToken, secondToken]\n  [chainId == 1 ? Coval : CovalTest, firstToken ? firstToken.symbol != 'Coval' ? firstToken : null : null, secondToken ? secondToken.symbol != 'Coval' ? secondToken : null : null].filter(token => token).filter(token => !(token === null || token === void 0 ? void 0 : token.equals(WETH[token.chainId]))).map(token => __jsx(Box, {\n    key: token === null || token === void 0 ? void 0 : token.address,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  }, __jsx(TokenBalance, {\n    token: token,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }\n  })))), __jsx(Flex, {\n    flexGrow: 1,\n    direction: \"column\",\n    overflow: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, children), __jsx(Flex, {\n    minHeight: \"1.5rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, typeof chainId === 'number' && __jsx(LightMode, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, __jsx(Badge, {\n    variant: \"solid\",\n    variantColor: isTestnet ? 'orange' : undefined,\n    fontSize: \"1rem\",\n    style: {\n      borderTopLeftRadius: 0,\n      borderBottomRightRadius: 0,\n      borderBottomLeftRadius: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, CHAIN_ID_NAMES[chainId]))), transactions.length > 0 && __jsx(Stack, {\n    position: \"absolute\",\n    bottom: 0,\n    right: 0,\n    m: isTestnet ? '1.5rem' : '1rem',\n    alignItems: \"flex-end\",\n    spacing: \"1rem\",\n    zIndex: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, transactions.filter(transaction => transaction.chainId === chainId).map(({\n    hash\n  }) => __jsx(Box, {\n    key: hash,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, __jsx(TransactionToast, {\n    hash: hash,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 19\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Layout.tsx"],"names":["BackgroundVideo","Flex","IconButton","useDisclosure","Badge","LightMode","Stack","Box","Button","useWeb3React","dynamic","CHAIN_ID_NAMES","useEagerConnect","useQueryParameters","useUSDETHPrice","useTransactions","useFirstToken","useSecondToken","useShowUSD","ColorBox","Account","TransactionToast","TokenBalance","WETH","ChainId","WalletConnect","QueryParameters","Coval","CovalTest","Settings","Layout","children","chainId","account","isTestnet","isOpen","isOpenSettings","onOpen","onOpenSettings","onClose","onCloseSettings","firstToken","secondToken","showUSD","setShowUSD","transactions","triedToEagerConnect","queryParameters","requiredChainId","CHAIN","USDETHPrice","handleNavigationclick","console","log","location","pathname","pieces","split","pop","includes","href","origin","join","MAINNET","symbol","filter","token","equals","map","address","undefined","borderTopLeftRadius","borderBottomRightRadius","borderBottomLeftRadius","length","transaction","hash"],"mappings":"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","sourcesContent":["import { ReactNode } from 'react'\nimport BackgroundVideo from './BackgroundVideo'\nimport { Flex, IconButton, useDisclosure, Badge, LightMode, Stack, Box, Radio, Button } from '@chakra-ui/core'\nimport { useWeb3React } from '@web3-react/core'\nimport dynamic from 'next/dynamic'\n\nimport { CHAIN_ID_NAMES } from '../utils'\nimport { useEagerConnect, useQueryParameters, useUSDETHPrice } from '../hooks'\nimport { useTransactions, useFirstToken, useSecondToken, useShowUSD } from '../context'\nimport ColorBox from './ColorBox'\nimport Account from './Account'\nimport { TransactionToast } from './TransactionToast'\nimport TokenBalance from './TokenBalance'\nimport { WETH, ChainId, Token } from '@uniswap/sdk'\nimport WalletConnect from './WalletConnect'\nimport { QueryParameters } from '../constants'\nimport { Coval, CovalTest, DEFAULT_TOKENS } from '../tokens'\n\nconst Settings = dynamic(() => import('./Settings'))\n\nexport default function Layout({ children }: { children: ReactNode }): JSX.Element {\n  const { chainId, account } = useWeb3React()\n  const isTestnet = typeof chainId === 'number' && chainId !== 1\n\n  const { isOpen: isOpenSettings, onOpen: onOpenSettings, onClose: onCloseSettings } = useDisclosure()\n\n  const [firstToken] = useFirstToken()\n  const [secondToken] = useSecondToken()\n  const [showUSD, setShowUSD] = useShowUSD()\n\n  const [transactions] = useTransactions()\n\n  // automatically try connecting to the injected connector on pageload\n  const triedToEagerConnect = useEagerConnect()\n\n  const queryParameters = useQueryParameters()\n  const requiredChainId = queryParameters[QueryParameters.CHAIN]\n\n  const USDETHPrice = useUSDETHPrice()\n  const handleNavigationclick = () => {\n    console.log(location.pathname)\n    let pieces = location.pathname.split('/')\n    pieces.pop()\n    if (location.pathname.includes('vaultlist')) {\n      location.href = location.origin + pieces.join('/') + '/create'\n    } else {\n      location.href = location.origin + pieces.join('/') + '/vaultlist'\n    }\n  }\n  return (\n    <>\n      <Settings isOpen={isOpenSettings} onClose={onCloseSettings} />\n      <BackgroundVideo />\n      <ColorBox\n        as={Flex}\n        flexDirection=\"column\"\n        borderColor=\"orange.500\"\n        borderWidth={isTestnet ? '.5rem' : '0'}\n        minHeight=\"100vh\"\n        maxHeight=\"100vh\"\n      >\n        <Flex justifyContent=\"space-between\" flexShrink={0} overflowX=\"auto\" p=\"1rem\">\n          <Stack spacing={0} direction=\"row\">\n            <IconButton m={2} icon=\"settings\" variant=\"ghost\" onClick={onOpenSettings} aria-label=\"Settings\" />\n            <Button m={2} variant=\"ghost\" onClick={handleNavigationclick}>\n              {' '}\n              {location.pathname.includes('vaultlist') ? 'Create Vault' : 'My Vaults'}\n            </Button>\n          </Stack>\n          <Account triedToEagerConnect={triedToEagerConnect} />\n        </Flex>\n\n        <Stack\n          position=\"absolute\"\n          top={0}\n          right={0}\n          m={isTestnet ? '1.5rem' : '1rem'}\n          mt={isTestnet ? '5rem' : '4.5rem'}\n          alignItems=\"flex-end\"\n          spacing=\"1rem\"\n          zIndex={2}\n        >\n          {typeof account !== 'string' ? (\n            !triedToEagerConnect ||\n            (typeof chainId === 'number'\n              ? chainId !== ChainId.MAINNET\n              : typeof requiredChainId === 'number' && requiredChainId !== ChainId.MAINNET) ? null : (\n              <Box>\n                <WalletConnect />\n              </Box>\n            )\n          ) : (\n            // [DEFAULT_TOKENS.filter((tokenrrr) => tokenrrr.chainId == chainId)[0], firstToken, secondToken]\n            [\n              chainId == 1 ? Coval : CovalTest,\n              firstToken ? (firstToken.symbol != 'Coval' ? firstToken : null) : null,\n              secondToken ? (secondToken.symbol != 'Coval' ? secondToken : null) : null,\n            ]\n              .filter((token) => token)\n              .filter((token) => !token?.equals(WETH[token.chainId]))\n              .map((token) => (\n                <Box key={token?.address}>\n                  <TokenBalance token={token as Token} />\n                </Box>\n              ))\n          )}\n        </Stack>\n\n        <Flex flexGrow={1} direction=\"column\" overflow=\"auto\">\n          {children}\n        </Flex>\n\n        <Flex minHeight=\"1.5rem\">\n          {typeof chainId === 'number' && (\n            <LightMode>\n              <Badge\n                variant=\"solid\"\n                variantColor={isTestnet ? 'orange' : undefined}\n                fontSize=\"1rem\"\n                style={{ borderTopLeftRadius: 0, borderBottomRightRadius: 0, borderBottomLeftRadius: 0 }}\n              >\n                {CHAIN_ID_NAMES[chainId]}\n              </Badge>\n            </LightMode>\n          )}\n        </Flex>\n\n        {transactions.length > 0 && (\n          <Stack\n            position=\"absolute\"\n            bottom={0}\n            right={0}\n            m={isTestnet ? '1.5rem' : '1rem'}\n            alignItems=\"flex-end\"\n            spacing=\"1rem\"\n            zIndex={2}\n          >\n            {transactions\n              .filter((transaction) => transaction.chainId === chainId)\n              .map(({ hash }) => (\n                <Box key={hash}>\n                  <TransactionToast hash={hash} />\n                </Box>\n              ))}\n          </Stack>\n        )}\n      </ColorBox>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}