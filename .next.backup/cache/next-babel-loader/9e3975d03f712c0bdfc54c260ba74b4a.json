{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, Suspense, useRef, useLayoutEffect } from 'react';\nimport { Button, Stack, Box, IconButton } from '@chakra-ui/core';\nimport { useWeb3React } from '@web3-react/core';\nimport { UserRejectedRequestError } from '@web3-react/injected-connector';\nimport MetaMaskOnboarding from '@metamask/onboarding';\nimport { formatEtherscanLink, ExplorerTXType, shortenHex } from '../utils';\nimport { injected, getNetwork } from '../connectors';\nimport { useETHBalance } from '../data';\nimport ErrorBoundary from './ErrorBoundary';\nimport { useQueryParameters, useUSDETHPrice } from '../hooks';\nimport { QueryParameters } from '../constants';\nimport { useShowUSD } from '../context';\n\nfunction ETHBalance() {\n  const {\n    account\n  } = useWeb3React();\n  const {\n    data\n  } = useETHBalance(account, true);\n  const [showUSD] = useShowUSD();\n  const USDETHPrice = useUSDETHPrice();\n  return __jsx(Button, {\n    variant: \"outline\",\n    cursor: \"default\",\n    tabIndex: -1,\n    _hover: {},\n    _active: {},\n    _focus: {},\n    style: {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n      borderRight: 'none'\n    }\n  }, \"\\u039E\", ' ', showUSD && USDETHPrice ? `$${data.multiply(USDETHPrice).toFixed(2, {\n    groupSeparator: ','\n  })}` : data.toSignificant(4, {\n    groupSeparator: ','\n  }));\n}\n\nexport default function Account({\n  triedToEagerConnect\n}) {\n  var _library$provider;\n\n  const {\n    active,\n    error,\n    activate,\n    library,\n    chainId,\n    account,\n    setError\n  } = useWeb3React(); // initialize metamask onboarding\n\n  const onboarding = useRef();\n  useLayoutEffect(() => {\n    onboarding.current = new MetaMaskOnboarding();\n  }, []); // automatically try connecting to the network connector where applicable\n\n  const queryParameters = useQueryParameters();\n  const requiredChainId = queryParameters[QueryParameters.CHAIN];\n  useEffect(() => {\n    if (triedToEagerConnect && !active && !error) {\n      activate(getNetwork(requiredChainId));\n    }\n  }, [triedToEagerConnect, active, error, requiredChainId, activate]); // manage connecting state for injected connector\n\n  const {\n    0: connecting,\n    1: setConnecting\n  } = useState(false);\n  useEffect(() => {\n    if (active || error) {\n      var _onboarding$current;\n\n      setConnecting(false);\n      (_onboarding$current = onboarding.current) === null || _onboarding$current === void 0 ? void 0 : _onboarding$current.stopOnboarding();\n    }\n  }, [active, error]);\n  const {\n    0: ENSName,\n    1: setENSName\n  } = useState('');\n  useEffect(() => {\n    if (library && account) {\n      let stale = false;\n      library.lookupAddress(account).then(name => {\n        if (!stale && typeof name === 'string') {\n          setENSName(name);\n        }\n      }).catch(() => {}); // eslint-disable-line @typescript-eslint/no-empty-function\n\n      return () => {\n        stale = true;\n        setENSName('');\n      };\n    }\n  }, [library, account, chainId]);\n\n  if (error) {\n    return null;\n  } else if (!triedToEagerConnect) {\n    return null;\n  } else if (typeof account !== 'string') {\n    var _window, _window2;\n\n    return __jsx(Box, null, MetaMaskOnboarding.isMetaMaskInstalled() || (_window = window) !== null && _window !== void 0 && _window.ethereum || (_window2 = window) !== null && _window2 !== void 0 && _window2.web3 ? __jsx(Button, {\n      isLoading: connecting,\n      leftIcon: MetaMaskOnboarding.isMetaMaskInstalled() ? 'metamask' : undefined,\n      onClick: () => {\n        setConnecting(true);\n        activate(injected, undefined, true).catch(error => {\n          // ignore the error if it's a user rejected request\n          if (error instanceof UserRejectedRequestError) {\n            setConnecting(false);\n          } else {\n            setError(error);\n          }\n        });\n      }\n    }, MetaMaskOnboarding.isMetaMaskInstalled() ? 'Connect to MetaMask' : 'Connect to Wallet') : __jsx(Button, {\n      leftIcon: 'metamask',\n      onClick: () => {\n        var _onboarding$current2;\n\n        return (_onboarding$current2 = onboarding.current) === null || _onboarding$current2 === void 0 ? void 0 : _onboarding$current2.startOnboarding();\n      }\n    }, \"Install Metamask\"));\n  }\n\n  let leftIcon; // check walletconnect first because sometime metamask can be installed but we're still using walletconnect\n\n  if (library !== null && library !== void 0 && (_library$provider = library.provider) !== null && _library$provider !== void 0 && _library$provider.isWalletConnect) {\n    leftIcon = 'walletconnect';\n  } else if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n    leftIcon = 'metamask';\n  }\n\n  return __jsx(Stack, {\n    direction: \"row\",\n    spacing: 0,\n    whiteSpace: \"nowrap\",\n    m: 0,\n    shouldWrapChildren: true\n  }, __jsx(ErrorBoundary, {\n    fallback: __jsx(IconButton, {\n      variant: \"outline\",\n      icon: \"warning\",\n      \"aria-label\": \"Failed\",\n      isDisabled: true,\n      cursor: \"default !important\",\n      _hover: {},\n      _active: {},\n      style: {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0,\n        borderRight: 'none'\n      }\n    })\n  }, __jsx(Suspense, {\n    fallback: __jsx(Button, {\n      variant: \"outline\",\n      isLoading: true,\n      cursor: \"default !important\",\n      _hover: {},\n      _active: {},\n      style: {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0,\n        borderRight: 'none'\n      }\n    }, null)\n  }, __jsx(ETHBalance, null))), __jsx(Button, {\n    as: \"a\",\n    leftIcon: leftIcon ? leftIcon : undefined,\n    rightIcon: \"external-link\",\n    style: {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    },\n    href: formatEtherscanLink(ExplorerTXType.Account, [chainId, account]),\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }, ENSName || `${shortenHex(account, 4)}`));\n}","map":null,"metadata":{},"sourceType":"module"}