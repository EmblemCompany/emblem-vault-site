{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nftrade.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Link, Stack, Button, FormControl, Input, FormHelperText, Select } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { Embed } from './Embed';\nimport { useContract } from '../hooks';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { TransactionToast } from './TransactionToast';\nexport default function NFTrade() {\n  _s();\n\n  var _this = this;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState([]),\n      vaults = _useState[0],\n      setVaults = _useState[1];\n\n  var _useState2 = useState([]),\n      myVaults = _useState2[0],\n      setMyVaults = _useState2[1];\n\n  var _useState3 = useState(false),\n      myVaultsLoaded = _useState3[0],\n      setMyVaultsLoaded = _useState3[1];\n\n  var _useState4 = useState({\n    loaded: false\n  }),\n      state = _useState4[0],\n      setState = _useState4[1];\n\n  var _useState5 = useState(false),\n      loadingApi = _useState5[0],\n      setLoadingApi = _useState5[1];\n\n  var _useState6 = useState(null),\n      hash = _useState6[0],\n      setHash = _useState6[1];\n\n  var _useState7 = useState(query.q),\n      q = _useState7[0],\n      setQ = _useState7[1];\n\n  var _useState8 = useState(q || ''),\n      temp_q = _useState8[0],\n      setTempQ = _useState8[1];\n\n  var _useState9 = useState(query.network || null),\n      network = _useState9[0],\n      setNetwork = _useState9[1];\n\n  var _useState10 = useState(query.address),\n      address = _useState10[0],\n      setAddress = _useState10[1];\n\n  var _useState11 = useState(query.experimental),\n      experimental = _useState11[0],\n      setExperimental = _useState11[1];\n\n  var _useState12 = useState(null),\n      offeringTokenId = _useState12[0],\n      setOfferingTokenId = _useState12[1];\n\n  var _useState13 = useState(null),\n      offeringTokenAllowed = _useState13[0],\n      setOfferingTokenAllowed = _useState13[1];\n\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  var nftradeContract = useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true);\n\n  var getVaults = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var response, jsonData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoadingApi(true);\n              _context2.prev = 1;\n              _context2.next = 4;\n              return fetch(EMBLEM_API + '/search', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                },\n                body: JSON.stringify({\n                  q: q,\n                  network: network\n                })\n              });\n\n            case 4:\n              response = _context2.sent;\n              _context2.next = 7;\n              return response.json();\n\n            case 7:\n              jsonData = _context2.sent;\n              setState({\n                loaded: true\n              });\n              jsonData.forEach( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, index) {\n                  var owner, offerCount;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return checkOwner(data.tokenId);\n\n                        case 2:\n                          owner = _context.sent;\n                          _context.next = 5;\n                          return getOfferCount(data.tokenId);\n\n                        case 5:\n                          offerCount = _context.sent;\n                          console.log(\"owner\", owner, account);\n                          jsonData[index].mine = owner === account;\n                          jsonData[index].offerCount = offerCount;\n                          console.log(\"count\", offerCount);\n\n                        case 10:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x, _x2) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n              setVaults(jsonData);\n              setLoadingApi(false);\n              _context2.next = 16;\n              break;\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](1);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 14]]);\n    }));\n\n    return function getVaults() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getMyVaults = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var response, jsonData;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log(\"Getting My Vaults\");\n              setMyVaultsLoaded(true);\n              _context3.prev = 2;\n              _context3.next = 5;\n              return fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental ? '?experimental=true' : ''), {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  chainId: chainId.toString()\n                }\n              });\n\n            case 5:\n              response = _context3.sent;\n              _context3.next = 8;\n              return response.json();\n\n            case 8:\n              jsonData = _context3.sent;\n              setMyVaults(jsonData);\n              console.log(jsonData);\n              _context3.next = 15;\n              break;\n\n            case 13:\n              _context3.prev = 13;\n              _context3.t0 = _context3[\"catch\"](2);\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 13]]);\n    }));\n\n    return function getMyVaults() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    // console.log(q, state, loadingApi)\n    nftradeStuff();\n\n    if (q && !state.loaded && !loadingApi) {\n      console.log(\"Load Search\");\n      getVaults();\n    }\n  });\n\n  function nftradeStuff() {\n    return _nftradeStuff.apply(this, arguments);\n  }\n\n  function _nftradeStuff() {\n    _nftradeStuff = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (myVaultsLoaded) {\n                _context4.next = 5;\n                break;\n              }\n\n              _context4.next = 3;\n              return getMyVaults();\n\n            case 3:\n              _context4.next = 6;\n              break;\n\n            case 5:\n              null;\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _nftradeStuff.apply(this, arguments);\n  }\n\n  function getOfferCount(_x3) {\n    return _getOfferCount.apply(this, arguments);\n  }\n\n  function _getOfferCount() {\n    _getOfferCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(tokenId) {\n      var offerCount;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return nftradeContract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId);\n\n            case 2:\n              offerCount = _context5.sent;\n              return _context5.abrupt(\"return\", Number(offerCount));\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _getOfferCount.apply(this, arguments);\n  }\n\n  function checkAllowance(_x4) {\n    return _checkAllowance.apply(this, arguments);\n  }\n\n  function _checkAllowance() {\n    _checkAllowance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(tokenId) {\n      var allowed;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return emblemContract.getApproved(tokenId);\n\n            case 2:\n              allowed = _context6.sent;\n              setOfferingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\");\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _checkAllowance.apply(this, arguments);\n  }\n\n  function checkOwner(_x5) {\n    return _checkOwner.apply(this, arguments);\n  }\n\n  function _checkOwner() {\n    _checkOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(tokenId) {\n      var owner;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return emblemContract.ownerOf(tokenId);\n\n            case 2:\n              owner = _context7.sent;\n              return _context7.abrupt(\"return\", owner);\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _checkOwner.apply(this, arguments);\n  }\n\n  var approveOffer = function approveOffer() {\n    ;\n    emblemContract.approve(contractAddresses.nftrade[chainId], offeringTokenId).then(function (_ref4) {\n      var hash = _ref4.hash;\n      setHash(hash);\n    }); // .catch((error: ErrorWithCode) => {\n    //   if (error?.code == 4001) {\n    //     setApproving(false)\n    //   }\n    // })\n  };\n\n  var makeOffer = function makeOffer(tokenId) {\n    ;\n    nftradeContract.addOffer(contractAddresses.emblemVault[chainId], offeringTokenId, contractAddresses.emblemVault[chainId], tokenId).then(function (_ref5) {\n      var hash = _ref5.hash;\n      setHash(hash);\n    }); // .catch((error: ErrorWithCode) => {\n    //   if (error?.code == 4001) {\n    //     setApproving(false)\n    //   }\n    // })\n  };\n\n  return __jsx(Loader, {\n    loaded: state.loaded || !q,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    id: \"search-query\",\n    width: \"45%\",\n    \"aria-describedby\": \"search-query-helper-text\",\n    placeholder: \"0xdeadbeef\",\n    maxLength: 42,\n    value: temp_q,\n    onChange: function onChange(e) {\n      return setTempQ(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    m: 2,\n    onClick: function onClick() {\n      setState({\n        loaded: false\n      });\n      setQ(temp_q);\n      var loc = location.href.split('?')[0] + \"?q=\" + temp_q + \"&network=\" + network;\n      window.history.pushState(temp_q, 'Title', loc);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, \"Search\"), __jsx(Select, {\n    w: \"45%\",\n    placeholder: \"All Networks\",\n    value: network || '',\n    onChange: function onChange(e) {\n      setNetwork(e.target.value);\n      console.log(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, __jsx(\"option\", {\n    value: \"matic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  }, \"Matic\"), __jsx(\"option\", {\n    value: \"mainnet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 15\n    }\n  }, \"Ethereum Mainnet\"), __jsx(\"option\", {\n    value: \"rinkeby\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }, \"Ethereum Rinkeby\"))), __jsx(FormHelperText, {\n    id: \"search-query-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, \"Search for Emblem Vaults by: Name, Description, Type, Contents\"))), __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, vaults.length ? vaults.map(function (vault, index) {\n    var pieces = location.pathname.split('/');\n    pieces.pop();\n    var url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId;\n    var flexSettings = {\n      flex: '1',\n      minW: '300px',\n      maxW: '300px',\n      borderWidth: '1px',\n      color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    var redirect = function redirect() {\n      location.href = url;\n    };\n\n    return __jsx(Stack, {\n      key: \"stack_\" + index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 15\n      }\n    }, __jsx(Box, _extends({\n      key: index\n    }, flexSettings, {\n      onClick: redirect,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }\n    }), __jsx(Text, {\n      fontWeight: \"semibold\",\n      textAlign: \"center\",\n      mt: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 19\n      }\n    }, vault.name, !vault[\"private\"] ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n      align: \"center\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 19\n      }\n    }, __jsx(Embed, {\n      url: vault.image,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }\n    })), __jsx(Box, {\n      d: \"flex\",\n      alignItems: \"baseline\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 19\n      }\n    }, __jsx(Box, {\n      color: \"gray.500\",\n      fontWeight: \"semibold\",\n      letterSpacing: \"wide\",\n      fontSize: \"sm\",\n      ml: \"2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }\n    }, vault[\"private\"] ? __jsx(React.Fragment, null, __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 27\n      }\n    }, \"Contents hidden. Click to view the vault and unlock values.\")) : vault.values.length ? vault.values.map(function (coin, index) {\n      if (index < 4) return __jsx(Text, {\n        key: coin.name,\n        isTruncated: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 31\n        }\n      }, coin.name, \": \", coin.balance);else if (index == 4) return __jsx(Text, {\n        fontWeight: \"bold\",\n        mt: 2,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 31\n        }\n      }, \"... Click to see the rest ...\");\n    }) : __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 29\n      }\n    }, \"Nothing in here! \", __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 48\n      }\n    }), \"Click to fill 'er up!\"), __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 27\n      }\n    }, \"Offers: \", vault.offerCount, \" \", vault.mine.toString()))), __jsx(Stack, {\n      align: \"center\",\n      mt: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 19\n      }\n    }, vault.status == 'claimed' ? __jsx(Text, {\n      color: \"green.500\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 50\n      }\n    }, \"CLAIMED\") : null)), !vault.mine ? __jsx(Select, {\n      placeholder: \"Offer NFT\",\n      onChange: function onChange(e) {\n        var tokenId = e.target.value; // console.log(e.target.value)\n\n        setOfferingTokenId(tokenId);\n        checkAllowance(tokenId);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }\n    }, myVaults.map(function (vault, index) {\n      return __jsx(\"option\", {\n        key: index,\n        value: vault.tokenId,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 25\n        }\n      }, vault.name);\n    })) : null, offeringTokenId && !vault.mine ? offeringTokenAllowed ? __jsx(Button, {\n      onClick: function onClick() {\n        makeOffer(vault.tokenId);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 45\n      }\n    }, \"Make Offer\") : __jsx(Button, {\n      onClick: approveOffer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 118\n      }\n    }, \"Approve\") : __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 22\n      }\n    }, \"Mine!\"));\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 11\n    }\n  }, \"Search Resulted in 0 Vaults.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 13\n    }\n  }, \"CREATE ONE HERE!\"))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      setHash(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }\n  }) : null);\n}\n\n_s(NFTrade, \"PY3Eu2NjVAp/lcXmVrVUBx0kFp4=\", false, function () {\n  return [useWeb3React, useRouter, useContract, useContract];\n});\n\n_c = NFTrade;\n\nvar _c;\n\n$RefreshReg$(_c, \"NFTrade\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nftrade.tsx"],"names":["Box","Flex","Text","Link","Stack","Button","FormControl","Input","FormHelperText","Select","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","Embed","useContract","EMBLEM_API","contractAddresses","TransactionToast","NFTrade","account","chainId","library","query","vaults","setVaults","myVaults","setMyVaults","myVaultsLoaded","setMyVaultsLoaded","loaded","state","setState","loadingApi","setLoadingApi","hash","setHash","q","setQ","temp_q","setTempQ","network","setNetwork","address","setAddress","experimental","setExperimental","offeringTokenId","setOfferingTokenId","offeringTokenAllowed","setOfferingTokenAllowed","emblemContract","emblemVault","emblemAbi","nftradeContract","nftrade","nftradeAbi","getVaults","fetch","method","headers","service","body","JSON","stringify","response","json","jsonData","forEach","data","index","checkOwner","tokenId","owner","getOfferCount","offerCount","console","log","mine","getMyVaults","toString","nftradeStuff","Number","checkAllowance","getApproved","allowed","ownerOf","approveOffer","approve","then","makeOffer","addOffer","e","target","value","loc","location","href","split","window","history","pushState","length","map","vault","pieces","pathname","pop","url","origin","join","flexSettings","flex","minW","maxW","borderWidth","color","mx","mb","rounded","overflow","borderColor","status","cursor","redirect","name","totalValue","image","values","coin","balance"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, FormControl, FormLabel, Input, FormHelperText, Select } from '@chakra-ui/core'\nimport Loader from 'react-loader'\n\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { Embed } from './Embed'\nimport { setTimeout } from 'timers'\nimport { useContract } from '../hooks'\nimport { Contract } from '@ethersproject/contracts'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { TransactionToast } from './TransactionToast'\n\n\nexport default function NFTrade() {\n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [vaults, setVaults] = useState([])\n  const [myVaults, setMyVaults] = useState([])\n  const [myVaultsLoaded, setMyVaultsLoaded] = useState(false)\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [hash, setHash] = useState(null)\n  const [q, setQ] = useState(query.q)\n  const [temp_q, setTempQ] = useState(q || '')\n  const [network, setNetwork] = useState(query.network || null)\n  const [address, setAddress] = useState(query.address)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [offeringTokenId, setOfferingTokenId] = useState(null)\n  const [offeringTokenAllowed, setOfferingTokenAllowed] = useState(null)\n\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n  const nftradeContract = useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true)\n  \n  const getVaults = async () => {    \n    setLoadingApi(true)\n    try {      \n      const response = await fetch(EMBLEM_API + '/search', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({q: q, network: network})\n      })\n      const jsonData = await response.json()\n      setState({ loaded: true })\n      jsonData.forEach(async (data, index)=>{    \n        let owner = await checkOwner(data.tokenId)    \n        let offerCount = await getOfferCount(data.tokenId)\n        \n        console.log(\"owner\", owner, account)\n        jsonData[index].mine = owner === account\n        jsonData[index].offerCount = offerCount\n        console.log(\"count\", offerCount)\n      })\n      setVaults(jsonData)\n      setLoadingApi(false)\n    } catch (error) {}\n  }\n\n  const getMyVaults = async () => {\n    console.log(\"Getting My Vaults\")\n    setMyVaultsLoaded(true)\n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental? '?experimental=true' : ''), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString(),\n        },\n      })\n      const jsonData = await response.json()\n      setMyVaults(jsonData)\n      console.log(jsonData)\n    } catch (error) {}\n  }\n\n\n\n  useEffect(() => {\n    // console.log(q, state, loadingApi)\n    nftradeStuff()\n    if (q && !state.loaded && !loadingApi) {\n      console.log(\"Load Search\")\n      getVaults()\n    }\n  })\n\n  async function nftradeStuff() {\n    !myVaultsLoaded ? await getMyVaults() : null\n    // let _owner  = await nftradeContract.ownerOf(tokenId)\n  }\n\n  async function getOfferCount(tokenId) {\n    let offerCount  = await nftradeContract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId)\n    return Number(offerCount)\n  }\n\n  async function checkAllowance(tokenId) {\n    let allowed  = await emblemContract.getApproved(tokenId)\n    setOfferingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\")\n  }\n\n  async function checkOwner(tokenId) {\n    let owner  = await emblemContract.ownerOf(tokenId)\n    return owner\n  }\n\n  const approveOffer = () => {\n    ;(emblemContract as Contract)\n      .approve(contractAddresses.nftrade[chainId], offeringTokenId)\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n  }\n\n  const makeOffer = (tokenId) => {\n    ;(nftradeContract as Contract)\n      .addOffer(contractAddresses.emblemVault[chainId], offeringTokenId, contractAddresses.emblemVault[chainId], tokenId)\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n  }\n\n  return (\n    <Loader loaded={state.loaded || !q}>\n      {loadingApi ? <Refreshing /> : ''}\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\" >\n        <FormControl isRequired>\n          <Flex width=\"full\" align=\"center\" justifyContent=\"center\" flexWrap=\"wrap\">\n            <Input\n              type=\"text\"\n              id=\"search-query\"\n              width='45%'\n              aria-describedby=\"search-query-helper-text\"\n              placeholder=\"0xdeadbeef\"\n              maxLength={42}\n              value={temp_q}\n              onChange={(e) =>\n                setTempQ(e.target.value)\n              }\n            />\n            <Button\n              m={2}\n              onClick={() => {\n                setState({ loaded: false })\n                setQ(temp_q)\n                let loc = location.href.split('?')[0]+\"?q=\"+temp_q +  \"&network=\" + network\n                window.history.pushState(temp_q, 'Title', loc);\n              }}\n            >Search\n            </Button>\n            <Select w=\"45%\" placeholder=\"All Networks\" value={network || ''}\n              onChange={(e)=>{\n                setNetwork(e.target.value)\n                console.log(e.target.value)\n              }}\n            >\n              <option value=\"matic\">Matic</option>\n              <option value=\"mainnet\">Ethereum Mainnet</option>\n              <option value=\"rinkeby\">Ethereum Rinkeby</option>\n            </Select>\n          </Flex>\n          \n          <FormHelperText id=\"search-query-helper-text\">\n            Search for Emblem Vaults by: Name, Description, Type, Contents\n        </FormHelperText>\n        </FormControl>\n      </Flex>\n      <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\" mt={10}>\n        {vaults.length ? (\n          vaults.map((vault, index) => {\n            let pieces = location.pathname.split('/')\n            pieces.pop()\n            let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId\n            const flexSettings = {\n              flex: '1',\n              minW: '300px',\n              maxW: '300px',\n              borderWidth: '1px',\n              color: 'white',\n              mx: '6',\n              mb: '6',\n              rounded: 'lg',\n              overflow: 'hidden',\n              borderColor: vault.status == 'claimed' ? 'green !important' : '',\n              cursor: 'pointer',\n            }\n            const redirect = function () {\n              location.href = url\n            }\n            return (\n              <Stack key={\"stack_\"+index}>\n                <Box key={index} {...flexSettings} onClick={redirect}>\n                  <Text fontWeight=\"semibold\" textAlign=\"center\" mt={2}>\n                    {vault.name}\n                    {!vault.private ? ': ~$' + vault.totalValue : null}\n                  </Text>\n                  <Stack align=\"center\">\n                    <Embed url={vault.image}/>\n                  </Stack>\n                  <Box d=\"flex\" alignItems=\"baseline\">\n                    <Box color=\"gray.500\" fontWeight=\"semibold\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                      {vault.private ? (\n                        <>\n                          <Text>Contents hidden. Click to view the vault and unlock values.</Text>\n                        </>\n                      ) : vault.values.length ? (\n                        vault.values.map((coin, index) => {\n                          if (index < 4)\n                            return (\n                              <Text key={coin.name} isTruncated>\n                                {coin.name}: {coin.balance}\n                              </Text>\n                            )\n                          else if (index == 4)\n                            return (\n                              <Text fontWeight=\"bold\" mt={2}>\n                                ... Click to see the rest ...\n                              </Text>\n                            )\n                        })\n                      ) : (\n                            <Text>\n                              Nothing in here! <br />\n                          Click to fill 'er up!\n                            </Text>\n                          )}\n                          <Text>Offers: {vault.offerCount} {vault.mine.toString()}</Text>\n                    </Box>\n                    \n                  </Box>                \n                  <Stack align=\"center\" mt={3}>\n                    {vault.status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                  </Stack>\n                      \n                </Box>\n                {!vault.mine ? (\n                <Select placeholder=\"Offer NFT\" \n                    onChange={(e)=>{\n                      let tokenId = e.target.value\n                      // console.log(e.target.value)\n                      setOfferingTokenId(tokenId)\n                      checkAllowance(tokenId)\n                    }}\n                  >\n                    {myVaults.map((vault, index) => {\n                      return (\n                        <option key={index} value={vault.tokenId}>{vault.name}</option>\n                      )\n                    })}\n                  </Select> ) : null}\n                  {offeringTokenId && !vault.mine ? (\n                    offeringTokenAllowed ? (<Button onClick={()=>{makeOffer(vault.tokenId)}}>Make Offer</Button>) : (<Button onClick={approveOffer}>Approve</Button>)\n                ) : (<Text>Mine!</Text>) }\n                  \n              </Stack>\n            )\n          })\n        ) : (\n          <Text>\n            Search Resulted in 0 Vaults.{' '}\n            <Link color=\"#638cd8\" href=\"../create\">\n              CREATE ONE HERE!\n            </Link>\n          </Text>\n        )}\n      </Flex>\n      {hash ? (\n      <TransactionToast\n          hash={hash}\n          onComplete={() => {\n            setHash(null)\n          }}\n        />\n      ): null }\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}