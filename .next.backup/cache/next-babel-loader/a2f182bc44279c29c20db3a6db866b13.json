{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/MyVaults.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Link, Stack, useColorMode, Button } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Embed from './Embed';\nexport default function MyVaults() {\n  _s();\n\n  var _this = this;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(Number(query.start) || 0),\n      pagePosition = _useState[0],\n      setPagePosition = _useState[1];\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useState2 = useState([]),\n      vaults = _useState2[0],\n      setVaults = _useState2[1];\n\n  var _useState3 = useState([]),\n      liveVaults = _useState3[0],\n      setLiveVaults = _useState3[1];\n\n  var _useState4 = useState([]),\n      unMintedVaults = _useState4[0],\n      setUnMintedVaults = _useState4[1];\n\n  var _useState5 = useState([]),\n      claimedVaults = _useState5[0],\n      setClaimedVaults = _useState5[1];\n\n  var _useState6 = useState({\n    loaded: false\n  }),\n      state = _useState6[0],\n      setState = _useState6[1];\n\n  var _useState7 = useState(false),\n      loadingApi = _useState7[0],\n      setLoadingApi = _useState7[1];\n\n  var _useState8 = useState(query.address),\n      address = _useState8[0],\n      setAddress = _useState8[1];\n\n  var _useState9 = useState(query.type || \"unclaimed\"),\n      vaultType = _useState9[0],\n      setVaultType = _useState9[1];\n\n  var _useState10 = useState(query.experimental),\n      experimental = _useState10[0],\n      setExperimental = _useState10[1];\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _useState11 = useState(false),\n      shouldFetchData = _useState11[0],\n      setShouldFetchData = _useState11[1];\n\n  var _useState12 = useState(true),\n      hasMore = _useState12[0],\n      setHasMore = _useState12[1];\n\n  var _useState13 = useState(0),\n      offset = _useState13[0],\n      setOffset = _useState13[1];\n\n  var PAGE_SIZE = 20;\n\n  var getVaults = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(EMBLEM_API + '/myvaults/' + (address ? address : account) + '?start=' + offset + '&size=' + PAGE_SIZE + '&_vercel_no_cache=1', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  '_vercel_no_cache': '1',\n                  service: 'evmetadata',\n                  chainId: chainId.toString(),\n                  vaultType: vaultType.toString()\n                }\n              });\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n\n            case 6:\n              jsonData = _context.sent;\n\n              if (vaultType.toString() != 'curated') {\n                setVaults(vaults.concat(jsonData));\n                setState({\n                  loaded: true\n                });\n                setLoadingApi(false);\n                console.log(\"Records received\", jsonData.length);\n              } else if (vaultType.toString() == 'curated') {\n                setLiveVaults(jsonData.live);\n                setUnMintedVaults(jsonData.unMinted);\n                setClaimedVaults(jsonData.claimed);\n                setVaults(jsonData.live);\n                setState({\n                  loaded: true\n                });\n                setLoadingApi(false);\n                setHasMore(false);\n              } else if (jsonData.length < PAGE_SIZE) {\n                setHasMore(false);\n              }\n\n              _context.next = 12;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n\n    return function getVaults() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(offset, PAGE_SIZE, offset + PAGE_SIZE);\n              setOffset(offset + PAGE_SIZE);\n              setShouldFetchData(true);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function fetchData() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // const more = ()=>{\n  //   if (location.href.includes('start')) {\n  //     location.href = location.href.replace('start='+pagePosition, 'start='+(pagePosition + PAGE_SIZE))\n  //   } else {\n  //     location.href = location.href + '?start='+(pagePosition + PAGE_SIZE)\n  //   }\n  //   // setPagePosition(pagePosition + PAGE_SIZE)\n  //   // getVaults()\n  // }\n  // const less = ()=>{\n  //   if (pagePosition - PAGE_SIZE < 0) {\n  //     setPagePosition(PAGE_SIZE)\n  //   }\n  //   if (location.href.includes('start')) {\n  //     location.href = location.href.replace('start='+pagePosition, 'start='+(pagePosition - PAGE_SIZE))\n  //   } else {\n  //     location.href = location.href + '?start='+(pagePosition - PAGE_SIZE)\n  //   }\n  //   // setPagePosition(pagePosition + 3)\n  //   // getVaults()\n  // }\n  // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_newest')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_newest', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n\n  var _useState14 = useState(''),\n      acct = _useState14[0],\n      setAcct = _useState14[1];\n\n  useEffect(function () {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [account, acct]);\n\n  var _useState15 = useState(chainId),\n      chain = _useState15[0],\n      setChain = _useState15[1];\n\n  useEffect(function () {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n\n  var showOrHideNavLink = function showOrHideNavLink(path) {\n    return vaultType == path ? true : false;\n  };\n\n  var handleNewNavigationClick = function handleNewNavigationClick(path) {\n    if (!address) {\n      location.href = location.origin + location.pathname + \"?type=\" + path;\n    } else {\n      location.href = location.origin + location.pathname + \"?address=\" + address + \"&type=\" + path;\n    }\n  };\n\n  var handleNftsNavigationClick = function handleNftsNavigationClick() {\n    if (!address) {\n      location.href = location.origin + '/nfts';\n    } else {\n      location.href = location.origin + '/nfts' + \"?address=\" + address;\n    }\n  };\n\n  useEffect(function () {\n    if (shouldFetchData) {\n      setShouldFetchData(false);\n      getVaults();\n    } else {}\n  }, [shouldFetchData]);\n  return __jsx(React.Fragment, null, __jsx(Stack, {\n    pl: \"10\",\n    spacing: 0,\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, __jsx(Button, {\n    isDisabled: showOrHideNavLink('curated'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: function onClick() {\n      handleNewNavigationClick('curated');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, \"Curated\"), __jsx(Button, {\n    isDisabled: showOrHideNavLink('unclaimed'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: function onClick() {\n      handleNewNavigationClick('unclaimed');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, \"Unclaimed\"), __jsx(Button, {\n    isDisabled: showOrHideNavLink('claimed'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: function onClick() {\n      handleNewNavigationClick('claimed');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, \"Claimed\"), __jsx(Button, {\n    isDisabled: showOrHideNavLink('unminted'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: function onClick() {\n      handleNewNavigationClick('unminted');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, \"Not Minted\")), showOrHideNavLink('curated') ? __jsx(Stack, {\n    pl: \"8.7rem\",\n    spacing: 0,\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, liveVaults.length ? __jsx(Button, {\n    isDisabled: false,\n    m: 2,\n    variant: \"ghost\",\n    onClick: function onClick() {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }, \"Unclaimed (curated) \", liveVaults.length) : null, claimedVaults.length ? __jsx(Button, {\n    isDisabled: false,\n    m: 2,\n    variant: \"ghost\",\n    onClick: function onClick() {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, \"Claimed (curated) \", claimedVaults.length) : null, unMintedVaults.length ? __jsx(Button, {\n    isDisabled: false,\n    m: 2,\n    variant: \"ghost\",\n    onClick: function onClick() {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, \"Not Minted (curated) \", unMintedVaults.length) : null) : null, __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 21\n    }\n  }) : '', __jsx(InfiniteScroll, {\n    className: \"infinite-scroll\",\n    scrollableTarget: \"shannon-container\" // height={200}\n    ,\n    dataLength: vaults.length //This is important field to render the next data\n    ,\n    next: !showOrHideNavLink('curated') ? fetchData : function () {},\n    hasMore: hasMore,\n    loader: __jsx(Refreshing, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 19\n      }\n    }),\n    endMessage: __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }, __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 15\n      }\n    }, \"No more vaults to load.\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }, __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }, vaults.length ? vaults.map(function (vault, index) {\n    var pieces = location.pathname.split('/');\n    pieces.pop();\n    var url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId + '&cc=t';\n    var flexSettings = {\n      flex: '1',\n      minW: '200px',\n      maxW: '200px',\n      borderWidth: '1px',\n      // color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    var redirect = function redirect() {\n      setLoadingApi(true);\n      location.href = url;\n    };\n\n    return __jsx(Link, {\n      href: url,\n      className: \"vaultLink\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 15\n      }\n    }, __jsx(Box, _extends({\n      className: \"NFT newest\",\n      key: index\n    }, flexSettings, {\n      onClick: redirect,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }\n    }), __jsx(Text, {\n      fontWeight: \"semibold\",\n      textAlign: \"center\",\n      mt: 2,\n      pl: 2,\n      isTruncated: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 19\n      }\n    }, vault.name, !vault[\"private\"] && vault.totalValue > 0 ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n      align: \"center\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 19\n      }\n    }, __jsx(Embed, {\n      className: \"d-block w-100 NFT-newest-image\",\n      url: vault.image,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }\n    })), __jsx(Stack, {\n      align: \"center\",\n      mt: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 19\n      }\n    }, vault.status == 'claimed' ? __jsx(Text, {\n      color: \"green.500\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 50\n      }\n    }, \"CLAIMED\") : null)));\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  }, \"YOU DON'T SEEM TO HAVE ANY VAULTS.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }\n  }, \"CREATE ONE HERE!\"))))));\n}\n\n_s(MyVaults, \"NDCmAWwQYz2KEIpxBlMx9hEfuAk=\", false, function () {\n  return [useRouter, useWeb3React, useColorMode];\n});\n\n_c = MyVaults;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyVaults\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/MyVaults.tsx"],"names":["Box","Flex","Text","Link","Stack","useColorMode","Button","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","EMBLEM_API","InfiniteScroll","Embed","MyVaults","query","Number","start","pagePosition","setPagePosition","account","chainId","vaults","setVaults","liveVaults","setLiveVaults","unMintedVaults","setUnMintedVaults","claimedVaults","setClaimedVaults","loaded","state","setState","loadingApi","setLoadingApi","address","setAddress","type","vaultType","setVaultType","experimental","setExperimental","colorMode","shouldFetchData","setShouldFetchData","hasMore","setHasMore","offset","setOffset","PAGE_SIZE","getVaults","fetch","method","headers","service","toString","response","json","jsonData","concat","console","log","length","live","unMinted","claimed","fetchData","acct","setAcct","chain","setChain","showOrHideNavLink","path","handleNewNavigationClick","location","href","origin","pathname","handleNftsNavigationClick","textAlign","map","vault","index","pieces","split","pop","url","join","tokenId","flexSettings","flex","minW","maxW","borderWidth","mx","mb","rounded","overflow","borderColor","status","cursor","redirect","name","totalValue","image"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Spinner, useColorMode, Button } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Embed from './Embed'\n\nexport default function MyVaults() {\n  const { query } = useRouter()\n  const [pagePosition, setPagePosition] = useState(Number(query.start) || 0)\n  const { account, chainId } = useWeb3React()\n  const [vaults, setVaults] = useState([])\n  const [liveVaults, setLiveVaults] = useState([])\n  const [unMintedVaults, setUnMintedVaults] = useState([])\n  const [claimedVaults, setClaimedVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [address, setAddress] = useState(query.address)\n  const [vaultType, setVaultType] = useState(query.type || \"unclaimed\")\n  const [experimental, setExperimental] = useState(query.experimental)\n  const { colorMode } = useColorMode()\n  const [shouldFetchData, setShouldFetchData] = useState(false)\n  const [hasMore, setHasMore] = useState(true)\n  const [offset, setOffset] = useState(0)\n  const PAGE_SIZE = 20\n\n  const getVaults = async () => {\n    try {\n      const response = await fetch(EMBLEM_API + '/myvaults/'+(address ? address : account)+'?start='+offset+'&size='+PAGE_SIZE+'&_vercel_no_cache=1', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          '_vercel_no_cache':'1',\n          service: 'evmetadata',\n          chainId: chainId.toString(),\n          vaultType: vaultType.toString()\n        },\n      })\n      let jsonData = await response.json()\n      if (vaultType.toString() != 'curated') {\n        setVaults(vaults.concat(jsonData))\n        setState({ loaded: true })\n        setLoadingApi(false)\n        console.log(\"Records received\", jsonData.length)\n      } else if (vaultType.toString() == 'curated'){\n        setLiveVaults(jsonData.live)\n        setUnMintedVaults(jsonData.unMinted)\n        setClaimedVaults(jsonData.claimed)\n        setVaults(jsonData.live)\n        setState({ loaded: true })\n        setLoadingApi(false)\n        setHasMore(false)\n      } else if (jsonData.length < PAGE_SIZE) {\n        setHasMore(false)\n      }\n    } catch (error) {}\n  }\n\n  const fetchData = async() =>{\n    console.log(offset, PAGE_SIZE, offset+PAGE_SIZE)\n    setOffset(offset+PAGE_SIZE)\n    setShouldFetchData(true)\n  }\n\n  // const more = ()=>{\n  //   if (location.href.includes('start')) {\n  //     location.href = location.href.replace('start='+pagePosition, 'start='+(pagePosition + PAGE_SIZE))\n  //   } else {\n  //     location.href = location.href + '?start='+(pagePosition + PAGE_SIZE)\n  //   }\n  //   // setPagePosition(pagePosition + PAGE_SIZE)\n  //   // getVaults()\n  // }\n\n  // const less = ()=>{\n  //   if (pagePosition - PAGE_SIZE < 0) {\n  //     setPagePosition(PAGE_SIZE)\n  //   }\n  //   if (location.href.includes('start')) {\n  //     location.href = location.href.replace('start='+pagePosition, 'start='+(pagePosition - PAGE_SIZE))\n  //   } else {\n  //     location.href = location.href + '?start='+(pagePosition - PAGE_SIZE)\n  //   }\n  //   // setPagePosition(pagePosition + 3)\n  //   // getVaults()\n  // }\n\n  // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_newest')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_newest', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [chainId, chain])\n\n  const showOrHideNavLink = (path: string)=> {\n    return vaultType == path ? true: false\n  }\n\n  const handleNewNavigationClick = (path)=>{\n    if (!address) {\n      location.href = location.origin + location.pathname + \"?type=\" + path\n    } else {\n      location.href = location.origin + location.pathname + \"?address=\" + address + \"&type=\" + path\n    }\n  }\n\n  const handleNftsNavigationClick = ()=>{\n    if (!address) {\n      location.href = location.origin + '/nfts'\n    } else {\n      location.href = location.origin + '/nfts' + \"?address=\" + address\n    }\n  }\n\n  useEffect(() => {\n    if (shouldFetchData) {\n      setShouldFetchData(false)\n      getVaults()\n    } else {\n    }\n  }, [shouldFetchData])\n\n  return (\n    <>\n    <Stack pl=\"10\" spacing={0} direction=\"row\">\n      <Button isDisabled={showOrHideNavLink('curated')} m={2} variant=\"ghost\" onClick={()=>{handleNewNavigationClick('curated')}}>\n          Curated\n      </Button>\n      <Button isDisabled={showOrHideNavLink('unclaimed')} m={2} variant=\"ghost\" onClick={()=>{handleNewNavigationClick('unclaimed')}}>\n          Unclaimed\n      </Button>\n      <Button isDisabled={showOrHideNavLink('claimed')} m={2} variant=\"ghost\" onClick={()=>{handleNewNavigationClick('claimed')}}>\n          Claimed\n      </Button>\n      <Button isDisabled={showOrHideNavLink('unminted')} m={2} variant=\"ghost\" onClick={()=>{handleNewNavigationClick('unminted')}}>\n          Not Minted\n      </Button>\n      {/* <Button isDisabled={showOrHideNavLink('created')} m={2} variant=\"ghost\" onClick={()=>{handleNewNavigationClick('created')}}>\n          Created by me\n      </Button>\n      <Button isDisabled={false} m={2} variant=\"ghost\" onClick={()=>{handleNftsNavigationClick()}}>\n          Other NFT's\n      </Button> */}\n    </Stack>\n    {showOrHideNavLink('curated')? (\n      <Stack pl=\"8.7rem\" spacing={0} direction=\"row\">\n        {liveVaults.length? (\n          <Button isDisabled={false} m={2} variant=\"ghost\" onClick={()=>{}}>\n            Unclaimed (curated) {liveVaults.length}\n          </Button>\n        ): null}\n        {claimedVaults.length? (\n          <Button isDisabled={false} m={2} variant=\"ghost\" onClick={()=>{}}>\n            Claimed (curated) {claimedVaults.length}\n          </Button>\n        ): null}\n        {unMintedVaults.length? (\n          <Button isDisabled={false} m={2} variant=\"ghost\" onClick={()=>{}}>\n            Not Minted (curated) {unMintedVaults.length}\n          </Button>\n        ): null}\n        \n      </Stack>\n    ): null}\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n        \n        <InfiniteScroll                \n          className=\"infinite-scroll\"\n          scrollableTarget=\"shannon-container\"\n          // height={200}\n          dataLength={vaults.length} //This is important field to render the next data\n          next={!showOrHideNavLink('curated')? fetchData: ()=>{}}\n          hasMore={hasMore}\n          loader={<Refreshing />}\n          endMessage={\n            <p style={{ textAlign: 'center' }}>\n              <b>No more vaults to load.</b> \n            </p>\n          }\n        >\n      <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\" mt={10}>        \n        {vaults.length ? (\n          vaults.map((vault, index) => {\n            let pieces = location.pathname.split('/')\n            pieces.pop()\n            let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId + '&cc=t'\n            const flexSettings = {\n              flex: '1',\n              minW: '200px',\n              maxW: '200px',\n              borderWidth: '1px',\n              // color: 'white',\n              mx: '6',\n              mb: '6',\n              rounded: 'lg',\n              overflow: 'hidden',\n              borderColor: vault.status == 'claimed' ? 'green !important' : '',\n              cursor: 'pointer',\n            }\n            const redirect = function () {\n              setLoadingApi(true)\n              location.href = url\n            }\n            return (\n              <Link href={url} className=\"vaultLink\">\n                <Box className=\"NFT newest\" key={index} {...flexSettings} onClick={redirect}>\n                  <Text fontWeight=\"semibold\" textAlign=\"center\" mt={2} pl={2} isTruncated={true}>\n                    {vault.name}\n                    {!vault.private && vault.totalValue > 0 ? ': ~$' + vault.totalValue : null}\n                  </Text>\n                  <Stack align=\"center\">\n                    <Embed className=\"d-block w-100 NFT-newest-image\" url={vault.image}/>\n                  </Stack>\n                  <Stack align=\"center\" mt={3}>\n                    {vault.status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                  </Stack>\n                </Box>\n              </Link>\n            )\n          })\n          \n        ) : (\n          <Text>\n            YOU DON'T SEEM TO HAVE ANY VAULTS.{' '}\n            <Link color=\"#638cd8\" href=\"../create\">\n              CREATE ONE HERE!\n            </Link>\n          </Text>\n        )}\n        \n      </Flex>\n      </InfiniteScroll>\n    </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}