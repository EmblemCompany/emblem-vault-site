{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Vault.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, useDisclosure } from '@chakra-ui/core';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { validImage } from '../utils';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport Tilt from 'react-tilt';\nimport CryptoJS from 'crypto-js';\nconst AddrModal = dynamic(() => import('./AddrModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./AddrModal')],\n    modules: ['./AddrModal']\n  }\n});\nconst KeysModal = dynamic(() => import('./KeysModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./KeysModal')],\n    modules: ['./KeysModal']\n  }\n});\nexport default function Vault() {\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    query,\n    pathname,\n    replace\n  } = useRouter();\n  const {\n    0: tokenId,\n    1: setTokenId\n  } = useState(query.id);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState('');\n  const {\n    0: vaultDesc,\n    1: setVaultDesc\n  } = useState('');\n  const {\n    0: vaultImage,\n    1: setVaultImage\n  } = useState('');\n  const {\n    0: vaultValues,\n    1: setVaultValues\n  } = useState([]);\n  const {\n    0: vaultAddresses,\n    1: setVaultAddresses\n  } = useState([]);\n  const {\n    0: vaultPrivacy,\n    1: setVaultPrivacy\n  } = useState(false);\n  const {\n    0: vaultChainId,\n    1: setVaultChainId\n  } = useState(null);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: currCoin,\n    1: setCurrCoin\n  } = useState('');\n  const {\n    0: currAddr,\n    1: setCurrAddr\n  } = useState('');\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: allowed,\n    1: setAllowed\n  } = useState(false);\n  const {\n    0: mine,\n    1: setMine\n  } = useState(false);\n  const {\n    0: claiming,\n    1: setClaiming\n  } = useState(false);\n  const {\n    0: status,\n    1: setStatus\n  } = useState('claimed');\n  const {\n    0: claimedBy,\n    1: setClaimedBy\n  } = useState(null);\n  const {\n    0: mnemonic,\n    1: setMnemonic\n  } = useState('');\n  const {\n    0: privKeyBTC,\n    1: setPrivKeyBTC\n  } = useState('');\n  const {\n    0: privKeyETH,\n    1: setPrivKeyETH\n  } = useState('');\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: decryptedEffect,\n    1: setDecryptedEffect\n  } = useState('');\n  const {\n    0: decryptedEffectRunning,\n    1: setDecryptedEffectRunning\n  } = useState(false);\n  const {\n    0: decryptPassword,\n    1: setDecryptPassword\n  } = useState('');\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  const {\n    isOpen: isOpenAddrModal,\n    onOpen: onOpenAddrModal,\n    onClose: onCloseAddrModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenKeysModal,\n    onOpen: onOpenKeysModal,\n    onClose: onCloseKeysModal\n  } = useDisclosure();\n\n  const getVault = async () => {\n    loadCache();\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log(jsonData);\n    setStates(jsonData);\n    saveCache(jsonData);\n    setLoadingApi(false);\n  };\n\n  const setStates = jsonData => {\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setVaultDesc(jsonData.description);\n    setVaultValues(jsonData.values);\n    setVaultDesc(jsonData.description);\n    setVaultAddresses(jsonData.addresses);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : 4);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    }\n\n    setState({\n      loaded: true\n    });\n    let isPvt = jsonData.addresses.filter(item => {\n      return item.address.includes('private:');\n    }).length > 0; // console.log(\"pvt\", isPvt)\n\n    setVaultPrivacy(isPvt);\n  };\n\n  const loadCache = () => {\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  const saveCache = vault => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature\n    });\n    const responce = await fetch(EMBLEM_API + '/verify/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  };\n\n  const getContractStates = async () => {\n    let owner = await emblemContract.ownerOf(tokenId);\n    setMine(owner === account);\n\n    if (mine) {\n      setAllowed(true);\n    } // console.log('status', status, 'claimedBy', claimedBy)\n\n  };\n\n  const handleApprove = async () => {\n    emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library.getSigner(account).signMessage('Claim: ' + tokenId).then(signature => {\n      getKeys(signature, tokenId, result => {\n        // alert('Mnemonic: ' + result.decrypted.phrase)\n        setMnemonic(result.decrypted.phrase);\n        setPrivKeyBTC('BTC KEY');\n        setPrivKeyETH('ETH KEY');\n        onOpenKeysModal(); // console.log(result.decrypted)\n      });\n    });\n  };\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({\n      hash\n    }) => {\n      setClaiming(true);\n      setTimeout(() => {\n        setHash(hash);\n        handleSign();\n        onOpenKeysModal();\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    });\n  };\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return;\n    }\n\n    setDecryptedEffectRunning(true);\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n    var ctnt = 'Decrypting'; // Your text goes here\n\n    var speed = 5; // ms per frame\n\n    var increment = 8; // frames per step. Must be >2\n\n    var clen = ctnt.length;\n    var si = 0;\n    var stri = 0;\n    var block = '';\n    var fixed = '';\n\n    (function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i);\n        } else {\n          setDecryptedEffectRunning(false);\n        }\n\n        nextFrame(i);\n        si = si + 1;\n      }, speed);\n    })(clen * increment + 1);\n\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n        var letter = theLetters.charAt(num);\n        block = block + letter;\n      }\n\n      if (si == increment - 1) {\n        stri++;\n      }\n\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1);\n        si = 0;\n      } // $(\"#output\").html(fixed + block);\n\n\n      setDecryptedEffect(fixed + block);\n      block = '';\n    }\n  };\n\n  useEffect(() => {\n    getVault();\n  }, []);\n  useEffect(() => {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null;\n  });\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n');\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    let ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n    } catch (err) {}\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(item => {\n      let cipherText = item.address.replace('private:', '');\n      item.address = decrypt(cipherText, key);\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }\n  }), __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 23\n    }\n  }) : '', __jsx(Tilt, {\n    className: \"Tilt\",\n    options: {\n      max: experimental ? 19 : 0,\n      scale: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    mt: 15,\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }\n  }, vaultChainId != chainId ? __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"orange.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 17\n    }\n  }, \"BEWARE: Vault is on a different network than you are.\") : null, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 15\n    }\n  }, vaultName), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 15\n    }\n  }, __jsx(Image, {\n    src: validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png',\n    width: \"250px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 17\n    }\n  })), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 19\n    }\n  }, splitDescription(vaultDesc)))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 19\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 21\n    }\n  }, \"Current Contents:\"), vaultPrivacy ? __jsx(React.Fragment, null, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 25\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: e => tryDecrypt(e.target.value),\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 25\n    }\n  })) : vaultValues.length ? vaultValues.map(coin => {\n    return __jsx(Text, {\n      key: coin.name,\n      isTruncated: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 27\n      }\n    }, coin.name, \": \", coin.balance);\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 23\n    }\n  }, \"Nothing in here! Fill 'er up!\"))), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 19\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"center\",\n    spacing: \"1rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 23\n    }\n  }, vaultAddresses.map(addr => {\n    return __jsx(Button, {\n      key: addr.address,\n      onClick: () => {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 29\n      }\n    }, \"Put \", addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin, \" In\");\n  })))) : null, status === 'claimed' && claimedBy === account ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 19\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 21\n    }\n  }, \"Get Keys\")) : __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 19\n    }\n  }, __jsx(Button, _extends({\n    width: \"100%\",\n    as: \"a\"\n  }, {\n    href: 'https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + contractAddresses.emblemVault[vaultChainId] + '/' + tokenId,\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 21\n    }\n  }), mine ? 'Sell/Gift/Send' : 'Make an Offer')), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 17\n    }\n  }, mine ? __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      if (allowed) {\n        handleClaim();\n      } else {\n        handleApprove();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 21\n    }\n  }, allowed ? 'Claim' : 'Approve') : ''))))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      if (claiming) {\n        setHash(null);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 11\n    }\n  }) : null));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Vault.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","useDisclosure","useWeb3React","useEffect","useState","useRouter","Refreshing","Loader","dynamic","validImage","TransactionToast","EMBLEM_API","BURN_ADDRESS","contractAddresses","useContract","Tilt","CryptoJS","AddrModal","KeysModal","Vault","account","chainId","library","query","pathname","replace","tokenId","setTokenId","id","experimental","setExperimental","vaultName","setVaultName","vaultDesc","setVaultDesc","vaultImage","setVaultImage","vaultValues","setVaultValues","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultChainId","setVaultChainId","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","state","setState","loaded","allowed","setAllowed","mine","setMine","claiming","setClaiming","status","setStatus","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","emblemContract","emblemVault","emblemAbi","isOpen","isOpenAddrModal","onOpen","onOpenAddrModal","onClose","onCloseAddrModal","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","getVault","loadCache","responce","fetch","method","headers","service","jsonData","json","console","log","setStates","saveCache","name","image","description","values","addresses","network","isPvt","filter","item","address","includes","length","vault","JSON","parse","localStorage","getItem","setItem","stringify","getKeys","signature","cb","myHeaders","Headers","append","toString","raw","body","redirect","getContractStates","owner","ownerOf","handleApprove","setApprovalForAll","vaultHandler","then","handleSign","getSigner","signMessage","result","decrypted","phrase","handleClaim","transferFrom","setTimeout","startDecryptEffect","theLetters","ctnt","speed","increment","clen","si","stri","block","fixed","rustle","i","nextFrame","pos","num","Math","floor","random","letter","charAt","splitDescription","words","desc","split","trim","tryDecrypt","key","ciphertext","bytes","AES","decrypt","enc","Utf8","decryptAddresses","err","forEach","cipherText","decryptedData","max","scale","e","target","value","map","coin","balance","addr","href","rel"],"mappings":"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","sourcesContent":["import { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, useDisclosure, Spinner } from '@chakra-ui/core'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { validImage } from '../utils'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\nimport CryptoJS from 'crypto-js'\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\n\nexport default function Vault() {\n  const { account, chainId, library } = useWeb3React()\n  const { query, pathname, replace } = useRouter()\n  const [tokenId, setTokenId] = useState(query.id)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [allowed, setAllowed] = useState(false)\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n\n  const getVault = async () => {\n    loadCache()\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    console.log(jsonData)\n    setStates(jsonData)\n    saveCache(jsonData)\n    setLoadingApi(false)\n  }\n\n  const setStates = (jsonData) => {\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setVaultDesc(jsonData.description)\n    setVaultValues(jsonData.values)\n    setVaultDesc(jsonData.description)\n    setVaultAddresses(jsonData.addresses)\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : 4)\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    setState({ loaded: true })\n    let isPvt = jsonData.addresses.filter(item=>{return item.address.includes('private:')}).length > 0\n    // console.log(\"pvt\", isPvt)\n    setVaultPrivacy(isPvt)\n  }\n\n  const loadCache = () => {\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')) // Load vaults from storage before updating from server!\n    if (vault) {\n      setState({ loaded: true })\n      setStates(vault)\n      setLoadingApi(true)\n    }\n  }\n\n  const saveCache = (vault) => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)) // Save new state for later\n  }\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/verify/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    let owner = await emblemContract.ownerOf(tokenId)\n    setMine(owner === account)\n    if (mine) {\n      setAllowed(true)\n    }\n    // console.log('status', status, 'claimedBy', claimedBy)\n  }\n\n  const handleApprove = async () => {\n    emblemContract\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + tokenId)\n      .then((signature) => {\n        getKeys(signature, tokenId, (result) => {\n          // alert('Mnemonic: ' + result.decrypted.phrase)\n          setMnemonic(result.decrypted.phrase)\n          setPrivKeyBTC('BTC KEY')\n          setPrivKeyETH('ETH KEY')\n          onOpenKeysModal()\n          // console.log(result.decrypted)\n        })\n      })\n  }\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({ hash }: { hash: string }) => {\n      setClaiming(true)\n      setTimeout(() => {\n        setHash(hash)\n        handleSign()\n        onOpenKeysModal()\n      }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    })\n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {setDecryptedEffectRunning(false)}\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random())\n        //Get random letter\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      // $(\"#output\").html(fixed + block);\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }  \n\n  useEffect(() => {\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null\n  })\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n')\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {key = decryptPassword}\n    startDecryptEffect()\n    let ciphertext = vaultAddresses[0].address.replace('private:','')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n    } catch(err) {\n      \n    }\n  }\n\n  function decryptAddresses(key){\n    vaultAddresses.forEach(item=>{\n      let cipherText = item.address.replace('private:', '')\n      item.address = decrypt(cipherText, key)\n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText, key){\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  return (\n    <>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n      />\n\n      <Loader loaded={state.loaded}>\n        {loadingApi ? <Refreshing /> : ''}\n        <Tilt className=\"Tilt\" options={{ max: experimental ? 19 : 0, scale: 1 }}>\n          <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n            <Box\n              maxW=\"sm\"\n              borderWidth=\"1px\"\n              borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n              rounded=\"lg\"\n              overflow=\"hidden\"\n              alignItems=\"center\"\n              mt={15}\n              minW={390}\n            >\n              {vaultChainId != chainId ? (\n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"orange.500\"\n                >\n                  BEWARE: Vault is on a different network than you are.\n                </Box>\n              ) : null}\n              <Box\n                mt=\"1\"\n                fontWeight=\"semibold\"\n                as=\"h3\"\n                lineHeight=\"tight\"\n                p={2}\n                textAlign=\"center\"\n                textTransform=\"uppercase\"\n                alignItems=\"center\"\n              >\n                {vaultName}\n              </Box>\n              <Stack align=\"center\">\n                <Image\n                  src={validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png'}\n                  width=\"250px\"\n                />\n              </Stack>\n              <Stack align=\"center\">\n                <Box mt=\"1\" ml=\"4\" lineHeight=\"tight\">\n                  <Text as=\"h4\" ml=\"4\" mr=\"4\">\n                    {splitDescription(vaultDesc)}\n                  </Text>\n                </Box>\n              </Stack>\n              <Box p=\"6\">\n                <Box d=\"flex\" alignItems=\"baseline\">\n                  <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                    <Text as=\"h4\" fontWeight=\"semibold\">\n                      Current Contents:\n                    </Text>\n                    {vaultPrivacy ? (\n                      <>\n                        <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                          {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                        </Text>\n                        <Input\n                          type=\"password\"\n                          id=\"vault-password\"\n                          onChange={(e) => tryDecrypt(e.target.value)}\n                          aria-describedby=\"password-helper-text\"\n                        />\n                      </>\n                    ) : vaultValues.length ? (\n                      vaultValues.map((coin) => {\n                        return (\n                          <Text key={coin.name} isTruncated>\n                            {coin.name}: {coin.balance}\n                          </Text>\n                        )\n                      })\n                    ) : (\n                      <Text>Nothing in here! Fill 'er up!</Text>\n                    )}\n                  </Box>\n                </Box>\n                {!vaultPrivacy ? (\n                  <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                    <Stack direction=\"row\" align=\"center\" spacing=\"1rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                      <ButtonGroup spacing={4}>\n                        {vaultAddresses.map((addr) => {\n                          return (\n                            <Button\n                              key={addr.address}\n                              onClick={() => {\n                                setCurrCoin(addr.coin)\n                                setCurrAddr(addr.address)\n                                onOpenAddrModal()\n                              }}\n                            >\n                              Put {addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin} In\n                            </Button>\n                          )\n                        })}\n                      </ButtonGroup>\n                    </Stack>\n                  </Box>\n                ) : null}\n                {status === 'claimed' && claimedBy === account ? (\n                  <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                    <Button width=\"100%\" onClick={handleSign}>\n                      Get Keys\n                    </Button>\n                  </Box>\n                ) : (\n                  <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                    <Button\n                      width=\"100%\"\n                      as=\"a\"\n                      {...{\n                        href:\n                          'https://' +\n                          (vaultChainId == 4 ? 'rinkeby.' : '') +\n                          'opensea.io/assets/' +\n                          contractAddresses.emblemVault[vaultChainId] +\n                          '/' +\n                          tokenId,\n                        target: '_blank',\n                        rel: 'noopener noreferrer',\n                      }}\n                    >\n                      {mine ? 'Sell/Gift/Send' : 'Make an Offer'}\n                    </Button>\n                  </Box>\n                )}\n                <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                  {mine ? (\n                    <Button\n                      width=\"100%\"\n                      onClick={() => {\n                        if (allowed) {\n                          handleClaim()\n                        } else {\n                          handleApprove()\n                        }\n                      }}\n                    >\n                      {allowed ? 'Claim' : 'Approve'}\n                    </Button>\n                  ) : (\n                    ''\n                  )}\n                </Box>\n              </Box>\n            </Box>\n          </Flex>\n        </Tilt>\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming) {\n                setHash(null)\n              }\n            }}\n          />\n        ) : null}\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}