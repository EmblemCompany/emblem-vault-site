{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport BackgroundVideo from './BackgroundVideo';\nimport { Flex, IconButton, useDisclosure, Badge, LightMode, Stack, Box, Button, Popover, PopoverTrigger, PopoverContent, PopoverArrow, PopoverCloseButton, PopoverBody, Text } from '@chakra-ui/core';\nimport { useWeb3React } from '@web3-react/core';\nimport dynamic from 'next/dynamic';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport { useEagerConnect, useQueryParameters, useUSDETHPrice } from '../hooks';\nimport { useTransactions, useFirstToken, useSecondToken, useShowUSD } from '../context';\nimport ColorBox from './ColorBox';\nimport Account from './Account';\nimport { TransactionToast } from './TransactionToast';\nimport TokenBalance from './TokenBalance';\nimport { WETH, ChainId } from '@uniswap/sdk';\nimport WalletConnect from './WalletConnect';\nimport { QueryParameters } from '../constants';\nimport { Coval, CovalTest, CovalTestMatic, CovalMatic, CovalxDai, CovalBSC, CovalFantom, CovalAurora, CovalGÖRLI } from '../tokens';\nimport transakSDK from '@transak/transak-sdk';\nimport { useRouter } from 'next/router'; // import Gun from 'gun';\n// import 'gun/sea'\n// import { GunProvider } from 'react-gun';\n\nconst Settings = dynamic(() => import('./Settings'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./Settings')],\n    modules: ['./Settings']\n  }\n});\nexport default function Layout({\n  children\n}) {\n  const {\n    chainId,\n    account\n  } = useWeb3React();\n  const isTestnet = typeof chainId === 'number' && chainId !== 1;\n  const {\n    isOpen: isOpenSettings,\n    onOpen: onOpenSettings,\n    onClose: onCloseSettings\n  } = useDisclosure();\n  const [firstToken] = useFirstToken();\n  const [secondToken] = useSecondToken();\n  const [showUSD, setShowUSD] = useShowUSD(); // const [gun, setGun] = useState(Gun(['https://emblem-gun.herokuapp.com/gun']))\n\n  const [transactions] = useTransactions(); // automatically try connecting to the injected connector on pageload\n\n  const triedToEagerConnect = useEagerConnect();\n  const queryParameters = useQueryParameters();\n  const requiredChainId = queryParameters[QueryParameters.CHAIN];\n  const {\n    query\n  } = useRouter();\n  const {\n    0: useLayout,\n    1: setUseLayout\n  } = useState(true);\n  useEffect(() => {\n    if ((query.noLayout && query.noLayout == 'true' || query.slideshowOnly && query.slideshowOnly == 'true') && useLayout) {\n      setUseLayout(false);\n    }\n  });\n  const USDETHPrice = useUSDETHPrice();\n  let transak;\n\n  const initializeTransak = (address, coin) => {\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',\n      // Your API Key\n      environment: 'PRODUCTION',\n      // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '',\n      // Your customer's wallet address\n      themeColor: '000000',\n      // App theme color\n      fiatCurrency: 'USD',\n      // INR/GBP\n      // fiatAmount: 350,\n      email: '',\n      // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px' // networks: 'matic,bsc,eth,mainnet'\n\n    }); // To get all the events\n\n    transak.on(transak.ALL_EVENTS, data => {\n      console.log(data);\n    }); // This will trigger when the user marks payment is made.\n\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, orderData => {\n      console.log(orderData);\n      transak.close();\n    });\n    transak.init();\n  };\n\n  const showOrHideNavLink = path => {\n    return location.pathname.includes(path) ? 'none' : 'block';\n  };\n\n  const handleNewNavigationClick = path => {\n    location.href = location.origin + '/' + path;\n  };\n\n  const handleSearchClick = () => {\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n    location.href = location.origin + pieces.join('/') + '/find';\n  };\n\n  const handleNavigationclick = () => {\n    console.log(location.pathname);\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n\n    if (location.pathname.includes('vaultlist')) {\n      location.href = location.origin + pieces.join('/') + '/create';\n    } else {\n      location.href = location.origin + pieces.join('/') + '/vaultlist';\n    }\n  };\n\n  const handleNavigationFeaturedclick = () => {\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n\n    if (location.pathname.includes('featured')) {\n      location.href = location.origin + pieces.join('/') + '/create';\n    } else {\n      location.href = location.origin + pieces.join('/') + '/featured';\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Settings, {\n    isOpen: isOpenSettings,\n    onClose: onCloseSettings\n  }), __jsx(BackgroundVideo, null), __jsx(ColorBox, {\n    as: Flex,\n    flexDirection: \"column\",\n    borderColor: Number(chainId) === 137 ? \"blue.500\" : Number(chainId) === 1 ? \"blue.500\" : Number(chainId) === 56 ? \"orange\" : \"orange.500\",\n    borderWidth: !useLayout ? '0em' : isTestnet ? '.5rem' : '.5rem',\n    minHeight: \"100vh\",\n    maxHeight: \"100vh\"\n  }, useLayout ? __jsx(Flex, {\n    justifyContent: \"space-between\",\n    flexShrink: 0,\n    overflowX: \"auto\",\n    p: \"1rem\"\n  }, __jsx(Stack, {\n    spacing: 0,\n    direction: \"row\"\n  }, __jsx(IconButton, {\n    m: 2,\n    icon: \"settings\",\n    variant: \"ghost\",\n    onClick: onOpenSettings,\n    \"aria-label\": \"Settings\"\n  }), __jsx(IconButton, {\n    m: 2,\n    icon: \"search\",\n    variant: \"ghost\",\n    onClick: handleSearchClick,\n    \"aria-label\": \"Search\"\n  }), __jsx(Button, {\n    display: showOrHideNavLink('create'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      handleNewNavigationClick('create');\n    }\n  }, \"Create\"), __jsx(Button, {\n    display: showOrHideNavLink('createcurated'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      handleNewNavigationClick('createcurated');\n    }\n  }, \"Create Curated\"), __jsx(Button, {\n    display: showOrHideNavLink('vaults'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      handleNewNavigationClick('vaults');\n    }\n  }, \"My Vaults\"), __jsx(Button, {\n    display: showOrHideNavLink('featured'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      handleNewNavigationClick('featured');\n    }\n  }, \"Featured\"), __jsx(Button, {\n    display: showOrHideNavLink('newest'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      handleNewNavigationClick('newest');\n    }\n  }, \"Newest\"), __jsx(Button, {\n    m: 2,\n    variant: \"ghost\",\n    onClick: () => {\n      location.href = \"https://emblem-vault.gitbook.io/docs/\";\n    }\n  }, \"Info\")), __jsx(Account, {\n    triedToEagerConnect: triedToEagerConnect\n  })) : null, useLayout ? __jsx(Stack, {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    m: isTestnet ? '1.5rem' : '1rem',\n    mt: isTestnet ? '5rem' : '4.5rem',\n    alignItems: \"flex-end\",\n    spacing: \"1rem\",\n    zIndex: 2\n  }, typeof account !== 'string' ? !triedToEagerConnect || (typeof chainId === 'number' ? chainId !== ChainId.MAINNET : typeof requiredChainId === 'number' && requiredChainId !== ChainId.MAINNET) ? null : __jsx(Box, null, __jsx(WalletConnect, null)) : // [DEFAULT_TOKENS.filter((tokenrrr) => tokenrrr.chainId == chainId)[0], firstToken, secondToken]\n  [chainId == 1 ? Coval : chainId == 5 ? CovalGÖRLI : chainId == 80001 ? CovalTestMatic : chainId == 137 ? CovalMatic : chainId == 100 ? CovalxDai : chainId == 56 ? CovalBSC : chainId == 250 ? CovalFantom : chainId == 1313161554 ? CovalAurora : CovalTest, firstToken ? firstToken.symbol != 'Coval' ? firstToken : null : null, secondToken ? secondToken.symbol != 'Coval' ? secondToken : null : null].filter(token => token).filter(token => !(token !== null && token !== void 0 && token.equals(WETH[token.chainId]))).map(token => __jsx(Box, {\n    key: token === null || token === void 0 ? void 0 : token.address\n  }, __jsx(TokenBalance, {\n    token: token\n  })))) : null, __jsx(Flex, {\n    id: \"shannon-container\",\n    flexGrow: 1,\n    direction: \"column\",\n    overflow: \"auto\"\n  }, children, useLayout ? null : __jsx(Account, {\n    triedToEagerConnect: triedToEagerConnect\n  })), useLayout ? __jsx(Flex, {\n    minHeight: \"1.5rem\"\n  }, typeof chainId === 'number'\n  /*&& chainId !== 1*/\n  ? __jsx(LightMode, null, __jsx(Badge, {\n    variant: \"solid\",\n    variantColor: chainId == 137 || chainId == 1 ? 'blue' : chainId == Number(56) || Number(5) ? 'orange' : 'orange'\n    /*isTestnet ? 'blue' : undefined*/\n    ,\n    fontSize: \"1rem\",\n    style: {\n      borderTopLeftRadius: 0,\n      borderBottomRightRadius: 0,\n      borderBottomLeftRadius: 0\n    }\n  }, \"On \", CHAIN_ID_NAMES[chainId].toLowerCase())) : null) : null, transactions.length > 0 && __jsx(Stack, {\n    position: \"absolute\",\n    bottom: 0,\n    right: 0,\n    m: isTestnet ? '1.5rem' : '1rem',\n    alignItems: \"flex-end\",\n    spacing: \"1rem\",\n    zIndex: 2\n  }, transactions.filter(transaction => transaction.chainId === chainId).map(({\n    hash\n  }) => __jsx(Box, {\n    key: hash\n  }, __jsx(TransactionToast, {\n    hash: hash\n  })))), __jsx(Stack, {\n    position: \"absolute\",\n    bottom: 1,\n    left: 100,\n    alignItems: \"center\",\n    align: \"center\"\n  }, __jsx(Popover, {\n    usePortal: true\n  }, __jsx(PopoverTrigger, null, __jsx(IconButton, {\n    size: \"sm\",\n    icon: \"warning-2\",\n    \"aria-label\": \"\"\n  })), __jsx(PopoverContent, {\n    zIndex: 4,\n    width: \"5000px\"\n  }, __jsx(PopoverArrow, null), __jsx(PopoverCloseButton, null), __jsx(PopoverBody, null, __jsx(Text, {\n    fontSize: \"xs\"\n  }, \"Emblem Vault is experimental. Before purchasing $COVAL or $FUEL tokens, you must ensure that the nature, complexity and risks inherent in the trading of cryptocurrency are suitable for your objectives in light of your circumstances and financial position. Emblem, Emblem Vault, $COVAL, and/or $FUEL shall be under no obligation to purchase or to broker the purchase back from you of your cryptocurrency in circumstances where there is no viable market for the purchase of the same. The products and services presented on this website may only be purchased in jurisdictions in which their marketing and distribution are authorized. Using or Creating Vaults is done at your own risk.\"))))), useLayout ? __jsx(Stack, {\n    position: \"absolute\",\n    bottom: 1,\n    right: 1,\n    p: isTestnet ? '1.5rem' : '1rem',\n    alignItems: \"flex-end\",\n    spacing: \"1rem\"\n  }, __jsx(Button // as=\"a\"\n  // {...{\n  //   href:\n  //     location.origin +\n  //     '/buy?chain=' +\n  //     chainId +\n  //     '&output=0x3D658390460295FB963f54dC0899cfb1c30776Df&input=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  //   target: '_blank',\n  //   rel: 'noopener noreferrer',\n  // }}\n  , {\n    onClick: () => {\n      location.href = \"https://app.uniswap.org/#/swap?outputCurrency=0x3d658390460295fb963f54dc0899cfb1c30776df\";\n    }\n  }, \"Buy $Coval\")) : null));\n}","map":null,"metadata":{},"sourceType":"module"}