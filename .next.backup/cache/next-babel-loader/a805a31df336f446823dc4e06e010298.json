{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Link, Stack, Button, FormControl, Input, FormHelperText, Select } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { Embed } from './Embed';\nimport { useContract } from '../hooks';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { TransactionToast } from './TransactionToast';\nexport default function NFTrade() {\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState([]),\n      vaults = _useState[0],\n      setVaults = _useState[1];\n\n  var _useState2 = useState([]),\n      myVaults = _useState2[0],\n      setMyVaults = _useState2[1];\n\n  var _useState3 = useState(false),\n      myVaultsLoaded = _useState3[0],\n      setMyVaultsLoaded = _useState3[1];\n\n  var _useState4 = useState({\n    loaded: false\n  }),\n      state = _useState4[0],\n      setState = _useState4[1];\n\n  var _useState5 = useState(false),\n      loadingApi = _useState5[0],\n      setLoadingApi = _useState5[1];\n\n  var _useState6 = useState(null),\n      hash = _useState6[0],\n      setHash = _useState6[1];\n\n  var _useState7 = useState(query.q),\n      q = _useState7[0],\n      setQ = _useState7[1];\n\n  var _useState8 = useState(q || ''),\n      temp_q = _useState8[0],\n      setTempQ = _useState8[1];\n\n  var _useState9 = useState(query.network || null),\n      network = _useState9[0],\n      setNetwork = _useState9[1];\n\n  var _useState10 = useState(query.address),\n      address = _useState10[0],\n      setAddress = _useState10[1];\n\n  var _useState11 = useState(query.experimental),\n      experimental = _useState11[0],\n      setExperimental = _useState11[1];\n\n  var _useState12 = useState(null),\n      offeringTokenId = _useState12[0],\n      setOfferingTokenId = _useState12[1];\n\n  var _useState13 = useState(null),\n      offeringTokenAllowed = _useState13[0],\n      setOfferingTokenAllowed = _useState13[1];\n\n  var _useState14 = useState(null),\n      acceptingOfferingIndex = _useState14[0],\n      setAcceptingOfferIndex = _useState14[1];\n\n  var _useState15 = useState(null),\n      acceptingTokenAllowed = _useState15[0],\n      setAcceptingTokenAllowed = _useState15[1];\n\n  var _useState16 = useState(null),\n      acceptingTokenId = _useState16[0],\n      setAcceptingTokenId = _useState16[1];\n\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  var nftradeContract = useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true);\n\n  var getVaults = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var response, jsonData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLoadingApi(true);\n              _context2.prev = 1;\n              _context2.next = 4;\n              return fetch(EMBLEM_API + '/search', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                },\n                body: JSON.stringify({\n                  q: q,\n                  network: network == \"null\" ? null : network,\n                  external: true\n                })\n              });\n\n            case 4:\n              response = _context2.sent;\n              _context2.next = 7;\n              return response.json();\n\n            case 7:\n              jsonData = _context2.sent;\n              jsonData = jsonData.records;\n              setState({\n                loaded: true\n              });\n              jsonData.forEach( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, index) {\n                  var owner, offerCount, mine, offers;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return checkOwner(data.tokenId);\n\n                        case 2:\n                          owner = _context.sent;\n                          _context.next = 5;\n                          return getOfferCount(data.tokenId);\n\n                        case 5:\n                          offerCount = _context.sent;\n                          mine = owner === account;\n                          _context.next = 9;\n                          return getOffers(offerCount, data.tokenId);\n\n                        case 9:\n                          offers = _context.sent;\n\n                          // debugger\n                          if (offers.length < offerCount) {\n                            offerCount = offers.length;\n                          }\n\n                          jsonData[index].offers = offers;\n                          jsonData[index].mine = mine;\n                          jsonData[index].offerCount = offerCount;\n\n                          if (index + 1 === jsonData.length) {\n                            // debugger\n                            setVaults(jsonData);\n                            setLoadingApi(false);\n                          }\n\n                        case 15:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x, _x2) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n              _context2.next = 15;\n              break;\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](1);\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 13]]);\n    }));\n\n    return function getVaults() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getMyVaults = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var response, jsonData;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log(\"Getting My Vaults\");\n              setMyVaultsLoaded(true);\n              _context3.prev = 2;\n              _context3.next = 5;\n              return fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental ? '?experimental=true' : ''), {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  chainId: chainId.toString()\n                }\n              });\n\n            case 5:\n              response = _context3.sent;\n              _context3.next = 8;\n              return response.json();\n\n            case 8:\n              jsonData = _context3.sent;\n              setMyVaults(jsonData); // console.log(jsonData)\n\n              _context3.next = 14;\n              break;\n\n            case 12:\n              _context3.prev = 12;\n              _context3.t0 = _context3[\"catch\"](2);\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 12]]);\n    }));\n\n    return function getMyVaults() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    // console.log(q, state, loadingApi)\n    nftradeStuff();\n\n    if (q && !state.loaded && !loadingApi) {\n      console.log(\"Load Search\");\n      getVaults();\n    }\n  });\n\n  function nftradeStuff() {\n    return _nftradeStuff.apply(this, arguments);\n  }\n\n  function _nftradeStuff() {\n    _nftradeStuff = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (myVaultsLoaded) {\n                _context4.next = 5;\n                break;\n              }\n\n              _context4.next = 3;\n              return getMyVaults();\n\n            case 3:\n              _context4.next = 6;\n              break;\n\n            case 5:\n              null;\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _nftradeStuff.apply(this, arguments);\n  }\n\n  function getOfferCount(_x3) {\n    return _getOfferCount.apply(this, arguments);\n  }\n\n  function _getOfferCount() {\n    _getOfferCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(tokenId) {\n      var offerCount;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return nftradeContract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId);\n\n            case 2:\n              offerCount = _context5.sent;\n              return _context5.abrupt(\"return\", Number(offerCount));\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _getOfferCount.apply(this, arguments);\n  }\n\n  function getOffers(_x4, _x5) {\n    return _getOffers.apply(this, arguments);\n  }\n\n  function _getOffers() {\n    _getOffers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(count, tokenId) {\n      var offers, i, offer;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              offers = [];\n              i = 0;\n\n            case 2:\n              if (!(i < count)) {\n                _context6.next = 10;\n                break;\n              }\n\n              _context6.next = 5;\n              return nftradeContract.getOffer(contractAddresses.emblemVault[chainId], tokenId, i);\n\n            case 5:\n              offer = _context6.sent;\n\n              // debugger\n              if (offer.nft !== \"0x0000000000000000000000000000000000000000\") {\n                offers.push(offer);\n              }\n\n            case 7:\n              i++;\n              _context6.next = 2;\n              break;\n\n            case 10:\n              console.log('offers', offers);\n              return _context6.abrupt(\"return\", offers);\n\n            case 12:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _getOffers.apply(this, arguments);\n  }\n\n  function checkOfferingAllowance(_x6) {\n    return _checkOfferingAllowance.apply(this, arguments);\n  }\n\n  function _checkOfferingAllowance() {\n    _checkOfferingAllowance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(tokenId) {\n      var allowed;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return emblemContract.getApproved(tokenId);\n\n            case 2:\n              allowed = _context7.sent;\n              setOfferingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\");\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _checkOfferingAllowance.apply(this, arguments);\n  }\n\n  function checkAcceptingAllowance(_x7) {\n    return _checkAcceptingAllowance.apply(this, arguments);\n  }\n\n  function _checkAcceptingAllowance() {\n    _checkAcceptingAllowance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(tokenId) {\n      var allowed;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return emblemContract.getApproved(tokenId);\n\n            case 2:\n              allowed = _context8.sent;\n              setAcceptingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\");\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _checkAcceptingAllowance.apply(this, arguments);\n  }\n\n  function checkOwner(_x8) {\n    return _checkOwner.apply(this, arguments);\n  }\n\n  function _checkOwner() {\n    _checkOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(tokenId) {\n      var owner;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              //debugger\n              console.log(\"checking owner for\", tokenId);\n              _context9.next = 3;\n              return emblemContract.ownerOf(tokenId)[\"catch\"](function () {});\n\n            case 3:\n              owner = _context9.sent;\n              return _context9.abrupt(\"return\", owner);\n\n            case 5:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _checkOwner.apply(this, arguments);\n  }\n\n  var approveOffer = function approveOffer(tokenId) {\n    // debugger\n    console.log(\"checking offer for\", tokenId);\n    emblemContract.approve(contractAddresses.nftrade[chainId], tokenId && typeof tokenId === \"string\" ? tokenId : offeringTokenId).then(function (_ref4) {\n      var hash = _ref4.hash;\n      setHash(hash);\n    }); // .catch((error: ErrorWithCode) => {\n    //   if (error?.code == 4001) {\n    //     setApproving(false)\n    //   }\n    // })\n  };\n\n  var makeOffer = function makeOffer(tokenId) {\n    ;\n    nftradeContract.addOffer(contractAddresses.emblemVault[chainId], offeringTokenId, contractAddresses.emblemVault[chainId], tokenId).then(function (_ref5) {\n      var hash = _ref5.hash;\n      setHash(hash);\n    }); // .catch((error: ErrorWithCode) => {\n    //   if (error?.code == 4001) {\n    //     setApproving(false)\n    //   }\n    // })\n  };\n\n  var acceptOffer = function acceptOffer() {\n    ;\n    nftradeContract.acceptOffer(contractAddresses.emblemVault[chainId], acceptingTokenId, Number(acceptingOfferingIndex)).then(function (_ref6) {\n      var hash = _ref6.hash;\n      setHash(hash);\n    }); // .catch((error: ErrorWithCode) => {\n    //   if (error?.code == 4001) {\n    //     setApproving(false)\n    //   }\n    // })\n  };\n\n  var rejectOffer = function rejectOffer() {\n    ;\n    nftradeContract.rejectOffer(contractAddresses.emblemVault[chainId], acceptingTokenId, Number(acceptingOfferingIndex)).then(function (_ref7) {\n      var hash = _ref7.hash;\n      setHash(hash);\n    }); // .catch((error: ErrorWithCode) => {\n    //   if (error?.code == 4001) {\n    //     setApproving(false)\n    //   }\n    // })\n  };\n\n  return __jsx(Loader, {\n    loaded: state.loaded || !q\n  }, loadingApi ? __jsx(Refreshing, null) : '', __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\"\n  }, __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\"\n  }, __jsx(Input, {\n    type: \"text\",\n    id: \"search-query\",\n    width: \"45%\",\n    \"aria-describedby\": \"search-query-helper-text\",\n    placeholder: \"0xdeadbeef\",\n    maxLength: 42,\n    value: temp_q,\n    onChange: function onChange(e) {\n      return setTempQ(e.target.value);\n    }\n  }), __jsx(Button, {\n    m: 2,\n    onClick: function onClick() {\n      setState({\n        loaded: false\n      });\n      setQ(temp_q);\n      var loc = location.href.split('?')[0] + \"?q=\" + temp_q + \"&network=\" + network;\n      window.history.pushState(temp_q, 'Title', loc);\n    }\n  }, \"Search\"), __jsx(Select, {\n    w: \"45%\",\n    placeholder: \"All Networks\",\n    value: network || '',\n    onChange: function onChange(e) {\n      setNetwork(e.target.value);\n      console.log(e.target.value);\n    }\n  }, __jsx(\"option\", {\n    value: \"matic\"\n  }, \"Matic\"), __jsx(\"option\", {\n    value: \"mainnet\"\n  }, \"Ethereum Mainnet\"), __jsx(\"option\", {\n    value: \"rinkeby\"\n  }, \"Ethereum Rinkeby\"))), __jsx(FormHelperText, {\n    id: \"search-query-helper-text\"\n  }, \"Search for Emblem Vaults by: Name, Description, Type, Contents\"))), __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10\n  }, vaults.length ? vaults.map(function (vault, index) {\n    var pieces = location.pathname.split('/');\n    pieces.pop();\n    var url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId;\n    var flexSettings = {\n      flex: '1',\n      minW: '300px',\n      maxW: '300px',\n      borderWidth: '1px',\n      color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    var redirect = function redirect() {\n      location.href = url;\n    };\n\n    return __jsx(Stack, {\n      key: \"stack_\" + index\n    }, __jsx(Box, _extends({\n      key: index\n    }, flexSettings), __jsx(Text, {\n      fontWeight: \"semibold\",\n      textAlign: \"center\",\n      mt: 2\n    }, vault.name, !vault[\"private\"] ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n      align: \"center\"\n    }, __jsx(Embed, {\n      url: vault.image\n    })), __jsx(Box, {\n      d: \"flex\",\n      alignItems: \"baseline\"\n    }, __jsx(Stack, null, __jsx(Box, {\n      onClick: redirect,\n      width: \"100%\",\n      color: \"gray.500\",\n      fontWeight: \"semibold\",\n      letterSpacing: \"wide\",\n      fontSize: \"sm\",\n      ml: \"2\"\n    }, vault[\"private\"] ? __jsx(React.Fragment, null, __jsx(Text, null, \"Contents hidden. Click to view the vault and unlock values.\")) : vault.values.length ? vault.values.map(function (coin, index) {\n      if (index < 4) return __jsx(Text, {\n        key: coin.name,\n        isTruncated: true\n      }, coin.name, \": \", coin.balance);else if (index == 4) return __jsx(Text, {\n        fontWeight: \"bold\",\n        mt: 2\n      }, \"... Click to see the rest ...\");\n    }) : __jsx(Text, null, \"Nothing in here! \", __jsx(\"br\", null), \"Click to fill 'er up!\"), __jsx(Text, null, \"Offers: \", vault.offerCount)), __jsx(Box, _extends({\n      key: \"offer_\" + index\n    }, flexSettings), !vault.mine ? __jsx(Select, {\n      p: 2,\n      m: 2,\n      w: \"94%\",\n      placeholder: \"Offer NFT\",\n      onChange: function onChange(e) {\n        var tokenId = e.target.value; // console.log(e.target.value)\n\n        setOfferingTokenId(tokenId);\n        checkOfferingAllowance(tokenId);\n      }\n    }, myVaults.map(function (vault, index) {\n      return __jsx(\"option\", {\n        key: index,\n        value: vault.tokenId\n      }, vault.name);\n    })) : __jsx(Select, {\n      p: 2,\n      m: 2,\n      w: \"94%\",\n      placeholder: \"Offers\",\n      onChange: function onChange(e) {\n        var index = e.target.value;\n        console.log(e.target.value);\n        setAcceptingOfferIndex(index);\n        setAcceptingTokenId(vault.tokenId);\n        checkAcceptingAllowance(vault.tokenId);\n      }\n    }, vault.offers.map(function (offer, index) {\n      return __jsx(\"option\", {\n        key: index,\n        value: index\n      }, Number(offer.tokenId));\n    })), offeringTokenId && !vault.mine ? offeringTokenAllowed ? __jsx(Button, {\n      m: 2,\n      onClick: function onClick() {\n        makeOffer(vault.tokenId);\n      }\n    }, \"Make Offer\") : __jsx(Button, {\n      m: 2,\n      w: \"94%\",\n      onClick: approveOffer\n    }, \"Approve\") : null, acceptingOfferingIndex && vault.mine ? acceptingTokenAllowed ? __jsx(Button, {\n      m: 2,\n      w: \"94%\",\n      onClick: function onClick() {\n        acceptOffer();\n      }\n    }, \"Accept Offer\") : __jsx(Button, {\n      m: 2,\n      onClick: function onClick() {\n        approveOffer(vault.tokenId);\n      }\n    }, \"Approve\") : null, acceptingOfferingIndex && vault.mine ? __jsx(Button, {\n      m: 2,\n      w: \"94%\",\n      onClick: function onClick() {\n        rejectOffer();\n      }\n    }, \"Reject Offer\") : null))), __jsx(Stack, {\n      align: \"center\",\n      mt: 3\n    }, vault.status == 'claimed' ? __jsx(Text, {\n      color: \"green.500\"\n    }, \"CLAIMED\") : null)));\n  }) : __jsx(Text, null, \"Search Resulted in 0 Vaults.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\"\n  }, \"CREATE ONE HERE!\"))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      setHash(null);\n    }\n  }) : null);\n}","map":null,"metadata":{},"sourceType":"module"}