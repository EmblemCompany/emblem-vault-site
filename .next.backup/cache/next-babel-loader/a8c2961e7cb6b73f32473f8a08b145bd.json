{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { validImage } from '../utils';\nimport { Image } from '@chakra-ui/core';\nimport SketchFab from './embed/SketchFab';\nimport ShaderToy from './embed/ShaderToy';\nimport Bandcamp from './embed/Bandcamp';\nimport SoundCloud from './embed/SoundCloud';\nimport Clyp from './embed/Clyp';\nimport Sketchup from './embed/Sketchup';\nimport Clara from './embed/Clara';\nimport MyMiniFactory from './embed/MyMiniFactory';\nimport { Audius } from './embed/Audius';\nimport { Generic } from './embed/Generic';\nimport Youtube from './embed/Youtube';\nimport Vimeo from './embed/Vimeo';\nexport class Embed extends Component {\n  render() {\n    let url = this.props.url || \"\";\n    let hash = url.replace(\"ipfs://\", \"\").split(\"?\")[0].split(\"&\")[0];\n\n    if (url.includes(\"ipfs://\")) {\n      url = \"https://gateway.ipfs.io/ipfs/\" + hash;\n      getIPFSImage(hash);\n    }\n\n    if (url.includes('image-scale')) {\n      url = url + '&size=400';\n    }\n\n    return __jsx(React.Fragment, null, url.includes('sketchfab.com/') ? __jsx(SketchFab, {\n      url: url\n    }) : url.includes('shadertoy.com/') ? __jsx(ShaderToy, {\n      url: url\n    }) : url.includes('bandcamp.com/') ? __jsx(Bandcamp, {\n      url: url\n    }) : url.includes('soundcloud.com/') ? __jsx(SoundCloud, {\n      url: url\n    }) : url.includes('clyp.it/') ? __jsx(Clyp, {\n      url: url\n    }) : url.includes('sketchup.com/') ? __jsx(Sketchup, {\n      url: url\n    }) : url.includes('clara.io/') ? __jsx(Clara, {\n      url: url\n    }) : url.includes('myminifactory.com/') ? __jsx(MyMiniFactory, {\n      url: url\n    }) : url.includes('audius.co/') ? __jsx(Audius, {\n      url: url\n    }) : url.includes('youtube.com') ? __jsx(Youtube, {\n      url: url\n    }) : url.includes('vimeo.com') ? __jsx(Vimeo, {\n      url: url\n    }) : url.includes('ipfs.io') ? __jsx(Image, {\n      p: \"20px\",\n      h: \"100%\",\n      className: this.props.className + \" \" + hash || \"d-block w-100\",\n      src: url,\n      width: \"250px\",\n      maxWidth: \"250px\"\n    }) : url.includes('image-scaler.vercel') ? __jsx(Image, {\n      p: \"20px\",\n      h: \"100%\",\n      className: this.props.className || \"d-block w-100\",\n      src: url,\n      width: \"250px\",\n      maxWidth: \"250px\"\n    }) : url.includes('/dynamic/') || url.includes('arweave') || url.includes('https://s3.amazonaws.com/') || url.includes('googleusercontent.com') || url.includes('ipfs.io') || url.includes('framed/') || url.includes('.png') || url.includes('.jpg') || url.includes('.jpeg') || url.includes('.gif') || url.includes('.svg') || url.includes('data:image') ? __jsx(Image, {\n      p: \"20px\",\n      h: \"100%\",\n      className: this.props.className || \"d-block w-100\",\n      src: validImage(url) ? url : 'https://raw.githubusercontent.com/EmblemCompany/Coval-Site/master/public/coval-logo.png'\n      /*'https://circuitsofvalue.com/public/coval-logo.png'*/\n      ,\n      width: \"250px\",\n      maxWidth: \"250px\"\n    }) : __jsx(Generic, {\n      url: url\n    }));\n  }\n\n}\n\nconst getIPFSImage = async function (hash) {\n  const responce = await fetch('https://gateway.ipfs.io/ipfs/' + hash, {\n    method: 'GET'\n  });\n  let jsonData = await responce.text();\n\n  if (jsonData.includes(\"data:image\")) {\n    const preview = document.querySelector('img.' + hash);\n    preview.src = jsonData;\n    console.log(jsonData);\n  }\n};\n\nexport default Embed;","map":null,"metadata":{},"sourceType":"module"}