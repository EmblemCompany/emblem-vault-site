{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/CreateCurated.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FormControl, FormLabel, Stack, Tabs, TabList, TabPanels, Tab, TabPanel, Box, Flex, Button, ButtonGroup, Divider, Alert, AlertIcon, useDisclosure, Select } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, contractAddresses, curatedContracts, curatedAssets } from '../constants';\nimport { useContract } from '../hooks';\nimport { isETHAddress } from '../utils';\nimport transakSDK from '@transak/transak-sdk'; // doka\n\nimport { // editor\nlocale_en_gb, createDefaultImageReader, createDefaultImageWriter, // plugins\nsetPlugins, plugin_crop, plugin_crop_locale_en_gb, plugin_finetune, plugin_finetune_locale_en_gb, plugin_finetune_defaults, plugin_filter, plugin_filter_locale_en_gb, plugin_filter_defaults, plugin_annotate, plugin_annotate_locale_en_gb, markup_editor_defaults, markup_editor_locale_en_gb } from 'doka';\nsetPlugins(plugin_crop, plugin_finetune, plugin_filter, plugin_annotate);\n\nconst editorDefaults = _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n  imageReader: createDefaultImageReader(),\n  imageWriter: createDefaultImageWriter()\n}, plugin_finetune_defaults), plugin_filter_defaults), markup_editor_defaults), {}, {\n  locale: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, locale_en_gb), plugin_crop_locale_en_gb), plugin_finetune_locale_en_gb), plugin_filter_locale_en_gb), plugin_annotate_locale_en_gb), markup_editor_locale_en_gb)\n});\n\nlet tokenId,\n    cipherTextHash,\n    nonce,\n    signature = null;\nlet mintPassword = null;\nexport default function CreateCurated(props) {\n  // modal\n  const {\n    0: modalVisible,\n    1: setModalVisible\n  } = useState(false);\n  const {\n    0: modalResult,\n    1: setModalResult\n  } = useState('');\n  const {\n    0: showEditorButton,\n    1: setShowEditorButton\n  } = useState(true);\n  const {\n    isOpen,\n    onToggle\n  } = useDisclosure();\n  const {\n    query\n  } = useRouter();\n  const {\n    0: tabIndex,\n    1: setTabIndex\n  } = useState(0);\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: vaultAddress,\n    1: setVaultAddress\n  } = useState(account || '');\n  const {\n    0: vaultPubPriv,\n    1: setVaultPubPriv\n  } = useState('Public');\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState('');\n  const {\n    0: vaultDesc,\n    1: setVaultDesc\n  } = useState('');\n  const {\n    0: vaultImage,\n    1: setVaultImage\n  } = useState('');\n  const {\n    0: ownedImage,\n    1: setOwnedImage\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState(''); // const [service, setService] = useState('')\n\n  const {\n    0: isCovalApproved,\n    1: setIsCovalApproved\n  } = useState(false);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: true,\n    private: false\n  });\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null); // const [cipherTextHash, setCipherTextHash] = useState(null)\n  // const [tokenId, setTokenId] = useState(null)\n  // const [mintPassword, setMintPassword] = useState(null)\n  // const [nonce, setNonce] = useState(null)\n  // const [signature, setSignature] = useState(null)\n\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(true);\n  const {\n    0: showPreVaultMsg,\n    1: setShowPreVaultMsg\n  } = useState(false);\n  const {\n    0: showMakingVaultMsg,\n    1: setShowMakingVaultMsg\n  } = useState(false);\n  const {\n    0: decimals,\n    1: setDecimals\n  } = useState(null);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(null);\n  const {\n    0: balance,\n    1: setBalance\n  } = useState(null);\n  const {\n    0: price,\n    1: setPrice\n  } = useState(null);\n  const {\n    0: creating,\n    1: setCreating\n  } = useState(false);\n  const {\n    0: approving,\n    1: setApproving\n  } = useState(false);\n  const {\n    0: vaultKey,\n    1: setVaultKey\n  } = useState('');\n  const {\n    0: vaultValue,\n    1: setVaultValue\n  } = useState('');\n  const {\n    0: targetContract,\n    1: setTargetContract\n  } = useState(null);\n  const {\n    0: showEmbed,\n    1: setShowEmbed\n  } = useState(false);\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  const covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true);\n  let transak;\n\n  const initializeTransak = (address, coin) => {\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',\n      // Your API Key\n      environment: 'PRODUCTION',\n      // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '',\n      // Your customer's wallet address\n      themeColor: '000000',\n      // App theme color\n      fiatCurrency: 'USD',\n      // INR/GBP\n      // fiatAmount: 350,\n      email: '',\n      // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    }); // To get all the events\n\n    transak.on(transak.ALL_EVENTS, data => {\n      console.log(data);\n    }); // This will trigger when the user marks payment is made.\n\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, orderData => {\n      console.log(orderData);\n      transak.close();\n    });\n    transak.init();\n  };\n\n  const getContractStates = async () => {\n    setDecimals(await covalContract.decimals());\n    setAllowance(await covalContract.allowance(account, contractAddresses.vaultHandler[chainId]).then(balance => balance.toString()));\n    setBalance(await covalContract.balanceOf(account).then(balance => balance.toString()));\n    setPrice(await handlerContract.price().then(balance => balance.toString())); // console.log(\n    //   'balance',\n    //   balance,\n    //   'allowance',\n    //   allowance,\n    //   'price',\n    //   price,\n    //   Number(allowance) >= Number(price),\n    //   Number(balance) > Number(price)\n    // )\n\n    if (Number(allowance) >= Number(price)) {\n      setIsCovalApproved(true);\n    } else {\n      setIsCovalApproved(false);\n    }\n  };\n\n  const approveCovalFlow = () => {\n    setApproving(true);\n    covalContract.approve(contractAddresses.vaultHandler[chainId], '100000000000000').then(({\n      hash\n    }) => {\n      setHash(hash);\n    }).catch(error => {\n      if ((error === null || error === void 0 ? void 0 : error.code) == 4001) {\n        setApproving(false);\n      }\n    });\n  };\n\n  const checkLiveliness = (tokenId, cb) => {\n    fetch(EMBLEM_API + '/liveliness-curated', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        tokenId: tokenId\n      })\n    }).then(async function (response) {\n      let data = await response.json();\n      console.log(\"Liveliness check\", data);\n    });\n    return cb();\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault(); // if (service !== 'kms') {\n    //   return alert('incorrect password')\n    // }\n\n    setState({\n      loaded: false,\n      private: state.private\n    });\n    let body = {\n      fromAddress: account,\n      toAddress: vaultAddress,\n      description: vaultDesc,\n      name: vaultName,\n      ownedImage: ownedImage,\n      image: vaultImage,\n      chainId: chainId,\n      private: state.private,\n      password: password || '',\n      values: [],\n      experimental: true,\n      targetContract: targetContract\n    };\n\n    if (vaultKey && vaultValue) {\n      body.values.push({\n        \"key\": vaultKey,\n        value: vaultValue\n      });\n    }\n\n    console.log(JSON.stringify(body));\n    let apiSuffix = '/mint-curated'; //(chainId == 137 || chainId == 1) ? '/mint3' : '/mint'\n\n    fetch(EMBLEM_API + apiSuffix, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify(body)\n    }).then(async function (response) {\n      setState({\n        loaded: true,\n        private: state.private\n      });\n      let body = await response.json();\n      tokenId = body.data.tokenId; // console.log(body.data.nonce, body.data.signature, body.data.cipherTextHash)\n      // if (chainId === 137 || chainId == 1) {\n\n      nonce = body.data.nonce;\n      signature = body.data.signature;\n      cipherTextHash = body.data.cipherTextHash; // fireMetaMask()\n      // alert(\"Minting has been disabled temporarily while we work with Opensea to solve a bug where new vaults are not showing. Mint ONLY if you don't plan on using Opensea\")\n\n      setShowPreVaultMsg(false);\n      setTimeout(() => {\n        checkLiveliness(tokenId, () => {\n          location.href = location.origin + '/nft2?id=' + tokenId;\n        });\n      }, 500); // } else {\n      //   mintPassword = body.password\n      //   setHash(body.data.tx)\n      //   setShowPreVaultMsg(true)\n      // }\n    });\n  };\n\n  function previewFile() {\n    const preview = document.querySelector('#preview');\n    const inputelement = document.querySelector('input[type=file]'); //.files[0];\n\n    const reader = new FileReader();\n\n    if (inputelement.files[0].size > 5000000) {\n      delete inputelement.files;\n      return alert('File too large');\n    } else {// alert('under')\n    }\n\n    reader.addEventListener('load', function () {\n      var _reader$result;\n\n      // convert image file to base64 string\n      if (preview) preview.src = ((_reader$result = reader.result) === null || _reader$result === void 0 ? void 0 : _reader$result.toString()) || '';\n      if (preview) setVaultImage(preview.src);\n      setShowEditorButton(true);\n      setModalResult('');\n    }, false);\n\n    if (inputelement.files) {\n      reader.readAsDataURL(inputelement.files[0]);\n    }\n  }\n\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account);\n      setVaultAddress(account);\n    }\n  }, [account, acct]);\n  useEffect(() => {\n    account && chainId ? getContractStates() : null;\n  });\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 9\n    }\n  }, __jsx(Tabs, {\n    defaultIndex: 0,\n    index: tabIndex,\n    onChange: index => setTabIndex(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 11\n    }\n  }, __jsx(TabList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 13\n    }\n  }, __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 15\n    }\n  }, \"Create Curated Vault\")), __jsx(TabPanels, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 13\n    }\n  }, __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    spacing: \"2rem\",\n    flexGrow: 1,\n    justifyContent: \"center\",\n    px: \"2rem\",\n    py: \"2rem\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 17\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 19\n    }\n  }, __jsx(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 21\n    }\n  }, __jsx(Box, {\n    p: 1,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 23\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 25\n    }\n  }, __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 27\n    }\n  }), __jsx(FormLabel, {\n    htmlFor: \"type-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 27\n    }\n  }, \"Choose Curated Collection\"), __jsx(Select, {\n    id: \"type-selector\",\n    w: \"100%\",\n    value: targetContract,\n    onChange: e => {\n      let contractData = curatedContracts.filter(item => {\n        return item.name == e.target.value;\n      })[0];\n      console.log(\"target contract\", e.target.value);\n      console.log(\"contract data\", curatedContracts);\n      setTargetContract(contractData);\n      console.log(\"type\", targetContract);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 27\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 29\n    }\n  }, \"---Choose Project---\"), curatedContracts.map(token => {\n    return __jsx(\"option\", {\n      value: token.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 33\n      }\n    }, token.name);\n  }), targetContract ? __jsx(Select, {\n    id: \"type-selector\",\n    w: \"100%\",\n    value: targetContract,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 31\n    }\n  }, __jsx(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 33\n    }\n  }, \"---Choose One---\"), curatedAssets[targetContract.chain].map(asset => {\n    console.log(asset);\n  })) : null))))), Number(balance) < Number(price) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      initializeTransak(vaultAddress, 'COVAL');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 23\n    }\n  }, \"Buy $Coval\")) : null, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 19\n    }\n  }, __jsx(ButtonGroup, {\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 21\n    }\n  }, !account ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 25\n    }\n  }, \"No Wallet Connected!\") : !vaultAddress || !isETHAddress(vaultAddress) ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 25\n    }\n  }, \"Check Fields!\") // ) : !service ? (\n  //   <Button isDisabled type=\"submit\">\n  //     Creation Password?\n  //   </Button>\n  : !isCovalApproved && !approving ? __jsx(Button, {\n    onClick: approveCovalFlow,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 25\n    }\n  }, \"Approve Coval\") : !isCovalApproved && approving ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 25\n    }\n  }, \"Approving ...\") : Number(balance) < Number(price) ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 25\n    }\n  }, \"Insufficient Balance\") : hash || creating || showPreVaultMsg || showMakingVaultMsg ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 25\n    }\n  }, \"Making Vault ...\") : __jsx(Button, {\n    onClick: e => {\n      handleSubmit(e);\n      console.log(\"test\");\n    },\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 25\n    }\n  }, \"Create Vault\")))), showPreVaultMsg ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 21\n    }\n  }), \"Talking to contract ...\") : null, showMakingVaultMsg ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 21\n    }\n  }), \"Making vault ... one moment\") : null, approving ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 21\n    }\n  }), \"Handling approval flow ...\") : null))))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      setHash(null);\n\n      if (!creating) {\n        if (!approving) {\n          // fireMetaMask()\n          setShowPreVaultMsg(false);\n        } else {\n          setApproving(false);\n        }\n      } else {\n        setTimeout(() => {\n          setShowMakingVaultMsg(false);\n          checkLiveliness(tokenId, () => {\n            location.href = location.origin + '/nft?id=' + tokenId;\n          });\n        }, 500);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 9\n    }\n  }) : null);\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/CreateCurated.tsx"],"names":["FormControl","FormLabel","Stack","Tabs","TabList","TabPanels","Tab","TabPanel","Box","Flex","Button","ButtonGroup","Divider","Alert","AlertIcon","useDisclosure","Select","Loader","useWeb3React","useEffect","useState","useRouter","TransactionToast","EMBLEM_API","contractAddresses","curatedContracts","curatedAssets","useContract","isETHAddress","transakSDK","locale_en_gb","createDefaultImageReader","createDefaultImageWriter","setPlugins","plugin_crop","plugin_crop_locale_en_gb","plugin_finetune","plugin_finetune_locale_en_gb","plugin_finetune_defaults","plugin_filter","plugin_filter_locale_en_gb","plugin_filter_defaults","plugin_annotate","plugin_annotate_locale_en_gb","markup_editor_defaults","markup_editor_locale_en_gb","editorDefaults","imageReader","imageWriter","locale","tokenId","cipherTextHash","nonce","signature","mintPassword","CreateCurated","props","modalVisible","setModalVisible","modalResult","setModalResult","showEditorButton","setShowEditorButton","isOpen","onToggle","query","tabIndex","setTabIndex","account","chainId","vaultAddress","setVaultAddress","vaultPubPriv","setVaultPubPriv","vaultName","setVaultName","vaultDesc","setVaultDesc","vaultImage","setVaultImage","ownedImage","setOwnedImage","password","setPassword","isCovalApproved","setIsCovalApproved","state","setState","loaded","private","hash","setHash","experimental","setExperimental","showPreVaultMsg","setShowPreVaultMsg","showMakingVaultMsg","setShowMakingVaultMsg","decimals","setDecimals","allowance","setAllowance","balance","setBalance","price","setPrice","creating","setCreating","approving","setApproving","vaultKey","setVaultKey","vaultValue","setVaultValue","targetContract","setTargetContract","showEmbed","setShowEmbed","handlerContract","vaultHandler","vaultHandlerAbi","covalContract","coval","covalAbi","transak","initializeTransak","address","coin","apiKey","environment","defaultCryptoCurrency","walletAddress","themeColor","fiatCurrency","email","redirectURL","hostURL","window","location","origin","widgetHeight","widgetWidth","on","ALL_EVENTS","data","console","log","EVENTS","TRANSAK_ORDER_SUCCESSFUL","orderData","close","init","getContractStates","then","toString","balanceOf","Number","approveCovalFlow","approve","catch","error","code","checkLiveliness","cb","fetch","method","headers","service","chainid","body","JSON","stringify","response","json","handleSubmit","evt","preventDefault","fromAddress","toAddress","description","name","image","values","push","value","apiSuffix","setTimeout","href","previewFile","preview","document","querySelector","inputelement","reader","FileReader","files","size","alert","addEventListener","src","result","readAsDataURL","acct","setAcct","index","e","contractData","filter","item","target","map","token","chain","asset"],"mappings":"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","sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  FormErrorMessage,\n  Input,\n  Stack,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Box,\n  Flex,\n  RadioGroup,\n  Radio,\n  Textarea,\n  Button,\n  ButtonGroup,\n  Text,\n  Divider,\n  Alert,\n  AlertIcon,\n  Collapse,\n  useDisclosure,\n  Select\n} from '@chakra-ui/core'\n\nimport Loader from 'react-loader'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, contractAddresses, curatedContracts, curatedAssets } from '../constants'\nimport { Contract } from '@ethersproject/contracts'\nimport { useContract } from '../hooks'\nimport { isETHAddress } from '../utils'\nimport Embed from './Embed'\n// react-doka\nimport { DokaImageEditorModal } from 'react-doka';\nimport transakSDK from '@transak/transak-sdk'\n\n// doka\nimport {\n    // editor\n    locale_en_gb,\n    createDefaultImageReader,\n    createDefaultImageWriter,\n\n    // plugins\n    setPlugins,\n    plugin_crop,\n    plugin_crop_locale_en_gb,\n    plugin_finetune,\n    plugin_finetune_locale_en_gb,\n    plugin_finetune_defaults,\n    plugin_filter,\n    plugin_filter_locale_en_gb,\n    plugin_filter_defaults,\n    plugin_annotate,\n    plugin_annotate_locale_en_gb,\n    markup_editor_defaults,\n    markup_editor_locale_en_gb,\n} from 'doka';\n\nsetPlugins(plugin_crop, plugin_finetune, plugin_filter, plugin_annotate);\n\nconst editorDefaults = {\n    imageReader: createDefaultImageReader(),\n    imageWriter: createDefaultImageWriter(),\n    ...plugin_finetune_defaults,\n    ...plugin_filter_defaults,\n    ...markup_editor_defaults,\n    locale: {\n        ...locale_en_gb,\n        ...plugin_crop_locale_en_gb,\n        ...plugin_finetune_locale_en_gb,\n        ...plugin_filter_locale_en_gb,\n        ...plugin_annotate_locale_en_gb,\n        ...markup_editor_locale_en_gb,\n    },\n};\n\nlet tokenId, cipherTextHash, nonce, signature = null\nlet mintPassword = null\n\nexport default function CreateCurated(props: any) {\n  // modal\n  const [modalVisible, setModalVisible] = useState(false);\n  const [modalResult, setModalResult] = useState('');\n  const [showEditorButton, setShowEditorButton] = useState(true);\n\n  const { isOpen, onToggle } = useDisclosure()\n  const { query } = useRouter()\n  const [tabIndex, setTabIndex] = useState(0)\n  const { account, chainId } = useWeb3React()\n  const [vaultAddress, setVaultAddress] = useState(account || '')\n  const [vaultPubPriv, setVaultPubPriv] = useState('Public')\n  const [vaultName, setVaultName] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [ownedImage, setOwnedImage] = useState('')\n  const [password, setPassword] = useState('')\n  // const [service, setService] = useState('')\n  const [isCovalApproved, setIsCovalApproved] = useState(false)\n  const [state, setState] = useState({ loaded: true, private: false })\n  const [hash, setHash] = useState(null)\n  // const [cipherTextHash, setCipherTextHash] = useState(null)\n  // const [tokenId, setTokenId] = useState(null)\n  // const [mintPassword, setMintPassword] = useState(null)\n  // const [nonce, setNonce] = useState(null)\n  // const [signature, setSignature] = useState(null)\n  const [experimental, setExperimental] = useState(true)\n  const [showPreVaultMsg, setShowPreVaultMsg] = useState(false)\n  const [showMakingVaultMsg, setShowMakingVaultMsg] = useState(false)\n  const [decimals, setDecimals] = useState(null)\n  const [allowance, setAllowance] = useState(null)\n  const [balance, setBalance] = useState(null)\n  const [price, setPrice] = useState(null)\n  const [creating, setCreating] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [vaultKey, setVaultKey] = useState('')  \n  const [vaultValue, setVaultValue] = useState('')\n  const [targetContract, setTargetContract] = useState(null)\n  const [showEmbed, setShowEmbed] = useState(false)\n  \n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true)\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  let transak\n  const initializeTransak = (address?: string, coin? : string)=>{\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',  // Your API Key\n      environment: 'PRODUCTION', // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '', // Your customer's wallet address\n      themeColor: '000000', // App theme color\n      fiatCurrency: 'USD', // INR/GBP\n      // fiatAmount: 350,\n      email: '', // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    });\n  \n    // To get all the events\n    transak.on(transak.ALL_EVENTS, (data) => {\n      console.log(data)\n    });\n  \n    // This will trigger when the user marks payment is made.\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, (orderData) => {\n      console.log(orderData);\n      transak.close();\n    });\n  \n    transak.init()\n  }\n\n  const getContractStates = async () => {\n    setDecimals(await covalContract.decimals())\n    setAllowance(\n      await covalContract\n        .allowance(account, contractAddresses.vaultHandler[chainId])\n        .then((balance: { toString: () => string }) => balance.toString())\n    )\n    setBalance(await covalContract.balanceOf(account).then((balance: { toString: () => string }) => balance.toString()))\n    setPrice(await handlerContract.price().then((balance: { toString: () => string }) => balance.toString()))\n    // console.log(\n    //   'balance',\n    //   balance,\n    //   'allowance',\n    //   allowance,\n    //   'price',\n    //   price,\n    //   Number(allowance) >= Number(price),\n    //   Number(balance) > Number(price)\n    // )\n    if (Number(allowance) >= Number(price)) {\n      setIsCovalApproved(true)\n    } else {\n      setIsCovalApproved(false)\n    }\n  }\n\n  const approveCovalFlow = () => {\n    setApproving(true)\n    ;(covalContract as Contract)\n      .approve(contractAddresses.vaultHandler[chainId], '100000000000000')\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code == 4001) {\n          setApproving(false)\n        }\n      })\n  }\n\n  const checkLiveliness = (tokenId, cb)=>{\n    fetch(EMBLEM_API + '/liveliness-curated', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({tokenId: tokenId}),\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"Liveliness check\", data)\n    })\n    return cb()\n  }\n\n  const handleSubmit = (evt: { preventDefault: () => void }) => {\n    evt.preventDefault()\n    // if (service !== 'kms') {\n    //   return alert('incorrect password')\n    // }\n    setState({ loaded: false, private: state.private })\n    let body = {\n      fromAddress: account,\n      toAddress: vaultAddress,\n      description: vaultDesc,\n      name: vaultName,\n      ownedImage: ownedImage,\n      image: vaultImage,\n      chainId: chainId,\n      private: state.private,\n      password: password || '',\n      values: [],\n      experimental: true,\n      targetContract: targetContract\n    }\n    if (vaultKey && vaultValue) {\n      body.values.push({\"key\": vaultKey, value: vaultValue})\n    }\n    console.log(JSON.stringify(body))\n    let apiSuffix = '/mint-curated' //(chainId == 137 || chainId == 1) ? '/mint3' : '/mint'\n    fetch(EMBLEM_API + apiSuffix, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify(body),\n    }).then(async function (response) {\n      setState({ loaded: true, private: state.private })\n      let body = await response.json()\n      tokenId = body.data.tokenId\n      // console.log(body.data.nonce, body.data.signature, body.data.cipherTextHash)\n      // if (chainId === 137 || chainId == 1) {\n        nonce = body.data.nonce\n        signature = body.data.signature\n        cipherTextHash = body.data.cipherTextHash\n        // fireMetaMask()\n        // alert(\"Minting has been disabled temporarily while we work with Opensea to solve a bug where new vaults are not showing. Mint ONLY if you don't plan on using Opensea\")\n        setShowPreVaultMsg(false)\n        setTimeout(() => {\n        checkLiveliness(tokenId, ()=>{\n          location.href = location.origin + '/nft2?id=' + tokenId\n        })\n      }, 500)\n      // } else {\n      //   mintPassword = body.password\n      //   setHash(body.data.tx)\n      //   setShowPreVaultMsg(true)\n      // }\n    })\n  }\n\n  function previewFile() {\n    const preview = document.querySelector('#preview') as HTMLImageElement\n    const inputelement = document.querySelector('input[type=file]') as HTMLInputElement //.files[0];\n    const reader = new FileReader()\n    if (inputelement.files[0].size > 5000000) {\n      delete inputelement.files\n      return alert('File too large')\n    } else {\n      // alert('under')\n    }\n    reader.addEventListener(\n      'load',\n      function () {\n        // convert image file to base64 string\n        if (preview) preview.src = reader.result?.toString() || ''\n        if (preview) setVaultImage(preview.src)\n        setShowEditorButton(true)\n        setModalResult('')\n      },\n      false\n    )\n\n    if (inputelement.files) {\n\n      \n      reader.readAsDataURL(inputelement.files[0])\n    }\n  }\n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setVaultAddress(account)\n    }\n  }, [account, acct])\n\n  useEffect(() => {\n    account && chainId ? getContractStates() : null\n  })\n\n  return (\n    <Loader loaded={state.loaded}>\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n        <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n          <Tabs defaultIndex={0} index={tabIndex} onChange={(index) => setTabIndex(index)}>\n            <TabList>\n              <Tab>Create Curated Vault</Tab>\n            </TabList>\n\n            <TabPanels>\n              <TabPanel>\n                <Stack\n                  direction=\"column\"\n                  align=\"center\"\n                  spacing=\"2rem\"\n                  flexGrow={1}\n                  justifyContent=\"center\"\n                  px=\"2rem\"\n                  py=\"2rem\"\n                  shouldWrapChildren\n                >\n                  <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <FormControl>\n                      \n                      <Box p={1} rounded=\"lg\" overflow=\"hidden\">\n                        <Stack align=\"center\" p={1}>\n                          <Divider />\n                          <FormLabel htmlFor=\"type-selector\">Choose Curated Collection</FormLabel>\n                          <Select id=\"type-selector\" w=\"100%\" value={targetContract}\n                            onChange={(e)=>{\n                              let contractData:any = curatedContracts.filter(item=>{return item.name == e.target.value})[0]\n                              console.log(\"target contract\", e.target.value)\n                              console.log(\"contract data\", curatedContracts)\n                              setTargetContract(contractData)\n                              console.log(\"type\", targetContract)\n                            }}\n                          >\n                            <option value=\"\" >---Choose Project---</option>\n                            {curatedContracts.map(token=>{\n                              return (\n                                <option value={token.name} >{token.name}</option>\n                              )\n                            })}\n                            {targetContract ? (\n                              <Select id=\"type-selector\" w=\"100%\" value={targetContract}>\n                                <option value=\"\" >---Choose One---</option>\n\n                                {curatedAssets[targetContract.chain].map(asset=>{\n                                 console.log(asset)\n                                })}\n                              </Select>\n                            ) : null}\n                          </Select>\n                        </Stack>\n                      </Box>\n                    </FormControl>\n                  </Stack>\n\n                  {Number(balance) < Number(price) ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\">\n                      <Button\n                        width=\"100%\"\n                        onClick={()=>{initializeTransak(vaultAddress, 'COVAL')}}\n                      >\n                        Buy $Coval\n                      </Button>\n                    </Box>\n                  ) : null}\n\n                  <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <ButtonGroup spacing={4}>\n                      \n                      {!account ? (\n                        <Button isDisabled type=\"submit\">\n                          No Wallet Connected!\n                        </Button>\n                      ) : !vaultAddress ||\n                        !isETHAddress(vaultAddress) ? (\n                        <Button isDisabled type=\"submit\">\n                          Check Fields!\n                        </Button>\n                      // ) : !service ? (\n                      //   <Button isDisabled type=\"submit\">\n                      //     Creation Password?\n                      //   </Button>\n                      ) : !isCovalApproved && !approving ? (\n                        <Button onClick={approveCovalFlow} type=\"submit\">\n                          Approve Coval\n                        </Button>\n                      ) : !isCovalApproved && approving ? (\n                        <Button isDisabled type=\"submit\">\n                          Approving ...\n                        </Button>\n                      ) : Number(balance) < Number(price) ? (\n                        <Button isDisabled type=\"submit\">\n                          Insufficient Balance\n                        </Button>\n                      ) : hash || creating || showPreVaultMsg || showMakingVaultMsg ? (\n                        <Button isDisabled type=\"submit\">\n                          Making Vault ...\n                        </Button>\n                      ) : (\n                        <Button onClick={(e)=>{handleSubmit(e);console.log(\"test\")}} type=\"submit\">\n                          Create Vault\n                        </Button>\n                      )}\n                    </ButtonGroup>\n                  </Stack>\n                </Stack>\n                {showPreVaultMsg ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    Talking to contract ...\n                  </Alert>\n                ) : null}\n                {showMakingVaultMsg ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    Making vault ... one moment\n                  </Alert>\n                ) : null}\n                {approving ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    Handling approval flow ...\n                  </Alert>\n                ) : null}\n              </TabPanel>\n              {/* <TabPanel>\n                <Stack>\n                <div style={{ height: '70vh', backgroundColor: 'white' }}>\n                  <DokaImageEditor\n                      {...editorDefaults}\n                      className='doka'\n                      src={'./image.jpeg'}\n                      onLoad={(res: any) => console.log('load inline image', res)}\n                      onProcess={({ dest }) => setInlineResult(URL.createObjectURL(dest))}\n                  />\n                </div>\n                </Stack>\n              </TabPanel> */}\n            </TabPanels>\n          </Tabs>\n        </Box>\n      </Flex>\n      {hash ? (\n        <TransactionToast\n          hash={hash}\n          onComplete={() => {\n            setHash(null)\n            if (!creating) {\n              if (!approving) {\n                // fireMetaMask()\n                setShowPreVaultMsg(false)\n              } else {\n                setApproving(false)\n              }\n            } else {\n              setTimeout(() => {\n                setShowMakingVaultMsg(false)\n                checkLiveliness(tokenId, ()=>{\n                  location.href = location.origin + '/nft?id=' + tokenId\n                })                \n              }, 500)\n            }\n          }}\n        />\n      ) : null}\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}