{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/VaultList.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Flex, Text, Link, Stack, useColorMode } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport CoinBalance from './partials/CoinBalance';\nimport Embed from './Embed';\nexport default function VaultList() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    colorMode\n  } = useColorMode();\n\n  const getVaults = async () => {\n    loadCache();\n\n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental ? '?experimental=true' : ''), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString()\n        }\n      });\n      const jsonData = await response.json();\n      setState({\n        loaded: true\n      });\n      setVaults(jsonData);\n      saveCache(jsonData);\n      setLoadingApi(false); // console.log(jsonData)\n    } catch (error) {}\n  };\n\n  const loadCache = () => {\n    let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_vaults')); // Load vaults from storage before updating from server!\n\n    if (vaults) {\n      setState({\n        loaded: true\n      });\n      setVaults(vaults);\n      setLoadingApi(true);\n    }\n  };\n\n  const saveCache = vaults => {\n    localStorage.setItem((address ? address : account) + '_' + chainId + '_vaults', JSON.stringify(vaults)); // Save new state for later\n  };\n\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [account, acct]);\n  const {\n    0: chain,\n    1: setChain\n  } = useState(chainId);\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    account && chainId ? getVaults() : setState({\n      loaded: true\n    });\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, vaults.length ? vaults.map((vault, index) => {\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n    let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId;\n    const flexSettings = {\n      flex: '1',\n      minW: '200px',\n      maxW: '200px',\n      borderWidth: '1px',\n      color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    const redirect = function () {\n      location.href = url;\n    };\n\n    return __jsx(Box, _extends({\n      className: \"NFT newest\",\n      key: index\n    }, flexSettings, {\n      onClick: redirect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }\n    }), __jsx(Text, {\n      fontWeight: \"semibold\",\n      textAlign: \"center\",\n      mt: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, vault.name, !vault.private && vault.totalValue > 0 ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, __jsx(Embed, {\n      className: \"d-block w-100 NFT-newest-image\",\n      url: vault.image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 19\n      }\n    })), __jsx(Box, {\n      d: \"flex\",\n      alignItems: \"baseline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, __jsx(Box, {\n      color: \"gray.500\",\n      fontWeight: \"semibold\",\n      letterSpacing: \"wide\",\n      fontSize: \"sm\",\n      ml: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 19\n      }\n    }, vault.private ? __jsx(React.Fragment, null, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 25\n      }\n    }, \"Contents hidden. Click to view the vault and unlock values.\")) : vault.values.length ? vault.values.map((coin, index) => {\n      if (index < 4) return __jsx(Stack, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 29\n        }\n      }, __jsx(CoinBalance, {\n        colorMode: colorMode,\n        coin: coin,\n        mine: false,\n        onRenew: () => {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 31\n        }\n      }));else if (index == 4) return __jsx(Text, {\n        fontWeight: \"bold\",\n        mt: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 29\n        }\n      }, \"... Click to see the rest ...\");\n    }) : null)), __jsx(Stack, {\n      align: \"center\",\n      mt: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }, vault.status == 'claimed' ? __jsx(Text, {\n      color: \"green.500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 48\n      }\n    }, \"CLAIMED\") : null));\n  }) : account ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, \"YOU DON'T SEEM TO HAVE ANY VAULTS.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, \"CREATE ONE HERE!\")) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, \"You don't seem to have a wallet connected.\", ' ')));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/VaultList.tsx"],"names":["Box","Flex","Text","Link","Stack","useColorMode","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","EMBLEM_API","CoinBalance","Embed","VaultList","query","account","chainId","vaults","setVaults","state","setState","loaded","loadingApi","setLoadingApi","address","setAddress","experimental","setExperimental","colorMode","getVaults","loadCache","response","fetch","method","headers","service","toString","jsonData","json","saveCache","error","JSON","parse","localStorage","getItem","setItem","stringify","acct","setAcct","chain","setChain","length","map","vault","index","pieces","location","pathname","split","pop","url","origin","join","tokenId","flexSettings","flex","minW","maxW","borderWidth","color","mx","mb","rounded","overflow","borderColor","status","cursor","redirect","href","name","private","totalValue","image","values","coin"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Spinner, useColorMode } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { EMBLEM_API } from '../constants'\nimport CoinBalance from './partials/CoinBalance'\nimport Embed from './Embed'\n\nexport default function VaultList() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [address, setAddress] = useState(query.address)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const { colorMode } = useColorMode()\n\n  const getVaults = async () => {\n    loadCache()\n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental? '?experimental=true' : ''), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString(),\n        },\n      })\n      const jsonData = await response.json()\n      setState({ loaded: true })\n      setVaults(jsonData)\n      saveCache(jsonData)\n      setLoadingApi(false)\n      // console.log(jsonData)\n    } catch (error) {}\n  }\n\n  const loadCache = () => {\n    let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_vaults')) // Load vaults from storage before updating from server!\n    if (vaults) {\n      setState({ loaded: true })\n      setVaults(vaults)\n      setLoadingApi(true)\n    }\n  }\n\n  const saveCache = (vaults) => {\n    localStorage.setItem((address ? address : account) + '_' + chainId + '_vaults', JSON.stringify(vaults)) // Save new state for later\n  }\n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    account && chainId ? getVaults() : setState({ loaded: true })\n  }, [])\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\" mt={10}>\n        {vaults.length ? (\n          vaults.map((vault, index) => {\n            let pieces = location.pathname.split('/')\n            pieces.pop()\n            let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId\n            const flexSettings = {\n              flex: '1',\n              minW: '200px',\n              maxW: '200px',\n              borderWidth: '1px',\n              color: 'white',\n              mx: '6',\n              mb: '6',\n              rounded: 'lg',\n              overflow: 'hidden',\n              borderColor: vault.status == 'claimed' ? 'green !important' : '',\n              cursor: 'pointer',\n            }\n            const redirect = function () {\n              location.href = url\n            }\n            return (\n              <Box className=\"NFT newest\" key={index} {...flexSettings} onClick={redirect}>\n                <Text fontWeight=\"semibold\" textAlign=\"center\" mt={2}>\n                  {vault.name}\n                  {!vault.private && vault.totalValue > 0 ? ': ~$' + vault.totalValue : null}\n                </Text>\n                <Stack align=\"center\">\n                  <Embed className=\"d-block w-100 NFT-newest-image\" url={vault.image}/>\n                </Stack>\n                <Box d=\"flex\" alignItems=\"baseline\">\n                  <Box color=\"gray.500\" fontWeight=\"semibold\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                    {vault.private ? (\n                      <>\n                        <Text>Contents hidden. Click to view the vault and unlock values.</Text>\n                      </>\n                    ) : vault.values.length ? (\n                      vault.values.map((coin, index) => {\n                        if (index < 4)\n                          return (\n                            <Stack> \n                              <CoinBalance colorMode={colorMode} coin={coin} mine={false} onRenew={()=>{}}/>  \n                            </Stack>\n                          )\n                        else if (index == 4)\n                          return (\n                            <Text fontWeight=\"bold\" mt={2}>\n                              ... Click to see the rest ...\n                            </Text>\n                          )\n                      })\n                    ) : null}\n                  </Box>\n                </Box>\n                {/* <Box d=\"flex\" alignItems=\"baseline\">\n                  <Box color=\"gray.500\" fontWeight=\"semibold\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                    <Text>\n                      Total Computable Value: {vault.totalValue}\n                    </Text>\n                  </Box>\n                  </Box> */}\n                <Stack align=\"center\" mt={3}>\n                  {vault.status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n              </Box>\n            )\n          })\n        ) : account ? (\n          <Text>\n            YOU DON'T SEEM TO HAVE ANY VAULTS.{' '}\n            <Link color=\"#638cd8\" href=\"../create\">\n              CREATE ONE HERE!\n            </Link>\n          </Text>\n        ) : (\n          <Text>\n            You don't seem to have a wallet connected.{' '}\n          </Text>\n        )}\n      </Flex>\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}