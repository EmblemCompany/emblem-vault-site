{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, useDisclosure } from '@chakra-ui/core';\nimport { useWeb3React } from '@web3-react/core';\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { validImage } from '../utils';\nimport { EMBLEM_API } from '../constants';\nvar AddrModal = dynamic(function () {\n  return import('./AddrModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./AddrModal')];\n    },\n    modules: ['./AddrModal']\n  }\n});\nexport default function Vault() {\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query,\n      pathname = _useRouter.pathname,\n      replace = _useRouter.replace;\n\n  var _React$useState = React.useState(query.id),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      tokenId = _React$useState2[0],\n      setTokenId = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      vaultName = _React$useState4[0],\n      setVaultName = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      vaultDesc = _React$useState6[0],\n      setVaultDesc = _React$useState6[1];\n\n  var _React$useState7 = React.useState(''),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      vaultImage = _React$useState8[0],\n      setVaultImage = _React$useState8[1];\n\n  var _React$useState9 = React.useState([]),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      vaultValues = _React$useState10[0],\n      setVaultValues = _React$useState10[1];\n\n  var _React$useState11 = React.useState([]),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      vaultAddresses = _React$useState12[0],\n      setVaultAddresses = _React$useState12[1];\n\n  var _React$useState13 = React.useState(false),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      vaultPrivacy = _React$useState14[0],\n      setVaultPrivacy = _React$useState14[1];\n\n  var _React$useState15 = React.useState(''),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      currCoin = _React$useState16[0],\n      setCurrCoin = _React$useState16[1];\n\n  var _React$useState17 = React.useState(''),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      currAddr = _React$useState18[0],\n      setCurrAddr = _React$useState18[1];\n\n  var _React$useState19 = React.useState({\n    loaded: false\n  }),\n      _React$useState20 = _slicedToArray(_React$useState19, 2),\n      state = _React$useState20[0],\n      setState = _React$useState20[1];\n\n  var _useDisclosure = useDisclosure(),\n      isOpenAddrModal = _useDisclosure.isOpen,\n      onOpenAddrModal = _useDisclosure.onOpen,\n      onCloseAddrModal = _useDisclosure.onClose;\n\n  var getVault = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(EMBLEM_API + '/meta/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  chainId: chainId.toString()\n                }\n              });\n\n            case 2:\n              responce = _context.sent;\n              _context.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context.sent;\n              console.log(jsonData);\n              setVaultName(jsonData.name);\n              setVaultImage(jsonData.image);\n              setVaultDesc(jsonData.description);\n              setVaultValues(jsonData.values);\n              setVaultDesc(jsonData.description);\n              setVaultAddresses(jsonData.addresses); // setVaultPrivacy(jsonData.isPrivate)\n\n              setState({\n                loaded: true\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getVault() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getVault();\n  }, []);\n\n  function splitDescription(words) {\n    var desc = words.split('Emblem Vault Basic');\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(pass) {\n    console.log(pass);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr\n  }), __jsx(Loader, {\n    loaded: state.loaded\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\"\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\"\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\"\n  }, vaultName), __jsx(Stack, {\n    align: \"center\"\n  }, __jsx(Image, {\n    src: validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png',\n    size: \"250px\"\n  })), __jsx(Stack, {\n    align: \"center\"\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h4\",\n    lineHeight: \"tight\"\n  }, splitDescription(vaultDesc))), __jsx(Box, {\n    p: \"6\"\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\"\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    fontWeight: \"semibold\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\"\n  }, __jsx(\"h4\", null, \"Current Contents:\"), vaultPrivacy ? __jsx(React.Fragment, null, __jsx(Text, null, \"Contents hidden. Enter password to unlock.\"), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: function onChange(e) {\n      return tryDecrypt(e.target.value);\n    },\n    \"aria-describedby\": \"password-helper-text\"\n  })) : vaultValues.length ? vaultValues.map(function (coin) {\n    return __jsx(Text, {\n      key: coin.name,\n      isTruncated: true\n    }, coin.name, \": \", coin.balance);\n  }) : __jsx(Text, null, \"Nothing in here! Fill 'er up!\"))), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\"\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"center\",\n    spacing: \"1rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(ButtonGroup, {\n    spacing: 4\n  }, vaultAddresses.map(function (addr) {\n    return (// <Button key={addr.address} onClick={() => openAddrModal(addr.coin, addr.address)}>\n      __jsx(Button, {\n        key: addr.address,\n        onClick: function onClick() {\n          setCurrCoin(addr.coin);\n          setCurrAddr(addr.address);\n          onOpenAddrModal();\n        }\n      }, \"Put \", addr.coin, \" In\")\n    );\n  })))))))));\n}","map":null,"metadata":{},"sourceType":"module"}