{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, Flex, Text, Image, Stack, Button, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport { useContract } from '../hooks';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { TransactionToast } from './TransactionToast';\nimport { parseUnits } from '@ethersproject/units';\nimport BridgeDeposits from './partials/BridgeDeposits';\nexport default function SwapChain() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React(); // const [vaults, setVaults] = useState([])\n\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: approving,\n    1: setApproving\n  } = useState(false);\n  const {\n    0: transfering,\n    1: setTransfering\n  } = useState(false);\n  const {\n    0: balance,\n    1: setBalance\n  } = useState(null);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    0: decimals,\n    1: setDecimals\n  } = useState(null);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(null);\n  const {\n    0: transferChain,\n    1: setTransferChain\n  } = useState(137);\n  const {\n    0: covalApprovedFor,\n    1: setIsCovalApproved\n  } = useState(0);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: swapAmount,\n    1: setSwapAmount\n  } = useState(0);\n  const {\n    0: isInvalid,\n    1: setIsInvalid\n  } = useState(false);\n  const {\n    0: transferChainChanged,\n    1: setTransferChainChanged\n  } = useState(true);\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  const covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true);\n\n  const transferToChain = async () => {\n    setTransfering(true);\n    handlerContract.transferToChain(transferChain, swapAmount.toString()).then(({\n      hash\n    }) => {\n      setHash(hash);\n    }).catch(error => {\n      if ((error === null || error === void 0 ? void 0 : error.code) == 4001) {\n        setTransfering(false);\n      }\n    });\n  };\n\n  const getContractStates = async () => {\n    setHash(null);\n    setDecimals(await covalContract.decimals());\n    setAllowance(await covalContract.allowance(account, contractAddresses.vaultHandler[chainId]).then(balance => balance.toString()));\n    setBalance(await covalContract.balanceOf(account).then(balance => balance.toString()));\n\n    if (Number(allowance) >= Number(0)) {\n      setIsCovalApproved(allowance);\n    }\n\n    setState({\n      loaded: true\n    });\n  };\n\n  const approveCovalFlow = () => {\n    setApproving(true);\n    covalContract.approve(contractAddresses.vaultHandler[chainId], 10000000 * Math.pow(10, +decimals)).then(({\n      hash\n    }) => {\n      setHash(hash);\n    }).catch(error => {\n      if ((error === null || error === void 0 ? void 0 : error.code) == 4001) {\n        setApproving(false);\n      }\n    });\n  };\n\n  const getTransferLogs = async () => {\n    console.log(\"getting logs\");\n    fetch(EMBLEM_API + '/transfersOut', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      }\n    }).then(async function (response) {\n      console.log(\"doing transfers\");\n      fetch(EMBLEM_API + '/doTransfers', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        }\n      }).then(async function (response) {\n        getContractStates();\n      });\n    });\n  };\n\n  function SwapText(_ref) {\n    let {\n      children\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n    return __jsx(Text, _extends({\n      fontSize: \"2xl\",\n      lineHeight: 1,\n      py: \"0.3rem\"\n    }, rest), children);\n  }\n\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getContractStates();\n    }\n  }, [account, acct]);\n  const {\n    0: chain,\n    1: setChain\n  } = useState(chainId);\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getContractStates();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    account && chainId ? setState({\n      loaded: true\n    }) : null;\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded\n  }, loadingApi ? __jsx(Refreshing, null) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10\n  }, __jsx(Stack, {\n    align: \"center\"\n  }, true ? __jsx(React.Fragment, null, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"1rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(SwapText, null, \"I want to transfer \"), __jsx(Input, {\n    variant: \"flushed\",\n    fontSize: \"1xl\",\n    textAlign: \"center\" // universal input options\n    ,\n    inputMode: \"decimal\",\n    title: \"Token Amount\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\" // text-specific options\n    ,\n    type: \"text\",\n    placeholder: \"0\",\n    minLength: 1,\n    maxLength: 79,\n    isInvalid: isInvalid,\n    onChange: e => {\n      let calculatedAmount = Number(parseUnits(e.target.value, decimals).toString());\n\n      if (calculatedAmount > Number(balance) || calculatedAmount > Number(allowance)) {\n        setIsInvalid(true);\n      } else {\n        setIsInvalid(false);\n      }\n\n      setSwapAmount(Number(calculatedAmount));\n    },\n    spellCheck: \"false\"\n  }), __jsx(SwapText, null, \"$Coval\")), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"1rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(SwapText, null, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\"\n  }, __jsx(Text, {\n    float: 'left'\n  }, \"from \", chainId == 137 ? \"Polygon (Matic)\" : chainId == 100 ? \"xDai\" : chainId == 56 ? \"Binance Smart Chain\" : chainId == 250 ? \"Fantom\" : \"Ethereum\", \" to\"), __jsx(Image, {\n    float: 'left',\n    margin: 2,\n    w: 3,\n    src: \"./next.png\"\n  }), __jsx(Select, {\n    w: \"45%\",\n    value: transferChain,\n    onChange: e => {\n      setTransferChain(Number(e.target.value));\n      setTransferChainChanged(true);\n      console.log(Number(e.target.value));\n    }\n  }, __jsx(\"option\", {\n    value: \"137\",\n    disabled: chainId === 137 ? true : false\n  }, \"Polygon (Matic)\"), __jsx(\"option\", {\n    value: \"100\",\n    disabled: chainId === 100 ? true : false\n  }, \"xDai\"), __jsx(\"option\", {\n    value: \"56\",\n    disabled: chainId === 56 ? true : false\n  }, \"Binance Smart Chain\"), __jsx(\"option\", {\n    value: \"1\",\n    disabled: chainId === 1 ? true : false\n  }, \"Ethereum Mainnet\"), __jsx(\"option\", {\n    value: \"250\",\n    disabled: chainId === 250 ? true : false\n  }, \"Fantom\")))), swapAmount > 0 ? __jsx(Button, {\n    isDisabled: isInvalid,\n    onClick: transferToChain\n  }, isInvalid ? \"Invalid Transfer Amount\" : \"Transfer Now\") : null)) : null, allowance == 0 && balance > 0 && !approving ? __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\"\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"s\",\n    fontStyle: \"italic\"\n  }, __jsx(Button, {\n    onClick: approveCovalFlow,\n    type: \"submit\"\n  }, \"Approve Transfer\"))) : balance == 0 ? __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\"\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"s\",\n    fontStyle: \"italic\"\n  }, \"You have no Coval to transfer\")) : !approving ? __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\"\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"s\",\n    fontStyle: \"italic\"\n  }, \"Approved to transfer up to \", allowance * Math.pow(10, -decimals), \" Coval. Note: Swaps between networks can take up to 25 minutes.\")) : null, __jsx(Tabs, null, __jsx(TabList, null, __jsx(Tab, null, \"From \", CHAIN_ID_NAMES[chainId]), __jsx(Tab, null, \"From \", CHAIN_ID_NAMES[transferChain])), __jsx(TabPanels, null, __jsx(TabPanel, null, __jsx(BridgeDeposits, {\n    chainId: chainId\n  })), __jsx(TabPanel, null, transferChain && transferChainChanged ? __jsx(BridgeDeposits, {\n    chainId: transferChain\n  }) : null))))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      if (transfering) {\n        setTransfering(false);\n        getTransferLogs();\n      } else {\n        setApproving(false);\n        getContractStates();\n      }\n    }\n  }) : null);\n}","map":null,"metadata":{},"sourceType":"module"}