{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Image } from '@chakra-ui/core';\nimport SketchFab from './embed/SketchFab';\nimport ShaderToy from './embed/ShaderToy';\nimport Bandcamp from './embed/Bandcamp';\nimport SoundCloud from './embed/SoundCloud';\nimport Clyp from './embed/Clyp';\nimport Sketchup from './embed/Sketchup';\nimport Clara from './embed/Clara';\nimport MyMiniFactory from './embed/MyMiniFactory';\nimport { Audius } from './embed/Audius';\nimport { Generic } from './embed/Generic';\nimport Youtube from './embed/Youtube';\nimport Vimeo from './embed/Vimeo';\n\nconst getIPFSImage = async function (hash) {\n  // alert(0)\n  const responce = await fetch('https://gateway.ipfs.io/ipfs/' + hash, {\n    method: 'GET',\n    headers: {// redirect:'follow'\n    }\n  });\n  let jsonData = await responce.text(); // setVaultImage(jsonData) \n  // const preview = document.querySelector('img.d-block') as HTMLImageElement\n\n  if (jsonData.includes(\"data:image\")) {\n    // preview.src = jsonData\n    return jsonData;\n  } else {\n    // preview.src = 'https://gateway.ipfs.io/ipfs/'+hash\n    return 'https://gateway.ipfs.io/ipfs/' + hash;\n  }\n};\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nexport class Embed extends Component {\n  render() {\n    let url = this.props.url || \"\";\n    url = url.replace(\"&framed=true\", \"\");\n    let classIdentifier = url.split('/').reverse()[0] + getRandomInt(999).toString();\n\n    if (url.includes('ipfs://')) {\n      setTimeout(() => {\n        getIPFSImage(url.split('/').reverse()[0]).then(result => {\n          if (result.includes('data:image')) {\n            const preview = document.querySelector('.' + classIdentifier);\n            preview ? preview.src = result : null;\n            url = result;\n          }\n        });\n      }, 1000);\n      console.log(\"before\", url);\n      url = url.replace('ipfs://', 'https://gateway.ipfs.io/ipfs/');\n      console.log(\"after\", url);\n      return __jsx(Image, {\n        p: \"20px\",\n        h: \"100%\",\n        className: (this.props.className || \"d-block w-100\") + \" blah \" + classIdentifier,\n        src: url,\n        width: \"250px\"\n      });\n    } else {\n      return __jsx(React.Fragment, null, url.includes('sketchfab.com/') ? __jsx(SketchFab, {\n        url: url\n      }) : url.includes('shadertoy.com/') ? __jsx(ShaderToy, {\n        url: url\n      }) : url.includes('bandcamp.com/') ? __jsx(Bandcamp, {\n        url: url\n      }) : url.includes('soundcloud.com/') ? __jsx(SoundCloud, {\n        url: url\n      }) : url.includes('clyp.it/') ? __jsx(Clyp, {\n        url: url\n      }) : url.includes('sketchup.com/') ? __jsx(Sketchup, {\n        url: url\n      }) : url.includes('clara.io/') ? __jsx(Clara, {\n        url: url\n      }) : url.includes('myminifactory.com/') ? __jsx(MyMiniFactory, {\n        url: url\n      }) : url.includes('audius.co/') ? __jsx(Audius, {\n        url: url\n      }) : url.includes('youtube.com') ? __jsx(Youtube, {\n        url: url\n      }) : url.includes('vimeo.com') ? __jsx(Vimeo, {\n        url: url\n      }) : url.includes('/dynamic/') || url.includes('arweave') || url.includes('https://s3.amazonaws.com/') || url.includes('googleusercontent.com') || url.includes('ipfs.io') || url.includes('framed/') || url.includes('.png') || url.includes('.jpg') || url.includes('.jpeg') || url.includes('.gif') || url.includes('.svg') || url.includes('data:image') ? __jsx(Image, {\n        p: \"20px\",\n        h: \"100%\",\n        className: (this.props.className || \"d-block w-100\") + \" \" + classIdentifier,\n        src: url,\n        width: \"250px\"\n      }) : __jsx(Generic, {\n        url: url\n      }));\n    }\n  }\n\n}\nexport default Embed;","map":null,"metadata":{},"sourceType":"module"}