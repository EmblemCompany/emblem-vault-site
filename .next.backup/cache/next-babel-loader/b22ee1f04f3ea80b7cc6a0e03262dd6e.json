{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Link, Stack, Button, FormControl, Input, FormHelperText, Select } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport { Embed } from './Embed';\nexport default function Search() {\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState([]),\n      vaults = _useState[0],\n      setVaults = _useState[1];\n\n  var _useState2 = useState({\n    loaded: false\n  }),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(false),\n      loadingApi = _useState3[0],\n      setLoadingApi = _useState3[1];\n\n  var _useState4 = useState(query.q),\n      q = _useState4[0],\n      setQ = _useState4[1];\n\n  var _useState5 = useState(q || ''),\n      temp_q = _useState5[0],\n      setTempQ = _useState5[1];\n\n  var _useState6 = useState(query.network || null),\n      network = _useState6[0],\n      setNetwork = _useState6[1];\n\n  var getVaults = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // loadCache()\n              setLoadingApi(true);\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch(EMBLEM_API + '/search', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                },\n                body: JSON.stringify({\n                  q: q,\n                  network: network\n                })\n              });\n\n            case 4:\n              response = _context.sent;\n              _context.next = 7;\n              return response.json();\n\n            case 7:\n              jsonData = _context.sent;\n              setState({\n                loaded: true\n              });\n              setVaults(jsonData.records); // saveCache(jsonData)\n\n              setLoadingApi(false); // console.log(jsonData)\n\n              _context.next = 15;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](1);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 13]]);\n    }));\n\n    return function getVaults() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_allvaults')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_allvaults', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n\n  useEffect(function () {\n    console.log(q, state, loadingApi);\n\n    if (q && !state.loaded && !loadingApi) {\n      console.log(\"Load Search\");\n      getVaults();\n    } // if (q && !state.loaded && !loadingApi) {\n    //   setState({ loaded: false })\n    //   getVaults()\n    // }\n\n  });\n  return __jsx(Loader, {\n    loaded: state.loaded || !q\n  }, loadingApi ? __jsx(Refreshing, null) : '', __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\"\n  }, __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\"\n  }, __jsx(Input, {\n    type: \"text\",\n    id: \"search-query\",\n    width: \"45%\",\n    \"aria-describedby\": \"search-query-helper-text\",\n    placeholder: \"0xdeadbeef\",\n    maxLength: 42,\n    value: temp_q,\n    onChange: function onChange(e) {\n      return setTempQ(e.target.value);\n    }\n  }), __jsx(Button, {\n    m: 2,\n    onClick: function onClick() {\n      setState({\n        loaded: false\n      });\n      setQ(temp_q);\n      var loc = location.href.split('?')[0] + \"?q=\" + temp_q + \"&network=\" + network;\n      window.history.pushState(temp_q, 'Title', loc);\n    }\n  }, \"Search\"), __jsx(Select, {\n    w: \"45%\",\n    placeholder: \"All Networks\",\n    value: network,\n    onChange: function onChange(e) {\n      setNetwork(e.target.value);\n      console.log(e.target.value);\n    }\n  }, __jsx(\"option\", {\n    value: \"matic\"\n  }, \"Matic\"), __jsx(\"option\", {\n    value: \"xdai\"\n  }, \"xDai\"), __jsx(\"option\", {\n    value: \"mainnet\"\n  }, \"Ethereum Mainnet\"), __jsx(\"option\", {\n    value: \"rinkeby\"\n  }, \"Ethereum Rinkeby\"))), __jsx(FormHelperText, {\n    id: \"search-query-helper-text\"\n  }, \"Search for Emblem Vaults by: Name, Description, Type, Contents\"))), __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10\n  }, vaults.length ? vaults.map(function (vault, index) {\n    var pieces = location.pathname.split('/');\n    pieces.pop();\n    var url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId;\n    var flexSettings = {\n      flex: '1',\n      minW: '300px',\n      maxW: '300px',\n      borderWidth: '1px',\n      color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    var redirect = function redirect() {\n      location.href = url;\n    };\n\n    return __jsx(Box, _extends({\n      key: index\n    }, flexSettings, {\n      onClick: redirect\n    }), __jsx(Text, {\n      fontWeight: \"semibold\",\n      textAlign: \"center\",\n      mt: 2\n    }, vault.name, !vault[\"private\"] ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n      align: \"center\"\n    }, __jsx(Embed, {\n      url: vault.image\n    })), __jsx(Box, {\n      d: \"flex\",\n      alignItems: \"baseline\"\n    }, __jsx(Box, {\n      color: \"gray.500\",\n      fontWeight: \"semibold\",\n      letterSpacing: \"wide\",\n      fontSize: \"sm\",\n      ml: \"2\"\n    }, vault[\"private\"] ? __jsx(React.Fragment, null, __jsx(Text, null, \"Contents hidden. Click to view the vault and unlock values.\")) : vault.values.length ? vault.values.map(function (coin, index) {\n      if (index < 4) return __jsx(Text, {\n        key: coin.name,\n        isTruncated: true\n      }, coin.name, \": \", coin.balance);else if (index == 4) return __jsx(Text, {\n        fontWeight: \"bold\",\n        mt: 2\n      }, \"... Click to see the rest ...\");\n    }) : __jsx(Text, null, \"Nothing in here! \", __jsx(\"br\", null), \"Click to fill 'er up!\"))), __jsx(Stack, {\n      align: \"center\",\n      mt: 3\n    }, vault.status == 'claimed' ? __jsx(Text, {\n      color: \"green.500\"\n    }, \"CLAIMED\") : null));\n  }) : __jsx(Text, null, \"Search Resulted in 0 Vaults.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\"\n  }, \"CREATE ONE HERE!\"))));\n}","map":null,"metadata":{},"sourceType":"module"}