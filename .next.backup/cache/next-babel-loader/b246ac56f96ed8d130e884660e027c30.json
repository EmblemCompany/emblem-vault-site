{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useContext, useState, useEffect, useMemo, useCallback } from 'react';\nimport { Token } from '@uniswap/sdk';\nimport { DEFAULT_APPROVE_MAX, DEFAULT_DEADLINE, DEFAULT_SLIPPAGE } from './constants';\nvar LocalStorageKeys;\n\n(function (LocalStorageKeys) {\n  LocalStorageKeys[\"Version\"] = \"version\";\n  LocalStorageKeys[\"ApproveMax\"] = \"approveMax\";\n  LocalStorageKeys[\"Deadline\"] = \"deadline\";\n  LocalStorageKeys[\"Slippage\"] = \"slippage\";\n  LocalStorageKeys[\"Transactions\"] = \"transactions\";\n  LocalStorageKeys[\"Tokens\"] = \"tokens\";\n})(LocalStorageKeys || (LocalStorageKeys = {}));\n\nconst NO_VERSION = -1;\nconst CURRENT_VERSION = 0;\n\nfunction useLocalStorage(key, defaultValue, overrideLookup = false, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n{\n  serialize,\n  deserialize\n} = {\n  serialize: toSerialize => toSerialize,\n  deserialize: toDeserialize => toDeserialize\n}) {\n  const {\n    0: value,\n    1: setValue\n  } = useState(() => {\n    if (overrideLookup) {\n      return defaultValue;\n    } else {\n      try {\n        var _deserialize;\n\n        const item = window.localStorage.getItem(key);\n        return item === null ? defaultValue : (_deserialize = deserialize(JSON.parse(item))) !== null && _deserialize !== void 0 ? _deserialize : defaultValue;\n      } catch {\n        return defaultValue;\n      }\n    }\n  });\n  useEffect(() => {\n    try {\n      window.localStorage.setItem(key, JSON.stringify(serialize(value)));\n    } catch {}\n  }, [key, serialize, value]);\n  return [value, setValue];\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction serializeTokens(tokens) {\n  return tokens.map(token => ({\n    chainId: token.chainId,\n    address: token.address,\n    decimals: token.decimals,\n    symbol: token.symbol,\n    name: token.name\n  }));\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction deserializeTokens(serializedTokens) {\n  return serializedTokens.map(serializedToken => new Token(serializedToken.chainId, serializedToken.address, serializedToken.decimals, serializedToken.symbol, serializedToken.name));\n}\n\nconst HypertextContext = /*#__PURE__*/createContext([{}, {}]); // eslint-disable-line @typescript-eslint/no-explicit-any\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n\nfunction useHypertextContext() {\n  return useContext(HypertextContext);\n}\n\nexport default function Provider({\n  children\n}) {\n  // global state\n  const {\n    0: firstToken,\n    1: setFirstToken\n  } = useState();\n  const {\n    0: secondToken,\n    1: setSecondToken\n  } = useState();\n  const {\n    0: showUSD,\n    1: setShowUSD\n  } = useState(false); // versioning\n\n  const [version, setVersion] = useLocalStorage(LocalStorageKeys.Version, NO_VERSION); // after it's been used to sychronously + selectively override localstorage keys, bump the version as soon as we can\n\n  useEffect(() => {\n    setVersion(CURRENT_VERSION);\n  }, [setVersion]); // global localstorage state\n\n  const [approveMax, setApproveMax] = useLocalStorage(LocalStorageKeys.ApproveMax, DEFAULT_APPROVE_MAX);\n  const [deadline, setDeadline] = useLocalStorage(LocalStorageKeys.Deadline, DEFAULT_DEADLINE);\n  const [slippage, setSlippage] = useLocalStorage(LocalStorageKeys.Slippage, DEFAULT_SLIPPAGE);\n  const [transactions, setTransactions] = useLocalStorage(LocalStorageKeys.Transactions, [], version < 0 ? true : false // pre-version0 localstorage transactions didn't include chainId and must be overriden\n  );\n  const [tokens, setTokens] = useLocalStorage(LocalStorageKeys.Tokens, [], false, {\n    serialize: serializeTokens,\n    deserialize: deserializeTokens\n  });\n  return __jsx(HypertextContext.Provider, {\n    value: useMemo(() => [{\n      firstToken,\n      secondToken,\n      showUSD,\n      approveMax,\n      deadline,\n      slippage,\n      transactions,\n      tokens\n    }, {\n      setFirstToken,\n      setSecondToken,\n      setShowUSD,\n      setApproveMax,\n      setDeadline,\n      setSlippage,\n      setTransactions,\n      setTokens\n    }], [firstToken, secondToken, showUSD, approveMax, deadline, slippage, transactions, tokens, setFirstToken, setSecondToken, setShowUSD, setApproveMax, setDeadline, setSlippage, setTransactions, setTokens])\n  }, children);\n}\nexport function useFirstToken() {\n  const [{\n    firstToken\n  }, {\n    setFirstToken\n  }] = useHypertextContext();\n  return [firstToken, setFirstToken];\n}\nexport function useSecondToken() {\n  const [{\n    secondToken\n  }, {\n    setSecondToken\n  }] = useHypertextContext();\n  return [secondToken, setSecondToken];\n}\nexport function useShowUSD() {\n  const [{\n    showUSD\n  }, {\n    setShowUSD\n  }] = useHypertextContext();\n  return [showUSD, setShowUSD];\n}\nexport function useApproveMax() {\n  const [{\n    approveMax\n  }, {\n    setApproveMax\n  }] = useHypertextContext();\n  const toggleApproveMax = useCallback(() => {\n    setApproveMax(!approveMax);\n  }, [approveMax, setApproveMax]);\n  return [approveMax, toggleApproveMax];\n}\nexport function useDeadline() {\n  const [{\n    deadline\n  }, {\n    setDeadline\n  }] = useHypertextContext();\n  return [deadline, setDeadline];\n}\nexport function useSlippage() {\n  const [{\n    slippage\n  }, {\n    setSlippage\n  }] = useHypertextContext();\n  return [slippage, setSlippage];\n}\nexport function useTransactions() {\n  const [{\n    transactions\n  }, {\n    setTransactions\n  }] = useHypertextContext();\n  const addTransaction = useCallback((chainId, hash) => {\n    setTransactions(transactions => transactions.filter(transaction => !(transaction.chainId === chainId && transaction.hash === hash)).concat([{\n      chainId,\n      hash\n    }]));\n  }, [setTransactions]);\n  const removeTransaction = useCallback((chainId, hash) => {\n    setTransactions(transactions => transactions.filter(transaction => !(transaction.chainId === chainId && transaction.hash === hash)));\n  }, [setTransactions]);\n  return [transactions, {\n    addTransaction,\n    removeTransaction\n  }];\n}\nexport function useLocalStorageTokens() {\n  const [{\n    tokens\n  }, {\n    setTokens\n  }] = useHypertextContext();\n  const addToken = useCallback(async token => {\n    setTokens(tokens => tokens.filter(currentToken => !currentToken.equals(token)).concat([token]));\n  }, [setTokens]);\n  const removeToken = useCallback(token => {\n    setTokens(tokens => tokens.filter(currentToken => !currentToken.equals(token)));\n  }, [setTokens]);\n  return [tokens, {\n    addToken,\n    removeToken\n  }];\n}","map":null,"metadata":{},"sourceType":"module"}