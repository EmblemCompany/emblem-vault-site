{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Input } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nexport default function Admin() {\n  _s();\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useState = useState({\n    loaded: true\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(false),\n      loadingApi = _useState2[0],\n      setLoadingApi = _useState2[1];\n\n  var _useState3 = useState([]),\n      stats = _useState3[0],\n      setStats = _useState3[1];\n\n  var _useState4 = useState(query.address || null),\n      address = _useState4[0],\n      setAddress = _useState4[1];\n\n  var _useState5 = useState(0),\n      offset = _useState5[0],\n      setOffset = _useState5[1];\n\n  var _useState6 = useState(10),\n      limit = _useState6[0],\n      setLimit = _useState6[1];\n\n  var _useState7 = useState(address ? true : false),\n      shouldFetchData = _useState7[0],\n      setShouldFetchData = _useState7[1];\n\n  var _useState8 = useState(true),\n      hasMore = _useState8[0],\n      setHasMore = _useState8[1];\n\n  var _useState9 = useState(false),\n      buttonDisabled = _useState9[0],\n      setButtonDisabled = _useState9[1];\n\n  useEffect(function () {\n    if (state.loaded == false && !loadingApi && address) {\n      setLoadingApi(false); // getPnL()\n    }\n  }, []);\n  useEffect(function () {\n    if (shouldFetchData && address) {\n      console.log(\"Should load api after setting consts\", offset);\n      setShouldFetchData(false); // getPnL()\n    } else {\n      console.log(\"wtf\");\n    }\n  }, [shouldFetchData, offset]);\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('setting new offset to', offset + limit);\n              setOffset(offset + limit);\n              setShouldFetchData(true);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    m: 5,\n    placeholder: \"HeyYo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(Admin, \"6nKYQml/GXomKquCZfInr57cnd4=\", false, function () {\n  return [useRouter, useWeb3React];\n});\n\n_c = Admin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx"],"names":["Flex","Input","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","Admin","query","account","chainId","loaded","state","setState","loadingApi","setLoadingApi","stats","setStats","address","setAddress","offset","setOffset","limit","setLimit","shouldFetchData","setShouldFetchData","hasMore","setHasMore","buttonDisabled","setButtonDisabled","console","log","fetchData"],"mappings":";;;;;;;;AAAA,SAAcA,IAAd,EAAgEC,KAAhE,QAA8H,iBAA9H;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAIA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,mBAAkBJ,SAAS,EAA3B;AAAA,MAAQK,KAAR,cAAQA,KAAR;;AACA,sBAA6BJ,YAAY,EAAzC;AAAA,MAAQK,OAAR,iBAAQA,OAAR;AAAA,MAAiBC,OAAjB,iBAAiBA,OAAjB;;AACA,kBAA0BJ,QAAQ,CAAC;AAAEK,IAAAA,MAAM,EAAE;AAAV,GAAD,CAAlC;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAoCP,QAAQ,CAAC,KAAD,CAA5C;AAAA,MAAOQ,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAA0BT,QAAQ,CAAC,EAAD,CAAlC;AAAA,MAAOU,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAA8BX,QAAQ,CAACE,KAAK,CAACU,OAAN,IAAiB,IAAlB,CAAtC;AAAA,MAAOA,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAA4Bb,QAAQ,CAAC,CAAD,CAApC;AAAA,MAAOc,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAA0Bf,QAAQ,CAAC,EAAD,CAAlC;AAAA,MAAOgB,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAA8CjB,QAAQ,CAACY,OAAO,GAAE,IAAF,GAAQ,KAAhB,CAAtD;AAAA,MAAOM,eAAP;AAAA,MAAwBC,kBAAxB;;AACA,mBAA8BnB,QAAQ,CAAC,IAAD,CAAtC;AAAA,MAAOoB,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAA4CrB,QAAQ,CAAC,KAAD,CAApD;AAAA,MAAOsB,cAAP;AAAA,MAAuBC,iBAAvB;;AAMAxB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIO,KAAK,CAACD,MAAN,IAAgB,KAAhB,IAAyB,CAACG,UAA1B,IAAwCI,OAA5C,EAAqD;AACnDH,MAAAA,aAAa,CAAC,KAAD,CAAb,CADmD,CAEnD;AACD;AACF,GALQ,EAKN,EALM,CAAT;AAOAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAImB,eAAe,IAAIN,OAAvB,EAAgC;AAC9BY,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAAoDX,MAApD;AACAK,MAAAA,kBAAkB,CAAC,KAAD,CAAlB,CAF8B,CAG9B;AACD,KAJD,MAIO;AACLK,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD;AACF,GARQ,EAQN,CAACP,eAAD,EAAkBJ,MAAlB,CARM,CAAT;;AAUA,MAAMY,SAAS;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAChBF,cAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCX,MAAM,GAACE,KAA5C;AACAD,cAAAA,SAAS,CAACD,MAAM,GAACE,KAAR,CAAT;AACAG,cAAAA,kBAAkB,CAAC,IAAD,CAAlB;;AAHgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATO,SAAS;AAAA;AAAA;AAAA,KAAf;;AAMA,SACE,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAEpB,KAAK,CAACD,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,UAAU,GAAG,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAoB,EADjC,EAGE,MAAC,IAAD;AAAM,IAAA,CAAC,EAAC,MAAR;AAAe,IAAA,OAAO,EAAC,QAAvB;AAAgC,IAAA,EAAE,EAAE,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,CAAC,EAAE,CAAV;AAAa,IAAA,WAAW,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHF,CADF;AAWD;;GAnDuBP,K;UACJJ,S,EACWC,Y;;;KAFPG,K","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport {HStack, VStack, Circle, Divider } from '@chakra-ui/react'\n\nexport default function Admin() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  const [state, setState] = useState({ loaded: true })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [stats, setStats] = useState([])\n  const [address, setAddress] = useState(query.address || null)\n  const [offset, setOffset] = useState(0)\n  const [limit, setLimit] = useState(10)\n  const [shouldFetchData, setShouldFetchData] = useState(address? true: false)\n  const [hasMore, setHasMore] = useState(true)\n  const [buttonDisabled, setButtonDisabled] = useState(false)\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  useEffect(() => {\n    if (state.loaded == false && !loadingApi && address) {\n      setLoadingApi(false)\n      // getPnL()\n    }\n  }, [])\n\n  useEffect(() => {\n    if (shouldFetchData && address) {\n      console.log(\"Should load api after setting consts\", offset)\n      setShouldFetchData(false)\n      // getPnL()\n    } else {\n      console.log(\"wtf\")\n    }\n  }, [shouldFetchData, offset])\n\n  const fetchData = async() =>{    \n    console.log('setting new offset to', offset+limit)\n    setOffset(offset+limit)\n    setShouldFetchData(true)\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Input m={5} placeholder=\"HeyYo\"></Input>\n       \n      </Flex>\n     \n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}