{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Box, Flex, Text, Link, Stack, useColorMode, Button } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Embed from './Embed';\nexport default function MyVaults() {\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(Number(query.start) || 0),\n      pagePosition = _useState[0],\n      setPagePosition = _useState[1];\n\n  var _useState2 = useState('live'),\n      curatedType = _useState2[0],\n      setCuratedType = _useState2[1];\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useState3 = useState([]),\n      vaults = _useState3[0],\n      setVaults = _useState3[1];\n\n  var _useState4 = useState([]),\n      liveVaults = _useState4[0],\n      setLiveVaults = _useState4[1];\n\n  var _useState5 = useState([]),\n      unMintedVaults = _useState5[0],\n      setUnMintedVaults = _useState5[1];\n\n  var _useState6 = useState([]),\n      claimedVaults = _useState6[0],\n      setClaimedVaults = _useState6[1];\n\n  var _useState7 = useState({\n    loaded: false\n  }),\n      state = _useState7[0],\n      setState = _useState7[1];\n\n  var _useState8 = useState(false),\n      loadingApi = _useState8[0],\n      setLoadingApi = _useState8[1];\n\n  var _useState9 = useState(query.address),\n      address = _useState9[0],\n      setAddress = _useState9[1];\n\n  var _useState10 = useState(query.type || \"curated\"),\n      vaultType = _useState10[0],\n      setVaultType = _useState10[1];\n\n  var _useState11 = useState(query.experimental),\n      experimental = _useState11[0],\n      setExperimental = _useState11[1];\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _useState12 = useState(false),\n      shouldFetchData = _useState12[0],\n      setShouldFetchData = _useState12[1];\n\n  var _useState13 = useState(true),\n      hasMore = _useState13[0],\n      setHasMore = _useState13[1];\n\n  var _useState14 = useState(0),\n      offset = _useState14[0],\n      setOffset = _useState14[1];\n\n  var _useState15 = useState([]),\n      liveCollections = _useState15[0],\n      setLiveCollections = _useState15[1];\n\n  var _useState16 = useState([]),\n      unMintedCollections = _useState16[0],\n      setUnMintedCollections = _useState16[1];\n\n  var _useState17 = useState([]),\n      claimedCollections = _useState17[0],\n      setClaimedCollections = _useState17[1];\n\n  var PAGE_SIZE = 20;\n\n  var getVaults = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(EMBLEM_API + '/myvaults/' + (address ? address : account) + '?start=' + offset + '&size=' + PAGE_SIZE, {\n                //+'&_vercel_no_cache=1'\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  '_vercel_no_cache': '1',\n                  service: 'evmetadata',\n                  chainId: chainId.toString(),\n                  vaultType: vaultType.toString()\n                }\n              });\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n\n            case 6:\n              jsonData = _context.sent;\n\n              if (vaultType.toString() != 'curated') {\n                setVaults(vaults.concat(jsonData));\n                setState({\n                  loaded: true\n                });\n                setLoadingApi(false);\n                console.log(\"Records received\", jsonData.length);\n              } else if (vaultType.toString() == 'curated') {\n                setLiveVaults(groupItemsByTargetTokenId(jsonData.live));\n                setUnMintedVaults(jsonData.unMinted);\n                setClaimedVaults(jsonData.claimed);\n                setVaults(groupItemsByTargetTokenId(jsonData.live));\n                setState({\n                  loaded: true\n                });\n                setLoadingApi(false);\n                setHasMore(false);\n                setLiveCollections(Array.from(new Set(jsonData.live.map(function (item) {\n                  return item.targetContract.name;\n                }))));\n                setUnMintedCollections(Array.from(new Set(jsonData.unMinted.map(function (item) {\n                  return item.targetContract.name;\n                }))));\n                setClaimedCollections(Array.from(new Set(jsonData.claimed.map(function (item) {\n                  return item.targetContract.name;\n                }))));\n              } else if (jsonData.length < PAGE_SIZE) {\n                setHasMore(false);\n              }\n\n              _context.next = 12;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 10]]);\n    }));\n\n    return function getVaults() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var fetchData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(offset, PAGE_SIZE, offset + PAGE_SIZE);\n              setOffset(offset + PAGE_SIZE);\n              setShouldFetchData(true);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function fetchData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  function groupItemsByTargetTokenId(data) {\n    // const data = JSON.parse(jsonData);\n    var itemsMap = new Map(); // Iterate through the data and group items by targetTokenId\n\n    var _iterator = _createForOfIteratorHelper(data),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        var targetTokenId = item.targetTokenId;\n\n        if (itemsMap.has(targetTokenId)) {\n          itemsMap.get(targetTokenId).push(item);\n        } else {\n          itemsMap.set(targetTokenId, [item]);\n        }\n      } // Convert the itemsMap to an array of objects\n\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var items = Array.from(itemsMap.entries()).map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          targetTokenId = _ref4[0],\n          items = _ref4[1];\n\n      return {\n        targetTokenId: targetTokenId,\n        items: items\n      };\n    });\n    return items;\n  } // const more = ()=>{\n  //   if (location.href.includes('start')) {\n  //     location.href = location.href.replace('start='+pagePosition, 'start='+(pagePosition + PAGE_SIZE))\n  //   } else {\n  //     location.href = location.href + '?start='+(pagePosition + PAGE_SIZE)\n  //   }\n  //   // setPagePosition(pagePosition + PAGE_SIZE)\n  //   // getVaults()\n  // }\n  // const less = ()=>{\n  //   if (pagePosition - PAGE_SIZE < 0) {\n  //     setPagePosition(PAGE_SIZE)\n  //   }\n  //   if (location.href.includes('start')) {\n  //     location.href = location.href.replace('start='+pagePosition, 'start='+(pagePosition - PAGE_SIZE))\n  //   } else {\n  //     location.href = location.href + '?start='+(pagePosition - PAGE_SIZE)\n  //   }\n  //   // setPagePosition(pagePosition + 3)\n  //   // getVaults()\n  // }\n  // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_newest')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_newest', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n\n  var _useState18 = useState(''),\n      acct = _useState18[0],\n      setAcct = _useState18[1];\n\n  useEffect(function () {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [account, acct]);\n\n  var _useState19 = useState(chainId),\n      chain = _useState19[0],\n      setChain = _useState19[1];\n\n  useEffect(function () {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n\n  var showOrHideNavLink = function showOrHideNavLink(path) {\n    return vaultType == path ? true : false;\n  };\n\n  var handleNewNavigationClick = function handleNewNavigationClick(path) {\n    if (!address) {\n      location.href = location.origin + location.pathname + \"?type=\" + path;\n    } else {\n      location.href = location.origin + location.pathname + \"?address=\" + address + \"&type=\" + path;\n    }\n  };\n\n  var handleNftsNavigationClick = function handleNftsNavigationClick() {\n    if (!address) {\n      location.href = location.origin + '/nfts';\n    } else {\n      location.href = location.origin + '/nfts' + \"?address=\" + address;\n    }\n  };\n\n  useEffect(function () {\n    if (shouldFetchData) {\n      setShouldFetchData(false);\n      getVaults();\n    } else {}\n  }, [shouldFetchData]);\n  return __jsx(React.Fragment, null, __jsx(Stack, {\n    pl: \"10\",\n    spacing: 0,\n    direction: \"row\"\n  }, __jsx(Button, {\n    isDisabled: showOrHideNavLink('curated'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: function onClick() {\n      handleNewNavigationClick('curated');\n    }\n  }, \"Curated\"), __jsx(Button, {\n    isDisabled: showOrHideNavLink('unclaimed'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: function onClick() {\n      handleNewNavigationClick('unclaimed');\n    }\n  }, \"Locked\"), __jsx(Button, {\n    isDisabled: showOrHideNavLink('claimed'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: function onClick() {\n      handleNewNavigationClick('claimed');\n    }\n  }, \"Unlocked\"), __jsx(Button, {\n    isDisabled: showOrHideNavLink('unminted'),\n    m: 2,\n    variant: \"ghost\",\n    onClick: function onClick() {\n      handleNewNavigationClick('unminted');\n    }\n  }, \"Not Minted\")), showOrHideNavLink('curated') ? __jsx(React.Fragment, null, __jsx(Stack, {\n    pl: \"8.7rem\",\n    spacing: 0,\n    direction: \"row\"\n  }, liveVaults.length ? __jsx(Button, {\n    isDisabled: curatedType == 'live',\n    m: 2,\n    variant: \"ghost\",\n    onClick: function onClick() {\n      setVaults(liveVaults);\n      setCuratedType('live');\n    }\n  }, \"Unclaimed (curated) \", liveVaults.length) : null, claimedVaults.length ? __jsx(Button, {\n    isDisabled: curatedType == 'claimed',\n    m: 2,\n    variant: \"ghost\",\n    onClick: function onClick() {\n      setVaults(claimedVaults);\n      setCuratedType('claimed');\n    }\n  }, \"Claimed (curated) \", claimedVaults.length) : null, unMintedVaults.length ? __jsx(Button, {\n    isDisabled: curatedType == 'unminted',\n    m: 2,\n    variant: \"ghost\",\n    onClick: function onClick() {\n      setVaults(unMintedVaults);\n      setCuratedType('unminted');\n    }\n  }, \"Not Minted (curated) \", unMintedVaults.length) : null), __jsx(Stack, {\n    pl: \"12.7rem\",\n    spacing: 0,\n    direction: \"row\"\n  }, liveCollections.length && curatedType == 'live' ? liveCollections.map(function (name, index) {\n    return __jsx(Button, {\n      isDisabled: true,\n      key: index,\n      m: 2,\n      variant: \"ghost\"\n    }, name);\n  }) : null, claimedCollections.length && curatedType == 'claimed' ? claimedCollections.map(function (name, index) {\n    return __jsx(Button, {\n      isDisabled: true,\n      key: index,\n      m: 2,\n      variant: \"ghost\"\n    }, name);\n  }) : null, unMintedCollections.length && curatedType == 'unminted' ? unMintedCollections.map(function (name, index) {\n    return __jsx(Button, {\n      isDisabled: true,\n      key: index,\n      m: 2,\n      variant: \"ghost\"\n    }, name);\n  }) : null)) : null, __jsx(Loader, {\n    loaded: state.loaded\n  }, loadingApi ? __jsx(Refreshing, null) : '', __jsx(InfiniteScroll, {\n    className: \"infinite-scroll\",\n    scrollableTarget: \"shannon-container\" // height={200}\n    ,\n    dataLength: vaults.length //This is important field to render the next data\n    ,\n    next: !showOrHideNavLink('curated') ? fetchData : function () {},\n    hasMore: hasMore,\n    loader: __jsx(Refreshing, null),\n    endMessage: __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(\"b\", null, \"No more vaults to load.\"))\n  }, __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10\n  }, vaults.length ? vaults.map(function (vault, index) {\n    var pieces = location.pathname.split('/');\n    pieces.pop();\n    var url = location.origin + pieces.join('/') + '/nft' + (vaultType == 'curated' ? '2' : '') + '?id=' + (curatedType == 'live' && vaultType == 'curated' ? vault.targetTokenId : vault.tokenId) + '&cc=t';\n    var flexSettings = {\n      flex: '1',\n      minW: '200px',\n      maxW: '200px',\n      borderWidth: '1px',\n      // color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    var redirect = function redirect() {\n      setLoadingApi(true);\n      location.href = url;\n    };\n\n    return __jsx(Link, {\n      href: url,\n      className: \"vaultLink\"\n    }, __jsx(Box, _extends({\n      className: \"NFT newest\",\n      key: index\n    }, flexSettings, {\n      onClick: redirect\n    }), __jsx(Text, {\n      fontWeight: \"semibold\",\n      textAlign: \"center\",\n      mt: 2,\n      pl: 2,\n      isTruncated: true\n    }, curatedType == 'live' && vaultType == 'curated' ? vault.items[0].name : vault.name, !vault[\"private\"] && vault.totalValue > 0 ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n      align: \"center\"\n    }, __jsx(Embed, {\n      className: \"d-block w-100 NFT-newest-image\",\n      url: curatedType == 'live' && vaultType == 'curated' ? vault.items[0].image : vault.image\n    }), curatedType == 'live' && vaultType == 'curated' && vault.items.length > 1 ? __jsx(Text, null, ' you own ' + vault.items.length) : null), __jsx(Stack, {\n      align: \"center\",\n      mt: 3\n    }, curatedType == 'live' && vaultType == 'curated' && vault.items.length > 1 ? ' you own ' + vault.items.length : null)));\n  }) : __jsx(Text, null, \"YOU DON'T SEEM TO HAVE ANY VAULTS.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\"\n  }, \"CREATE ONE HERE!\"))))));\n}","map":null,"metadata":{},"sourceType":"module"}