{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { JSBI, Fraction, Percent, Token, WETH, ChainId } from '@uniswap/sdk';\nimport { isIPFS } from './constants'; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\n\nexport function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\nexport function shortenHex(hex, length = 4) {\n  return `${hex.substring(0, length + 2)}…${hex.substring(hex.length - length)}`;\n}\nexport const CHAIN_ID_NAMES = {\n  1: 'Mainnet',\n  3: 'Ropsten',\n  4: 'Rinkeby',\n  5: 'Görli',\n  42: 'Kovan'\n};\nexport const INFURA_PREFIXES = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan'\n};\nexport let EtherscanType;\n\n(function (EtherscanType) {\n  EtherscanType[EtherscanType[\"Account\"] = 0] = \"Account\";\n  EtherscanType[EtherscanType[\"TokenBalance\"] = 1] = \"TokenBalance\";\n  EtherscanType[EtherscanType[\"Transaction\"] = 2] = \"Transaction\";\n})(EtherscanType || (EtherscanType = {}));\n\nconst ETHERSCAN_PREFIXES = {\n  1: '',\n  3: 'ropsten.',\n  4: 'rinkeby.',\n  5: 'goerli.',\n  42: 'kovan.'\n};\nexport function formatEtherscanLink(type, data) {\n  switch (type) {\n    case EtherscanType.Account:\n      {\n        const [chainId, address] = data;\n        return `https://${ETHERSCAN_PREFIXES[chainId]}etherscan.io/address/${address}`;\n      }\n\n    case EtherscanType.TokenBalance:\n      {\n        const [token, address] = data;\n        return `https://${ETHERSCAN_PREFIXES[token.chainId]}etherscan.io/token/${token.address}?a=${address}`;\n      }\n\n    case EtherscanType.Transaction:\n      {\n        const [chainId, hash] = data;\n        return `https://${ETHERSCAN_PREFIXES[chainId]}etherscan.io/tx/${hash}`;\n      }\n  }\n}\nconst SAI = new Token(ChainId.MAINNET, '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359', 18);\nexport function getTokenDisplayValue(token) {\n  var _token$symbol;\n\n  return token.equals(WETH[token.chainId]) ? 'ETH' : token.equals(SAI) ? 'SAI' : (_token$symbol = token.symbol) !== null && _token$symbol !== void 0 ? _token$symbol : 'UNKNOWN';\n}\nexport function getPercentChange(referenceRate, newRate, flipOrder = false) {\n  // calculate (referenceRate - newRate) / referenceRate or (newRate - referenceRate) / referenceRate\n  const difference = new Fraction(flipOrder ? JSBI.subtract(JSBI.multiply(newRate.adjusted.numerator, referenceRate.adjusted.denominator), JSBI.multiply(referenceRate.adjusted.numerator, newRate.adjusted.denominator)) : JSBI.subtract(JSBI.multiply(referenceRate.adjusted.numerator, newRate.adjusted.denominator), JSBI.multiply(newRate.adjusted.numerator, referenceRate.adjusted.denominator)), JSBI.multiply(referenceRate.adjusted.denominator, newRate.adjusted.denominator));\n  const percentChange = difference.multiply(referenceRate.adjusted.invert());\n  return new Percent(percentChange.numerator, percentChange.denominator);\n}\nexport function modifyUrlObjectForIPFS(url) {\n  const parsedUrl = typeof url === 'string' ? {\n    pathname: url\n  } : url;\n\n  const {\n    pathname\n  } = parsedUrl,\n        rest = _objectWithoutProperties(parsedUrl, [\"pathname\"]);\n\n  const modifiedPathname = pathname === '/' ? './' : `.${pathname}${isIPFS ? '.html' : ''}`;\n  return {\n    href: parsedUrl,\n    as: _objectSpread(_objectSpread({}, rest), {}, {\n      pathname: modifiedPathname\n    })\n  };\n}\nexport function validImage(data) {\n  if (data && (data.includes('http') || data.includes('data:image'))) {\n    return true;\n  } else {\n    return false;\n  }\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/utils.ts"],"names":["JSBI","Fraction","Percent","Token","WETH","ChainId","isIPFS","escapeRegExp","string","replace","shortenHex","hex","length","substring","CHAIN_ID_NAMES","INFURA_PREFIXES","EtherscanType","ETHERSCAN_PREFIXES","formatEtherscanLink","type","data","Account","chainId","address","TokenBalance","token","Transaction","hash","SAI","MAINNET","getTokenDisplayValue","equals","symbol","getPercentChange","referenceRate","newRate","flipOrder","difference","subtract","multiply","adjusted","numerator","denominator","percentChange","invert","modifyUrlObjectForIPFS","url","parsedUrl","pathname","rest","modifiedPathname","href","as","validImage","includes"],"mappings":"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","sourcesContent":["import { JSBI, Fraction, Percent, Price, Token, WETH, ChainId } from '@uniswap/sdk'\nimport { UrlObject } from 'url'\n\nimport { isIPFS } from './constants'\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport function shortenHex(hex: string, length = 4): string {\n  return `${hex.substring(0, length + 2)}…${hex.substring(hex.length - length)}`\n}\n\nexport const CHAIN_ID_NAMES: { [key: number]: string } = {\n  1: 'Mainnet',\n  3: 'Ropsten',\n  4: 'Rinkeby',\n  5: 'Görli',\n  42: 'Kovan',\n}\n\nexport const INFURA_PREFIXES: { [key: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n}\n\nexport enum EtherscanType {\n  Account,\n  TokenBalance,\n  Transaction,\n}\n\nconst ETHERSCAN_PREFIXES: { [key: number]: string } = {\n  1: '',\n  3: 'ropsten.',\n  4: 'rinkeby.',\n  5: 'goerli.',\n  42: 'kovan.',\n}\n\ninterface EtherscanTypeData {\n  [EtherscanType.Account]: [number, string]\n  [EtherscanType.TokenBalance]: [Token, string]\n  [EtherscanType.Transaction]: [number, string]\n}\n\nexport function formatEtherscanLink(type: EtherscanType, data: EtherscanTypeData[EtherscanType]): string {\n  switch (type) {\n    case EtherscanType.Account: {\n      const [chainId, address] = data as EtherscanTypeData[EtherscanType.Account]\n      return `https://${ETHERSCAN_PREFIXES[chainId]}etherscan.io/address/${address}`\n    }\n    case EtherscanType.TokenBalance: {\n      const [token, address] = data as EtherscanTypeData[EtherscanType.TokenBalance]\n      return `https://${ETHERSCAN_PREFIXES[token.chainId]}etherscan.io/token/${token.address}?a=${address}`\n    }\n    case EtherscanType.Transaction: {\n      const [chainId, hash] = data as EtherscanTypeData[EtherscanType.Transaction]\n      return `https://${ETHERSCAN_PREFIXES[chainId]}etherscan.io/tx/${hash}`\n    }\n  }\n}\n\nconst SAI = new Token(ChainId.MAINNET, '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359', 18)\nexport function getTokenDisplayValue(token: Token): string {\n  return token.equals(WETH[token.chainId]) ? 'ETH' : token.equals(SAI) ? 'SAI' : token.symbol ?? 'UNKNOWN'\n}\n\nexport function getPercentChange(referenceRate: Price, newRate: Price, flipOrder = false): Percent {\n  // calculate (referenceRate - newRate) / referenceRate or (newRate - referenceRate) / referenceRate\n  const difference = new Fraction(\n    flipOrder\n      ? JSBI.subtract(\n          JSBI.multiply(newRate.adjusted.numerator, referenceRate.adjusted.denominator),\n          JSBI.multiply(referenceRate.adjusted.numerator, newRate.adjusted.denominator)\n        )\n      : JSBI.subtract(\n          JSBI.multiply(referenceRate.adjusted.numerator, newRate.adjusted.denominator),\n          JSBI.multiply(newRate.adjusted.numerator, referenceRate.adjusted.denominator)\n        ),\n    JSBI.multiply(referenceRate.adjusted.denominator, newRate.adjusted.denominator)\n  )\n  const percentChange = difference.multiply(referenceRate.adjusted.invert())\n  return new Percent(percentChange.numerator, percentChange.denominator)\n}\n\nexport function modifyUrlObjectForIPFS(\n  url: string | UrlObject\n): {\n  href: UrlObject\n  as: UrlObject\n} {\n  const parsedUrl = typeof url === 'string' ? { pathname: url } : url\n  const { pathname, ...rest } = parsedUrl\n  const modifiedPathname = pathname === '/' ? './' : `.${pathname}${isIPFS ? '.html' : ''}`\n\n  return {\n    href: parsedUrl,\n    as: {\n      ...rest,\n      pathname: modifiedPathname,\n    },\n  }\n}\n\nexport function validImage(data) {\n  if (data && (data.includes('http') || data.includes('data:image'))) {\n    return true\n  } else {\n    return false\n  }\n}\n"]},"metadata":{},"sourceType":"module"}