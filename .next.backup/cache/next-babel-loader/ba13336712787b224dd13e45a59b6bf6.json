{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar _addTokenToWallet = function hook(token) {\n  console.log(token);\n  web3.currentProvider.sendAsync({\n    method: 'wallet_watchAsset',\n    params: {\n      \"type\": \"ERC20\",\n      // Initially only supports ERC20, but eventually more!\n      \"options\": {\n        \"address\": token.address,\n        // The address that the token is at.\n        \"symbol\": token.symbol,\n        // A ticker symbol or shorthand, up to 5 chars.\n        \"decimals\": token.decimals,\n        // The number of decimals in the token\n        \"image\": token.image || \"https://raw.githubusercontent.com/trustwallet/tokens/master/tokens/\" + token.address + \".png\" //\"https://circuitsofvalue.com/public/coval-logo.png\", // A string url of the token logo\n\n      }\n    },\n    id: Math.round(Math.random() * 100000)\n  }, function (err, addedBoolean) {});\n};\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n\nmodule.exports = {\n  addTokenToWallet: _addTokenToWallet,\n  addMany: function () {\n    var _addMany = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokens) {\n      var first;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              first = tokens.reverse().pop();\n\n              _addTokenToWallet(first);\n\n              _context.next = 4;\n              return sleep(3000);\n\n            case 4:\n              alert(0);\n              tokens.reverse().forEach(function (token) {\n                return _addTokenToWallet(token);\n              }); // _addTokenToWallet(tokens[2])\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function addMany(_x) {\n      return _addMany.apply(this, arguments);\n    }\n\n    return addMany;\n  }()\n};","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/public/web3.js"],"names":["_addTokenToWallet","hook","token","console","log","web3","currentProvider","sendAsync","method","params","address","symbol","decimals","image","id","Math","round","random","err","addedBoolean","sleep","ms","Promise","resolve","setTimeout","module","exports","addTokenToWallet","addMany","tokens","first","reverse","pop","alert","forEach"],"mappings":";;;;AAAA,IAAMA,iBAAiB,GAAG,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAC7CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAG,EAAAA,IAAI,CAACC,eAAL,CAAqBC,SAArB,CAA+B;AAC7BC,IAAAA,MAAM,EAAE,mBADqB;AAE7BC,IAAAA,MAAM,EAAE;AACN,cAAQ,OADF;AACW;AACjB,iBAAW;AACT,mBAAWP,KAAK,CAACQ,OADR;AACiB;AAC1B,kBAAUR,KAAK,CAACS,MAFP;AAEe;AACxB,oBAAYT,KAAK,CAACU,QAHT;AAGmB;AAC5B,iBAASV,KAAK,CAACW,KAAN,IAAe,wEAAsEX,KAAK,CAACQ,OAA5E,GAAoF,MAJnG,CAIyG;;AAJzG;AAFL,KAFqB;AAW7BI,IAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,MAA3B;AAXyB,GAA/B,EAYG,UAACC,GAAD,EAAMC,YAAN,EAAuB,CAEzB,CAdD;AAeD,CAjBD;;AAkBA,SAASC,KAAT,CAAeC,EAAf,EAAmB;AACjB,SAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,WAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAd;AAAA,GAAnB,CAAP;AACD;;AACDI,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,gBAAgB,EAAE3B,iBADL;AAEb4B,EAAAA,OAAO;AAAA,4EAAE,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACHC,cAAAA,KADG,GACKD,MAAM,CAACE,OAAP,GAAiBC,GAAjB,EADL;;AAEPhC,cAAAA,iBAAiB,CAAC8B,KAAD,CAAjB;;AAFO;AAAA,qBAGDV,KAAK,CAAC,IAAD,CAHJ;;AAAA;AAIPa,cAAAA,KAAK,CAAC,CAAD,CAAL;AACAJ,cAAAA,MAAM,CAACE,OAAP,GAAiBG,OAAjB,CAAyB,UAAAhC,KAAK;AAAA,uBAAIF,iBAAiB,CAACE,KAAD,CAArB;AAAA,eAA9B,EALO,CAMP;;AANO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAFM,CAAjB","sourcesContent":["const _addTokenToWallet = function hook(token) {\n  console.log(token)\n  web3.currentProvider.sendAsync({\n    method: 'wallet_watchAsset',\n    params: {\n      \"type\": \"ERC20\", // Initially only supports ERC20, but eventually more!\n      \"options\": {\n        \"address\": token.address, // The address that the token is at.\n        \"symbol\": token.symbol, // A ticker symbol or shorthand, up to 5 chars.\n        \"decimals\": token.decimals, // The number of decimals in the token\n        \"image\": token.image || \"https://raw.githubusercontent.com/trustwallet/tokens/master/tokens/\"+token.address+\".png\"//\"https://circuitsofvalue.com/public/coval-logo.png\", // A string url of the token logo\n      },\n    },\n    id: Math.round(Math.random() * 100000),\n  }, (err, addedBoolean) => {\n\n  })\n}\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nmodule.exports = {\n    addTokenToWallet: _addTokenToWallet,\n    addMany: async (tokens)=>{\n      let first = tokens.reverse().pop()\n      _addTokenToWallet(first)      \n      await sleep(3000)\n      alert(0)\n      tokens.reverse().forEach(token => _addTokenToWallet(token))\n      // _addTokenToWallet(tokens[2])\n    }\n}"]},"metadata":{},"sourceType":"script"}