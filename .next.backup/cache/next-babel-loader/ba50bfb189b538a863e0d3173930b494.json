{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { FormControl, FormLabel, FormHelperText, Input, Stack, Box, Flex, Textarea, Button, Link, Select } from '@chakra-ui/core';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport Loader from 'react-loader';\nimport { usePapaParse } from 'react-papaparse';\nexport default function Batch() {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: batches,\n    1: setBatches\n  } = useState([]);\n  const {\n    0: demoIndex,\n    1: setDemoIndex\n  } = useState(-1);\n  const {\n    0: action,\n    1: setAction\n  } = useState(query.action || 'list');\n  const {\n    0: batchName,\n    1: setBatchName\n  } = useState(\"\");\n  const {\n    0: imageBaseUrl,\n    1: setImageBaseUrl\n  } = useState(\"\");\n  const {\n    0: inscriptionBaseUrl,\n    1: setInscriptionBaseUrl\n  } = useState(\"\");\n  const {\n    0: addressType,\n    1: setAddressType\n  } = useState(\"\");\n  const {\n    0: titleTemplate,\n    1: setTitleTemplate\n  } = useState(\"\");\n  const {\n    0: descriptionTemplate,\n    1: setDescriptionTemplate\n  } = useState(\"\");\n  const {\n    0: total,\n    1: setTotal\n  } = useState(\"\");\n  const {\n    0: batchData,\n    1: setBatchData\n  } = useState(\"\");\n  const {\n    0: batchDataJson,\n    1: setBatchDataJson\n  } = useState([]);\n  const {\n    0: batchId,\n    1: setBatchId\n  } = useState(query.batch_id || \"\");\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    readString,\n    jsonToCSV\n  } = usePapaParse();\n  useEffect(() => {\n    if (!state.loaded && batchId && !batchName) {\n      getBatch();\n    } else if (!state.loaded && !batchId && !batchName && action == 'list') {\n      getBatches();\n    } else {\n      setState({\n        loaded: true\n      });\n    }\n  }, []);\n\n  const getBatch = async () => {\n    var requestOptions = {\n      method: 'GET'\n    };\n    fetch(EMBLEM_API + `/batch?batchId=${batchId}`, requestOptions).then(async response => {\n      let record = await response.json();\n      setState({\n        loaded: true\n      });\n      setBatchName(record.batch_name);\n      setImageBaseUrl(record.image_base_url);\n      setInscriptionBaseUrl(record.inscription_base_url);\n      setAddressType(record.address_type);\n      setTitleTemplate(record.title_template);\n      setDescriptionTemplate(record.description_template);\n      let parsedJson = JSON.parse(record.data);\n      setBatchDataJson(parsedJson);\n      let csvData = jsonToCSV(parsedJson);\n      setBatchData(csvData);\n      setTotal((parsedJson.length - 1).toString());\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const getBatches = async () => {\n    var requestOptions = {\n      method: 'GET'\n    };\n    fetch(EMBLEM_API + `/batches`, requestOptions).then(async response => {\n      let records = await response.json();\n      console.log(records);\n      setBatches(records);\n      setState({\n        loaded: true\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    let jsonData = await csvToJson(batchData);\n    const serializedForm = {\n      batchName,\n      imageBaseUrl,\n      inscriptionBaseUrl,\n      addressType,\n      titleTemplate,\n      descriptionTemplate,\n      total,\n      batchId,\n      batchData: jsonData.data\n    };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm)\n    }).then(async response => {\n      let data = await response.json();\n\n      if (data.id) {\n        setBatchId(data.id);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  function csvToJson(data) {\n    return new Promise((resolve, reject) => {\n      readString(data, {\n        worker: true,\n        complete: results => {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  function itemToTitleTemplate(item, index) {\n    let tokens = listTokens(titleTemplate); // console.log('item', item, 'index', index)\n    // console.log('title_template', titleTemplate)\n    // console.log('tokens', listTokens(titleTemplate))\n    // console.log('headers', batchDataJson[0])\n\n    let modifiedTitle = titleTemplate;\n    tokens.forEach((item, token_index) => {\n      console.log('token loop', token_index, item);\n      let value = item == 'batch_name' ? batchName : item == 'asset_number' ? batchDataJson[index][0] : item == 'inscription_number' ? batchDataJson[index][1] : '';\n      modifiedTitle = modifiedTitle.replace(item, value);\n    });\n    modifiedTitle = modifiedTitle.replaceAll('{', '').replaceAll('}', ''); // console.log('---- title ----', modifiedTitle.replaceAll('{', '').replaceAll('}', ''))\n\n    return modifiedTitle;\n  }\n\n  function listTokens(str) {\n    let regex = /\\{(.*?)\\}/g;\n    let result;\n    let items = [];\n\n    while (result = regex.exec(str)) {\n      items = items.concat(result[1].split(','));\n    }\n\n    return items;\n  }\n\n  function isValidBatchData() {\n    if (!batchDataJson) return false;\n    let hasRows = batchDataJson.length > 1;\n    if (!hasRows) return false;\n    let correctColumns = batchDataJson[0].length == 4;\n    let correctHeaders = batchDataJson[0][0] == 'asset_number' && batchDataJson[0][1] == 'inscription_number' && batchDataJson[0][2] == 'inscription_hash' && batchDataJson[0][3] == 'to';\n    return hasRows && correctColumns && correctHeaders;\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }\n  }, action && (action == 'edit' || action == 'add') ? __jsx(React.Fragment, null, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 15\n    }\n  }, __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, \" All Batch Jobs\"), batchId ? __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=view&batch_id=\" + batchId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 19\n    }\n  }, \" View Job\") : null), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 19\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"batch-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 23\n    }\n  }, \"Batch Name\"), __jsx(Input, {\n    type: \"text\",\n    id: \"batch-name\",\n    \"aria-describedby\": \"batch-name-text\",\n    value: batchName,\n    onChange: e => setBatchName(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"batch-name-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 23\n    }\n  }, \"Give it a unique name for this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"image-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 23\n    }\n  }, \"Image Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"image-base-url\",\n    \"aria-describedby\": \"image-base-url-text\",\n    value: imageBaseUrl,\n    onChange: e => setImageBaseUrl(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"image-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 23\n    }\n  }, \"Enter the base url for the images in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"inscription-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 23\n    }\n  }, \"Inscription Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"inscription-base-url\",\n    \"aria-describedby\": \"inscription-base-url-text\",\n    value: inscriptionBaseUrl,\n    onChange: e => setInscriptionBaseUrl(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"inscription-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 23\n    }\n  }, \"Enter the base url for the inscriptions in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"address-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 23\n    }\n  }, \"Address Type\"), __jsx(Input, {\n    type: \"text\",\n    id: \"address-type\",\n    \"aria-describedby\": \"address-type-text\",\n    value: addressType,\n    onChange: e => setAddressType(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"address-type-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 23\n    }\n  }, \"Enter the address type for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"title-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 23\n    }\n  }, \"Title Template\"), __jsx(Textarea, {\n    id: \"title-template\",\n    fontSize: 'xx-small',\n    size: \"lg\",\n    \"aria-describedby\": \"title-template-text\",\n    minLength: 3,\n    maxLength: 4024,\n    value: titleTemplate,\n    onChange: e => setTitleTemplate(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"title-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 23\n    }\n  }, \"Enter the title template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 23\n    }\n  }, \"Description Template\"), __jsx(Textarea, {\n    id: \"description-template\",\n    fontSize: 'xx-small',\n    size: \"lg\",\n    \"aria-describedby\": \"description-template-text\",\n    minLength: 3,\n    maxLength: 1024,\n    value: descriptionTemplate,\n    onChange: e => setDescriptionTemplate(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"description-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 23\n    }\n  }, \"Enter the description template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 23\n    }\n  }, \"Total\"), __jsx(Input, {\n    isDisabled: true,\n    type: \"number\",\n    id: \"total\",\n    \"aria-describedby\": \"total-text\",\n    value: total,\n    onChange: e => setTotal(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"total-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 23\n    }\n  }, \"Enter the total number of items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 23\n    }\n  }, \"Records\"), __jsx(Textarea, {\n    id: \"records\",\n    size: \"lg\",\n    fontSize: 'xx-small',\n    \"aria-describedby\": \"records-text\",\n    minLength: 3,\n    value: batchData,\n    onChange: async e => {\n      setBatchData(e.target.value);\n      let jsonData = await csvToJson(e.target.value);\n      setBatchDataJson(jsonData.data);\n      setTotal(jsonData.data.length > 1 ? (jsonData.data.length - 1).toString() : '0');\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"records-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 23\n    }\n  }, \"Enter the CSV rows from the helper spreadsheet\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"15px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 19\n    }\n  }, __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    isDisabled: !isValidBatchData(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 21\n    }\n  }, \"Submit\")), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"15px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 19\n    }\n  }, isValidBatchData() ? __jsx(Select, {\n    id: \"type-selector\",\n    w: \"100%\",\n    value: demoIndex,\n    onChange: e => {\n      setDemoIndex(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 23\n    }\n  }, __jsx(\"option\", {\n    value: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 25\n    }\n  }, \"Select # to preview\"), batchDataJson.map((item, index) => {\n    console.log(item);\n\n    if (index > 0) {\n      return __jsx(\"option\", {\n        value: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 31\n        }\n      }, itemToTitleTemplate(item, index));\n    }\n  })) : null))))) : action == 'list' ? __jsx(Box, {\n    maxW: \"lg\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 11\n    }\n  }, batches.length > 0 ? batches.map((item, index) => {\n    return __jsx(Stack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 17\n      }\n    }, __jsx(Link, {\n      margin: \"10px\",\n      href: \"/batch?action=edit&batch_id=\" + item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 19\n      }\n    }, \" \", item.batch_name, \" (\", item.status, \")\"));\n  }) : null, __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 11\n    }\n  }, \" Add New Batch\")) : null));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx"],"names":["FormControl","FormLabel","FormHelperText","Input","Stack","Box","Flex","Textarea","Button","Link","Select","useRouter","useEffect","useState","EMBLEM_API","Loader","usePapaParse","Batch","query","batches","setBatches","demoIndex","setDemoIndex","action","setAction","batchName","setBatchName","imageBaseUrl","setImageBaseUrl","inscriptionBaseUrl","setInscriptionBaseUrl","addressType","setAddressType","titleTemplate","setTitleTemplate","descriptionTemplate","setDescriptionTemplate","total","setTotal","batchData","setBatchData","batchDataJson","setBatchDataJson","batchId","setBatchId","batch_id","state","setState","loaded","readString","jsonToCSV","getBatch","getBatches","requestOptions","method","fetch","then","response","record","json","batch_name","image_base_url","inscription_base_url","address_type","title_template","description_template","parsedJson","JSON","parse","data","csvData","length","toString","catch","err","console","log","records","handleSubmit","event","preventDefault","myHeaders","Headers","append","jsonData","csvToJson","serializedForm","headers","body","stringify","id","Promise","resolve","reject","worker","complete","results","itemToTitleTemplate","item","index","tokens","listTokens","modifiedTitle","forEach","token_index","value","replace","replaceAll","str","regex","result","items","exec","concat","split","isValidBatchData","hasRows","correctColumns","correctHeaders","e","target","Number","map","status"],"mappings":"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","sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Stack,\n  Box,\n  Flex,\n  Text,\n  Textarea,\n  Button,\n  Link,\n  Select\n} from '@chakra-ui/core'\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport Loader from 'react-loader'\nimport { usePapaParse } from 'react-papaparse';\n\nexport default function Batch() {\n  const { query } = useRouter()\n  const [batches, setBatches] = useState([])\n  const [demoIndex, setDemoIndex] = useState(-1)\n  const [action, setAction] = useState(query.action || 'list')\n  const [batchName, setBatchName] = useState(\"\");\n  const [imageBaseUrl, setImageBaseUrl] = useState(\"\");\n  const [inscriptionBaseUrl, setInscriptionBaseUrl] = useState(\"\");\n  const [addressType, setAddressType] = useState(\"\");\n  const [titleTemplate, setTitleTemplate] = useState(\"\");\n  const [descriptionTemplate, setDescriptionTemplate] = useState(\"\");\n  const [total, setTotal] = useState(\"\");\n  const [batchData, setBatchData] = useState(\"\");\n  const [batchDataJson, setBatchDataJson] = useState([]);\n  const [batchId, setBatchId] = useState(query.batch_id || \"\")\n  const [state, setState] = useState({ loaded: false })\n  const { readString, jsonToCSV } = usePapaParse();\n\n\n  useEffect(() => {\n    if (!state.loaded && batchId && !batchName) {\n      getBatch()\n    } else if (!state.loaded && !batchId && !batchName && action == 'list') {\n      getBatches()\n    } else {\n      setState({ loaded: true })\n    }\n  }, [])\n\n  const getBatch = async () => {\n    var requestOptions: any = {\n      method: 'GET'\n    };\n\n    fetch(EMBLEM_API + `/batch?batchId=${batchId}`, requestOptions).then(async (response) => {\n      let record = await response.json()\n      setState({ loaded: true })\n      setBatchName(record.batch_name)\n      setImageBaseUrl(record.image_base_url)\n      setInscriptionBaseUrl(record.inscription_base_url)\n      setAddressType(record.address_type)\n      setTitleTemplate(record.title_template)\n      setDescriptionTemplate(record.description_template)\n      let parsedJson = JSON.parse(record.data)\n      setBatchDataJson(parsedJson)\n      let csvData = jsonToCSV(parsedJson)\n      setBatchData(csvData)\n      setTotal((parsedJson.length - 1).toString())\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const getBatches = async () => {\n    var requestOptions: any = {\n      method: 'GET'\n    };\n\n    fetch(EMBLEM_API + `/batches`, requestOptions).then(async (response) => {\n      let records = await response.json()\n      console.log(records)\n      setBatches(records)\n      setState({ loaded: true })\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    let jsonData: any = await csvToJson(batchData)\n    const serializedForm = {\n      batchName,\n      imageBaseUrl,\n      inscriptionBaseUrl,\n      addressType,\n      titleTemplate,\n      descriptionTemplate,\n      total,\n      batchId,\n      batchData: jsonData.data\n\n    };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm),\n    }).then(async (response) => {\n      let data = await response.json()\n      if (data.id) {\n        setBatchId(data.id)\n      }\n    }).catch(err => {\n      console.log(err)\n    })\n  };\n\n  function csvToJson(data) {\n    return new Promise((resolve, reject) => {\n      readString(data, {\n        worker: true,\n        complete: (results: any) => {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  function itemToTitleTemplate(item, index){\n    let tokens = listTokens(titleTemplate)\n    // console.log('item', item, 'index', index)\n    // console.log('title_template', titleTemplate)\n    // console.log('tokens', listTokens(titleTemplate))\n    // console.log('headers', batchDataJson[0])\n    let modifiedTitle = titleTemplate\n    tokens.forEach((item, token_index)=>{\n      console.log('token loop', token_index, item)\n      let value = item == 'batch_name'? batchName: item == 'asset_number'? batchDataJson[index][0]: item == 'inscription_number'? batchDataJson[index][1]: ''\n      modifiedTitle = modifiedTitle.replace(item, value)\n    })\n    modifiedTitle = modifiedTitle.replaceAll('{', '').replaceAll('}', '')\n    // console.log('---- title ----', modifiedTitle.replaceAll('{', '').replaceAll('}', ''))\n    return modifiedTitle\n  }\n\n  function listTokens(str) {\n    let regex = /\\{(.*?)\\}/g;\n    let result;\n    let items = [];\n    \n    while (result = regex.exec(str)) {\n      items = items.concat(result[1].split(','));\n    }\n  \n    return items;\n  }\n\n  function isValidBatchData() {\n    if (!batchDataJson) return false\n    let hasRows = batchDataJson.length > 1\n    if (!hasRows) return false\n    let correctColumns = batchDataJson[0].length == 4\n    let correctHeaders = batchDataJson[0][0] == 'asset_number' && batchDataJson[0][1] == 'inscription_number' && batchDataJson[0][2] == 'inscription_hash' && batchDataJson[0][3] == 'to'\n    return hasRows && correctColumns && correctHeaders\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n        {action && (action == 'edit' || action == 'add') ? (\n          <>\n            <Stack>\n              <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n              <Stack>\n                <Link margin=\"10px\" href={\"/batch?action=list\"}> All Batch Jobs</Link>\n                {batchId? (\n                  <Link margin=\"10px\" href={\"/batch?action=view&batch_id=\"+batchId}> View Job</Link>\n                ): null}                \n              </Stack>\n                <form onSubmit={handleSubmit}>\n                  <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"batch-name\">Batch Name</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"batch-name\"\n                        aria-describedby=\"batch-name-text\"\n                        value={batchName}\n                        onChange={(e) => setBatchName(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"batch-name-text\">Give it a unique name for this batch.</FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"image-base-url\">Image Base Url</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"image-base-url\"\n                        aria-describedby=\"image-base-url-text\"\n                        value={imageBaseUrl}\n                        onChange={(e) => setImageBaseUrl(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"image-base-url-text\">\n                        Enter the base url for the images in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"inscription-base-url\">Inscription Base Url</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"inscription-base-url\"\n                        aria-describedby=\"inscription-base-url-text\"\n                        value={inscriptionBaseUrl}\n                        onChange={(e) => setInscriptionBaseUrl(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"inscription-base-url-text\">\n                        Enter the base url for the inscriptions in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"address-type\">Address Type</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"address-type\"\n                        aria-describedby=\"address-type-text\"\n                        value={addressType}\n                        onChange={(e) => setAddressType(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"address-type-text\">\n                        Enter the address type for the items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"title-template\">Title Template</FormLabel>\n                      <Textarea\n                        id=\"title-template\"\n                        fontSize={'xx-small'}\n                        size=\"lg\"\n                        aria-describedby=\"title-template-text\"\n                        minLength={3}\n                        maxLength={4024}\n                        value={titleTemplate}\n                        onChange={(e) => setTitleTemplate(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"title-template-text\">\n                        Enter the title template for the items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"description-template\">Description Template</FormLabel>\n                      <Textarea\n                        id=\"description-template\"\n                        fontSize={'xx-small'}\n                        size=\"lg\"\n                        aria-describedby=\"description-template-text\"\n                        minLength={3}\n                        maxLength={1024}\n                        value={descriptionTemplate}\n                        onChange={(e) => setDescriptionTemplate(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"description-template-text\">\n                        Enter the description template for the items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"total\">Total</FormLabel>\n                      <Input\n                        isDisabled={true}\n                        type=\"number\"\n                        id=\"total\"\n                        aria-describedby=\"total-text\"\n                        value={total}\n                        onChange={(e) => setTotal(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"total-text\">\n                        Enter the total number of items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"description-template\">Records</FormLabel>\n                      <Textarea\n                        id=\"records\"\n                        size=\"lg\"\n                        fontSize={'xx-small'}\n                        aria-describedby=\"records-text\"\n                        minLength={3}\n                        value={batchData}\n                        onChange={async (e) => {\n                          setBatchData(e.target.value)\n                          let jsonData: any = await csvToJson(e.target.value)\n                          setBatchDataJson(jsonData.data)\n                          setTotal(jsonData.data.length > 1 ? (jsonData.data.length - 1).toString() : '0')\n                        }}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"records-text\">\n                        Enter the CSV rows from the helper spreadsheet\n                      </FormHelperText>\n                    </FormControl>\n                  </Stack>\n                  <Stack direction=\"row\" align=\"flex-start\" padding=\"15px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <Button mt={4} type=\"submit\" isDisabled={!isValidBatchData()} >\n                      Submit\n                    </Button>\n                  </Stack>\n                  <Stack direction=\"row\" align=\"flex-start\" padding=\"15px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    {isValidBatchData()? (\n                      <Select id=\"type-selector\" w=\"100%\" value={demoIndex}\n                      onChange={(e)=>{\n                        setDemoIndex(Number(e.target.value))\n                      }}\n                      >\n                        <option value=\"-1\" >Select # to preview</option>\n                        {batchDataJson.map((item, index)=>{\n                          console.log(item)\n                          if (index > 0) {\n                            return (\n                              <option value={index}>{itemToTitleTemplate(item, index)}</option>\n                            )\n                          }\n                        })}\n                      </Select>\n                    ): null}\n                  \n                  </Stack>\n                </form>\n              </Box>\n            </Stack>\n          </>\n        ) : action == 'list'? (\n          <Box maxW=\"lg\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n            {batches.length> 0 ? batches.map((item, index)=>{\n              return (\n                <Stack>\n                  <Link margin=\"10px\" href={\"/batch?action=edit&batch_id=\"+item.id}> {item.batch_name} ({item.status})</Link>\n                </Stack>\n              )\n            }):null}\n          <Link margin=\"10px\" href={\"/batch?action=add\"}> Add New Batch</Link>\n          </Box>\n        ): null}\n        \n      </Flex>\n\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}