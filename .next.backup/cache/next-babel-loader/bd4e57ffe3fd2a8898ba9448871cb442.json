{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar _addTokenToWallet = function hook(token) {\n  console.log(token);\n  web3.currentProvider.sendAsync({\n    method: 'wallet_watchAsset',\n    params: {\n      \"type\": \"ERC20\",\n      // Initially only supports ERC20, but eventually more!\n      \"options\": {\n        \"address\": token.address,\n        // The address that the token is at.\n        \"symbol\": token.symbol,\n        // A ticker symbol or shorthand, up to 5 chars.\n        \"decimals\": token.decimals,\n        // The number of decimals in the token\n        \"image\": token.image || \"https://raw.githubusercontent.com/trustwallet/tokens/master/tokens/\" + token.address + \".png\" //\"https://circuitsofvalue.com/public/coval-logo.png\", // A string url of the token logo\n\n      }\n    },\n    id: Math.round(Math.random() * 100000)\n  }, function (err, addedBoolean) {});\n};\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n\nmodule.exports = {\n  addTokenToWallet: _addTokenToWallet,\n  addMany: function () {\n    var _addMany = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokens) {\n      var first;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              first = tokens.reverse().pop();\n              first = tokens.pop();\n\n              _addTokenToWallet(first);\n\n              _context.next = 5;\n              return sleep(1);\n\n            case 5:\n              alert('Loading all tokens into wallet..');\n              _context.next = 8;\n              return sleep(1);\n\n            case 8:\n              tokens.reverse().forEach(function (token) {\n                return _addTokenToWallet(token);\n              }); // _addTokenToWallet(tokens[2])\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function addMany(_x) {\n      return _addMany.apply(this, arguments);\n    }\n\n    return addMany;\n  }()\n};","map":null,"metadata":{},"sourceType":"script"}