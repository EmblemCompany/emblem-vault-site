{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Stack, Button } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { TransactionToast } from './TransactionToast';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { VStack, Divider } from '@chakra-ui/react';\nimport { contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport { Contract } from '@ethersproject/contracts';\nexport default function Admin() {\n  _s();\n\n  var _this = this;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useState = useState({\n    loaded: true\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(true),\n      loadingApi = _useState2[0],\n      setLoadingApi = _useState2[1];\n\n  var _useState3 = useState(true),\n      refreshing = _useState3[0],\n      setRefreshing = _useState3[1];\n\n  var _useState4 = useState([]),\n      stats = _useState4[0],\n      setStats = _useState4[1];\n\n  var _useState5 = useState(query.address || null),\n      address = _useState5[0],\n      setAddress = _useState5[1];\n\n  var _useState6 = useState(0),\n      offset = _useState6[0],\n      setOffset = _useState6[1];\n\n  var _useState7 = useState(10),\n      limit = _useState7[0],\n      setLimit = _useState7[1];\n\n  var _useState8 = useState(address ? true : false),\n      shouldFetchData = _useState8[0],\n      setShouldFetchData = _useState8[1];\n\n  var _useState9 = useState(true),\n      hasMore = _useState9[0],\n      setHasMore = _useState9[1];\n\n  var _useState10 = useState(false),\n      buttonDisabled = _useState10[0],\n      setButtonDisabled = _useState10[1];\n\n  var _useState11 = useState(null),\n      hash = _useState11[0],\n      setHash = _useState11[1];\n\n  var _useState12 = useState([]),\n      factories = _useState12[0],\n      setFactories = _useState12[1];\n\n  var _useState13 = useState([]),\n      clones = _useState13[0],\n      setClones = _useState13[1];\n\n  var handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  // useEffect(() => {\n  //   if (state.loaded == false && !loadingApi && address) {\n  //     setLoadingApi(false)\n  //     // getPnL()\n  //   }\n  // }, [])\n  // useEffect(() => {\n  //   if (shouldFetchData && address) {\n  //     console.log(\"Should load api after setting consts\", offset)\n  //     setShouldFetchData(false)\n  //     // getPnL()\n  //   } else {\n  //     console.log(\"wtf\")\n  //   }\n  // }, [shouldFetchData, offset])\n  // const fetchDataForLazyLoad = async () =>{    \n  //   console.log('setting new offset to', offset+limit)\n  //   setOffset(offset+limit)\n  //   setShouldFetchData(true)\n  // }\n  useEffect(function () {\n    if (loadingApi && refreshing) {\n      // alert(0)\n      GetContracts();\n    }\n  });\n\n  var StartRefresh = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setRefreshing(true);\n              setLoadingApi(true);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function StartRefresh() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  function createClone(_x) {\n    return _createClone.apply(this, arguments);\n  }\n\n  function _createClone() {\n    _createClone = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(cloneType) {\n      var factory, factoryContract;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              factory = factories.filter(function (factory) {\n                return factory.type == cloneType;\n              })[0];\n              factoryContract = getFactoryContract(factory.address);\n              factoryContract.createClone(account).then(function (_ref2) {\n                var hash = _ref2.hash;\n                console.log(\"hash\", hash);\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _createClone.apply(this, arguments);\n  }\n\n  function GetContracts() {\n    return _GetContracts.apply(this, arguments);\n  }\n\n  function _GetContracts() {\n    _GetContracts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var factories, factoryInfo;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              setLoadingApi(false);\n              getClones();\n              _context3.next = 4;\n              return handlerContract.getAllRegisteredContractsOfType(8);\n\n            case 4:\n              factories = _context3.sent;\n              _context3.next = 7;\n              return getFactoryInto(factories, 0, []);\n\n            case 7:\n              factoryInfo = _context3.sent;\n              setFactories(factoryInfo);\n              setRefreshing(false);\n              setState({\n                loaded: true\n              });\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _GetContracts.apply(this, arguments);\n  }\n\n  function getFactoryInto(_x2, _x3, _x4) {\n    return _getFactoryInto.apply(this, arguments);\n  }\n\n  function _getFactoryInto() {\n    _getFactoryInto = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(factories, index, values) {\n      var factory, factoryContract, factoryType, factoryClones, factoryOwner, detailedClones;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              factory = factories[index];\n              factoryContract = getFactoryContract(factory);\n              _context4.next = 4;\n              return factoryContract.factoryType();\n\n            case 4:\n              factoryType = _context4.sent;\n              _context4.next = 7;\n              return factoryContract.getClones();\n\n            case 7:\n              factoryClones = _context4.sent;\n              _context4.next = 10;\n              return factoryContract.owner();\n\n            case 10:\n              factoryOwner = _context4.sent;\n              _context4.next = 13;\n              return getCloneInto(factoryClones, 0, factoryType, []);\n\n            case 13:\n              detailedClones = _context4.sent;\n              values.push({\n                type: factoryType,\n                address: factory,\n                clones: detailedClones,\n                owner: factoryOwner\n              });\n\n              if (!(index + 1 == factories.length)) {\n                _context4.next = 19;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", values);\n\n            case 19:\n              return _context4.abrupt(\"return\", getFactoryInto(factories, index + 1, values));\n\n            case 20:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _getFactoryInto.apply(this, arguments);\n  }\n\n  function getClones() {\n    return _getClones.apply(this, arguments);\n  }\n\n  function _getClones() {\n    _getClones = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var erc1155, erc721, erc20;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return handlerContract.getAllRegisteredContractsOfType(1);\n\n            case 2:\n              erc1155 = _context5.sent;\n              console.log(\"---------\", erc1155, erc1155.length);\n              _context5.next = 6;\n              return getCloneInto(erc1155, 0, \"ERC1155\", []);\n\n            case 6:\n              erc1155 = _context5.sent;\n              _context5.next = 9;\n              return handlerContract.getAllRegisteredContractsOfType(2);\n\n            case 9:\n              erc721 = _context5.sent;\n              _context5.next = 12;\n              return getCloneInto(erc721, 0, \"ERC721\", []);\n\n            case 12:\n              erc721 = _context5.sent;\n              _context5.next = 15;\n              return handlerContract.getAllRegisteredContractsOfType(4);\n\n            case 15:\n              erc20 = _context5.sent;\n              _context5.next = 18;\n              return getCloneInto(erc20, 0, \"ERC20\", []);\n\n            case 18:\n              erc20 = _context5.sent;\n              setClones(erc1155.concat(erc721).concat(erc20));\n\n            case 20:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _getClones.apply(this, arguments);\n  }\n\n  function getCloneInto(_x5, _x6, _x7, _x8) {\n    return _getCloneInto.apply(this, arguments);\n  }\n\n  function _getCloneInto() {\n    _getCloneInto = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_clones, index, cloneType, values) {\n      var clone, cloneContract, cloneOwner, cloneName, decimals, cloneBalance;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(_clones.length == 0)) {\n                _context6.next = 2;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", values);\n\n            case 2:\n              clone = _clones[index];\n              cloneContract = getCloneContract(clone, cloneType);\n              _context6.next = 6;\n              return cloneContract.owner();\n\n            case 6:\n              cloneOwner = _context6.sent;\n              _context6.next = 9;\n              return cloneContract.name();\n\n            case 9:\n              cloneName = _context6.sent;\n\n              if (!(cloneType == \"ERC20\")) {\n                _context6.next = 16;\n                break;\n              }\n\n              _context6.next = 13;\n              return cloneContract.decimals();\n\n            case 13:\n              _context6.t0 = _context6.sent;\n              _context6.next = 17;\n              break;\n\n            case 16:\n              _context6.t0 = 0;\n\n            case 17:\n              decimals = _context6.t0;\n\n              if (!(cloneType == \"ERC20\")) {\n                _context6.next = 27;\n                break;\n              }\n\n              _context6.t2 = calculateBalance;\n              _context6.next = 22;\n              return cloneContract.balanceOf(account);\n\n            case 22:\n              _context6.t3 = _context6.sent.toNumber();\n              _context6.t4 = decimals;\n              _context6.t1 = (0, _context6.t2)(_context6.t3, _context6.t4);\n              _context6.next = 35;\n              break;\n\n            case 27:\n              if (!(cloneType == \"ERC1155\")) {\n                _context6.next = 33;\n                break;\n              }\n\n              _context6.next = 30;\n              return getERC1155TokenBalance(cloneContract, account);\n\n            case 30:\n              _context6.t5 = _context6.sent;\n              _context6.next = 34;\n              break;\n\n            case 33:\n              _context6.t5 = 0;\n\n            case 34:\n              _context6.t1 = _context6.t5;\n\n            case 35:\n              cloneBalance = _context6.t1;\n              values.push({\n                address: clone,\n                owner: cloneOwner,\n                name: cloneName,\n                type: cloneType,\n                balance: cloneBalance,\n                decimals: decimals\n              });\n\n              if (!(index + 1 == _clones.length)) {\n                _context6.next = 41;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", values);\n\n            case 41:\n              return _context6.abrupt(\"return\", getCloneInto(_clones, index + 1, cloneType, values));\n\n            case 42:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _getCloneInto.apply(this, arguments);\n  }\n\n  function getERC1155TokenBalance(_x9, _x10) {\n    return _getERC1155TokenBalance.apply(this, arguments);\n  }\n\n  function _getERC1155TokenBalance() {\n    _getERC1155TokenBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(contract, address) {\n      var ids;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return contract.getTokenIds();\n\n            case 2:\n              ids = _context7.sent;\n              console.log(\"ids\", ids);\n              return _context7.abrupt(\"return\", ids.length);\n\n            case 5:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _getERC1155TokenBalance.apply(this, arguments);\n  }\n\n  function getCloneContract(address, cloneType) {\n    var abi;\n\n    switch (cloneType) {\n      case \"ERC20\":\n        abi = contractAddresses.erc20Abi;\n        break;\n\n      case \"ERC721\":\n        abi = contractAddresses.erc721Abi;\n        break;\n\n      case \"ERC1155\":\n        abi = contractAddresses.erc1155Abi;\n        break;\n    }\n\n    return new Contract(address, abi, library.getSigner(account).connectUnchecked());\n  }\n\n  function getFactoryContract(address) {\n    return new Contract(address, contractAddresses.clonableFactoryAbi, library.getSigner(account).connectUnchecked());\n  }\n\n  function calculateBalance(balance, decimals) {\n    return balance / Math.pow(10, parseInt(decimals));\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }, refreshing ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    w: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: StartRefresh,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, \"Refresh Data\"), clones.length > 0 ? clones.map(function (clone, index) {\n    return __jsx(VStack, {\n      key: \"factory-\" + index,\n      p: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 15\n      }\n    }, __jsx(Box, {\n      w: \"100%\",\n      \"min-width\": \"40px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }, __jsx(Text, {\n      key: clone.address,\n      ml: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 19\n      }\n    }, clone.owner == account ? \"Owned\" : null, \" \", clone.type, \" : \", clone.address, \" \"), __jsx(Divider, {\n      orientation: \"horizontal\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 19\n      }\n    }), __jsx(Text, {\n      key: clone.name + index,\n      ml: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 19\n      }\n    }, \"Name: \", clone.name || \"Not Named\"), __jsx(Divider, {\n      orientation: \"horizontal\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 19\n      }\n    }), __jsx(Text, {\n      key: clone.balance + index,\n      ml: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 19\n      }\n    }, \"Balance: \", clone.balance)));\n  }) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      setHash(null);\n      StartRefresh();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 11\n    }\n  }) : null, \"(\", __jsx(VStack, {\n    p: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }\n  }, __jsx(Box, {\n    w: \"100%\",\n    \"min-width\": \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    w: 300,\n    m: 2,\n    onClick: function onClick() {\n      createClone(\"ERC20\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 15\n    }\n  }, \"Create ERC20\"), __jsx(Divider, {\n    orientation: \"horizontal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 15\n    }\n  }), __jsx(Button, {\n    w: 300,\n    m: 2,\n    onClick: function onClick() {\n      createClone(\"ERC721\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 15\n    }\n  }, \"Create ERC721\"), __jsx(Divider, {\n    orientation: \"horizontal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 15\n    }\n  }), __jsx(Button, {\n    w: 300,\n    m: 2,\n    onClick: function onClick() {\n      createClone(\"ERC1155\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 15\n    }\n  }, \"Create ERC1155\"))), \")\")));\n}\n\n_s(Admin, \"E9NqaBcAQSKeT2NDMopwQfcKDok=\", false, function () {\n  return [useRouter, useWeb3React, useContract];\n});\n\n_c = Admin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx"],"names":["Box","Flex","Text","Stack","Button","Loader","Refreshing","useRouter","TransactionToast","useWeb3React","useEffect","useState","VStack","Divider","contractAddresses","useContract","Contract","Admin","query","account","chainId","library","loaded","state","setState","loadingApi","setLoadingApi","refreshing","setRefreshing","stats","setStats","address","setAddress","offset","setOffset","limit","setLimit","shouldFetchData","setShouldFetchData","hasMore","setHasMore","buttonDisabled","setButtonDisabled","hash","setHash","factories","setFactories","clones","setClones","handlerContract","vaultHandlerV8","vaultHandlerV8Abi","GetContracts","StartRefresh","createClone","cloneType","factory","filter","type","factoryContract","getFactoryContract","then","console","log","getClones","getAllRegisteredContractsOfType","getFactoryInto","factoryInfo","index","values","factoryType","factoryClones","owner","factoryOwner","getCloneInto","detailedClones","push","length","erc1155","erc721","erc20","concat","_clones","clone","cloneContract","getCloneContract","cloneOwner","name","cloneName","decimals","calculateBalance","balanceOf","toNumber","getERC1155TokenBalance","cloneBalance","balance","contract","getTokenIds","ids","abi","erc20Abi","erc721Abi","erc1155Abi","getSigner","connectUnchecked","clonableFactoryAbi","Math","pow","parseInt","map"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { TransactionToast } from './TransactionToast'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport {HStack, VStack, Circle, Divider } from '@chakra-ui/react'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\n\nimport { Contract } from '@ethersproject/contracts'\n\nexport default function Admin() {\n  const { query } = useRouter()\n  const { account, chainId, library } = useWeb3React()\n  const [state, setState] = useState({ loaded: true })\n  const [loadingApi, setLoadingApi] = useState(true)\n  const [refreshing, setRefreshing] = useState(true)\n  const [stats, setStats] = useState([])\n  const [address, setAddress] = useState(query.address || null)\n  const [offset, setOffset] = useState(0)\n  const [limit, setLimit] = useState(10)\n  const [shouldFetchData, setShouldFetchData] = useState(address? true: false)\n  const [hasMore, setHasMore] = useState(true)\n  const [buttonDisabled, setButtonDisabled] = useState(false)\n\n  const [hash, setHash] = useState(null)\n  const [factories, setFactories] = useState([])\n  const [clones, setClones] = useState([])\n\n  const handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  // useEffect(() => {\n  //   if (state.loaded == false && !loadingApi && address) {\n  //     setLoadingApi(false)\n  //     // getPnL()\n  //   }\n  // }, [])\n\n  // useEffect(() => {\n  //   if (shouldFetchData && address) {\n  //     console.log(\"Should load api after setting consts\", offset)\n  //     setShouldFetchData(false)\n  //     // getPnL()\n  //   } else {\n  //     console.log(\"wtf\")\n  //   }\n  // }, [shouldFetchData, offset])\n\n  // const fetchDataForLazyLoad = async () =>{    \n  //   console.log('setting new offset to', offset+limit)\n  //   setOffset(offset+limit)\n  //   setShouldFetchData(true)\n  // }\n\n    useEffect(() => {\n      if (loadingApi && refreshing) {\n        // alert(0)\n        GetContracts()\n      }\n    })\n\n  const StartRefresh = async()=>{\n    setRefreshing(true)\n    setLoadingApi(true)\n  }\n\n  async function createClone(cloneType) {\n    let factory = factories.filter(factory=>{ return factory.type == cloneType})[0]\n    let factoryContract = getFactoryContract(factory.address)\n    factoryContract.createClone(account).then(({ hash }: { hash: string }) => {\n      console.log(\"hash\", hash)\n      setHash(hash)\n    })\n  }\n\n  async function GetContracts() {\n    setLoadingApi(false)\n    getClones()\n    let factories = await handlerContract.getAllRegisteredContractsOfType(8)\n    let factoryInfo = await getFactoryInto(factories, 0, [])\n    setFactories(factoryInfo)\n    setRefreshing(false)\n    setState({loaded: true})\n  }\n\n  async function getFactoryInto(factories, index, values) {\n    let factory = factories[index]\n    let factoryContract = getFactoryContract(factory)\n    let factoryType = await factoryContract.factoryType()\n    let factoryClones = await factoryContract.getClones()\n    let factoryOwner = await factoryContract.owner()\n    let detailedClones = await getCloneInto(factoryClones, 0, factoryType, [])\n    \n    values.push({type: factoryType, address: factory, clones: detailedClones, owner: factoryOwner})\n\n    if (index+1 == factories.length) {\n      return values\n    } else {\n      return getFactoryInto(factories, index +1, values)\n    }\n  }\n\n  async function getClones() {\n    let erc1155 = await handlerContract.getAllRegisteredContractsOfType(1)\n    console.log(\"---------\", erc1155, erc1155.length)\n    erc1155 = await getCloneInto(erc1155, 0, \"ERC1155\", [])\n    let erc721 = await handlerContract.getAllRegisteredContractsOfType(2)\n    erc721 = await getCloneInto(erc721, 0, \"ERC721\", [])\n    let erc20 = await handlerContract.getAllRegisteredContractsOfType(4)\n    erc20 = await getCloneInto(erc20, 0, \"ERC20\", [])\n    setClones(erc1155.concat(erc721).concat(erc20))\n  }\n\n  async function getCloneInto(_clones, index, cloneType, values) {\n    if (_clones.length == 0) return values\n    let clone = _clones[index]\n    let cloneContract = getCloneContract(clone, cloneType)\n    let cloneOwner = await cloneContract.owner()\n    let cloneName = await cloneContract.name()\n    let decimals = cloneType == \"ERC20\"?  await cloneContract.decimals() : 0\n    let cloneBalance = cloneType == \"ERC20\"?  calculateBalance((await cloneContract.balanceOf(account)).toNumber(), decimals) : cloneType == \"ERC1155\" ? await getERC1155TokenBalance(cloneContract, account) : 0\n\n    values.push({address: clone, owner: cloneOwner, name: cloneName, type: cloneType, balance: cloneBalance, decimals: decimals})\n\n    if (index+1 == _clones.length) {\n      return values\n    } else {\n      return getCloneInto(_clones, index +1, cloneType, values)\n    }\n  }\n\n  async function getERC1155TokenBalance(contract, address) {\n    let ids = await contract.getTokenIds()\n    console.log(\"ids\", ids)\n    return ids.length\n  }\n\n  function getCloneContract(address, cloneType) {\n    let abi\n    switch(cloneType) {\n      case \"ERC20\":\n        abi = contractAddresses.erc20Abi\n        break;\n      case \"ERC721\":\n        abi = contractAddresses.erc721Abi\n        break;\n      case \"ERC1155\":\n        abi = contractAddresses.erc1155Abi\n        break;\n    }\n    return new Contract(address, abi, library.getSigner(account).connectUnchecked())\n  }\n\n  function getFactoryContract(address) {\n    return new Contract(address, contractAddresses.clonableFactoryAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  function calculateBalance(balance: number, decimals: string) {\n    return balance / Math.pow(10, parseInt(decimals))\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      {refreshing ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Stack align=\"center\" w={\"100%\"}>\n        \n        <Button onClick={StartRefresh}>Refresh Data</Button>\n\n        {/* {factories.length > 0? (\n          factories.map((factory, index)=>{\n            return (\n              <VStack key={\"factory-\"+index} p={2} >\n                <Box w=\"100%\" min-width=\"40px\">     \n                  <Text w=\"100%\">{factory.owner == account? \"Owned\": null} {factory.type} Factory: {factory.address}</Text>\n                  {factory.clones.map( (clone, index)=>{\n                      return (\n                        <>\n                          <Text key={clone.address} ml={12}>{clone.owner == account? \"Owned\": null} {factory.type} : {clone.address} </Text>\n                          <Divider orientation=\"horizontal\" />\n                          <Text key={clone.name + index} ml={12}>Name: {clone.name || \"Not Named\"}</Text>\n                        </>\n                      )\n                    }\n                  )}\n                  <Divider orientation=\"horizontal\" />\n                </Box>\n              </VStack>\n            )\n          })\n        ) : null}  */}\n        \n        { clones.length > 0? (\n          clones.map((clone, index)=>{\n            return (\n              <VStack key={\"factory-\"+index} p={2} >\n                <Box w=\"100%\" min-width=\"40px\">  \n                  <Text key={clone.address} ml={12}>{clone.owner == account? \"Owned\": null} {clone.type} : {clone.address} </Text>\n                  <Divider orientation=\"horizontal\" />\n                  <Text key={clone.name + index} ml={12}>Name: {clone.name || \"Not Named\"}</Text>\n                  <Divider orientation=\"horizontal\" />\n                  <Text key={clone.balance + index} ml={12}>Balance: {clone.balance}</Text>\n                </Box>\n              </VStack>\n            )\n          })\n        ) : null } \n        { hash? (\n          <TransactionToast\n          hash={hash}\n          onComplete={() => {\n            setHash(null)\n            StartRefresh()          \n          }}\n        />\n        ) : null}\n        (\n          <VStack p={2} >\n            <Box w=\"100%\" min-width=\"40px\">\n              <Button w={300} m={2} onClick={()=>{createClone(\"ERC20\")}}>Create ERC20</Button>\n              <Divider orientation=\"horizontal\" />\n              <Button w={300} m={2} onClick={()=>{createClone(\"ERC721\")}}>Create ERC721</Button>\n              <Divider orientation=\"horizontal\" />\n              <Button w={300} m={2} onClick={()=>{createClone(\"ERC1155\")}}>Create ERC1155</Button>\n            </Box>\n          </VStack>\n        )\n        \n        \n       </Stack>\n      </Flex>\n     \n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}