{"ast":null,"code":"import { JSBI } from '@uniswap/sdk';\nimport { abi as HandlerABI } from './abi/handler.json';\nimport { abi as SalesABI } from './abi/sales.json';\nimport { abi as CovalABI } from './abi/coval.json';\nimport { abi as EmblemABI } from './abi/emblem.json';\nimport { abi as NftradeABI } from './abi/nftrade.json';\nimport { abi as ClaimedABI } from './abi/claimed.json';\nimport { abi as VaultHandlerV8 } from './abi/VaultHandlerV8.json';\nimport { abi as ClonableFactory } from './abi/ClonableFactory.json';\nimport { abi as ERC20 } from './abi/ConfigurableERC20Upgradable.json';\nimport { abi as ERC721 } from './abi/EmblemVault.json';\nimport { abi as ERC1155 } from './abi/ERC1155Upgradable.json';\nimport { abi as mintVaultQuoteAbi } from './abi/mintVaultQuoteAbi.json';\nimport xcpJson from './curated/xcp.json';\nexport var BG = {\n  light: 'gray.50',\n  dark: 'gray.900'\n};\nexport var COLOR = {\n  light: 'black',\n  dark: 'white'\n};\nexport var isIPFS = process.env.IPFS === 'true';\nexport var isServerSide = false;\nvar API_OVERLOAD = process.env.API_OVERLOAD;\nexport var ADDRESS_ZERO = '0x0000000000000000000000000000000000000000';\nexport var DEFAULT_APPROVE_MAX = true;\nexport var DEFAULT_DEADLINE = 60 * 20;\nexport var DEFAULT_SLIPPAGE = 50;\nexport var GAS_LIMIT_WHEN_MOCKING = 500000; // https://uniswap.org/docs/v2/smart-contracts/router02/\n\nexport var ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'; // https://github.com/NoahZinsmeister/permit-and-call\n\nexport var PERMIT_AND_CALL_ADDRESS = '0xe334094985bB046B95550793EA577F8DC4e6112B';\nexport var ZERO = JSBI.BigInt(0);\nexport var MAX_UINT256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nexport var curatedContracts = [{\n  name: \"Rare Pepe\",\n  1: \"0x7E6027a6A84fC1F6Db6782c523EFe62c923e46ff\",\n  \"chain\": \"xcp\",\n  mintable: true,\n  collectionType: \"ERC1155\",\n  loadTypes: ['select'],\n  description: \"This Curated Emblem Vault contains 1 Rare Pepe NFT that was minted on Bitcoin using the Counterparty protocol. Rare Pepes is a collection of 1,774 unique cards with varying designs and rarities that were created by more than 300 artists from 2016 to 2018. \",\n  purchaseMethod: 'buyWithQuote',\n  showBalance: false,\n  price: 20000000,\n  attributes: [],\n  allowed: function allowed(data) {\n    return true;\n  },\n  allowedName: function allowedName(asset) {\n    var curatedItemFound = xcpJson[\"Rare Pepe\"].filter(function (item) {\n      return item.name == asset;\n    });\n    return asset && curatedItemFound.length > 0;\n  },\n  address: function address(addresses) {\n    return addresses.filter(function (item) {\n      return item.coin === \"BTC\";\n    })[0].address;\n  },\n  addresses: function addresses(_addresses) {\n    return _addresses.filter(function (item) {\n      return item.coin === \"BTC\";\n    });\n  }\n}, {\n  name: \"Emblem Test\",\n  1: \"0xdcFfa2b5cBf288932B009EBA01C8ca772ec6C993\",\n  5: \"0xa7428f3b7752F006890E12F055b0A816F0F18CdD\",\n  \"chain\": \"xcp\",\n  mintable: true,\n  collectionType: \"ERC1155\",\n  loadTypes: ['select'],\n  description: \"Created by Pepe artists Oliver Morris and Zoe Davies, the Emblem Test series of four cards—COMMON, RARE, LEGEND, and EPIC—were made to test Emblem Vault's new curated collection (ERC-1155) contracts. The cards were free and airdropped to Emblem Vault followers in December 2022\",\n  purchaseMethod: 'buyWithQuote',\n  showBalance: false,\n  price: 20000000,\n  attributes: []\n}, {\n  name: \"Spells of Genesis\",\n  1: \"0xDCA91409018ea80B71d21E818f00e76072969861\",\n  chain: \"xcp\",\n  mintable: false,\n  collectionType: \"ERC1155\",\n  loadTypes: ['select'],\n  description: \"\",\n  purchaseMethod: 'buyWithQuote',\n  showBalance: false\n}, {\n  name: \"Cursed Ordinal\",\n  1: \"0x769Fdf030A9e176EC8B6D66EFdCB63e8fA69885c\",\n  chain: \"cursedordinalsbtc\",\n  mintable: true,\n  collectionType: \"ERC721\",\n  loadTypes: ['input', 'empty'],\n  description: \"Cursed Ordinals are a collection of unindexed or \\\"bugged\\\" Ordinals not included initially in the Ord Client. \\n\\nWARNING: The inscription number of this Cursed Ordinal may change. Emblem Vault's dynamic vaults will update the metadata of this vault whenever a new Ord Client upgrade is posted and implemented.\",\n  purchaseMethod: 'buyWithQuote',\n  showBalance: true,\n  balanceUrl: \"https://serverless-cursed-ordinals.vercel.app/cursedordinalsbtc/balance/\",\n  price: 20000000,\n  attributes: [{\n    \"trait_type\": \"Content Type\",\n    \"value\": function value(metadata) {\n      return metadata.values[0].content_type;\n    }\n  }, {\n    \"trait_type\": \"Ordinal Number\",\n    \"value\": function value(metadata) {\n      return metadata.values[0].name.includes(\"Cursed Ordinal\") ? metadata.values[0].name.replace('Cursed Ordinal', '').trim() : false;\n    }\n  }, {\n    \"trait_type\": \"Collection\",\n    \"value\": function value(metadata) {\n      return metadata.values[0].name.includes(\"Cursed Ordinal\") ? false : \"All:\".concat(metadata.values[0].project);\n    }\n  }, {\n    \"trait_type\": \"Artist\",\n    \"value\": function value(metadata) {\n      var foundArtistTrait = metadata.values.length > 0 && metadata.values[0].traits ? metadata.values[0].traits.filter(function (item) {\n        return item.trait_type === \"artist\";\n      }) : [];\n      return foundArtistTrait.length > 0 ? foundArtistTrait[0].value : false;\n    }\n  }],\n  image: function image(data) {\n    return \"https://image-scaler.vercel.app/image?url=https://cursedordinals.com/content/\".concat(data.inscription_id, \"?size=400\");\n  },\n  loading: function loading() {\n    var images = [\"https://emblem.finance/ord-loading1.png\", \"https://emblem.finance/ord-loading2.png\"];\n    return images[Math.floor(Math.random() * images.length)]; // Random image\n  },\n  placeholder: function placeholder() {\n    var images = [\"https://emblem.finance/ord-error1.png\", \"https://emblem.finance/ord-error2.png\", \"https://emblem.finance/ord-error3.png\", \"https://emblem.finance/ord-error4.png\", \"https://emblem.finance/ord-error5.png\", \"https://emblem.finance/ord-error6.png\"];\n    return images[Math.floor(Math.random() * images.length)]; // Random image\n  },\n  allowed: function allowed(data) {\n    return data ? data.content_type != \"application/json\" : false;\n  },\n  allowedName: function allowedName(asset) {\n    var pieces = asset.split(' ');\n    return asset.includes(\"Cursed Ordinal\") && pieces.length === 3 && Number(pieces.reverse()[0]) < 0;\n  },\n  address: function address(addresses) {\n    return addresses.filter(function (item) {\n      return item.coin === \"TAP\";\n    })[0].address;\n  },\n  addresses: function addresses(_addresses2) {\n    return _addresses2.filter(function (item) {\n      return item.coin === \"TAP\";\n    });\n  }\n}, {\n  1: \"0x8C3c0274c33f263F0A55d129cFC8eaa3667A9E8b\",\n  name: \"Ethscription\",\n  chain: \"ethscription\",\n  mintable: true,\n  collectionType: \"ERC721\",\n  loadTypes: ['empty'],\n  description: \"Ethscriptions are on-chain digital artifacts stored on the Ethereum blockchain using transaction calldata. LFG!\",\n  purchaseMethod: 'buyWithQuote',\n  showBalance: true,\n  balanceUrl: \"https://serverless-ethscriptions.vercel.app/ethscription/balance/\",\n  price: 20000000,\n  attributes: [{\n    \"trait_type\": \"Collection\",\n    \"value\": function value(metadata) {\n      return metadata.values[0].project ? \"\".concat(metadata.values[0].project) : false;\n    }\n  }, {\n    \"trait_type\": \"Ethscriptions\",\n    \"value\": function value(metadata) {\n      var foundTrait = metadata.values && metadata.values.length > 0 && metadata.values[0].traits && metadata.values[0].traits.length > 0 && metadata.values[0].traits.filter(function (item) {\n        return item.trait_type == \"Ethscriptions\";\n      }).length > 0 ? metadata.values[0].traits.filter(function (item) {\n        return item.trait_type == \"Ethscriptions\";\n      })[0].value : false;\n      return foundTrait;\n    }\n  }],\n  image: function image(data) {\n    return \"https://image-scaler.vercel.app/image2?url=https://eth-script-indexer-eca25c4cf43b.herokuapp.com/api/ethscriptions/\".concat(data.ethscription_number, \"/data\");\n  },\n  loading: function loading() {\n    var images = [\"https://emblem.finance/ethscriptions-loading-1.png\", \"https://emblem.finance/ethscriptions-loading-2.png\", \"https://emblem.finance/ethscriptions-loading-3.png\"];\n    return images[Math.floor(Math.random() * images.length)]; // Random image\n  },\n  placeholder: function placeholder() {\n    var images = [];\n    return images[Math.floor(Math.random() * images.length)]; // Random image\n  },\n  allowed: function allowed(data) {\n    return true;\n  },\n  allowedName: function allowedName(asset) {\n    var pieces = asset.split(' ');\n    return true;\n  },\n  address: function address(addresses) {\n    return addresses.filter(function (item) {\n      return item.coin === \"ETH\";\n    })[0].address;\n  },\n  addresses: function addresses(_addresses3) {\n    return _addresses3.filter(function (item) {\n      return item.coin === \"ETH\";\n    });\n  }\n}, {\n  1: \"0x363D0C12eDCAF2C5962110401f651491f58C760a\",\n  name: \"$OXBT\",\n  chain: \"oxbt\",\n  mintable: false,\n  collectionType: \"ERC721a\",\n  loadTypes: ['empty'],\n  description: \"$OXBT is a BRC-20 utility token used to enable artists, creators, & builders on Bitcoin.\",\n  purchaseMethod: 'buyWithQuote',\n  showBalance: true,\n  balanceUrl: \"https://serverless-brc20.vercel.app/brc20/balance/oxbt/\",\n  price: 20000000,\n  attributes: [],\n  image: function image(data) {\n    return \"https://emblem.pro/oxbt.png\";\n  },\n  loading: function loading() {\n    var images = [\"https://emblem.finance/oxbt-loading-1.png\"];\n    return images[Math.floor(Math.random() * images.length)]; // Random image\n  },\n  placeholder: function placeholder() {\n    var images = [];\n    return images[Math.floor(Math.random() * images.length)]; // Random image\n  },\n  allowed: function allowed(data) {\n    var msgCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (data.balance == 2000) {\n      msgCallback ? msgCallback(\"\") : null;\n      return true;\n    } else if (data.balance != 2000 && msgCallback) {\n      msgCallback ? msgCallback(\"Load vault with exactly 2000 $OXBT\") : null;\n    }\n\n    return false;\n  },\n  allowedName: function allowedName(asset) {\n    var msgCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (asset == \"$OXBT Transfer Inscription\") {\n      return true;\n    }\n\n    msgCallback ? msgCallback(\"Incorrect Asset In Vault\") : null;\n    return false;\n  },\n  address: function address(addresses) {\n    return addresses.filter(function (item) {\n      return item.coin === \"TAP\";\n    })[0].address;\n  },\n  addresses: function addresses(_addresses4) {\n    return _addresses4.filter(function (item) {\n      return item.coin === \"TAP\";\n    });\n  }\n}, {\n  1: \"0x49aCD1b04702a30fb2cE8522298c299527E31913\",\n  name: \"$ORDI\",\n  chain: \"ordi\",\n  mintable: false,\n  collectionType: \"ERC721a\",\n  loadTypes: ['empty'],\n  description: \"Ordi is the first brc-20, an experiment into fungibility on Bitcoin utilizing ordinal theory and inscriptions.\",\n  purchaseMethod: 'buyWithQuote',\n  showBalance: true,\n  balanceUrl: \"https://serverless-brc20.vercel.app/brc20/balance/ordi/\",\n  price: 20000000,\n  attributes: [],\n  image: function image(data) {\n    return \"https://emblem.pro/ordi.png\";\n  },\n  loading: function loading() {\n    var images = [\"https://emblem.finance/ordi-loading-1.png\"];\n    return images[Math.floor(Math.random() * images.length)]; // Random image\n  },\n  placeholder: function placeholder() {\n    var images = [];\n    return images[Math.floor(Math.random() * images.length)]; // Random image\n  },\n  allowed: function allowed(data) {\n    var msgCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (data.balance == 200) {\n      msgCallback ? msgCallback(\"\") : null;\n      return true;\n    } else if (data.balance != 200 && msgCallback) {\n      msgCallback ? msgCallback(\"Load vault with exactly 200 $ORDI\") : null;\n    }\n\n    return false;\n  },\n  allowedName: function allowedName(asset) {\n    var msgCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    if (asset == \"$ORDI Transfer Inscription\") {\n      return true;\n    }\n\n    msgCallback ? msgCallback(\"Incorrect Asset In Vault\") : null;\n    return false;\n  },\n  address: function address(addresses) {\n    return addresses.filter(function (item) {\n      return item.coin === \"TAP\";\n    })[0].address;\n  },\n  addresses: function addresses(_addresses5) {\n    return _addresses5.filter(function (item) {\n      return item.coin === \"TAP\";\n    });\n  }\n}];\nexport var curatedAssets = {\n  xcp: xcpJson\n};\nexport var contractAddresses = {\n  salesFactory: {\n    1: '0xfb51bcd2644c20d87e17106c27355732fd485e4e'\n  },\n  salesAbi: SalesABI,\n  vaultHandler: {\n    // 1: '0x1ec6b294902d42fee964d29fa962e5976e71e67d',\n    1: '0xD0C7304156AF0a4be17352D8ce214222Ec66E8ba',\n    4: '0x63B1EB00de17Faf64b33649A5b7592543B010127',\n    5: '0x0349E72c3BFc6232B12FD546a9f9CD1851dD5bDD',\n    80001: '0x5434ba8b4A37755Cb3867C9fde39342C0D382857',\n    137: '0x322ad0007ff961f253d3818c61d912c89752ec3e',\n    100: '0x6e02D718C08b9EBd971B4788fF30308cC997E2Ef',\n    56: '0x34761221dBC6bE70A4f88E2077765dB8F14A1007',\n    250: '0x27B08ADcA39a684961e2cD289f0bEA893eDF0772',\n    1337: '0xe70AbBc99D8eB32124BF022196c493DB4fBc50FD',\n    1313161554: '0x793F3cF97c57798732f3AA36416CaC742223aB20'\n  },\n  vaultHandlerAbi: HandlerABI,\n  emblemVault: {\n    1: '0x82c7a8f707110f5fbb16184a5933e9f78a34c6ab',\n    4: '0xe70AbBc99D8eB32124BF022196c493DB4fBc50FD',\n    80001: '0x8b8407c6184f1f0Fd1082e83d6A3b8349cAcEd12',\n    137: '0x8b8407c6184f1f0Fd1082e83d6A3b8349cAcEd12',\n    100: '0x9058d1A5Fdba852403D5b080abAF31D1379EF653',\n    56: '0x9523022eb4B465Db3e3037d83e4910E3cFF1bD49',\n    250: '0x5434ba8b4A37755Cb3867C9fde39342C0D382857',\n    1337: '0xe70AbBc99D8eB32124BF022196c493DB4fBc50FD',\n    1313161554: '0x14509fCc07892E80eD6BE4cf171407d206A92164'\n  },\n  emblemAbi: EmblemABI,\n  coval: {\n    1: '0x3d658390460295fb963f54dc0899cfb1c30776df',\n    4: '0x44c1a9d7D1F932B4c2811A70eDfFDD6Ae2EB60e6',\n    5: '0x44aA2ae6a29A1434942EB88cB2eD0Fd1De30de83',\n    80001: '0x5cCa9D75DF2dFC117855adD4DD45727dee5287EC',\n    137: '0x4597c8A59Ab28B36840B82B3A674994A279593D0',\n    100: '0x8b8407c6184f1f0Fd1082e83d6A3b8349cAcEd12',\n    56: '0xd15CeE1DEaFBad6C0B3Fd7489677Cc102B141464',\n    250: '0x8b8407c6184f1f0Fd1082e83d6A3b8349cAcEd12',\n    1337: '0xe70AbBc99D8eB32124BF022196c493DB4fBc50FD',\n    1313161554: '0x584039B84b1d36653DAb76DC1246D07b08218706'\n  },\n  covalAbi: CovalABI,\n  nftrade: {\n    137: '0x88f5Cc3624247477bE5f691648A7D1B2631965B9'\n  },\n  nftradeAbi: NftradeABI,\n  claimed: {\n    1: '0xb8D6eB76dABea5b238e999B3145775E54412B2D2',\n    137: '0x62C505E51800901f4B44Ff1f6eD5348c36D37E28',\n    1313161554: '0xE1213fcb2a085B6d26C52f9D8fEc54f0758Fd7b1',\n    5: '0x1342F91DC53B6D222614Ad1f981b5683d4653116'\n  },\n  claimedAbi: ClaimedABI,\n  vaultHandlerV8: {\n    1: \"0x23859b51117dbFBcdEf5b757028B18d7759a4460\",\n    4: \"0xF2eCdFa77C3c8Cabf913529D95081DCB2DE314ec\",\n    5: '0xc15235d210c1b1CdA8643a5eA37687E241B031b0',\n    1337: \"0xfc3A4BBfD522668342bCaDf273a94A46DCe25439\",\n    1313161554: '0xeDb2AC2BfD8d026E4d6C75a04548423936512135'\n  },\n  vaultHandlerV8Abi: VaultHandlerV8,\n  clonableFactoryAbi: ClonableFactory,\n  erc20Abi: ERC20,\n  erc721Abi: ERC721,\n  erc1155Abi: ERC1155,\n  mintVaultQuote: {\n    1: \"0xE5dec92911c78069d727a67C85936EDDbc9B02Cf\"\n  },\n  mintVaultQuoteAbi: mintVaultQuoteAbi\n};\nexport var BURN_ADDRESS = '0x5D152dd902CC9198B97E5b6Cf5fc23a8e4330180';\nexport var ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\nexport var EMBLEM_API = API_OVERLOAD ? API_OVERLOAD : 'https://api2.emblemvault.io'; //'http://localhost:3001' // \n\nexport var EMBLEM_V2_API = 'https://v2.emblemvault.io'; //'http://localhost:3001' //\n\nexport var SIG_API = 'https://tor-us-signer-coval.vercel.app'; //'http://localhost:3002' //\n\nexport var ORD_API = 'https://api-ord.emblemvault.io/bitcoin/';\nexport var QueryParameters;\n\n(function (QueryParameters) {\n  QueryParameters[\"INPUT\"] = \"input\";\n  QueryParameters[\"OUTPUT\"] = \"output\";\n  QueryParameters[\"CHAIN\"] = \"chain\";\n})(QueryParameters || (QueryParameters = {}));\n\nexport var ERC20_BYTES32 = [{\n  constant: true,\n  inputs: [],\n  name: 'name',\n  outputs: [{\n    internalType: 'bytes32',\n    name: '',\n    type: 'bytes32'\n  }],\n  payable: false,\n  stateMutability: 'pure',\n  type: 'function'\n}, {\n  constant: true,\n  inputs: [],\n  name: 'symbol',\n  outputs: [{\n    internalType: 'bytes32',\n    name: '',\n    type: 'bytes32'\n  }],\n  payable: false,\n  stateMutability: 'pure',\n  type: 'function'\n}];","map":null,"metadata":{},"sourceType":"module"}