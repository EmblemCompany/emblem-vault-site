{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { FormControl, FormLabel, FormHelperText, Input, Stack, Box, Flex, Textarea, Button } from '@chakra-ui/core';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport Loader from 'react-loader';\nimport { usePapaParse } from 'react-papaparse';\nexport default function Batch() {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: batchName,\n    1: setBatchName\n  } = useState(\"\");\n  const {\n    0: imageBaseUrl,\n    1: setImageBaseUrl\n  } = useState(\"\");\n  const {\n    0: inscriptionBaseUrl,\n    1: setInscriptionBaseUrl\n  } = useState(\"\");\n  const {\n    0: addressType,\n    1: setAddressType\n  } = useState(\"\");\n  const {\n    0: titleTemplate,\n    1: setTitleTemplate\n  } = useState(\"\");\n  const {\n    0: descriptionTemplate,\n    1: setDescriptionTemplate\n  } = useState(\"\");\n  const {\n    0: total,\n    1: setTotal\n  } = useState(\"\");\n  const {\n    0: batchData,\n    1: setBatchData\n  } = useState(\"\");\n  const {\n    0: batchDataJson,\n    1: setBatchDataJson\n  } = useState(false);\n  const {\n    0: batchId,\n    1: setBatchId\n  } = useState(query.batch_id || \"\");\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    readString,\n    jsonToCSV\n  } = usePapaParse();\n  useEffect(() => {\n    if (batchId && !batchName) {\n      getBatch();\n    }\n  }, []);\n\n  const getBatch = async () => {\n    var requestOptions = {\n      method: 'GET',\n      redirect: 'follow'\n    };\n    fetch(EMBLEM_API + `/batch?batchId=${batchId}`, requestOptions).then(async response => {\n      let record = await response.json();\n      setState({\n        loaded: true\n      });\n      setBatchName(record.batch_name);\n      setImageBaseUrl(record.image_base_url);\n      setInscriptionBaseUrl(record.inscription_base_url);\n      setAddressType(record.address_type);\n      setTitleTemplate(record.title_template);\n      setDescriptionTemplate(record.description_template);\n      setBatchData(record.data);\n      setTotal(record.total);\n      readString(record.data, {\n        worker: true,\n        complete: results => {\n          console.log('---------------------------');\n          console.log(results);\n          console.log('---------------------------');\n          setBatchDataJson(results);\n        }\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  function csvToJson(data) {\n    return new Promise((resolve, reject) => {\n      readString(data, {\n        worker: true,\n        complete: results => {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    let jsonData = await csvToJson(batchData);\n    const serializedForm = {\n      batchName,\n      imageBaseUrl,\n      inscriptionBaseUrl,\n      addressType,\n      titleTemplate,\n      descriptionTemplate,\n      total,\n      batchId\n    };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm)\n    }).then(async response => {\n      let data = await response.json();\n\n      if (data.id) {\n        setBatchId(data.id);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"batch-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \"Batch Name\"), __jsx(Input, {\n    type: \"text\",\n    id: \"batch-name\",\n    \"aria-describedby\": \"batch-name-text\",\n    value: batchName,\n    onChange: e => setBatchName(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"batch-name-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, \"Give it a unique name for this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"image-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, \"Image Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"image-base-url\",\n    \"aria-describedby\": \"image-base-url-text\",\n    value: imageBaseUrl,\n    onChange: e => setImageBaseUrl(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"image-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, \"Enter the base url for the images in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"inscription-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, \"Inscription Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"inscription-base-url\",\n    \"aria-describedby\": \"inscription-base-url-text\",\n    value: inscriptionBaseUrl,\n    onChange: e => setInscriptionBaseUrl(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"inscription-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, \"Enter the base url for the inscriptions in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"address-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, \"Address Type\"), __jsx(Input, {\n    type: \"text\",\n    id: \"address-type\",\n    \"aria-describedby\": \"address-type-text\",\n    value: addressType,\n    onChange: e => setAddressType(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"address-type-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  }, \"Enter the address type for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"title-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, \"Title Template\"), __jsx(Textarea, {\n    id: \"title-template\",\n    size: \"lg\",\n    \"aria-describedby\": \"title-template-text\",\n    minLength: 3,\n    maxLength: 4024,\n    value: titleTemplate,\n    onChange: e => setTitleTemplate(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"title-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, \"Enter the title template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 11\n    }\n  }, \"Description Template\"), __jsx(Textarea, {\n    id: \"description-template\",\n    size: \"lg\",\n    \"aria-describedby\": \"description-template-text\",\n    minLength: 3,\n    maxLength: 1024,\n    value: descriptionTemplate,\n    onChange: e => setDescriptionTemplate(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"description-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, \"Enter the description template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 11\n    }\n  }, \"Total\"), __jsx(Input, {\n    type: \"number\",\n    id: \"total\",\n    \"aria-describedby\": \"total-text\",\n    value: total,\n    onChange: e => setTotal(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"total-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 11\n    }\n  }, \"Enter the total number of items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }\n  }, \"Records\"), __jsx(Textarea, {\n    id: \"records\",\n    size: \"lg\",\n    \"aria-describedby\": \"records-text\",\n    minLength: 3,\n    value: batchData,\n    onChange: e => setBatchData(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 11\n    }\n  }), __jsx(FormHelperText, {\n    id: \"records-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  }, \"Enter the CSV rows from the helper spreadsheet\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, \"Submit\"))))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx"],"names":["FormControl","FormLabel","FormHelperText","Input","Stack","Box","Flex","Textarea","Button","useRouter","useEffect","useState","EMBLEM_API","Loader","usePapaParse","Batch","query","batchName","setBatchName","imageBaseUrl","setImageBaseUrl","inscriptionBaseUrl","setInscriptionBaseUrl","addressType","setAddressType","titleTemplate","setTitleTemplate","descriptionTemplate","setDescriptionTemplate","total","setTotal","batchData","setBatchData","batchDataJson","setBatchDataJson","batchId","setBatchId","batch_id","state","setState","loaded","readString","jsonToCSV","getBatch","requestOptions","method","redirect","fetch","then","response","record","json","batch_name","image_base_url","inscription_base_url","address_type","title_template","description_template","data","worker","complete","results","console","log","catch","err","csvToJson","Promise","resolve","reject","handleSubmit","event","preventDefault","myHeaders","Headers","append","jsonData","serializedForm","headers","body","JSON","stringify","id","e","target","value"],"mappings":"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","sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Stack,\n  Box,\n  Flex,\n  Textarea,\n  Button\n} from '@chakra-ui/core'\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport Loader from 'react-loader'\nimport { usePapaParse } from 'react-papaparse';\n\nexport default function Batch() {\n  const { query } = useRouter()\n  const [batchName, setBatchName] = useState(\"\");\n  const [imageBaseUrl, setImageBaseUrl] = useState(\"\");\n  const [inscriptionBaseUrl, setInscriptionBaseUrl] = useState(\"\");\n  const [addressType, setAddressType] = useState(\"\");\n  const [titleTemplate, setTitleTemplate] = useState(\"\");\n  const [descriptionTemplate, setDescriptionTemplate] = useState(\"\");\n  const [total, setTotal] = useState(\"\");\n  const [batchData, setBatchData] = useState(\"\");\n  const [batchDataJson, setBatchDataJson] = useState(false);\n  const [batchId, setBatchId] = useState(query.batch_id || \"\")\n  const [state, setState] = useState({ loaded: false })\n  const { readString, jsonToCSV } = usePapaParse();\n\n\n  useEffect(() => {\n    if (batchId && !batchName) {\n      getBatch()\n    }    \n  }, [])\n\n  const getBatch = async ()=>{\n    var requestOptions: any = {\n      method: 'GET',\n      redirect: 'follow'\n    };\n    \n    fetch(EMBLEM_API + `/batch?batchId=${batchId}`, requestOptions).then(async(response)=> {\n      let record = await response.json()\n      setState({loaded: true})\n      setBatchName(record.batch_name)\n      setImageBaseUrl(record.image_base_url)\n      setInscriptionBaseUrl(record.inscription_base_url)\n      setAddressType(record.address_type)\n      setTitleTemplate(record.title_template)\n      setDescriptionTemplate(record.description_template)\n      setBatchData(record.data)\n      setTotal(record.total)\n      readString(record.data, {\n        worker: true,\n        complete: (results: any) => {\n          console.log('---------------------------');\n          console.log(results);\n          console.log('---------------------------');\n          setBatchDataJson(results)\n        }\n      })\n    }).catch(err=>{\n      console.log(err)\n    })\n  }\n\n  function csvToJson(data) {\n    return new Promise((resolve, reject) => {\n        readString(data, {\n            worker: true,\n            complete: (results: any) => {\n                resolve(results);\n            }\n        });\n    });\n}\n  \n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    let jsonData = await csvToJson(batchData)\n    const serializedForm = {\n        batchName,\n        imageBaseUrl,\n        inscriptionBaseUrl,\n        addressType,\n        titleTemplate,\n        descriptionTemplate,\n        total, \n        batchId, \n        \n      };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm),\n    }).then(async(response)=> {\n        let data = await response.json()\n        if (data.id) {\n          setBatchId(data.id)\n        }\n      }).catch(err=>{\n        console.log(err)\n      })\n  };\n\n  return (\n    <Loader loaded={state.loaded}>\n    <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n    <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">    \n        <form onSubmit={handleSubmit}>\n      <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"batch-name\">Batch Name</FormLabel>\n          <Input\n            type=\"text\"\n            id=\"batch-name\"\n            aria-describedby=\"batch-name-text\"\n            value={batchName}\n            onChange={(e) => setBatchName(e.target.value)}\n            autoComplete=\"off\"\n          />\n          <FormHelperText id=\"batch-name-text\">Give it a unique name for this batch.</FormHelperText>\n        </FormControl>\n        \n        <FormControl isRequired>\n          <FormLabel htmlFor=\"image-base-url\">Image Base Url</FormLabel>\n          <Input\n            type=\"text\"\n            id=\"image-base-url\"\n            aria-describedby=\"image-base-url-text\"\n            value={imageBaseUrl}\n            onChange={(e) => setImageBaseUrl(e.target.value)}\n            autoComplete=\"off\"\n          />\n          <FormHelperText id=\"image-base-url-text\">\n            Enter the base url for the images in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"inscription-base-url\">Inscription Base Url</FormLabel>\n          <Input\n            type=\"text\"\n            id=\"inscription-base-url\"\n            aria-describedby=\"inscription-base-url-text\"\n            value={inscriptionBaseUrl}\n            onChange={(e) => setInscriptionBaseUrl(e.target.value)}\n            autoComplete=\"off\"\n          />\n          <FormHelperText id=\"inscription-base-url-text\">\n            Enter the base url for the inscriptions in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"address-type\">Address Type</FormLabel>\n          <Input\n            type=\"text\"\n            id=\"address-type\"\n            aria-describedby=\"address-type-text\"\n            value={addressType}\n            onChange={(e) => setAddressType(e.target.value)}\n            autoComplete=\"off\"\n          />\n          <FormHelperText id=\"address-type-text\">\n            Enter the address type for the items in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"title-template\">Title Template</FormLabel>\n          <Textarea\n              id=\"title-template\"\n              size=\"lg\"\n              aria-describedby=\"title-template-text\"\n              minLength={3}\n              maxLength={4024}\n              value={titleTemplate}\n              onChange={(e) => setTitleTemplate(e.target.value)}\n              autoComplete=\"off\"\n          />\n          <FormHelperText id=\"title-template-text\">\n            Enter the title template for the items in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"description-template\">Description Template</FormLabel>\n          <Textarea\n              id=\"description-template\"\n              size=\"lg\"\n              aria-describedby=\"description-template-text\"\n              minLength={3}\n              maxLength={1024}\n              value={descriptionTemplate}\n              onChange={(e) => setDescriptionTemplate(e.target.value)}\n              autoComplete=\"off\"\n          />\n          <FormHelperText id=\"description-template-text\">\n            Enter the description template for the items in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"total\">Total</FormLabel>\n          <Input\n            type=\"number\"\n            id=\"total\"\n            aria-describedby=\"total-text\"\n            value={total}\n            onChange={(e) => setTotal(e.target.value)}\n            autoComplete=\"off\"\n          />\n          <FormHelperText id=\"total-text\">\n            Enter the total number of items in this batch.\n          </FormHelperText>\n        </FormControl>\n\n        <FormControl isRequired>\n          <FormLabel htmlFor=\"description-template\">Records</FormLabel>\n          <Textarea\n              id=\"records\"\n              size=\"lg\"\n              aria-describedby=\"records-text\"\n              minLength={3}\n              value={batchData}\n              onChange={(e) => setBatchData(e.target.value)}\n              autoComplete=\"off\"\n          />\n          <FormHelperText id=\"records-text\">\n            Enter the CSV rows from the helper spreadsheet\n          </FormHelperText>\n        </FormControl>\n      </Stack>\n      <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n        <Button mt={4} type=\"submit\">\n          Submit\n        </Button>\n      </Stack>\n        </form>\n      </Box>\n   </Flex>\n   </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}