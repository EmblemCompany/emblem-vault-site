{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text, Button } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nexport default function Admin() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: true\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: stats,\n    1: setStats\n  } = useState([]);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address || null);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(0);\n  const {\n    0: limit,\n    1: setLimit\n  } = useState(10);\n  const {\n    0: shouldFetchData,\n    1: setShouldFetchData\n  } = useState(address ? true : false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: buttonDisabled,\n    1: setButtonDisabled\n  } = useState(false);\n  const {\n    0: factories,\n    1: setFactories\n  } = useState([]);\n  const handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  useEffect(() => {\n    if (state.loaded == false && !loadingApi && address) {\n      setLoadingApi(false); // getPnL()\n    }\n  }, []);\n  useEffect(() => {\n    if (shouldFetchData && address) {\n      console.log(\"Should load api after setting consts\", offset);\n      setShouldFetchData(false); // getPnL()\n    } else {\n      console.log(\"wtf\");\n    }\n  }, [shouldFetchData, offset]);\n\n  const fetchDataForLazyLoad = async () => {\n    console.log('setting new offset to', offset + limit);\n    setOffset(offset + limit);\n    setShouldFetchData(true);\n  };\n\n  const GetContracts = async () => {\n    let factories = await handlerContract.getAllRegisteredContractsOfType(8);\n    console.log(\"factories\", JSON.stringify(factories));\n    setFactories(factories);\n    setLoadingApi(false); // ;(handlerContract as Contract)\n    //   .buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature)\n    //   .then(({ hash }: { hash: string }) => {\n    //   })\n    //   .catch((error: ErrorWithCode) => {\n    //       console.log(\"AAAAAHHHHHH\", error.code)\n    //       setLoadingApi(false)\n    //       // setMinting(false)\n    //   })\n  };\n\n  const mockData = {\n    \"handler\": \"0x5B8189BCC7565C03C98994b5D7BfbeB1a4296FfE\"\n  };\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    onClick: GetContracts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Click\"), factories.length > 0 ? factories.map(factory => {\n    return __jsx(React.Fragment, null, __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, \"factory: \", factory), __jsx(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }));\n  }) : null));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx"],"names":["Flex","Text","Button","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","contractAddresses","useContract","Admin","query","account","chainId","state","setState","loaded","loadingApi","setLoadingApi","stats","setStats","address","setAddress","offset","setOffset","limit","setLimit","shouldFetchData","setShouldFetchData","hasMore","setHasMore","buttonDisabled","setButtonDisabled","factories","setFactories","handlerContract","vaultHandlerV8","vaultHandlerV8Abi","console","log","fetchDataForLazyLoad","GetContracts","getAllRegisteredContractsOfType","JSON","stringify","mockData","length","map","factory"],"mappings":";;;AAAA,SAAcA,IAAd,EAAoBC,IAApB,EAA8CC,MAA9C,QAA8H,iBAA9H;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA,SAAiDC,iBAAjD,QAA0E,cAA1E;AACA,SAASC,WAAT,QAA4B,UAA5B;AAIA,eAAe,SAASC,KAAT,GAAiB;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAYP,SAAS,EAA3B;AACA,QAAM;AAAEQ,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBR,YAAY,EAAzC;AACA,QAAM;AAAA,OAACS,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAAC;AAAES,IAAAA,MAAM,EAAE;AAAV,GAAD,CAAlC;AACA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BX,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAACY,KAAD;AAAA,OAAQC;AAAR,MAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACc,OAAD;AAAA,OAAUC;AAAV,MAAwBf,QAAQ,CAACI,KAAK,CAACU,OAAN,IAAiB,IAAlB,CAAtC;AACA,QAAM;AAAA,OAACE,MAAD;AAAA,OAASC;AAAT,MAAsBjB,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM;AAAA,OAACkB,KAAD;AAAA,OAAQC;AAAR,MAAoBnB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACoB,eAAD;AAAA,OAAkBC;AAAlB,MAAwCrB,QAAQ,CAACc,OAAO,GAAE,IAAF,GAAQ,KAAhB,CAAtD;AACA,QAAM;AAAA,OAACQ,OAAD;AAAA,OAAUC;AAAV,MAAwBvB,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACwB,cAAD;AAAA,OAAiBC;AAAjB,MAAsCzB,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAM;AAAA,OAAC0B,SAAD;AAAA,OAAYC;AAAZ,MAA4B3B,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAM4B,eAAe,GAAG1B,WAAW,CAACD,iBAAiB,CAAC4B,cAAlB,CAAiCvB,OAAjC,CAAD,EAA4CL,iBAAiB,CAAC6B,iBAA9D,EAAiF,IAAjF,CAAnC;AAMA/B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,KAAK,CAACE,MAAN,IAAgB,KAAhB,IAAyB,CAACC,UAA1B,IAAwCI,OAA5C,EAAqD;AACnDH,MAAAA,aAAa,CAAC,KAAD,CAAb,CADmD,CAEnD;AACD;AACF,GALQ,EAKN,EALM,CAAT;AAOAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,eAAe,IAAIN,OAAvB,EAAgC;AAC9BiB,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAAoDhB,MAApD;AACAK,MAAAA,kBAAkB,CAAC,KAAD,CAAlB,CAF8B,CAG9B;AACD,KAJD,MAIO;AACLU,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD;AACF,GARQ,EAQN,CAACZ,eAAD,EAAkBJ,MAAlB,CARM,CAAT;;AAUA,QAAMiB,oBAAoB,GAAG,YAAW;AACtCF,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqChB,MAAM,GAACE,KAA5C;AACAD,IAAAA,SAAS,CAACD,MAAM,GAACE,KAAR,CAAT;AACAG,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,GAJD;;AAMA,QAAMa,YAAY,GAAG,YAAU;AAC7B,QAAIR,SAAS,GAAG,MAAME,eAAe,CAACO,+BAAhB,CAAgD,CAAhD,CAAtB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBI,IAAI,CAACC,SAAL,CAAeX,SAAf,CAAzB;AACAC,IAAAA,YAAY,CAACD,SAAD,CAAZ;AACAf,IAAAA,aAAa,CAAC,KAAD,CAAb,CAJ6B,CAK7B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAED,GAhBD;;AAkBA,QAAM2B,QAAQ,GAAG;AACf,eAAW;AADI,GAAjB;AAIA,SACE,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAE/B,KAAK,CAACE,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,UAAU,GAAG,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAoB,EADjC,EAGE,MAAC,IAAD;AAAM,IAAA,CAAC,EAAC,MAAR;AAAe,IAAA,OAAO,EAAC,QAAvB;AAAgC,IAAA,EAAE,EAAE,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEwB,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAGGR,SAAS,CAACa,MAAV,GAAmB,CAAnB,GACCb,SAAS,CAACc,GAAV,CAAcC,OAAO,IAAE;AACrB,WACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBA,OAAhB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD,GAPD,CADD,GAUG,IAbN,CAHF,CADF;AAuBD","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport {HStack, VStack, Circle, Divider } from '@chakra-ui/react'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\n\nimport { Contract } from '@ethersproject/contracts'\n\nexport default function Admin() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  const [state, setState] = useState({ loaded: true })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [stats, setStats] = useState([])\n  const [address, setAddress] = useState(query.address || null)\n  const [offset, setOffset] = useState(0)\n  const [limit, setLimit] = useState(10)\n  const [shouldFetchData, setShouldFetchData] = useState(address? true: false)\n  const [hasMore, setHasMore] = useState(true)\n  const [buttonDisabled, setButtonDisabled] = useState(false)\n\n  const [factories, setFactories] = useState([])\n\n  const handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  useEffect(() => {\n    if (state.loaded == false && !loadingApi && address) {\n      setLoadingApi(false)\n      // getPnL()\n    }\n  }, [])\n\n  useEffect(() => {\n    if (shouldFetchData && address) {\n      console.log(\"Should load api after setting consts\", offset)\n      setShouldFetchData(false)\n      // getPnL()\n    } else {\n      console.log(\"wtf\")\n    }\n  }, [shouldFetchData, offset])\n\n  const fetchDataForLazyLoad = async () =>{    \n    console.log('setting new offset to', offset+limit)\n    setOffset(offset+limit)\n    setShouldFetchData(true)\n  }\n\n  const GetContracts = async ()=>{\n    let factories = await handlerContract.getAllRegisteredContractsOfType(8)\n    console.log(\"factories\", JSON.stringify(factories))\n    setFactories(factories)\n    setLoadingApi(false)\n    // ;(handlerContract as Contract)\n    //   .buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature)\n    //   .then(({ hash }: { hash: string }) => {\n        \n    //   })\n    //   .catch((error: ErrorWithCode) => {\n    //       console.log(\"AAAAAHHHHHH\", error.code)\n    //       setLoadingApi(false)\n    //       // setMinting(false)\n    //   })\n    \n  }\n\n  const mockData = {\n    \"handler\": \"0x5B8189BCC7565C03C98994b5D7BfbeB1a4296FfE\"\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Button onClick={GetContracts}>Click</Button>\n\n        {factories.length > 0? (\n          factories.map(factory=>{\n            return (\n              <>\n                <Text>factory: {factory}</Text>\n                <hr/>\n              </>\n            )\n          })\n          \n        ) : null}\n       \n      </Flex>\n     \n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}