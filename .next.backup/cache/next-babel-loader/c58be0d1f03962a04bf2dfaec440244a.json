{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nftrade.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Flex, Text, Link, Stack, Button, FormControl, Input, FormHelperText, Select } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { Embed } from './Embed';\nimport { useContract } from '../hooks';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { TransactionToast } from './TransactionToast';\nexport default function NFTrade() {\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    query\n  } = useRouter();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: myVaults,\n    1: setMyVaults\n  } = useState([]);\n  const {\n    0: myVaultsLoaded,\n    1: setMyVaultsLoaded\n  } = useState(false);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: q,\n    1: setQ\n  } = useState(query.q);\n  const {\n    0: temp_q,\n    1: setTempQ\n  } = useState(q || '');\n  const {\n    0: network,\n    1: setNetwork\n  } = useState(query.network || null);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    0: offeringTokenId,\n    1: setOfferingTokenId\n  } = useState(null);\n  const {\n    0: offeringTokenAllowed,\n    1: setOfferingTokenAllowed\n  } = useState(null);\n  const {\n    0: acceptingOfferingIndex,\n    1: setAcceptingOfferIndex\n  } = useState(null);\n  const {\n    0: acceptingTokenAllowed,\n    1: setAcceptingTokenAllowed\n  } = useState(null);\n  const {\n    0: acceptingTokenId,\n    1: setAcceptingTokenId\n  } = useState(null);\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  const nftradeContract = useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true);\n\n  const getVaults = async () => {\n    setLoadingApi(true);\n\n    try {\n      const response = await fetch(EMBLEM_API + '/search', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          q: q,\n          network: network == \"null\" ? null : network,\n          external: true\n        })\n      });\n      let jsonData = await response.json();\n      jsonData = jsonData.records;\n      setState({\n        loaded: true\n      });\n      jsonData.forEach(async (data, index) => {\n        // debugger\n        if (data && data.network === \"matic\") {\n          let owner = await checkOwner(data.tokenId);\n          let offerCount = await getOfferCount(data.tokenId);\n          let mine = owner === account;\n          let offers = await getOffers(offerCount, data.tokenId); // debugger\n\n          if (offers.length < offerCount) {\n            offerCount = offers.length;\n          }\n\n          jsonData[index].offers = offers;\n          jsonData[index].mine = mine;\n          jsonData[index].offerCount = offerCount;\n        }\n\n        if (!data) {\n          delete jsonData[index];\n        }\n\n        if (index + 1 === jsonData.length) {\n          // debugger\n          setVaults(jsonData);\n          setLoadingApi(false);\n        }\n      });\n    } catch (error) {}\n  };\n\n  const getMyVaults = async () => {\n    console.log(\"Getting My Vaults\");\n    setMyVaultsLoaded(true);\n\n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental ? '?experimental=true' : ''), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString()\n        }\n      });\n      const jsonData = await response.json();\n      setMyVaults(jsonData); // console.log(jsonData)\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    // console.log(q, state, loadingApi)\n    nftradeStuff();\n\n    if (q && !state.loaded && !loadingApi) {\n      console.log(\"Load Search\");\n      getVaults();\n    }\n  });\n\n  async function nftradeStuff() {\n    !myVaultsLoaded ? await getMyVaults() : null; // let _owner  = await nftradeContract.ownerOf(tokenId)\n  }\n\n  async function getOfferCount(tokenId) {\n    let offerCount = await nftradeContract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId);\n    return Number(offerCount);\n  }\n\n  async function getOffers(count, tokenId) {\n    let offers = [];\n\n    for (let i = 0; i < count; i++) {\n      let offer = await nftradeContract.getOffer(contractAddresses.emblemVault[chainId], tokenId, i); // debugger\n\n      if (offer.nft !== \"0x0000000000000000000000000000000000000000\") {\n        offers.push(offer);\n      }\n    }\n\n    console.log('offers', offers);\n    return offers;\n  }\n\n  async function checkOfferingAllowance(tokenId) {\n    let allowed = await emblemContract.getApproved(tokenId);\n    setOfferingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\");\n  }\n\n  async function checkAcceptingAllowance(tokenId) {\n    let allowed = await emblemContract.getApproved(tokenId);\n    setAcceptingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\");\n  }\n\n  async function checkOwner(tokenId) {\n    //debugger\n    console.log(\"checking owner for\", tokenId);\n    let owner = await emblemContract.ownerOf(tokenId).catch(() => {});\n    return owner;\n  }\n\n  const approveOffer = tokenId => {\n    // debugger\n    console.log(\"checking offer for\", tokenId);\n    emblemContract.approve(contractAddresses.nftrade[chainId], tokenId && typeof tokenId === \"string\" ? tokenId : offeringTokenId).then(({\n      hash\n    }) => {\n      setHash(hash);\n    }); // .catch((error: ErrorWithCode) => {\n    //   if (error?.code == 4001) {\n    //     setApproving(false)\n    //   }\n    // })\n  };\n\n  const makeOffer = tokenId => {\n    ;\n    nftradeContract.addOffer(contractAddresses.emblemVault[chainId], offeringTokenId, contractAddresses.emblemVault[chainId], tokenId).then(({\n      hash\n    }) => {\n      setHash(hash);\n    }); // .catch((error: ErrorWithCode) => {\n    //   if (error?.code == 4001) {\n    //     setApproving(false)\n    //   }\n    // })\n  };\n\n  const acceptOffer = () => {\n    ;\n    nftradeContract.acceptOffer(contractAddresses.emblemVault[chainId], acceptingTokenId, Number(acceptingOfferingIndex)).then(({\n      hash\n    }) => {\n      setHash(hash);\n    }); // .catch((error: ErrorWithCode) => {\n    //   if (error?.code == 4001) {\n    //     setApproving(false)\n    //   }\n    // })\n  };\n\n  const rejectOffer = () => {\n    ;\n    nftradeContract.rejectOffer(contractAddresses.emblemVault[chainId], acceptingTokenId, Number(acceptingOfferingIndex)).then(({\n      hash\n    }) => {\n      setHash(hash);\n    }); // .catch((error: ErrorWithCode) => {\n    //   if (error?.code == 4001) {\n    //     setApproving(false)\n    //   }\n    // })\n  };\n\n  return __jsx(Loader, {\n    loaded: state.loaded || !q,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    id: \"search-query\",\n    width: \"45%\",\n    \"aria-describedby\": \"search-query-helper-text\",\n    placeholder: \"0xdeadbeef\",\n    maxLength: 42,\n    value: temp_q,\n    onChange: e => setTempQ(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    m: 2,\n    onClick: () => {\n      setState({\n        loaded: false\n      });\n      setQ(temp_q);\n      let loc = location.href.split('?')[0] + \"?q=\" + temp_q + \"&network=\" + network;\n      window.history.pushState(temp_q, 'Title', loc);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }\n  }, \"Search\"), __jsx(Select, {\n    w: \"45%\",\n    placeholder: \"All Networks\",\n    value: network || '',\n    onChange: e => {\n      setNetwork(e.target.value);\n      console.log(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  }, __jsx(\"option\", {\n    value: \"matic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 15\n    }\n  }, \"Matic\"), __jsx(\"option\", {\n    value: \"mainnet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 15\n    }\n  }, \"Ethereum Mainnet\"), __jsx(\"option\", {\n    value: \"rinkeby\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 15\n    }\n  }, \"Ethereum Rinkeby\"))), __jsx(FormHelperText, {\n    id: \"search-query-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }\n  }, \"Search for Emblem Vaults by: Name, Description, Type, Contents\"))), __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }\n  }, vaults.length ? vaults.map((vault, index) => {\n    if (vault.name) {\n      let pieces = location.pathname.split('/');\n      pieces.pop();\n      let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId;\n      const flexSettings = {\n        flex: '1',\n        minW: '300px',\n        maxW: '300px',\n        borderWidth: '1px',\n        color: 'white',\n        mx: '6',\n        mb: '6',\n        rounded: 'lg',\n        overflow: 'hidden',\n        borderColor: vault.status == 'claimed' ? 'green !important' : '',\n        cursor: 'pointer'\n      };\n\n      const redirect = function () {\n        location.href = url;\n      };\n\n      return __jsx(Stack, {\n        key: \"stack_\" + index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 17\n        }\n      }, __jsx(Box, _extends({\n        key: index\n      }, flexSettings, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 19\n        }\n      }), __jsx(Text, {\n        fontWeight: \"semibold\",\n        textAlign: \"center\",\n        mt: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }\n      }, vault.name, !vault.private && vault.totalValue ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }\n      }, __jsx(Embed, {\n        url: vault.image,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 23\n        }\n      })), __jsx(Box, {\n        d: \"flex\",\n        alignItems: \"baseline\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 21\n        }\n      }, __jsx(Stack, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 23\n        }\n      }, __jsx(Box, {\n        onClick: redirect,\n        width: \"100%\",\n        color: \"gray.500\",\n        fontWeight: \"semibold\",\n        letterSpacing: \"wide\",\n        fontSize: \"sm\",\n        ml: \"2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 25\n        }\n      }, vault.private ? __jsx(React.Fragment, null, __jsx(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 29\n        }\n      }, \"Contents hidden. Click to view the vault and unlock values.\")) : vault.values.length ? vault.values.map((coin, index) => {\n        if (index < 4) return __jsx(Text, {\n          key: coin.name,\n          isTruncated: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 33\n          }\n        }, coin.name, \": \", coin.balance);else if (index == 4) return __jsx(Text, {\n          fontWeight: \"bold\",\n          mt: 2,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 33\n          }\n        }, \"... Click to see the rest ...\");\n      }) : __jsx(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 31\n        }\n      }, \"Nothing in here! \", __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 50\n        }\n      }), \"Click to fill 'er up!\"), __jsx(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 29\n        }\n      }, \"Offers: \", vault.offerCount)), __jsx(Box, _extends({\n        key: \"offer_\" + index\n      }, flexSettings, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 25\n        }\n      }), !vault.mine ? __jsx(Select, {\n        p: 2,\n        m: 2,\n        w: \"84%\",\n        placeholder: \"Offer NFT\",\n        onChange: e => {\n          let tokenId = e.target.value; // console.log(e.target.value)\n\n          setOfferingTokenId(tokenId);\n          checkOfferingAllowance(tokenId);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 25\n        }\n      }, myVaults.map((vault, index) => {\n        return __jsx(\"option\", {\n          key: index,\n          value: vault.tokenId,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 33\n          }\n        }, vault.name);\n      })) : __jsx(Select, {\n        p: 2,\n        m: 2,\n        w: \"84%\",\n        placeholder: \"Offers\",\n        onChange: e => {\n          let index = e.target.value;\n          console.log(e.target.value);\n          setAcceptingOfferIndex(index);\n          setAcceptingTokenId(vault.tokenId);\n          checkAcceptingAllowance(vault.tokenId);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 29\n        }\n      }, vault.offers.map((offer, index) => {\n        return __jsx(\"option\", {\n          key: index,\n          value: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 33\n          }\n        }, Number(offer.tokenId));\n      })), offeringTokenId && !vault.mine ? offeringTokenAllowed ? __jsx(Button, {\n        m: 2,\n        onClick: () => {\n          makeOffer(vault.tokenId);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 31\n        }\n      }, \"Make Offer\") : __jsx(Button, {\n        m: 2,\n        w: \"94%\",\n        onClick: approveOffer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 110\n        }\n      }, \"Approve\") : null, acceptingOfferingIndex && vault.mine ? acceptingTokenAllowed ? __jsx(Button, {\n        m: 2,\n        w: \"94%\",\n        onClick: () => {\n          acceptOffer();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 31\n        }\n      }, \"Accept Offer\") : __jsx(Button, {\n        m: 2,\n        onClick: () => {\n          approveOffer(vault.tokenId);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 109\n        }\n      }, \"Approve\") : null, acceptingOfferingIndex && vault.mine ? __jsx(Button, {\n        m: 2,\n        w: \"94%\",\n        onClick: () => {\n          rejectOffer();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 31\n        }\n      }, \"Reject Offer\") : null))), __jsx(Stack, {\n        align: \"center\",\n        mt: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 21\n        }\n      }, vault.status == 'claimed' ? __jsx(Text, {\n        color: \"green.500\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 52\n        }\n      }, \"CLAIMED\") : null)));\n    }\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 11\n    }\n  }, \"Search Resulted in 0 Vaults.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }\n  }, \"CREATE ONE HERE!\"))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      setHash(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }\n  }) : null);\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nftrade.tsx"],"names":["Box","Flex","Text","Link","Stack","Button","FormControl","Input","FormHelperText","Select","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","Embed","useContract","EMBLEM_API","contractAddresses","TransactionToast","NFTrade","account","chainId","library","query","vaults","setVaults","myVaults","setMyVaults","myVaultsLoaded","setMyVaultsLoaded","state","setState","loaded","loadingApi","setLoadingApi","hash","setHash","q","setQ","temp_q","setTempQ","network","setNetwork","address","setAddress","experimental","setExperimental","offeringTokenId","setOfferingTokenId","offeringTokenAllowed","setOfferingTokenAllowed","acceptingOfferingIndex","setAcceptingOfferIndex","acceptingTokenAllowed","setAcceptingTokenAllowed","acceptingTokenId","setAcceptingTokenId","emblemContract","emblemVault","emblemAbi","nftradeContract","nftrade","nftradeAbi","getVaults","response","fetch","method","headers","service","body","JSON","stringify","external","jsonData","json","records","forEach","data","index","owner","checkOwner","tokenId","offerCount","getOfferCount","mine","offers","getOffers","length","error","getMyVaults","console","log","toString","nftradeStuff","Number","count","i","offer","getOffer","nft","push","checkOfferingAllowance","allowed","getApproved","checkAcceptingAllowance","ownerOf","catch","approveOffer","approve","then","makeOffer","addOffer","acceptOffer","rejectOffer","e","target","value","loc","location","href","split","window","history","pushState","map","vault","name","pieces","pathname","pop","url","origin","join","flexSettings","flex","minW","maxW","borderWidth","color","mx","mb","rounded","overflow","borderColor","status","cursor","redirect","private","totalValue","image","values","coin","balance"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, FormControl, FormLabel, Input, FormHelperText, Select } from '@chakra-ui/core'\nimport Loader from 'react-loader'\n\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { Embed } from './Embed'\nimport { setTimeout } from 'timers'\nimport { useContract } from '../hooks'\nimport { Contract } from '@ethersproject/contracts'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { TransactionToast } from './TransactionToast'\n\n\nexport default function NFTrade() {\n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [vaults, setVaults] = useState([])\n  const [myVaults, setMyVaults] = useState([])\n  const [myVaultsLoaded, setMyVaultsLoaded] = useState(false)\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [hash, setHash] = useState(null)\n  const [q, setQ] = useState(query.q)\n  const [temp_q, setTempQ] = useState(q || '')\n  const [network, setNetwork] = useState(query.network || null)\n  const [address, setAddress] = useState(query.address)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [offeringTokenId, setOfferingTokenId] = useState(null)\n  const [offeringTokenAllowed, setOfferingTokenAllowed] = useState(null)\n  const [acceptingOfferingIndex, setAcceptingOfferIndex] = useState(null)\n  const [acceptingTokenAllowed, setAcceptingTokenAllowed] = useState(null)\n  const [acceptingTokenId, setAcceptingTokenId] = useState(null)\n  \n\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n  const nftradeContract = useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true)\n  \n  const getVaults = async () => {    \n    setLoadingApi(true)\n    try {      \n      const response = await fetch(EMBLEM_API + '/search', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({q: q, network: network == \"null\"? null : network, external: true })\n      })\n      let jsonData = await response.json()\n      jsonData = jsonData.records\n      setState({ loaded: true })\n      jsonData.forEach(async (data, index)=>{\n        // debugger\n        if (data && data.network === \"matic\") {\n          \n          let owner = await checkOwner(data.tokenId)\n          let offerCount = await getOfferCount(data.tokenId)\n          let mine = owner === account        \n          let offers = await getOffers(offerCount, data.tokenId)\n          // debugger\n          if (offers.length < offerCount) {\n            offerCount = offers.length\n          }\n          jsonData[index].offers = offers        \n          jsonData[index].mine = mine\n          jsonData[index].offerCount = offerCount\n        }\n        if (!data) {\n          delete jsonData[index]\n        }\n        \n        if (index +1 === jsonData.length) {\n          // debugger\n          setVaults(jsonData)\n          setLoadingApi(false)\n        }\n      })\n      \n    } catch (error) {}\n  }\n\n  const getMyVaults = async () => {\n    console.log(\"Getting My Vaults\")\n    setMyVaultsLoaded(true)\n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental? '?experimental=true' : ''), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString(),\n        },\n      })\n      const jsonData = await response.json()\n      setMyVaults(jsonData)\n      // console.log(jsonData)\n    } catch (error) {}\n  }\n\n\n\n  useEffect(() => {\n    // console.log(q, state, loadingApi)\n    nftradeStuff()\n    if (q && !state.loaded && !loadingApi) {\n      console.log(\"Load Search\")\n      getVaults()\n    }\n  })\n\n  async function nftradeStuff() {\n    !myVaultsLoaded ? await getMyVaults() : null\n    // let _owner  = await nftradeContract.ownerOf(tokenId)\n  }\n\n  async function getOfferCount(tokenId) {\n    let offerCount  = await nftradeContract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId)\n    return Number(offerCount)\n  }\n\n  async function getOffers(count, tokenId) {\n    let offers = []\n    for (let i = 0; i < count; i++) {\n      let offer  = await nftradeContract.getOffer(contractAddresses.emblemVault[chainId], tokenId, i)\n      // debugger\n      if (offer.nft !== \"0x0000000000000000000000000000000000000000\") {\n        offers.push(offer)\n      }\n    }\n    console.log('offers', offers)\n    return offers\n  }\n\n  async function checkOfferingAllowance(tokenId) {\n    let allowed  = await emblemContract.getApproved(tokenId)\n    setOfferingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\")\n  }\n\n  async function checkAcceptingAllowance(tokenId) {\n    let allowed  = await emblemContract.getApproved(tokenId)    \n    setAcceptingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\")\n  }\n\n  async function checkOwner(tokenId) {\n    //debugger\n    console.log(\"checking owner for\", tokenId)\n    let owner  = await emblemContract.ownerOf(tokenId).catch(()=>{})\n    return owner\n  }\n\n  const approveOffer = (tokenId) => {\n    // debugger\n    console.log(\"checking offer for\", tokenId)\n    ;(emblemContract as Contract)\n      .approve(contractAddresses.nftrade[chainId], (tokenId && typeof tokenId === \"string\" ? tokenId: offeringTokenId))\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n  }\n\n  const makeOffer = (tokenId) => {\n    ;(nftradeContract as Contract)\n      .addOffer(contractAddresses.emblemVault[chainId], offeringTokenId, contractAddresses.emblemVault[chainId], tokenId)\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n  }\n\n  const acceptOffer = () => {    \n    ;(nftradeContract as Contract)\n      .acceptOffer(contractAddresses.emblemVault[chainId], acceptingTokenId, Number(acceptingOfferingIndex))\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n  }\n\n  const rejectOffer = () => {    \n    ;(nftradeContract as Contract)\n      .rejectOffer(contractAddresses.emblemVault[chainId], acceptingTokenId, Number(acceptingOfferingIndex))\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n  }\n\n  return (\n    <Loader loaded={state.loaded || !q}>\n      {loadingApi ? <Refreshing /> : ''}\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\" >\n        <FormControl isRequired>\n          <Flex width=\"full\" align=\"center\" justifyContent=\"center\" flexWrap=\"wrap\">\n            <Input\n              type=\"text\"\n              id=\"search-query\"\n              width='45%'\n              aria-describedby=\"search-query-helper-text\"\n              placeholder=\"0xdeadbeef\"\n              maxLength={42}\n              value={temp_q}\n              onChange={(e) =>\n                setTempQ(e.target.value)\n              }\n            />\n            <Button\n              m={2}\n              onClick={() => {\n                setState({ loaded: false })\n                setQ(temp_q)\n                let loc = location.href.split('?')[0]+\"?q=\"+temp_q +  \"&network=\" + network\n                window.history.pushState(temp_q, 'Title', loc);\n              }}\n            >Search\n            </Button>\n            <Select w=\"45%\" placeholder=\"All Networks\" value={network || ''}\n              onChange={(e)=>{\n                setNetwork(e.target.value)\n                console.log(e.target.value)\n              }}\n            >\n              <option value=\"matic\">Matic</option>\n              <option value=\"mainnet\">Ethereum Mainnet</option>\n              <option value=\"rinkeby\">Ethereum Rinkeby</option>\n            </Select>\n          </Flex>\n          \n          <FormHelperText id=\"search-query-helper-text\">\n            Search for Emblem Vaults by: Name, Description, Type, Contents\n        </FormHelperText>\n        </FormControl>\n      </Flex>\n      <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\" mt={10}>\n        {vaults.length ? (\n          vaults.map((vault, index) => {\n            if (vault.name) {\n              let pieces = location.pathname.split('/')\n              pieces.pop()\n              let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId\n              const flexSettings = {\n                flex: '1',\n                minW: '300px',\n                maxW: '300px',\n                borderWidth: '1px',\n                color: 'white',\n                mx: '6',\n                mb: '6',\n                rounded: 'lg',\n                overflow: 'hidden',\n                borderColor: vault.status == 'claimed' ? 'green !important' : '',\n                cursor: 'pointer',\n              }\n              const redirect = function () {\n                location.href = url\n              }\n              return (\n                <Stack key={\"stack_\"+index}>\n                  <Box key={index} {...flexSettings}>\n                    <Text fontWeight=\"semibold\" textAlign=\"center\" mt={2}>\n                      {vault.name}\n                      {!vault.private && vault.totalValue? ': ~$' + vault.totalValue : null}\n                    </Text>\n                    <Stack align=\"center\">\n                      <Embed url={vault.image}/>\n                    </Stack>\n                    <Box d=\"flex\" alignItems=\"baseline\">\n                      <Stack>\n                        <Box onClick={redirect} width=\"100%\" color=\"gray.500\" fontWeight=\"semibold\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                        {vault.private ? (\n                          <>\n                            <Text>Contents hidden. Click to view the vault and unlock values.</Text>\n                          </>\n                        ) : vault.values.length ? (\n                          vault.values.map((coin, index) => {\n                            if (index < 4)\n                              return (\n                                <Text key={coin.name} isTruncated>\n                                  {coin.name}: {coin.balance}\n                                </Text>\n                              )\n                            else if (index == 4)\n                              return (\n                                <Text fontWeight=\"bold\" mt={2}>\n                                  ... Click to see the rest ...\n                                </Text>\n                              )\n                          })\n                        ) : (\n                              <Text>\n                                Nothing in here! <br />\n                            Click to fill 'er up!\n                              </Text>\n                            )}\n                            \n                            <Text>Offers: {vault.offerCount}</Text>\n                      </Box>\n                      \n                        <Box key={\"offer_\"+index} {...flexSettings} >\n                        {!vault.mine ? (\n                        <Select p={2} m={2} w=\"84%\" placeholder=\"Offer NFT\" \n                            onChange={(e)=>{\n                              let tokenId = e.target.value\n                              // console.log(e.target.value)\n                              setOfferingTokenId(tokenId)\n                              checkOfferingAllowance(tokenId)\n                            }}\n                          >\n                            {myVaults.map((vault, index) => {\n                              return (\n                                <option key={index} value={vault.tokenId}>{vault.name}</option>\n                              )\n                            })}\n                          </Select> ) : (\n                            <Select p={2} m={2} w=\"84%\" placeholder=\"Offers\" \n                            onChange={(e)=>{\n                              let index = e.target.value\n                              console.log(e.target.value)\n                              setAcceptingOfferIndex(index)\n                              setAcceptingTokenId(vault.tokenId)\n                              checkAcceptingAllowance(vault.tokenId)\n                            }}\n                          >\n                            {vault.offers.map((offer, index) => {\n                              return (\n                                <option key={index} value={index}>{Number(offer.tokenId)}</option>\n                              )\n                            })}\n                          </Select>\n                          )}\n                          {offeringTokenId && !vault.mine ? (\n                            offeringTokenAllowed ? (\n                              <Button m={2} onClick={()=>{makeOffer(vault.tokenId)}}>Make Offer</Button>) : (<Button m={2}  w=\"94%\" onClick={approveOffer}>Approve</Button>\n                            )\n                        ) : null }\n                        {acceptingOfferingIndex && vault.mine ? (\n                            acceptingTokenAllowed ? (\n                              <Button m={2} w=\"94%\" onClick={()=>{acceptOffer()}}>Accept Offer</Button>) : (<Button m={2} onClick={() => {approveOffer(vault.tokenId)}}>Approve</Button>\n                            )\n                        ) : null }\n                        {acceptingOfferingIndex && vault.mine ? (                    \n                              <Button m={2} w=\"94%\" onClick={()=>{rejectOffer()}}>Reject Offer</Button>) : null }\n                      </Box>\n                      </Stack>\n                    </Box>\n                    <Stack align=\"center\" mt={3}>\n                      {vault.status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                    </Stack>\n                        \n                  </Box>\n                  \n                </Stack>\n                \n              )}\n          })\n          ) : (\n          <Text>\n            Search Resulted in 0 Vaults.{' '}\n            <Link color=\"#638cd8\" href=\"../create\">\n              CREATE ONE HERE!\n            </Link>\n          </Text>\n        )}\n      </Flex>\n      {hash ? (\n      <TransactionToast\n          hash={hash}\n          onComplete={() => {\n            setHash(null)\n          }}\n        />\n      ): null }\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}