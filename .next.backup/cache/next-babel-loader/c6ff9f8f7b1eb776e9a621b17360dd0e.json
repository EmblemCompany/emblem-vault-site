{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Text } from '@chakra-ui/core';\nimport { useRouter } from 'next/router';\nimport { useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nexport default function Batch() {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: batchName,\n    1: setBatchName\n  } = useState(\"\");\n  const {\n    0: imageBaseUrl,\n    1: setImageBaseUrl\n  } = useState(\"\");\n  const {\n    0: inscriptionBaseUrl,\n    1: setInscriptionBaseUrl\n  } = useState(\"\");\n  const {\n    0: addressType,\n    1: setAddressType\n  } = useState(\"\");\n  const {\n    0: titleTemplate,\n    1: setTitleTemplate\n  } = useState(\"\");\n  const {\n    0: descriptionTemplate,\n    1: setDescriptionTemplate\n  } = useState(\"\");\n  const {\n    0: total,\n    1: setTotal\n  } = useState(\"\");\n  const {\n    0: batchId,\n    1: setBatchId\n  } = useState(query.batch_id || null);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: true,\n    private: false\n  });\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    const serializedForm = {\n      batchName,\n      imageBaseUrl,\n      inscriptionBaseUrl,\n      addressType,\n      titleTemplate,\n      descriptionTemplate,\n      total\n    };\n    let apiSuffix = '/addBatch';\n    fetch(EMBLEM_API + apiSuffix, {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm)\n    }).then(async response => {\n      let data = await response.json();\n\n      if (data.id) {\n        setBatchId(data.id);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  return (//   <Loader loaded={state.loaded}>\n    //   <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n    //   <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n    //       <form onSubmit={handleSubmit}>\n    //     <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n    //       <FormControl isRequired>\n    //         <FormLabel htmlFor=\"batch-name\">Batch Name</FormLabel>\n    //         <Input\n    //           type=\"text\"\n    //           id=\"batch-name\"\n    //           aria-describedby=\"batch-name-text\"\n    //           value={batchName}\n    //           onChange={(e) => setBatchName(e.target.value)}\n    //           autoComplete=\"off\"\n    //         />\n    //         <FormHelperText id=\"batch-name-text\">Give it a unique name for this batch.</FormHelperText>\n    //       </FormControl>\n    //       <FormControl isRequired>\n    //         <FormLabel htmlFor=\"image-base-url\">Image Base Url</FormLabel>\n    //         <Input\n    //           type=\"text\"\n    //           id=\"image-base-url\"\n    //           aria-describedby=\"image-base-url-text\"\n    //           value={imageBaseUrl}\n    //           onChange={(e) => setImageBaseUrl(e.target.value)}\n    //           autoComplete=\"off\"\n    //         />\n    //         <FormHelperText id=\"image-base-url-text\">\n    //           Enter the base url for the images in this batch.\n    //         </FormHelperText>\n    //       </FormControl>\n    //       <FormControl isRequired>\n    //         <FormLabel htmlFor=\"inscription-base-url\">Inscription Base Url</FormLabel>\n    //         <Input\n    //           type=\"text\"\n    //           id=\"inscription-base-url\"\n    //           aria-describedby=\"inscription-base-url-text\"\n    //           value={inscriptionBaseUrl}\n    //           onChange={(e) => setInscriptionBaseUrl(e.target.value)}\n    //           autoComplete=\"off\"\n    //         />\n    //         <FormHelperText id=\"inscription-base-url-text\">\n    //           Enter the base url for the inscriptions in this batch.\n    //         </FormHelperText>\n    //       </FormControl>\n    //       <FormControl isRequired>\n    //         <FormLabel htmlFor=\"address-type\">Address Type</FormLabel>\n    //         <Input\n    //           type=\"text\"\n    //           id=\"address-type\"\n    //           aria-describedby=\"address-type-text\"\n    //           value={addressType}\n    //           onChange={(e) => setAddressType(e.target.value)}\n    //           autoComplete=\"off\"\n    //         />\n    //         <FormHelperText id=\"address-type-text\">\n    //           Enter the address type for the items in this batch.\n    //         </FormHelperText>\n    //       </FormControl>\n    //       <FormControl isRequired>\n    //         <FormLabel htmlFor=\"title-template\">Title Template</FormLabel>\n    //         <Textarea\n    //             id=\"title-template\"\n    //             size=\"lg\"\n    //             aria-describedby=\"title-template-text\"\n    //             minLength={3}\n    //             maxLength={4024}\n    //             value={titleTemplate}\n    //             onChange={(e) => setTitleTemplate(e.target.value)}\n    //             autoComplete=\"off\"\n    //         />\n    //         <FormHelperText id=\"title-template-text\">\n    //           Enter the title template for the items in this batch.\n    //         </FormHelperText>\n    //       </FormControl>\n    //       <FormControl isRequired>\n    //         <FormLabel htmlFor=\"description-template\">Description Template</FormLabel>\n    //         <Textarea\n    //             id=\"description-template\"\n    //             size=\"lg\"\n    //             aria-describedby=\"description-template-text\"\n    //             minLength={3}\n    //             maxLength={1024}\n    //             value={descriptionTemplate}\n    //             onChange={(e) => setDescriptionTemplate(e.target.value)}\n    //             autoComplete=\"off\"\n    //         />\n    //         <FormHelperText id=\"description-template-text\">\n    //           Enter the description template for the items in this batch.\n    //         </FormHelperText>\n    //       </FormControl>\n    //       <FormControl isRequired>\n    //         <FormLabel htmlFor=\"total\">Total</FormLabel>\n    //         <Input\n    //           type=\"number\"\n    //           id=\"total\"\n    //           aria-describedby=\"total-text\"\n    //           value={total}\n    //           onChange={(e) => setTotal(e.target.value)}\n    //           autoComplete=\"off\"\n    //         />\n    //         <FormHelperText id=\"total-text\">\n    //           Enter the total number of items in this batch.\n    //         </FormHelperText>\n    //       </FormControl>\n    //     </Stack>\n    //     <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n    //       <Button mt={4} type=\"submit\">\n    //         Submit\n    //       </Button>\n    //     </Stack>\n    //       </form>\n    //     </Box>\n    //  </Flex>\n    //  </Loader>\n    __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 3\n      }\n    }, \"wtf\")\n  );\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx"],"names":["Text","useRouter","useState","EMBLEM_API","Batch","query","batchName","setBatchName","imageBaseUrl","setImageBaseUrl","inscriptionBaseUrl","setInscriptionBaseUrl","addressType","setAddressType","titleTemplate","setTitleTemplate","descriptionTemplate","setDescriptionTemplate","total","setTotal","batchId","setBatchId","batch_id","state","setState","loaded","private","handleSubmit","event","preventDefault","myHeaders","Headers","append","serializedForm","apiSuffix","fetch","method","headers","body","JSON","stringify","then","response","data","json","id","catch","err","console","log"],"mappings":";;;AAAA,SAQEA,IARF,QAWO,iBAXP;AAYA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAGA,eAAe,SAASC,KAAT,GAAiB;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAYJ,SAAS,EAA3B;AACA,QAAM;AAAA,OAACK,SAAD;AAAA,OAAYC;AAAZ,MAA4BL,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAA,OAACM,YAAD;AAAA,OAAeC;AAAf,MAAkCP,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM;AAAA,OAACQ,kBAAD;AAAA,OAAqBC;AAArB,MAA8CT,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM;AAAA,OAACU,WAAD;AAAA,OAAcC;AAAd,MAAgCX,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACY,aAAD;AAAA,OAAgBC;AAAhB,MAAoCb,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM;AAAA,OAACc,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDf,QAAQ,CAAC,EAAD,CAA9D;AACA,QAAM;AAAA,OAACgB,KAAD;AAAA,OAAQC;AAAR,MAAoBjB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACkB,OAAD;AAAA,OAAUC;AAAV,MAAwBnB,QAAQ,CAACG,KAAK,CAACiB,QAAN,IAAkB,IAAnB,CAAtC;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBtB,QAAQ,CAAC;AAAEuB,IAAAA,MAAM,EAAE,IAAV;AAAgBC,IAAAA,OAAO,EAAE;AAAzB,GAAD,CAAlC;;AAEA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIC,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AAEA,UAAMC,cAAc,GAAG;AACnB3B,MAAAA,SADmB;AAEnBE,MAAAA,YAFmB;AAGnBE,MAAAA,kBAHmB;AAInBE,MAAAA,WAJmB;AAKnBE,MAAAA,aALmB;AAMnBE,MAAAA,mBANmB;AAOnBE,MAAAA;AAPmB,KAAvB;AASA,QAAIgB,SAAS,GAAG,WAAhB;AACAC,IAAAA,KAAK,CAAChC,UAAU,GAAG+B,SAAd,EAAyB;AAC5BE,MAAAA,MAAM,EAAE,MADoB;AAE5BC,MAAAA,OAAO,EAAEP,SAFmB;AAG5BQ,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,cAAf;AAHsB,KAAzB,CAAL,CAIGQ,IAJH,CAIQ,MAAMC,QAAN,IAAkB;AACtB,UAAIC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAjB;;AACA,UAAID,IAAI,CAACE,EAAT,EAAa;AACXxB,QAAAA,UAAU,CAACsB,IAAI,CAACE,EAAN,CAAV;AACD;AACF,KATH,EASKC,KATL,CASWC,GAAG,IAAE;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAXH;AAYD,GA3BD;;AA6BA,SACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3HA;AA6HD","sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Stack,\n  Box,\n  Flex,\n  Text,\n  Textarea,\n  Button\n} from '@chakra-ui/core'\nimport { useRouter } from 'next/router';\nimport { useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport Loader from 'react-loader'\n\nexport default function Batch() {\n  const { query } = useRouter()\n  const [batchName, setBatchName] = useState(\"\");\n  const [imageBaseUrl, setImageBaseUrl] = useState(\"\");\n  const [inscriptionBaseUrl, setInscriptionBaseUrl] = useState(\"\");\n  const [addressType, setAddressType] = useState(\"\");\n  const [titleTemplate, setTitleTemplate] = useState(\"\");\n  const [descriptionTemplate, setDescriptionTemplate] = useState(\"\");\n  const [total, setTotal] = useState(\"\");\n  const [batchId, setBatchId] = useState(query.batch_id || null)\n  const [state, setState] = useState({ loaded: true, private: false })\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    \n    const serializedForm = {\n        batchName,\n        imageBaseUrl,\n        inscriptionBaseUrl,\n        addressType,\n        titleTemplate,\n        descriptionTemplate,\n        total\n      };\n    let apiSuffix = '/addBatch' \n    fetch(EMBLEM_API + apiSuffix, {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm),\n    }).then(async(response)=> {\n        let data = await response.json()\n        if (data.id) {\n          setBatchId(data.id)\n        }\n      }).catch(err=>{\n        console.log(err)\n      })\n  };\n\n  return (\n  //   <Loader loaded={state.loaded}>\n  //   <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n  //   <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n    \n  //       <form onSubmit={handleSubmit}>\n  //     <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n  //       <FormControl isRequired>\n  //         <FormLabel htmlFor=\"batch-name\">Batch Name</FormLabel>\n  //         <Input\n  //           type=\"text\"\n  //           id=\"batch-name\"\n  //           aria-describedby=\"batch-name-text\"\n  //           value={batchName}\n  //           onChange={(e) => setBatchName(e.target.value)}\n  //           autoComplete=\"off\"\n  //         />\n  //         <FormHelperText id=\"batch-name-text\">Give it a unique name for this batch.</FormHelperText>\n  //       </FormControl>\n        \n  //       <FormControl isRequired>\n  //         <FormLabel htmlFor=\"image-base-url\">Image Base Url</FormLabel>\n  //         <Input\n  //           type=\"text\"\n  //           id=\"image-base-url\"\n  //           aria-describedby=\"image-base-url-text\"\n  //           value={imageBaseUrl}\n  //           onChange={(e) => setImageBaseUrl(e.target.value)}\n  //           autoComplete=\"off\"\n  //         />\n  //         <FormHelperText id=\"image-base-url-text\">\n  //           Enter the base url for the images in this batch.\n  //         </FormHelperText>\n  //       </FormControl>\n\n  //       <FormControl isRequired>\n  //         <FormLabel htmlFor=\"inscription-base-url\">Inscription Base Url</FormLabel>\n  //         <Input\n  //           type=\"text\"\n  //           id=\"inscription-base-url\"\n  //           aria-describedby=\"inscription-base-url-text\"\n  //           value={inscriptionBaseUrl}\n  //           onChange={(e) => setInscriptionBaseUrl(e.target.value)}\n  //           autoComplete=\"off\"\n  //         />\n  //         <FormHelperText id=\"inscription-base-url-text\">\n  //           Enter the base url for the inscriptions in this batch.\n  //         </FormHelperText>\n  //       </FormControl>\n\n  //       <FormControl isRequired>\n  //         <FormLabel htmlFor=\"address-type\">Address Type</FormLabel>\n  //         <Input\n  //           type=\"text\"\n  //           id=\"address-type\"\n  //           aria-describedby=\"address-type-text\"\n  //           value={addressType}\n  //           onChange={(e) => setAddressType(e.target.value)}\n  //           autoComplete=\"off\"\n  //         />\n  //         <FormHelperText id=\"address-type-text\">\n  //           Enter the address type for the items in this batch.\n  //         </FormHelperText>\n  //       </FormControl>\n\n  //       <FormControl isRequired>\n  //         <FormLabel htmlFor=\"title-template\">Title Template</FormLabel>\n  //         <Textarea\n  //             id=\"title-template\"\n  //             size=\"lg\"\n  //             aria-describedby=\"title-template-text\"\n  //             minLength={3}\n  //             maxLength={4024}\n  //             value={titleTemplate}\n  //             onChange={(e) => setTitleTemplate(e.target.value)}\n  //             autoComplete=\"off\"\n  //         />\n  //         <FormHelperText id=\"title-template-text\">\n  //           Enter the title template for the items in this batch.\n  //         </FormHelperText>\n  //       </FormControl>\n\n  //       <FormControl isRequired>\n  //         <FormLabel htmlFor=\"description-template\">Description Template</FormLabel>\n  //         <Textarea\n  //             id=\"description-template\"\n  //             size=\"lg\"\n  //             aria-describedby=\"description-template-text\"\n  //             minLength={3}\n  //             maxLength={1024}\n  //             value={descriptionTemplate}\n  //             onChange={(e) => setDescriptionTemplate(e.target.value)}\n  //             autoComplete=\"off\"\n  //         />\n  //         <FormHelperText id=\"description-template-text\">\n  //           Enter the description template for the items in this batch.\n  //         </FormHelperText>\n  //       </FormControl>\n\n  //       <FormControl isRequired>\n  //         <FormLabel htmlFor=\"total\">Total</FormLabel>\n  //         <Input\n  //           type=\"number\"\n  //           id=\"total\"\n  //           aria-describedby=\"total-text\"\n  //           value={total}\n  //           onChange={(e) => setTotal(e.target.value)}\n  //           autoComplete=\"off\"\n  //         />\n  //         <FormHelperText id=\"total-text\">\n  //           Enter the total number of items in this batch.\n  //         </FormHelperText>\n  //       </FormControl>\n  //     </Stack>\n  //     <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n  //       <Button mt={4} type=\"submit\">\n  //         Submit\n  //       </Button>\n  //     </Stack>\n  //       </form>\n  //     </Box>\n  //  </Flex>\n  //  </Loader>\n  <Text>wtf</Text>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}