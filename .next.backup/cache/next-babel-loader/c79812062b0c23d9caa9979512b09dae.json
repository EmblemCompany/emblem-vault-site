{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { openEditor } from 'doka';\nimport { sub, unsub } from './events';\n\nclass DokaImageEditorModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.editor = undefined; // We'll wrap the module in a container so we can use the container as a CSS module target\n\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount() {\n    // add the container\n    document.body.appendChild(this.el);\n    this.el.className = this.props.className; // create editor and proxy events\n\n    const props = _objectSpread({}, this.props);\n\n    this.editor = openEditor(props, this.el);\n    sub(this, props);\n  }\n\n  componentDidUpdate() {\n    const props = _objectSpread({}, this.props);\n\n    Object.assign(this.editor, props);\n    sub(this, props);\n  }\n\n  componentWillUnmount() {\n    // remove our modal container\n    document.body.removeChild(this.el);\n    if (!this.editor) return;\n    unsub(this);\n    this.editor = undefined;\n  }\n\n  show() {\n    this.editor.show();\n  }\n\n  hide() {\n    this.editor.hide();\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nexport default DokaImageEditorModal;","map":null,"metadata":{},"sourceType":"module"}