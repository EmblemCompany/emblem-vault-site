{"ast":null,"code":"const _addTokenToWallet = function hook(token) {\n  console.log(token);\n  web3.currentProvider.sendAsync({\n    method: 'wallet_watchAsset',\n    params: {\n      \"type\": \"ERC20\",\n      // Initially only supports ERC20, but eventually more!\n      \"options\": {\n        \"address\": token.address,\n        // The address that the token is at.\n        \"symbol\": token.symbol,\n        // A ticker symbol or shorthand, up to 5 chars.\n        \"decimals\": token.decimals,\n        // The number of decimals in the token\n        \"image\": token.image || \"https://raw.githubusercontent.com/trustwallet/tokens/master/tokens/\" + token.address + \".png\" //\"https://circuitsofvalue.com/public/coval-logo.png\", // A string url of the token logo\n\n      }\n    },\n    id: Math.round(Math.random() * 100000)\n  }, (err, addedBoolean) => {});\n};\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nmodule.exports = {\n  addTokenToWallet: _addTokenToWallet,\n  addMany: async tokens => {\n    let first = tokens.reverse().pop();\n    first = tokens.pop();\n\n    _addTokenToWallet(first);\n\n    await sleep(3000);\n    alert(0);\n    tokens.reverse().forEach(token => _addTokenToWallet(token)); // _addTokenToWallet(tokens[2])\n  }\n};","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/public/web3.js"],"names":["_addTokenToWallet","hook","token","console","log","web3","currentProvider","sendAsync","method","params","address","symbol","decimals","image","id","Math","round","random","err","addedBoolean","sleep","ms","Promise","resolve","setTimeout","module","exports","addTokenToWallet","addMany","tokens","first","reverse","pop","alert","forEach"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAC7CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAG,EAAAA,IAAI,CAACC,eAAL,CAAqBC,SAArB,CAA+B;AAC7BC,IAAAA,MAAM,EAAE,mBADqB;AAE7BC,IAAAA,MAAM,EAAE;AACN,cAAQ,OADF;AACW;AACjB,iBAAW;AACT,mBAAWP,KAAK,CAACQ,OADR;AACiB;AAC1B,kBAAUR,KAAK,CAACS,MAFP;AAEe;AACxB,oBAAYT,KAAK,CAACU,QAHT;AAGmB;AAC5B,iBAASV,KAAK,CAACW,KAAN,IAAe,wEAAsEX,KAAK,CAACQ,OAA5E,GAAoF,MAJnG,CAIyG;;AAJzG;AAFL,KAFqB;AAW7BI,IAAAA,EAAE,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,MAA3B;AAXyB,GAA/B,EAYG,CAACC,GAAD,EAAMC,YAAN,KAAuB,CAEzB,CAdD;AAeD,CAjBD;;AAkBA,SAASC,KAAT,CAAeC,EAAf,EAAmB;AACjB,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP;AACD;;AACDI,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,gBAAgB,EAAE3B,iBADL;AAEb4B,EAAAA,OAAO,EAAE,MAAOC,MAAP,IAAgB;AACvB,QAAIC,KAAK,GAAGD,MAAM,CAACE,OAAP,GAAiBC,GAAjB,EAAZ;AACAF,IAAAA,KAAK,GAAGD,MAAM,CAACG,GAAP,EAAR;;AACAhC,IAAAA,iBAAiB,CAAC8B,KAAD,CAAjB;;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX;AACAa,IAAAA,KAAK,CAAC,CAAD,CAAL;AACAJ,IAAAA,MAAM,CAACE,OAAP,GAAiBG,OAAjB,CAAyBhC,KAAK,IAAIF,iBAAiB,CAACE,KAAD,CAAnD,EANuB,CAOvB;AACD;AAVY,CAAjB","sourcesContent":["const _addTokenToWallet = function hook(token) {\n  console.log(token)\n  web3.currentProvider.sendAsync({\n    method: 'wallet_watchAsset',\n    params: {\n      \"type\": \"ERC20\", // Initially only supports ERC20, but eventually more!\n      \"options\": {\n        \"address\": token.address, // The address that the token is at.\n        \"symbol\": token.symbol, // A ticker symbol or shorthand, up to 5 chars.\n        \"decimals\": token.decimals, // The number of decimals in the token\n        \"image\": token.image || \"https://raw.githubusercontent.com/trustwallet/tokens/master/tokens/\"+token.address+\".png\"//\"https://circuitsofvalue.com/public/coval-logo.png\", // A string url of the token logo\n      },\n    },\n    id: Math.round(Math.random() * 100000),\n  }, (err, addedBoolean) => {\n\n  })\n}\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nmodule.exports = {\n    addTokenToWallet: _addTokenToWallet,\n    addMany: async (tokens)=>{\n      let first = tokens.reverse().pop()\n      first = tokens.pop()\n      _addTokenToWallet(first)      \n      await sleep(3000)\n      alert(0)\n      tokens.reverse().forEach(token => _addTokenToWallet(token))\n      // _addTokenToWallet(tokens[2])\n    }\n}"]},"metadata":{},"sourceType":"script"}