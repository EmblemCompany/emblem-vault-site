{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Text, Stack, Button, useColorMode, Select, Input, Box, useDisclosure, Link } from '@chakra-ui/core';\n// import { Accordion } from 'react-bootstrap';\nimport copy from 'copy-to-clipboard';\nimport { COLOR, contractAddresses } from '../constants';\nimport { useWeb3React } from '@web3-react/core';\nimport { ExplorerTXType, formatEtherscanLink, NETWORK_SHORTNAMES } from '../utils'; // import { useContract } from '../hooks'\n\nimport { Contract } from '@ethersproject/contracts';\nimport { TransactionToast } from './TransactionToast';\nimport Embed from './Embed';\nexport const EMBLEM_API = 'https://api.emblemvault.io';\nexport default function OfferModal({\n  isOpen,\n  onClose,\n  tokenId,\n  mine\n}) {\n  //   const address = addrAddr\n  //   const coin = addrCoin\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    0: copied,\n    1: setCopied\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n  const {\n    0: offeringToken,\n    1: setOfferingToken\n  } = useState({\n    address: '',\n    balance: 0,\n    tokenType: '',\n    name: ''\n  });\n  const {\n    0: tokenBalances,\n    1: setTokenBalances\n  } = useState([]);\n  const {\n    0: offeringTokenBalance,\n    1: setOfferingTokenBalance\n  } = useState(0);\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  const {\n    0: decimals,\n    1: setDecimals\n  } = useState(0);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(0);\n  const {\n    0: approvedForAll,\n    1: setApprovedForAll\n  } = useState(false);\n  const {\n    0: offerAmount,\n    1: setOfferAmount\n  } = useState(0);\n  const {\n    0: offerTokenId,\n    1: setOfferTokenId\n  } = useState(0);\n  const {\n    0: offers,\n    1: setOffers\n  } = useState([]);\n  const {\n    0: myOffers,\n    1: setMyOffers\n  } = useState([]);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: selectedNFTs,\n    1: setSelectedNFTs\n  } = useState([]);\n  const {\n    0: makeOfferPrice,\n    1: setMakeOfferPrice\n  } = useState(0);\n  const {\n    0: payToMakeOffer,\n    1: setPayToMakeOffer\n  } = useState(false);\n  const {\n    0: acceptOfferPrice,\n    1: setAcceptOfferPrice\n  } = useState(0);\n  const {\n    0: payToAcceptOffer,\n    1: setPayToAcceptOffer\n  } = useState(false);\n  const {\n    0: paymentToken,\n    1: setPaymentToken\n  } = useState(null);\n  const {\n    0: paymentDecimals,\n    1: setPaymentDecimals\n  } = useState(0);\n  const {\n    isOpen: isDetailOpen,\n    onToggle: onDetailToggle\n  } = useDisclosure();\n  const {\n    0: takePercentageOfERC20,\n    1: setTakePercentageOfERC20\n  } = useState(false);\n  const {\n    0: percentageOfERC20,\n    1: setPercentageOfERC20\n  } = useState(0); // const [offeringTokenId, setOfferingTokenId] = useState()\n\n  const getMetadata = async function (uri, cb) {\n    // alert(0)\n    uri = uri.replace('http://104.154.252.216', 'https://api.emblemvault.io/s:evmetadata');\n    let responce;\n\n    try {\n      responce = await fetch(uri, {\n        method: 'GET',\n        headers: {// redirect:'follow'\n        }\n      });\n      let jsonData = await responce.json();\n      return cb(jsonData);\n    } catch (err) {\n      // alert(0)\n      return cb(false);\n    }\n  };\n\n  const getErc20Contract = address => {\n    console.log(\"contract\", address);\n    return useContract(address, contractAddresses.covalAbi, true);\n  };\n\n  const getVaultContract = (address = null) => {\n    return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  };\n\n  const getTradeContract = () => {\n    return useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true);\n  };\n\n  const useContract = (address, ABI, withSigner = false) => {\n    return new Contract(address, ABI, withSigner ? library.getSigner(account).connectUnchecked() : library);\n  };\n\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account);\n      setLoaded(false);\n    }\n  }, [account, acct]);\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false);\n      }, 750);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [copied]);\n  useEffect(() => {\n    if (!loaded && !loading) {\n      setLoading(true);\n      getBalances(account, async balances => {\n        setTokenBalances(balances);\n        getOfferContractInfo();\n        setLoaded(true);\n        setLoading(false);\n      });\n    }\n  });\n\n  const handleApprove = async (address, _decimals = decimals) => {\n    let contract = getErc20Contract(address);\n    console.log('decimals', decimals);\n    await contract.approve(contractAddresses.nftrade[chainId], offeringTokenBalance * Math.pow(10, +_decimals)).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const handleApproveForAll = async (address = null) => {\n    let contract = getVaultContract(address);\n    await contract.setApprovalForAll(contractAddresses.nftrade[chainId], true).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const getApprovedForAll = async (address = null) => {\n    let contract = getVaultContract(address);\n    let approved = await contract.isApprovedForAll(account, contractAddresses.nftrade[chainId]); // console.log('---approved', approved)\n\n    setApprovedForAll(approved);\n  };\n\n  const getNFTContractInfo = async address => {\n    let contract = getVaultContract(address);\n    let count = await contract.balanceOf(account); // console.log('--------------- NFT Info', account, 'owns', count.toNumber())\n\n    let nftCollection = [];\n    getSingleNFT(0, () => {\n      // console.log(\"GOT ALL NFTs\", nftCollection)\n      setSelectedNFTs(nftCollection);\n    });\n\n    async function getSingleNFT(index, cb) {\n      let nftInfo = await contract.tokenOfOwnerByIndex(account, index);\n      nftCollection.push(nftInfo.toNumber());\n\n      if (index + 1 >= count) {\n        return cb();\n      } else {\n        return getSingleNFT(index + 1, cb);\n      }\n    }\n  };\n\n  const makeOffer = async () => {\n    let contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n    await contract.addOffer(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount * Math.pow(10, +decimals)).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const withdrawOffer = async index => {\n    let contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n    await contract.withdrawOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const rejectOffer = async index => {\n    let contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n    await contract.rejectOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const acceptOffer = async index => {\n    let contract = getTradeContract(); // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n\n    await contract.acceptOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const getTokenContractInfo = async address => {\n    let contract = getErc20Contract(address); // console.log(contract)\n\n    let _dec = await contract.decimals();\n\n    setDecimals(_dec);\n    setAllowance(await contract.allowance(account, contractAddresses.nftrade[chainId]).then(balance => (balance * Math.pow(10, -_dec)).toString()));\n    setOfferingTokenBalance(await contract.balanceOf(account).then(balance => (balance * Math.pow(10, -_dec)).toString()));\n  };\n\n  const getOfferContractInfo = async () => {\n    let contract = getTradeContract();\n\n    let _paymentToken = await contract.paymentAddress();\n\n    setPaymentToken(_paymentToken);\n    await getTokenContractInfo(_paymentToken);\n    let offerCount = (await contract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId)).toNumber();\n\n    let _payToMakeOffer = await contract.payToMakeOffer();\n\n    setPayToMakeOffer(_payToMakeOffer);\n\n    let _makeOfferPrice = (await contract.makeOfferPrice()).toNumber();\n\n    setMakeOfferPrice(_makeOfferPrice);\n\n    let _payToAcceptOffer = await contract.payToAcceptOffer();\n\n    setPayToAcceptOffer(_payToAcceptOffer);\n\n    let _acceptOfferPrice = (await contract.acceptOfferPrice()).toNumber();\n\n    setAcceptOfferPrice(_acceptOfferPrice);\n    let tokenContract = getErc20Contract(_paymentToken);\n\n    let _takePercentageOfERC20 = await contract.takePercentageOfERC20();\n\n    setTakePercentageOfERC20(_takePercentageOfERC20);\n\n    let _percentageOfERC20 = await contract.percentageFee();\n\n    setPercentageOfERC20(_percentageOfERC20);\n    console.log('-----%', _takePercentageOfERC20, _percentageOfERC20);\n    console.log('dec', await tokenContract.decimals());\n    setPaymentDecimals(await tokenContract.decimals());\n    console.log('_paymentToken', _paymentToken);\n    getApprovedForAll();\n    console.log('--------- payment ---------', _payToMakeOffer, _makeOfferPrice, _payToAcceptOffer, _acceptOfferPrice, _paymentToken, allowance);\n    console.log('------ offer count ------', offerCount); // let offers = []\n    // let myOffers = []\n\n    if (offerCount > 0) {\n      getSingleOffer(0, [], [], (offers, myOffers) => {\n        setOffers(offers);\n        setMyOffers(myOffers);\n        console.log('offers', offers, myOffers);\n      });\n    }\n\n    async function getSingleOffer(index, offers, myOffers, cb) {\n      let _offer = await contract.getOffer(contractAddresses.emblemVault[chainId], tokenId, index);\n\n      console.log('-------', _offer);\n\n      if (_offer.token !== \"0x0000000000000000000000000000000000000000\") {\n        let offer = {\n          tokenId: _offer.tokenId.toNumber(),\n          _from: _offer._from,\n          token: _offer.token,\n          amount: _offer.amount\n        };\n        let tokenContract = getErc20Contract(offer.token);\n        let tokenName = await tokenContract.name();\n        console.log('----- name ----', tokenName);\n        offer.name = tokenName;\n        offer.index = index;\n        offer.address = offer.token;\n        console.log('----- offer tokenid ----', _offer.tokenId.toNumber());\n\n        if (_offer.tokenId.toNumber() == 0) {\n          let tokenDecimals = await tokenContract.decimals();\n          let tokenSymbol = await tokenContract.symbol();\n          offer.symbol = tokenSymbol;\n          offer.decimals = tokenDecimals;\n          offer.amount = offer.amount.toNumber() * Math.pow(10, -tokenDecimals);\n          offers.push(offer);\n\n          if (offer._from == account) {\n            myOffers.push(offer);\n          }\n\n          finished();\n        } else {\n          let nftContract = getVaultContract(offer.token);\n          let tokenMetadata = await nftContract.tokenURI(offer.tokenId);\n          tokenMetadata = tokenMetadata.replace('ipfs://', 'https://gateway.ipfs.io/');\n          console.log('---------URI---------', tokenMetadata);\n          getMetadata(tokenMetadata, metadata => {\n            console.log('metadata', metadata);\n            offer.metadata = metadata;\n            offer.amount = _offer.amount.toNumber();\n            offer.tokenId = _offer.tokenId.toNumber();\n            offers.push(offer);\n\n            if (offer._from == account) {\n              myOffers.push(offer);\n            }\n\n            finished();\n          });\n        }\n      } else {\n        console.log('----- wtf -----');\n        finished();\n      }\n\n      function finished() {\n        if (index + 1 >= offerCount) {\n          return cb(offers, myOffers);\n        } else {\n          return getSingleOffer(index + 1, offers, myOffers, cb);\n        }\n      }\n    } // console.log(offerCount)\n\n  };\n\n  const getBalances = async (address, cb) => {\n    if (mine) return cb([]);\n    const responce = await fetch(EMBLEM_API + '/' + NETWORK_SHORTNAMES[chainId] + '/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData.values);\n  };\n\n  function copyWithFlag(content) {\n    copy(content);\n    setCopied(true);\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    color: COLOR[colorMode],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 11\n    }\n  }, !mine ? 'Make' : null, \" Offer\", mine ? 's' : null, \" for: \", tokenId)), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 9\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 9\n    }\n  }, !mine ? __jsx(Stack, {\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 17\n    }\n  }, __jsx(Stack, {\n    mt: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 21\n    }\n  }, \"Choose your Offer Token\"), __jsx(Select, {\n    w: \"100%\",\n    value: offeringToken.address,\n    onChange: e => {\n      if (e.target.value !== '0') {\n        let token = tokenBalances.filter(item => {\n          return item.address == e.target.value;\n        })[0];\n        setOfferingToken(token);\n        setOfferTokenId(0);\n        token.tokenType == \"ERC-20\" ? getTokenContractInfo(token.address) : getNFTContractInfo(token.address);\n        console.log(tokenBalances.filter(item => {\n          return item.address == e.target.value;\n        })[0]);\n        console.log(e.target.value);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 21\n    }\n  }, __jsx(\"option\", {\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 25\n    }\n  }, \"Choose a Token\"), tokenBalances.map((coin, index) => {\n    if (coin.tokenType !== 'native') return __jsx(\"option\", {\n      value: coin.address,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 29\n      }\n    }, coin.name);\n  })), offeringToken.balance > 0 && offeringToken.tokenType == \"ERC-20\" && allowance > 0 ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 29\n    }\n  }, \"Max: \", offeringTokenBalance), __jsx(Input, {\n    onChange: e => setOfferAmount(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 29\n    }\n  })) : null), __jsx(Stack, {\n    direction: \"row\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 21\n    }\n  }, offeringToken.tokenType == 'ERC-20' ? offeringTokenBalance > 0 && allowance == 0 ? __jsx(Button, {\n    onClick: () => {\n      handleApprove(offeringToken.address);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 29\n    }\n  }, \"Approve offer of \", offeringToken.name) : offeringToken && offeringTokenBalance == 0 ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 29\n    }\n  }, \"Insufficient Balance\") : __jsx(Button, {\n    onClick: () => {\n      makeOffer();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 29\n    }\n  }, \"Make Offer\") : selectedNFTs.length > 0 ? __jsx(Select, {\n    width: \"100%\",\n    onChange: e => {\n      if (e.target.value !== '0') {\n        // console.log(\"Picked TokenID: \", e.target.value, offeringToken)\n        setOfferTokenId(Number(e.target.value));\n        getApprovedForAll(offeringToken.address);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 25\n    }\n  }, __jsx(\"option\", {\n    key: -1,\n    value: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 27\n    }\n  }, \"Select TokenId\"), selectedNFTs.map((tokenId, index) => {\n    return __jsx(\"option\", {\n      key: index,\n      value: tokenId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 29\n      }\n    }, tokenId);\n  })) : null, offeringToken.name && offeringToken.tokenType != \"ERC-20\" && !approvedForAll && offerTokenId != 0 ? __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      handleApproveForAll(offeringToken.address);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 23\n    }\n  }, \"Approve \", offeringToken.name) : offeringToken.name && offeringToken.tokenType != \"ERC-20\" && approvedForAll ? __jsx(Button, {\n    onClick: () => {\n      makeOffer();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 23\n    }\n  }, \"Make Offer\") : null), payToMakeOffer ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 23\n    }\n  }, \" Cost: \", acceptOfferPrice * Math.pow(10, -paymentDecimals), \" $Coval to make offers\") : null, takePercentageOfERC20 && offeringToken.tokenType != \"ERC-20\" ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 82\n    }\n  }, \"Takes a %\") : null, __jsx(Stack, {\n    maxHeight: \"200px\",\n    overflow: \"scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 21\n    }\n  }, myOffers.length > 0 ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 25\n    }\n  }, \"My Offers\") : null, payToMakeOffer && offeringTokenBalance > 0 && allowance * Math.pow(10, +paymentDecimals) < makeOfferPrice ? __jsx(React.Fragment, null, __jsx(Button, {\n    onClick: () => {\n      handleApprove(paymentToken, paymentDecimals);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 31\n    }\n  }, \"Approve spending \")) : offeringToken && offeringTokenBalance < makeOfferPrice * Math.pow(10, -paymentDecimals) ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 31\n    }\n  }, \"Insufficient Balance\") : null, myOffers.map((offer, index) => {\n    return __jsx(Box, {\n      borderRadius: \"0.25rem\",\n      borderWidth: 1,\n      p: 2,\n      mb: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 33\n      }\n    }, __jsx(Text, {\n      fontSize: \"bold\",\n      color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 37\n      }\n    }, offer.amount > 0 ? offer.amount : null, __jsx(Link, {\n      ml: 3,\n      color: colorMode == \"dark\" ? \"white\" : \"black\",\n      href: formatEtherscanLink(ExplorerTXType.Token, [chainId, offer.token]),\n      isExternal: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 39\n      }\n    }, offer.name), offer.amount < 1 ? '[' + offer.tokenId + ']' : null), __jsx(Button, {\n      onClick: () => {\n        withdrawOffer(offer.index);\n      },\n      m: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 39\n      }\n    }, \"Withdraw Offer\"), offer.metadata ? __jsx(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 43\n      }\n    }, __jsx(Embed, {\n      className: \"\",\n      url: offer.metadata.image.replace('ipfs://', 'https://gateway.ipfs.io/'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 45\n      }\n    })) : null);\n  }))) : null, mine ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 17\n    }\n  }, !approvedForAll ? __jsx(Button, {\n    onClick: () => {\n      handleApproveForAll();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 21\n    }\n  }, \"Allow accepting of Offers\") : null, __jsx(Stack, {\n    direction: \"column\",\n    maxHeight: \"200px\",\n    overflow: \"scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 19\n    }\n  }, payToAcceptOffer && offeringTokenBalance > 0 && allowance * Math.pow(10, +paymentDecimals) < acceptOfferPrice ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 31\n    }\n  }, \"Cost: \", acceptOfferPrice * Math.pow(10, -paymentDecimals), \" $Coval to accept offers\"), __jsx(Button, {\n    onClick: () => {\n      handleApprove(paymentToken, paymentDecimals);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 31\n    }\n  }, \"Approve spending \")) : offeringToken && offeringTokenBalance < acceptOfferPrice * Math.pow(10, -paymentDecimals) ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 31\n    }\n  }, \"Insufficient Balance\") : null, offers.map((offer, index) => {\n    return __jsx(Box, {\n      borderRadius: \"0.25rem\",\n      borderWidth: 1,\n      p: 2,\n      mb: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 33\n      }\n    }, __jsx(Text, {\n      fontSize: \"bold\",\n      color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 37\n      }\n    }, offer.amount > 0 ? offer.amount : null, __jsx(Link, {\n      ml: 3,\n      color: colorMode == \"dark\" ? \"white\" : \"black\",\n      href: formatEtherscanLink(ExplorerTXType.Token, [chainId, offer.token]),\n      isExternal: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 39\n      }\n    }, offer.name), offer.amount < 1 ? '[' + offer.tokenId + ']' : null), __jsx(Text, {\n      color: colorMode == \"dark\" ? \"#baaa94\" : \"gray\",\n      fontSize: \"xs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 37\n      }\n    }, \"From:\", __jsx(Link, {\n      ml: 3,\n      color: colorMode == \"dark\" ? \"white\" : \"darkgray\",\n      href: formatEtherscanLink(ExplorerTXType.Account, [chainId, offer._from]),\n      isExternal: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 39\n      }\n    }, offer._from)), __jsx(Button, {\n      onClick: () => {\n        rejectOffer(offer.index);\n      },\n      m: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 37\n      }\n    }, \"Reject Offer\"), approvedForAll ? __jsx(Button, {\n      onClick: () => {\n        acceptOffer(offer.index);\n      },\n      m: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 43\n      }\n    }, \"Accept Offer\") : null, offer.metadata ? __jsx(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 43\n      }\n    }, __jsx(Embed, {\n      className: \"\",\n      url: offer.metadata.image.replace('ipfs://', 'https://gateway.ipfs.io/'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 45\n      }\n    })) : null);\n  }))) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      setHash(null);\n      setLoaded(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 11\n    }\n  }) : null), __jsx(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/OfferModal.tsx"],"names":["React","useEffect","useState","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","Text","Stack","Button","useColorMode","Select","Input","Box","useDisclosure","Link","copy","COLOR","contractAddresses","useWeb3React","ExplorerTXType","formatEtherscanLink","NETWORK_SHORTNAMES","Contract","TransactionToast","Embed","EMBLEM_API","OfferModal","isOpen","onClose","tokenId","mine","colorMode","account","chainId","library","copied","setCopied","loading","setLoading","loaded","setLoaded","offeringToken","setOfferingToken","address","balance","tokenType","name","tokenBalances","setTokenBalances","offeringTokenBalance","setOfferingTokenBalance","acct","setAcct","decimals","setDecimals","allowance","setAllowance","approvedForAll","setApprovedForAll","offerAmount","setOfferAmount","offerTokenId","setOfferTokenId","offers","setOffers","myOffers","setMyOffers","hash","setHash","selectedNFTs","setSelectedNFTs","makeOfferPrice","setMakeOfferPrice","payToMakeOffer","setPayToMakeOffer","acceptOfferPrice","setAcceptOfferPrice","payToAcceptOffer","setPayToAcceptOffer","paymentToken","setPaymentToken","paymentDecimals","setPaymentDecimals","isDetailOpen","onToggle","onDetailToggle","takePercentageOfERC20","setTakePercentageOfERC20","percentageOfERC20","setPercentageOfERC20","getMetadata","uri","cb","replace","responce","fetch","method","headers","jsonData","json","err","getErc20Contract","console","log","useContract","covalAbi","getVaultContract","emblemVault","emblemAbi","getTradeContract","nftrade","nftradeAbi","ABI","withSigner","getSigner","connectUnchecked","timeout","setTimeout","clearTimeout","getBalances","balances","getOfferContractInfo","handleApprove","_decimals","contract","approve","Math","pow","then","handleApproveForAll","setApprovalForAll","getApprovedForAll","approved","isApprovedForAll","getNFTContractInfo","count","balanceOf","nftCollection","getSingleNFT","index","nftInfo","tokenOfOwnerByIndex","push","toNumber","makeOffer","addOffer","withdrawOffer","rejectOffer","acceptOffer","getTokenContractInfo","_dec","toString","_paymentToken","paymentAddress","offerCount","getOfferCount","_payToMakeOffer","_makeOfferPrice","_payToAcceptOffer","_acceptOfferPrice","tokenContract","_takePercentageOfERC20","_percentageOfERC20","percentageFee","getSingleOffer","_offer","getOffer","token","offer","_from","amount","tokenName","tokenDecimals","tokenSymbol","symbol","finished","nftContract","tokenMetadata","tokenURI","metadata","service","values","copyWithFlag","content","e","target","value","filter","item","map","coin","length","Number","Token","image","Account"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Text,\n  Stack,\n  Button,\n  useColorMode,\n  Select,\n  Input,\n  Image,\n  Box,\n  Collapse,\n  useDisclosure,\n  Link,\n  \n} from '@chakra-ui/core'\nimport {\n  // Accordion,\n  AccordionItem,\n  AccordionPanel,\n  AccordionIcon,\n  AccordionButton,\n} from \"@chakra-ui/react\"\n// import { Accordion } from 'react-bootstrap';\nimport copy from 'copy-to-clipboard'\nimport QRCode from 'qrcode.react'\nimport { COLOR, contractAddresses } from '../constants'\nimport { useWeb3React } from '@web3-react/core'\nimport { ExplorerTXType, formatEtherscanLink, NETWORK_SHORTNAMES } from '../utils'\n// import { useContract } from '../hooks'\nimport { useTokenBalance, useTokenAllowance, useETHBalance } from '../data'\nimport { Contract, ContractInterface } from '@ethersproject/contracts'\nimport { HStack } from '@chakra-ui/react'\nimport { TransactionToast } from './TransactionToast'\nimport { addTokenToWallet } from '../public/web3'\nimport Embed from './Embed'\nimport Accordion from 'react-bootstrap/esm/Accordion'\nimport { Card } from 'react-bootstrap'\nexport const EMBLEM_API = 'https://api.emblemvault.io'\nimport { EXPLORER_PREFIXES } from '../utils'\n\nexport default function OfferModal({\n  isOpen,\n  onClose,\n  tokenId,\n  mine,\n}: {\n  isOpen: boolean\n  onClose: () => void\n  tokenId\n  mine: boolean\n}): JSX.Element {\n//   const address = addrAddr\n//   const coin = addrCoin\n\n  const { colorMode } = useColorMode()\n  const { account, chainId, library } = useWeb3React()\n  const [copied, setCopied] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [loaded, setLoaded] = useState(false)\n  const [offeringToken, setOfferingToken] = useState({address:'', balance: 0, tokenType:'', name: ''})\n  const [tokenBalances, setTokenBalances] = useState([])\n  const [offeringTokenBalance, setOfferingTokenBalance] = useState(0)\n  const [acct, setAcct] = useState('')\n  const [decimals, setDecimals] = useState(0)\n  const [allowance, setAllowance] = useState(0)\n  const [approvedForAll, setApprovedForAll] = useState(false)\n  const [offerAmount, setOfferAmount] = useState(0)\n  const [offerTokenId, setOfferTokenId] = useState(0)\n  const [offers, setOffers] = useState([])\n  const [myOffers, setMyOffers] = useState([])\n  const [hash, setHash] = useState(null)\n  const [selectedNFTs, setSelectedNFTs] = useState([])\n  const [makeOfferPrice, setMakeOfferPrice] = useState(0)\n  const [payToMakeOffer, setPayToMakeOffer] = useState(false)\n  const [acceptOfferPrice, setAcceptOfferPrice] = useState(0)\n  const [payToAcceptOffer, setPayToAcceptOffer] = useState(false)\n  const [paymentToken, setPaymentToken] = useState(null)\n  const [paymentDecimals, setPaymentDecimals] = useState(0)\n  const { isOpen: isDetailOpen, onToggle: onDetailToggle } = useDisclosure()\n  const [takePercentageOfERC20, setTakePercentageOfERC20] = useState(false)\n  const [percentageOfERC20, setPercentageOfERC20] = useState(0)\n  // const [offeringTokenId, setOfferingTokenId] = useState()\n  \n  const getMetadata = async function(uri, cb){\n    // alert(0)\n    uri = uri.replace('http://104.154.252.216','https://api.emblemvault.io/s:evmetadata')\n    let responce\n    try {\n        responce = await fetch(uri, {\n        method: 'GET',\n        headers: {\n          // redirect:'follow'\n        },\n      })\n      let jsonData = await responce.json()\n      return cb(jsonData)\n    } catch(err){\n      // alert(0)\n      return cb(false)\n    }\n  }\n\n  const getErc20Contract = (address) =>{\n    console.log(\"contract\", address)\n    return useContract(address, contractAddresses.covalAbi, true)\n  }\n\n  const getVaultContract = (address = null) =>{\n    return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n  }\n\n  const getTradeContract = ()=>{\n    return useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true)\n  }\n\n  const useContract = (address?: string, ABI?: ContractInterface, withSigner = false): Contract | undefined => {\n    return new Contract(address, ABI, withSigner ? library.getSigner(account).connectUnchecked() : library)\n  }\n\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setLoaded(false)\n    }\n  }, [account, acct])\n  useEffect(() => {\n    if (copied) {\n      const timeout = setTimeout(() => {\n        setCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [copied])\n\n  useEffect(() => {\n      if (!loaded && !loading) {\n        setLoading(true)\n        getBalances(account, async balances =>{\n            setTokenBalances(balances)\n            getOfferContractInfo()\n            setLoaded(true)\n            setLoading(false)            \n        })\n\n      }\n  })\n\n  const handleApprove = async(address, _decimals = decimals)=>{\n    let contract = getErc20Contract(address)\n    console.log('decimals', decimals)\n    await contract.approve(contractAddresses.nftrade[chainId], (offeringTokenBalance * Math.pow(10, +_decimals))).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const handleApproveForAll = async(address = null)=>{\n    let contract = getVaultContract(address)\n    await contract.setApprovalForAll(contractAddresses.nftrade[chainId], true).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n  const getApprovedForAll = async(address = null)=>{\n    let contract = getVaultContract(address)\n    let approved = await contract.isApprovedForAll(account, contractAddresses.nftrade[chainId])\n    // console.log('---approved', approved)\n    setApprovedForAll(approved)\n  }\n\n  const getNFTContractInfo = async(address)=>{\n    let contract = getVaultContract(address)\n    let count = await contract.balanceOf(account)\n    // console.log('--------------- NFT Info', account, 'owns', count.toNumber())\n    let nftCollection = []\n    getSingleNFT(0, ()=>{\n      // console.log(\"GOT ALL NFTs\", nftCollection)\n      setSelectedNFTs(nftCollection)\n    })\n    async function getSingleNFT(index, cb) {\n        let nftInfo =  await contract.tokenOfOwnerByIndex(account, index)\n        nftCollection.push(nftInfo.toNumber())\n        if (index +1 >= count) {\n          return cb()\n      } else {\n          return getSingleNFT(index +1, cb)\n      }\n    }\n  }\n\n  const makeOffer = async()=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.addOffer(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals)).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const withdrawOffer = async(index)=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.withdrawOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const rejectOffer = async(index)=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.rejectOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n  }\n\n  const acceptOffer = async(index)=>{\n    let contract = getTradeContract()\n    // console.log(offeringToken.address, offerTokenId, contractAddresses.emblemVault[chainId], tokenId, offerAmount* Math.pow(10, +decimals))\n    await contract.acceptOffer(contractAddresses.emblemVault[chainId], tokenId, index).then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const getTokenContractInfo = async (address)=>{\n    let contract = getErc20Contract(address)\n    // console.log(contract)\n    let _dec = await contract.decimals()\n    setDecimals(_dec)\n    setAllowance(\n        await contract\n        .allowance(account, contractAddresses.nftrade[chainId])\n        .then(balance=>(balance * Math.pow(10, -_dec)).toString())\n    )\n    setOfferingTokenBalance(\n        await contract\n        .balanceOf(account)\n        .then(balance=>(balance * Math.pow(10, -_dec)).toString())\n    )\n  }\n\n  const getOfferContractInfo = async ()=>{\n    let contract = getTradeContract()\n    let _paymentToken = await contract.paymentAddress()\n    setPaymentToken(_paymentToken)\n    await getTokenContractInfo(_paymentToken)\n    let offerCount = (await contract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId)).toNumber()\n    let _payToMakeOffer = await contract.payToMakeOffer()\n    setPayToMakeOffer(_payToMakeOffer)\n    let _makeOfferPrice = (await contract.makeOfferPrice()).toNumber()\n    setMakeOfferPrice(_makeOfferPrice)\n    let _payToAcceptOffer = await contract.payToAcceptOffer()\n    setPayToAcceptOffer(_payToAcceptOffer)\n    let _acceptOfferPrice = (await contract.acceptOfferPrice()).toNumber()\n    setAcceptOfferPrice(_acceptOfferPrice)\n    let tokenContract = getErc20Contract(_paymentToken)\n    let _takePercentageOfERC20 = await contract.takePercentageOfERC20()\n    setTakePercentageOfERC20(_takePercentageOfERC20)\n    let _percentageOfERC20 = await contract.percentageFee()\n    setPercentageOfERC20(_percentageOfERC20)\n    console.log('-----%', _takePercentageOfERC20, _percentageOfERC20)\n    console.log('dec',await tokenContract.decimals())\n    setPaymentDecimals(await tokenContract.decimals())\n    console.log('_paymentToken', _paymentToken)\n    getApprovedForAll()\n  \n    console.log('--------- payment ---------', _payToMakeOffer, _makeOfferPrice, _payToAcceptOffer, _acceptOfferPrice, _paymentToken, allowance)\n    \n    console.log('------ offer count ------', offerCount)\n    \n    // let offers = []\n    // let myOffers = []\n    if (offerCount > 0) {\n        getSingleOffer(0, [], [], (offers, myOffers)=>{\n            setOffers(offers)\n            setMyOffers(myOffers)\n            console.log('offers', offers, myOffers)\n        })\n    }\n    async function getSingleOffer(index, offers, myOffers, cb) {\n        let _offer = await contract.getOffer(contractAddresses.emblemVault[chainId], tokenId, index)\n        console.log('-------', _offer)\n        if (_offer.token !== \"0x0000000000000000000000000000000000000000\") {\n            let offer: any = {tokenId: _offer.tokenId.toNumber(), _from: _offer._from, token: _offer.token, amount: _offer.amount}\n            let tokenContract = getErc20Contract(offer.token)\n            \n            let tokenName = await tokenContract.name()\n            console.log('----- name ----', tokenName)\n            offer.name = tokenName\n            offer.index = index            \n            offer.address = offer.token\n            console.log('----- offer tokenid ----', _offer.tokenId.toNumber())\n            if (_offer.tokenId.toNumber() == 0) {\n              let tokenDecimals = await tokenContract.decimals()\n              let tokenSymbol = await tokenContract.symbol()\n              offer.symbol = tokenSymbol\n              offer.decimals = tokenDecimals\n              offer.amount = offer.amount.toNumber() * Math.pow(10,-tokenDecimals)\n              offers.push(offer)\n              if (offer._from == account) {\n                myOffers.push(offer)\n              }\n              finished()\n            } else {\n              let nftContract = getVaultContract(offer.token)\n              let tokenMetadata= await nftContract.tokenURI(offer.tokenId)\n              tokenMetadata = tokenMetadata.replace('ipfs://', 'https://gateway.ipfs.io/')\n              console.log('---------URI---------', tokenMetadata)\n              getMetadata(tokenMetadata, (metadata)=>{\n                console.log('metadata', metadata)\n                offer.metadata = metadata\n                offer.amount = _offer.amount.toNumber()\n                offer.tokenId = _offer.tokenId.toNumber()\n                offers.push(offer)\n                if (offer._from == account) {\n                  myOffers.push(offer)\n                }\n                finished()\n              })\n            }\n        } else {\n          console.log('----- wtf -----')\n          finished()\n        }      \n        function finished() {\n          if (index +1 >= offerCount) {\n            return cb(offers, myOffers)\n          } else {\n              return getSingleOffer(index +1, offers, myOffers, cb)\n          }\n        }\n        \n    }\n    // console.log(offerCount)\n  }\n\n  const getBalances = async (address, cb) => {\n    if (mine) return cb([])\n    const responce = await fetch(EMBLEM_API + '/'+NETWORK_SHORTNAMES[chainId]+'/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData.values)\n  }\n\n  function copyWithFlag(content: string): void {\n    copy(content)\n    setCopied(true)\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent color={COLOR[colorMode]}>\n        <ModalHeader>\n          <Text>{!mine? ('Make'): null} Offer{mine? ('s'): null} for: {tokenId}</Text>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n            {!mine? (\n                <Stack direction=\"column\">\n                    <Stack mt=\"6\">\n                    <Text>Choose your Offer Token</Text>\n                  {/* <Text>{account} network: {NETWORK_SHORTNAMES[chainId]}</Text> */}\n                    <Select w=\"100%\" value={offeringToken.address}\n                        onChange={(e) => {\n                            if (e.target.value !== '0') {\n                                let token = tokenBalances.filter((item)=>{return item.address == e.target.value})[0]\n                                setOfferingToken(token)\n                                setOfferTokenId(0)\n                                token.tokenType ==\"ERC-20\" ? getTokenContractInfo(token.address) : getNFTContractInfo(token.address)\n                                console.log(tokenBalances.filter((item)=>{return item.address == e.target.value})[0])\n                                console.log(e.target.value)\n                            }\n                        }}\n                    >\n                        <option value=\"0\" >Choose a Token</option>\n                        {tokenBalances.map((coin, index) => {\n                            if (coin.tokenType !== 'native')\n                            return (\n                            <option value={coin.address}>{coin.name}</option>\n                            )\n                        })}\n                    </Select>\n                    {offeringToken.balance > 0 && offeringToken.tokenType==\"ERC-20\" && allowance > 0 ? (\n                        <>\n                            <Text>Max: {offeringTokenBalance}</Text>    \n                            <Input onChange={(e) => setOfferAmount(e.target.value)}></Input>\n                        </>\n                    ) : null}\n                                  \n                </Stack>\n                    <Stack direction=\"row\" justify=\"center\">\n                    {offeringToken.tokenType =='ERC-20' ? (\n                        offeringTokenBalance > 0 && allowance == 0 ? (\n                            <Button onClick={()=>{handleApprove(offeringToken.address)}}>Approve offer of {offeringToken.name}</Button>\n                        ) : offeringToken && offeringTokenBalance == 0 ? (\n                            <Text>Insufficient Balance</Text>\n                        ) : (\n                            <Button onClick={()=>{makeOffer()}}>Make Offer</Button>\n                        )\n                    ) : (\n                      selectedNFTs.length > 0 ? (\n                        <Select\n                        width=\"100%\"\n                        onChange={(e) => {\n                          if (e.target.value !== '0') {\n                              // console.log(\"Picked TokenID: \", e.target.value, offeringToken)\n                              setOfferTokenId(Number(e.target.value))\n                              getApprovedForAll(offeringToken.address)\n                          }\n                        }}>\n                          <option key={-1} value=\"0\">Select TokenId</option>\n                          {selectedNFTs.map((tokenId, index) => {\n                            return (\n                            <option key={index} value={tokenId}>{tokenId}</option>\n                            )\n                        })}\n                        </Select>\n                        \n                      ) : null\n                    )}\n                    {offeringToken.name && offeringToken.tokenType !=\"ERC-20\" && !approvedForAll && offerTokenId != 0? (\n                      <Button width=\"100%\" onClick={()=>{handleApproveForAll(offeringToken.address)}}>Approve {offeringToken.name}</Button>\n                    ): offeringToken.name && offeringToken.tokenType !=\"ERC-20\" && approvedForAll? (\n                      <Button onClick={()=>{makeOffer()}}>Make Offer</Button>\n                    ): null}                    \n                  {/* <Button onClick={() => copyWithFlag('address')}>\n                    {copied ? <Text>Copied!</Text> : <Text isTruncated>{'address'}</Text>}\n                  </Button> */}\n                </Stack>\n                {payToMakeOffer ? (\n                      <Text> Cost: {acceptOfferPrice * Math.pow(10, -paymentDecimals)} $Coval to make offers</Text>\n                ) : null}\n                {\n                  takePercentageOfERC20 && offeringToken.tokenType !=\"ERC-20\" ? (<Text>Takes a %</Text>) : null\n                }\n                    \n                    <Stack maxHeight = \"200px\" overflow=\"scroll\">\n                      { myOffers.length > 0 ? (\n                        <Text>My Offers</Text>\n                      ) : null }                        \n                        {payToMakeOffer && offeringTokenBalance > 0 && allowance * Math.pow(10, +paymentDecimals) < makeOfferPrice ? (\n                            <>\n                              {/* <Text>Cost: {makeOfferPrice * Math.pow(10, -paymentDecimals)} $Coval to make offers</Text> */}\n                              <Button onClick={()=>{handleApprove(paymentToken, paymentDecimals)}}>Approve spending </Button>\n                            </>\n                          ) : offeringToken && offeringTokenBalance < makeOfferPrice * Math.pow(10, -paymentDecimals)  ? (\n                              <Text>Insufficient Balance</Text>\n                          ) : null}\n                        { myOffers.map((offer, index) => {\n                              return (\n                                <Box borderRadius=\"0.25rem\" borderWidth={1} p={2} mb={2}>\n                                {/* <Card key={index}> */}\n                                  {/* <Card.Header color=\"black\"> */}\n                                    {/* <Accordion.Toggle as={Button} eventKey=\"1\" color=\"darkslategray\"> */}\n\n                                    {/* <Text color=\"black\">{offer.name} {offer.amount > 0 ? offer.amount: offer.tokenId}</Text> */}\n                                    <Text fontSize=\"bold\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"} >{offer.amount > 0 ? offer.amount : null}\n                                      <Link ml={3} color={colorMode==\"dark\"? \"white\": \"black\"} href={formatEtherscanLink(ExplorerTXType.Token, [chainId as number, offer.token])} isExternal>\n                                        {offer.name}\n                                      </Link>\n                                    {offer.amount < 1 ? '['+offer.tokenId+']': null}\n                                    </Text>\n                                    {/* </Accordion.Toggle> */}\n                                  {/* </Card.Header> */}\n                                  {/* <Accordion.Collapse eventKey=\"1\"> */}\n                                    {/* <Card.Body> */}\n                                      <Button onClick={() =>{withdrawOffer(offer.index)}} m={2}>Withdraw Offer</Button>\n                                        {offer.metadata? (                                            \n                                          <Box >\n                                            <Embed className=\"\" url={offer.metadata.image.replace('ipfs://','https://gateway.ipfs.io/')}/>\n                                          </Box>\n                                      ) : null}\n                                    {/* </Card.Body> */}\n                                  {/* </Accordion.Collapse> */}\n                                {/* </Card> */}\n                                </Box>\n                              )\n                        })}\n                        \n                    </Stack>\n                </Stack>\n            ) : null}\n\n            {mine? (\n                <Box>\n                  {!approvedForAll ? (\n                    <Button onClick={()=>{handleApproveForAll()}}>Allow accepting of Offers</Button>\n                  ) : null}\n                \n                  <Stack direction=\"column\" maxHeight = \"200px\" overflow=\"scroll\">\n                   \n                    {/* {offers.length > 0 ? (<Text>Offers</Text>) : null } */}\n                        \n                        {payToAcceptOffer && offeringTokenBalance > 0 && allowance  * Math.pow(10, +paymentDecimals) < acceptOfferPrice ? (\n                            <>\n                              <Text>Cost: {acceptOfferPrice * Math.pow(10, -paymentDecimals)} $Coval to accept offers</Text>\n                              <Button onClick={()=>{handleApprove(paymentToken, paymentDecimals)}}>Approve spending </Button>\n                            </>\n                          ) : offeringToken && offeringTokenBalance < acceptOfferPrice * Math.pow(10, -paymentDecimals)  ? (\n                              <Text>Insufficient Balance</Text>\n                          ) : null}\n                          \n                        { offers.map((offer, index) => {\n                              return (\n                                <Box borderRadius=\"0.25rem\" borderWidth={1} p={2} mb={2}>\n                                    <Text fontSize=\"bold\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"} >{offer.amount > 0 ? offer.amount : null}\n                                      <Link ml={3} color={colorMode==\"dark\"? \"white\": \"black\"} href={formatEtherscanLink(ExplorerTXType.Token, [chainId as number, offer.token])} isExternal>\n                                        {offer.name}\n                                      </Link>\n                                    {offer.amount < 1 ? '['+offer.tokenId+']': null}\n                                    </Text>\n\n                                    <Text color={colorMode==\"dark\" ? \"#baaa94\": \"gray\"} fontSize=\"xs\">\n                                      From: \n                                      <Link ml={3} color={colorMode==\"dark\"? \"white\": \"darkgray\"} href={formatEtherscanLink(ExplorerTXType.Account, [chainId as number, offer._from])} isExternal>\n                                      {offer._from}\n                                      </Link>\n                                    </Text>\n                                    \n                                    <Button onClick={() =>{rejectOffer(offer.index)}} m={2}>Reject Offer</Button>\n                                      {approvedForAll ? (\n                                          <Button onClick={() =>{acceptOffer(offer.index)}} m={2}>Accept Offer</Button>\n                                      ) : null} \n                                        {offer.metadata? (                                            \n                                          <Box >\n                                            <Embed className=\"\" url={offer.metadata.image.replace('ipfs://','https://gateway.ipfs.io/')}/>\n                                          </Box>\n                                      ) : null}\n                                </Box>\n                              )\n                              \n                        })}\n                </Stack>\n                </Box>\n            ) : null }\n          {hash ? (\n          <TransactionToast\n                hash={hash}\n                onComplete={() => {\n                    setHash(null)\n                    setLoaded(false)\n                }}\n            />\n          ) : null }\n        </ModalBody>\n        <ModalFooter></ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}