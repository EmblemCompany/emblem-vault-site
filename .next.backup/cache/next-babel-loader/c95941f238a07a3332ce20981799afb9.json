{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure, Collapse, useColorMode, Tabs, TabList, Tab, TabPanel, TabPanels } from '@chakra-ui/core';\nimport { HStack } from '@chakra-ui/react'; // import TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\n\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { Contract } from '@ethersproject/contracts';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, contractAddresses, curatedContracts, SIG_API, EMBLEM_V2_API } from '../constants';\nimport { useContract } from '../hooks';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport CryptoJS from 'crypto-js';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nimport NFTSlideshow from './embed/NFTSlideshow';\nimport CoinBalance from './partials/CoinBalance';\nimport transakSDK from '@transak/transak-sdk';\nimport Attributes from './partials/Attributes';\nimport { generateWallet } from '@stacks/wallet-sdk';\nimport FetchNodeDetails from \"@toruslabs/fetch-node-details\";\nimport TorusUtils from \"@toruslabs/torus.js\";\nimport JsonDownloadLink from './JsonDownloadLink';\nvar AddrModal = dynamic(_c = function _c() {\n  return import('./AddrModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./AddrModal')];\n    },\n    modules: ['./AddrModal']\n  }\n});\n_c2 = AddrModal;\nvar KeysModal = dynamic(_c3 = function _c3() {\n  return import('./KeysModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./KeysModal')];\n    },\n    modules: ['./KeysModal']\n  }\n});\n_c4 = KeysModal;\nvar OfferModal = dynamic(_c5 = function _c5() {\n  return import('./OfferModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./OfferModal')];\n    },\n    modules: ['./OfferModal']\n  }\n});\n_c6 = OfferModal;\nexport default function Nft() {\n  _s();\n\n  var _this = this;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(query.cc == 't'),\n      clearCache = _useState[0],\n      setCache = _useState[1];\n\n  var _useState2 = useState(query.curated == 't'),\n      showMove = _useState2[0],\n      setShowMove = _useState2[1];\n\n  var _useState3 = useState({\n    1: '',\n    name: '',\n    chain: ''\n  }),\n      qualifiedCollection = _useState3[0],\n      setQualifiedCollection = _useState3[1];\n\n  var _useState4 = useState(false),\n      moving = _useState4[0],\n      setMoving = _useState4[1];\n\n  var _useState5 = useState(false),\n      approved = _useState5[0],\n      setApproved = _useState5[1];\n\n  var _useState6 = useState(query.useOldMint),\n      useOldMint = _useState6[0],\n      setUseOldMint = _useState6[1];\n\n  var _useState7 = useState(query.key),\n      mintPassword = _useState7[0],\n      setMintPassword = _useState7[1];\n\n  var _useState8 = useState(query.offer || false),\n      showOffer = _useState8[0],\n      setShowOffer = _useState8[1];\n\n  var _useState9 = useState(query.framed || true),\n      framed = _useState9[0],\n      setFramed = _useState9[1];\n\n  var _useState10 = useState(query.id),\n      tokenId = _useState10[0],\n      setTokenId = _useState10[1];\n\n  var _useState11 = useState(query.experimental),\n      experimental = _useState11[0],\n      setExperimental = _useState11[1];\n\n  var _useState12 = useState(query.noLayout),\n      noLayout = _useState12[0],\n      setNoLayout = _useState12[1];\n\n  var _useState13 = useState(query.slideshowOnly || false),\n      slideshowOnly = _useState13[0],\n      setSlideshowOnly = _useState13[1];\n\n  var _useState14 = useState(''),\n      vaultName = _useState14[0],\n      setVaultName = _useState14[1];\n\n  var _useState15 = useState(''),\n      vaultIPFS = _useState15[0],\n      setVaultIPFS = _useState15[1];\n\n  var _useState16 = useState(''),\n      vaultImageIPFS = _useState16[0],\n      setVaultImageIPFS = _useState16[1];\n\n  var _useState17 = useState(''),\n      vaultCiphertextV2 = _useState17[0],\n      setVaultCiphertextV2 = _useState17[1];\n\n  var _useState18 = useState(''),\n      vaultDesc = _useState18[0],\n      setVaultDesc = _useState18[1];\n\n  var _useState19 = useState(''),\n      vaultImage = _useState19[0],\n      setVaultImage = _useState19[1];\n\n  var _useState20 = useState(''),\n      ownedImage = _useState20[0],\n      setOwnedImage = _useState20[1];\n\n  var _useState21 = useState([]),\n      vaultValues = _useState21[0],\n      setVaultValues = _useState21[1];\n\n  var _useState22 = useState(false),\n      loadedValues = _useState22[0],\n      setLoadedValues = _useState22[1];\n\n  var _useState23 = useState([]),\n      vaultDataValues = _useState23[0],\n      setVaultDataValues = _useState23[1];\n\n  var _useState24 = useState([]),\n      attributes = _useState24[0],\n      setAttributes = _useState24[1];\n\n  var _useState25 = useState([]),\n      vaultAddresses = _useState25[0],\n      setVaultAddresses = _useState25[1];\n\n  var _useState26 = useState(false),\n      vaultPrivacy = _useState26[0],\n      setVaultPrivacy = _useState26[1];\n\n  var _useState27 = useState(0),\n      vaultTotalValue = _useState27[0],\n      setVaultTotalValue = _useState27[1];\n\n  var _useState28 = useState(null),\n      vaultChainId = _useState28[0],\n      setVaultChainId = _useState28[1];\n\n  var _useState29 = useState(null),\n      vaultChain = _useState29[0],\n      setVaultChain = _useState29[1];\n\n  var _useState30 = useState(null),\n      hash = _useState30[0],\n      setHash = _useState30[1];\n\n  var _useState31 = useState(''),\n      currCoin = _useState31[0],\n      setCurrCoin = _useState31[1];\n\n  var _useState32 = useState(''),\n      currAddr = _useState32[0],\n      setCurrAddr = _useState32[1];\n\n  var _useState33 = useState({\n    loaded: false\n  }),\n      state = _useState33[0],\n      setState = _useState33[1];\n\n  var _useState34 = useState(false),\n      mine = _useState34[0],\n      setMine = _useState34[1];\n\n  var _useState35 = useState(false),\n      claiming = _useState35[0],\n      setClaiming = _useState35[1];\n\n  var _useState36 = useState('claimed'),\n      status = _useState36[0],\n      setStatus = _useState36[1];\n\n  var _useState37 = useState(false),\n      sealed = _useState37[0],\n      setSealed = _useState37[1];\n\n  var _useState38 = useState(null),\n      claimedBy = _useState38[0],\n      setClaimedBy = _useState38[1];\n\n  var _useState39 = useState(''),\n      mnemonic = _useState39[0],\n      setMnemonic = _useState39[1];\n\n  var _useState40 = useState(''),\n      privKeyBTC = _useState40[0],\n      setPrivKeyBTC = _useState40[1];\n\n  var _useState41 = useState(''),\n      privKeyETH = _useState41[0],\n      setPrivKeyETH = _useState41[1];\n\n  var _useState42 = useState([]),\n      privValues = _useState42[0],\n      setKeyValues = _useState42[1];\n\n  var _useState43 = useState(false),\n      loadingApi = _useState43[0],\n      setLoadingApi = _useState43[1];\n\n  var _useState44 = useState(''),\n      decryptedEffect = _useState44[0],\n      setDecryptedEffect = _useState44[1];\n\n  var _useState45 = useState(false),\n      decryptedEffectRunning = _useState45[0],\n      setDecryptedEffectRunning = _useState45[1];\n\n  var _useState46 = useState(''),\n      decryptPassword = _useState46[0],\n      setDecryptPassword = _useState46[1];\n\n  var _useState47 = useState(false),\n      invalidVault = _useState47[0],\n      setInvalidVault = _useState47[1];\n\n  var _useState48 = useState(false),\n      hasCheckedNft = _useState48[0],\n      setHasCheckedNft = _useState48[1];\n\n  var _useState49 = useState(false),\n      accepting = _useState49[0],\n      setAccepting = _useState49[1];\n\n  var _useState50 = useState(false),\n      approving = _useState50[0],\n      setApproving = _useState50[1];\n\n  var _useState51 = useState(false),\n      acceptable = _useState51[0],\n      setAcceptable = _useState51[1];\n\n  var _useState52 = useState(''),\n      transferPassword = _useState52[0],\n      setTransferPassword = _useState52[1];\n\n  var _useState53 = useState(false),\n      showTransferPassword = _useState53[0],\n      setShowTransferPassword = _useState53[1];\n\n  var _useState54 = useState(false),\n      preTransfering = _useState54[0],\n      setPreTransfering = _useState54[1];\n\n  var _useState55 = useState(null),\n      transferToAddress = _useState55[0],\n      setTransferToAddress = _useState55[1];\n\n  var _useState56 = useState(false),\n      transfering = _useState56[0],\n      setTransfering = _useState56[1];\n\n  var _useState57 = useState(null),\n      owner = _useState57[0],\n      setOwner = _useState57[1]; // const [torus, setTorus] = useState(initTorus())\n\n\n  var _useState58 = useState(false),\n      live = _useState58[0],\n      setLive = _useState58[1];\n\n  var _useState59 = useState(null),\n      nonce = _useState59[0],\n      setNonce = _useState59[1];\n\n  var _useState60 = useState(null),\n      block = _useState60[0],\n      setBlock = _useState60[1];\n\n  var _useState61 = useState(null),\n      mintSignature = _useState61[0],\n      setMintSignature = _useState61[1];\n\n  var _useState62 = useState(null),\n      to = _useState62[0],\n      setTo = _useState62[1];\n\n  var _useState63 = useState(false),\n      showVerifyingSignature = _useState63[0],\n      setShowVerifyingSignature = _useState63[1];\n\n  var _useState64 = useState(false),\n      showMakingVaultMsg = _useState64[0],\n      setShowMakingVaultMsg = _useState64[1];\n\n  var _useState65 = useState(false),\n      minting = _useState65[0],\n      setMinting = _useState65[1];\n\n  var _useState66 = useState(false),\n      isCrowdSale = _useState66[0],\n      setIsCrowdSale = _useState66[1];\n\n  var _useState67 = useState(null),\n      alternateContractAddress = _useState67[0],\n      setAlternateContractAddress = _useState67[1];\n\n  var _useState68 = useState({\n    name: '',\n    image: '',\n    metadata: ''\n  }),\n      targetAsset = _useState68[0],\n      setTargetAsset = _useState68[1];\n\n  var _useState69 = useState({\n    name: '',\n    chain: '',\n    4: '',\n    1: '',\n    tokenId: {},\n    serialNumber: {\n      'hex': ''\n    }\n  }),\n      targetContract = _useState69[0],\n      setTargetContract = _useState69[1]; // const [transferImage, setTransferImage] = useState('')\n\n\n  var _useState70 = useState(false),\n      isCovalApproved = _useState70[0],\n      setIsCovalApproved = _useState70[1];\n\n  var _useState71 = useState(null),\n      decimals = _useState71[0],\n      setDecimals = _useState71[1];\n\n  var _useState72 = useState(null),\n      allowance = _useState72[0],\n      setAllowance = _useState72[1];\n\n  var _useState73 = useState(null),\n      balance = _useState73[0],\n      setBalance = _useState73[1];\n\n  var _useState74 = useState(null),\n      price = _useState74[0],\n      setPrice = _useState74[1];\n\n  var _useState75 = useState(false),\n      mineUnMinted = _useState75[0],\n      setMineUnMinted = _useState75[1];\n\n  var _useState76 = useState(false),\n      mintLockedForever = _useState76[0],\n      setMintLockedForever = _useState76[1];\n\n  var _useState77 = useState({}),\n      rawMetadata = _useState77[0],\n      setRawMetadata = _useState77[1];\n\n  var handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  var vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  var covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true);\n\n  var _useDisclosure = useDisclosure(),\n      isOpenAddrModal = _useDisclosure.isOpen,\n      onOpenAddrModal = _useDisclosure.onOpen,\n      onCloseAddrModal = _useDisclosure.onClose;\n\n  var _useDisclosure2 = useDisclosure(),\n      isOpenKeysModal = _useDisclosure2.isOpen,\n      onOpenKeysModal = _useDisclosure2.onOpen,\n      onCloseKeysModal = _useDisclosure2.onClose;\n\n  var _useDisclosure3 = useDisclosure(),\n      isOpenOfferModal = _useDisclosure3.isOpen,\n      onOpenOfferModal = _useDisclosure3.onOpen,\n      onCloseOfferModal = _useDisclosure3.onClose;\n\n  var _useDisclosure4 = useDisclosure(),\n      isOpen = _useDisclosure4.isOpen,\n      onToggle = _useDisclosure4.onToggle;\n\n  var _useDisclosure5 = useDisclosure(),\n      isManageAddressOpen = _useDisclosure5.isOpen,\n      onManageAddressToggle = _useDisclosure5.onToggle;\n\n  var _useDisclosure6 = useDisclosure(),\n      isAdvancedOpen = _useDisclosure6.isOpen,\n      onAdvancedToggle = _useDisclosure6.onToggle;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var transak;\n  var transferImage; // async function initTorus() {\n  //   let _torus = new TorusSdk({\n  //     baseUrl: `${window.location.origin}/serviceworker`,\n  //     enableLogging: true,\n  //     network: \"testnet\", // details for test net\n  //   });\n  //   await _torus.init({skipSw: true, skipInit: true, skipPrefetch: true})\n  //   console.log(\"Initialized Torus\")\n  //   return _torus\n  // }\n\n  var getVaultContract = function getVaultContract() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    //return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked());\n  };\n\n  var getCuratedContract = function getCuratedContract() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return new Contract(address, contractAddresses.erc1155Abi, library.getSigner(account).connectUnchecked());\n  };\n\n  var initializeTransak = function initializeTransak(address, coin) {\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',\n      // Your API Key\n      environment: 'PRODUCTION',\n      // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '',\n      // Your customer's wallet address\n      themeColor: '000000',\n      // App theme color\n      fiatCurrency: 'USD',\n      // INR/GBP\n      // fiatAmount: 350,\n      email: '',\n      // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    }); // To get all the events\n\n    transak.on(transak.ALL_EVENTS, function (data) {\n      console.log(data);\n    }); // This will trigger when the user marks payment is made.\n\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, function (orderData) {\n      console.log(orderData);\n      transak.close();\n    });\n    transak.init();\n  };\n\n  var checkLiveliness = function checkLiveliness(tokenId, cb) {\n    fetch(EMBLEM_API + '/liveliness', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        tokenId: tokenId\n      })\n    }).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context.sent;\n                setLive(data.live);\n                console.log(\"Liveliness check\", data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    return cb();\n  }; // const transferVault = () => {\n  //   setTransfering(true)\n  //   ;(emblemContract as Contract).transferFrom(account, transferToAddress, tokenId)\n  //   .then(({ hash }: { hash: string }) => {\n  //     setHash(hash)\n  //   })\n  //   .catch((error: ErrorWithCode) => {})\n  // }\n\n\n  var lazyMint = function lazyMint() {\n    library.getSigner(account).signMessage('Delayed Minting: ' + tokenId).then(function (signature) {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + '/lazyMint', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature\n        })\n      }).then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {\n          var data;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return response.json();\n\n                case 2:\n                  data = _context2.sent;\n\n                  if (!data.error && data.data) {\n                    setMintSignature(data.data.signature);\n                    setNonce(data.data.nonce);\n                    setBlock(data.data.block);\n                    setShowVerifyingSignature(true); // setCreating(true)\n\n                    setTimeout(function () {\n                      delayedMint(data.data.nonce, data.data.block, data.data.signature);\n                    }, 1500);\n                  } else {\n                    alert(data.error ? data.msg : 'unknown error');\n                  }\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    });\n  };\n\n  var delayedMint = function delayedMint(nonce, block, sig) {\n    // setCreating(true)\n    console.log(\"Delayed Minting\");\n    setShowVerifyingSignature(false);\n    setShowMakingVaultMsg(true);\n    setMinting(true);\n    var cipherTextHash = vaultAddresses.filter(function (address) {\n      return address.coin == \"ETH\";\n    })[0].address;\n    console.log(\"--------------------------------------------------------Delayed Minting\", account, tokenId, cipherTextHash, nonce, block, sig);\n    handlerContract.buyWithSignature2(account, tokenId, cipherTextHash, nonce, block, sig).then(function (_ref3) {\n      var hash = _ref3.hash;\n      setTimeout(function () {\n        setHash(hash);\n        setShowMakingVaultMsg(false);\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      console.log(\"AAAAAHHHHHH\", error);\n      setShowMakingVaultMsg(false); // setMinting(false)\n    });\n  };\n\n  var fireMetaMask = function fireMetaMask() {\n    console.log(mintPassword);\n    setAccepting(true);\n    getWitness(function (witness) {\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;\n      handlerContract.transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature).then(function (_ref4) {\n        var hash = _ref4.hash;\n        setTimeout(function () {\n          setHash(hash); // setShowMakingVaultMsg(true)\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })[\"catch\"](function (error) {\n        setAccepting(false);\n\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(\"tx failed.\", error);\n        } else {// setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      });\n    });\n  };\n\n  var addPreTransfer = function addPreTransfer() {\n    console.log('transferImage', \"0x\" + transferImage);\n    setPreTransfering(true);\n    handlerContract.addPreTransfer(tokenId, \"0x\" + transferImage).then(function (_ref5) {\n      var hash = _ref5.hash;\n      // setTimeout(() => {\n      setHash(hash);\n      console.log(\"Set Pre Transfering True\", preTransfering); // setShowMakingVaultMsg(true)\n      // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      if (error !== null && error !== void 0 && error.code) {\n        console.log(\"Error?\");\n        setPreTransfering(false);\n        setShowTransferPassword(false);\n        setTransferPassword('');\n      } else {// setShowTransferPassword(!showTransferPassword? true : false)\n        // setPreTransfering(false)\n        // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  var handleApproveForall = function handleApproveForall() {\n    setApproving(true);\n    emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(function (_ref6) {\n      var hash = _ref6.hash;\n      setTimeout(function () {\n        setHash(hash); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(\"tx failed.\", error);\n      } else {\n        setApproving(false); // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  var approveCovalFlow = function approveCovalFlow() {\n    setApproving(true);\n    covalContract.approve(contractAddresses.vaultHandler[chainId], '100000000000000').then(function (_ref7) {\n      var hash = _ref7.hash;\n      setHash(hash);\n    })[\"catch\"](function (error) {\n      if ((error === null || error === void 0 ? void 0 : error.code) == 4001) {\n        setApproving(false);\n      }\n    });\n  };\n\n  var deleteVault = function deleteVault() {\n    library.getSigner(account).signMessage('Delete: ' + tokenId).then(function (signature) {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + '/v2/delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then( /*#__PURE__*/function () {\n        var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response) {\n          var data;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return response.json();\n\n                case 2:\n                  data = _context3.sent;\n                  location.href = location.href.split(\"/\")[0] + \"/vaults\";\n\n                case 4:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref8.apply(this, arguments);\n        };\n      }());\n    });\n  };\n\n  var syncAccount = function syncAccount() {\n    var synched = localStorage.getItem(tokenId + '-v');\n\n    if (!synched) {\n      fetch(EMBLEM_API + '/sync/' + tokenId, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        }\n      }).then( /*#__PURE__*/function () {\n        var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(response) {\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  localStorage.setItem(tokenId + '-v', '1');\n                  return _context4.abrupt(\"return\", true);\n\n                case 2:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        return function (_x4) {\n          return _ref9.apply(this, arguments);\n        };\n      }())[\"catch\"](function () {\n        return false;\n      });\n    }\n  };\n\n  var getVault = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // syncAccount()\n              alert('getvault'); // !slideshowOnly ? loadCache() : null\n              // console.log(\"---------\",EMBLEM_API + '/meta/' + tokenId + '?experimental=true')\n\n              _context5.next = 3;\n              return fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true' + (clearCache ? '&_vercel_no_cache=1' : ''), {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  cc: clearCache ? 't' : ''\n                }\n              });\n\n            case 3:\n              responce = _context5.sent;\n              _context5.next = 6;\n              return responce.json();\n\n            case 6:\n              jsonData = _context5.sent;\n              setRawMetadata(jsonData);\n              setStates(jsonData); // console.log('vault response was ', jsonData)\n\n              if (jsonData.image_ipfs) {// getIPFSImage(jsonData.image_ipfs)\n              }\n\n              if (jsonData.collectionAddress) {\n                setIsCrowdSale(true);\n                setAlternateContractAddress(jsonData.collectionAddress);\n              }\n\n              if (!jsonData.name) {\n                setState({\n                  loaded: true\n                });\n                setInvalidVault(true);\n              } else {\n                // setStates(jsonData)\n                // !slideshowOnly? saveCache(jsonData) : null\n                setLoadingApi(false);\n                setInvalidVault(false);\n              }\n\n              !vaultPrivacy && !loadedValues ? getAllBalancesLive([], tokenId, function (v) {\n                if (v) {\n                  setVaultValues(v);\n                }\n              }) : null;\n\n              if (jsonData.targetContract) {// setTimeout(() => {\n                //   location.href = location.origin + '/nft2?id=' + jsonData.tokenId\n                // }, 500)\n              }\n\n            case 14:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function getVault() {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n\n  var getWitness = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return fetch(EMBLEM_API + '/witness/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  cc: 't',\n                  service: 'evmetadata',\n                  chainid: chainId.toString()\n                }\n              });\n\n            case 2:\n              responce = _context6.sent;\n              _context6.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context6.sent;\n\n              if (!jsonData.signature) {\n                _context6.next = 11;\n                break;\n              }\n\n              console.log('witness', jsonData);\n              return _context6.abrupt(\"return\", cb(jsonData));\n\n            case 11:\n              return _context6.abrupt(\"return\", cb(false));\n\n            case 12:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function getWitness(_x5) {\n      return _ref11.apply(this, arguments);\n    };\n  }(); // const getMoveableCollections= async () => {\n  //   if(vaultValues.length == 1 && attributes.length > 0){\n  //     let project = attributes.filter(item=>{return item.value == vaultValues[0].name})\n  //     if (project.length > 0) {\n  //         let projectName = project[0].trait_type\n  //         let _qualifiedCollection = curatedContracts.filter(item=>{return item.name == projectName})\n  //         if (_qualifiedCollection.length > 0) {            \n  //             setQualifiedCollection(_qualifiedCollection[0])\n  //         }\n  //     }      \n  //   } else {\n  //     alert(1)\n  //     setTimeout(()=>{getMoveableCollections()}, 1000)\n  //   }\n  // }\n\n\n  var setStates = function setStates(jsonData) {\n    alert('setStates');\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\" + framed : null;\n\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2); // console.log(\"ciphertextV2\", jsonData.ciphertextV2)\n    }\n\n    setMintLockedForever(jsonData.mintLocked && jsonData.mintLockBlock == 0);\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setOwnedImage(jsonData.ownedImage || null);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)) : null;\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(function (item) {\n      return item.trait_type === \"key\";\n    })) : null;\n    jsonData.attributes ? setAttributes(jsonData.attributes) : null; // getMoveableCollections()\n\n    setVaultAddresses(jsonData.addresses);\n    setVaultIPFS(jsonData.ipfs || null);\n    setVaultImageIPFS(jsonData.image_ipfs || null);\n    jsonData.targetAsset ? setTargetAsset(jsonData.targetAsset) : null;\n    jsonData.targetContract ? setTargetContract(jsonData.targetContract) : null;\n\n    if (jsonData.targetContract) {// setTimeout(() => {\n      //   location.href = location.origin + '/nft2?id=' + jsonData.targetContract.tokenId\n      // }, 500)\n    }\n\n    if (jsonData.live == false) {\n      checkLiveliness(jsonData.tokenId, function () {});\n    }\n\n    setLive(jsonData.live == false ? false : true);\n    setNonce(jsonData.nonce);\n    setMintSignature(jsonData.signature);\n    setTo(jsonData.to);\n    setVaultChain(jsonData.network);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : jsonData.network == \"xdai\" ? 100 : jsonData.network == \"bsc\" ? 56 : jsonData.network == \"fantom\" ? 250 : jsonData.network == \"bitcoin\" ? 0 : jsonData.network == \"aurora\" ? 1313161554 : 97);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    } // console.log('inside getstates. mine is ', mine)\n\n\n    setState({\n      loaded: true\n    });\n    var isPvt = jsonData.addresses.filter(function (item) {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n\n    if (jsonData.sealed) {\n      setSealed(true);\n    } else {\n      setSealed(false);\n    }\n\n    if (jsonData.values.length == 1 && jsonData.attributes.length > 0) {\n      var project = jsonData.attributes.filter(function (item) {\n        return item.value == jsonData.values[0].name;\n      });\n\n      if (project.length > 0) {\n        var projectName = project[0].trait_type;\n\n        var _qualifiedCollection = curatedContracts.filter(function (item) {\n          return item.name == projectName;\n        });\n\n        if (_qualifiedCollection.length > 0) {\n          setQualifiedCollection(_qualifiedCollection[0]);\n        }\n      }\n    }\n  }; // const getEthBalances = async (address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n  //   setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n  //   // console.log('get eth balances', jsonData.values)\n  //   return cb(jsonData.values)\n  // }\n  // const getBtcBalance = async (values, address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // setVaultValues(values.concat(jsonData.values))\n  //   return cb(values.concat(jsonData.values))\n  // }\n  // const getNftBalance = async (values, address, cb) => {\n  //   // console.log(address)\n  //   const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   if (jsonData.length > 0) {\n  //     // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n  //     return cb(values.concat(jsonData))\n  //   } else {\n  //     return cb(values)\n  //   }\n  // }\n\n\n  var getAllBalances = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(values, tokenId, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return fetch(EMBLEM_API + '/vault/balance/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context7.sent;\n              _context7.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context7.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context7.next = 11;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 11:\n              return _context7.abrupt(\"return\", cb(values));\n\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function getAllBalances(_x6, _x7, _x8) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalancesLive = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(values, tokenId, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!loadedValues) {\n                _context8.next = 2;\n                break;\n              }\n\n              return _context8.abrupt(\"return\", cb(false));\n\n            case 2:\n              setLoadedValues(true);\n              _context8.next = 5;\n              return fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true&_vercel_no_cache=1', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 5:\n              responce = _context8.sent;\n              _context8.next = 8;\n              return responce.json();\n\n            case 8:\n              jsonData = _context8.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context8.next = 14;\n                break;\n              }\n\n              return _context8.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 14:\n              return _context8.abrupt(\"return\", cb(values));\n\n            case 15:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function getAllBalancesLive(_x9, _x10, _x11) {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalancesByAddress = /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(values, ethAddress, btcAddress, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context9.sent;\n              _context9.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context9.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context9.next = 11;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 11:\n              return _context9.abrupt(\"return\", cb(values));\n\n            case 12:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function getAllBalancesByAddress(_x12, _x13, _x14, _x15) {\n      return _ref14.apply(this, arguments);\n    };\n  }();\n\n  var saveCache = function saveCache(vault) {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  var loadCache = function loadCache() {\n    console.log('cache');\n    var vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  var savePasswordToLocalStorage = function savePasswordToLocalStorage() {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  var loadPasswordFromLocalStorage = function loadPasswordFromLocalStorage() {\n    var storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  }; // const getKeys = async (signature, tokenId, cb) => {\n  //   var myHeaders = new Headers()\n  //   myHeaders.append('chainId', chainId.toString())\n  //   myHeaders.append('service', 'evmetadata')\n  //   myHeaders.append('Content-Type', 'application/json')\n  //   var raw = JSON.stringify({ signature: signature })\n  //   const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n  //     method: 'POST',\n  //     headers: myHeaders,\n  //     body: raw,\n  //     redirect: 'follow',\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log('getKeys response is ', jsonData)\n  //   return cb(jsonData)\n  // }\n\n\n  var getSignedJWT = /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainid', chainId.toString());\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature,\n                tokenId: tokenId\n              });\n              _context10.next = 6;\n              return fetch(SIG_API + '/sign', {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 6:\n              responce = _context10.sent;\n              _context10.next = 9;\n              return responce.json();\n\n            case 9:\n              jsonData = _context10.sent;\n              return _context10.abrupt(\"return\", cb(jsonData));\n\n            case 11:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function getSignedJWT(_x16, _x17, _x18) {\n      return _ref15.apply(this, arguments);\n    };\n  }();\n\n  function getTorusKeys(_x19, _x20, _x21) {\n    return _getTorusKeys.apply(this, arguments);\n  }\n\n  function _getTorusKeys() {\n    _getTorusKeys = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(verifierId, idToken, cb) {\n      var fetchNodeDetails, torusUtils, _yield$fetchNodeDetai, torusNodeEndpoints, torusIndexes, _yield$torusUtils$ret, privKey;\n\n      return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n        while (1) {\n          switch (_context30.prev = _context30.next) {\n            case 0:\n              // const fetchNodeDetails = new FetchNodeDetails({ network: \"https://solemn-restless-diagram.ropsten.discover.quiknode.pro/37fca8f14d3a42d9ec00f50a3f6adc404d5e2a04/\", proxyAddress: \"0x6258c9d6c12ed3edda59a1a6527e469517744aa7\" });\n              // const torusUtils = new TorusUtils({ enableOneKey: true, network: \"testnet\" });\n              fetchNodeDetails = new FetchNodeDetails({\n                network: \"mainnet\"\n              });\n              torusUtils = new TorusUtils({\n                enableOneKey: true,\n                network: \"mainnet\"\n              });\n              _context30.next = 4;\n              return fetchNodeDetails.getNodeDetails({\n                verifier: 'tor-us-signer-vercel',\n                verifierId: verifierId\n              });\n\n            case 4:\n              _yield$fetchNodeDetai = _context30.sent;\n              torusNodeEndpoints = _yield$fetchNodeDetai.torusNodeEndpoints;\n              torusIndexes = _yield$fetchNodeDetai.torusIndexes;\n              _context30.next = 9;\n              return torusUtils.retrieveShares(torusNodeEndpoints, torusIndexes, 'tor-us-signer-vercel', {\n                verifier_id: verifierId\n              }, idToken);\n\n            case 9:\n              _yield$torusUtils$ret = _context30.sent;\n              privKey = _yield$torusUtils$ret.privKey;\n              return _context30.abrupt(\"return\", cb({\n                privateKey: privKey\n              }));\n\n            case 12:\n            case \"end\":\n              return _context30.stop();\n          }\n        }\n      }, _callee30);\n    }));\n    return _getTorusKeys.apply(this, arguments);\n  }\n\n  var addAddress = /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(signature, tokenId, coin, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature,\n                coin: coin\n              });\n              _context11.next = 7;\n              return fetch(EMBLEM_API + '/address/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context11.sent;\n              _context11.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context11.sent;\n              return _context11.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    return function addAddress(_x22, _x23, _x24, _x25) {\n      return _ref16.apply(this, arguments);\n    };\n  }();\n\n  var decryptEmbed = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature\n              });\n              _context12.next = 7;\n              return fetch(EMBLEM_API + '/embed/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context12.sent;\n              _context12.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context12.sent;\n              return _context12.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    return function decryptEmbed(_x26, _x27, _x28) {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n      var owned, _owner, finish, _finish;\n\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _finish = function _finish3() {\n                _finish = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n                  var acceptable, isApproved;\n                  return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n                    while (1) {\n                      switch (_context13.prev = _context13.next) {\n                        case 0:\n                          _context13.next = 2;\n                          return handlerContract.getPreTransfer(tokenId);\n\n                        case 2:\n                          acceptable = _context13.sent;\n\n                          if (!targetContract[chainId]) {\n                            _context13.next = 9;\n                            break;\n                          }\n\n                          _context13.next = 6;\n                          return emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId]);\n\n                        case 6:\n                          isApproved = _context13.sent;\n                          _context13.next = 12;\n                          break;\n\n                        case 9:\n                          _context13.next = 11;\n                          return emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n\n                        case 11:\n                          isApproved = _context13.sent;\n\n                        case 12:\n                          setApproved(isApproved);\n                          setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\");\n                          setOwner(_owner);\n                          setMine(_owner === account || to === account && _owner === \"0x0000000000000000000000000000000000000000\");\n                          setMineUnMinted(to === account && _owner === \"0x0000000000000000000000000000000000000000\");\n                          loadPasswordFromLocalStorage(); // alert(to == account)\n\n                        case 18:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }\n                  }, _callee13);\n                }));\n                return _finish.apply(this, arguments);\n              };\n\n              finish = function _finish2() {\n                return _finish.apply(this, arguments);\n              };\n\n              // alert(0)\n              console.log(\"Contract states\");\n              owned = false;\n              _context14.prev = 4;\n\n              if (!targetContract[chainId]) {\n                _context14.next = 14;\n                break;\n              }\n\n              console.log(\"Checking owner wth targetContract\");\n              emblemContract = getCuratedContract(targetContract[chainId]);\n              _context14.next = 10;\n              return emblemContract.getOwnerOfSerial(targetContract.serialNumber);\n\n            case 10:\n              _owner = _context14.sent;\n              console.log(\"--------------------------- owner\", _owner, approved, account, contractAddresses.vaultHandlerV8[chainId]);\n              _context14.next = 22;\n              break;\n\n            case 14:\n              if (!live) {\n                _context14.next = 20;\n                break;\n              }\n\n              _context14.next = 17;\n              return emblemContract.ownerOf(tokenId);\n\n            case 17:\n              _context14.t0 = _context14.sent;\n              _context14.next = 21;\n              break;\n\n            case 20:\n              _context14.t0 = \"0x0000000000000000000000000000000000000000\";\n\n            case 21:\n              _owner = _context14.t0;\n\n            case 22:\n              _context14.t1 = setDecimals;\n              _context14.next = 25;\n              return covalContract.decimals();\n\n            case 25:\n              _context14.t2 = _context14.sent;\n              (0, _context14.t1)(_context14.t2);\n              _context14.t3 = setAllowance;\n              _context14.next = 30;\n              return covalContract.allowance(account, contractAddresses.vaultHandler[chainId]).then(function (balance) {\n                return balance.toString();\n              });\n\n            case 30:\n              _context14.t4 = _context14.sent;\n              (0, _context14.t3)(_context14.t4);\n              _context14.t5 = setBalance;\n              _context14.next = 35;\n              return covalContract.balanceOf(account).then(function (balance) {\n                return balance.toString();\n              });\n\n            case 35:\n              _context14.t6 = _context14.sent;\n              (0, _context14.t5)(_context14.t6);\n              _context14.t7 = setPrice;\n              _context14.next = 40;\n              return handlerContract.price().then(function (balance) {\n                return balance.toString();\n              });\n\n            case 40:\n              _context14.t8 = _context14.sent;\n              (0, _context14.t7)(_context14.t8);\n\n              // console.log(\n              //   'balance',\n              //   balance,\n              //   'allowance',\n              //   allowance,\n              //   'price',\n              //   price,\n              //   Number(allowance) >= Number(price),\n              //   Number(balance) > Number(price)\n              // )\n              if (Number(allowance) >= Number(price)) {\n                // alert(true)\n                setIsCovalApproved(true);\n              } else {\n                // alert(false)\n                setIsCovalApproved(false);\n              }\n\n              finish();\n              _context14.next = 51;\n              break;\n\n            case 46:\n              _context14.prev = 46;\n              _context14.t9 = _context14[\"catch\"](4);\n              console.log(\"-------\", _context14.t9); // approveCovalFlow()\n\n              _owner = \"0x0000000000000000000000000000000000000000\";\n              finish();\n\n            case 51:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, null, [[4, 46]]);\n    }));\n\n    return function getContractStates() {\n      return _ref18.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    console.log(\"mine?\", mine);\n    console.log(\"claiming?\", claiming);\n    console.log(\"accepting?\", accepting);\n    console.log(\"acceptable\", acceptable);\n    console.log(\"qualified\", qualifiedCollection);\n    console.log(\"owner\", owner);\n  });\n\n  var hasAddress = function hasAddress(coin) {\n    console.log(coin, vaultAddresses.filter(function (address) {\n      return address.coin == coin;\n    }).length > 0);\n    return vaultAddresses.filter(function (address) {\n      return address.coin == coin;\n    }).length > 0;\n  };\n\n  var onRenew = /*#__PURE__*/function () {\n    var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(name) {\n      return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              library.getSigner(account).signMessage('Renew: ' + tokenId).then(function (signature) {\n                var address = vaultAddresses.filter(function (address) {\n                  return address.coin == 'NMC';\n                })[0].address;\n                console.log('signature', signature, name);\n                fetch(EMBLEM_API + '/nmc/renew/' + address, {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    service: 'evmetadata',\n                    chainid: chainId.toString()\n                  },\n                  body: JSON.stringify({\n                    \"tokenId\": tokenId,\n                    \"signature\": signature,\n                    \"name\": name\n                  })\n                }).then( /*#__PURE__*/function () {\n                  var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(response) {\n                    var data;\n                    return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n                      while (1) {\n                        switch (_context15.prev = _context15.next) {\n                          case 0:\n                            _context15.next = 2;\n                            return response.json();\n\n                          case 2:\n                            data = _context15.sent;\n                            console.log(\"Requested Renew\", data);\n\n                          case 4:\n                          case \"end\":\n                            return _context15.stop();\n                        }\n                      }\n                    }, _callee15);\n                  }));\n\n                  return function (_x30) {\n                    return _ref20.apply(this, arguments);\n                  };\n                }());\n              });\n\n            case 1:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16);\n    }));\n\n    return function onRenew(_x29) {\n      return _ref19.apply(this, arguments);\n    };\n  }();\n\n  var handleSign = /*#__PURE__*/function () {\n    var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n      var serialNumber;\n      return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              if (!targetContract[chainId]) {\n                _context19.next = 5;\n                break;\n              }\n\n              emblemContract = getCuratedContract(targetContract[chainId]);\n              _context19.next = 4;\n              return emblemContract.getSerial(targetContract.tokenId, 0);\n\n            case 4:\n              serialNumber = _context19.sent;\n\n            case 5:\n              library.getSigner(account).signMessage('Claim: ' + (targetContract[chainId] ? serialNumber : tokenId)).then(function (signature) {\n                setState({\n                  loaded: false\n                });\n\n                if (mineUnMinted && status != \"claimed\" && !mintLockedForever) {\n                  setMintLockedForever(true);\n                }\n\n                getSignedJWT(signature, tokenId, function (token) {\n                  getTorusKeys(tokenId, token.token, /*#__PURE__*/function () {\n                    var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(keys) {\n                      var bytes, payload;\n                      return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n                        while (1) {\n                          switch (_context18.prev = _context18.next) {\n                            case 0:\n                              try {\n                                bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey);\n                                payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n                                setKeyValues(payload.values);\n                                setMnemonic(payload.phrase);\n                                vaultAddresses.forEach( /*#__PURE__*/function () {\n                                  var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(address) {\n                                    return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n                                      while (1) {\n                                        switch (_context17.prev = _context17.next) {\n                                          case 0:\n                                            if (!(address.coin == 'STX')) {\n                                              _context17.next = 6;\n                                              break;\n                                            }\n\n                                            _context17.next = 3;\n                                            return getSTXKey(address, payload.phrase);\n\n                                          case 3:\n                                            address.key = _context17.sent;\n                                            _context17.next = 7;\n                                            break;\n\n                                          case 6:\n                                            address.key = window.phrasePathToKey(payload.phrase, address.path);\n\n                                          case 7:\n                                            if (address.coin == 'BTC') setPrivKeyBTC(address.key);\n                                            if (address.coin == 'ETH') setPrivKeyETH(address.key);\n\n                                          case 9:\n                                          case \"end\":\n                                            return _context17.stop();\n                                        }\n                                      }\n                                    }, _callee17);\n                                  }));\n\n                                  return function (_x32) {\n                                    return _ref23.apply(this, arguments);\n                                  };\n                                }());\n                              } catch (err) {\n                                // alert('out of sync')\n                                // await syncAccount()\n                                alert(err);\n                                setTimeout(function () {\n                                  location.href = location.href;\n                                }, 2000);\n                              } // setKeyValues(vaultAddresses)\n\n\n                              setState({\n                                loaded: true\n                              });\n                              onOpenKeysModal();\n\n                            case 3:\n                            case \"end\":\n                              return _context18.stop();\n                          }\n                        }\n                      }, _callee18);\n                    }));\n\n                    return function (_x31) {\n                      return _ref22.apply(this, arguments);\n                    };\n                  }());\n                }); // }\n              });\n\n            case 6:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19);\n    }));\n\n    return function handleSign() {\n      return _ref21.apply(this, arguments);\n    };\n  }();\n\n  var getSTXKey = /*#__PURE__*/function () {\n    var _ref24 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(address, phrase) {\n      var wallet, account;\n      return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.next = 2;\n              return generateWallet({\n                secretKey: phrase,\n                password: ''\n              });\n\n            case 2:\n              wallet = _context20.sent;\n              console.log('------ stacks account -', wallet.accounts[0]);\n              account = wallet.accounts[0];\n              address.key = account.stxPrivateKey;\n              return _context20.abrupt(\"return\", address.key);\n\n            case 7:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20);\n    }));\n\n    return function getSTXKey(_x33, _x34) {\n      return _ref24.apply(this, arguments);\n    };\n  }();\n\n  var handleHideAsset = /*#__PURE__*/function () {\n    var _ref25 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(coin) {\n      return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              library.getSigner(account).signMessage('HideAsset: ' + tokenId).then(function (signature) {\n                console.log(\"----------------------------------------------------------------\", signature);\n                console.log(coin.name, coin.coin, coin.address);\n                hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, function () {\n                  console.log(\"Done hiding coin and getting new balances\");\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21);\n    }));\n\n    return function handleHideAsset(_x35) {\n      return _ref25.apply(this, arguments);\n    };\n  }();\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/' + tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin ? coin : null,\n        \"address\": address ? address : null,\n        \"name\": name ? name : null,\n        \"signature\": signature ? signature : null\n      })\n    }).then( /*#__PURE__*/function () {\n      var _ref26 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context22.sent;\n                console.log(\"-------\", data);\n                getAllBalances([], tokenId, function (values) {\n                  setVaultValues(values);\n                  return cb();\n                });\n\n              case 5:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22);\n      }));\n\n      return function (_x36) {\n        return _ref26.apply(this, arguments);\n      };\n    }());\n  }\n\n  var handleAddressSign = /*#__PURE__*/function () {\n    var _ref27 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(coin) {\n      return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              library.getSigner(account).signMessage('Address: ' + tokenId).then(function (signature) {\n                addAddress(signature, tokenId, coin, function (result) {\n                  getVault();\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee23);\n    }));\n\n    return function handleAddressSign(_x37) {\n      return _ref27.apply(this, arguments);\n    };\n  }();\n\n  var handleOwnedEmbed = /*#__PURE__*/function () {\n    var _ref28 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n      return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              library.getSigner(account).signMessage('Embed: ' + tokenId).then(function (signature) {\n                decryptEmbed(signature, tokenId, function (result) {\n                  setVaultImage(result.ownedImage);\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, _callee24);\n    }));\n\n    return function handleOwnedEmbed() {\n      return _ref28.apply(this, arguments);\n    };\n  }();\n\n  var handleMove = /*#__PURE__*/function () {\n    var _ref29 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {\n      return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              // setMoving(true)\n              // getMoveableCollections()\n              console.log('---------- qualified move', qualifiedCollection);\n              fetch(EMBLEM_V2_API + '/v2/move-vault/', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  chainid: chainId.toString()\n                },\n                body: JSON.stringify({\n                  \"chainId\": 1,\n                  \"from\": account,\n                  \"sourceContract\": {\n                    \"1\": contractAddresses.emblemVault[vaultChainId]\n                  },\n                  \"targetContract\": {\n                    \"1\": qualifiedCollection[chainId],\n                    \"name\": qualifiedCollection.name,\n                    \"chain\": qualifiedCollection.chain\n                  },\n                  \"targetAsset\": {\n                    \"name\": vaultValues[0].name\n                  },\n                  \"amount\": 1,\n                  \"tokenId\": tokenId\n                })\n              }).then( /*#__PURE__*/function () {\n                var _ref30 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(response) {\n                  var data;\n                  return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n                    while (1) {\n                      switch (_context25.prev = _context25.next) {\n                        case 0:\n                          _context25.next = 2;\n                          return response.json();\n\n                        case 2:\n                          data = _context25.sent;\n\n                          // console.log(\"------------- \",\"0x82c7a8f707110f5fbb16184a5933e9f78a34c6ab\", \"0xDCA91409018ea80B71d21E818f00e76072969861\", \"3523401\",data.tokenId, data.nonce, data.sig, \"0x0000000000000000000000000000000000000000000000000000000000000000\")\n                          if (data.sig) {\n                            vaultHandlerContract.moveVault(contractAddresses.emblemVault[vaultChainId], qualifiedCollection[chainId], tokenId, data.tokenId, data.nonce, data.sig, data.serial).then(function (hash) {\n                              setHash(hash);\n                              setMoving(false);\n                            });\n                          }\n\n                        case 4:\n                        case \"end\":\n                          return _context25.stop();\n                      }\n                    }\n                  }, _callee25);\n                }));\n\n                return function (_x38) {\n                  return _ref30.apply(this, arguments);\n                };\n              }());\n\n            case 2:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee26);\n    }));\n\n    return function handleMove() {\n      return _ref29.apply(this, arguments);\n    };\n  }();\n\n  var handleClaim = /*#__PURE__*/function () {\n    var _ref31 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {\n      return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              if (targetContract[chainId]) {\n                // emblemContract = getCuratedContract(targetContract[chainId])\n                // let tokenId = await emblemContract.getTokenIdForSerialNumber(targetContract.serialNumber)\n                vaultHandlerContract.claim(targetContract[chainId], targetContract.tokenId).then(function (_ref32) {\n                  var hash = _ref32.hash;\n                  setClaiming(true);\n                  setTimeout(function () {\n                    setHash(hash);\n                  }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n                });\n              } else {\n                handlerContract.claimOnChain(tokenId).then(function (_ref33) {\n                  var hash = _ref33.hash;\n                  setClaiming(true);\n                  setTimeout(function () {\n                    setHash(hash);\n                  }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n                });\n              }\n\n            case 1:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, _callee27);\n    }));\n\n    return function handleClaim() {\n      return _ref31.apply(this, arguments);\n    };\n  }();\n\n  var pingClaimLogs = function pingClaimLogs(cb) {\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId=' + chainId.toString() + '_vercel_no_cache=1', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        cc: 't'\n      }\n    }).then( /*#__PURE__*/function () {\n      var _ref34 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                _context28.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context28.sent;\n                console.log(\"Log check\", data);\n                return _context28.abrupt(\"return\", cb());\n\n              case 5:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28);\n      }));\n\n      return function (_x39) {\n        return _ref34.apply(this, arguments);\n      };\n    }());\n  };\n\n  var startDecryptEffect = /*#__PURE__*/function () {\n    var _ref35 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29() {\n      var theLetters, ctnt, speed, increment, clen, si, stri, block, fixed, nextFrame;\n      return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n        while (1) {\n          switch (_context29.prev = _context29.next) {\n            case 0:\n              nextFrame = function _nextFrame(pos) {\n                for (var i = 0; i < clen - stri; i++) {\n                  //Random number\n                  var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n                  var letter = theLetters.charAt(num);\n                  block = block + letter;\n                }\n\n                if (si == increment - 1) {\n                  stri++;\n                }\n\n                if (si == increment) {\n                  // Add a letter;\n                  // every speed*10 ms\n                  fixed = fixed + ctnt.charAt(stri - 1);\n                  si = 0;\n                } // $(\"#output\").html(fixed + block);\n\n\n                setDecryptedEffect(fixed + block);\n                block = '';\n              };\n\n              if (!decryptedEffectRunning) {\n                _context29.next = 3;\n                break;\n              }\n\n              return _context29.abrupt(\"return\");\n\n            case 3:\n              setDecryptedEffectRunning(true);\n              theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n              ctnt = 'Decrypting'; // Your text goes here\n\n              speed = 5; // ms per frame\n\n              increment = 8; // frames per step. Must be >2\n\n              clen = ctnt.length;\n              si = 0;\n              stri = 0;\n              block = '';\n              fixed = '';\n\n              (function rustle(i) {\n                setTimeout(function () {\n                  if (--i) {\n                    rustle(i);\n                  } else {\n                    setDecryptedEffectRunning(false);\n                  }\n\n                  nextFrame(i);\n                  si = si + 1;\n                }, speed);\n              })(clen * increment + 1);\n\n            case 14:\n            case \"end\":\n              return _context29.stop();\n          }\n        }\n      }, _callee29);\n    }));\n\n    return function startDecryptEffect() {\n      return _ref35.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    console.log('----');\n    getVault();\n  }, []);\n  useEffect(function () {\n    account && chainId && vaultChainId && chainId == vaultChainId || query.noLayout && query.noLayout == 'true' || query.slideshowOnly && query.slideshowOnly == 'true' ? getContractStates() : null;\n  });\n\n  function splitDescription(words) {\n    var desc = words ? words.split('\\n\\n\\n\\n') : [\" \"];\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    console.log(vaultAddresses);\n    var ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      var ethAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'ETH';\n      })[0].address;\n      var btcAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'BTC';\n      })[0].address;\n      console.log(\"SUCCESS\", vaultAddresses);\n      getAllBalancesByAddress([], ethAddress, btcAddress, function (values) {\n        setVaultValues(values);\n      }); // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {\n      console.log('WTF', err);\n    }\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\");\n    return vaultAddresses;\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(function (item) {\n      if (item.address.includes('private')) {\n        var cipherText = item.address.replace('private:', '');\n        item.address = decrypt(cipherText, key);\n      }\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  function visitOpenSeaLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + (vaultChainId == 137 ? 'matic/' : '') + (alternateContractAddress ? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) + '/' + tokenId, '_blank');\n  }\n\n  function visitLooksRareLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'looksrare.org/collections/' + (vaultChainId == 137 ? 'matic/' : '') + (alternateContractAddress ? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) + '/' + tokenId, '_blank');\n  }\n\n  function visitArcadeLink() {\n    window.open(\"https://app.arcade.xyz/terms/asset/\".concat(targetContract[vaultChainId] ? targetContract[vaultChainId] : contractAddresses.emblemVault[vaultChainId], \"/\").concat(tokenId), '_blank');\n  }\n\n  {\n    alternateContractAddress ? emblemContract = getVaultContract(alternateContractAddress ? alternateContractAddress : null) : null;\n  }\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1280,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1281,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1282,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1283,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1284,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1285,\n      columnNumber: 9\n    }\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: \"\\n              // $(\\\".NFT\\\").tilt({    \\n              //     maxTilt: 3\\n              // });\\n              $(\\\".NFT\\\").trigger('mouseenter');\\n              $(\\\".NFT\\\").trigger('mouseclick'), '.NFT';\\n              if (localStorage.getItem(\\\"darkMode\\\") == 'false') {\\n                localStorage.setItem(\\\"darkMode\\\",\\\"true\\\"); location.href = location.href\\n              }\\n              \"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1286,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1301,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    privValues: privValues,\n    addresses: vaultAddresses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1303,\n      columnNumber: 7\n    }\n  }), showOffer ? __jsx(OfferModal, {\n    isOpen: isOpenOfferModal,\n    onClose: onCloseOfferModal,\n    tokenId: tokenId,\n    mine: mine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1313,\n      columnNumber: 9\n    }\n  }) : null, __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1322,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1323,\n      columnNumber: 9\n    }\n  }), loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1324,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault && !slideshowOnly ? __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1326,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    className: \"NFT\",\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1327,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"blue.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1338,\n      columnNumber: 17\n    }\n  }, \"Vault Network: \", CHAIN_ID_NAMES[vaultChainId]), __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\" // textTransform=\"uppercase\"\n    ,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1367,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null), __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1380,\n      columnNumber: 17\n    }\n  }, vaultValues.length && vaultValues.filter(function (item) {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultImage,\n    items: vaultValues.map(function (value) {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1382,\n      columnNumber: 23\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1384,\n      columnNumber: 23\n    }\n  }), mine && ownedImage ? __jsx(Button, {\n    onClick: function onClick() {\n      handleOwnedEmbed();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1388,\n      columnNumber: 21\n    }\n  }, \"(OWNED) Show Full Embed\") : null), __jsx(Stack, {\n    align: \"center\",\n    maxWidth: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1391,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    maxWidth: \"400px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1392,\n      columnNumber: 19\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1393,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    fontSize: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1394,\n      columnNumber: 23\n    }\n  }, vaultChainId == chainId ? __jsx(Link, {\n    href: \"./vaults?address=\" + owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1396,\n      columnNumber: 25\n    }\n  }, \"Owner: \", owner) : null), __jsx(Text, {\n    overflowWrap: \"anywhere\",\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1401,\n      columnNumber: 23\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1402,\n      columnNumber: 25\n    }\n  }))))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1408,\n      columnNumber: 17\n    }\n  }, __jsx(Tabs, {\n    isFitted: true,\n    variant: \"enclosed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1409,\n      columnNumber: 17\n    }\n  }, __jsx(TabList, {\n    mb: \"1em\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1410,\n      columnNumber: 19\n    }\n  }, __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1411,\n      columnNumber: 21\n    }\n  }, \"Balances\"), __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1412,\n      columnNumber: 21\n    }\n  }, \"Attributes\")), __jsx(TabPanels, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1414,\n      columnNumber: 19\n    }\n  }, __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1415,\n      columnNumber: 21\n    }\n  }, vaultPrivacy ? __jsx(Box, {\n    mb: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1417,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1418,\n      columnNumber: 27\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: function onChange(e) {\n      return tryDecrypt(e.target.value);\n    },\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1421,\n      columnNumber: 27\n    }\n  })) : __jsx(Box, {\n    d: \"flex\",\n    backgroundColor: colorMode == \"light\" ? \"gray.100\" : \"gray.700\",\n    alignItems: \"baseline\",\n    className: \"coin-balance-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1429,\n      columnNumber: 25\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1430,\n      columnNumber: 27\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    mt: 2,\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1431,\n      columnNumber: 29\n    }\n  }, \"Current Contents:  \", __jsx(\"button\", {\n    onClick: function onClick() {\n      getAllBalancesLive([], tokenId, function (v) {\n        setLoadedValues(false);\n        setVaultValues(v);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1433,\n      columnNumber: 50\n    }\n  }, \" [Refresh Balances]\")), __jsx(Text, {\n    as: \"p\",\n    color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1442,\n      columnNumber: 29\n    }\n  }, \"$\", Number(vaultTotalValue.toFixed(4)).toLocaleString()), vaultValues.length ? vaultValues.map(function (coin) {\n    return __jsx(Stack, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1446,\n        columnNumber: 35\n      }\n    }, __jsx(CoinBalance, {\n      colorMode: colorMode,\n      coin: coin,\n      mine: status === 'claimed' && claimedBy === account || mine,\n      onRenew: onRenew,\n      hideAsset: handleHideAsset,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1447,\n        columnNumber: 37\n      }\n    }));\n  }) : __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1451,\n      columnNumber: 34\n    }\n  }), vaultDataValues.length ? vaultDataValues.map(function (data) {\n    return __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1455,\n        columnNumber: 35\n      }\n    }, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1459,\n      columnNumber: 31\n    }\n  }, \"Nothing in here! Fill 'er up!\") : null))), __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1465,\n      columnNumber: 21\n    }\n  }, __jsx(Attributes, {\n    colorMode: colorMode,\n    attributes: attributes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1466,\n      columnNumber: 23\n    }\n  })))), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1472,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1473,\n      columnNumber: 23\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1474,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1475,\n      columnNumber: 27\n    }\n  }, \"Deposit Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1476,\n      columnNumber: 27\n    }\n  }, vaultAddresses.map(function (addr) {\n    return __jsx(Button, {\n      className: \"address_nft_button\",\n      ml: 2,\n      mt: 2,\n      \"font-weight\": \"100 !important\",\n      key: addr.address,\n      onClick: function onClick() {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1479,\n        columnNumber: 33\n      }\n    }, addr.coin == 'ETH' ? addr.coin + '/EVM' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP' : addr.coin == 'TAP' ? 'TAPROOT' : addr.coin);\n  })), (mine || status === 'claimed') && vaultAddresses.length < 12 ? __jsx(React.Fragment, null, __jsx(\"button\", {\n    className: \"nft_button\",\n    onClick: function onClick() {\n      onManageAddressToggle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1499,\n      columnNumber: 29\n    }\n  }, \"Manage Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1502,\n      columnNumber: 29\n    }\n  }, __jsx(Collapse, {\n    isOpen: isManageAddressOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1503,\n      columnNumber: 31\n    }\n  }, !hasAddress('DOGE') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('DOGE');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1505,\n      columnNumber: 35\n    }\n  }, \"Add DOGE\") : null, !hasAddress('DGB') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('DGB');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1508,\n      columnNumber: 35\n    }\n  }, \"Add Digibyte\") : null, !hasAddress('NMC') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('NMC');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1511,\n      columnNumber: 35\n    }\n  }, \"Add Namecoin\") : null, !hasAddress('LTC') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('LTC');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1514,\n      columnNumber: 35\n    }\n  }, \"Add Litecoin\") : null, !hasAddress('MONA') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('MONA');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1517,\n      columnNumber: 35\n    }\n  }, \"Add Mona\") : null, !hasAddress('TEZOS') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('TEZOS');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1520,\n      columnNumber: 35\n    }\n  }, \"Add Tezos\") : null, !hasAddress('SOLANA') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('SOLANA');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1523,\n      columnNumber: 35\n    }\n  }, \"Add Solana\") : null, !hasAddress('STX') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('STX');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1526,\n      columnNumber: 35\n    }\n  }, \"Add Stacks\") : null, !hasAddress('TAP') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('TAP');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1529,\n      columnNumber: 35\n    }\n  }, \"Add Taproot\") : null))) : null))) : null, !(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 137) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1541,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: mine && vaultChainId == 1 ? \"33%\" : vaultChainId == 137 ? \"100%\" : \"50%\",\n    m: 2.5,\n    mb: 5,\n    onClick: function onClick() {\n      visitOpenSeaLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1543,\n      columnNumber: 25\n    }\n  }, \"Opensea\"), vaultChainId == 1 ? __jsx(Button, {\n    className: \"nft_button\",\n    width: mine ? \"33%\" : \"50%\",\n    m: 2.5,\n    mb: 5,\n    onClick: function onClick() {\n      visitLooksRareLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1553,\n      columnNumber: 27\n    }\n  }, \"LooksRare\") : null, mine && vaultChainId == 1 ? __jsx(Button, {\n    className: \"nft_button\",\n    width: \"33%\",\n    m: 2.5,\n    mb: 5,\n    onClick: function onClick() {\n      visitArcadeLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1565,\n      columnNumber: 28\n    }\n  }, \"Arcade\") : null, showOffer ? __jsx(Button, {\n    className: \"\",\n    onClick: function onClick() {\n      onOpenOfferModal();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1576,\n      columnNumber: 27\n    }\n  }, mine ? 'My Offers' : 'Make an Offer', \" (NFT\\xB2NFT)\") : null) : null, isCovalApproved ? __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1584,\n      columnNumber: 21\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    p: 1,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1585,\n      columnNumber: 23\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1586,\n      columnNumber: 25\n    }\n  }, \"Creating a vault spends \", price * Math.pow(10, -decimals), \" Coval from your wallet\"))) : null, mine && !approved ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1593,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    backgroundColor: \"#02b402\",\n    color: \"black !important\",\n    fontWeight: \"bold !important\",\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: function onClick() {\n      return handleApproveForall();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1594,\n      columnNumber: 23\n    }\n  }, \" Approve Minting\"))) : null, !live && mine && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg && approved && !isCovalApproved ? __jsx(React.Fragment, null, __jsx(Button, {\n    backgroundColor: \"#02b402\",\n    color: \"black !important\",\n    fontWeight: \"bold !important\",\n    width: \"100%\",\n    mt: 5,\n    onClick: approveCovalFlow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1608,\n      columnNumber: 25\n    }\n  }, \"Approve Spending Coval\")) : null, (showTransferPassword || mintPassword) && acceptable ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1616,\n      columnNumber: 23\n    }\n  }, __jsx(Link, {\n    href: location.protocol + '//' + location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1617,\n      columnNumber: 25\n    }\n  }, \"Copy Gift Link\"), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1618,\n      columnNumber: 25\n    }\n  }, \"Password: \", transferPassword || mintPassword)) : null, acceptable && claimedBy !== account ? __jsx(React.Fragment, null, __jsx(Button, {\n    mt: 2,\n    width: \"100%\",\n    onClick: function onClick() {\n      fireMetaMask();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1623,\n      columnNumber: 25\n    }\n  }, \"Accept\"), __jsx(Input, {\n    mt: 2,\n    type: \"password\",\n    id: \"mintPassword\",\n    minLength: 3,\n    maxLength: 200,\n    value: mintPassword || '',\n    onChange: function onChange(e) {\n      console.log('grrr', e.target.value, mintPassword);\n      setMintPassword(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1624,\n      columnNumber: 25\n    }\n  })) : null, !live && mine && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg && approved && isCovalApproved ? __jsx(React.Fragment, null, __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    isDisabled: !vaultPrivacy && vaultValues.length < 1 || mintLockedForever,\n    onClick: lazyMint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1644,\n      columnNumber: 27\n    }\n  }, mintLockedForever ? 'Mint Locked - keys accessed before mint' : !vaultPrivacy && vaultValues.length < 1 ? 'Please load the vault to mint' : 'Mint Vault')) : null, !(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed && approved && live ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1649,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      handleClaim();\n    },\n    isDisabled: claiming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1650,\n      columnNumber: 23\n    }\n  }, claiming ? 'Claiming ...' : 'Unlock Vault (Get Private Keys)')) : vaultChainId === chainId && (status == 'claimed' || mintLockedForever) && (claimedBy === account || mine) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1661,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1662,\n      columnNumber: 23\n    }\n  }, \"Get Keys\")) : null, __jsx(Stack, {\n    mt: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1667,\n      columnNumber: 21\n    }\n  }, __jsx(React.Fragment, null, __jsx(\"button\", {\n    className: \"nft_button\",\n    onClick: function onClick() {\n      onAdvancedToggle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1669,\n      columnNumber: 25\n    }\n  }, \"Advanced Operations\"), __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1672,\n      columnNumber: 25\n    }\n  }, __jsx(Collapse, {\n    width: \"100%\",\n    isOpen: isAdvancedOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1673,\n      columnNumber: 27\n    }\n  }, mineUnMinted && status != \"claimed\" && !mintLockedForever ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1675,\n      columnNumber: 27\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1676,\n      columnNumber: 29\n    }\n  }, \"Get Keys (Unlocking will prevent minting)\")) : null, mine && showMove && qualifiedCollection && qualifiedCollection[chainId] && qualifiedCollection.name && qualifiedCollection.chain ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1682,\n      columnNumber: 29\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      handleMove();\n    },\n    isDisabled: moving,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1683,\n      columnNumber: 29\n    }\n  }, moving ? 'Moving ...' : 'Move Vault')) : null, mine || claimedBy == account ? __jsx(JsonDownloadLink, {\n    data: rawMetadata,\n    filename: \"EmblemVault-\".concat(tokenId, \".json\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1696,\n      columnNumber: 27\n    }\n  }) : null, (!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: deleteVault,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1700,\n      columnNumber: 25\n    }\n  }, \"Delete Vault \") : null))))), vaultIPFS ? // <Stack>\n  __jsx(HStack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1721,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    target: \"new\",\n    mb: 2,\n    ml: 35,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1722,\n      columnNumber: 23\n    }\n  }, \"View Metadata on IPFS \"), vaultImageIPFS ? __jsx(Link, {\n    mb: 2,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultImageIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1724,\n      columnNumber: 25\n    }\n  }, \"View Image on IPFS \") : null) // </Stack>\n  : null, sealed ? __jsx(Box, {\n    d: \"flex\",\n    mb: 2,\n    ml: 35,\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1731,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1732,\n      columnNumber: 23\n    }\n  }, \"*This vault is sealed forever.\")) : null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1736,\n      columnNumber: 17\n    }\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1737,\n      columnNumber: 42\n    }\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1741,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1742,\n      columnNumber: 21\n    }\n  }), accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving ? \"Handling Approval Flow ...\" : transfering ? \"Transfering Vault ...\" : minting ? \"Minting Vault\" : \"Generating Gift Link ...\") : null)) : vaultValues.length > 0 && slideshowOnly ? __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1750,\n      columnNumber: 11\n    }\n  }, vaultValues.length && vaultValues.filter(function (item) {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultValues[0].image,\n    items: vaultValues.filter(function (value) {\n      return value.image !== vaultValues[0].image;\n    }).map(function (value) {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1752,\n      columnNumber: 17\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1754,\n      columnNumber: 17\n    }\n  })) : invalidVault ? __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1759,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1760,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1764,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1766,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      if (claiming && !accepting && !preTransfering) {\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account); // pingClaimLogs(()=>{\n\n        location.href = location.origin + '/nft?id=' + tokenId + '&cc=t'; // })\n      } else if (preTransfering) {\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        setApproving(false);\n        getVault();\n        setHash(null);\n        location.href = location.origin + '/nft?id=' + tokenId;\n      } else if (transfering) {\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else if (minting) {\n        checkLiveliness(tokenId, function () {\n          setMinting(false);\n          setLive(true);\n          location.href = location.origin + '/nft?id=' + tokenId + '&cc=t'; // setShowMakingVaultMsg(false)\n          // location.href = location.origin + '/nft?id=' + tokenId\n        });\n      } else {\n        location.href = location.origin + '/nft?id=' + tokenId;\n        console.log('minting', minting);\n        console.log('claiming', claiming);\n        console.log('accepting', accepting);\n        console.log('preTransfering', preTransfering);\n        console.log('approving', approving);\n        console.log(\"Unknown state\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1773,\n      columnNumber: 11\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1822,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(Nft, \"607PFpcDG/1ZgOesCI/nZ6vvoP0=\", false, function () {\n  return [useWeb3React, useRouter, useContract, useContract, useContract, useContract, useDisclosure, useDisclosure, useDisclosure, useDisclosure, useDisclosure, useDisclosure, useColorMode];\n});\n\n_c7 = Nft;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"AddrModal$dynamic\");\n$RefreshReg$(_c2, \"AddrModal\");\n$RefreshReg$(_c3, \"KeysModal$dynamic\");\n$RefreshReg$(_c4, \"KeysModal\");\n$RefreshReg$(_c5, \"OfferModal$dynamic\");\n$RefreshReg$(_c6, \"OfferModal\");\n$RefreshReg$(_c7, \"Nft\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","Link","Alert","AlertIcon","useDisclosure","Collapse","useColorMode","Tabs","TabList","Tab","TabPanel","TabPanels","HStack","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","Loader","dynamic","Contract","TransactionToast","EMBLEM_API","contractAddresses","curatedContracts","SIG_API","EMBLEM_V2_API","useContract","CHAIN_ID_NAMES","CryptoJS","ReactMarkdown","gfm","Embed","NFTSlideshow","CoinBalance","transakSDK","Attributes","generateWallet","FetchNodeDetails","TorusUtils","JsonDownloadLink","AddrModal","KeysModal","OfferModal","Nft","account","chainId","library","query","cc","clearCache","setCache","curated","showMove","setShowMove","name","chain","qualifiedCollection","setQualifiedCollection","moving","setMoving","approved","setApproved","useOldMint","setUseOldMint","key","mintPassword","setMintPassword","offer","showOffer","setShowOffer","framed","setFramed","id","tokenId","setTokenId","experimental","setExperimental","noLayout","setNoLayout","slideshowOnly","setSlideshowOnly","vaultName","setVaultName","vaultIPFS","setVaultIPFS","vaultImageIPFS","setVaultImageIPFS","vaultCiphertextV2","setVaultCiphertextV2","vaultDesc","setVaultDesc","vaultImage","setVaultImage","ownedImage","setOwnedImage","vaultValues","setVaultValues","loadedValues","setLoadedValues","vaultDataValues","setVaultDataValues","attributes","setAttributes","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","vaultChain","setVaultChain","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","loaded","state","setState","mine","setMine","claiming","setClaiming","status","setStatus","sealed","setSealed","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","privValues","setKeyValues","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","hasCheckedNft","setHasCheckedNft","accepting","setAccepting","approving","setApproving","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","preTransfering","setPreTransfering","transferToAddress","setTransferToAddress","transfering","setTransfering","owner","setOwner","live","setLive","nonce","setNonce","block","setBlock","mintSignature","setMintSignature","to","setTo","showVerifyingSignature","setShowVerifyingSignature","showMakingVaultMsg","setShowMakingVaultMsg","minting","setMinting","isCrowdSale","setIsCrowdSale","alternateContractAddress","setAlternateContractAddress","image","metadata","targetAsset","setTargetAsset","serialNumber","targetContract","setTargetContract","isCovalApproved","setIsCovalApproved","decimals","setDecimals","allowance","setAllowance","balance","setBalance","price","setPrice","mineUnMinted","setMineUnMinted","mintLockedForever","setMintLockedForever","rawMetadata","setRawMetadata","handlerContract","vaultHandler","vaultHandlerAbi","vaultHandlerContract","vaultHandlerV8","vaultHandlerV8Abi","emblemContract","emblemVault","emblemAbi","covalContract","coval","covalAbi","isOpenAddrModal","isOpen","onOpenAddrModal","onOpen","onCloseAddrModal","onClose","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","isOpenOfferModal","onOpenOfferModal","onCloseOfferModal","onToggle","isManageAddressOpen","onManageAddressToggle","isAdvancedOpen","onAdvancedToggle","colorMode","transak","transferImage","getVaultContract","address","getSigner","connectUnchecked","getCuratedContract","erc1155Abi","initializeTransak","coin","apiKey","environment","defaultCryptoCurrency","walletAddress","themeColor","fiatCurrency","email","redirectURL","hostURL","window","location","origin","widgetHeight","widgetWidth","on","ALL_EVENTS","data","console","log","EVENTS","TRANSAK_ORDER_SUCCESSFUL","orderData","close","init","checkLiveliness","cb","fetch","method","headers","service","chainid","toString","body","JSON","stringify","then","response","json","lazyMint","signMessage","signature","error","setTimeout","delayedMint","alert","msg","sig","cipherTextHash","filter","buyWithSignature2","fireMetaMask","getWitness","witness","transferWithCode","code","addPreTransfer","handleApproveForall","setApprovalForAll","approveCovalFlow","approve","deleteVault","href","split","syncAccount","synched","localStorage","getItem","setItem","getVault","responce","jsonData","setStates","image_ipfs","collectionAddress","getAllBalancesLive","v","includes","ciphertextV2","mintLocked","mintLockBlock","description","totalValue","values","concat","item","trait_type","addresses","ipfs","network","isPvt","length","project","value","projectName","_qualifiedCollection","getAllBalances","balances","getAllBalancesByAddress","ethAddress","btcAddress","saveCache","vault","loadCache","parse","savePasswordToLocalStorage","loadPasswordFromLocalStorage","storedPw","getSignedJWT","myHeaders","Headers","append","raw","redirect","getTorusKeys","verifierId","idToken","fetchNodeDetails","torusUtils","enableOneKey","getNodeDetails","verifier","torusNodeEndpoints","torusIndexes","retrieveShares","verifier_id","privKey","privateKey","addAddress","decryptEmbed","getContractStates","finish","getPreTransfer","isApprovedForAll","isApproved","_from","_owner","owned","getOwnerOfSerial","ownerOf","balanceOf","Number","hasAddress","onRenew","handleSign","getSerial","token","keys","bytes","AES","decrypt","payload","enc","Utf8","phrase","forEach","getSTXKey","phrasePathToKey","path","err","secretKey","password","wallet","accounts","stxPrivateKey","handleHideAsset","hideAsset","handleAddressSign","result","handleOwnedEmbed","handleMove","moveVault","serial","handleClaim","claim","claimOnChain","pingClaimLogs","startDecryptEffect","nextFrame","pos","i","clen","stri","num","Math","floor","theLetters","random","letter","charAt","si","increment","fixed","ctnt","speed","rustle","splitDescription","words","desc","trim","tryDecrypt","ciphertext","replace","decryptAddresses","getAddresses","cipherText","decryptedData","visitOpenSeaLink","open","visitLooksRareLink","visitArcadeLink","__html","toLocaleString","type","map","canSwipe","e","target","toFixed","attribute_key","addr","pow","protocol","host"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n  Tooltip,\n  Collapse,\n  FormControl,\n  FormLabel,\n  useColorMode,\n  IconButton,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanel,\n  TabPanels\n} from '@chakra-ui/core'\n\nimport {HStack, VStack, Circle } from '@chakra-ui/react'\n// import TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { SetStateAction, useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { isETHAddress, validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses, curatedContracts, SIG_API, EMBLEM_V2_API } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\nimport { CHAIN_ID_NAMES } from '../utils'\nimport CryptoJS from 'crypto-js'\nimport { addTokenToWallet, addMany } from '../public/web3'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport Embed from './Embed'\nimport NFTSlideshow from './embed/NFTSlideshow'\nimport CoinBalance from './partials/CoinBalance'\nimport { chakra } from '@chakra-ui/system'\nimport transakSDK from '@transak/transak-sdk'\nimport Attributes from './partials/Attributes';\nimport { getStxAddress, generateWallet } from '@stacks/wallet-sdk';\nimport FetchNodeDetails from \"@toruslabs/fetch-node-details\"\nimport TorusUtils from \"@toruslabs/torus.js\"\nimport { toBytes } from '@stacks/common'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport JsonDownloadLink from './JsonDownloadLink'\nimport { green } from '@material-ui/core/colors'\n\n\ndeclare global {\n  interface Window { phraseToKey: any, phrasePathToKey: any}\n}\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\nconst OfferModal = dynamic(() => import('./OfferModal'))\n\nexport default function Nft() {\n  \n \n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [clearCache, setCache] = useState(query.cc == 't')\n  const [showMove, setShowMove] = useState(query.curated == 't')\n  const [qualifiedCollection, setQualifiedCollection] = useState({1: '', name: '', chain: ''})\n  const [moving, setMoving] = useState(false)\n  const [approved, setApproved] = useState(false)\n  const [useOldMint, setUseOldMint] = useState(query.useOldMint)\n  const [mintPassword, setMintPassword] = useState(query.key)\n  const [showOffer, setShowOffer] = useState(query.offer || false)\n  const [framed, setFramed] = useState(query.framed || true)\n  const [tokenId, setTokenId] = useState(query.id)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [noLayout, setNoLayout] = useState(query.noLayout)\n  const [slideshowOnly, setSlideshowOnly] = useState(query.slideshowOnly || false)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultIPFS, setVaultIPFS] = useState('')\n  const [vaultImageIPFS, setVaultImageIPFS] = useState('')\n  const [vaultCiphertextV2, setVaultCiphertextV2] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [ownedImage, setOwnedImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [loadedValues, setLoadedValues] = useState(false)\n  const [vaultDataValues, setVaultDataValues] = useState([])\n  const [attributes, setAttributes] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [vaultChain, setVaultChain] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [sealed, setSealed] = useState(false)\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [privValues, setKeyValues] = useState([])\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [hasCheckedNft, setHasCheckedNft] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n  const [preTransfering, setPreTransfering] = useState(false)\n  const [transferToAddress, setTransferToAddress] = useState(null)\n  const [transfering, setTransfering] = useState(false)\n  const [owner, setOwner] = useState(null)\n  // const [torus, setTorus] = useState(initTorus())\n  const [live, setLive] = useState(false)\n  const [nonce, setNonce] = useState(null)\n  const [block, setBlock] = useState(null)\n  const [mintSignature, setMintSignature] = useState(null)\n  const [to, setTo] = useState(null)\n  const [showVerifyingSignature, setShowVerifyingSignature] = useState(false)\n  const [showMakingVaultMsg, setShowMakingVaultMsg] = useState(false)\n  const [minting, setMinting] = useState(false)\n  const [isCrowdSale, setIsCrowdSale] = useState(false)\n  const [alternateContractAddress, setAlternateContractAddress] = useState(null)\n  const [targetAsset, setTargetAsset] = useState({name: '', image: '', metadata: ''})\n  const [targetContract, setTargetContract] = useState({name: '', chain: '', 4: '', 1: '', tokenId: {}, serialNumber: {'hex':''} })\n  // const [transferImage, setTransferImage] = useState('')\n  const [isCovalApproved, setIsCovalApproved] = useState(false)\n  const [decimals, setDecimals] = useState(null)\n  const [allowance, setAllowance] = useState(null)\n  const [balance, setBalance] = useState(null)\n  const [price, setPrice] = useState(null)\n  const [mineUnMinted, setMineUnMinted] = useState(false)\n  const [mintLockedForever, setMintLockedForever] = useState(false)\n  const [rawMetadata, setRawMetadata] = useState({})\n  \n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n  let emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n  const covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n  const { isOpen: isOpenOfferModal, onOpen: onOpenOfferModal, onClose: onCloseOfferModal } = useDisclosure()\n  const { isOpen, onToggle } = useDisclosure()\n  const { isOpen: isManageAddressOpen, onToggle: onManageAddressToggle } = useDisclosure()\n  const { isOpen: isAdvancedOpen, onToggle: onAdvancedToggle } = useDisclosure()\n\n  const { colorMode } = useColorMode()\n\n  let transak: { on: (arg0: any, arg1: { (data: any): void; (orderData: any): void }) => void; ALL_EVENTS: any; EVENTS: { TRANSAK_ORDER_SUCCESSFUL: any }; close: () => void; init: () => void }\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  let transferImage: string;\n\n  // async function initTorus() {\n  //   let _torus = new TorusSdk({\n  //     baseUrl: `${window.location.origin}/serviceworker`,\n  //     enableLogging: true,\n  //     network: \"testnet\", // details for test net\n  //   });\n  //   await _torus.init({skipSw: true, skipInit: true, skipPrefetch: true})\n  //   console.log(\"Initialized Torus\")\n  //   return _torus\n  // }\n\n  const getVaultContract = (address = null) =>{\n    //return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  const getCuratedContract = (address = null) =>{\n    return new Contract(address, contractAddresses.erc1155Abi, library.getSigner(account).connectUnchecked())\n  }\n\n  const initializeTransak = (address?: string, coin? : string)=>{\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',  // Your API Key\n      environment: 'PRODUCTION', // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '', // Your customer's wallet address\n      themeColor: '000000', // App theme color\n      fiatCurrency: 'USD', // INR/GBP\n      // fiatAmount: 350,\n      email: '', // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    });\n  \n    // To get all the events\n    transak.on(transak.ALL_EVENTS, (data: any) => {\n      console.log(data)\n    });\n  \n    // This will trigger when the user marks payment is made.\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, (orderData: any) => {\n      console.log(orderData);\n      transak.close();\n    });\n  \n    transak.init()\n  }\n\n  const checkLiveliness = (tokenId: string | string[], cb: { (): void; (): void; (): any })=>{\n    fetch(EMBLEM_API + '/liveliness', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({tokenId: tokenId}),\n    }).then(async function (response) {\n      let data = await response.json()\n      setLive(data.live)\n      console.log(\"Liveliness check\", data)\n    })\n    return cb()\n  }\n\n  // const transferVault = () => {\n  //   setTransfering(true)\n  //   ;(emblemContract as Contract).transferFrom(account, transferToAddress, tokenId)\n  //   .then(({ hash }: { hash: string }) => {\n  //     setHash(hash)\n  //   })\n  //   .catch((error: ErrorWithCode) => {})\n  // }\n\n  const lazyMint = () =>{\n    library.getSigner(account)\n    .signMessage('Delayed Minting: ' + tokenId)\n    .then((signature: any) => {\n      console.log(\"sig\", signature)\n      fetch(EMBLEM_API + '/lazyMint', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({tokenId: tokenId, signature: signature}),\n      }).then(async function (response) {\n          let data = await response.json()\n          if (!data.error && data.data) {\n            setMintSignature(data.data.signature)\n            setNonce(data.data.nonce)\n            setBlock(data.data.block)\n            setShowVerifyingSignature(true)\n            // setCreating(true)\n            setTimeout(()=>{\n              delayedMint(data.data.nonce, data.data.block, data.data.signature)\n            }, 1500)\n          } else {\n            alert(data.error? data.msg: 'unknown error' )\n          }            \n      })\n    })\n  }\n\n  const delayedMint = (nonce, block, sig) => {\n    // setCreating(true)\n      console.log(\"Delayed Minting\")\n      setShowVerifyingSignature(false)\n      setShowMakingVaultMsg(true)\n      setMinting(true)\n      let cipherTextHash = vaultAddresses.filter(address=>{ return address.coin == \"ETH\"})[0].address\n      console.log(\"--------------------------------------------------------Delayed Minting\", account, tokenId, cipherTextHash, nonce, block, sig)\n      ;(handlerContract as Contract)\n      .buyWithSignature2(account, tokenId, cipherTextHash, nonce, block, sig)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n          setShowMakingVaultMsg(false)\n          \n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n          console.log(\"AAAAAHHHHHH\", error)\n          setShowMakingVaultMsg(false)\n          // setMinting(false)\n      })    \n  }\n\n  const fireMetaMask = () => {\n    console.log(mintPassword)\n    setAccepting(true)\n    getWitness((witness)=>{\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;(handlerContract as Contract)\n      .transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        setAccepting(false)\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          // setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n    })\n    \n  }\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\"+transferImage)\n    setPreTransfering(true)\n    ;(handlerContract as Contract)\n      .addPreTransfer(tokenId, \"0x\"+transferImage)\n      .then(({ hash }: { hash: string }) => {\n        // setTimeout(() => {\n          setHash(hash)\n          console.log(\"Set Pre Transfering True\", preTransfering)\n          // setShowMakingVaultMsg(true)\n        // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code){   \n            console.log(\"Error?\")       \n            setPreTransfering(false)\n            setShowTransferPassword(false)\n            setTransferPassword('')\n        } else {\n          // setShowTransferPassword(!showTransferPassword? true : false)\n          // setPreTransfering(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const handleApproveForall = () => {\n    setApproving(true)\n    ;(emblemContract as Contract)\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const approveCovalFlow = () => {\n    setApproving(true)\n    ;(covalContract as Contract)\n      .approve(contractAddresses.vaultHandler[chainId], '100000000000000')\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code == 4001) {\n          setApproving(false)\n        }\n      })\n  }\n\n  const deleteVault = () =>{\n    library.getSigner(account)\n      .signMessage('Delete: ' + tokenId)\n      .then((signature: any) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_API + '/v2/delete', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata'\n          },\n          body: JSON.stringify({tokenId: tokenId, signature: signature, chainId: chainId.toString()}),\n        }).then(async function (response){\n          let data = await response.json()\n          location.href = location.href.split(\"/\")[0] + \"/vaults\"\n        })\n      })\n  }\n\n  const syncAccount = () =>{\n    \n        let synched = localStorage.getItem(tokenId+'-v')\n        if (!synched) {\n          fetch(EMBLEM_API + '/sync/'+tokenId, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              service: 'evmetadata'\n            }          \n          }).then(async function (response){\n              localStorage.setItem(tokenId+'-v', '1')\n              return true\n          }).catch(()=>{\n            return false\n          })\n      }\n  }\n\n  \n\n  const getVault = async () => {\n    // syncAccount()\n    alert('getvault')\n    // !slideshowOnly ? loadCache() : null\n    // console.log(\"---------\",EMBLEM_API + '/meta/' + tokenId + '?experimental=true')\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true'+(clearCache ? '&_vercel_no_cache=1' : ''), {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        cc: (clearCache ? 't' : '')\n      },\n    })\n    const jsonData = await responce.json()\n    setRawMetadata(jsonData)\n    setStates(jsonData)\n    // console.log('vault response was ', jsonData)\n    if (jsonData.image_ipfs) {\n      // getIPFSImage(jsonData.image_ipfs)\n    }\n    if (jsonData.collectionAddress){\n      setIsCrowdSale(true)\n      setAlternateContractAddress(jsonData.collectionAddress)\n    }\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      // setStates(jsonData)\n      // !slideshowOnly? saveCache(jsonData) : null\n      setLoadingApi(false)\n      setInvalidVault(false)\n    }\n    {\n      !vaultPrivacy && !loadedValues ?    \n      getAllBalancesLive([], tokenId, (v)=>{\n        if (v) {\n          setVaultValues(v)\n        }        \n      }) : null\n    }\n    { if (jsonData.targetContract) {\n      // setTimeout(() => {\n      //   location.href = location.origin + '/nft2?id=' + jsonData.tokenId\n      // }, 500)\n    }}\n  }\n\n  \n\n  const getWitness = async (cb: { (witness: any): void; (arg0: boolean): any }) => {\n    const responce = await fetch(EMBLEM_API + '/witness/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        cc: 't',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log('vault response was ', jsonData)\n    if (jsonData.signature) {\n      console.log('witness', jsonData)\n      return cb(jsonData)\n    } else {\n      return cb(false)\n    }\n  }\n\n  // const getMoveableCollections= async () => {\n  //   if(vaultValues.length == 1 && attributes.length > 0){\n  //     let project = attributes.filter(item=>{return item.value == vaultValues[0].name})\n  //     if (project.length > 0) {\n  //         let projectName = project[0].trait_type\n  //         let _qualifiedCollection = curatedContracts.filter(item=>{return item.name == projectName})\n  //         if (_qualifiedCollection.length > 0) {            \n  //             setQualifiedCollection(_qualifiedCollection[0])\n  //         }\n  //     }      \n  //   } else {\n  //     alert(1)\n  //     setTimeout(()=>{getMoveableCollections()}, 1000)\n  //   }\n  // }\n\n  const setStates = (jsonData) => {\n    alert('setStates')\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\"+framed : null\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2)\n      // console.log(\"ciphertextV2\", jsonData.ciphertextV2)\n    }\n    setMintLockedForever(jsonData.mintLocked && jsonData.mintLockBlock == 0)\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setOwnedImage(jsonData.ownedImage || null)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)): null\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter((item: { trait_type: string })=>{return item.trait_type === \"key\"})): null\n    jsonData.attributes ? setAttributes(jsonData.attributes): null\n    // getMoveableCollections()\n    setVaultAddresses(jsonData.addresses)\n    setVaultIPFS(jsonData.ipfs || null)\n    setVaultImageIPFS(jsonData.image_ipfs || null)\n    jsonData.targetAsset? setTargetAsset(jsonData.targetAsset) : null\n    jsonData.targetContract? setTargetContract(jsonData.targetContract) : null\n    if (jsonData.targetContract){\n      // setTimeout(() => {\n      //   location.href = location.origin + '/nft2?id=' + jsonData.targetContract.tokenId\n      // }, 500)\n    }\n    if (jsonData.live == false) {\n      checkLiveliness(jsonData.tokenId, ()=>{\n\n      })\n    }\n    setLive(jsonData.live == false ? false : true)\n    setNonce(jsonData.nonce)\n    setMintSignature(jsonData.signature)\n    setTo(jsonData.to)\n    setVaultChain(jsonData.network)\n    setVaultChainId(\n      jsonData.network == 'mainnet' ? 1 : \n      jsonData.network == \"rinkeby\" ? 4 : \n      jsonData.network == \"mumbai\" ? 80001 : \n      jsonData.network == \"matic\" ? 137 : \n      jsonData.network == \"xdai\" ? 100 : \n      jsonData.network == \"bsc\" ? 56 : \n      jsonData.network == \"fantom\" ? 250 : \n      jsonData.network == \"bitcoin\" ? 0 : \n      jsonData.network == \"aurora\" ? 1313161554 : \n      97\n    )\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    // console.log('inside getstates. mine is ', mine)\n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item: { address: string | string[] }) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)    \n    if (jsonData.sealed) {\n      setSealed(true)\n    } else {\n      setSealed(false)\n    }\n    if(jsonData.values.length == 1 && jsonData.attributes.length > 0){\n      let project = jsonData.attributes.filter(item=>{return item.value == jsonData.values[0].name})\n      if (project.length > 0) {\n          let projectName = project[0].trait_type\n          let _qualifiedCollection = curatedContracts.filter(item=>{return item.name == projectName})\n          if (_qualifiedCollection.length > 0) {            \n              setQualifiedCollection(_qualifiedCollection[0])\n          }\n      }      \n    }\n    \n  }\n\n  // const getEthBalances = async (address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n  //   setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n  //   // console.log('get eth balances', jsonData.values)\n  //   return cb(jsonData.values)\n  // }\n\n  // const getBtcBalance = async (values, address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // setVaultValues(values.concat(jsonData.values))\n  //   return cb(values.concat(jsonData.values))\n  // }\n\n  // const getNftBalance = async (values, address, cb) => {\n  //   // console.log(address)\n  //   const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   if (jsonData.length > 0) {\n  //     // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n  //     return cb(values.concat(jsonData))\n  //   } else {\n  //     return cb(values)\n  //   }\n  // }\n\n  const getAllBalances = async (values: string | any[], tokenId: string, cb: { (values: any): any; (arg0: any): any }) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesLive = async (values: string | any[], tokenId: string | string[], cb: { (v: any): void; (v: any): void; (arg0: boolean): any }) => {\n    // setVaultValues([])\n    // console.log(address)\n    if (loadedValues) {\n      return cb(false)\n    }\n    setLoadedValues(true)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true&_vercel_no_cache=1' , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesByAddress = async (values: string | any[], ethAddress: string, btcAddress: string, cb: { (values: any): void; (arg0: any): any }) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const saveCache = (vault: any) => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)) // Save new state for later\n  }\n\n  const loadCache = () => {\n    console.log('cache')\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')) // Load vaults from storage before updating from server!\n    if (vault) {\n      setState({ loaded: true })\n      setStates(vault)\n      setLoadingApi(true)\n    }\n  }\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword) // Save new state for later\n  }\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword')\n    storedPw && acceptable ? setMintPassword(storedPw) : null //setMintPassword(null)\n  }\n\n  // const getKeys = async (signature, tokenId, cb) => {\n  //   var myHeaders = new Headers()\n  //   myHeaders.append('chainId', chainId.toString())\n  //   myHeaders.append('service', 'evmetadata')\n  //   myHeaders.append('Content-Type', 'application/json')\n\n  //   var raw = JSON.stringify({ signature: signature })\n  //   const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n  //     method: 'POST',\n  //     headers: myHeaders,\n  //     body: raw,\n  //     redirect: 'follow',\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log('getKeys response is ', jsonData)\n  //   return cb(jsonData)\n  // }\n\n  const getSignedJWT = async (signature: any, tokenId: string | string[], cb: { (token: any): void; (arg0: any): any })=>{\n    var myHeaders = new Headers()\n    myHeaders.append('chainid', chainId.toString())\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, tokenId: tokenId })\n    const responce = await fetch(SIG_API+'/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  async function getTorusKeys( verifierId, idToken, cb) {\n    // const fetchNodeDetails = new FetchNodeDetails({ network: \"https://solemn-restless-diagram.ropsten.discover.quiknode.pro/37fca8f14d3a42d9ec00f50a3f6adc404d5e2a04/\", proxyAddress: \"0x6258c9d6c12ed3edda59a1a6527e469517744aa7\" });\n    // const torusUtils = new TorusUtils({ enableOneKey: true, network: \"testnet\" });\n    const fetchNodeDetails = new FetchNodeDetails({ network: \"mainnet\" });\n    const torusUtils = new TorusUtils({ enableOneKey: true, network: \"mainnet\" });\n\n    const { torusNodeEndpoints, torusIndexes } = await fetchNodeDetails.getNodeDetails({ verifier: 'tor-us-signer-vercel', verifierId });\n    const { privKey } = await torusUtils.retrieveShares(torusNodeEndpoints, torusIndexes, 'tor-us-signer-vercel', { verifier_id: verifierId }, idToken);\n    return cb({privateKey: privKey});\n  }\n\n  const addAddress = async (signature: any, tokenId: string | string[], coin: string, cb: { (result: any): void; (arg0: any): any }) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, coin: coin })\n    const responce = await fetch(EMBLEM_API + '/address/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const decryptEmbed = async (signature: any, tokenId: string | string[], cb: { (result: any): void; (arg0: any): any }) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    // alert(0)\n    console.log(\"Contract states\")\n    let owned = false\n    let _owner: string\n    try {\n      if (targetContract[chainId]) {\n        console.log(\"Checking owner wth targetContract\")\n        emblemContract = getCuratedContract(targetContract[chainId])\n        _owner = await emblemContract.getOwnerOfSerial(targetContract.serialNumber)\n        console.log(\"--------------------------- owner\", _owner, approved, account, contractAddresses.vaultHandlerV8[chainId])\n      } else {\n        _owner  = live? await emblemContract.ownerOf(tokenId): \"0x0000000000000000000000000000000000000000\"\n      }\n      setDecimals(await covalContract.decimals())\n      setAllowance(\n        await covalContract\n          .allowance(account, contractAddresses.vaultHandler[chainId])\n          .then((balance: { toString: () => string }) => balance.toString())\n      )\n      setBalance(await covalContract.balanceOf(account).then((balance: { toString: () => string }) => balance.toString()))\n      setPrice(await handlerContract.price().then((balance: { toString: () => string }) => balance.toString()))\n      // console.log(\n      //   'balance',\n      //   balance,\n      //   'allowance',\n      //   allowance,\n      //   'price',\n      //   price,\n      //   Number(allowance) >= Number(price),\n      //   Number(balance) > Number(price)\n      // )\n      if (Number(allowance) >= Number(price)) {\n        // alert(true)\n        setIsCovalApproved(true)\n      } else {\n        // alert(false)\n        setIsCovalApproved(false)\n      }\n      finish()\n    } catch(err){\n      console.log(\"-------\", err)\n      // approveCovalFlow()\n      _owner = \"0x0000000000000000000000000000000000000000\"\n      finish()\n    }\n\n    async function finish(){\n     \n      let acceptable = await handlerContract.getPreTransfer(tokenId)\n      let isApproved: boolean | ((prevState: boolean) => boolean)\n      if (targetContract[chainId]) {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId])\n      } else {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId])\n      }\n      setApproved(isApproved)\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n      setOwner(_owner)\n      setMine(_owner === account || (to === account && _owner === \"0x0000000000000000000000000000000000000000\"))\n      setMineUnMinted(to === account && _owner === \"0x0000000000000000000000000000000000000000\")\n      loadPasswordFromLocalStorage()\n      // alert(to == account)\n    }\n    \n  }\n\n  useEffect(()=>{\n    console.log(\"mine?\", mine)\n    console.log(\"claiming?\", claiming)\n    console.log(\"accepting?\", accepting)\n    console.log(\"acceptable\", acceptable)\n    console.log(\"qualified\", qualifiedCollection)\n    console.log(\"owner\",owner)\n  })\n\n  const hasAddress = (coin: string)=>{\n    console.log(coin, vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0)\n    return vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0\n  }\n\n  const onRenew = async (name: any) => { \n    library\n      .getSigner(account)\n      .signMessage('Renew: ' + tokenId)\n      .then((signature: any) => {\n        let address = vaultAddresses.filter(address=>{ return address.coin == 'NMC'})[0].address\n        console.log('signature', signature, name)\n        fetch(EMBLEM_API + '/nmc/renew/' + address, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata',\n            chainid: chainId.toString()\n          },\n          body: JSON.stringify({\n                \"tokenId\": tokenId,\n                \"signature\": signature,\n                \"name\": name\n              })\n        }).then(async function (response) {\n          let data = await response.json()\n          console.log(\"Requested Renew\", data)\n          \n        })\n      })\n  }\n  \n  const handleSign = async () => {\n    \n    let serialNumber: any\n    if (targetContract[chainId]) {      \n      emblemContract = getCuratedContract(targetContract[chainId])\n      serialNumber = await emblemContract.getSerial(targetContract.tokenId, 0)\n    }\n\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + (targetContract[chainId]? serialNumber: tokenId))\n      .then((signature: any) => {\n        setState({loaded: false})\n        if (mineUnMinted && status != \"claimed\" && !mintLockedForever) {\n          setMintLockedForever(true)\n        }\n        getSignedJWT(signature, tokenId, (token: { token: any })=>{\n          getTorusKeys(tokenId, token.token, async (keys: { privateKey: any })=>{\n            try {\n              var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey)\n              let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)) \n              setKeyValues(payload.values)\n              setMnemonic(payload.phrase)\n              vaultAddresses.forEach(async address=>{\n                if (address.coin == 'STX') {\n                  address.key = await getSTXKey(address, payload.phrase)\n                } else {\n                  address.key = window.phrasePathToKey(payload.phrase, address.path)\n                }\n                if (address.coin == 'BTC') setPrivKeyBTC(address.key)\n                if (address.coin == 'ETH') setPrivKeyETH(address.key)\n              })\n            } catch(err){\n              // alert('out of sync')\n              // await syncAccount()\n              alert(err)\n              setTimeout(()=>{location.href = location.href}, 2000)\n              \n            }\n            \n            // setKeyValues(vaultAddresses)\n            setState({loaded: true})\n            onOpenKeysModal()\n          })          \n        })\n      // }\n    })\n  }\n\n  const getSTXKey = async (address: any, phrase: string)=>{\n    const wallet: any = await generateWallet({\n      secretKey: phrase,\n      password: '',\n    })\n    console.log('------ stacks account -', wallet.accounts[0])\n    const account = wallet.accounts[0];\n    address.key = account.stxPrivateKey\n    return address.key\n  }\n\n  const handleHideAsset = async (coin: { name: any; coin: any; address: any }) => {\n    library\n      .getSigner(account)\n      .signMessage('HideAsset: ' + tokenId)\n      .then((signature: any) => {\n\n        console.log(\"----------------------------------------------------------------\", signature)\n        console.log(coin.name, coin.coin, coin.address)\n        hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, ()=>{\n          console.log(\"Done hiding coin and getting new balances\")\n        })\n      })\n  }\n\n  function hideAsset(tokenId, coin: any, address: any, name: any, signature: any, cb: { (): void; (): any }) {\n    fetch(EMBLEM_API + '/hide/'+tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin? coin: null,\n        \"address\": address? address: null,\n        \"name\": name? name: null,\n        \"signature\": signature? signature: null\n      })\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"-------\", data)\n      getAllBalances([], tokenId, (values: SetStateAction<any[]>)=>{\n        setVaultValues(values)\n        return cb()\n      })\n    }) \n  }\n\n  const handleAddressSign = async (coin: string) => {\n    library\n      .getSigner(account)\n      .signMessage('Address: ' + tokenId)\n      .then((signature: any) => {\n        addAddress(signature, tokenId, coin, (result: any) => {\n          getVault()\n        })\n      })\n  }\n\n  const handleOwnedEmbed = async () => {\n    library\n      .getSigner(account)\n      .signMessage('Embed: ' + tokenId)\n      .then((signature: any) => {\n        decryptEmbed(signature, tokenId, (result: { ownedImage: SetStateAction<string> }) => {\n          setVaultImage(result.ownedImage)\n        })        \n      })\n  }\n\n  const handleMove = async () => {\n    // setMoving(true)\n    // getMoveableCollections()\n    console.log('---------- qualified move', qualifiedCollection)\n    fetch(EMBLEM_V2_API + '/v2/move-vault/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"chainId\": 1,\n        \"from\": account,\n        \"sourceContract\": {\n            \"1\": contractAddresses.emblemVault[vaultChainId]\n        },\n        \"targetContract\": {\n            \"1\": qualifiedCollection[chainId],\n            \"name\": qualifiedCollection.name,\n            \"chain\": qualifiedCollection.chain\n        },\n        \"targetAsset\": {\n            \"name\": vaultValues[0].name\n        },\n        \"amount\": 1,\n        \"tokenId\": tokenId\n    })\n    }).then(async function (response: any) {\n      let data = await response.json()\n      \n      // console.log(\"------------- \",\"0x82c7a8f707110f5fbb16184a5933e9f78a34c6ab\", \"0xDCA91409018ea80B71d21E818f00e76072969861\", \"3523401\",data.tokenId, data.nonce, data.sig, \"0x0000000000000000000000000000000000000000000000000000000000000000\")\n      if (data.sig) {\n        vaultHandlerContract.moveVault(contractAddresses.emblemVault[vaultChainId], qualifiedCollection[chainId], tokenId, data.tokenId, data.nonce, data.sig, data.serial).then((hash: any): void =>{\n          setHash(hash)\n          setMoving(false)\n        })\n      }\n    })\n  }\n\n  const handleClaim = async () => {\n    if (targetContract[chainId]) {\n      // emblemContract = getCuratedContract(targetContract[chainId])\n      // let tokenId = await emblemContract.getTokenIdForSerialNumber(targetContract.serialNumber)\n      vaultHandlerContract.claim(targetContract[chainId], targetContract.tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    } else {\n      handlerContract.claimOnChain(tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    }\n  }\n\n  const pingClaimLogs = (cb: { (): void; (): any })=>{\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId='+chainId.toString()+'_vercel_no_cache=1', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        cc: 't'\n      }\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"Log check\", data)\n      return cb()\n    })    \n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos: number) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random())\n        //Get random letter\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      // $(\"#output\").html(fixed + block);\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    console.log('----')\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    (account && chainId && vaultChainId && chainId == vaultChainId) || ((query.noLayout && query.noLayout == 'true') || (query.slideshowOnly && query.slideshowOnly == 'true')) ? getContractStates() : null\n  })\n\n  function splitDescription(words: string) {\n    var desc = words? words.split('\\n\\n\\n\\n'): [\" \"]\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key: SetStateAction<string>) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    console.log(vaultAddresses)\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      let ethAddress = vaultAddresses.filter((item) => {return item.coin === 'ETH'})[0].address\n      let btcAddress = vaultAddresses.filter((item) => {return item.coin === 'BTC'})[0].address\n      console.log(\"SUCCESS\", vaultAddresses)\n      getAllBalancesByAddress([], ethAddress, btcAddress, (values: SetStateAction<any[]>)=>{\n        setVaultValues(values)\n      })\n      // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {console.log('WTF', err)}\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\")\n    return vaultAddresses\n  }\n\n  function decryptAddresses(key: any) {\n    vaultAddresses.forEach((item) => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '')\n        item.address = decrypt(cipherText, key)\n      }      \n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText: any, key: any) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  function visitOpenSeaLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : '') +\n      'opensea.io/assets/' + \n      (vaultChainId == 137 ? 'matic/' : '') +\n      (alternateContractAddress? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      tokenId \n    , '_blank')\n  }\n\n  function visitLooksRareLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : '') +\n      'looksrare.org/collections/' + \n      (vaultChainId == 137 ? 'matic/' : '') +\n      (alternateContractAddress? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      tokenId \n    , '_blank')\n  }\n\n  function visitArcadeLink() {\n    window.open(\n      `https://app.arcade.xyz/terms/asset/${targetContract[vaultChainId]? targetContract[vaultChainId]: contractAddresses.emblemVault[vaultChainId]}/${tokenId}` , '_blank')\n  }\n\n  { alternateContractAddress?\n    emblemContract = getVaultContract(alternateContractAddress? alternateContractAddress: null)\n  : null}\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n        <script\n            dangerouslySetInnerHTML={{\n              __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              if (localStorage.getItem(\"darkMode\") == 'false') {\n                localStorage.setItem(\"darkMode\",\"true\"); location.href = location.href\n              }\n              `,\n            }}\n          />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n        privValues={privValues}\n        addresses={vaultAddresses}\n      />\n      {showOffer ? (\n        <OfferModal\n          isOpen={isOpenOfferModal}\n          onClose={onCloseOfferModal}\n          tokenId={tokenId}\n          mine={mine}\n        />\n      ) : null}\n      \n\n      <Loader loaded={state.loaded}>\n        <Box height=\"40px\"></Box>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault && !slideshowOnly ? (\n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                className=\"NFT\" \n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"blue.500\"\n                >\n                  Vault Network: {CHAIN_ID_NAMES[vaultChainId]}\n                </Box>\n                {/* {isCrowdSale ? (\n                  <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"red.500\"\n                >\n                  Part of a crowdsale, sealed for 1 week.\n                </Box>\n                ) : null} */}\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  // textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null}\n                </Box>\n                <Stack className=\"NFT-content\" align=\"center\">\n                  { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                      <NFTSlideshow name={vaultName} image={vaultImage} items={vaultValues.map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n                    ) : (\n                      <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n                    )\n                  }\n                  {mine && ownedImage ? (\n                    <Button onClick={() => {handleOwnedEmbed()}}>(OWNED) Show Full Embed</Button>\n                  ): null}\n                </Stack>\n                <Stack align=\"center\" maxWidth=\"400px\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\" maxWidth=\"400px\">\n                    <Stack>\n                      <Text fontSize=\"xs\">\n                      { vaultChainId == chainId ? (\n                        <Link href={\"./vaults?address=\"+owner}>\n                          Owner: {owner}\n                        </Link>\n                      ) : null }\n                      </Text>\n                      <Text overflowWrap=\"anywhere\" mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" className=\"md\">\n                        <ReactMarkdown plugins={[gfm]} children={splitDescription(vaultDesc)} />\n                      </Text>\n                      \n                    </Stack>                    \n                  </Box>                    \n                </Stack>\n                <Box p=\"6\">\n                <Tabs isFitted variant='enclosed'>\n                  <TabList mb='1em'>\n                    <Tab>Balances</Tab>\n                    <Tab>Attributes</Tab>\n                  </TabList>\n                  <TabPanels>\n                    <TabPanel>\n                      {vaultPrivacy ? (\n                        <Box mb={5}>\n                          <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                            {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                          </Text>\n                          <Input\n                            type=\"password\"\n                            id=\"vault-password\"\n                            onChange={(e) => tryDecrypt(e.target.value)}\n                            aria-describedby=\"password-helper-text\"\n                          />\n                        </Box>\n                      ) : (\n                        <Box d=\"flex\" backgroundColor={colorMode == \"light\"? \"gray.100\": \"gray.700\"} alignItems=\"baseline\" className=\"coin-balance-content\">\n                          <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                            <Text as=\"h4\" mt={2} fontWeight=\"semibold\">\n                            \n                              Current Contents:  <button\n                              onClick={() =>{\n                                getAllBalancesLive([], tokenId, (v)=>{\n                                  setLoadedValues(false)\n                                  setVaultValues(v)\n                                })\n                              }}\n                            > [Refresh Balances]</button>\n                            </Text>\n                            <Text as=\"p\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"}>${Number(vaultTotalValue.toFixed(4)).toLocaleString()}</Text>\n                            { vaultValues.length ? (\n                              vaultValues.map((coin) => {\n                                return (  \n                                  <Stack> \n                                    <CoinBalance colorMode={colorMode} coin={coin} mine={(status === 'claimed' && claimedBy === account) || mine} onRenew={onRenew} hideAsset={handleHideAsset}/>\n                                  </Stack>\n                                )\n                              })\n                            ) : (<Refreshing /> ) } \n                            { vaultDataValues.length ? (\n                              vaultDataValues.map((data) => {\n                                return (\n                                  <Text>Data: {data.attribute_key}</Text>\n                                )                        \n                              })\n                            ) : !vaultDataValues.length && !vaultValues.length ? (\n                              <Text>Nothing in here! Fill 'er up!</Text>\n                            ) : null}\n                          </Box>\n                        </Box>\n                      )}\n                  </TabPanel>\n                    <TabPanel>\n                      <Attributes colorMode={colorMode} attributes={attributes}/>\n                      </TabPanel>\n                    </TabPanels>\n                  </Tabs>\n                  \n                  {!vaultPrivacy ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <ButtonGroup justifyContent=\"space-between\" spacing={6}>\n                        <Stack>\n                          <Text>Deposit Addresses</Text>\n                          <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                            {vaultAddresses.map((addr) => {\n                              return (\n                                <Button\n                                  className=\"address_nft_button\"\n                                  \n                                  ml={2}\n                                  mt={2}\n                                  font-weight=\"100 !important\"\n                                  key={addr.address}\n                                  onClick={() => {\n                                    setCurrCoin(addr.coin)\n                                    setCurrAddr(addr.address)\n                                    onOpenAddrModal()\n                                  }}\n                                >\n                                  {addr.coin == 'ETH' ? addr.coin + '/EVM' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP': addr.coin == 'TAP'? 'TAPROOT': addr.coin}\n                                </Button>\n                              )\n                            })}\n                          </Flex>\n                        {(mine || status === 'claimed') && vaultAddresses.length < 12 ? (\n                          <>\n                            <button className=\"nft_button\" onClick={()=>{\n                              onManageAddressToggle()\n                            }}>Manage Addresses</button>\n                            <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                              <Collapse isOpen={isManageAddressOpen}>\n                                { !hasAddress('DOGE') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('DOGE') }}>Add DOGE</Button>\n                                ) : null }\n                                { !hasAddress('DGB') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('DGB') }}>Add Digibyte</Button>\n                                ) : null }\n                                { !hasAddress('NMC') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('NMC') }}>Add Namecoin</Button>\n                                ) : null }\n                                { !hasAddress('LTC') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('LTC') }}>Add Litecoin</Button>\n                                ) : null }\n                                { !hasAddress('MONA') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('MONA') }}>Add Mona</Button>\n                                ) : null }\n                                { !hasAddress('TEZOS') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('TEZOS') }}>Add Tezos</Button>\n                                ) : null }\n                                { !hasAddress('SOLANA') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('SOLANA') }}>Add Solana</Button>\n                                ) : null }\n                                { !hasAddress('STX') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('STX') }}>Add Stacks</Button>\n                                ) : null }\n                                { !hasAddress('TAP') ? (\n                                  <Button className=\"nft_button\" mr={2} mt={2} onClick={()=>{ handleAddressSign('TAP') }}>Add Taproot</Button>\n                                ) : null }\n                              </Collapse>\n                            </Flex>\n                          </>\n                        ) : null}\n                        </Stack>\n                      </ButtonGroup>\n                    </Box>\n                  ) : null}\n\n                  {!(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 137 )? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      {/* <Stack d=\"flex\" width=\"100%\"> */}\n                        <Button\n                          className=\"nft_button\"\n                          width={mine && vaultChainId == 1? \"33%\" : vaultChainId == 137? \"100%\": \"50%\"}\n                          m={2.5}\n                          mb={5}\n                          onClick={() => {visitOpenSeaLink()}}\n                        >\n                          Opensea\n                        </Button>\n                        { vaultChainId == 1 ?(\n                          <Button\n                          className=\"nft_button\"\n                          width={mine? \"33%\" : \"50%\"}\n                          m={2.5}\n                          mb={5}\n                          onClick={() => {visitLooksRareLink()}}\n                        >\n                          LooksRare\n                        </Button>\n                        ) : null}\n                        \n                        { mine && vaultChainId == 1? (\n                           <Button\n                           className=\"nft_button\"\n                           width=\"33%\"\n                           m={2.5}\n                           mb={5}\n                           onClick={() => {visitArcadeLink()}}\n                         >\n                           Arcade\n                         </Button>\n                        ): null}                       \n                        {showOffer? (\n                          <Button className=\"\" onClick={() => { onOpenOfferModal() }}>{mine? ('My Offers') : ('Make an Offer')} (NFT²NFT)</Button>\n                        ) : null}\n                        \n                      {/* </Stack> */}\n                    </Box>\n                  ) : null}\n                  \n                  {isCovalApproved ? (\n                    <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                      <Box maxW=\"sm\" borderWidth=\"1px\" p={1} rounded=\"lg\" overflow=\"hidden\">\n                        <Text>Creating a vault spends {price * Math.pow(10, -decimals)} Coval from your wallet</Text>\n                        {/* <Text>48 hour Free minting - sponsored by the team at MegaPunks <Link href=\"https://megapunks.com\">https://megapunks.com</Link></Text> */}\n                      </Box>\n                    </Stack>\n                  ) : null}\n\n                  {mine && !approved ? (<>\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        backgroundColor={\"#02b402\"}\n                        color={\"black !important\"}\n                        fontWeight={\"bold !important\"}\n                        className=\"nft_button\"\n                        width=\"100%\" onClick={() => {\n                          return handleApproveForall()                                       \n                      }\n                    }> Approve Minting</Button>\n                    </Box>\n                  </>) : null }\n\n                  {!live && mine && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg && approved && !isCovalApproved ? (\n                    <>                      \n                        <Button backgroundColor={\"#02b402\"}\n                        color={\"black !important\"}\n                        fontWeight={\"bold !important\"}\n                        width=\"100%\" mt={5} onClick={approveCovalFlow}>Approve Spending Coval</Button>\n                    </>\n                ) : null}\n\n                  {(showTransferPassword || mintPassword) && acceptable ? (\n                      <Box>\n                        <Link href={location.protocol +'//'+ location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword)}>Copy Gift Link</Link>\n                        <Text>Password: {(transferPassword || mintPassword)}</Text>\n                      </Box>\n                  ) : null}\n                  {acceptable && claimedBy !== account ? (\n                    <>\n                        <Button mt={2} width=\"100%\" onClick={()=>{fireMetaMask()}}>Accept</Button>\n                        <Input\n                          mt={2}\n                          type=\"password\"\n                          id=\"mintPassword\"\n                          minLength={3}\n                          maxLength={200}\n                          value={mintPassword || ''}\n                          onChange={(e) => {\n                            console.log('grrr', e.target.value, mintPassword)\n                            setMintPassword(e.target.value)}\n                          }\n                          autoComplete=\"off\"\n                        />\n                    </>\n                  ) : null}\n\n                   \n\n                  {!live && mine && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg && approved && isCovalApproved ? (\n                      <>                      \n                          <Button width=\"100%\" mt={5} isDisabled={(!vaultPrivacy && vaultValues.length < 1)|| mintLockedForever} onClick={lazyMint}>{mintLockedForever? 'Mint Locked - keys accessed before mint' : !vaultPrivacy && vaultValues.length < 1? 'Please load the vault to mint': 'Mint Vault'}</Button>\n                      </>\n                  ) : null}\n\n                  {!(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed && approved && live ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        onClick={() => {\n                          handleClaim()\n                        }}\n                        isDisabled={claiming}\n                      >\n                        {claiming ? 'Claiming ...' : 'Unlock Vault (Get Private Keys)'}\n                      </Button>\n                    </Box>\n                  ) : (vaultChainId === chainId && ((status == 'claimed' || mintLockedForever) && (claimedBy === account || mine))) ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={handleSign}>\n                      Get Keys\n                      </Button>\n                    </Box>\n                  ) : null}\n                    <Stack mt={5}>\n                      <>\n                        <button className=\"nft_button\" onClick={()=>{\n                          onAdvancedToggle()\n                        }}>Advanced Operations</button>\n                        <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\">\n                          <Collapse width={\"100%\"} isOpen={isAdvancedOpen}>\n                          { mineUnMinted && status != \"claimed\" && !mintLockedForever ? (\n                          <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                            <Button width=\"100%\" onClick={handleSign}>\n                              Get Keys (Unlocking will prevent minting)\n                            </Button>\n                          </Box>\n                        ) : null}\n                          {mine && showMove && qualifiedCollection && qualifiedCollection[chainId] && qualifiedCollection.name && qualifiedCollection.chain? (\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                            <Button\n                              width=\"100%\"\n                              onClick={() => {\n                                handleMove()\n                              }}\n                              isDisabled={moving}\n                            >\n                              {moving ? 'Moving ...' : 'Move Vault'}\n                            </Button>\n                          </Box>\n                          ) : null}\n\n                        {mine || claimedBy == account? (\n                          <JsonDownloadLink data={rawMetadata} filename={`EmblemVault-${tokenId}.json`}/>\n                        ): null}                \n\n                      {(!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? (\n                        <Button width=\"100%\" mt={5} onClick={deleteVault}>Delete Vault </Button>\n                      ) : null}\n                          </Collapse>\n                        </Flex>\n                      </>\n                    </Stack>\n\n                    \n                {/* {showVerifyingSignature ? (\n                  <Button isDisabled type=\"submit\">\n                    Verifying Signature ...\n                  </Button>\n                ) : null}\n                {showMakingVaultMsg ? (\n                  <Button isDisabled type=\"submit\">\n                    Minting Vault ...\n                  </Button>\n                ) : null} */}\n                </Box>\n                {vaultIPFS ? (\n                  // <Stack>\n                    <HStack align=\"center\">\n                      <Link target='new' mb={2} ml={35} href={'https://gateway.ipfs.io/ipfs/'+vaultIPFS} isExternal>View Metadata on IPFS </Link>\n                      {vaultImageIPFS? (\n                        <Link mb={2} href={'https://gateway.ipfs.io/ipfs/'+vaultImageIPFS} isExternal>View Image on IPFS </Link>\n                      ) : null}                      \n                    </HStack> \n                  // </Stack>\n                ) : null }\n\n                {sealed ? (\n                    <Box d=\"flex\" mb={2} ml={35} alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Text>*This vault is sealed forever.</Text>\n                    </Box>\n                  ) : null}\n\n                <Stack direction=\"column\" align=\"center\">\n                  {status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n\n                {hash ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    { accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving? \"Handling Approval Flow ...\" : transfering? \"Transfering Vault ...\":  minting? \"Minting Vault\" : \"Generating Gift Link ...\"}\n                  </Alert>\n                ) : null}\n\n              </Box>\n            </Flex>\n        ) : vaultValues.length > 0 && slideshowOnly? (\n          <Stack className=\"NFT-content\" align=\"center\">\n            { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                <NFTSlideshow name={vaultName} image={vaultValues[0].image} items={vaultValues.filter(value=>{return value.image !== vaultValues[0].image}).map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n              ) : (\n                <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n              )\n            }\n          </Stack>\n        ) : invalidVault ? (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        ): null}\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming && !accepting && !preTransfering) {\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                // pingClaimLogs(()=>{\n                  location.href = location.origin + '/nft?id=' + tokenId + '&cc=t';\n                // })\n              } else if (preTransfering) {\n                savePasswordToLocalStorage()\n                setShowTransferPassword(true)\n                setPreTransfering(false)\n                setHash(null)                \n              } else if(accepting) {\n                setAccepting(false)                \n                getVault()\n                setHash(null)\n              } else if(approving) {\n                setApproving(false)\n                getVault()\n                setHash(null)\n                location.href = location.origin + '/nft?id=' + tokenId\n              } else if(transfering) {\n                setTransfering(false)\n                getVault()\n                setHash(null)\n              } else if(minting) {\n                checkLiveliness(tokenId, ()=>{\n                  setMinting(false)\n                  setLive(true)\n                  location.href = location.origin + '/nft?id=' + tokenId + '&cc=t';\n                  // setShowMakingVaultMsg(false)\n                  // location.href = location.origin + '/nft?id=' + tokenId\n                })\n              } else {\n                location.href = location.origin + '/nft?id=' + tokenId\n                console.log('minting', minting) \n                console.log('claiming', claiming) \n                console.log('accepting', accepting) \n                console.log('preTransfering', preTransfering)\n                console.log('approving', approving)\n                console.log(\"Unknown state\")\n              }\n            }}\n          />\n        ) : null}\n        <Box height=\"40px\"></Box>\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}