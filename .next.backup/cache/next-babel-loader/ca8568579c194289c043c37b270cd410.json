{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Vault.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, useDisclosure } from '@chakra-ui/core';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { validImage } from '../utils';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nvar AddrModal = dynamic(_c = function _c() {\n  return import('./AddrModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./AddrModal')];\n    },\n    modules: ['./AddrModal']\n  }\n});\n_c2 = AddrModal;\nvar KeysModal = dynamic(_c3 = function _c3() {\n  return import('./KeysModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./KeysModal')];\n    },\n    modules: ['./KeysModal']\n  }\n});\n_c4 = KeysModal;\nexport default function Vault() {\n  _s();\n\n  var _this = this;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query,\n      pathname = _useRouter.pathname,\n      replace = _useRouter.replace;\n\n  var _useState = useState(query.id),\n      tokenId = _useState[0],\n      setTokenId = _useState[1];\n\n  var _useState2 = useState(''),\n      vaultName = _useState2[0],\n      setVaultName = _useState2[1];\n\n  var _useState3 = useState(''),\n      vaultDesc = _useState3[0],\n      setVaultDesc = _useState3[1];\n\n  var _useState4 = useState(''),\n      vaultImage = _useState4[0],\n      setVaultImage = _useState4[1];\n\n  var _useState5 = useState([]),\n      vaultValues = _useState5[0],\n      setVaultValues = _useState5[1];\n\n  var _useState6 = useState([]),\n      vaultAddresses = _useState6[0],\n      setVaultAddresses = _useState6[1];\n\n  var _useState7 = useState(false),\n      vaultPrivacy = _useState7[0],\n      setVaultPrivacy = _useState7[1];\n\n  var _useState8 = useState(null),\n      vaultChainId = _useState8[0],\n      setVaultChainId = _useState8[1];\n\n  var _useState9 = useState(null),\n      hash = _useState9[0],\n      setHash = _useState9[1];\n\n  var _useState10 = useState(''),\n      currCoin = _useState10[0],\n      setCurrCoin = _useState10[1];\n\n  var _useState11 = useState(''),\n      currAddr = _useState11[0],\n      setCurrAddr = _useState11[1];\n\n  var _useState12 = useState({\n    loaded: false\n  }),\n      state = _useState12[0],\n      setState = _useState12[1];\n\n  var _useState13 = useState(false),\n      allowed = _useState13[0],\n      setAllowed = _useState13[1];\n\n  var _useState14 = useState(false),\n      mine = _useState14[0],\n      setMine = _useState14[1];\n\n  var _useState15 = useState(false),\n      claiming = _useState15[0],\n      setClaiming = _useState15[1];\n\n  var _useState16 = useState('claimed'),\n      status = _useState16[0],\n      setStatus = _useState16[1];\n\n  var _useState17 = useState(null),\n      claimedBy = _useState17[0],\n      setClaimedBy = _useState17[1];\n\n  var _useState18 = useState(''),\n      mnemonic = _useState18[0],\n      setMnemonic = _useState18[1];\n\n  var _useState19 = useState(''),\n      privKeyBTC = _useState19[0],\n      setPrivKeyBTC = _useState19[1];\n\n  var _useState20 = useState(''),\n      privKeyETH = _useState20[0],\n      setPrivKeyETH = _useState20[1];\n\n  var handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  var _useDisclosure = useDisclosure(),\n      isOpenAddrModal = _useDisclosure.isOpen,\n      onOpenAddrModal = _useDisclosure.onOpen,\n      onCloseAddrModal = _useDisclosure.onClose;\n\n  var _useDisclosure2 = useDisclosure(),\n      isOpenKeysModal = _useDisclosure2.isOpen,\n      onOpenKeysModal = _useDisclosure2.onOpen,\n      onCloseKeysModal = _useDisclosure2.onClose;\n\n  var getVault = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(EMBLEM_API + '/meta/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context.sent;\n              _context.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context.sent;\n              console.log(jsonData);\n              setVaultName(jsonData.name);\n              setVaultImage(jsonData.image);\n              setVaultDesc(jsonData.description);\n              setVaultValues(jsonData.values);\n              setVaultDesc(jsonData.description);\n              setVaultAddresses(jsonData.addresses);\n              setVaultChainId(jsonData.network == 'mainnet' ? 1 : 4);\n              setStatus(jsonData.status);\n\n              if (status === 'claimed') {\n                setClaimedBy(jsonData.claimedBy);\n              }\n\n              setState({\n                loaded: true\n              });\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getVault() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getKeys = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature\n              });\n              _context2.next = 7;\n              return fetch(EMBLEM_API + '/verify/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context2.sent;\n              _context2.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context2.sent;\n              return _context2.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getKeys(_x, _x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var owner;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return emblemContract.ownerOf(tokenId);\n\n            case 2:\n              owner = _context3.sent;\n              setMine(owner === account);\n\n              if (mine) {\n                setAllowed(true);\n              }\n\n              console.log('status', status, 'claimedBy', claimedBy);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getContractStates() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleApprove = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(function (_ref5) {\n                var hash = _ref5.hash;\n                setHash(hash);\n              });\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function handleApprove() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var handleSign = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n              library.getSigner(account).signMessage('Claim: ' + tokenId).then(function (signature) {\n                getKeys(signature, tokenId, function (result) {\n                  // alert('Mnemonic: ' + result.decrypted.phrase)\n                  setMnemonic(result.decrypted.phrase);\n                  setPrivKeyBTC('BTC KEY');\n                  setPrivKeyETH('ETH KEY');\n                  onOpenKeysModal();\n                  console.log(result.decrypted);\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function handleSign() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var handleClaim = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(function (_ref8) {\n                var hash = _ref8.hash;\n                setClaiming(true);\n                setTimeout(function () {\n                  setHash(hash);\n                  handleSign();\n                  onOpenKeysModal();\n                }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n              });\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function handleClaim() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getVault();\n  }, []);\n  useEffect(function () {\n    console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId);\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null;\n  });\n\n  function splitDescription(words) {\n    var desc = words.split('Emblem Vault Basic');\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(pass) {\n    console.log(pass);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }), __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }, vaultChainId != chainId ? __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"orange.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  }, \"Your vault is on a different network than you are.\") : null, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }, vaultName), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, __jsx(Image, {\n    src: validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png',\n    width: \"250px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 15\n    }\n  })), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }\n  }, splitDescription(vaultDesc)))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 17\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 19\n    }\n  }, \"Current Contents:\"), vaultPrivacy ? __jsx(React.Fragment, null, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 23\n    }\n  }, \"Contents hidden. Enter password to unlock.\"), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: function onChange(e) {\n      return tryDecrypt(e.target.value);\n    },\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 23\n    }\n  })) : vaultValues.length ? vaultValues.map(function (coin) {\n    return __jsx(Text, {\n      key: coin.name,\n      isTruncated: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 25\n      }\n    }, coin.name, \": \", coin.balance);\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 21\n    }\n  }, \"Nothing in here! Fill 'er up!\"))), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"center\",\n    spacing: \"1rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 17\n    }\n  }, __jsx(ButtonGroup, {\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 19\n    }\n  }, vaultAddresses.map(function (addr) {\n    return __jsx(Button, {\n      key: addr.address,\n      onClick: function onClick() {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 25\n      }\n    }, \"Put \", addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin, \" In\");\n  })))), status === 'claimed' && claimedBy === account ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 19\n    }\n  }, \"Get Keys\")) : __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 17\n    }\n  }, __jsx(Button, _extends({\n    width: \"100%\",\n    as: \"a\"\n  }, {\n    href: 'https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + contractAddresses.emblemVault[vaultChainId] + '/' + tokenId,\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 19\n    }\n  }), mine ? 'Sell/Gift/Send' : 'Make an Offer')), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 15\n    }\n  }, mine ? __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      if (allowed) {\n        handleClaim();\n      } else {\n        handleApprove();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 19\n    }\n  }, allowed ? 'Claim' : 'Approve') : '')))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      if (claiming) {\n        alert('Claim tx complete. Now ask server for keys');\n        setHash(null);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 11\n    }\n  }) : null));\n}\n\n_s(Vault, \"cGInVnjIJxZP69YCJEt+YNUxV8w=\", false, function () {\n  return [useWeb3React, useRouter, useContract, useContract, useDisclosure, useDisclosure];\n});\n\n_c5 = Vault;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"AddrModal$dynamic\");\n$RefreshReg$(_c2, \"AddrModal\");\n$RefreshReg$(_c3, \"KeysModal$dynamic\");\n$RefreshReg$(_c4, \"KeysModal\");\n$RefreshReg$(_c5, \"Vault\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Vault.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","useDisclosure","useWeb3React","useEffect","useState","useRouter","Loader","dynamic","validImage","TransactionToast","EMBLEM_API","BURN_ADDRESS","contractAddresses","useContract","AddrModal","KeysModal","Vault","account","chainId","library","query","pathname","replace","id","tokenId","setTokenId","vaultName","setVaultName","vaultDesc","setVaultDesc","vaultImage","setVaultImage","vaultValues","setVaultValues","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultChainId","setVaultChainId","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","loaded","state","setState","allowed","setAllowed","mine","setMine","claiming","setClaiming","status","setStatus","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","handlerContract","vaultHandler","vaultHandlerAbi","emblemContract","emblemVault","emblemAbi","isOpenAddrModal","isOpen","onOpenAddrModal","onOpen","onCloseAddrModal","onClose","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","getVault","fetch","method","headers","service","responce","json","jsonData","console","log","name","image","description","values","addresses","network","getKeys","signature","cb","myHeaders","Headers","append","toString","raw","JSON","stringify","body","redirect","getContractStates","ownerOf","owner","handleApprove","setApprovalForAll","then","handleSign","getSigner","signMessage","result","decrypted","phrase","handleClaim","transferFrom","setTimeout","splitDescription","words","desc","split","trim","tryDecrypt","pass","e","target","value","length","map","coin","balance","addr","address","href","rel","alert"],"mappings":"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","sourcesContent":["import { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, useDisclosure } from '@chakra-ui/core'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { validImage } from '../utils'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\n\nexport default function Vault() {\n  const { account, chainId, library } = useWeb3React()\n  const { query, pathname, replace } = useRouter()\n  const [tokenId, setTokenId] = useState(query.id)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [allowed, setAllowed] = useState(false)\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n\n  const getVault = async () => {\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    console.log(jsonData)\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setVaultDesc(jsonData.description)\n    setVaultValues(jsonData.values)\n    setVaultDesc(jsonData.description)\n    setVaultAddresses(jsonData.addresses)\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : 4)\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    setState({ loaded: true })\n  }\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/verify/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    let owner = await emblemContract.ownerOf(tokenId)\n    setMine(owner === account)\n    if (mine) {\n      setAllowed(true)\n    }\n    console.log('status', status, 'claimedBy', claimedBy)\n  }\n\n  const handleApprove = async () => {\n    emblemContract\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + tokenId)\n      .then((signature) => {\n        getKeys(signature, tokenId, (result) => {\n          // alert('Mnemonic: ' + result.decrypted.phrase)\n          setMnemonic(result.decrypted.phrase)\n          setPrivKeyBTC('BTC KEY')\n          setPrivKeyETH('ETH KEY')\n          onOpenKeysModal()\n          console.log(result.decrypted)\n        })\n      })\n  }\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({ hash }: { hash: string }) => {\n      setClaiming(true)\n      setTimeout(() => {\n        setHash(hash)\n        handleSign()\n        onOpenKeysModal()\n      }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    })\n  }\n\n  useEffect(() => {\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null\n  })\n\n  function splitDescription(words) {\n    var desc = words.split('Emblem Vault Basic')\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(pass) {\n    console.log(pass)\n  }\n\n  return (\n    <>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n      />\n\n      <Loader loaded={state.loaded}>\n        <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n          <Box\n            maxW=\"sm\"\n            borderWidth=\"1px\"\n            borderColor={vaultChainId != chainId ? 'orange.500' : null}\n            rounded=\"lg\"\n            overflow=\"hidden\"\n            alignItems=\"center\"\n          >\n            {vaultChainId != chainId ? (\n              <Box\n                mt=\"1\"\n                fontWeight=\"semibold\"\n                as=\"h3\"\n                lineHeight=\"tight\"\n                p={2}\n                textAlign=\"center\"\n                textTransform=\"uppercase\"\n                alignItems=\"center\"\n                color=\"orange.500\"\n              >\n                Your vault is on a different network than you are.\n              </Box>\n            ) : null}\n            <Box\n              mt=\"1\"\n              fontWeight=\"semibold\"\n              as=\"h3\"\n              lineHeight=\"tight\"\n              p={2}\n              textAlign=\"center\"\n              textTransform=\"uppercase\"\n              alignItems=\"center\"\n            >\n              {vaultName}\n            </Box>\n            <Stack align=\"center\">\n              <Image\n                src={validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png'}\n                width=\"250px\"\n              />\n            </Stack>\n            <Stack align=\"center\">\n              <Box mt=\"1\" ml=\"4\" lineHeight=\"tight\">\n                <Text as=\"h4\" ml=\"4\" mr=\"4\">\n                  {splitDescription(vaultDesc)}\n                </Text>\n              </Box>\n            </Stack>\n            <Box p=\"6\">\n              <Box d=\"flex\" alignItems=\"baseline\">\n                <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                  <Text as=\"h4\" fontWeight=\"semibold\">\n                    Current Contents:\n                  </Text>\n                  {vaultPrivacy ? (\n                    <>\n                      <Text>Contents hidden. Enter password to unlock.</Text>\n                      <Input\n                        type=\"password\"\n                        id=\"vault-password\"\n                        onChange={(e) => tryDecrypt(e.target.value)}\n                        aria-describedby=\"password-helper-text\"\n                      />\n                    </>\n                  ) : vaultValues.length ? (\n                    vaultValues.map((coin) => {\n                      return (\n                        <Text key={coin.name} isTruncated>\n                          {coin.name}: {coin.balance}\n                        </Text>\n                      )\n                    })\n                  ) : (\n                    <Text>Nothing in here! Fill 'er up!</Text>\n                  )}\n                </Box>\n              </Box>\n              <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                <Stack direction=\"row\" align=\"center\" spacing=\"1rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                  <ButtonGroup spacing={4}>\n                    {vaultAddresses.map((addr) => {\n                      return (\n                        <Button\n                          key={addr.address}\n                          onClick={() => {\n                            setCurrCoin(addr.coin)\n                            setCurrAddr(addr.address)\n                            onOpenAddrModal()\n                          }}\n                        >\n                          Put {addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin} In\n                        </Button>\n                      )\n                    })}\n                  </ButtonGroup>\n                </Stack>\n              </Box>\n              {status === 'claimed' && claimedBy === account ? (\n                <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                  <Button width=\"100%\" onClick={handleSign}>\n                    Get Keys\n                  </Button>\n                </Box>\n              ) : (\n                <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                  <Button\n                    width=\"100%\"\n                    as=\"a\"\n                    {...{\n                      href:\n                        'https://' +\n                        (vaultChainId == 4 ? 'rinkeby.' : '') +\n                        'opensea.io/assets/' +\n                        contractAddresses.emblemVault[vaultChainId] +\n                        '/' +\n                        tokenId,\n                      target: '_blank',\n                      rel: 'noopener noreferrer',\n                    }}\n                  >\n                    {mine ? 'Sell/Gift/Send' : 'Make an Offer'}\n                  </Button>\n                </Box>\n              )}\n              <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                {mine ? (\n                  <Button\n                    width=\"100%\"\n                    onClick={() => {\n                      if (allowed) {\n                        handleClaim()\n                      } else {\n                        handleApprove()\n                      }\n                    }}\n                  >\n                    {allowed ? 'Claim' : 'Approve'}\n                  </Button>\n                ) : (\n                  ''\n                )}\n              </Box>\n            </Box>\n          </Box>\n        </Flex>\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming) {\n                alert('Claim tx complete. Now ask server for keys')\n                setHash(null)\n              }\n            }}\n          />\n        ) : null}\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}