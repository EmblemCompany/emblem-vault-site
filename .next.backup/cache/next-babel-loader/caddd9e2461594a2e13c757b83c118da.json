{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/KeysModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, Text, Stack, Button, useColorMode } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR } from '../constants';\nexport default function KeysModal(_ref) {\n  _s();\n\n  var _this = this;\n\n  var isOpen = _ref.isOpen,\n      onClose = _ref.onClose,\n      mnemonic = _ref.mnemonic,\n      privKeyBTC = _ref.privKeyBTC,\n      privKeyETH = _ref.privKeyETH,\n      privValues = _ref.privValues,\n      addresses = _ref.addresses;\n  var phrase = mnemonic;\n  var btcKey = privKeyBTC;\n  var ethKey = privKeyETH;\n  var values = privValues;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _useState = useState(false),\n      phraseCopied = _useState[0],\n      setPhraseCopied = _useState[1];\n\n  useEffect(function () {\n    if (phraseCopied) {\n      var timeout = setTimeout(function () {\n        setPhraseCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [phraseCopied]);\n\n  var _useState2 = useState(false),\n      BTCKeyCopied = _useState2[0],\n      setBTCKeyCopied = _useState2[1];\n\n  useEffect(function () {\n    if (BTCKeyCopied) {\n      var timeout = setTimeout(function () {\n        setBTCKeyCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [BTCKeyCopied]);\n\n  var _useState3 = useState(false),\n      ETHKeyCopied = _useState3[0],\n      setETHKeyCopied = _useState3[1];\n\n  useEffect(function () {\n    if (ETHKeyCopied) {\n      var timeout = setTimeout(function () {\n        setETHKeyCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ETHKeyCopied]);\n\n  var _useState4 = useState(false),\n      BCHKeyCopied = _useState4[0],\n      setBCHKeyCopied = _useState4[1];\n\n  useEffect(function () {\n    if (BCHKeyCopied) {\n      var timeout = setTimeout(function () {\n        setBCHKeyCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [BCHKeyCopied]);\n\n  var _useState5 = useState(false),\n      valueCopied = _useState5[0],\n      setValueCopied = _useState5[1];\n\n  useEffect(function () {\n    if (valueCopied) {\n      var timeout = setTimeout(function () {\n        setValueCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [valueCopied]);\n\n  function copyWithFlag(content, whichOne) {\n    copy(content);\n    whichOne == 'phrase' ? setPhraseCopied(true) : whichOne == 'BTCKey' ? setBTCKeyCopied(true) : whichOne == 'ETHKey' ? setETHKeyCopied(true) : whichOne == 'BCHKey' ? setBCHKeyCopied(true) : whichOne == 'values' ? setValueCopied(true) : null;\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, __jsx(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }), __jsx(ModalContent, {\n    color: COLOR[colorMode],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, __jsx(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, \"Your Vault Keys\")), __jsx(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }), __jsx(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    mb: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  }, \"Your mnemonic phrase (click to copy):\")), __jsx(Stack, {\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    whiteSpace: \"unset\",\n    height: \"unset\",\n    p: 2,\n    onClick: function onClick() {\n      return copyWithFlag(phrase, 'phrase');\n    },\n    isActive: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }, phraseCopied ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 33\n    }\n  }, \"Copied!\") : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 56\n    }\n  }, phrase))), privValues && privValues.length > 0 ? __jsx(React.Fragment, null, __jsx(Stack, {\n    direction: \"row\",\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 15\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }, \"Your Values (click to copy): \")), privValues.map(function (item, index) {\n    return __jsx(Stack, {\n      direction: \"row\",\n      key: index,\n      justify: \"space-between\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 19\n      }\n    }, __jsx(Text, {\n      isTruncated: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }\n    }, item.key), __jsx(Button, {\n      whiteSpace: \"unset\",\n      height: \"unset\",\n      p: 2,\n      onClick: function onClick() {\n        return copyWithFlag(item.value, 'values');\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }\n    }, valueCopied ? __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 38\n      }\n    }, \"Copied!\") : __jsx(Text, {\n      isTruncated: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 61\n      }\n    }, item.value)));\n  })) : null, addresses.length > 0 ? addresses.map(function (item, index) {\n    // if (item.coin == \"BCH\")\n    if (item.coin !== \"TEZOS\") return __jsx(React.Fragment, null, __jsx(Stack, {\n      direction: \"row\",\n      mt: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 19\n      }\n    }, __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }\n    }, \"Your \", item.coin, \" private key (click to copy):\")), __jsx(Stack, {\n      direction: \"row\",\n      justify: \"space-between\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 19\n      }\n    }, __jsx(Button, {\n      whiteSpace: \"unset\",\n      height: \"unset\",\n      p: 2,\n      onClick: function onClick() {\n        return copyWithFlag(item.key, 'BCHKey');\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 21\n      }\n    }, BCHKeyCopied ? __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 39\n      }\n    }, \"Copied!\") : __jsx(Text, {\n      isTruncated: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 62\n      }\n    }, item.key))));\n  }) : null))));\n}\n\n_s(KeysModal, \"87W3d/IeqLasVw0GFhPIXFn3xag=\", false, function () {\n  return [useColorMode];\n});\n\n_c = KeysModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"KeysModal\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/KeysModal.tsx"],"names":["useEffect","useState","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","Text","Stack","Button","useColorMode","copy","COLOR","KeysModal","isOpen","onClose","mnemonic","privKeyBTC","privKeyETH","privValues","addresses","phrase","btcKey","ethKey","values","colorMode","phraseCopied","setPhraseCopied","timeout","setTimeout","clearTimeout","BTCKeyCopied","setBTCKeyCopied","ETHKeyCopied","setETHKeyCopied","BCHKeyCopied","setBCHKeyCopied","valueCopied","setValueCopied","copyWithFlag","content","whichOne","length","map","item","index","key","value","coin"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  Text,\n  Stack,\n  Button,\n  useColorMode,\n} from '@chakra-ui/core'\nimport copy from 'copy-to-clipboard'\nimport { COLOR } from '../constants'\nimport { address } from 'bitcoinjs-lib'\ninterface DataValues {\n  key: string\n  value: string\n}\nexport default function KeysModal({\n  isOpen,\n  onClose,\n  mnemonic,\n  privKeyBTC,\n  privKeyETH,\n  privValues,\n  addresses\n}: {\n  isOpen: boolean\n  onClose: () => void\n  mnemonic: string\n  privKeyBTC: string\n  privKeyETH: string\n  privValues: Array<object>\n  addresses: any\n}): JSX.Element {\n  const phrase = mnemonic\n  const btcKey = privKeyBTC\n  const ethKey = privKeyETH\n  const values = privValues\n  const { colorMode } = useColorMode()\n\n  const [phraseCopied, setPhraseCopied] = useState(false)\n\n  useEffect(() => {\n    if (phraseCopied) {\n      const timeout = setTimeout(() => {\n        setPhraseCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [phraseCopied])\n\n  const [BTCKeyCopied, setBTCKeyCopied] = useState(false)\n  useEffect(() => {\n    if (BTCKeyCopied) {\n      const timeout = setTimeout(() => {\n        setBTCKeyCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [BTCKeyCopied])\n\n  const [ETHKeyCopied, setETHKeyCopied] = useState(false)\n  useEffect(() => {\n    if (ETHKeyCopied) {\n      const timeout = setTimeout(() => {\n        setETHKeyCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [ETHKeyCopied])\n\n  const [BCHKeyCopied, setBCHKeyCopied] = useState(false)\n  useEffect(() => {\n    if (BCHKeyCopied) {\n      const timeout = setTimeout(() => {\n        setBCHKeyCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [BCHKeyCopied])\n\n  const [valueCopied, setValueCopied] = useState(false)\n  useEffect(() => {\n    if (valueCopied) {\n      const timeout = setTimeout(() => {\n        setValueCopied(false)\n      }, 750)\n      return (): void => {\n        clearTimeout(timeout)\n      }\n    }\n  }, [valueCopied])\n\n  function copyWithFlag(content: string, whichOne: string): void {\n    copy(content)\n    whichOne == 'phrase'\n      ? setPhraseCopied(true)\n      : whichOne == 'BTCKey'\n      ? setBTCKeyCopied(true)\n      : whichOne == 'ETHKey'\n      ? setETHKeyCopied(true)\n      : whichOne == 'BCHKey'\n      ? setBCHKeyCopied(true)\n      : whichOne == 'values'\n      ? setValueCopied(true)\n      : null\n  }\n  \n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered>\n      <ModalOverlay />\n      <ModalContent color={COLOR[colorMode]}>\n        <ModalHeader>\n          <Text>Your Vault Keys</Text>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Stack direction=\"column\" mb={10}>\n            <Stack direction=\"row\">\n              <Text>Your mnemonic phrase (click to copy):</Text>\n            </Stack>\n            <Stack direction=\"row\">\n              <Button\n                width=\"100%\"\n                whiteSpace=\"unset\"\n                height=\"unset\"\n                p={2}\n                onClick={() => copyWithFlag(phrase, 'phrase')}\n                isActive={true}\n              >\n                {phraseCopied ? <Text>Copied!</Text> : <Text>{phrase}</Text>}\n              </Button>\n            </Stack>\n\n            {/* <Stack direction=\"row\" mt={4}>\n              <Text>Your BTC private key (click to copy):</Text>\n            </Stack>\n\n            <Stack direction=\"row\" justify=\"space-between\">\n              <Button whiteSpace=\"unset\" height=\"unset\" p={2} onClick={() => copyWithFlag(btcKey, 'BTCKey')}>\n                {BTCKeyCopied ? <Text>Copied!</Text> : <Text isTruncated>{btcKey}</Text>}\n              </Button>\n            </Stack>\n\n            <Stack direction=\"row\" mt={4}>\n              <Text>Your ETH private key (click to copy):</Text>\n            </Stack>\n\n            <Stack direction=\"row\" justify=\"space-between\">\n              <Button whiteSpace=\"unset\" height=\"unset\" p={2} onClick={() => copyWithFlag(ethKey, 'ETHKey')}>\n                {ETHKeyCopied ? <Text>Copied!</Text> : <Text isTruncated>{ethKey}</Text>}\n              </Button>\n            </Stack> */}\n            \n            {privValues && privValues.length > 0 ? (\n            <>\n              <Stack direction=\"row\" mt={4}>\n              \n                <Text>Your Values (click to copy): </Text>\n              </Stack>\n              {privValues.map((item: DataValues, index) => {\n                return (\n                  <Stack direction=\"row\" key={index} justify=\"space-between\">\n                    <Text isTruncated>{item.key}</Text>\n                    <Button whiteSpace=\"unset\" height=\"unset\" p={2} onClick={() => copyWithFlag(item.value, 'values')}>\n                      {valueCopied ? <Text>Copied!</Text> : <Text isTruncated>{item.value}</Text>}\n                    </Button>\n                  </Stack>\n                )\n              })}\n              \n            </> \n            ) : null}\n\n            \n            {addresses.length > 0 ? addresses.map((item: any, index) => {\n              // if (item.coin == \"BCH\")\n              if (item.coin !== \"TEZOS\")\n              return (\n                <>\n                  <Stack direction=\"row\" mt={4}>\n                    <Text>Your {item.coin} private key (click to copy):</Text>\n                  </Stack>\n\n                  <Stack direction=\"row\" justify=\"space-between\">\n                    <Button whiteSpace=\"unset\" height=\"unset\" p={2} onClick={() => copyWithFlag(item.key, 'BCHKey')}>\n                      {BCHKeyCopied ? <Text>Copied!</Text> : <Text isTruncated>{item.key}</Text>}\n                    </Button>\n                  </Stack>\n                </>\n              )\n            }): null}\n\n            {/* {addresses.length > 0 ? addresses.map((item: any, index) => {\n              if (item.coin == \"NMC\")\n              return (\n                <>\n                  <Stack direction=\"row\" mt={4}>\n                    <Text>Your NMC private key (click to copy):</Text>\n                  </Stack>\n\n                  <Stack direction=\"row\" justify=\"space-between\">\n                    <Button whiteSpace=\"unset\" height=\"unset\" p={2} onClick={() => copyWithFlag(item.key, 'BCHKey')}>\n                      {BCHKeyCopied ? <Text>Copied!</Text> : <Text isTruncated>{item.key}</Text>}\n                    </Button>\n                  </Stack>\n                </>\n              )\n            }): null} */}\n            \n          </Stack>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}