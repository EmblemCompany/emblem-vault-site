{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Embed.tsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Image } from '@chakra-ui/core';\nimport SketchFab from './embed/SketchFab';\nimport ShaderToy from './embed/ShaderToy';\nimport Bandcamp from './embed/Bandcamp';\nimport SoundCloud from './embed/SoundCloud';\nimport Clyp from './embed/Clyp';\nimport Sketchup from './embed/Sketchup';\nimport Clara from './embed/Clara';\nimport MyMiniFactory from './embed/MyMiniFactory';\nimport { Audius } from './embed/Audius';\nimport { Generic } from './embed/Generic';\nimport Youtube from './embed/Youtube';\nimport Vimeo from './embed/Vimeo';\n\nconst getIPFSImage = async function (hash) {\n  // alert(0)\n  const responce = await fetch('https://gateway.ipfs.io/ipfs/' + hash, {\n    method: 'GET',\n    headers: {// redirect:'follow'\n    }\n  });\n  let jsonData = await responce.text(); // setVaultImage(jsonData) \n  // const preview = document.querySelector('img.d-block') as HTMLImageElement\n\n  if (jsonData.includes(\"data:image\")) {\n    // preview.src = jsonData\n    return jsonData;\n  } else {\n    // preview.src = 'https://gateway.ipfs.io/ipfs/'+hash\n    return 'https://gateway.ipfs.io/ipfs/' + hash;\n  }\n};\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nexport class Embed extends Component {\n  render() {\n    let url = this.props.url || \"\";\n    let classIdentifier = url.split('/').reverse()[0];\n    url = url.replace(\"&framed=true\", \"\");\n\n    if (url.includes('ipfs://')) {\n      setTimeout(() => {\n        getIPFSImage(url.split('/').reverse()[0]).then(result => {\n          if (result.includes('data:image')) {\n            const preview = document.querySelector('.' + classIdentifier);\n            preview.src = result;\n            url = result;\n          }\n        });\n      }, 1000);\n      console.log(\"before\", url);\n      url = url.replace('ipfs://', 'https://gateway.ipfs.io/ipfs/');\n      console.log(\"after\", url);\n      return __jsx(Image, {\n        p: \"20px\",\n        h: \"100%\",\n        className: (this.props.className || \"d-block w-100\") + \" blah \" + classIdentifier,\n        src: url,\n        width: \"250px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 16\n        }\n      });\n    } else {\n      return __jsx(React.Fragment, null, url.includes('sketchfab.com/') ? __jsx(SketchFab, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }) : url.includes('shadertoy.com/') ? __jsx(ShaderToy, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }\n      }) : url.includes('bandcamp.com/') ? __jsx(Bandcamp, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }\n      }) : url.includes('soundcloud.com/') ? __jsx(SoundCloud, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }) : url.includes('clyp.it/') ? __jsx(Clyp, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }) : url.includes('sketchup.com/') ? __jsx(Sketchup, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }\n      }) : url.includes('clara.io/') ? __jsx(Clara, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      }) : url.includes('myminifactory.com/') ? __jsx(MyMiniFactory, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      }) : url.includes('audius.co/') ? __jsx(Audius, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }\n      }) : url.includes('youtube.com') ? __jsx(Youtube, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }\n      }) : url.includes('vimeo.com') ? __jsx(Vimeo, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }) : url.includes('/dynamic/') || url.includes('arweave') || url.includes('https://s3.amazonaws.com/') || url.includes('googleusercontent.com') || url.includes('ipfs.io') || url.includes('framed/') || url.includes('.png') || url.includes('.jpg') || url.includes('.jpeg') || url.includes('.gif') || url.includes('.svg') || url.includes('data:image') ? __jsx(Image, {\n        p: \"20px\",\n        h: \"100%\",\n        className: (this.props.className || \"d-block w-100\") + \" \" + classIdentifier,\n        src: url,\n        width: \"250px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }\n      }) : __jsx(Generic, {\n        url: url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }\n      }));\n    }\n  }\n\n}\nexport default Embed;","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Embed.tsx"],"names":["React","Component","Image","SketchFab","ShaderToy","Bandcamp","SoundCloud","Clyp","Sketchup","Clara","MyMiniFactory","Audius","Generic","Youtube","Vimeo","getIPFSImage","hash","responce","fetch","method","headers","jsonData","text","includes","getRandomInt","max","Math","floor","random","Embed","render","url","props","classIdentifier","split","reverse","replace","setTimeout","then","result","preview","document","querySelector","src","console","log","className"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { validImage } from '../utils'\nimport { Image } from '@chakra-ui/core'\nimport SketchFab from './embed/SketchFab'\nimport ShaderToy from './embed/ShaderToy'\nimport Bandcamp from './embed/Bandcamp'\nimport SoundCloud from './embed/SoundCloud'\nimport Clyp from './embed/Clyp'\nimport Sketchup from './embed/Sketchup'\nimport Clara from './embed/Clara'\nimport MyMiniFactory from './embed/MyMiniFactory'\nimport { Audius } from './embed/Audius'\nimport { Generic } from './embed/Generic'\nimport Youtube from './embed/Youtube'\nimport Vimeo from './embed/Vimeo'\n\ntype EmbedProps = {\n  url: string,\n  className?: string\n}\n\nconst getIPFSImage = async function(hash){\n  // alert(0)\n  const responce = await fetch('https://gateway.ipfs.io/ipfs/'+hash, {\n    method: 'GET',\n    headers: {\n      // redirect:'follow'\n    },\n  })\n  let jsonData = await responce.text()\n  // setVaultImage(jsonData) \n  // const preview = document.querySelector('img.d-block') as HTMLImageElement\n  if (jsonData.includes(\"data:image\")) {\n    // preview.src = jsonData\n    return jsonData\n  } else {\n    // preview.src = 'https://gateway.ipfs.io/ipfs/'+hash\n    return 'https://gateway.ipfs.io/ipfs/'+hash\n  }\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nexport class Embed extends Component<EmbedProps> {\n  render() {\n    let url = this.props.url || \"\"\n    let classIdentifier = url.split('/').reverse()[0]\n    url = url.replace(\"&framed=true\", \"\")\n    if (url.includes('ipfs://')) {\n      \n      setTimeout(()=>{\n        getIPFSImage(url.split('/').reverse()[0]).then((result)=>{\n          if (result.includes('data:image')) {\n            const preview = document.querySelector('.'+classIdentifier) as HTMLImageElement\n            preview.src = result\n            url = result\n          }\n        })\n      }, 1000)\n      console.log(\"before\",url)\n      url = url.replace('ipfs://', 'https://gateway.ipfs.io/ipfs/')\n      console.log(\"after\", url)\n      return ( <Image\n        p={\"20px\"}\n        h={\"100%\"}\n        className={(this.props.className || \"d-block w-100\") + \" blah \"+classIdentifier}\n        src={url}\n        width=\"250px\"\n      />)\n    } else {\n      return (\n        <>\n          {url.includes('sketchfab.com/') ? (\n            <SketchFab\n              url={url}\n            />\n          ) : url.includes('shadertoy.com/') ? (\n            <ShaderToy\n              url={url}\n            />\n          ) : url.includes('bandcamp.com/') ? (\n            <Bandcamp\n              url={url}\n            />\n          ) : url.includes('soundcloud.com/') ? (\n            <SoundCloud\n              url={url}\n            />\n          ) : url.includes('clyp.it/') ? (\n            <Clyp\n              url={url}\n            />\n          ) : url.includes('sketchup.com/') ? (\n            <Sketchup\n              url={url}\n            />\n          ) : url.includes('clara.io/') ? (\n            <Clara\n              url={url}\n            />\n          ) : url.includes('myminifactory.com/') ? (\n            <MyMiniFactory\n              url={url}\n            />\n          ) : url.includes('audius.co/') ? (\n            <Audius\n              url={url}\n            />\n          ) : url.includes('youtube.com') ? (\n            <Youtube\n              url={url}\n            />\n          ) : url.includes('vimeo.com') ? (\n            <Vimeo\n              url={url}\n            />\n          ) : url.includes('/dynamic/') || url.includes('arweave') || url.includes('https://s3.amazonaws.com/') ||  url.includes('googleusercontent.com') || url.includes('ipfs.io') || url.includes('framed/') ||  url.includes('.png') || url.includes('.jpg') || url.includes('.jpeg') || url.includes('.gif') || url.includes('.svg') || url.includes('data:image') ? (\n                <Image\n                  p={\"20px\"}\n                  h={\"100%\"}\n                  className={(this.props.className || \"d-block w-100\") + \" \"+classIdentifier}\n                  src={url}\n                  width=\"250px\"\n                />\n          ) : (\n            <Generic\n              url={url}\n            />\n          )\n            }\n        </>\n      )\n    }\n    \n  }\n}\n\nexport default Embed\n"]},"metadata":{},"sourceType":"module"}