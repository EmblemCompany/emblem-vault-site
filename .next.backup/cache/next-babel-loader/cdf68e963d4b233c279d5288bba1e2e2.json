{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport { Stack, Stat, useColorMode, StatLabel, StatNumber, StatHelpText, IconButton, Icon, StatArrow } from '@chakra-ui/core';\nimport { getTokenDisplayValue, getPercentChange } from '../utils';\nimport { useWindowSize, useUSDTokenPrice } from '../hooks';\nimport { useShowUSD } from '../context';\n\nfunction InvisibleWidthMaintainer({\n  children\n}) {\n  return __jsx(\"span\", {\n    style: {\n      display: 'block',\n      maxHeight: 0,\n      visibility: 'hidden'\n    }\n  }, children);\n}\n\nexport default function TradeSummary({\n  route,\n  trade,\n  warning,\n  danger\n}) {\n  var _ref, _route$midPrice, _ref2, _route$midPrice2, _ref3, _ref3$adjusted, _ref3$adjusted$multip, _route$midPrice3, _ref4, _trade$executionPrice, _ref5, _trade$executionPrice2, _ref6, _ref6$adjusted, _ref6$adjusted$multip, _trade$executionPrice3, _ref7, _trade$nextMidPrice, _ref8, _trade$nextMidPrice2, _ref9, _ref9$adjusted, _ref9$adjusted$multip, _trade$nextMidPrice3;\n\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    height,\n    width\n  } = useWindowSize();\n  const isVertical = height && width && height > width;\n  const {\n    0: invert,\n    1: setInvert\n  } = useState(false);\n  const path = !!!route ? [] : (invert ? route.path : route.path.slice().reverse()).map(getTokenDisplayValue);\n  const [showUSD] = useShowUSD();\n  const USDTokenPrice = useUSDTokenPrice(invert ? route === null || route === void 0 ? void 0 : route.input : route === null || route === void 0 ? void 0 : route.output); // mid price\n\n  const formattedMidPrice = (_ref = invert ? route === null || route === void 0 ? void 0 : (_route$midPrice = route.midPrice) === null || _route$midPrice === void 0 ? void 0 : _route$midPrice.invert() : route === null || route === void 0 ? void 0 : route.midPrice) === null || _ref === void 0 ? void 0 : _ref.toSignificant(4, {\n    groupSeparator: ','\n  });\n  const hiddenMidPrice = (_ref2 = invert ? route === null || route === void 0 ? void 0 : route.midPrice : route === null || route === void 0 ? void 0 : (_route$midPrice2 = route.midPrice) === null || _route$midPrice2 === void 0 ? void 0 : _route$midPrice2.invert()) === null || _ref2 === void 0 ? void 0 : _ref2.toSignificant(4, {\n    groupSeparator: ','\n  });\n  const USDMidPrice = USDTokenPrice && ((_ref3 = invert ? route === null || route === void 0 ? void 0 : (_route$midPrice3 = route.midPrice) === null || _route$midPrice3 === void 0 ? void 0 : _route$midPrice3.invert() : route === null || route === void 0 ? void 0 : route.midPrice) === null || _ref3 === void 0 ? void 0 : (_ref3$adjusted = _ref3.adjusted) === null || _ref3$adjusted === void 0 ? void 0 : (_ref3$adjusted$multip = _ref3$adjusted.multiply(USDTokenPrice)) === null || _ref3$adjusted$multip === void 0 ? void 0 : _ref3$adjusted$multip.toFixed(2, {\n    groupSeparator: ','\n  })); // fill price\n\n  const formattedFillPrice = (_ref4 = invert ? trade === null || trade === void 0 ? void 0 : (_trade$executionPrice = trade.executionPrice) === null || _trade$executionPrice === void 0 ? void 0 : _trade$executionPrice.invert() : trade === null || trade === void 0 ? void 0 : trade.executionPrice) === null || _ref4 === void 0 ? void 0 : _ref4.toSignificant(4, {\n    groupSeparator: ','\n  });\n  const hiddenFillPrice = (_ref5 = invert ? trade === null || trade === void 0 ? void 0 : trade.executionPrice : trade === null || trade === void 0 ? void 0 : (_trade$executionPrice2 = trade.executionPrice) === null || _trade$executionPrice2 === void 0 ? void 0 : _trade$executionPrice2.invert()) === null || _ref5 === void 0 ? void 0 : _ref5.toSignificant(4, {\n    groupSeparator: ','\n  });\n  const USDFillPrice = USDTokenPrice && ((_ref6 = invert ? trade === null || trade === void 0 ? void 0 : (_trade$executionPrice3 = trade.executionPrice) === null || _trade$executionPrice3 === void 0 ? void 0 : _trade$executionPrice3.invert() : trade === null || trade === void 0 ? void 0 : trade.executionPrice) === null || _ref6 === void 0 ? void 0 : (_ref6$adjusted = _ref6.adjusted) === null || _ref6$adjusted === void 0 ? void 0 : (_ref6$adjusted$multip = _ref6$adjusted.multiply(USDTokenPrice)) === null || _ref6$adjusted$multip === void 0 ? void 0 : _ref6$adjusted$multip.toFixed(2, {\n    groupSeparator: ','\n  })); // next mid price\n\n  const formattedNextMidPrice = (_ref7 = invert ? trade === null || trade === void 0 ? void 0 : (_trade$nextMidPrice = trade.nextMidPrice) === null || _trade$nextMidPrice === void 0 ? void 0 : _trade$nextMidPrice.invert() : trade === null || trade === void 0 ? void 0 : trade.nextMidPrice) === null || _ref7 === void 0 ? void 0 : _ref7.toSignificant(4, {\n    groupSeparator: ','\n  });\n  const hiddenNextMidPrice = (_ref8 = invert ? trade === null || trade === void 0 ? void 0 : trade.nextMidPrice : trade === null || trade === void 0 ? void 0 : (_trade$nextMidPrice2 = trade.nextMidPrice) === null || _trade$nextMidPrice2 === void 0 ? void 0 : _trade$nextMidPrice2.invert()) === null || _ref8 === void 0 ? void 0 : _ref8.toSignificant(4, {\n    groupSeparator: ','\n  });\n  const USDNextMidPrice = USDTokenPrice && ((_ref9 = invert ? trade === null || trade === void 0 ? void 0 : (_trade$nextMidPrice3 = trade.nextMidPrice) === null || _trade$nextMidPrice3 === void 0 ? void 0 : _trade$nextMidPrice3.invert() : trade === null || trade === void 0 ? void 0 : trade.nextMidPrice) === null || _ref9 === void 0 ? void 0 : (_ref9$adjusted = _ref9.adjusted) === null || _ref9$adjusted === void 0 ? void 0 : (_ref9$adjusted$multip = _ref9$adjusted.multiply(USDTokenPrice)) === null || _ref9$adjusted$multip === void 0 ? void 0 : _ref9$adjusted$multip.toFixed(2, {\n    groupSeparator: ','\n  }));\n  return __jsx(Stack, {\n    direction: isVertical ? 'column' : 'row',\n    align: isVertical ? 'center' : 'flex-start',\n    spacing: 0,\n    visibility: !!route ? 'visible' : 'hidden'\n  }, __jsx(Stat, {\n    p: \"1rem\",\n    backgroundColor: colorMode === 'light' ? 'gray.100' : 'rgba(255,255,255,0.04)',\n    borderRadius: \"0.25rem\"\n  }, __jsx(IconButton, {\n    transition: \"none\",\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    icon: \"view\",\n    variant: \"ghost\",\n    size: \"sm\",\n    \"aria-label\": \"Invert\",\n    onClick: () => {\n      setInvert(invert => !invert);\n    }\n  }), __jsx(StatLabel, {\n    w: \"max-content\",\n    pr: \"2rem\"\n  }, \"Mid Price\"), __jsx(StatNumber, {\n    w: \"max-content\"\n  }, !!!route ? '0.0' : __jsx(React.Fragment, null, __jsx(InvisibleWidthMaintainer, null, hiddenMidPrice), showUSD && USDMidPrice ? `$${USDMidPrice}` : formattedMidPrice)), __jsx(StatHelpText, {\n    w: \"max-content\",\n    m: 0,\n    height: \"initial\"\n  }, showUSD && USDMidPrice ? ` / 1 ${path.slice(-1)}` : __jsx(React.Fragment, null, path.length === 0 ? '‎' : path.slice(0, path.length - 1).join(' / '), path.length === 0 ? '‎' : ` / 1 ${path.slice(-1)}`))), !!trade && __jsx(React.Fragment, null, __jsx(Icon, {\n    name: isVertical ? 'chevron-down' : 'chevron-right',\n    size: \"3rem\",\n    m: isVertical ? '1rem auto' : 'auto 1rem'\n  }), __jsx(Stat, {\n    p: \"1rem\",\n    backgroundColor: colorMode === 'light' ? 'gray.100' : 'rgba(255,255,255,0.04)',\n    borderRadius: \"0.25rem\"\n  }, __jsx(StatLabel, {\n    w: \"max-content\"\n  }, \"Fill Price\"), __jsx(StatNumber, {\n    w: \"max-content\"\n  }, __jsx(InvisibleWidthMaintainer, null, hiddenFillPrice), showUSD && USDNextMidPrice ? `$${USDNextMidPrice}` : formattedFillPrice), __jsx(StatHelpText, {\n    w: \"max-content\",\n    m: 0,\n    opacity: 1,\n    color: warning ? colorMode === 'light' ? 'yellow.500' : 'yellow.200' : undefined,\n    fontWeight: warning ? 600 : undefined\n  }, warning && __jsx(StatArrow, {\n    name: !danger ? 'warning-2' : 'not-allowed',\n    color: colorMode === 'light' ? 'yellow.500' : 'yellow.200'\n  }), trade.slippage.toSignificant(3, {\n    groupSeparator: ','\n  }), \"% price impact\")), __jsx(Icon, {\n    name: isVertical ? 'chevron-down' : 'chevron-right',\n    size: \"3rem\",\n    m: isVertical ? '1rem auto' : 'auto 1rem'\n  }), __jsx(Stat, {\n    p: \"1rem\",\n    backgroundColor: colorMode === 'light' ? 'gray.100' : 'rgba(255,255,255,0.04)',\n    borderRadius: \"0.25rem\"\n  }, __jsx(StatLabel, {\n    w: \"max-content\"\n  }, \"Mid Price\"), __jsx(StatNumber, {\n    w: \"max-content\"\n  }, __jsx(InvisibleWidthMaintainer, null, hiddenNextMidPrice), showUSD && USDFillPrice ? `$${USDFillPrice}` : formattedNextMidPrice), __jsx(StatHelpText, {\n    w: \"max-content\",\n    m: 0\n  }, __jsx(StatArrow, {\n    type: invert ? 'increase' : 'decrease'\n  }), getPercentChange(invert ? trade.route.midPrice.invert() : trade.route.midPrice, invert ? trade.nextMidPrice.invert() : trade.nextMidPrice, invert).toSignificant(3, {\n    groupSeparator: ','\n  }), \"%\"))));\n}","map":null,"metadata":{},"sourceType":"module"}