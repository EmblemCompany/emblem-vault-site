{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { openEditor } from 'pintura';\nimport { sub, unsub } from './events';\n\nclass PinturaEditorModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.editor = undefined; // We'll wrap the module in a container so we can use the container as a CSS module target\n\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount() {\n    // add the container\n    document.body.appendChild(this.el);\n    this.el.className = this.props.className; // create editor and proxy events\n\n    const props = _objectSpread({}, this.props);\n\n    this.editor = openEditor(props, this.el);\n    sub(this, props);\n  }\n\n  componentDidUpdate() {\n    const props = _objectSpread({}, this.props);\n\n    Object.assign(this.editor, props);\n    sub(this, props);\n  }\n\n  componentWillUnmount() {\n    // remove our modal container\n    document.body.removeChild(this.el);\n    if (!this.editor) return;\n    unsub(this);\n    this.editor = undefined;\n  }\n\n  show() {\n    this.editor.show();\n  }\n\n  hide() {\n    this.editor.hide();\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nexport default PinturaEditorModal;","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/node_modules/react-pintura/PinturaEditorModal.js"],"names":["React","openEditor","sub","unsub","PinturaEditorModal","Component","constructor","props","editor","undefined","el","document","createElement","componentDidMount","body","appendChild","className","componentDidUpdate","Object","assign","componentWillUnmount","removeChild","show","hide","render"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,QAA2B,SAA3B;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,UAA3B;;AAEA,MAAMC,kBAAN,SAAiCJ,KAAK,CAACK,SAAvC,CAAiD;AAC7CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAcC,SAAd,CAFe,CAIf;;AACA,SAAKC,EAAL,GAAUC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAV;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB;AACAF,IAAAA,QAAQ,CAACG,IAAT,CAAcC,WAAd,CAA0B,KAAKL,EAA/B;AACA,SAAKA,EAAL,CAAQM,SAAR,GAAoB,KAAKT,KAAL,CAAWS,SAA/B,CAHgB,CAKhB;;AACA,UAAMT,KAAK,qBAAQ,KAAKA,KAAb,CAAX;;AACA,SAAKC,MAAL,GAAcP,UAAU,CAACM,KAAD,EAAQ,KAAKG,EAAb,CAAxB;AACAR,IAAAA,GAAG,CAAC,IAAD,EAAOK,KAAP,CAAH;AACH;;AAEDU,EAAAA,kBAAkB,GAAG;AACjB,UAAMV,KAAK,qBAAQ,KAAKA,KAAb,CAAX;;AACAW,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKX,MAAnB,EAA2BD,KAA3B;AACAL,IAAAA,GAAG,CAAC,IAAD,EAAOK,KAAP,CAAH;AACH;;AAEDa,EAAAA,oBAAoB,GAAG;AACnB;AACAT,IAAAA,QAAQ,CAACG,IAAT,CAAcO,WAAd,CAA0B,KAAKX,EAA/B;AACA,QAAI,CAAC,KAAKF,MAAV,EAAkB;AAClBL,IAAAA,KAAK,CAAC,IAAD,CAAL;AACA,SAAKK,MAAL,GAAcC,SAAd;AACH;;AAEDa,EAAAA,IAAI,GAAG;AACH,SAAKd,MAAL,CAAYc,IAAZ;AACH;;AAEDC,EAAAA,IAAI,GAAG;AACH,SAAKf,MAAL,CAAYe,IAAZ;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WAAO,IAAP;AACH;;AA5C4C;;AA+CjD,eAAepB,kBAAf","sourcesContent":["import React from 'react';\n\nimport { openEditor } from 'pintura';\nimport { sub, unsub } from './events';\n\nclass PinturaEditorModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.editor = undefined;\n\n        // We'll wrap the module in a container so we can use the container as a CSS module target\n        this.el = document.createElement('div');\n    }\n\n    componentDidMount() {\n        // add the container\n        document.body.appendChild(this.el);\n        this.el.className = this.props.className;\n\n        // create editor and proxy events\n        const props = { ...this.props };\n        this.editor = openEditor(props, this.el);\n        sub(this, props);\n    }\n\n    componentDidUpdate() {\n        const props = { ...this.props };\n        Object.assign(this.editor, props);\n        sub(this, props);\n    }\n\n    componentWillUnmount() {\n        // remove our modal container\n        document.body.removeChild(this.el);\n        if (!this.editor) return;\n        unsub(this);\n        this.editor = undefined;\n    }\n\n    show() {\n        this.editor.show();\n    }\n\n    hide() {\n        this.editor.hide();\n    }\n\n    render() {\n        return null;\n    }\n}\n\nexport default PinturaEditorModal;\n"]},"metadata":{},"sourceType":"module"}