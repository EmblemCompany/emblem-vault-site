{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport BackgroundVideo from './BackgroundVideo';\nimport { Flex, IconButton, useDisclosure, Badge, LightMode, Stack, Box, Button, Link } from '@chakra-ui/core';\nimport { useWeb3React } from '@web3-react/core';\nimport dynamic from 'next/dynamic';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport { useEagerConnect, useQueryParameters, useUSDETHPrice } from '../hooks';\nimport { useTransactions, useFirstToken, useSecondToken, useShowUSD } from '../context';\nimport ColorBox from './ColorBox';\nimport Account from './Account';\nimport { TransactionToast } from './TransactionToast';\nimport TokenBalance from './TokenBalance';\nimport { WETH, ChainId } from '@uniswap/sdk';\nimport WalletConnect from './WalletConnect';\nimport { QueryParameters } from '../constants';\nimport { Coval, CovalTest, CovalTestMatic, CovalMatic } from '../tokens';\nconst Settings = dynamic(() => import('./Settings'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./Settings')],\n    modules: ['./Settings']\n  }\n});\nexport default function Layout({\n  children\n}) {\n  const {\n    chainId,\n    account\n  } = useWeb3React();\n  const isTestnet = typeof chainId === 'number' && chainId !== 1;\n  const {\n    isOpen: isOpenSettings,\n    onOpen: onOpenSettings,\n    onClose: onCloseSettings\n  } = useDisclosure();\n  const [firstToken] = useFirstToken();\n  const [secondToken] = useSecondToken();\n  const [showUSD, setShowUSD] = useShowUSD();\n  const [transactions] = useTransactions(); // automatically try connecting to the injected connector on pageload\n\n  const triedToEagerConnect = useEagerConnect();\n  const queryParameters = useQueryParameters();\n  const requiredChainId = queryParameters[QueryParameters.CHAIN];\n  const USDETHPrice = useUSDETHPrice();\n\n  const handleNavigationclick = () => {\n    console.log(location.pathname);\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n\n    if (location.pathname.includes('vaultlist')) {\n      location.href = location.origin + pieces.join('/') + '/create';\n    } else {\n      location.href = location.origin + pieces.join('/') + '/vaultlist';\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Settings, {\n    isOpen: isOpenSettings,\n    onClose: onCloseSettings\n  }), __jsx(BackgroundVideo, null), __jsx(ColorBox, {\n    as: Flex,\n    flexDirection: \"column\",\n    borderColor: Number(chainId) === 137 ? \"blue.500\" : \"orange.500\",\n    borderWidth: isTestnet ? '.5rem' : '0',\n    minHeight: \"100vh\",\n    maxHeight: \"100vh\"\n  }, __jsx(Flex, {\n    justifyContent: \"space-between\",\n    flexShrink: 0,\n    overflowX: \"auto\",\n    p: \"1rem\"\n  }, __jsx(Stack, {\n    spacing: 0,\n    direction: \"row\"\n  }, __jsx(IconButton, {\n    m: 2,\n    icon: \"settings\",\n    variant: \"ghost\",\n    onClick: onOpenSettings,\n    \"aria-label\": \"Settings\"\n  }), __jsx(Button, {\n    m: 2,\n    variant: \"ghost\",\n    onClick: handleNavigationclick\n  }, ' ', location.pathname.includes('vaultlist') ? 'Create Vault' : 'My Vaults')), __jsx(Account, {\n    triedToEagerConnect: triedToEagerConnect\n  })), __jsx(Stack, {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    m: isTestnet ? '1.5rem' : '1rem',\n    mt: isTestnet ? '5rem' : '4.5rem',\n    alignItems: \"flex-end\",\n    spacing: \"1rem\",\n    zIndex: 2\n  }, typeof account !== 'string' ? !triedToEagerConnect || (typeof chainId === 'number' ? chainId !== ChainId.MAINNET : typeof requiredChainId === 'number' && requiredChainId !== ChainId.MAINNET) ? null : __jsx(Box, null, __jsx(WalletConnect, null)) : // [DEFAULT_TOKENS.filter((tokenrrr) => tokenrrr.chainId == chainId)[0], firstToken, secondToken]\n  [chainId == 1 ? Coval : chainId == 80001 ? CovalTestMatic : chainId == 137 ? CovalMatic : CovalTest, firstToken ? firstToken.symbol != 'Coval' ? firstToken : null : null, secondToken ? secondToken.symbol != 'Coval' ? secondToken : null : null].filter(token => token).filter(token => !(token === null || token === void 0 ? void 0 : token.equals(WETH[token.chainId]))).map(token => __jsx(Box, {\n    key: token === null || token === void 0 ? void 0 : token.address\n  }, __jsx(TokenBalance, {\n    token: token\n  })))), __jsx(Flex, {\n    flexGrow: 1,\n    direction: \"column\",\n    overflow: \"auto\"\n  }, children), __jsx(Flex, {\n    minHeight: \"1.5rem\"\n  }, typeof chainId === 'number' && __jsx(LightMode, null, __jsx(Link, {\n    href: \"/swap\"\n  }, __jsx(Badge, {\n    variant: \"solid\",\n    variantColor: chainId == 137 ? 'blue' : 'orange'\n    /*isTestnet ? 'blue' : undefined*/\n    ,\n    fontSize: \"1rem\",\n    style: {\n      borderTopLeftRadius: 0,\n      borderBottomRightRadius: 0,\n      borderBottomLeftRadius: 0\n    }\n  }, \"On \", CHAIN_ID_NAMES[chainId].toLowerCase(), \" (Swap to \", chainId == 1 ? 'Matic' : 'Ethereum', \")\")))), transactions.length > 0 && __jsx(Stack, {\n    position: \"absolute\",\n    bottom: 0,\n    right: 0,\n    m: isTestnet ? '1.5rem' : '1rem',\n    alignItems: \"flex-end\",\n    spacing: \"1rem\",\n    zIndex: 2\n  }, transactions.filter(transaction => transaction.chainId === chainId).map(({\n    hash\n  }) => __jsx(Box, {\n    key: hash\n  }, __jsx(TransactionToast, {\n    hash: hash\n  })))), __jsx(Stack, {\n    position: \"absolute\",\n    bottom: 1,\n    left: 100,\n    alignItems: \"center\",\n    align: \"center\"\n  }), __jsx(Stack, {\n    position: \"absolute\",\n    bottom: 1,\n    right: 1,\n    p: isTestnet ? '1.5rem' : '1rem',\n    alignItems: \"flex-end\",\n    spacing: \"1rem\"\n  }, __jsx(Button, _extends({\n    as: \"a\"\n  }, {\n    href: location.origin + '/buy?chain=' + chainId + '&output=0x3D658390460295FB963f54dC0899cfb1c30776Df&input=0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }), \"Buy Coval\"))));\n}","map":null,"metadata":{},"sourceType":"module"}