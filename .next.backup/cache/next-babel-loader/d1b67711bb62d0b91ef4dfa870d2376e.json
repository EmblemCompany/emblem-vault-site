{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { FormControl, FormLabel, FormHelperText, Input, Stack, Box, Flex, Text, Textarea, Button, Link, Select } from '@chakra-ui/core';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport Loader from 'react-loader';\nimport { usePapaParse } from 'react-papaparse';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nexport default function Batch() {\n  _s();\n\n  var _this = this;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(false),\n      running = _useState[0],\n      setRunning = _useState[1];\n\n  var _useState2 = useState(Number(query.offset) || 0),\n      offset = _useState2[0],\n      setOffset = _useState2[1];\n\n  var _useState3 = useState('configure'),\n      status = _useState3[0],\n      setStatus = _useState3[1];\n\n  var _useState4 = useState([]),\n      batches = _useState4[0],\n      setBatches = _useState4[1];\n\n  var _useState5 = useState(-1),\n      demoIndex = _useState5[0],\n      setDemoIndex = _useState5[1];\n\n  var _useState6 = useState(query.action || 'list'),\n      action = _useState6[0],\n      setAction = _useState6[1];\n\n  var _useState7 = useState([]),\n      batchVaults = _useState7[0],\n      setBatchVaults = _useState7[1];\n\n  var _useState8 = useState(0),\n      updateCount = _useState8[0],\n      setUpdateCount = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      batchName = _useState9[0],\n      setBatchName = _useState9[1];\n\n  var _useState10 = useState(\"\"),\n      imageBaseUrl = _useState10[0],\n      setImageBaseUrl = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      inscriptionBaseUrl = _useState11[0],\n      setInscriptionBaseUrl = _useState11[1];\n\n  var _useState12 = useState(\"\"),\n      addressType = _useState12[0],\n      setAddressType = _useState12[1];\n\n  var _useState13 = useState(\"\"),\n      titleTemplate = _useState13[0],\n      setTitleTemplate = _useState13[1];\n\n  var _useState14 = useState(\"\"),\n      descriptionTemplate = _useState14[0],\n      setDescriptionTemplate = _useState14[1];\n\n  var _useState15 = useState(\"\"),\n      total = _useState15[0],\n      setTotal = _useState15[1];\n\n  var _useState16 = useState(\"\"),\n      batchData = _useState16[0],\n      setBatchData = _useState16[1];\n\n  var _useState17 = useState([]),\n      batchDataJson = _useState17[0],\n      setBatchDataJson = _useState17[1];\n\n  var _useState18 = useState(query.batch_id || \"\"),\n      batchId = _useState18[0],\n      setBatchId = _useState18[1];\n\n  var _useState19 = useState({\n    loaded: false\n  }),\n      state = _useState19[0],\n      setState = _useState19[1];\n\n  var _useState20 = useState([]),\n      vaultAddresses = _useState20[0],\n      setVaultAddresses = _useState20[1];\n\n  var _usePapaParse = usePapaParse(),\n      readString = _usePapaParse.readString,\n      jsonToCSV = _usePapaParse.jsonToCSV;\n\n  useEffect(function () {\n    if (!state.loaded && batchId && !batchName) {\n      getBatch();\n      getVaultsForBatch(batchId.toString(), function () {});\n    } else if (!state.loaded && !batchId && !batchName && action == 'list') {\n      getBatches();\n    } else {\n      setState({\n        loaded: true\n      });\n    }\n  }, []);\n\n  var getBatch = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/batch?batchId=\".concat(batchId), requestOptions).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n                  var record, parsedJson, csvData;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return response.json();\n\n                        case 2:\n                          record = _context.sent;\n                          setState({\n                            loaded: true\n                          });\n                          setBatchName(record.batch_name);\n                          setImageBaseUrl(record.image_base_url);\n                          setInscriptionBaseUrl(record.inscription_base_url);\n                          setAddressType(record.address_type);\n                          setStatus(record.status);\n                          setTitleTemplate(record.title_template);\n                          setDescriptionTemplate(record.description_template);\n                          parsedJson = JSON.parse(record.data);\n                          setBatchDataJson(parsedJson);\n                          csvData = jsonToCSV(parsedJson);\n                          setBatchData(csvData);\n                          setTotal((parsedJson.length - 1).toString());\n\n                        case 16:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getBatch() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getVaultsForBatch = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(batchId, cb) {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              // alert(0)\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/batchVaults/\" + batchId + \"?_vercel_no_cache=1\", requestOptions).then( /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response) {\n                  var records, exported_records, csvData;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return response.json();\n\n                        case 2:\n                          records = _context3.sent;\n                          setBatchVaults(records);\n                          exported_records = records.map(function (record) {\n                            console.log(exported_records);\n                            return {\n                              to: record.to,\n                              tokenId: record.tokenId,\n                              address: record.addresses.filter(function (addy) {\n                                return addy.coin == 'TAP';\n                              })[0].address\n                            };\n                          }); // address: record.addresses.filter(addy=>{return addy.coin == 'LTC'})[0].address, tokenId: record.tokenId, owner: record.to\n                          // let addresses = records.map(record=>{ return {tokenId: record.tokenId}})\n\n                          csvData = jsonToCSV(exported_records.reverse());\n                          setVaultAddresses(csvData);\n                          console.log(csvData);\n                          return _context3.abrupt(\"return\", cb());\n\n                        case 9:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function (_x4) {\n                  return _ref4.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function getVaultsForBatch(_x2, _x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var goUpdateLoop = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(overrideOffset) {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/updateNextBatchItem/\".concat(batchId, \"?offset=\").concat(overrideOffset || offset, \"&_vercel_no_cache=1\"), requestOptions).then( /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(response) {\n                  var record;\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return response.json();\n\n                        case 2:\n                          record = _context5.sent;\n                          setUpdateCount(record.index); // alert(record.index)\n\n                          setOffset(record.index);\n                          goUpdateLoop(record.index);\n\n                        case 6:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n\n                return function (_x6) {\n                  return _ref6.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n                goUpdateLoop(overrideOffset);\n              });\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function goUpdateLoop(_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var goCreateLoop = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/createNextBatchItem?_vercel_no_cache=1\", requestOptions).then( /*#__PURE__*/function () {\n                var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(response) {\n                  return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          // let records = await response.json()\n                          getVaultsForBatch(batchId.toString(), function () {\n                            setTimeout(function () {\n                              goCreateLoop();\n                            }, 10000);\n                          });\n\n                        case 1:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }));\n\n                return function (_x7) {\n                  return _ref8.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n                goCreateLoop();\n              });\n\n            case 2:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function goCreateLoop() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var getBatches = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/batches\", requestOptions).then( /*#__PURE__*/function () {\n                var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(response) {\n                  var records;\n                  return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          _context9.next = 2;\n                          return response.json();\n\n                        case 2:\n                          records = _context9.sent;\n                          console.log(records);\n                          setBatches(records);\n                          setState({\n                            loaded: true\n                          });\n\n                        case 6:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }));\n\n                return function (_x8) {\n                  return _ref10.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 2:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function getBatches() {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var doRefresh = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(needle, haystack, offset) {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/bulkRefresh?live=true&needle=\".concat(needle, \"&haystack=\").concat(haystack, \"&start=\").concat(offset), requestOptions).then( /*#__PURE__*/function () {\n                var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(response) {\n                  var record;\n                  return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n                    while (1) {\n                      switch (_context11.prev = _context11.next) {\n                        case 0:\n                          _context11.next = 2;\n                          return response.json();\n\n                        case 2:\n                          record = _context11.sent;\n                          doRefresh(needle, haystack, record.index + 1);\n                          setUpdateCount(record.index);\n                          setState({\n                            loaded: true\n                          });\n\n                        case 6:\n                        case \"end\":\n                          return _context11.stop();\n                      }\n                    }\n                  }, _callee11);\n                }));\n\n                return function (_x12) {\n                  return _ref12.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n                doRefresh(needle, haystack, offset);\n              });\n\n            case 2:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    return function doRefresh(_x9, _x10, _x11) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  var startBatch = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n      var myHeaders, raw, requestOptions;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append(\"Content-Type\", \"application/json\");\n              raw = JSON.stringify({\n                \"batchId\": batchId\n              });\n              requestOptions = {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw\n              };\n              fetch(EMBLEM_API + \"/startBatch\", requestOptions).then( /*#__PURE__*/function () {\n                var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(response) {\n                  var results;\n                  return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n                    while (1) {\n                      switch (_context13.prev = _context13.next) {\n                        case 0:\n                          _context13.next = 2;\n                          return response.json();\n\n                        case 2:\n                          results = _context13.sent;\n                          location.href = \"/batch?action=view&batch_id=\" + batchId;\n\n                        case 4:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }\n                  }, _callee13);\n                }));\n\n                return function (_x13) {\n                  return _ref14.apply(this, arguments);\n                };\n              }());\n\n            case 5:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    return function startBatch() {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(event) {\n      var myHeaders, jsonData, serializedForm;\n      return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              event.preventDefault();\n              myHeaders = new Headers();\n              myHeaders.append(\"Content-Type\", \"application/json\");\n              _context16.next = 5;\n              return csvToJson(batchData);\n\n            case 5:\n              jsonData = _context16.sent;\n              serializedForm = {\n                batchName: batchName,\n                imageBaseUrl: imageBaseUrl,\n                inscriptionBaseUrl: inscriptionBaseUrl,\n                addressType: addressType,\n                titleTemplate: titleTemplate,\n                descriptionTemplate: descriptionTemplate,\n                total: total,\n                batchId: batchId,\n                batchData: jsonData.data\n              };\n              fetch(EMBLEM_API + '/addBatch', {\n                method: 'POST',\n                headers: myHeaders,\n                body: JSON.stringify(serializedForm)\n              }).then( /*#__PURE__*/function () {\n                var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(response) {\n                  var data;\n                  return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n                    while (1) {\n                      switch (_context15.prev = _context15.next) {\n                        case 0:\n                          _context15.next = 2;\n                          return response.json();\n\n                        case 2:\n                          data = _context15.sent;\n\n                          if (data.id) {\n                            setBatchId(data.id);\n                          }\n\n                        case 4:\n                        case \"end\":\n                          return _context15.stop();\n                      }\n                    }\n                  }, _callee15);\n                }));\n\n                return function (_x15) {\n                  return _ref16.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 8:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16);\n    }));\n\n    return function handleSubmit(_x14) {\n      return _ref15.apply(this, arguments);\n    };\n  }();\n\n  function csvToJson(data) {\n    return new Promise(function (resolve, reject) {\n      readString(data, {\n        worker: true,\n        complete: function complete(results) {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  function parseTemplate(index, template) {\n    var tokens = listTokens(template);\n    var modifiedTitle = template;\n    tokens.forEach(function (item) {\n      var value = item == 'batch_name' ? batchName : item == 'asset_number' ? batchDataJson[index][0] : item == 'inscription_number' ? batchDataJson[index][1] : item == 'inscription_base_url' ? inscriptionBaseUrl : item == 'inscription_hash' ? batchDataJson[index][2] : '';\n      modifiedTitle = modifiedTitle.replace(item, value);\n    });\n    modifiedTitle = modifiedTitle.replaceAll('{', '').replaceAll('}', '');\n    return modifiedTitle;\n  }\n\n  function parseImage(index) {\n    return imageBaseUrl + batchDataJson[index][2];\n  }\n\n  function parseTo(index) {\n    return batchDataJson[index][3];\n  }\n\n  function listTokens(str) {\n    var regex = /\\{(.*?)\\}/g;\n    var result;\n    var items = [];\n\n    while (result = regex.exec(str)) {\n      items = items.concat(result[1].split(','));\n    }\n\n    return items;\n  }\n\n  function isValidBatchData(statusCheck) {\n    if (!batchDataJson) return false;\n    var hasRows = batchDataJson.length > 1;\n    if (!hasRows) return false; // alert(JSON.stringify(batchDataJson))\n\n    var correctColumns = batchDataJson[0].length == 4;\n    var correctHeaders = batchDataJson[0][0] == 'asset_number' && batchDataJson[0][1] == 'inscription_number' && batchDataJson[0][2] == 'inscription_hash' && batchDataJson[0][3] == 'to';\n    var batchNotStarted = status == statusCheck || 'configure';\n    return hasRows && correctColumns && correctHeaders && batchNotStarted;\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }\n  }, action && (action == 'edit' || action == 'add') ? __jsx(React.Fragment, null, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 15\n    }\n  }, __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 17\n    }\n  }, \" All Batch Jobs\"), batchId ? __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=view&batch_id=\" + batchId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 19\n    }\n  }, \" View Job\") : null), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 17\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 19\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"batch-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 23\n    }\n  }, \"Batch Name\"), __jsx(Input, {\n    type: \"text\",\n    id: \"batch-name\",\n    \"aria-describedby\": \"batch-name-text\",\n    value: batchName,\n    onChange: function onChange(e) {\n      return setBatchName(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"batch-name-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 23\n    }\n  }, \"Give it a unique name for this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"image-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 23\n    }\n  }, \"Image Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"image-base-url\",\n    \"aria-describedby\": \"image-base-url-text\",\n    value: imageBaseUrl,\n    onChange: function onChange(e) {\n      return setImageBaseUrl(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"image-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 23\n    }\n  }, \"Enter the base url for the images in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"inscription-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 23\n    }\n  }, \"Inscription Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"inscription-base-url\",\n    \"aria-describedby\": \"inscription-base-url-text\",\n    value: inscriptionBaseUrl,\n    onChange: function onChange(e) {\n      return setInscriptionBaseUrl(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"inscription-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 23\n    }\n  }, \"Enter the base url for the inscriptions in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"address-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 23\n    }\n  }, \"Address Type\"), __jsx(Input, {\n    type: \"text\",\n    id: \"address-type\",\n    \"aria-describedby\": \"address-type-text\",\n    value: addressType,\n    onChange: function onChange(e) {\n      return setAddressType(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"address-type-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 23\n    }\n  }, \"Enter the address type for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"title-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 23\n    }\n  }, \"Title Template\"), __jsx(Textarea, {\n    id: \"title-template\",\n    fontSize: 'x-small',\n    size: \"lg\",\n    \"aria-describedby\": \"title-template-text\",\n    minLength: 3,\n    maxLength: 4024,\n    value: titleTemplate,\n    onChange: function onChange(e) {\n      return setTitleTemplate(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"title-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 23\n    }\n  }, \"Enter the title template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 23\n    }\n  }, \"Description Template\"), __jsx(Textarea, {\n    id: \"description-template\",\n    fontSize: 'x-small',\n    size: \"lg\",\n    \"aria-describedby\": \"description-template-text\",\n    minLength: 3,\n    maxLength: 1024,\n    value: descriptionTemplate,\n    onChange: function onChange(e) {\n      return setDescriptionTemplate(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"description-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 23\n    }\n  }, \"Enter the description template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 23\n    }\n  }, \"Total\"), __jsx(Input, {\n    isDisabled: true,\n    type: \"number\",\n    id: \"total\",\n    \"aria-describedby\": \"total-text\",\n    value: total,\n    onChange: function onChange(e) {\n      return setTotal(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"total-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 23\n    }\n  }, \"Enter the total number of items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 23\n    }\n  }, \"Records\"), __jsx(Textarea, {\n    id: \"records\",\n    size: \"lg\",\n    fontSize: 'xx-small',\n    \"aria-describedby\": \"records-text\",\n    minLength: 3,\n    value: batchData,\n    onChange: /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(e) {\n        var jsonData;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                setBatchData(e.target.value);\n                _context17.next = 3;\n                return csvToJson(e.target.value);\n\n              case 3:\n                jsonData = _context17.sent;\n                setBatchDataJson(jsonData.data);\n                setTotal(jsonData.data.length > 1 ? (jsonData.data.length - 1).toString() : '0');\n\n              case 6:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17);\n      }));\n\n      return function (_x16) {\n        return _ref17.apply(this, arguments);\n      };\n    }(),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"records-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 23\n    }\n  }, \"Enter the CSV rows from the helper spreadsheet\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"15px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 19\n    }\n  }, __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    isDisabled: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 21\n    }\n  }, \"Save Batch Job\"), __jsx(Button, {\n    mt: 4,\n    isDisabled: !isValidBatchData('configure') || !isValidBatchData('running'),\n    onClick: startBatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 21\n    }\n  }, \"Start Batch Job\")), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"15px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 19\n    }\n  }, !isValidBatchData('running') && isValidBatchData('configure') ? __jsx(Select, {\n    id: \"type-selector\",\n    w: \"100%\",\n    value: demoIndex,\n    onChange: function onChange(e) {\n      setDemoIndex(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 23\n    }\n  }, __jsx(\"option\", {\n    value: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 25\n    }\n  }, \"Select # to preview\"), batchDataJson.map(function (item, index) {\n    console.log(item);\n\n    if (index > 0) {\n      return __jsx(\"option\", {\n        value: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 31\n        }\n      }, parseTemplate(index, titleTemplate));\n    }\n  })) : null), __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 19\n    }\n  }, demoIndex && demoIndex > -1 ? __jsx(React.Fragment, null, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 25\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: parseTemplate(demoIndex, descriptionTemplate),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 27\n    }\n  })), __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: parseImage(demoIndex),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 25\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 25\n    }\n  }, \"Vault For: \", parseTo(demoIndex))) : null))))) : action == 'list' ? __jsx(Box, {\n    maxW: \"lg\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 11\n    }\n  }, batches.length > 0 ? batches.map(function (item, index) {\n    return __jsx(Stack, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 17\n      }\n    }, __jsx(Link, {\n      margin: \"10px\",\n      href: \"/batch?action=edit&batch_id=\" + item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 19\n      }\n    }, \" \", item.batch_name, \" (\", item.status, \")\"));\n  }) : null, __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 11\n    }\n  }, \" Add New Batch\")) : action == 'view' ? __jsx(Box, {\n    maxW: \"lg\",\n    margin: \"10px\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 11\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 13\n    }\n  }, __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 17\n    }\n  }, \" All Batch Jobs\"), batchId ? __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=edit&batch_id=\" + batchId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 19\n    }\n  }, \" Edit Job\") : null, __jsx(Text, {\n    padding: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 17\n    }\n  }, batchVaults.length, \" of \", total, \" vaults created\"), __jsx(Text, {\n    padding: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 17\n    }\n  }, updateCount, \" of \", total, \" vaults updated\"), __jsx(Link, {\n    padding: \"10px\",\n    isDisabled: running,\n    onClick: function onClick() {\n      goCreateLoop();\n      setRunning(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 17\n    }\n  }, \"Start Mint Loop - \"), __jsx(Link, {\n    padding: \"10px\",\n    isDisabled: running,\n    onClick: function onClick() {\n      goUpdateLoop(offset);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 17\n    }\n  }, \"Start Update Loop\"), __jsx(Link, {\n    padding: \"10px\",\n    isDisabled: running,\n    onClick: function onClick() {\n      doRefresh(batchName, 'name', offset);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 17\n    }\n  }, \"Start Refresh Loop\"), __jsx(Link, {\n    padding: \"10px\",\n    href: \"\".concat(location.href.replace(\"offset=\".concat(offset), \"offset=\".concat(offset + 600))),\n    isDisabled: running,\n    onClick: function onClick() {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 17\n    }\n  }, \"spawn offset\")), __jsx(Textarea, {\n    id: \"addresses\",\n    size: \"lg\",\n    fontSize: 'xx-small',\n    \"aria-describedby\": \"addresses-text\",\n    minLength: 3,\n    value: JSON.stringify(vaultAddresses),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 17\n    }\n  }), __jsx(Link, {\n    padding: \"10px\",\n    isDisabled: running,\n    onClick: function onClick() {\n      goCreateLoop();\n      setRunning(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 17\n    }\n  }, \"Start Mint Loop\")) : null));\n}\n\n_s(Batch, \"PKI8XVKlsBuDUNE569J/p5DJmZU=\", false, function () {\n  return [useRouter, usePapaParse];\n});\n\n_c = Batch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Batch\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx"],"names":["FormControl","FormLabel","FormHelperText","Input","Stack","Box","Flex","Text","Textarea","Button","Link","Select","useRouter","useEffect","useState","EMBLEM_API","Loader","usePapaParse","ReactMarkdown","gfm","Embed","Batch","query","running","setRunning","Number","offset","setOffset","status","setStatus","batches","setBatches","demoIndex","setDemoIndex","action","setAction","batchVaults","setBatchVaults","updateCount","setUpdateCount","batchName","setBatchName","imageBaseUrl","setImageBaseUrl","inscriptionBaseUrl","setInscriptionBaseUrl","addressType","setAddressType","titleTemplate","setTitleTemplate","descriptionTemplate","setDescriptionTemplate","total","setTotal","batchData","setBatchData","batchDataJson","setBatchDataJson","batch_id","batchId","setBatchId","loaded","state","setState","vaultAddresses","setVaultAddresses","readString","jsonToCSV","getBatch","getVaultsForBatch","toString","getBatches","requestOptions","method","fetch","then","response","json","record","batch_name","image_base_url","inscription_base_url","address_type","title_template","description_template","parsedJson","JSON","parse","data","csvData","length","err","console","log","cb","records","exported_records","map","to","tokenId","address","addresses","filter","addy","coin","reverse","goUpdateLoop","overrideOffset","index","goCreateLoop","setTimeout","doRefresh","needle","haystack","startBatch","myHeaders","Headers","append","raw","stringify","headers","body","results","location","href","handleSubmit","event","preventDefault","csvToJson","jsonData","serializedForm","id","Promise","resolve","reject","worker","complete","parseTemplate","template","tokens","listTokens","modifiedTitle","forEach","item","value","replace","replaceAll","parseImage","parseTo","str","regex","result","items","exec","concat","split","isValidBatchData","statusCheck","hasRows","correctColumns","correctHeaders","batchNotStarted","e","target"],"mappings":"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","sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Stack,\n  Box,\n  Flex,\n  Text,\n  Textarea,\n  Button,\n  Link,\n  Select\n} from '@chakra-ui/core'\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport Loader from 'react-loader'\nimport { usePapaParse } from 'react-papaparse';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm'\nimport Embed from './Embed';\n\nexport default function Batch() {\n  const { query } = useRouter()\n  const [running, setRunning] = useState(false)\n  const [offset, setOffset] = useState(Number(query.offset) || 0)\n  const [status, setStatus] = useState('configure')\n  const [batches, setBatches] = useState([])\n  const [demoIndex, setDemoIndex] = useState(-1)\n  const [action, setAction] = useState(query.action || 'list')\n  const [batchVaults, setBatchVaults] = useState([])\n  const [updateCount, setUpdateCount] = useState(0)\n  const [batchName, setBatchName] = useState(\"\");\n  const [imageBaseUrl, setImageBaseUrl] = useState(\"\");\n  const [inscriptionBaseUrl, setInscriptionBaseUrl] = useState(\"\");\n  const [addressType, setAddressType] = useState(\"\");\n  const [titleTemplate, setTitleTemplate] = useState(\"\");\n  const [descriptionTemplate, setDescriptionTemplate] = useState(\"\");\n  const [total, setTotal] = useState(\"\");\n  const [batchData, setBatchData] = useState(\"\");\n  const [batchDataJson, setBatchDataJson] = useState([]);\n  const [batchId, setBatchId] = useState(query.batch_id || \"\")\n  const [state, setState] = useState({ loaded: false })\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const { readString, jsonToCSV } = usePapaParse();\n\n\n  useEffect(() => {\n    if (!state.loaded && batchId && !batchName) {\n      getBatch()\n      getVaultsForBatch(batchId.toString(), ()=>{})\n    } else if (!state.loaded && !batchId && !batchName && action == 'list') {\n      getBatches()\n    }  else {\n      setState({ loaded: true })\n    }\n  }, [])\n\n  const getBatch = async () => {\n    var requestOptions: any = {\n      method: 'GET'\n    };\n\n    fetch(EMBLEM_API + `/batch?batchId=${batchId}`, requestOptions).then(async (response) => {\n      let record = await response.json()\n      setState({ loaded: true })\n      setBatchName(record.batch_name)\n      setImageBaseUrl(record.image_base_url)\n      setInscriptionBaseUrl(record.inscription_base_url)\n      setAddressType(record.address_type)\n      setStatus(record.status)\n      setTitleTemplate(record.title_template)\n      setDescriptionTemplate(record.description_template)\n      let parsedJson = JSON.parse(record.data)\n      setBatchDataJson(parsedJson)\n      let csvData = jsonToCSV(parsedJson)\n      setBatchData(csvData)\n      setTotal((parsedJson.length - 1).toString())\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const getVaultsForBatch = async (batchId: string, cb: () => any)=>{\n    // alert(0)\n    var requestOptions = {\n      method: 'GET'\n    };\n    \n    fetch(EMBLEM_API + \"/batchVaults/\"+batchId+\"?_vercel_no_cache=1\", requestOptions)\n    .then(async (response) => {\n      let records = await response.json()\n      setBatchVaults(records)\n      let exported_records = records.map(record=>{ \n        console.log(exported_records)\n        return { to: record.to, tokenId: record.tokenId, address: record.addresses.filter(addy=>{return addy.coin == 'TAP'})[0].address }})// address: record.addresses.filter(addy=>{return addy.coin == 'LTC'})[0].address, tokenId: record.tokenId, owner: record.to\n      // let addresses = records.map(record=>{ return {tokenId: record.tokenId}})\n      \n      let csvData: any = jsonToCSV(exported_records.reverse())\n      setVaultAddresses(csvData)\n      console.log(csvData)\n      return cb()\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const goUpdateLoop = async(overrideOffset: number)=>{\n    var requestOptions = {\n      method: 'GET'\n    };\n    \n    fetch(EMBLEM_API + `/updateNextBatchItem/${batchId}?offset=${overrideOffset || offset}&_vercel_no_cache=1`, requestOptions)\n    .then(async (response) => {\n      let record = await response.json()\n      setUpdateCount(record.index)\n      // alert(record.index)\n      setOffset(record.index)\n      goUpdateLoop(record.index)\n    }).catch(err => {\n      console.log(err)\n      goUpdateLoop(overrideOffset)\n    })\n  }\n\n\n  const goCreateLoop = async ()=>{\n    var requestOptions = {\n      method: 'GET'\n    };\n    \n    fetch(EMBLEM_API + \"/createNextBatchItem?_vercel_no_cache=1\", requestOptions)\n    .then(async (response) => {\n      // let records = await response.json()\n      getVaultsForBatch(batchId.toString(), ()=>{\n        setTimeout(()=>{goCreateLoop()}, 10000)\n      })\n    }).catch(err => {\n      console.log(err)\n      goCreateLoop()\n    })\n  }\n\n  const getBatches = async () => {\n    var requestOptions: any = {\n      method: 'GET'\n    };\n\n    fetch(EMBLEM_API + `/batches`, requestOptions).then(async (response) => {\n      let records = await response.json()\n      console.log(records)\n      setBatches(records)\n      setState({ loaded: true })\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const doRefresh = async (needle: string, haystack: string, offset: number) => {\n    var requestOptions: any = {\n      method: 'GET'\n    };\n\n    fetch(EMBLEM_API + `/bulkRefresh?live=true&needle=${needle}&haystack=${haystack}&start=${offset}`, requestOptions).then(async (response) => {\n      let record= await response.json()\n      doRefresh(needle, haystack, record.index + 1)\n      setUpdateCount(record.index)\n      setState({ loaded: true })\n    }).catch(err => {\n      console.log(err)\n      doRefresh(needle, haystack, offset)\n    })\n  }\n\n  \n\n\n  const startBatch = async () =>{\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    var raw = JSON.stringify({\n      \"batchId\": batchId\n    });\n\n    var requestOptions: any = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n    };\n\n    fetch(EMBLEM_API + \"/startBatch\", requestOptions).then(async (response) => {\n      let results = await response.json()\n      location.href=\"/batch?action=view&batch_id=\"+batchId\n    })\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    let jsonData: any = await csvToJson(batchData)\n    const serializedForm = {\n      batchName,\n      imageBaseUrl,\n      inscriptionBaseUrl,\n      addressType,\n      titleTemplate,\n      descriptionTemplate,\n      total,\n      batchId,\n      batchData: jsonData.data\n\n    };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm),\n    }).then(async (response) => {\n      let data = await response.json()\n      if (data.id) {\n        setBatchId(data.id)\n      }\n    }).catch(err => {\n      console.log(err)\n    })\n  };\n\n  function csvToJson(data) {\n    return new Promise((resolve, reject) => {\n      readString(data, {\n        worker: true,\n        complete: (results: any) => {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  function parseTemplate(index, template){\n    let tokens = listTokens(template)\n    let modifiedTitle = template\n    tokens.forEach((item)=>{\n      let value = \n      item == 'batch_name'? batchName:\n      item == 'asset_number'? batchDataJson[index][0]:\n      item == 'inscription_number'? batchDataJson[index][1]:\n      item == 'inscription_base_url'? inscriptionBaseUrl:\n      item == 'inscription_hash'? batchDataJson[index][2]:\n      ''\n      modifiedTitle = modifiedTitle.replace(item, value)\n    })\n    modifiedTitle = modifiedTitle.replaceAll('{', '').replaceAll('}', '')\n    return modifiedTitle\n  }\n\n  function parseImage(index) {\n    return imageBaseUrl + batchDataJson[index][2]\n  }\n\n  function parseTo(index) {\n    return batchDataJson[index][3]\n  }\n\n  function listTokens(str) {\n    let regex = /\\{(.*?)\\}/g;\n    let result;\n    let items = [];\n    \n    while (result = regex.exec(str)) {\n      items = items.concat(result[1].split(','))\n    }\n  \n    return items;\n  }\n\n  function isValidBatchData(statusCheck) {\n    if (!batchDataJson) return false\n    let hasRows = batchDataJson.length > 1\n    if (!hasRows) return false\n    // alert(JSON.stringify(batchDataJson))\n    let correctColumns = batchDataJson[0].length == 4\n    let correctHeaders = batchDataJson[0][0] == 'asset_number' && batchDataJson[0][1] == 'inscription_number' && batchDataJson[0][2] == 'inscription_hash' && batchDataJson[0][3] == 'to'\n    let batchNotStarted = status == statusCheck || 'configure'\n    return hasRows && correctColumns && correctHeaders && batchNotStarted\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n        {action && (action == 'edit' || action == 'add') ? (\n          <>\n            <Stack>\n              <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n              <Stack>\n                <Link margin=\"10px\" href={\"/batch?action=list\"}> All Batch Jobs</Link>\n                {batchId? (\n                  <Link margin=\"10px\" href={\"/batch?action=view&batch_id=\"+batchId}> View Job</Link>\n                ): null}\n              </Stack>\n                <form onSubmit={handleSubmit}>\n                  <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"batch-name\">Batch Name</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"batch-name\"\n                        aria-describedby=\"batch-name-text\"\n                        value={batchName}\n                        onChange={(e) => setBatchName(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"batch-name-text\">Give it a unique name for this batch.</FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"image-base-url\">Image Base Url</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"image-base-url\"\n                        aria-describedby=\"image-base-url-text\"\n                        value={imageBaseUrl}\n                        onChange={(e) => setImageBaseUrl(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"image-base-url-text\">\n                        Enter the base url for the images in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"inscription-base-url\">Inscription Base Url</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"inscription-base-url\"\n                        aria-describedby=\"inscription-base-url-text\"\n                        value={inscriptionBaseUrl}\n                        onChange={(e) => setInscriptionBaseUrl(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"inscription-base-url-text\">\n                        Enter the base url for the inscriptions in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"address-type\">Address Type</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"address-type\"\n                        aria-describedby=\"address-type-text\"\n                        value={addressType}\n                        onChange={(e) => setAddressType(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"address-type-text\">\n                        Enter the address type for the items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"title-template\">Title Template</FormLabel>\n                      <Textarea\n                        id=\"title-template\"\n                        fontSize={'x-small'}\n                        size=\"lg\"\n                        aria-describedby=\"title-template-text\"\n                        minLength={3}\n                        maxLength={4024}\n                        value={titleTemplate}\n                        onChange={(e) => setTitleTemplate(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"title-template-text\">\n                        Enter the title template for the items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"description-template\">Description Template</FormLabel>\n                      <Textarea\n                        id=\"description-template\"\n                        fontSize={'x-small'}\n                        size=\"lg\"\n                        aria-describedby=\"description-template-text\"\n                        minLength={3}\n                        maxLength={1024}\n                        value={descriptionTemplate}\n                        onChange={(e) => setDescriptionTemplate(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"description-template-text\">\n                        Enter the description template for the items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"total\">Total</FormLabel>\n                      <Input\n                        isDisabled={true}\n                        type=\"number\"\n                        id=\"total\"\n                        aria-describedby=\"total-text\"\n                        value={total}\n                        onChange={(e) => setTotal(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"total-text\">\n                        Enter the total number of items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"description-template\">Records</FormLabel>\n                      <Textarea\n                        id=\"records\"\n                        size=\"lg\"\n                        fontSize={'xx-small'}\n                        aria-describedby=\"records-text\"\n                        minLength={3}\n                        value={batchData}\n                        onChange={async (e) => {\n                          setBatchData(e.target.value)\n                          let jsonData: any = await csvToJson(e.target.value)\n                          setBatchDataJson(jsonData.data)\n                          setTotal(jsonData.data.length > 1 ? (jsonData.data.length - 1).toString() : '0')\n                        }}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"records-text\">\n                        Enter the CSV rows from the helper spreadsheet\n                      </FormHelperText>\n                    </FormControl>\n                  </Stack>\n                  <Stack direction=\"row\" align=\"flex-start\" padding=\"15px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <Button mt={4} type=\"submit\" isDisabled={false} >\n                      Save Batch Job\n                    </Button>\n                    <Button mt={4} isDisabled={!isValidBatchData('configure') || !isValidBatchData('running')} onClick={startBatch}>\n                      Start Batch Job\n                    </Button>\n                  </Stack>\n                  <Stack direction=\"row\" align=\"flex-start\" padding=\"15px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    {!isValidBatchData('running') && isValidBatchData('configure')? (\n                      <Select id=\"type-selector\" w=\"100%\" value={demoIndex}\n                      onChange={(e)=>{\n                        setDemoIndex(Number(e.target.value))\n                      }}\n                      >\n                        <option value=\"-1\" >Select # to preview</option>\n                        {batchDataJson.map((item, index)=>{\n                          console.log(item)\n                          if (index > 0) {\n                            return (\n                              <option value={index}>{parseTemplate(index, titleTemplate)}</option> \n                            )\n                          }\n                        })}\n                      </Select>\n                    ): null}                  \n                  </Stack>\n                  <Stack>\n                    {demoIndex && demoIndex > -1 ? (\n                      <>\n                        <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" className=\"md\">\n                          <ReactMarkdown plugins={[gfm]} children={parseTemplate(demoIndex, descriptionTemplate)} />\n                        </Text>\n                        <Embed className=\"d-block w-100 NFT-image\" url={parseImage(demoIndex)}/>\n                        <Text>Vault For: {parseTo(demoIndex)}</Text>\n                      </>\n                    ) : null}\n                  </Stack>\n                </form>\n              </Box>\n            </Stack>\n          </>\n        ) : action == 'list'? (\n          <Box maxW=\"lg\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n            {batches.length> 0 ? batches.map((item, index)=>{\n              return (\n                <Stack>\n                  <Link margin=\"10px\" href={\"/batch?action=edit&batch_id=\"+item.id}> {item.batch_name} ({item.status})</Link>\n                </Stack>\n              )\n            }):null}\n          <Link margin=\"10px\" href={\"/batch?action=add\"}> Add New Batch</Link>\n          </Box>\n        ): action == 'view'? (\n          <Box maxW=\"lg\"  margin=\"10px\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n            <Stack>\n                <Link margin=\"10px\" href={\"/batch?action=list\"}> All Batch Jobs</Link>\n                {batchId? (\n                  <Link margin=\"10px\" href={\"/batch?action=edit&batch_id=\"+batchId}> Edit Job</Link>\n                ): null}\n                <Text padding=\"10px\">{batchVaults.length} of {total} vaults created</Text>\n                <Text padding=\"10px\">{updateCount} of {total} vaults updated</Text>\n                <Link padding=\"10px\" isDisabled={running} onClick={()=>{goCreateLoop();setRunning(true)}}>Start Mint Loop - </Link>\n                <Link padding=\"10px\" isDisabled={running} onClick={()=>{goUpdateLoop(offset)}}>Start Update Loop</Link>\n                <Link padding=\"10px\" isDisabled={running} onClick={()=>{doRefresh(batchName, 'name', offset)}}>Start Refresh Loop</Link>\n                <Link padding=\"10px\" href={`${location.href.replace(`offset=${offset}`, `offset=${offset+600}`)}`} isDisabled={running} onClick={()=>{}}>spawn offset</Link>\n              </Stack>\n            \n              {/* {batchDataJson.map((item, index)=>{\n                  // if (index > 0) {\n                    \n                    if (batchVaults[index]) {\n                      let address = batchVaults[index].addresses.filter(addy=>{return addy.coin == addressType})[0].address\n                      // vaultAddresses.push(address)\n                      return (\n                        <Stack padding={\"10px\"}>\n                          <Link href={'/nft?id='+batchVaults[index].tokenId}>{batchVaults[index].name}</Link>\n                          <Text>{batchVaults[index].tokenId}</Text>\n                          <Text fontSize={'xx-small'}>{address}</Text>\n                        </Stack>\n                      )\n                    }\n                  // }\n                })} */}\n                <Textarea\n                        id=\"addresses\"\n                        size=\"lg\"\n                        fontSize={'xx-small'}\n                        aria-describedby=\"addresses-text\"\n                        minLength={3}\n                        value={JSON.stringify(vaultAddresses)}\n                        autoComplete=\"off\"\n                      />\n                <Link padding=\"10px\" isDisabled={running} onClick={()=>{goCreateLoop();setRunning(true)}}>Start Mint Loop</Link>\n                \n          </Box>\n        ): null}\n        \n      </Flex>\n\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}