{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/TradeControls.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component, useState } from 'react';\nimport { Box, Button, Select } from '@chakra-ui/core';\nimport { contractAddresses } from '../constants';\nimport { TransactionToast } from './TransactionToast';\nexport class TradeControls extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const {\n      0: offeringTokenId,\n      1: setOfferingTokenId\n    } = useState(null);\n    const {\n      0: offeringTokenAllowed,\n      1: setOfferingTokenAllowed\n    } = useState(null);\n    const {\n      0: acceptingOfferingIndex,\n      1: setAcceptingOfferIndex\n    } = useState(null);\n    const {\n      0: acceptingTokenAllowed,\n      1: setAcceptingTokenAllowed\n    } = useState(null);\n    const {\n      0: acceptingTokenId,\n      1: setAcceptingTokenId\n    } = useState(null);\n    const {\n      0: hash,\n      1: setHash\n    } = useState(null);\n\n    async function checkOfferingAllowance(tokenId) {\n      let allowed = await this.props.nftContract.getApproved(tokenId);\n      setOfferingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\");\n    }\n\n    async function checkAcceptingAllowance(tokenId) {\n      let allowed = await this.props.nftContract.getApproved(tokenId);\n      setAcceptingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\");\n    }\n\n    const approveOffer = tokenId => {\n      // debugger\n      console.log(\"checking offer for\", tokenId);\n      this.props.nftContract.approve(contractAddresses.nftrade[this.props.chainId], tokenId && typeof tokenId === \"string\" ? tokenId : offeringTokenId).then(({\n        hash\n      }) => {\n        setHash(hash);\n      }); // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    };\n\n    const makeOffer = tokenId => {\n      ;\n      this.props.tradeContract.addOffer(contractAddresses.emblemVault[this.props.chainId], offeringTokenId, contractAddresses.emblemVault[this.props.chainId], tokenId).then(({\n        hash\n      }) => {\n        setHash(hash);\n      }); // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    };\n\n    const acceptOffer = () => {\n      ;\n      this.props.tradeContract.acceptOffer(contractAddresses.emblemVault[this.props.chainId], acceptingTokenId, Number(acceptingOfferingIndex)).then(({\n        hash\n      }) => {\n        setHash(hash);\n      }); // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    };\n\n    const rejectOffer = () => {\n      ;\n      this.props.tradeContract.rejectOffer(contractAddresses.emblemVault[this.props.chainId], acceptingTokenId, Number(acceptingOfferingIndex)).then(({\n        hash\n      }) => {\n        setHash(hash);\n      }); // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    };\n\n    const flexSettings = {\n      flex: '1',\n      minW: '300px',\n      maxW: '300px',\n      borderWidth: '1px',\n      color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: this.props.vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n    return __jsx(Box, _extends({}, flexSettings, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }), !this.props.vault.mine ? __jsx(Select, {\n      p: 2,\n      m: 2,\n      w: \"94%\",\n      placeholder: \"Offer NFT\",\n      onChange: e => {\n        let tokenId = e.target.value; // console.log(e.target.value)\n\n        setOfferingTokenId(tokenId);\n        checkOfferingAllowance(tokenId);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 35\n      }\n    }, this.props.myVaults.map((vault, index) => {\n      return __jsx(\"option\", {\n        key: index,\n        value: this.props.vault.tokenId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 20\n        }\n      }, vault.name);\n    })) : __jsx(Select, {\n      p: 2,\n      m: 2,\n      w: \"94%\",\n      placeholder: \"Offers\",\n      onChange: e => {\n        let index = e.target.value;\n        console.log(e.target.value);\n        setAcceptingOfferIndex(index);\n        setAcceptingTokenId(this.props.vault.tokenId);\n        checkAcceptingAllowance(this.props.vault.tokenId);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }, this.props.vault.offers.map((offer, index) => {\n      return __jsx(\"option\", {\n        key: index,\n        value: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 22\n        }\n      }, Number(offer.tokenId));\n    })), offeringTokenId && !this.props.vault.mine ? offeringTokenAllowed ? __jsx(Button, {\n      m: 2,\n      onClick: () => {\n        makeOffer(this.props.vault.tokenId);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 77\n      }\n    }, \"Make Offer\") : __jsx(Button, {\n      m: 2,\n      w: \"94%\",\n      onClick: approveOffer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 34\n      }\n    }, \"Approve\") : null, acceptingOfferingIndex && this.props.vault.mine ? acceptingTokenAllowed ? __jsx(Button, {\n      m: 2,\n      w: \"94%\",\n      onClick: () => {\n        acceptOffer();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 84\n      }\n    }, \"Accept Offer\") : __jsx(Button, {\n      m: 2,\n      onClick: () => {\n        approveOffer(this.props.vault.tokenId);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 36\n      }\n    }, \"Approve\") : null, acceptingOfferingIndex && this.props.vault.mine ? __jsx(Button, {\n      m: 2,\n      w: \"94%\",\n      onClick: () => {\n        rejectOffer();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 60\n      }\n    }, \"Reject Offer\") : null, hash ? __jsx(TransactionToast, {\n      hash: hash,\n      onComplete: () => {\n        setHash(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }\n    }) : null);\n  }\n\n}\nexport default TradeControls;","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/TradeControls.tsx"],"names":["React","Component","useState","Box","Button","Select","contractAddresses","TransactionToast","TradeControls","constructor","props","render","offeringTokenId","setOfferingTokenId","offeringTokenAllowed","setOfferingTokenAllowed","acceptingOfferingIndex","setAcceptingOfferIndex","acceptingTokenAllowed","setAcceptingTokenAllowed","acceptingTokenId","setAcceptingTokenId","hash","setHash","checkOfferingAllowance","tokenId","allowed","nftContract","getApproved","checkAcceptingAllowance","approveOffer","console","log","approve","nftrade","chainId","then","makeOffer","tradeContract","addOffer","emblemVault","acceptOffer","Number","rejectOffer","flexSettings","flex","minW","maxW","borderWidth","color","mx","mb","rounded","overflow","borderColor","vault","status","cursor","mine","e","target","value","myVaults","map","index","name","offers","offer"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react'\nimport { Box, Flex, Text, Link, Image, Stack, Button, FormControl, FormLabel, Input, FormHelperText, Select } from '@chakra-ui/core'\nimport { Contract } from '@ethersproject/contracts';\nimport { contractAddresses } from '../constants';\nimport { TransactionToast } from './TransactionToast';\n\n\ntype Vault = {\n  name: string,\n  tokenId: string\n}\ntype PropSettings = {\n  vault: {\n    mine: boolean,\n    status: string,\n    tokenId: string,\n    name: string,\n    offers: Array<Vault>\n  },\n  myVaults: Array<Vault>,\n  nftContract: Contract,\n  tradeContract: Contract,\n  chainId: number\n}\n\n\n\nexport class TradeControls extends Component<PropSettings> {\n\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    const [offeringTokenId, setOfferingTokenId] = useState(null)\n    const [offeringTokenAllowed, setOfferingTokenAllowed] = useState(null)\n    const [acceptingOfferingIndex, setAcceptingOfferIndex] = useState(null)\n    const [acceptingTokenAllowed, setAcceptingTokenAllowed] = useState(null)\n    const [acceptingTokenId, setAcceptingTokenId] = useState(null)\n    const [hash, setHash] = useState(null)\n\n    async function checkOfferingAllowance(tokenId) {\n      let allowed = await this.props.nftContract.getApproved(tokenId)\n      setOfferingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\")\n    }\n\n    async function checkAcceptingAllowance(tokenId) {\n      let allowed = await this.props.nftContract.getApproved(tokenId)\n      setAcceptingTokenAllowed(allowed != \"0x0000000000000000000000000000000000000000\")\n    }\n\n    const approveOffer = (tokenId) => {\n      // debugger\n      console.log(\"checking offer for\", tokenId)\n        ; (this.props.nftContract as Contract)\n          .approve(contractAddresses.nftrade[this.props.chainId], (tokenId && typeof tokenId === \"string\" ? tokenId : offeringTokenId))\n          .then(({ hash }: { hash: string }) => {\n            setHash(hash)\n          })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    }\n\n    const makeOffer = (tokenId) => {\n      ; (this.props.tradeContract as Contract)\n        .addOffer(contractAddresses.emblemVault[this.props.chainId], offeringTokenId, contractAddresses.emblemVault[this.props.chainId], tokenId)\n        .then(({ hash }: { hash: string }) => {\n          setHash(hash)\n        })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    }\n\n    const acceptOffer = () => {\n      ; (this.props.tradeContract as Contract)\n        .acceptOffer(contractAddresses.emblemVault[this.props.chainId], acceptingTokenId, Number(acceptingOfferingIndex))\n        .then(({ hash }: { hash: string }) => {\n          setHash(hash)\n        })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    }\n\n    const rejectOffer = () => {\n      ; (this.props.tradeContract as Contract)\n        .rejectOffer(contractAddresses.emblemVault[this.props.chainId], acceptingTokenId, Number(acceptingOfferingIndex))\n        .then(({ hash }: { hash: string }) => {\n          setHash(hash)\n        })\n      // .catch((error: ErrorWithCode) => {\n      //   if (error?.code == 4001) {\n      //     setApproving(false)\n      //   }\n      // })\n    }\n\n    const flexSettings = {\n      flex: '1',\n      minW: '300px',\n      maxW: '300px',\n      borderWidth: '1px',\n      color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: this.props.vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer',\n    }\n    return (\n      <Box {...flexSettings}>\n        {!this.props.vault.mine ? <Select p={2} m={2} w=\"94%\" placeholder=\"Offer NFT\" onChange={e => {\n          let tokenId = e.target.value; // console.log(e.target.value)\n\n          setOfferingTokenId(tokenId);\n          checkOfferingAllowance(tokenId);\n        }}>\n          {this.props.myVaults.map((vault, index) => {\n            return <option key={index} value={this.props.vault.tokenId}>{vault.name}</option>;\n          })}\n        </Select> : <Select p={2} m={2} w=\"94%\" placeholder=\"Offers\" onChange={e => {\n          let index = e.target.value;\n          console.log(e.target.value);\n          setAcceptingOfferIndex(index);\n          setAcceptingTokenId(this.props.vault.tokenId);\n          checkAcceptingAllowance(this.props.vault.tokenId);\n        }}>\n            {this.props.vault.offers.map((offer, index) => {\n              return <option key={index} value={index}>{Number(offer.tokenId)}</option>;\n            })}\n          </Select>}\n        {offeringTokenId && !this.props.vault.mine ? offeringTokenAllowed ? <Button m={2} onClick={() => {\n          makeOffer(this.props.vault.tokenId);\n        }}>Make Offer</Button> : <Button m={2} w=\"94%\" onClick={approveOffer}>Approve</Button> : null}\n        {acceptingOfferingIndex && this.props.vault.mine ? acceptingTokenAllowed ? <Button m={2} w=\"94%\" onClick={() => {\n          acceptOffer();\n        }}>Accept Offer</Button> : <Button m={2} onClick={() => {\n          approveOffer(this.props.vault.tokenId);\n        }}>Approve</Button> : null}\n        {acceptingOfferingIndex && this.props.vault.mine ? <Button m={2} w=\"94%\" onClick={() => {\n          rejectOffer();\n        }}>Reject Offer</Button> : null}\n        {hash ? (\n      <TransactionToast\n          hash={hash}\n          onComplete={() => {\n            setHash(null)\n          }}\n        />\n      ): null }\n      </Box>\n    );\n  }\n}\nexport default TradeControls"]},"metadata":{},"sourceType":"module"}