{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure, Collapse, FormLabel, useColorMode } from '@chakra-ui/core';\nimport { HStack } from '@chakra-ui/react';\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { isETHAddress } from '../utils';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport CryptoJS from 'crypto-js';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nimport NFTSlideshow from './embed/NFTSlideshow';\nimport CoinBalance from './partials/CoinBalance';\nimport transakSDK from '@transak/transak-sdk';\nconst AddrModal = dynamic(() => import('./AddrModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./AddrModal')],\n    modules: ['./AddrModal']\n  }\n});\nconst KeysModal = dynamic(() => import('./KeysModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./KeysModal')],\n    modules: ['./KeysModal']\n  }\n});\nexport default function Nft() {\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    query\n  } = useRouter();\n  const {\n    0: approved,\n    1: setApproved\n  } = useState(false);\n  const {\n    0: mintPassword,\n    1: setMintPassword\n  } = useState(query.key);\n  const {\n    0: framed,\n    1: setFramed\n  } = useState(query.framed || true);\n  const {\n    0: tokenId,\n    1: setTokenId\n  } = useState(query.id);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState('');\n  const {\n    0: vaultDesc,\n    1: setVaultDesc\n  } = useState('');\n  const {\n    0: vaultImage,\n    1: setVaultImage\n  } = useState('');\n  const {\n    0: vaultValues,\n    1: setVaultValues\n  } = useState([]);\n  const {\n    0: vaultDataValues,\n    1: setVaultDataValues\n  } = useState([]);\n  const {\n    0: vaultAddresses,\n    1: setVaultAddresses\n  } = useState([]);\n  const {\n    0: vaultPrivacy,\n    1: setVaultPrivacy\n  } = useState(false);\n  const {\n    0: vaultTotalValue,\n    1: setVaultTotalValue\n  } = useState(0);\n  const {\n    0: vaultChainId,\n    1: setVaultChainId\n  } = useState(null);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: currCoin,\n    1: setCurrCoin\n  } = useState('');\n  const {\n    0: currAddr,\n    1: setCurrAddr\n  } = useState('');\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: mine,\n    1: setMine\n  } = useState(false);\n  const {\n    0: claiming,\n    1: setClaiming\n  } = useState(false);\n  const {\n    0: status,\n    1: setStatus\n  } = useState('claimed');\n  const {\n    0: claimedBy,\n    1: setClaimedBy\n  } = useState(null);\n  const {\n    0: mnemonic,\n    1: setMnemonic\n  } = useState('');\n  const {\n    0: privKeyBTC,\n    1: setPrivKeyBTC\n  } = useState('');\n  const {\n    0: privKeyETH,\n    1: setPrivKeyETH\n  } = useState('');\n  const {\n    0: privValues,\n    1: setKeyValues\n  } = useState([]);\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: decryptedEffect,\n    1: setDecryptedEffect\n  } = useState('');\n  const {\n    0: decryptedEffectRunning,\n    1: setDecryptedEffectRunning\n  } = useState(false);\n  const {\n    0: decryptPassword,\n    1: setDecryptPassword\n  } = useState('');\n  const {\n    0: invalidVault,\n    1: setInvalidVault\n  } = useState(false);\n  const {\n    0: hasCheckedNft,\n    1: setHasCheckedNft\n  } = useState(false);\n  const {\n    0: accepting,\n    1: setAccepting\n  } = useState(false);\n  const {\n    0: approving,\n    1: setApproving\n  } = useState(false);\n  const {\n    0: acceptable,\n    1: setAcceptable\n  } = useState(false);\n  const {\n    0: transferPassword,\n    1: setTransferPassword\n  } = useState('');\n  const {\n    0: showTransferPassword,\n    1: setShowTransferPassword\n  } = useState(false);\n  const {\n    0: preTransfering,\n    1: setPreTransfering\n  } = useState(false);\n  const {\n    0: transferToAddress,\n    1: setTransferToAddress\n  } = useState(null);\n  const {\n    0: transfering,\n    1: setTransfering\n  } = useState(false);\n  const {\n    0: owner,\n    1: setOwner\n  } = useState(null); // const [transferImage, setTransferImage] = useState('')\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  const {\n    isOpen: isOpenAddrModal,\n    onOpen: onOpenAddrModal,\n    onClose: onCloseAddrModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenKeysModal,\n    onOpen: onOpenKeysModal,\n    onClose: onCloseKeysModal\n  } = useDisclosure();\n  const {\n    isOpen,\n    onToggle\n  } = useDisclosure();\n  const {\n    colorMode\n  } = useColorMode();\n  let transak;\n  let transferImage;\n\n  const initializeTransak = (address, coin) => {\n    transak = new transakSDK({\n      apiKey: '80dc3630-c9a7-4ef7-a71d-3e942a668c3f',\n      // Your API Key\n      environment: 'PRODUCTION',\n      // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '',\n      // Your customer's wallet address\n      themeColor: '000000',\n      // App theme color\n      fiatCurrency: 'USD',\n      // INR/GBP\n      fiatAmount: 350,\n      email: '',\n      // Your customer's email address\n      redirectURL: '',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    }); // To get all the events\n\n    transak.on(transak.ALL_EVENTS, data => {\n      console.log(data);\n    }); // This will trigger when the user marks payment is made.\n\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, orderData => {\n      console.log(orderData);\n      transak.close();\n    });\n    transak.init();\n  };\n\n  const transferVault = () => {\n    setTransfering(true);\n    emblemContract.transferFrom(account, transferToAddress, tokenId).then(({\n      hash\n    }) => {\n      setHash(hash);\n    }).catch(error => {});\n  };\n\n  const fireMetaMask = () => {\n    console.log(mintPassword);\n    setAccepting(true);\n    getWitness(witness => {\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;\n      handlerContract.transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature).then(({\n        hash\n      }) => {\n        setTimeout(() => {\n          setHash(hash); // setShowMakingVaultMsg(true)\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      }).catch(error => {\n        setAccepting(false);\n\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(`tx failed.`, error);\n        } else {// setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      });\n    });\n  };\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\" + transferImage);\n    setPreTransfering(true);\n    handlerContract.addPreTransfer(tokenId, \"0x\" + transferImage).then(({\n      hash\n    }) => {\n      // setTimeout(() => {\n      setHash(hash);\n      console.log(\"Set Pre Transfering True\", preTransfering); // setShowMakingVaultMsg(true)\n      // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      if (error === null || error === void 0 ? void 0 : error.code) {\n        console.log(\"Error?\");\n        setPreTransfering(false);\n        setShowTransferPassword(false);\n        setTransferPassword('');\n      } else {// setShowTransferPassword(!showTransferPassword? true : false)\n        // setPreTransfering(false)\n        // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  const handleApproveForall = () => {\n    setApproving(true);\n    emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(({\n      hash\n    }) => {\n      setTimeout(() => {\n        setHash(hash); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(`tx failed.`, error);\n      } else {\n        setApproving(false); // setShowPreVaultMsg(false)\n      }\n    });\n  }; // \n\n\n  const getVault = async () => {\n    loadCache();\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json(); // console.log('vault response was ', jsonData)\n\n    if (!jsonData.name) {\n      setState({\n        loaded: true\n      });\n      setInvalidVault(true);\n    } else {\n      setStates(jsonData);\n      saveCache(jsonData);\n      setLoadingApi(false);\n      setInvalidVault(false);\n    }\n  };\n\n  const getWitness = async cb => {\n    const responce = await fetch(EMBLEM_API + '/witness/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      }\n    });\n    const jsonData = await responce.json(); // console.log('vault response was ', jsonData)\n\n    if (jsonData.signature) {\n      console.log('witness', jsonData);\n      return cb(jsonData);\n    } else {\n      return cb(false);\n    }\n  };\n\n  const setStates = jsonData => {\n    framed && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\" + framed : null;\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    setVaultValues(vaultValues.concat(jsonData.values));\n    setVaultDataValues(jsonData.attributes.filter(item => {\n      return item.trait_type === \"key\";\n    }));\n    setVaultDesc(jsonData.description);\n    setVaultAddresses(jsonData.addresses);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : jsonData.network == \"xdai\" ? 100 : jsonData.network == \"bsc\" ? 56 : jsonData.network == \"fantom\" ? 250 : 97);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    } // console.log('inside getstates. mine is ', mine)\n\n\n    setState({\n      loaded: true\n    });\n    let isPvt = jsonData.addresses.filter(item => {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n    setTimeout(() => {\n      !isPvt ? // getNftBalance(\n      //   jsonData.values,\n      //   jsonData.addresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (_values) => {\n      //     // console.log(\"Have new values\", _values)\n      //     setVaultValues(_values)\n      getAllBalances([], tokenId, v => {\n        setVaultValues(v);\n      }) : null; // }\n      // ) : null\n    }, 5);\n  };\n\n  const getEthBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json(); // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n\n    setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue)); // console.log('get eth balances', jsonData.values)\n\n    return cb(jsonData.values);\n  };\n\n  const getBtcBalance = async (values, address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json(); // setVaultValues(values.concat(jsonData.values))\n\n    return cb(values.concat(jsonData.values));\n  };\n\n  const getNftBalance = async (values, address, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n\n    if (jsonData.length > 0) {\n      // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n      return cb(values.concat(jsonData));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log('responce', responce, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log('responce', responce, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const saveCache = vault => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  const loadCache = () => {\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  };\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature\n    });\n    const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json(); // console.log('getKeys response is ', jsonData)\n\n    return cb(jsonData);\n  };\n\n  const getContractStates = async () => {\n    let owned = false;\n\n    try {\n      let _owner = await emblemContract.ownerOf(tokenId);\n\n      let acceptable = await handlerContract.getPreTransfer(tokenId);\n      let isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n      setApproved(isApproved);\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\");\n      setOwner(_owner);\n      setMine(_owner === account);\n      loadPasswordFromLocalStorage();\n    } catch (err) {}\n  };\n\n  useEffect(() => {// console.log(\"mine?\", mine)\n    // console.log(\"claiming?\", claiming)\n    // console.log(\"accepting?\", accepting)\n    // console.log(\"acceptable\", acceptable)\n  });\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library.getSigner(account).signMessage('Claim: ' + tokenId).then(signature => {\n      getKeys(signature, tokenId, result => {\n        // console.log('HandleSign response is ' + result)\n        setMnemonic(result.decrypted.phrase);\n        setPrivKeyBTC(result.decrypted.keys.filter(key => {\n          return key.coin === 'btc';\n        })[0].privkey);\n        setPrivKeyETH(result.decrypted.keys.filter(key => {\n          return key.coin === 'eth';\n        })[0].privkey);\n        setKeyValues(result.decrypted.values);\n        onOpenKeysModal();\n      });\n    });\n  };\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({\n      hash\n    }) => {\n      setClaiming(true);\n      setTimeout(() => {\n        setHash(hash);\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    });\n  };\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return;\n    }\n\n    setDecryptedEffectRunning(true);\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n    var ctnt = 'Decrypting'; // Your text goes here\n\n    var speed = 5; // ms per frame\n\n    var increment = 8; // frames per step. Must be >2\n\n    var clen = ctnt.length;\n    var si = 0;\n    var stri = 0;\n    var block = '';\n    var fixed = '';\n\n    (function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i);\n        } else {\n          setDecryptedEffectRunning(false);\n        }\n\n        nextFrame(i);\n        si = si + 1;\n      }, speed);\n    })(clen * increment + 1);\n\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n        var letter = theLetters.charAt(num);\n        block = block + letter;\n      }\n\n      if (si == increment - 1) {\n        stri++;\n      }\n\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1);\n        si = 0;\n      } // $(\"#output\").html(fixed + block);\n\n\n      setDecryptedEffect(fixed + block);\n      block = '';\n    }\n  };\n\n  useEffect(() => {\n    getVault();\n  }, []);\n  useEffect(() => {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null; // console.log('in the usefeect that clls getcontractstates')\n  });\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n');\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    let ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      let ethAddress = vaultAddresses.filter(item => {\n        return item.coin === 'ETH';\n      })[0].address;\n      let btcAddress = vaultAddresses.filter(item => {\n        return item.coin === 'BTC';\n      })[0].address;\n      getAllBalancesByAddress([], ethAddress, btcAddress, values => {\n        setVaultValues(values);\n      }); // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {}\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(item => {\n      let cipherText = item.address.replace('private:', '');\n      item.address = decrypt(cipherText, key);\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 9\n    }\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              `\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    privValues: privValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 7\n    }\n  }), __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 654,\n      columnNumber: 9\n    }\n  }), loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault ? __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    className: \"NFT\",\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 15\n    }\n  }, vaultChainId != chainId ? __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"orange.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 19\n    }\n  }, \"BEWARE: Vault is on a different network than you are.\") : null, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\" // textTransform=\"uppercase\"\n    ,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy ? ': ~$' + vaultTotalValue.toLocaleString() : null), __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 17\n    }\n  }, vaultValues.length && vaultValues.filter(item => {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultImage,\n    items: vaultValues.map(value => {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 698,\n      columnNumber: 23\n    }\n  }) : __jsx(Embed, {\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 700,\n      columnNumber: 23\n    }\n  })), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 705,\n      columnNumber: 19\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 706,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    fontSize: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 23\n    }\n  }, vaultChainId == chainId ? __jsx(Link, {\n    href: \"./vaultlist?address=\" + owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 709,\n      columnNumber: 25\n    }\n  }, \"Owner: \", owner) : null), __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 714,\n      columnNumber: 23\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 715,\n      columnNumber: 25\n    }\n  }))))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 720,\n      columnNumber: 17\n    }\n  }, vaultPrivacy ? __jsx(Box, {\n    mb: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 723,\n      columnNumber: 23\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: e => tryDecrypt(e.target.value),\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 726,\n      columnNumber: 23\n    }\n  })) : __jsx(Box, {\n    d: \"flex\",\n    backgroundColor: colorMode == \"light\" ? \"gray.100\" : \"gray.700\",\n    alignItems: \"baseline\",\n    className: \"coin-balance-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 734,\n      columnNumber: 21\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 735,\n      columnNumber: 23\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    mt: 2,\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 736,\n      columnNumber: 25\n    }\n  }, \"Current Contents:\"), __jsx(Text, {\n    as: \"p\",\n    color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 739,\n      columnNumber: 25\n    }\n  }, \"$\", Number(vaultTotalValue.toFixed(4)).toLocaleString()), vaultValues.length ? vaultValues.map(coin => {\n    return __jsx(Stack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 31\n      }\n    }, __jsx(CoinBalance, {\n      colorMode: colorMode,\n      coin: coin,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744,\n        columnNumber: 33\n      }\n    }));\n  }) : null, vaultDataValues.length ? vaultDataValues.map(data => {\n    return __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 31\n      }\n    }, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 756,\n      columnNumber: 27\n    }\n  }, \"Nothing in here! Fill 'er up!\") : null)), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 764,\n      columnNumber: 23\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 765,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 766,\n      columnNumber: 27\n    }\n  }, \"Addresses Within Vault\"), __jsx(HStack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 767,\n      columnNumber: 25\n    }\n  }, vaultAddresses.map(addr => {\n    return __jsx(Button, {\n      width: \"165px\",\n      key: addr.address,\n      onClick: () => {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770,\n        columnNumber: 31\n      }\n    }, \"Put \", addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin, \" In\");\n  })), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 784,\n      columnNumber: 25\n    }\n  }, \"Load Vault with Credit Card\"), __jsx(HStack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 785,\n      columnNumber: 25\n    }\n  }, vaultAddresses.map(addr => {\n    return __jsx(Button, {\n      width: \"165px\",\n      key: addr.address,\n      onClick: () => {\n        initializeTransak(addr.address, addr.coin);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788,\n        columnNumber: 31\n      }\n    }, \"Buy \", addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin);\n  }))))) : null, !(status === 'claimed') && (vaultChainId === 1 || vaultChainId === 4) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 809,\n      columnNumber: 21\n    }\n  }, __jsx(Button, _extends({\n    width: \"100%\",\n    as: \"a\"\n  }, {\n    href: 'https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + contractAddresses.emblemVault[vaultChainId] + '/' + tokenId,\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 810,\n      columnNumber: 23\n    }\n  }), mine ? 'Sell (Opensea)' : 'Make an Offer (Opensea)')) : null, !(status === 'claimed') && mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 831,\n      columnNumber: 22\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 832,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: onToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 833,\n      columnNumber: 27\n    }\n  }, \"Transfer Vault\"), __jsx(Collapse, {\n    isOpen: isOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 834,\n      columnNumber: 27\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 835,\n      columnNumber: 29\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"owner-address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 836,\n      columnNumber: 29\n    }\n  }, \"Address\"), __jsx(Input, {\n    mt: 1,\n    type: \"text\",\n    id: \"transferAddress\",\n    value: transferToAddress || '',\n    onChange: e => {\n      console.log(\"Transfer to\", e.target.value);\n      setTransferToAddress(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 837,\n      columnNumber: 31\n    }\n  })), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 849,\n      columnNumber: 29\n    }\n  }, __jsx(Button, {\n    isDisabled: !isETHAddress(transferToAddress),\n    onClick: () => {\n      onToggle();\n      transferVault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 850,\n      columnNumber: 31\n    }\n  }, \"Transfer Now\")))))) : null, mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 861,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      if (!approved) {\n        return handleApproveForall();\n      } else {\n        let key = CryptoJS.lib.WordArray.random(128 / 8).toString();\n        let sha = CryptoJS.SHA256(key).toString();\n        console.log('plain', key);\n        console.log('sha', sha);\n        setTransferPassword(key);\n        transferImage = sha;\n        setTimeout(() => {\n          addPreTransfer();\n        }, 500);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 862,\n      columnNumber: 23\n    }\n  }, \" \", approved ? \"Get Link (Send Vault Via Link)\" : \"Approve Gifting\", \" \"))) : null, (showTransferPassword || mintPassword) && acceptable ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 881,\n      columnNumber: 23\n    }\n  }, __jsx(Link, {\n    href: location.protocol + '//' + location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 882,\n      columnNumber: 25\n    }\n  }, \"Copy Gift Link\"), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 883,\n      columnNumber: 25\n    }\n  }, \"Password: \", transferPassword || mintPassword)) : null, acceptable && claimedBy !== account ? __jsx(React.Fragment, null, __jsx(Button, {\n    mt: 2,\n    width: \"100%\",\n    onClick: () => {\n      fireMetaMask();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 888,\n      columnNumber: 23\n    }\n  }, \"Accept\"), __jsx(Input, {\n    mt: 2,\n    type: \"password\",\n    id: \"mintPassword\",\n    minLength: 3,\n    maxLength: 200,\n    value: mintPassword || '',\n    onChange: e => {\n      console.log('grrr', e.target.value, mintPassword);\n      setMintPassword(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 889,\n      columnNumber: 23\n    }\n  })) : null, !(status === 'claimed') && account && vaultChainId === chainId && mine ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 906,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      handleClaim();\n    },\n    isDisabled: claiming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 907,\n      columnNumber: 23\n    }\n  }, claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)')) : status === 'claimed' && claimedBy === account && vaultChainId === chainId ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 918,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 919,\n      columnNumber: 23\n    }\n  }, \"Get Keys\")) : null), __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 925,\n      columnNumber: 17\n    }\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 926,\n      columnNumber: 42\n    }\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 929,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 930,\n      columnNumber: 21\n    }\n  }), accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving ? \"Handling Approval Flow ...\" : transfering ? \"Transfering Vault ...\" : \"Generating Gift Link ...\") : null)) : __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 937,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 938,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 942,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 944,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      // location.href = location.origin + '/vault?id=' + tokenId\n      if (claiming && !accepting && !preTransfering) {\n        console.log(111111);\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account);\n        handleSign();\n      } else if (preTransfering) {\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        setApproving(false);\n        getVault();\n        setHash(null);\n      } else if (transfering) {\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else {\n        console.log('claiming', claiming);\n        console.log('accepting', accepting);\n        console.log('preTransfering', preTransfering);\n        console.log('approving', approving);\n        console.log(\"Unknown state\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 951,\n      columnNumber: 11\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 989,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","Link","Alert","AlertIcon","useDisclosure","Collapse","FormLabel","useColorMode","HStack","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","Loader","dynamic","isETHAddress","TransactionToast","EMBLEM_API","BURN_ADDRESS","contractAddresses","useContract","CryptoJS","ReactMarkdown","gfm","Embed","NFTSlideshow","CoinBalance","transakSDK","AddrModal","KeysModal","Nft","account","chainId","library","query","approved","setApproved","mintPassword","setMintPassword","key","framed","setFramed","tokenId","setTokenId","id","experimental","setExperimental","vaultName","setVaultName","vaultDesc","setVaultDesc","vaultImage","setVaultImage","vaultValues","setVaultValues","vaultDataValues","setVaultDataValues","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","state","setState","loaded","mine","setMine","claiming","setClaiming","status","setStatus","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","privValues","setKeyValues","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","hasCheckedNft","setHasCheckedNft","accepting","setAccepting","approving","setApproving","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","preTransfering","setPreTransfering","transferToAddress","setTransferToAddress","transfering","setTransfering","owner","setOwner","handlerContract","vaultHandler","vaultHandlerAbi","emblemContract","emblemVault","emblemAbi","isOpen","isOpenAddrModal","onOpen","onOpenAddrModal","onClose","onCloseAddrModal","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","onToggle","colorMode","transak","transferImage","initializeTransak","address","coin","apiKey","environment","defaultCryptoCurrency","walletAddress","themeColor","fiatCurrency","fiatAmount","email","redirectURL","hostURL","window","location","origin","widgetHeight","widgetWidth","on","ALL_EVENTS","data","console","log","EVENTS","TRANSAK_ORDER_SUCCESSFUL","orderData","close","init","transferVault","transferFrom","then","catch","error","fireMetaMask","getWitness","witness","transferWithCode","nonce","signature","setTimeout","code","addPreTransfer","handleApproveForall","setApprovalForAll","getVault","loadCache","responce","fetch","method","headers","service","jsonData","json","name","setStates","saveCache","cb","chainid","toString","image","includes","description","totalValue","concat","values","attributes","filter","item","trait_type","addresses","network","isPvt","length","getAllBalances","v","getEthBalances","Number","getBtcBalance","getNftBalance","balances","getAllBalancesByAddress","ethAddress","btcAddress","vault","localStorage","setItem","JSON","stringify","parse","getItem","savePasswordToLocalStorage","loadPasswordFromLocalStorage","storedPw","getKeys","myHeaders","Headers","append","raw","body","redirect","getContractStates","owned","_owner","ownerOf","getPreTransfer","isApproved","isApprovedForAll","_from","err","handleSign","getSigner","signMessage","result","decrypted","phrase","keys","privkey","handleClaim","startDecryptEffect","theLetters","ctnt","speed","increment","clen","si","stri","block","fixed","rustle","i","nextFrame","pos","num","Math","floor","random","letter","charAt","splitDescription","words","desc","split","trim","tryDecrypt","ciphertext","replace","bytes","AES","decrypt","enc","Utf8","decryptAddresses","forEach","cipherText","decryptedData","__html","toLocaleString","type","map","value","canSwipe","e","target","toFixed","attribute_key","addr","href","rel","lib","WordArray","sha","SHA256","protocol","host"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n  Tooltip,\n  Collapse,\n  FormControl,\n  FormLabel,\n  useColorMode\n} from '@chakra-ui/core'\n\nimport {HStack, VStack, Circle } from '@chakra-ui/react'\n\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { isETHAddress, validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\nimport CryptoJS from 'crypto-js'\nimport { addTokenToWallet, addMany } from '../public/web3'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport Embed from './Embed'\nimport NFTSlideshow from './embed/NFTSlideshow'\nimport CoinBalance from './partials/CoinBalance'\nimport { chakra } from '@chakra-ui/system'\nimport transakSDK from '@transak/transak-sdk'\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\n\nexport default function Nft() {\n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [approved, setApproved] = useState(false)\n  const [mintPassword, setMintPassword] = useState(query.key)\n  const [framed, setFramed] = useState(query.framed || true)\n  const [tokenId, setTokenId] = useState(query.id)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [vaultDataValues, setVaultDataValues] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [privValues, setKeyValues] = useState([])\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [hasCheckedNft, setHasCheckedNft] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n  const [preTransfering, setPreTransfering] = useState(false)\n  const [transferToAddress, setTransferToAddress] = useState(null)\n  const [transfering, setTransfering] = useState(false)\n  const [owner, setOwner] = useState(null)\n  // const [transferImage, setTransferImage] = useState('')\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n  const { isOpen, onToggle } = useDisclosure()\n\n  const { colorMode } = useColorMode()\n\n  let transak\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  let transferImage;\n\n  const initializeTransak = (address?: string, coin? : string)=>{\n    transak = new transakSDK({\n      apiKey: '80dc3630-c9a7-4ef7-a71d-3e942a668c3f',  // Your API Key\n      environment: 'PRODUCTION', // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '', // Your customer's wallet address\n      themeColor: '000000', // App theme color\n      fiatCurrency: 'USD', // INR/GBP\n      fiatAmount: 350,\n      email: '', // Your customer's email address\n      redirectURL: '',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    });\n  \n    // To get all the events\n    transak.on(transak.ALL_EVENTS, (data) => {\n      console.log(data)\n    });\n  \n    // This will trigger when the user marks payment is made.\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, (orderData) => {\n      console.log(orderData);\n      transak.close();\n    });\n  \n    transak.init()\n  }\n\n  const transferVault = () => {\n    setTransfering(true)\n    ;(emblemContract as Contract).transferFrom(account, transferToAddress, tokenId)\n    .then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n    .catch((error: ErrorWithCode) => {})\n  }\n\n  const fireMetaMask = () => {\n    console.log(mintPassword)\n    setAccepting(true)\n    getWitness(witness=>{\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;(handlerContract as Contract)\n      .transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        setAccepting(false)\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          // setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n    })\n    \n  }\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\"+transferImage)\n    setPreTransfering(true)\n    ;(handlerContract as Contract)\n      .addPreTransfer(tokenId, \"0x\"+transferImage)\n      .then(({ hash }: { hash: string }) => {\n        // setTimeout(() => {\n          setHash(hash)\n          console.log(\"Set Pre Transfering True\", preTransfering)\n          // setShowMakingVaultMsg(true)\n        // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code){   \n            console.log(\"Error?\")       \n            setPreTransfering(false)\n            setShowTransferPassword(false)\n            setTransferPassword('')\n        } else {\n          // setShowTransferPassword(!showTransferPassword? true : false)\n          // setPreTransfering(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const handleApproveForall = () => {\n    setApproving(true)\n    ;(emblemContract as Contract)\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  // \n\n  const getVault = async () => {\n    loadCache()\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log('vault response was ', jsonData)\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      setStates(jsonData)\n      saveCache(jsonData)\n      setLoadingApi(false)\n      setInvalidVault(false)\n    }\n  }\n\n  const getWitness = async (cb) => {\n    \n    const responce = await fetch(EMBLEM_API + '/witness/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log('vault response was ', jsonData)\n    if (jsonData.signature) {\n      console.log('witness', jsonData)\n      return cb(jsonData)\n    } else {\n      return cb(false)\n    }\n  }\n\n  const setStates = (jsonData) => {\n    framed && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\"+framed : null\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    setVaultValues(vaultValues.concat(jsonData.values))\n    setVaultDataValues(jsonData.attributes.filter(item=>{return item.trait_type === \"key\"}))\n    setVaultDesc(jsonData.description)\n    setVaultAddresses(jsonData.addresses)\n    setVaultChainId(\n      jsonData.network == 'mainnet' ? 1 : \n      jsonData.network == \"rinkeby\" ? 4 : \n      jsonData.network == \"mumbai\" ? 80001 : \n      jsonData.network == \"matic\" ? 137 : \n      jsonData.network == \"xdai\" ? 100 : \n      jsonData.network == \"bsc\" ? 56 : \n      jsonData.network == \"fantom\" ? 250 : \n      97\n    )\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    // console.log('inside getstates. mine is ', mine)\n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)\n    setTimeout(() => {\n      !isPvt ?\n      // getNftBalance(\n      //   jsonData.values,\n      //   jsonData.addresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (_values) => {\n      //     // console.log(\"Have new values\", _values)\n      //     setVaultValues(_values)\n      getAllBalances([], tokenId, (v)=>{\n        setVaultValues(v)\n      }) : null\n        // }\n      // ) : null\n\n    }, 5)\n  }\n\n  \n\n  const getEthBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n    return cb(jsonData.values)\n  }\n\n  const getBtcBalance = async (values, address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // setVaultValues(values.concat(jsonData.values))\n    return cb(values.concat(jsonData.values))\n  }\n\n  const getNftBalance = async (values, address, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    if (jsonData.length > 0) {\n      // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n      return cb(values.concat(jsonData))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const saveCache = (vault) => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)) // Save new state for later\n  }\n\n  const loadCache = () => {\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')) // Load vaults from storage before updating from server!\n    if (vault) {\n      setState({ loaded: true })\n      setStates(vault)\n      setLoadingApi(true)\n    }\n  }\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword) // Save new state for later\n  }\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword')\n    storedPw && acceptable ? setMintPassword(storedPw) : null //setMintPassword(null)\n  }\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    // console.log('getKeys response is ', jsonData)\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    let owned = false\n    try {\n      let _owner  = await emblemContract.ownerOf(tokenId)\n      let acceptable = await handlerContract.getPreTransfer(tokenId)\n      let isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId])\n      setApproved(isApproved)\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n      setOwner(_owner)\n      setMine(_owner === account)\n      loadPasswordFromLocalStorage()\n    } catch(err){}\n    \n  }\n\n  useEffect(()=>{\n    // console.log(\"mine?\", mine)\n    // console.log(\"claiming?\", claiming)\n    // console.log(\"accepting?\", accepting)\n    // console.log(\"acceptable\", acceptable)\n  })\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + tokenId)\n      .then((signature) => {\n        getKeys(signature, tokenId, (result) => {\n          // console.log('HandleSign response is ' + result)\n          setMnemonic(result.decrypted.phrase)\n          setPrivKeyBTC(\n            result.decrypted.keys.filter((key) => {\n              return key.coin === 'btc'\n            })[0].privkey\n          )\n          setPrivKeyETH(\n            result.decrypted.keys.filter((key) => {\n              return key.coin === 'eth'\n            })[0].privkey\n          )\n          setKeyValues(result.decrypted.values)\n          onOpenKeysModal()\n        })\n      })\n  }\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({ hash }: { hash: string }) => {\n      setClaiming(true)\n      setTimeout(() => {\n        setHash(hash)\n      }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    })\n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random())\n        //Get random letter\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      // $(\"#output\").html(fixed + block);\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null\n    // console.log('in the usefeect that clls getcontractstates')\n  })\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n')\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      let ethAddress = vaultAddresses.filter((item) => {return item.coin === 'ETH'})[0].address\n      let btcAddress = vaultAddresses.filter((item) => {return item.coin === 'BTC'})[0].address\n      getAllBalancesByAddress([], ethAddress, btcAddress, (values)=>{\n        setVaultValues(values)\n      })\n      // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {}\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach((item) => {\n      let cipherText = item.address.replace('private:', '')\n      item.address = decrypt(cipherText, key)\n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n        <script\n            dangerouslySetInnerHTML={{\n              __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              `,\n            }}\n          />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n        privValues={privValues}\n      />\n\n      <Loader loaded={state.loaded}>\n        <Box height=\"40px\"></Box>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault ? (          \n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                className=\"NFT\" \n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                {vaultChainId != chainId ? (\n                  <Box\n                    mt=\"1\"\n                    fontWeight=\"semibold\"\n                    as=\"h3\"\n                    lineHeight=\"tight\"\n                    p={2}\n                    textAlign=\"center\"\n                    textTransform=\"uppercase\"\n                    alignItems=\"center\"\n                    color=\"orange.500\"\n                  >\n                    BEWARE: Vault is on a different network than you are.\n                  </Box>\n                ) : null}\n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  // textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy ? ': ~$' + vaultTotalValue.toLocaleString() : null}\n                </Box>\n                <Stack className=\"NFT-content\" align=\"center\">\n                  { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                      <NFTSlideshow name={vaultName} image={vaultImage} items={vaultValues.map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n                    ) : (\n                      <Embed url={vaultImage}/>\n                    )\n                  }                                    \n                </Stack>\n                <Stack align=\"center\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                    <Stack>\n                      <Text fontSize=\"xs\">\n                      { vaultChainId == chainId ? (\n                        <Link href={\"./vaultlist?address=\"+owner}>\n                          Owner: {owner}\n                        </Link>\n                      ) : null }\n                      </Text>\n                      <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" >\n                        <ReactMarkdown plugins={[gfm]} children={splitDescription(vaultDesc)} />\n                      </Text>\n                    </Stack>                    \n                  </Box>                    \n                </Stack>\n                <Box p=\"6\">\n                  {vaultPrivacy ? (\n                    <Box mb={5}>\n                      <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                        {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                      </Text>\n                      <Input\n                        type=\"password\"\n                        id=\"vault-password\"\n                        onChange={(e) => tryDecrypt(e.target.value)}\n                        aria-describedby=\"password-helper-text\"\n                      />\n                    </Box>\n                  ) : (\n                    <Box d=\"flex\" backgroundColor={colorMode == \"light\"? \"gray.100\": \"gray.700\"} alignItems=\"baseline\" className=\"coin-balance-content\">\n                      <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                        <Text as=\"h4\" mt={2} fontWeight=\"semibold\">\n                          Current Contents: \n                        </Text>\n                        <Text as=\"p\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"}>${Number(vaultTotalValue.toFixed(4)).toLocaleString()}</Text>\n                        { vaultValues.length ? (\n                          vaultValues.map((coin) => {\n                            return (  \n                              <Stack> \n                                <CoinBalance colorMode={colorMode} coin={coin}/>  \n                              </Stack>\n                            )\n                          })\n                        ) : null } \n                        { vaultDataValues.length ? (\n                          vaultDataValues.map((data) => {\n                            return (\n                              <Text>Data: {data.attribute_key}</Text>\n                            )                        \n                          })\n                        ) : !vaultDataValues.length && !vaultValues.length ? (\n                          <Text>Nothing in here! Fill 'er up!</Text>\n                        ) : null}\n                      </Box>\n                    </Box>\n                  )}                  \n                  \n                  {!vaultPrivacy ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <ButtonGroup justifyContent=\"space-between\" spacing={6}>\n                        <Stack>\n                          <Text>Addresses Within Vault</Text>\n                        <HStack>\n                          {vaultAddresses.map((addr) => {\n                            return (\n                              <Button\n                                width=\"165px\"\n                                key={addr.address}\n                                onClick={() => {\n                                  setCurrCoin(addr.coin)\n                                  setCurrAddr(addr.address)\n                                  onOpenAddrModal()\n                                }}\n                              >\n                                Put {addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin} In\n                              </Button>\n                            )\n                          })}\n                        </HStack>\n                        <Text>Load Vault with Credit Card</Text>\n                        <HStack>\n                          {vaultAddresses.map((addr) => {\n                            return (\n                              <Button\n                                width=\"165px\"\n                                key={addr.address}\n                                onClick={() => {\n                                  initializeTransak(addr.address, addr.coin)\n                                }}\n                              >\n                                Buy {addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin}\n                              </Button>\n                            )\n                          })}\n                        </HStack>\n                        {/* <Button onClick={() => {\n                          initializeTransak()\n                        }}>Add Crypto with Credit Card</Button> */}\n                        </Stack>\n                      </ButtonGroup>\n                    </Box>\n                  ) : null}\n\n                  {!(status === 'claimed') && (vaultChainId === 1 || vaultChainId === 4 )? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        as=\"a\"\n                        {...{\n                          href:\n                            'https://' +\n                            (vaultChainId == 4 ? 'rinkeby.' : '') +\n                            'opensea.io/assets/' +\n                            contractAddresses.emblemVault[vaultChainId] +\n                            '/' +\n                            tokenId,\n                          target: '_blank',\n                          rel: 'noopener noreferrer',\n                        }}\n                      >\n                        {mine ? 'Sell (Opensea)' : 'Make an Offer (Opensea)'}\n                      </Button>\n                    </Box>\n                  ) : null}\n                  {!(status === 'claimed') && mine && !acceptable?  (\n                    <>\n                     <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\" width=\"100%\">\n                        <Stack direction=\"column\" align=\"center\" width=\"100%\">\n                          <Button width=\"100%\" onClick={onToggle}>Transfer Vault</Button>\n                          <Collapse isOpen={isOpen}>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                            <FormLabel htmlFor=\"owner-address\">Address</FormLabel>\n                              <Input\n                                mt={1}\n                                type=\"text\"\n                                id=\"transferAddress\"\n                                value={transferToAddress || ''}\n                                onChange={(e) => {                              \n                                  console.log(\"Transfer to\", e.target.value)\n                                  setTransferToAddress(e.target.value)\n                                }}\n                                autoComplete=\"off\"\n                              />\n                            </Box>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                              <Button isDisabled={!isETHAddress(transferToAddress)} onClick={()=>{\n                                onToggle()\n                                transferVault()\n                              }}>Transfer Now</Button> \n                            </Box>\n                          </Collapse>\n                        </Stack>\n                      </Box>\n                    </>\n                  ):null }\n                  {mine && !acceptable ? (<>\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={() => {\n                        if (!approved) {\n                          return handleApproveForall()\n                        } else {\n                          let key = CryptoJS.lib.WordArray.random(128/8).toString()\n                          let sha = CryptoJS.SHA256(key).toString()\n                          console.log('plain', key)\n                          console.log('sha', sha)\n                          setTransferPassword(key)\n                          transferImage = sha                          \n                          setTimeout(()=>{\n                            addPreTransfer()\n                          }, 500)\n                        }                                             \n                      }\n                    }> {approved ? \"Get Link (Send Vault Via Link)\" : \"Approve Gifting\" } </Button>\n                    </Box>\n                  </>) : null }\n                  {(showTransferPassword || mintPassword) && acceptable ? (\n                      <Box>\n                        <Link href={location.protocol +'//'+ location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword)}>Copy Gift Link</Link>\n                        <Text>Password: {(transferPassword || mintPassword)}</Text>\n                      </Box>\n                      ) : null}\n                  {acceptable && claimedBy !== account ? (\n                  <>\n                      <Button mt={2} width=\"100%\" onClick={()=>{fireMetaMask()}}>Accept</Button>\n                      <Input\n                        mt={2}\n                        type=\"password\"\n                        id=\"mintPassword\"\n                        minLength={3}\n                        maxLength={200}\n                        value={mintPassword || ''}\n                        onChange={(e) => {\n                          console.log('grrr', e.target.value, mintPassword)\n                          setMintPassword(e.target.value)}\n                        }\n                        autoComplete=\"off\"\n                      />\n                  </>\n                    ) : null}\n\n                  {!(status === 'claimed') && account && vaultChainId === chainId && mine ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        onClick={() => {\n                          handleClaim()\n                        }}\n                        isDisabled={claiming}\n                      >\n                        {claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)'}\n                      </Button>\n                    </Box>\n                  ) : status === 'claimed' && claimedBy === account && vaultChainId === chainId ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={handleSign}>\n                        Get Keys\n                      </Button>\n                    </Box>\n                  ) : null}                  \n                </Box>\n                <Stack direction=\"column\" align=\"center\">\n                  {status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n                {hash ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    { accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving? \"Handling Approval Flow ...\" : transfering? \"Transfering Vault ...\":  \"Generating Gift Link ...\"}\n                  </Alert>\n                ) : null}\n              </Box>\n            </Flex>\n        ) : (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        )}\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              // location.href = location.origin + '/vault?id=' + tokenId\n              if (claiming && !accepting && !preTransfering) {\n                console.log(111111)\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                handleSign()\n              } else if (preTransfering) {\n                savePasswordToLocalStorage()\n                setShowTransferPassword(true)\n                setPreTransfering(false)\n                setHash(null)                \n              } else if(accepting) {\n                setAccepting(false)                \n                getVault()\n                setHash(null)\n              } else if(approving) {\n                setApproving(false)\n                getVault()\n                setHash(null)\n              } else if(transfering) {\n                setTransfering(false)\n                getVault()\n                setHash(null)\n              } else {\n                console.log('claiming', claiming) \n                console.log('accepting', accepting) \n                console.log('preTransfering', preTransfering)\n                console.log('approving', approving)\n                console.log(\"Unknown state\")\n              }\n            }}\n          />\n        ) : null}\n        <Box height=\"40px\"></Box>\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}