{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nftrade.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Link, Stack, Button, FormControl, Input, FormHelperText, Select } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { Embed } from './Embed';\nimport { useContract } from '../hooks';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nexport default function NFTrade() {\n  _s();\n\n  var _this = this;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState([]),\n      vaults = _useState[0],\n      setVaults = _useState[1];\n\n  var _useState2 = useState([]),\n      myVaults = _useState2[0],\n      setMyVaults = _useState2[1];\n\n  var _useState3 = useState(false),\n      myVaultsLoaded = _useState3[0],\n      setMyVaultsLoaded = _useState3[1];\n\n  var _useState4 = useState({\n    loaded: false\n  }),\n      state = _useState4[0],\n      setState = _useState4[1];\n\n  var _useState5 = useState(false),\n      loadingApi = _useState5[0],\n      setLoadingApi = _useState5[1];\n\n  var _useState6 = useState(query.q),\n      q = _useState6[0],\n      setQ = _useState6[1];\n\n  var _useState7 = useState(q || ''),\n      temp_q = _useState7[0],\n      setTempQ = _useState7[1];\n\n  var _useState8 = useState(query.network || null),\n      network = _useState8[0],\n      setNetwork = _useState8[1];\n\n  var _useState9 = useState(query.address),\n      address = _useState9[0],\n      setAddress = _useState9[1];\n\n  var _useState10 = useState(query.experimental),\n      experimental = _useState10[0],\n      setExperimental = _useState10[1];\n\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  var nftradeContract = useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true);\n\n  var getVaults = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoadingApi(true);\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch(EMBLEM_API + '/search', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                },\n                body: JSON.stringify({\n                  q: q,\n                  network: network\n                })\n              });\n\n            case 4:\n              response = _context.sent;\n              _context.next = 7;\n              return response.json();\n\n            case 7:\n              jsonData = _context.sent;\n              setState({\n                loaded: true\n              });\n              setVaults(jsonData);\n              setLoadingApi(false);\n              _context.next = 15;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](1);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 13]]);\n    }));\n\n    return function getVaults() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getMyVaults = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var response, jsonData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log(\"Getting My Vaults\");\n              setMyVaultsLoaded(true);\n              _context2.prev = 2;\n              _context2.next = 5;\n              return fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental ? '?experimental=true' : ''), {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  chainId: chainId.toString()\n                }\n              });\n\n            case 5:\n              response = _context2.sent;\n              _context2.next = 8;\n              return response.json();\n\n            case 8:\n              jsonData = _context2.sent;\n              // setState({ loaded: true })\n              setMyVaults(jsonData); // setLoadingApi(false)\n\n              console.log(jsonData);\n              _context2.next = 15;\n              break;\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](2);\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 13]]);\n    }));\n\n    return function getMyVaults() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    console.log(q, state, loadingApi);\n    nftradeStuff();\n\n    if (q && !state.loaded && !loadingApi) {\n      console.log(\"Load Search\");\n      getVaults();\n    }\n  });\n\n  function nftradeStuff() {\n    return _nftradeStuff.apply(this, arguments);\n  }\n\n  function _nftradeStuff() {\n    _nftradeStuff = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (myVaultsLoaded) {\n                _context4.next = 5;\n                break;\n              }\n\n              _context4.next = 3;\n              return getMyVaults();\n\n            case 3:\n              _context4.next = 6;\n              break;\n\n            case 5:\n              null;\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _nftradeStuff.apply(this, arguments);\n  }\n\n  function getOffers(_x) {\n    return _getOffers.apply(this, arguments);\n  }\n\n  function _getOffers() {\n    _getOffers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(tokenId) {\n      var offerCount;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return nftradeContract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId);\n\n            case 2:\n              offerCount = _context5.sent;\n              return _context5.abrupt(\"return\", offerCount);\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _getOffers.apply(this, arguments);\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded || !q,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    id: \"search-query\",\n    width: \"45%\",\n    \"aria-describedby\": \"search-query-helper-text\",\n    placeholder: \"0xdeadbeef\",\n    maxLength: 42,\n    value: temp_q,\n    onChange: function onChange(e) {\n      return setTempQ(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    m: 2,\n    onClick: function onClick() {\n      setState({\n        loaded: false\n      });\n      setQ(temp_q);\n      var loc = location.href.split('?')[0] + \"?q=\" + temp_q + \"&network=\" + network;\n      window.history.pushState(temp_q, 'Title', loc);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, \"Search\"), __jsx(Select, {\n    w: \"45%\",\n    placeholder: \"All Networks\",\n    value: network || '',\n    onChange: function onChange(e) {\n      setNetwork(e.target.value);\n      console.log(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, __jsx(\"option\", {\n    value: \"matic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, \"Matic\"), __jsx(\"option\", {\n    value: \"mainnet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, \"Ethereum Mainnet\"), __jsx(\"option\", {\n    value: \"rinkeby\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  }, \"Ethereum Rinkeby\"))), __jsx(FormHelperText, {\n    id: \"search-query-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, \"Search for Emblem Vaults by: Name, Description, Type, Contents\"))), __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, vaults.length ? vaults.map( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(vault, index) {\n      var pieces, offerCount, url, flexSettings, redirect;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              pieces = location.pathname.split('/');\n              _context3.next = 3;\n              return getOffers(vault.tokenId);\n\n            case 3:\n              offerCount = _context3.sent;\n              pieces.pop();\n              url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId;\n              flexSettings = {\n                flex: '1',\n                minW: '300px',\n                maxW: '300px',\n                borderWidth: '1px',\n                color: 'white',\n                mx: '6',\n                mb: '6',\n                rounded: 'lg',\n                overflow: 'hidden',\n                borderColor: vault.status == 'claimed' ? 'green !important' : '',\n                cursor: 'pointer'\n              };\n\n              redirect = function redirect() {\n                location.href = url;\n              };\n\n              return _context3.abrupt(\"return\", __jsx(Stack, {\n                key: \"stack_\" + index,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 15\n                }\n              }, __jsx(Box, _extends({\n                key: index\n              }, flexSettings, {\n                onClick: redirect,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 17\n                }\n              }), __jsx(Text, {\n                fontWeight: \"semibold\",\n                textAlign: \"center\",\n                mt: 2,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 19\n                }\n              }, vault.name, !vault[\"private\"] ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n                align: \"center\",\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 19\n                }\n              }, __jsx(Embed, {\n                url: vault.image,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 21\n                }\n              })), __jsx(Box, {\n                d: \"flex\",\n                alignItems: \"baseline\",\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 19\n                }\n              }, __jsx(Box, {\n                color: \"gray.500\",\n                fontWeight: \"semibold\",\n                letterSpacing: \"wide\",\n                fontSize: \"sm\",\n                ml: \"2\",\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 21\n                }\n              }, vault[\"private\"] ? __jsx(React.Fragment, null, __jsx(Text, {\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 27\n                }\n              }, \"Contents hidden. Click to view the vault and unlock values.\")) : vault.values.length ? vault.values.map(function (coin, index) {\n                if (index < 4) return __jsx(Text, {\n                  key: coin.name,\n                  isTruncated: true,\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 180,\n                    columnNumber: 31\n                  }\n                }, coin.name, \": \", coin.balance);else if (index == 4) return __jsx(Text, {\n                  fontWeight: \"bold\",\n                  mt: 2,\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 186,\n                    columnNumber: 31\n                  }\n                }, \"... Click to see the rest ...\");\n              }) : __jsx(Text, {\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 29\n                }\n              }, \"Nothing in here! \", __jsx(\"br\", {\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 193,\n                  columnNumber: 48\n                }\n              }), \"Click to fill 'er up!\"))), __jsx(Stack, {\n                align: \"center\",\n                mt: 3,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 19\n                }\n              }, vault.status == 'claimed' ? __jsx(Text, {\n                color: \"green.500\",\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 50\n                }\n              }, \"CLAIMED\") : null)), __jsx(Select, {\n                placeholder: \"Offer NFT\",\n                onChange: function onChange(e) {\n                  console.log(e.target.value);\n                },\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 17\n                }\n              }, myVaults.map(function (vault, index) {\n                return __jsx(\"option\", {\n                  key: index,\n                  value: vault.tokenId,\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 211,\n                    columnNumber: 25\n                  }\n                }, vault.name);\n              }), __jsx(\"option\", {\n                value: \"mainnet\",\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 21\n                }\n              }, \"Ethereum Mainnet\"), __jsx(\"option\", {\n                value: \"rinkeby\",\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 21\n                }\n              }, \"Ethereum Rinkeby\"))));\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x2, _x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }()) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 11\n    }\n  }, \"Search Resulted in 0 Vaults.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }\n  }, \"CREATE ONE HERE!\"))));\n}\n\n_s(NFTrade, \"AqbuW4Q4pQ/fOTdXzA6uhljcf7U=\", false, function () {\n  return [useWeb3React, useRouter, useContract, useContract];\n});\n\n_c = NFTrade;\n\nvar _c;\n\n$RefreshReg$(_c, \"NFTrade\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nftrade.tsx"],"names":["Box","Flex","Text","Link","Stack","Button","FormControl","Input","FormHelperText","Select","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","Embed","useContract","EMBLEM_API","contractAddresses","NFTrade","account","chainId","library","query","vaults","setVaults","myVaults","setMyVaults","myVaultsLoaded","setMyVaultsLoaded","loaded","state","setState","loadingApi","setLoadingApi","q","setQ","temp_q","setTempQ","network","setNetwork","address","setAddress","experimental","setExperimental","emblemContract","emblemVault","emblemAbi","nftradeContract","nftrade","nftradeAbi","getVaults","fetch","method","headers","service","body","JSON","stringify","response","json","jsonData","getMyVaults","console","log","toString","nftradeStuff","getOffers","tokenId","getOfferCount","offerCount","e","target","value","loc","location","href","split","window","history","pushState","length","map","vault","index","pieces","pathname","pop","url","origin","join","flexSettings","flex","minW","maxW","borderWidth","color","mx","mb","rounded","overflow","borderColor","status","cursor","redirect","name","totalValue","image","values","coin","balance"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, FormControl, FormLabel, Input, FormHelperText, Select } from '@chakra-ui/core'\nimport Loader from 'react-loader'\n\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { Embed } from './Embed'\nimport { setTimeout } from 'timers'\nimport { useContract } from '../hooks'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\n\n\n\nexport default function NFTrade() {\n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [vaults, setVaults] = useState([])\n  const [myVaults, setMyVaults] = useState([])\n  const [myVaultsLoaded, setMyVaultsLoaded] = useState(false)\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [q, setQ] = useState(query.q)\n  const [temp_q, setTempQ] = useState(q || '')\n  const [network, setNetwork] = useState(query.network || null)\n  const [address, setAddress] = useState(query.address)\n  const [experimental, setExperimental] = useState(query.experimental)\n\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n  const nftradeContract = useContract(contractAddresses.nftrade[chainId], contractAddresses.nftradeAbi, true)\n  \n  const getVaults = async () => {    \n    setLoadingApi(true)\n    try {      \n      const response = await fetch(EMBLEM_API + '/search', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({q: q, network: network})\n      })\n      const jsonData = await response.json()\n      setState({ loaded: true })\n      setVaults(jsonData)\n      setLoadingApi(false)\n    } catch (error) {}\n  }\n\n  const getMyVaults = async () => {\n    console.log(\"Getting My Vaults\")\n    setMyVaultsLoaded(true)\n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental? '?experimental=true' : ''), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString(),\n        },\n      })\n      const jsonData = await response.json()\n      // setState({ loaded: true })\n      setMyVaults(jsonData)      \n      // setLoadingApi(false)\n      console.log(jsonData)\n    } catch (error) {}\n  }\n\n\n\n  useEffect(() => {\n    console.log(q, state, loadingApi)\n    nftradeStuff()\n    if (q && !state.loaded && !loadingApi) {\n      console.log(\"Load Search\")\n      getVaults()\n    }\n  })\n\n  async function nftradeStuff() {\n    !myVaultsLoaded ? await getMyVaults() : null\n    // let _owner  = await nftradeContract.ownerOf(tokenId)\n  }\n\n  async function getOffers(tokenId) {\n    let offerCount  = await nftradeContract.getOfferCount(contractAddresses.emblemVault[chainId], tokenId)\n    return offerCount\n  }\n\n  return (\n    <Loader loaded={state.loaded || !q}>\n      {loadingApi ? <Refreshing /> : ''}\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\" >\n        <FormControl isRequired>\n          <Flex width=\"full\" align=\"center\" justifyContent=\"center\" flexWrap=\"wrap\">\n            <Input\n              type=\"text\"\n              id=\"search-query\"\n              width='45%'\n              aria-describedby=\"search-query-helper-text\"\n              placeholder=\"0xdeadbeef\"\n              maxLength={42}\n              value={temp_q}\n              onChange={(e) =>\n                setTempQ(e.target.value)\n              }\n            />\n            <Button\n              m={2}\n              onClick={() => {\n                setState({ loaded: false })\n                setQ(temp_q)\n                let loc = location.href.split('?')[0]+\"?q=\"+temp_q +  \"&network=\" + network\n                window.history.pushState(temp_q, 'Title', loc);\n              }}\n            >Search\n            </Button>\n            <Select w=\"45%\" placeholder=\"All Networks\" value={network || ''}\n              onChange={(e)=>{\n                setNetwork(e.target.value)\n                console.log(e.target.value)\n              }}\n            >\n              <option value=\"matic\">Matic</option>\n              <option value=\"mainnet\">Ethereum Mainnet</option>\n              <option value=\"rinkeby\">Ethereum Rinkeby</option>\n            </Select>\n          </Flex>\n          \n          <FormHelperText id=\"search-query-helper-text\">\n            Search for Emblem Vaults by: Name, Description, Type, Contents\n        </FormHelperText>\n        </FormControl>\n      </Flex>\n      <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\" mt={10}>\n        {vaults.length ? (\n          vaults.map(async (vault, index) => {\n            let pieces = location.pathname.split('/')\n            let offerCount = await getOffers(vault.tokenId)\n            pieces.pop()\n            let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId\n            const flexSettings = {\n              flex: '1',\n              minW: '300px',\n              maxW: '300px',\n              borderWidth: '1px',\n              color: 'white',\n              mx: '6',\n              mb: '6',\n              rounded: 'lg',\n              overflow: 'hidden',\n              borderColor: vault.status == 'claimed' ? 'green !important' : '',\n              cursor: 'pointer',\n            }\n            const redirect = function () {\n              location.href = url\n            }\n            return (\n              <Stack key={\"stack_\"+index}>\n                <Box key={index} {...flexSettings} onClick={redirect}>\n                  <Text fontWeight=\"semibold\" textAlign=\"center\" mt={2}>\n                    {vault.name}\n                    {!vault.private ? ': ~$' + vault.totalValue : null}\n                  </Text>\n                  <Stack align=\"center\">\n                    <Embed url={vault.image}/>\n                  </Stack>\n                  <Box d=\"flex\" alignItems=\"baseline\">\n                    <Box color=\"gray.500\" fontWeight=\"semibold\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                      {vault.private ? (\n                        <>\n                          <Text>Contents hidden. Click to view the vault and unlock values.</Text>\n                        </>\n                      ) : vault.values.length ? (\n                        vault.values.map((coin, index) => {\n                          if (index < 4)\n                            return (\n                              <Text key={coin.name} isTruncated>\n                                {coin.name}: {coin.balance}\n                              </Text>\n                            )\n                          else if (index == 4)\n                            return (\n                              <Text fontWeight=\"bold\" mt={2}>\n                                ... Click to see the rest ...\n                              </Text>\n                            )\n                        })\n                      ) : (\n                            <Text>\n                              Nothing in here! <br />\n                          Click to fill 'er up!\n                            </Text>\n                          )}\n                    </Box>\n                    \n                  </Box>                \n                  <Stack align=\"center\" mt={3}>\n                    {vault.status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                  </Stack>\n                </Box>\n                <Select placeholder=\"Offer NFT\" \n                    onChange={(e)=>{\n                      console.log(e.target.value)\n                    }}\n                  >\n                    {myVaults.map((vault, index) => {\n                      return (\n                        <option key={index} value={vault.tokenId}>{vault.name}</option>\n                      )\n                    })}\n                    \n                    <option value=\"mainnet\">Ethereum Mainnet</option>\n                    <option value=\"rinkeby\">Ethereum Rinkeby</option>\n                  </Select>\n              </Stack>\n            )\n          })\n        ) : (\n          <Text>\n            Search Resulted in 0 Vaults.{' '}\n            <Link color=\"#638cd8\" href=\"../create\">\n              CREATE ONE HERE!\n            </Link>\n          </Text>\n        )}\n      </Flex>\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}