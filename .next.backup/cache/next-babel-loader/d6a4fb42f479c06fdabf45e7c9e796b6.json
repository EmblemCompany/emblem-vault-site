{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Vault.tsx\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text } from \"@chakra-ui/core\";\nimport { useWeb3React } from '@web3-react/core';\nimport React, { useEffect } from \"react\";\nimport { useRouter } from 'next/router';\nexport default function Vault() {\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    query,\n    pathname,\n    replace\n  } = useRouter();\n  const [tokenId, setTokenId] = React.useState(query.id);\n  const [vaultName, setVaultName] = React.useState('');\n  const [vaultDesc, setVaultDesc] = React.useState('');\n  const [vaultImage, setVaultImage] = React.useState('');\n  const [vaultValues, setVaultValues] = React.useState([]);\n\n  const validImage = function (data) {\n    if (data.includes('http')) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const getVault = async () => {\n    // const responce = await fetch('https://api.emblemvault.io/vaults/0x5a63264914a1eCB626e32e8AD683704bA7b0621f', {\n    const responce = await fetch('https://api.emblemvault.io/meta/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'service': 'evmetadata',\n        'chainId': chainId.toString()\n      }\n    });\n    const jsonData = await responce.json();\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setVaultDesc(jsonData.description);\n    setVaultValues(jsonData.values);\n    setVaultDesc(jsonData.description);\n  };\n\n  useEffect(() => {\n    getVault();\n  }, []);\n  return __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, vaultName, __jsx(Image, {\n    src: validImage(vaultImage) ? vaultImage : \"https://circuitsofvalue.com/public/coval-logo.png\",\n    size: \"250px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  })), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 19\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    fontWeight: \"semibold\",\n    letterSpacing: \"wide\",\n    fontSize: \"xs\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }, vaultValues.length ? vaultValues.map(coin => {\n    return __jsx(Text, {\n      key: coin.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 27\n      }\n    }, coin.balance, \" \", coin.name);\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  }, \"Nothing in here! Fill 'er up!\"))), __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, vaultDesc))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Vault.tsx"],"names":["Box","Flex","Image","Text","useWeb3React","React","useEffect","useRouter","Vault","account","chainId","query","pathname","replace","tokenId","setTokenId","useState","id","vaultName","setVaultName","vaultDesc","setVaultDesc","vaultImage","setVaultImage","vaultValues","setVaultValues","validImage","data","includes","getVault","responce","fetch","method","headers","toString","jsonData","json","name","image","description","values","length","map","coin","balance"],"mappings":";;AAAA,SACIA,GADJ,EAEIC,IAFJ,EAGIC,KAHJ,EAIIC,IAJJ,QAKO,iBALP;AAOA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,eAAe,SAASC,KAAT,GAAiB;AAE5B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBN,YAAY,EAAzC;AACA,QAAM;AAAEO,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,MAA+BN,SAAS,EAA9C;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBV,KAAK,CAACW,QAAN,CAAeL,KAAK,CAACM,EAArB,CAA9B;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bd,KAAK,CAACW,QAAN,CAAe,EAAf,CAAlC;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BhB,KAAK,CAACW,QAAN,CAAe,EAAf,CAAlC;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BlB,KAAK,CAACW,QAAN,CAAe,EAAf,CAApC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCpB,KAAK,CAACW,QAAN,CAAe,EAAf,CAAtC;;AACA,QAAMU,UAAU,GAAG,UAASC,IAAT,EAAc;AAC/B,QAAIA,IAAI,CAACC,QAAL,CAAc,MAAd,CAAJ,EAA2B;AACzB,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAP;AACD;AACF,GAND;;AAOA,QAAMC,QAAQ,GAAG,YAAY;AAC3B;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqCjB,OAAtC,EAA+C;AACzEkB,MAAAA,MAAM,EAAE,KADiE;AAEzEC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,mBAAW,YAFJ;AAGP,mBAAWvB,OAAO,CAACwB,QAAR;AAHJ;AAFgE,KAA/C,CAA5B;AAQA,UAAMC,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAvB;AACAjB,IAAAA,YAAY,CAACgB,QAAQ,CAACE,IAAV,CAAZ;AACAd,IAAAA,aAAa,CAACY,QAAQ,CAACG,KAAV,CAAb;AACAjB,IAAAA,YAAY,CAACc,QAAQ,CAACI,WAAV,CAAZ;AACAd,IAAAA,cAAc,CAACU,QAAQ,CAACK,MAAV,CAAd;AACAnB,IAAAA,YAAY,CAACc,QAAQ,CAACI,WAAV,CAAZ;AACD,GAhBD;;AAkBAjC,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAC,QAAzB;AAAkC,IAAA,cAAc,EAAC,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,IAAI,EAAC,IAAV;AAAe,IAAA,WAAW,EAAC,KAA3B;AAAiC,IAAA,OAAO,EAAC,IAAzC;AAA8C,IAAA,QAAQ,EAAC,QAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACQ,MAAC,GAAD;AACE,IAAA,EAAE,EAAC,GADL;AAEE,IAAA,UAAU,EAAC,UAFb;AAGE,IAAA,EAAE,EAAC,IAHL;AAIE,IAAA,UAAU,EAAC,OAJb;AAKE,IAAA,CAAC,EAAE,CALL;AAME,IAAA,SAAS,EAAC,QANZ;AAOE,IAAA,aAAa,EAAC,WAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGX,SATH,EAWI,MAAC,KAAD;AAAO,IAAA,GAAG,EAAEQ,UAAU,CAACJ,UAAD,CAAV,GACRA,UADQ,GAER,mDAFJ;AAIE,IAAA,IAAI,EAAC,OAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CADR,EAoBQ,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AACE,IAAA,KAAK,EAAC,UADR;AAEE,IAAA,UAAU,EAAC,UAFb;AAGE,IAAA,aAAa,EAAC,MAHhB;AAIE,IAAA,QAAQ,EAAC,IAJX;AAKE,IAAA,EAAE,EAAC,GALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGE,WAAW,CAACiB,MAAZ,GACCjB,WAAW,CAACkB,GAAZ,CAAiBC,IAAD,IAAU;AAC1B,WACE,MAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAI,CAACN,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGM,IAAI,CAACC,OADR,OACkBD,IAAI,CAACN,IADvB,CADF;AAKD,GANC,CADD,GAQC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAfJ,CADF,CADF,EAsBA,MAAC,GAAD;AACM,IAAA,EAAE,EAAC,GADT;AAEM,IAAA,UAAU,EAAC,UAFjB;AAGM,IAAA,EAAE,EAAC,IAHT;AAIM,IAAA,UAAU,EAAC,OAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMOjB,SANP,CAtBA,CApBR,CADF,CADF;AAyDH","sourcesContent":["import {\n    Box,\n    Flex,\n    Image,\n    Text\n} from \"@chakra-ui/core\";\n\nimport { useWeb3React } from '@web3-react/core'\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from 'next/router'\n\nexport default function Vault() {\n\n    const { account, chainId } = useWeb3React()\n    const { query, pathname, replace } = useRouter()\n    const [tokenId, setTokenId] = React.useState(query.id);\n    const [vaultName, setVaultName] = React.useState('');\n    const [vaultDesc, setVaultDesc] = React.useState('');\n    const [vaultImage, setVaultImage] = React.useState('');\n    const [vaultValues, setVaultValues] = React.useState([]);\n    const validImage = function(data){\n      if (data.includes('http')) {\n        return true\n      } else {\n        return false\n      }\n    }\n    const getVault = async () => {\n      // const responce = await fetch('https://api.emblemvault.io/vaults/0x5a63264914a1eCB626e32e8AD683704bA7b0621f', {\n      const responce = await fetch('https://api.emblemvault.io/meta/' + tokenId, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'service': 'evmetadata',\n          'chainId': chainId.toString()\n        },\n      })\n      const jsonData = await responce.json()\n      setVaultName(jsonData.name)\n      setVaultImage(jsonData.image)\n      setVaultDesc(jsonData.description)\n      setVaultValues(jsonData.values)\n      setVaultDesc(jsonData.description)\n    }\n\n    useEffect(() => {\n      getVault()\n    }, [])\n\n    return (\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n        <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\" >\n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                >\n                  {vaultName}\n\n                    <Image src={validImage(vaultImage)\n                      ? vaultImage\n                      : \"https://circuitsofvalue.com/public/coval-logo.png\"\n                    }\n                      size=\"250px\"\n                    />              \n                  </Box>\n\n                <Box p=\"6\">\n                  <Box d=\"flex\" alignItems=\"baseline\">\n                    <Box\n                      color=\"gray.500\"\n                      fontWeight=\"semibold\"\n                      letterSpacing=\"wide\"\n                      fontSize=\"xs\"\n                      ml=\"2\"\n                    >\n                      {vaultValues.length \n                      ? vaultValues.map((coin) => {\n                        return (\n                          <Text key={coin.name}>\n                            {coin.balance} {coin.name}\n                          </Text>\n                        )\n                      })\n                      : <Text>Nothing in here! Fill 'er up!</Text>\n                      }\n                    </Box>\n                    \n                </Box>\n                <Box\n                      mt=\"1\"\n                      fontWeight=\"semibold\"\n                      as=\"h4\"\n                      lineHeight=\"tight\"\n                    >\n                      {vaultDesc}\n                    </Box>\n                  </Box>\n              </Box>\n      </Flex>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}