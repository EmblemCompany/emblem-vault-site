{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure, Collapse, FormLabel, useColorMode } from '@chakra-ui/core';\nimport { HStack } from '@chakra-ui/react';\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { isETHAddress } from '../utils';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport CryptoJS from 'crypto-js';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nimport NFTSlideshow from './embed/NFTSlideshow';\nimport CoinBalance from './partials/CoinBalance';\nimport transakSDK from '@transak/transak-sdk';\nvar AddrModal = dynamic(_c = function _c() {\n  return import('./AddrModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./AddrModal')];\n    },\n    modules: ['./AddrModal']\n  }\n});\n_c2 = AddrModal;\nvar KeysModal = dynamic(_c3 = function _c3() {\n  return import('./KeysModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./KeysModal')];\n    },\n    modules: ['./KeysModal']\n  }\n});\n_c4 = KeysModal;\nexport default function Nft() {\n  _s();\n\n  var _this = this;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(false),\n      approved = _useState[0],\n      setApproved = _useState[1];\n\n  var _useState2 = useState(query.key),\n      mintPassword = _useState2[0],\n      setMintPassword = _useState2[1];\n\n  var _useState3 = useState(query.framed || true),\n      framed = _useState3[0],\n      setFramed = _useState3[1];\n\n  var _useState4 = useState(query.id),\n      tokenId = _useState4[0],\n      setTokenId = _useState4[1];\n\n  var _useState5 = useState(query.experimental),\n      experimental = _useState5[0],\n      setExperimental = _useState5[1];\n\n  var _useState6 = useState(''),\n      vaultName = _useState6[0],\n      setVaultName = _useState6[1];\n\n  var _useState7 = useState(''),\n      vaultDesc = _useState7[0],\n      setVaultDesc = _useState7[1];\n\n  var _useState8 = useState(''),\n      vaultImage = _useState8[0],\n      setVaultImage = _useState8[1];\n\n  var _useState9 = useState([]),\n      vaultValues = _useState9[0],\n      setVaultValues = _useState9[1];\n\n  var _useState10 = useState([]),\n      vaultDataValues = _useState10[0],\n      setVaultDataValues = _useState10[1];\n\n  var _useState11 = useState([]),\n      vaultAddresses = _useState11[0],\n      setVaultAddresses = _useState11[1];\n\n  var _useState12 = useState(false),\n      vaultPrivacy = _useState12[0],\n      setVaultPrivacy = _useState12[1];\n\n  var _useState13 = useState(0),\n      vaultTotalValue = _useState13[0],\n      setVaultTotalValue = _useState13[1];\n\n  var _useState14 = useState(null),\n      vaultChainId = _useState14[0],\n      setVaultChainId = _useState14[1];\n\n  var _useState15 = useState(null),\n      hash = _useState15[0],\n      setHash = _useState15[1];\n\n  var _useState16 = useState(''),\n      currCoin = _useState16[0],\n      setCurrCoin = _useState16[1];\n\n  var _useState17 = useState(''),\n      currAddr = _useState17[0],\n      setCurrAddr = _useState17[1];\n\n  var _useState18 = useState({\n    loaded: false\n  }),\n      state = _useState18[0],\n      setState = _useState18[1];\n\n  var _useState19 = useState(false),\n      mine = _useState19[0],\n      setMine = _useState19[1];\n\n  var _useState20 = useState(false),\n      claiming = _useState20[0],\n      setClaiming = _useState20[1];\n\n  var _useState21 = useState('claimed'),\n      status = _useState21[0],\n      setStatus = _useState21[1];\n\n  var _useState22 = useState(null),\n      claimedBy = _useState22[0],\n      setClaimedBy = _useState22[1];\n\n  var _useState23 = useState(''),\n      mnemonic = _useState23[0],\n      setMnemonic = _useState23[1];\n\n  var _useState24 = useState(''),\n      privKeyBTC = _useState24[0],\n      setPrivKeyBTC = _useState24[1];\n\n  var _useState25 = useState(''),\n      privKeyETH = _useState25[0],\n      setPrivKeyETH = _useState25[1];\n\n  var _useState26 = useState([]),\n      privValues = _useState26[0],\n      setKeyValues = _useState26[1];\n\n  var _useState27 = useState(false),\n      loadingApi = _useState27[0],\n      setLoadingApi = _useState27[1];\n\n  var _useState28 = useState(''),\n      decryptedEffect = _useState28[0],\n      setDecryptedEffect = _useState28[1];\n\n  var _useState29 = useState(false),\n      decryptedEffectRunning = _useState29[0],\n      setDecryptedEffectRunning = _useState29[1];\n\n  var _useState30 = useState(''),\n      decryptPassword = _useState30[0],\n      setDecryptPassword = _useState30[1];\n\n  var _useState31 = useState(false),\n      invalidVault = _useState31[0],\n      setInvalidVault = _useState31[1];\n\n  var _useState32 = useState(false),\n      hasCheckedNft = _useState32[0],\n      setHasCheckedNft = _useState32[1];\n\n  var _useState33 = useState(false),\n      accepting = _useState33[0],\n      setAccepting = _useState33[1];\n\n  var _useState34 = useState(false),\n      approving = _useState34[0],\n      setApproving = _useState34[1];\n\n  var _useState35 = useState(false),\n      acceptable = _useState35[0],\n      setAcceptable = _useState35[1];\n\n  var _useState36 = useState(''),\n      transferPassword = _useState36[0],\n      setTransferPassword = _useState36[1];\n\n  var _useState37 = useState(false),\n      showTransferPassword = _useState37[0],\n      setShowTransferPassword = _useState37[1];\n\n  var _useState38 = useState(false),\n      preTransfering = _useState38[0],\n      setPreTransfering = _useState38[1];\n\n  var _useState39 = useState(null),\n      transferToAddress = _useState39[0],\n      setTransferToAddress = _useState39[1];\n\n  var _useState40 = useState(false),\n      transfering = _useState40[0],\n      setTransfering = _useState40[1];\n\n  var _useState41 = useState(null),\n      owner = _useState41[0],\n      setOwner = _useState41[1]; // const [transferImage, setTransferImage] = useState('')\n\n\n  var handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  var _useDisclosure = useDisclosure(),\n      isOpenAddrModal = _useDisclosure.isOpen,\n      onOpenAddrModal = _useDisclosure.onOpen,\n      onCloseAddrModal = _useDisclosure.onClose;\n\n  var _useDisclosure2 = useDisclosure(),\n      isOpenKeysModal = _useDisclosure2.isOpen,\n      onOpenKeysModal = _useDisclosure2.onOpen,\n      onCloseKeysModal = _useDisclosure2.onClose;\n\n  var _useDisclosure3 = useDisclosure(),\n      isOpen = _useDisclosure3.isOpen,\n      onToggle = _useDisclosure3.onToggle;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var transak;\n  var transferImage;\n\n  var initializeTransak = function initializeTransak(address, coin) {\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',\n      // Your API Key\n      environment: 'PRODUCTION',\n      // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '',\n      // Your customer's wallet address\n      themeColor: '000000',\n      // App theme color\n      fiatCurrency: 'USD',\n      // INR/GBP\n      // fiatAmount: 350,\n      email: '',\n      // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    }); // To get all the events\n\n    transak.on(transak.ALL_EVENTS, function (data) {\n      console.log(data);\n    }); // This will trigger when the user marks payment is made.\n\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, function (orderData) {\n      console.log(orderData);\n      transak.close();\n    });\n    transak.init();\n  };\n\n  var transferVault = function transferVault() {\n    setTransfering(true);\n    emblemContract.transferFrom(account, transferToAddress, tokenId).then(function (_ref) {\n      var hash = _ref.hash;\n      setHash(hash);\n    })[\"catch\"](function (error) {});\n  };\n\n  var fireMetaMask = function fireMetaMask() {\n    console.log(mintPassword);\n    setAccepting(true);\n    getWitness(function (witness) {\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;\n      handlerContract.transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature).then(function (_ref2) {\n        var hash = _ref2.hash;\n        setTimeout(function () {\n          setHash(hash); // setShowMakingVaultMsg(true)\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })[\"catch\"](function (error) {\n        setAccepting(false);\n\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(\"tx failed.\", error);\n        } else {// setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      });\n    });\n  };\n\n  var addPreTransfer = function addPreTransfer() {\n    console.log('transferImage', \"0x\" + transferImage);\n    setPreTransfering(true);\n    handlerContract.addPreTransfer(tokenId, \"0x\" + transferImage).then(function (_ref3) {\n      var hash = _ref3.hash;\n      // setTimeout(() => {\n      setHash(hash);\n      console.log(\"Set Pre Transfering True\", preTransfering); // setShowMakingVaultMsg(true)\n      // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      if (error === null || error === void 0 ? void 0 : error.code) {\n        console.log(\"Error?\");\n        setPreTransfering(false);\n        setShowTransferPassword(false);\n        setTransferPassword('');\n      } else {// setShowTransferPassword(!showTransferPassword? true : false)\n        // setPreTransfering(false)\n        // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  var handleApproveForall = function handleApproveForall() {\n    setApproving(true);\n    emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(function (_ref4) {\n      var hash = _ref4.hash;\n      setTimeout(function () {\n        setHash(hash); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(\"tx failed.\", error);\n      } else {\n        setApproving(false); // setShowPreVaultMsg(false)\n      }\n    });\n  }; // \n\n\n  var getVault = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              loadCache();\n              _context.next = 3;\n              return fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 3:\n              responce = _context.sent;\n              _context.next = 6;\n              return responce.json();\n\n            case 6:\n              jsonData = _context.sent;\n\n              // console.log('vault response was ', jsonData)\n              if (jsonData.image_ipfs) {\n                getIPFSImage(jsonData.image_ipfs);\n              }\n\n              if (!jsonData.name) {\n                setState({\n                  loaded: true\n                });\n                setInvalidVault(true);\n              } else {\n                setStates(jsonData);\n                saveCache(jsonData);\n                setLoadingApi(false);\n                setInvalidVault(false);\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getVault() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var getIPFSImage = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(hash) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              alert(0);\n              _context2.next = 3;\n              return fetch('https://gateway.ipfs.io/ipfs/' + hash, {\n                method: 'GET',\n                headers: {// redirect:'follow'\n                }\n              });\n\n            case 3:\n              responce = _context2.sent;\n              _context2.next = 6;\n              return responce.text();\n\n            case 6:\n              jsonData = _context2.sent;\n              setVaultImage(jsonData);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getIPFSImage(_x) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var getWitness = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return fetch(EMBLEM_API + '/witness/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  chainid: chainId.toString()\n                }\n              });\n\n            case 2:\n              responce = _context3.sent;\n              _context3.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context3.sent;\n\n              if (!jsonData.signature) {\n                _context3.next = 11;\n                break;\n              }\n\n              console.log('witness', jsonData);\n              return _context3.abrupt(\"return\", cb(jsonData));\n\n            case 11:\n              return _context3.abrupt(\"return\", cb(false));\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getWitness(_x2) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var setStates = function setStates(jsonData) {\n    framed && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\" + framed : null;\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    setVaultValues(vaultValues.concat(jsonData.values));\n    setVaultDataValues(jsonData.attributes.filter(function (item) {\n      return item.trait_type === \"key\";\n    }));\n    setVaultDesc(jsonData.description);\n    setVaultAddresses(jsonData.addresses);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : jsonData.network == \"xdai\" ? 100 : jsonData.network == \"bsc\" ? 56 : jsonData.network == \"fantom\" ? 250 : 97);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    } // console.log('inside getstates. mine is ', mine)\n\n\n    setState({\n      loaded: true\n    });\n    var isPvt = jsonData.addresses.filter(function (item) {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n    setTimeout(function () {\n      !isPvt ? // getNftBalance(\n      //   jsonData.values,\n      //   jsonData.addresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (_values) => {\n      //     // console.log(\"Have new values\", _values)\n      //     setVaultValues(_values)\n      getAllBalancesLive([], tokenId, function (v) {\n        setVaultValues(v);\n      }) : null; // }\n      // ) : null\n    }, 5);\n  };\n\n  var getEthBalances = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return fetch(EMBLEM_API + '/eth/balance/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context4.sent;\n              _context4.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context4.sent;\n              // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n              setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue)); // console.log('get eth balances', jsonData.values)\n\n              return _context4.abrupt(\"return\", cb(jsonData.values));\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function getEthBalances(_x3, _x4) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n\n  var getBtcBalance = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(values, address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return fetch(EMBLEM_API + '/btc/balance/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context5.sent;\n              _context5.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context5.sent;\n              return _context5.abrupt(\"return\", cb(values.concat(jsonData.values)));\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function getBtcBalance(_x5, _x6, _x7) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var getNftBalance = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(values, address, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return fetch(EMBLEM_API + '/eth/nft/' + address, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context6.sent;\n              _context6.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context6.sent;\n\n              if (!(jsonData.length > 0)) {\n                _context6.next = 10;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", cb(values.concat(jsonData)));\n\n            case 10:\n              return _context6.abrupt(\"return\", cb(values));\n\n            case 11:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function getNftBalance(_x8, _x9, _x10) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalances = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(values, tokenId, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return fetch(EMBLEM_API + '/vault/balance/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context7.sent;\n              _context7.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context7.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context7.next = 11;\n                break;\n              }\n\n              return _context7.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 11:\n              return _context7.abrupt(\"return\", cb(values));\n\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function getAllBalances(_x11, _x12, _x13) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalancesLive = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(values, tokenId, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              setVaultValues([]); // console.log(address)\n\n              _context8.next = 3;\n              return fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 3:\n              responce = _context8.sent;\n              _context8.next = 6;\n              return responce.json();\n\n            case 6:\n              jsonData = _context8.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context8.next = 12;\n                break;\n              }\n\n              return _context8.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 12:\n              return _context8.abrupt(\"return\", cb(values));\n\n            case 13:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function getAllBalancesLive(_x14, _x15, _x16) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalancesByAddress = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(values, ethAddress, btcAddress, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context9.sent;\n              _context9.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context9.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context9.next = 11;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 11:\n              return _context9.abrupt(\"return\", cb(values));\n\n            case 12:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function getAllBalancesByAddress(_x17, _x18, _x19, _x20) {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  var saveCache = function saveCache(vault) {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  var loadCache = function loadCache() {\n    var vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  var savePasswordToLocalStorage = function savePasswordToLocalStorage() {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  var loadPasswordFromLocalStorage = function loadPasswordFromLocalStorage() {\n    var storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  };\n\n  var getKeys = /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature\n              });\n              _context10.next = 7;\n              return fetch(EMBLEM_API + '/claim/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context10.sent;\n              _context10.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context10.sent;\n              return _context10.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function getKeys(_x21, _x22, _x23) {\n      return _ref14.apply(this, arguments);\n    };\n  }();\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      var owned, _owner, _acceptable, isApproved;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              owned = false;\n              _context11.prev = 1;\n              _context11.next = 4;\n              return emblemContract.ownerOf(tokenId);\n\n            case 4:\n              _owner = _context11.sent;\n              _context11.next = 7;\n              return handlerContract.getPreTransfer(tokenId);\n\n            case 7:\n              _acceptable = _context11.sent;\n              _context11.next = 10;\n              return emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n\n            case 10:\n              isApproved = _context11.sent;\n              setApproved(isApproved);\n              setAcceptable(_acceptable._from !== \"0x0000000000000000000000000000000000000000\");\n              setOwner(_owner);\n              setMine(_owner === account);\n              loadPasswordFromLocalStorage();\n              _context11.next = 20;\n              break;\n\n            case 18:\n              _context11.prev = 18;\n              _context11.t0 = _context11[\"catch\"](1);\n\n            case 20:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, null, [[1, 18]]);\n    }));\n\n    return function getContractStates() {\n      return _ref15.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {// console.log(\"mine?\", mine)\n    // console.log(\"claiming?\", claiming)\n    // console.log(\"accepting?\", accepting)\n    // console.log(\"acceptable\", acceptable)\n  });\n\n  var handleSign = /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n              library.getSigner(account).signMessage('Claim: ' + tokenId).then(function (signature) {\n                getKeys(signature, tokenId, function (result) {\n                  // console.log('HandleSign response is ' + result)\n                  setMnemonic(result.decrypted.phrase);\n                  setPrivKeyBTC(result.decrypted.keys.filter(function (key) {\n                    return key.coin === 'btc';\n                  })[0].privkey);\n                  setPrivKeyETH(result.decrypted.keys.filter(function (key) {\n                    return key.coin === 'eth';\n                  })[0].privkey);\n                  setKeyValues(result.decrypted.values);\n                  onOpenKeysModal();\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    return function handleSign() {\n      return _ref16.apply(this, arguments);\n    };\n  }();\n\n  var handleClaim = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(function (_ref18) {\n                var hash = _ref18.hash;\n                setClaiming(true);\n                setTimeout(function () {\n                  setHash(hash);\n                }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n              });\n\n            case 1:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    return function handleClaim() {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n\n  var startDecryptEffect = /*#__PURE__*/function () {\n    var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n      var theLetters, ctnt, speed, increment, clen, si, stri, block, fixed, nextFrame;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              nextFrame = function _nextFrame(pos) {\n                for (var i = 0; i < clen - stri; i++) {\n                  //Random number\n                  var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n                  var letter = theLetters.charAt(num);\n                  block = block + letter;\n                }\n\n                if (si == increment - 1) {\n                  stri++;\n                }\n\n                if (si == increment) {\n                  // Add a letter;\n                  // every speed*10 ms\n                  fixed = fixed + ctnt.charAt(stri - 1);\n                  si = 0;\n                } // $(\"#output\").html(fixed + block);\n\n\n                setDecryptedEffect(fixed + block);\n                block = '';\n              };\n\n              if (!decryptedEffectRunning) {\n                _context14.next = 3;\n                break;\n              }\n\n              return _context14.abrupt(\"return\");\n\n            case 3:\n              setDecryptedEffectRunning(true);\n              theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n              ctnt = 'Decrypting'; // Your text goes here\n\n              speed = 5; // ms per frame\n\n              increment = 8; // frames per step. Must be >2\n\n              clen = ctnt.length;\n              si = 0;\n              stri = 0;\n              block = '';\n              fixed = '';\n\n              (function rustle(i) {\n                setTimeout(function () {\n                  if (--i) {\n                    rustle(i);\n                  } else {\n                    setDecryptedEffectRunning(false);\n                  }\n\n                  nextFrame(i);\n                  si = si + 1;\n                }, speed);\n              })(clen * increment + 1);\n\n            case 14:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    return function startDecryptEffect() {\n      return _ref19.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getVault();\n  }, []);\n  useEffect(function () {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null; // console.log('in the usefeect that clls getcontractstates')\n  });\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n');\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    var ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      var ethAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'ETH';\n      })[0].address;\n      var btcAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'BTC';\n      })[0].address;\n      getAllBalancesByAddress([], ethAddress, btcAddress, function (values) {\n        setVaultValues(values);\n      }); // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {}\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(function (item) {\n      var cipherText = item.address.replace('private:', '');\n      item.address = decrypt(cipherText, key);\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 661,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 662,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 9\n    }\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: \"\\n              // $(\\\".NFT\\\").tilt({    \\n              //     maxTilt: 3\\n              // });\\n              $(\\\".NFT\\\").trigger('mouseenter');\\n              $(\\\".NFT\\\").trigger('mouseclick'), '.NFT';\\n              \"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    privValues: privValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 7\n    }\n  }), __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 7\n    }\n  }, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 9\n    }\n  }), loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault ? __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    className: \"NFT\",\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 15\n    }\n  }, vaultChainId != chainId ? __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"orange.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 19\n    }\n  }, \"BEWARE: Vault is on a different network than you are.\") : null, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\" // textTransform=\"uppercase\"\n    ,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 718,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy ? ': ~$' + vaultTotalValue.toLocaleString() : null), __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 17\n    }\n  }, vaultValues.length && vaultValues.filter(function (item) {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultImage,\n    items: vaultValues.map(function (value) {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 23\n    }\n  }) : __jsx(Embed, {\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 735,\n      columnNumber: 23\n    }\n  })), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 739,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 740,\n      columnNumber: 19\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    fontSize: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 742,\n      columnNumber: 23\n    }\n  }, vaultChainId == chainId ? __jsx(Link, {\n    href: \"./vaultlist?address=\" + owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 744,\n      columnNumber: 25\n    }\n  }, \"Owner: \", owner) : null), __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 23\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 750,\n      columnNumber: 25\n    }\n  }))))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 17\n    }\n  }, vaultPrivacy ? __jsx(Box, {\n    mb: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 757,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 758,\n      columnNumber: 23\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: function onChange(e) {\n      return tryDecrypt(e.target.value);\n    },\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 761,\n      columnNumber: 23\n    }\n  })) : __jsx(Box, {\n    d: \"flex\",\n    backgroundColor: colorMode == \"light\" ? \"gray.100\" : \"gray.700\",\n    alignItems: \"baseline\",\n    className: \"coin-balance-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 769,\n      columnNumber: 21\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 770,\n      columnNumber: 23\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    mt: 2,\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 771,\n      columnNumber: 25\n    }\n  }, \"Current Contents:  \", __jsx(\"button\", {\n    onClick: function onClick() {\n      getAllBalancesLive([], tokenId, function (v) {\n        setVaultValues(v);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 773,\n      columnNumber: 46\n    }\n  }, \" [Refresh Balances]\")), __jsx(Text, {\n    as: \"p\",\n    color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 781,\n      columnNumber: 25\n    }\n  }, \"$\", Number(vaultTotalValue.toFixed(4)).toLocaleString()), vaultValues.length ? vaultValues.map(function (coin) {\n    return __jsx(Stack, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 31\n      }\n    }, __jsx(CoinBalance, {\n      colorMode: colorMode,\n      coin: coin,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 33\n      }\n    }));\n  }) : null, vaultDataValues.length ? vaultDataValues.map(function (data) {\n    return __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 794,\n        columnNumber: 31\n      }\n    }, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 798,\n      columnNumber: 27\n    }\n  }, \"Nothing in here! Fill 'er up!\") : null)), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 805,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 23\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 807,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 808,\n      columnNumber: 27\n    }\n  }, \"Addresses Within Vault\"), __jsx(HStack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 809,\n      columnNumber: 25\n    }\n  }, vaultAddresses.map(function (addr) {\n    return __jsx(Button, {\n      width: \"165px\",\n      key: addr.address,\n      onClick: function onClick() {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812,\n        columnNumber: 31\n      }\n    }, \"Put \", addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin, \" In\");\n  })), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 826,\n      columnNumber: 25\n    }\n  }, \"Load Vault with Credit Card\"), __jsx(HStack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 827,\n      columnNumber: 25\n    }\n  }, vaultAddresses.map(function (addr) {\n    return __jsx(Button, {\n      width: \"165px\",\n      key: addr.address,\n      onClick: function onClick() {\n        initializeTransak(addr.address, addr.coin);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830,\n        columnNumber: 31\n      }\n    }, \"Buy \", addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin);\n  }))))) : null, !(status === 'claimed') && (vaultChainId === 1 || vaultChainId === 4) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 851,\n      columnNumber: 21\n    }\n  }, __jsx(Button, _extends({\n    width: \"100%\",\n    as: \"a\"\n  }, {\n    href: 'https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + contractAddresses.emblemVault[vaultChainId] + '/' + tokenId,\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 852,\n      columnNumber: 23\n    }\n  }), mine ? 'Sell (Opensea)' : 'Make an Offer (Opensea)')) : null, !(status === 'claimed') && mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 873,\n      columnNumber: 22\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 874,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: onToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 875,\n      columnNumber: 27\n    }\n  }, \"Transfer Vault\"), __jsx(Collapse, {\n    isOpen: isOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 876,\n      columnNumber: 27\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 877,\n      columnNumber: 29\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"owner-address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 878,\n      columnNumber: 29\n    }\n  }, \"Address\"), __jsx(Input, {\n    mt: 1,\n    type: \"text\",\n    id: \"transferAddress\",\n    value: transferToAddress || '',\n    onChange: function onChange(e) {\n      console.log(\"Transfer to\", e.target.value);\n      setTransferToAddress(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 879,\n      columnNumber: 31\n    }\n  })), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 891,\n      columnNumber: 29\n    }\n  }, __jsx(Button, {\n    isDisabled: !isETHAddress(transferToAddress),\n    onClick: function onClick() {\n      onToggle();\n      transferVault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 892,\n      columnNumber: 31\n    }\n  }, \"Transfer Now\")))))) : null, mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 903,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      if (!approved) {\n        return handleApproveForall();\n      } else {\n        var key = CryptoJS.lib.WordArray.random(128 / 8).toString();\n        var sha = CryptoJS.SHA256(key).toString();\n        console.log('plain', key);\n        console.log('sha', sha);\n        setTransferPassword(key);\n        transferImage = sha;\n        setTimeout(function () {\n          addPreTransfer();\n        }, 500);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 904,\n      columnNumber: 23\n    }\n  }, \" \", approved ? \"Get Link (Send Vault Via Link)\" : \"Approve Gifting\", \" \"))) : null, (showTransferPassword || mintPassword) && acceptable ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 923,\n      columnNumber: 23\n    }\n  }, __jsx(Link, {\n    href: location.protocol + '//' + location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 924,\n      columnNumber: 25\n    }\n  }, \"Copy Gift Link\"), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 925,\n      columnNumber: 25\n    }\n  }, \"Password: \", transferPassword || mintPassword)) : null, acceptable && claimedBy !== account ? __jsx(React.Fragment, null, __jsx(Button, {\n    mt: 2,\n    width: \"100%\",\n    onClick: function onClick() {\n      fireMetaMask();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 930,\n      columnNumber: 23\n    }\n  }, \"Accept\"), __jsx(Input, {\n    mt: 2,\n    type: \"password\",\n    id: \"mintPassword\",\n    minLength: 3,\n    maxLength: 200,\n    value: mintPassword || '',\n    onChange: function onChange(e) {\n      console.log('grrr', e.target.value, mintPassword);\n      setMintPassword(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 931,\n      columnNumber: 23\n    }\n  })) : null, !(status === 'claimed') && account && vaultChainId === chainId && mine ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 948,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      handleClaim();\n    },\n    isDisabled: claiming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 949,\n      columnNumber: 23\n    }\n  }, claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)')) : status === 'claimed' && claimedBy === account && vaultChainId === chainId ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 960,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 961,\n      columnNumber: 23\n    }\n  }, \"Get Keys\")) : null), __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 967,\n      columnNumber: 17\n    }\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 968,\n      columnNumber: 42\n    }\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 971,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 972,\n      columnNumber: 21\n    }\n  }), accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving ? \"Handling Approval Flow ...\" : transfering ? \"Transfering Vault ...\" : \"Generating Gift Link ...\") : null)) : __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 979,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 980,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 984,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 986,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      // location.href = location.origin + '/vault?id=' + tokenId\n      if (claiming && !accepting && !preTransfering) {\n        console.log(111111);\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account);\n        handleSign();\n      } else if (preTransfering) {\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        setApproving(false);\n        getVault();\n        setHash(null);\n      } else if (transfering) {\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else {\n        console.log('claiming', claiming);\n        console.log('accepting', accepting);\n        console.log('preTransfering', preTransfering);\n        console.log('approving', approving);\n        console.log(\"Unknown state\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 993,\n      columnNumber: 11\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1031,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(Nft, \"YxO00XNrb6THc9tm4YIEDFTbAOQ=\", false, function () {\n  return [useWeb3React, useRouter, useContract, useContract, useDisclosure, useDisclosure, useDisclosure, useColorMode];\n});\n\n_c5 = Nft;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"AddrModal$dynamic\");\n$RefreshReg$(_c2, \"AddrModal\");\n$RefreshReg$(_c3, \"KeysModal$dynamic\");\n$RefreshReg$(_c4, \"KeysModal\");\n$RefreshReg$(_c5, \"Nft\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","Link","Alert","AlertIcon","useDisclosure","Collapse","FormLabel","useColorMode","HStack","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","Loader","dynamic","isETHAddress","TransactionToast","EMBLEM_API","BURN_ADDRESS","contractAddresses","useContract","CryptoJS","ReactMarkdown","gfm","Embed","NFTSlideshow","CoinBalance","transakSDK","AddrModal","KeysModal","Nft","account","chainId","library","query","approved","setApproved","key","mintPassword","setMintPassword","framed","setFramed","id","tokenId","setTokenId","experimental","setExperimental","vaultName","setVaultName","vaultDesc","setVaultDesc","vaultImage","setVaultImage","vaultValues","setVaultValues","vaultDataValues","setVaultDataValues","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","loaded","state","setState","mine","setMine","claiming","setClaiming","status","setStatus","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","privValues","setKeyValues","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","hasCheckedNft","setHasCheckedNft","accepting","setAccepting","approving","setApproving","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","preTransfering","setPreTransfering","transferToAddress","setTransferToAddress","transfering","setTransfering","owner","setOwner","handlerContract","vaultHandler","vaultHandlerAbi","emblemContract","emblemVault","emblemAbi","isOpenAddrModal","isOpen","onOpenAddrModal","onOpen","onCloseAddrModal","onClose","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","onToggle","colorMode","transak","transferImage","initializeTransak","address","coin","apiKey","environment","defaultCryptoCurrency","walletAddress","themeColor","fiatCurrency","email","redirectURL","hostURL","window","location","origin","widgetHeight","widgetWidth","on","ALL_EVENTS","data","console","log","EVENTS","TRANSAK_ORDER_SUCCESSFUL","orderData","close","init","transferVault","transferFrom","then","error","fireMetaMask","getWitness","witness","transferWithCode","nonce","signature","setTimeout","code","addPreTransfer","handleApproveForall","setApprovalForAll","getVault","loadCache","fetch","method","headers","service","responce","json","jsonData","image_ipfs","getIPFSImage","name","setStates","saveCache","alert","text","cb","chainid","toString","image","includes","description","totalValue","concat","values","attributes","filter","item","trait_type","addresses","network","isPvt","length","getAllBalancesLive","v","getEthBalances","Number","getBtcBalance","getNftBalance","getAllBalances","balances","getAllBalancesByAddress","ethAddress","btcAddress","vault","localStorage","setItem","JSON","stringify","parse","getItem","savePasswordToLocalStorage","loadPasswordFromLocalStorage","storedPw","getKeys","myHeaders","Headers","append","raw","body","redirect","getContractStates","owned","ownerOf","_owner","getPreTransfer","isApprovedForAll","isApproved","_from","handleSign","getSigner","signMessage","result","decrypted","phrase","keys","privkey","handleClaim","startDecryptEffect","nextFrame","pos","i","clen","stri","num","Math","floor","theLetters","random","letter","charAt","block","si","increment","fixed","ctnt","speed","rustle","splitDescription","words","desc","split","trim","tryDecrypt","ciphertext","replace","bytes","AES","decrypt","enc","Utf8","decryptAddresses","err","forEach","cipherText","decryptedData","__html","toLocaleString","type","map","value","canSwipe","e","target","toFixed","attribute_key","addr","href","rel","lib","WordArray","sha","SHA256","protocol","host"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n  Tooltip,\n  Collapse,\n  FormControl,\n  FormLabel,\n  useColorMode,\n  IconButton\n} from '@chakra-ui/core'\n\nimport {HStack, VStack, Circle } from '@chakra-ui/react'\n\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { isETHAddress, validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\nimport CryptoJS from 'crypto-js'\nimport { addTokenToWallet, addMany } from '../public/web3'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport Embed from './Embed'\nimport NFTSlideshow from './embed/NFTSlideshow'\nimport CoinBalance from './partials/CoinBalance'\nimport { chakra } from '@chakra-ui/system'\nimport transakSDK from '@transak/transak-sdk'\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\n\nexport default function Nft() {\n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [approved, setApproved] = useState(false)\n  const [mintPassword, setMintPassword] = useState(query.key)\n  const [framed, setFramed] = useState(query.framed || true)\n  const [tokenId, setTokenId] = useState(query.id)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [vaultDataValues, setVaultDataValues] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [privValues, setKeyValues] = useState([])\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [hasCheckedNft, setHasCheckedNft] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n  const [preTransfering, setPreTransfering] = useState(false)\n  const [transferToAddress, setTransferToAddress] = useState(null)\n  const [transfering, setTransfering] = useState(false)\n  const [owner, setOwner] = useState(null)\n  // const [transferImage, setTransferImage] = useState('')\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n  const { isOpen, onToggle } = useDisclosure()\n\n  const { colorMode } = useColorMode()\n\n  let transak\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  let transferImage;\n\n  const initializeTransak = (address?: string, coin? : string)=>{\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',  // Your API Key\n      environment: 'PRODUCTION', // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '', // Your customer's wallet address\n      themeColor: '000000', // App theme color\n      fiatCurrency: 'USD', // INR/GBP\n      // fiatAmount: 350,\n      email: '', // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    });\n  \n    // To get all the events\n    transak.on(transak.ALL_EVENTS, (data) => {\n      console.log(data)\n    });\n  \n    // This will trigger when the user marks payment is made.\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, (orderData) => {\n      console.log(orderData);\n      transak.close();\n    });\n  \n    transak.init()\n  }\n\n  const transferVault = () => {\n    setTransfering(true)\n    ;(emblemContract as Contract).transferFrom(account, transferToAddress, tokenId)\n    .then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n    .catch((error: ErrorWithCode) => {})\n  }\n\n  const fireMetaMask = () => {\n    console.log(mintPassword)\n    setAccepting(true)\n    getWitness(witness=>{\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;(handlerContract as Contract)\n      .transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        setAccepting(false)\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          // setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n    })\n    \n  }\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\"+transferImage)\n    setPreTransfering(true)\n    ;(handlerContract as Contract)\n      .addPreTransfer(tokenId, \"0x\"+transferImage)\n      .then(({ hash }: { hash: string }) => {\n        // setTimeout(() => {\n          setHash(hash)\n          console.log(\"Set Pre Transfering True\", preTransfering)\n          // setShowMakingVaultMsg(true)\n        // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code){   \n            console.log(\"Error?\")       \n            setPreTransfering(false)\n            setShowTransferPassword(false)\n            setTransferPassword('')\n        } else {\n          // setShowTransferPassword(!showTransferPassword? true : false)\n          // setPreTransfering(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const handleApproveForall = () => {\n    setApproving(true)\n    ;(emblemContract as Contract)\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  // \n\n  const getVault = async () => {\n    loadCache()\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log('vault response was ', jsonData)\n    if (jsonData.image_ipfs) {\n      getIPFSImage(jsonData.image_ipfs)\n    }\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      setStates(jsonData)\n      saveCache(jsonData)\n      setLoadingApi(false)\n      setInvalidVault(false)\n    }\n  }\n\n  const getIPFSImage = async function(hash){\n    alert(0)\n    const responce = await fetch('https://gateway.ipfs.io/ipfs/'+hash, {\n      method: 'GET',\n      headers: {\n        // redirect:'follow'\n      },\n    })\n    let jsonData = await responce.text()\n    setVaultImage(jsonData)    \n  }\n\n  const getWitness = async (cb) => {\n    \n    const responce = await fetch(EMBLEM_API + '/witness/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log('vault response was ', jsonData)\n    if (jsonData.signature) {\n      console.log('witness', jsonData)\n      return cb(jsonData)\n    } else {\n      return cb(false)\n    }\n  }\n\n  const setStates = (jsonData) => {\n    framed && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\"+framed : null\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    setVaultValues(vaultValues.concat(jsonData.values))\n    setVaultDataValues(jsonData.attributes.filter(item=>{return item.trait_type === \"key\"}))\n    setVaultDesc(jsonData.description)\n    setVaultAddresses(jsonData.addresses)\n    setVaultChainId(\n      jsonData.network == 'mainnet' ? 1 : \n      jsonData.network == \"rinkeby\" ? 4 : \n      jsonData.network == \"mumbai\" ? 80001 : \n      jsonData.network == \"matic\" ? 137 : \n      jsonData.network == \"xdai\" ? 100 : \n      jsonData.network == \"bsc\" ? 56 : \n      jsonData.network == \"fantom\" ? 250 : \n      97\n    )\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    // console.log('inside getstates. mine is ', mine)\n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)\n    setTimeout(() => {\n      !isPvt ?\n      // getNftBalance(\n      //   jsonData.values,\n      //   jsonData.addresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (_values) => {\n      //     // console.log(\"Have new values\", _values)\n      //     setVaultValues(_values)\n      getAllBalancesLive([], tokenId, (v)=>{\n        setVaultValues(v)\n      }) : null\n        // }\n      // ) : null\n\n    }, 5)\n  }\n\n  const getEthBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n    return cb(jsonData.values)\n  }\n\n  const getBtcBalance = async (values, address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // setVaultValues(values.concat(jsonData.values))\n    return cb(values.concat(jsonData.values))\n  }\n\n  const getNftBalance = async (values, address, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    if (jsonData.length > 0) {\n      // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n      return cb(values.concat(jsonData))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    setVaultValues([])\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true' , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const saveCache = (vault) => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)) // Save new state for later\n  }\n\n  const loadCache = () => {\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')) // Load vaults from storage before updating from server!\n    if (vault) {\n      setState({ loaded: true })\n      setStates(vault)\n      setLoadingApi(true)\n    }\n  }\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword) // Save new state for later\n  }\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword')\n    storedPw && acceptable ? setMintPassword(storedPw) : null //setMintPassword(null)\n  }\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    // console.log('getKeys response is ', jsonData)\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    let owned = false\n    try {\n      let _owner  = await emblemContract.ownerOf(tokenId)\n      let acceptable = await handlerContract.getPreTransfer(tokenId)\n      let isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId])\n      setApproved(isApproved)\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n      setOwner(_owner)\n      setMine(_owner === account)\n      loadPasswordFromLocalStorage()\n    } catch(err){}\n    \n  }\n\n  useEffect(()=>{\n    // console.log(\"mine?\", mine)\n    // console.log(\"claiming?\", claiming)\n    // console.log(\"accepting?\", accepting)\n    // console.log(\"acceptable\", acceptable)\n  })\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + tokenId)\n      .then((signature) => {\n        getKeys(signature, tokenId, (result) => {\n          // console.log('HandleSign response is ' + result)\n          setMnemonic(result.decrypted.phrase)\n          setPrivKeyBTC(\n            result.decrypted.keys.filter((key) => {\n              return key.coin === 'btc'\n            })[0].privkey\n          )\n          setPrivKeyETH(\n            result.decrypted.keys.filter((key) => {\n              return key.coin === 'eth'\n            })[0].privkey\n          )\n          setKeyValues(result.decrypted.values)\n          onOpenKeysModal()\n        })\n      })\n  }\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({ hash }: { hash: string }) => {\n      setClaiming(true)\n      setTimeout(() => {\n        setHash(hash)\n      }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    })\n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random())\n        //Get random letter\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      // $(\"#output\").html(fixed + block);\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null\n    // console.log('in the usefeect that clls getcontractstates')\n  })\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n')\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      let ethAddress = vaultAddresses.filter((item) => {return item.coin === 'ETH'})[0].address\n      let btcAddress = vaultAddresses.filter((item) => {return item.coin === 'BTC'})[0].address\n      getAllBalancesByAddress([], ethAddress, btcAddress, (values)=>{\n        setVaultValues(values)\n      })\n      // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {}\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach((item) => {\n      let cipherText = item.address.replace('private:', '')\n      item.address = decrypt(cipherText, key)\n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n        <script\n            dangerouslySetInnerHTML={{\n              __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              `,\n            }}\n          />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n        privValues={privValues}\n      />\n\n      <Loader loaded={state.loaded}>\n        <Box height=\"40px\"></Box>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault ? (          \n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                className=\"NFT\" \n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                {vaultChainId != chainId ? (\n                  <Box\n                    mt=\"1\"\n                    fontWeight=\"semibold\"\n                    as=\"h3\"\n                    lineHeight=\"tight\"\n                    p={2}\n                    textAlign=\"center\"\n                    textTransform=\"uppercase\"\n                    alignItems=\"center\"\n                    color=\"orange.500\"\n                  >\n                    BEWARE: Vault is on a different network than you are.\n                  </Box>\n                ) : null}\n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  // textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy ? ': ~$' + vaultTotalValue.toLocaleString() : null}\n                </Box>\n                <Stack className=\"NFT-content\" align=\"center\">\n                  { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                      <NFTSlideshow name={vaultName} image={vaultImage} items={vaultValues.map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n                    ) : (\n                      <Embed url={vaultImage}/>\n                    )\n                  }                                    \n                </Stack>\n                <Stack align=\"center\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                    <Stack>\n                      <Text fontSize=\"xs\">\n                      { vaultChainId == chainId ? (\n                        <Link href={\"./vaultlist?address=\"+owner}>\n                          Owner: {owner}\n                        </Link>\n                      ) : null }\n                      </Text>\n                      <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" >\n                        <ReactMarkdown plugins={[gfm]} children={splitDescription(vaultDesc)} />\n                      </Text>\n                    </Stack>                    \n                  </Box>                    \n                </Stack>\n                <Box p=\"6\">\n                  {vaultPrivacy ? (\n                    <Box mb={5}>\n                      <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                        {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                      </Text>\n                      <Input\n                        type=\"password\"\n                        id=\"vault-password\"\n                        onChange={(e) => tryDecrypt(e.target.value)}\n                        aria-describedby=\"password-helper-text\"\n                      />\n                    </Box>\n                  ) : (\n                    <Box d=\"flex\" backgroundColor={colorMode == \"light\"? \"gray.100\": \"gray.700\"} alignItems=\"baseline\" className=\"coin-balance-content\">\n                      <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                        <Text as=\"h4\" mt={2} fontWeight=\"semibold\">\n                        \n                          Current Contents:  <button\n                          onClick={() =>{\n                            getAllBalancesLive([], tokenId, (v)=>{\n                              setVaultValues(v)\n                            })\n                          }}\n                        > [Refresh Balances]</button>\n                        </Text>\n                        <Text as=\"p\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"}>${Number(vaultTotalValue.toFixed(4)).toLocaleString()}</Text>\n                        { vaultValues.length ? (\n                          vaultValues.map((coin) => {\n                            return (  \n                              <Stack> \n                                <CoinBalance colorMode={colorMode} coin={coin}/>  \n                              </Stack>\n                            )\n                          })\n                        ) : null } \n                        { vaultDataValues.length ? (\n                          vaultDataValues.map((data) => {\n                            return (\n                              <Text>Data: {data.attribute_key}</Text>\n                            )                        \n                          })\n                        ) : !vaultDataValues.length && !vaultValues.length ? (\n                          <Text>Nothing in here! Fill 'er up!</Text>\n                        ) : null}\n                      </Box>\n                    </Box>\n                  )}                  \n                  \n                  {!vaultPrivacy ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <ButtonGroup justifyContent=\"space-between\" spacing={6}>\n                        <Stack>\n                          <Text>Addresses Within Vault</Text>\n                        <HStack>\n                          {vaultAddresses.map((addr) => {\n                            return (\n                              <Button\n                                width=\"165px\"\n                                key={addr.address}\n                                onClick={() => {\n                                  setCurrCoin(addr.coin)\n                                  setCurrAddr(addr.address)\n                                  onOpenAddrModal()\n                                }}\n                              >\n                                Put {addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin} In\n                              </Button>\n                            )\n                          })}\n                        </HStack>\n                        <Text>Load Vault with Credit Card</Text>\n                        <HStack>\n                          {vaultAddresses.map((addr) => {\n                            return (\n                              <Button\n                                width=\"165px\"\n                                key={addr.address}\n                                onClick={() => {\n                                  initializeTransak(addr.address, addr.coin)\n                                }}\n                              >\n                                Buy {addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin}\n                              </Button>\n                            )\n                          })}\n                        </HStack>\n                        {/* <Button onClick={() => {\n                          initializeTransak()\n                        }}>Add Crypto with Credit Card</Button> */}\n                        </Stack>\n                      </ButtonGroup>\n                    </Box>\n                  ) : null}\n\n                  {!(status === 'claimed') && (vaultChainId === 1 || vaultChainId === 4 )? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        as=\"a\"\n                        {...{\n                          href:\n                            'https://' +\n                            (vaultChainId == 4 ? 'rinkeby.' : '') +\n                            'opensea.io/assets/' +\n                            contractAddresses.emblemVault[vaultChainId] +\n                            '/' +\n                            tokenId,\n                          target: '_blank',\n                          rel: 'noopener noreferrer',\n                        }}\n                      >\n                        {mine ? 'Sell (Opensea)' : 'Make an Offer (Opensea)'}\n                      </Button>\n                    </Box>\n                  ) : null}\n                  {!(status === 'claimed') && mine && !acceptable?  (\n                    <>\n                     <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\" width=\"100%\">\n                        <Stack direction=\"column\" align=\"center\" width=\"100%\">\n                          <Button width=\"100%\" onClick={onToggle}>Transfer Vault</Button>\n                          <Collapse isOpen={isOpen}>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                            <FormLabel htmlFor=\"owner-address\">Address</FormLabel>\n                              <Input\n                                mt={1}\n                                type=\"text\"\n                                id=\"transferAddress\"\n                                value={transferToAddress || ''}\n                                onChange={(e) => {                              \n                                  console.log(\"Transfer to\", e.target.value)\n                                  setTransferToAddress(e.target.value)\n                                }}\n                                autoComplete=\"off\"\n                              />\n                            </Box>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                              <Button isDisabled={!isETHAddress(transferToAddress)} onClick={()=>{\n                                onToggle()\n                                transferVault()\n                              }}>Transfer Now</Button> \n                            </Box>\n                          </Collapse>\n                        </Stack>\n                      </Box>\n                    </>\n                  ):null }\n                  {mine && !acceptable ? (<>\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={() => {\n                        if (!approved) {\n                          return handleApproveForall()\n                        } else {\n                          let key = CryptoJS.lib.WordArray.random(128/8).toString()\n                          let sha = CryptoJS.SHA256(key).toString()\n                          console.log('plain', key)\n                          console.log('sha', sha)\n                          setTransferPassword(key)\n                          transferImage = sha                          \n                          setTimeout(()=>{\n                            addPreTransfer()\n                          }, 500)\n                        }                                             \n                      }\n                    }> {approved ? \"Get Link (Send Vault Via Link)\" : \"Approve Gifting\" } </Button>\n                    </Box>\n                  </>) : null }\n                  {(showTransferPassword || mintPassword) && acceptable ? (\n                      <Box>\n                        <Link href={location.protocol +'//'+ location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword)}>Copy Gift Link</Link>\n                        <Text>Password: {(transferPassword || mintPassword)}</Text>\n                      </Box>\n                      ) : null}\n                  {acceptable && claimedBy !== account ? (\n                  <>\n                      <Button mt={2} width=\"100%\" onClick={()=>{fireMetaMask()}}>Accept</Button>\n                      <Input\n                        mt={2}\n                        type=\"password\"\n                        id=\"mintPassword\"\n                        minLength={3}\n                        maxLength={200}\n                        value={mintPassword || ''}\n                        onChange={(e) => {\n                          console.log('grrr', e.target.value, mintPassword)\n                          setMintPassword(e.target.value)}\n                        }\n                        autoComplete=\"off\"\n                      />\n                  </>\n                    ) : null}\n\n                  {!(status === 'claimed') && account && vaultChainId === chainId && mine ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        onClick={() => {\n                          handleClaim()\n                        }}\n                        isDisabled={claiming}\n                      >\n                        {claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)'}\n                      </Button>\n                    </Box>\n                  ) : status === 'claimed' && claimedBy === account && vaultChainId === chainId ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={handleSign}>\n                        Get Keys\n                      </Button>\n                    </Box>\n                  ) : null}                  \n                </Box>\n                <Stack direction=\"column\" align=\"center\">\n                  {status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n                {hash ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    { accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving? \"Handling Approval Flow ...\" : transfering? \"Transfering Vault ...\":  \"Generating Gift Link ...\"}\n                  </Alert>\n                ) : null}\n              </Box>\n            </Flex>\n        ) : (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        )}\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              // location.href = location.origin + '/vault?id=' + tokenId\n              if (claiming && !accepting && !preTransfering) {\n                console.log(111111)\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                handleSign()\n              } else if (preTransfering) {\n                savePasswordToLocalStorage()\n                setShowTransferPassword(true)\n                setPreTransfering(false)\n                setHash(null)                \n              } else if(accepting) {\n                setAccepting(false)                \n                getVault()\n                setHash(null)\n              } else if(approving) {\n                setApproving(false)\n                getVault()\n                setHash(null)\n              } else if(transfering) {\n                setTransfering(false)\n                getVault()\n                setHash(null)\n              } else {\n                console.log('claiming', claiming) \n                console.log('accepting', accepting) \n                console.log('preTransfering', preTransfering)\n                console.log('approving', approving)\n                console.log(\"Unknown state\")\n              }\n            }}\n          />\n        ) : null}\n        <Box height=\"40px\"></Box>\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}