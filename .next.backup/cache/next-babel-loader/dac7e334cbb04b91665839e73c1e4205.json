{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Link, Stack, Button, Input } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from '../Refreshing';\nimport { useRouter } from 'next/router';\nimport { TransactionToast } from '../TransactionToast';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { HStack, VStack, Divider } from '@chakra-ui/react';\nimport { contractAddresses } from '../../constants';\nimport { useContract } from '../../hooks';\nimport { EXPLORER_PREFIXES } from '../../utils';\nimport { Contract } from '@ethersproject/contracts';\nexport default function ERC1155() {\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useState = useState({\n    loaded: true\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(true),\n      loadingApi = _useState2[0],\n      setLoadingApi = _useState2[1];\n\n  var _useState3 = useState(true),\n      refreshing = _useState3[0],\n      setRefreshing = _useState3[1];\n\n  var _useState4 = useState([]),\n      stats = _useState4[0],\n      setStats = _useState4[1];\n\n  var _useState5 = useState(query.address || null),\n      address = _useState5[0],\n      setAddress = _useState5[1];\n\n  var _useState6 = useState(0),\n      offset = _useState6[0],\n      setOffset = _useState6[1];\n\n  var _useState7 = useState(10),\n      limit = _useState7[0],\n      setLimit = _useState7[1];\n\n  var _useState8 = useState(address ? true : false),\n      shouldFetchData = _useState8[0],\n      setShouldFetchData = _useState8[1];\n\n  var _useState9 = useState(true),\n      hasMore = _useState9[0],\n      setHasMore = _useState9[1];\n\n  var _useState10 = useState(false),\n      buttonDisabled = _useState10[0],\n      setButtonDisabled = _useState10[1];\n\n  var _useState11 = useState(null),\n      hash = _useState11[0],\n      setHash = _useState11[1];\n\n  var _useState12 = useState([]),\n      factories = _useState12[0],\n      setFactories = _useState12[1];\n\n  var _useState13 = useState([]),\n      clones = _useState13[0],\n      setClones = _useState13[1];\n\n  var _useState14 = useState(query.address),\n      contractAddress = _useState14[0],\n      setContractAddress = _useState14[1];\n\n  var _useState15 = useState(),\n      contract = _useState15[0],\n      setContract = _useState15[1];\n\n  var handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  // useEffect(() => {\n  //   if (state.loaded == false && !loadingApi && address) {\n  //     setLoadingApi(false)\n  //     // getPnL()\n  //   }\n  // }, [])\n  // useEffect(() => {\n  //   if (shouldFetchData && address) {\n  //     console.log(\"Should load api after setting consts\", offset)\n  //     setShouldFetchData(false)\n  //     // getPnL()\n  //   } else {\n  //     console.log(\"wtf\")\n  //   }\n  // }, [shouldFetchData, offset])\n  // const fetchDataForLazyLoad = async () =>{    \n  //   console.log('setting new offset to', offset+limit)\n  //   setOffset(offset+limit)\n  //   setShouldFetchData(true)\n  // }\n  useEffect(function () {\n    if (loadingApi && refreshing && contractAddress) {\n      setLoadingApi(false);\n      setState({\n        loaded: true\n      });\n      setRefreshing(false); // alert(0)\n\n      GetContracts();\n    }\n  });\n\n  var StartRefresh = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setRefreshing(true);\n              setLoadingApi(true);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function StartRefresh() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  function createClone(_x) {\n    return _createClone.apply(this, arguments);\n  }\n\n  function _createClone() {\n    _createClone = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(cloneType) {\n      var factory, factoryContract;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              factory = factories.filter(function (factory) {\n                return factory.type == cloneType;\n              })[0];\n              factoryContract = getFactoryContract(factory.address);\n              factoryContract.createClone(account).then(function (_ref2) {\n                var hash = _ref2.hash;\n                console.log(\"hash\", hash);\n                setHash(hash);\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _createClone.apply(this, arguments);\n  }\n\n  function GetContracts() {\n    return _GetContracts.apply(this, arguments);\n  }\n\n  function _GetContracts() {\n    _GetContracts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var contract;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              contract = getCloneContract(contractAddress, \"ERC1155\");\n              setContract(contract);\n              console.log(\"Contract\", Object.keys(contract));\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _GetContracts.apply(this, arguments);\n  }\n\n  function getFactoryInto(_x2, _x3, _x4) {\n    return _getFactoryInto.apply(this, arguments);\n  }\n\n  function _getFactoryInto() {\n    _getFactoryInto = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(factories, index, values) {\n      var factory, factoryContract, factoryType, factoryClones, factoryOwner, detailedClones;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              factory = factories[index];\n              factoryContract = getFactoryContract(factory);\n              _context4.next = 4;\n              return factoryContract.factoryType();\n\n            case 4:\n              factoryType = _context4.sent;\n              _context4.next = 7;\n              return factoryContract.getClones();\n\n            case 7:\n              factoryClones = _context4.sent;\n              _context4.next = 10;\n              return factoryContract.owner();\n\n            case 10:\n              factoryOwner = _context4.sent;\n              _context4.next = 13;\n              return getCloneInto(factoryClones, 0, factoryType, []);\n\n            case 13:\n              detailedClones = _context4.sent;\n              values.push({\n                type: factoryType,\n                address: factory,\n                clones: detailedClones,\n                owner: factoryOwner\n              });\n\n              if (!(index + 1 == factories.length)) {\n                _context4.next = 19;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", values);\n\n            case 19:\n              return _context4.abrupt(\"return\", getFactoryInto(factories, index + 1, values));\n\n            case 20:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _getFactoryInto.apply(this, arguments);\n  }\n\n  function getClones() {\n    return _getClones.apply(this, arguments);\n  }\n\n  function _getClones() {\n    _getClones = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var erc1155, erc721, erc20;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return handlerContract.getAllRegisteredContractsOfType(1);\n\n            case 2:\n              erc1155 = _context5.sent;\n              console.log(\"---------\", erc1155, erc1155.length);\n              _context5.next = 6;\n              return getCloneInto(erc1155, 0, \"ERC1155\", []);\n\n            case 6:\n              erc1155 = _context5.sent;\n              _context5.next = 9;\n              return handlerContract.getAllRegisteredContractsOfType(2);\n\n            case 9:\n              erc721 = _context5.sent;\n              _context5.next = 12;\n              return getCloneInto(erc721, 0, \"ERC721\", []);\n\n            case 12:\n              erc721 = _context5.sent;\n              _context5.next = 15;\n              return handlerContract.getAllRegisteredContractsOfType(4);\n\n            case 15:\n              erc20 = _context5.sent;\n              _context5.next = 18;\n              return getCloneInto(erc20, 0, \"ERC20\", []);\n\n            case 18:\n              erc20 = _context5.sent;\n              setClones(erc1155.concat(erc721).concat(erc20));\n\n            case 20:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _getClones.apply(this, arguments);\n  }\n\n  function getCloneInto(_x5, _x6, _x7, _x8) {\n    return _getCloneInto.apply(this, arguments);\n  }\n\n  function _getCloneInto() {\n    _getCloneInto = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_clones, index, cloneType, values) {\n      var clone, cloneContract, cloneOwner, cloneName, decimals, cloneBalance, serializable;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(_clones.length == 0)) {\n                _context6.next = 2;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", values);\n\n            case 2:\n              clone = _clones[index];\n              cloneContract = getCloneContract(clone, cloneType);\n              _context6.next = 6;\n              return cloneContract.owner();\n\n            case 6:\n              cloneOwner = _context6.sent;\n              _context6.next = 9;\n              return cloneContract.name();\n\n            case 9:\n              cloneName = _context6.sent;\n\n              if (!(cloneType == \"ERC20\")) {\n                _context6.next = 16;\n                break;\n              }\n\n              _context6.next = 13;\n              return cloneContract.decimals();\n\n            case 13:\n              _context6.t0 = _context6.sent;\n              _context6.next = 17;\n              break;\n\n            case 16:\n              _context6.t0 = 0;\n\n            case 17:\n              decimals = _context6.t0;\n\n              if (!(cloneType == \"ERC20\")) {\n                _context6.next = 27;\n                break;\n              }\n\n              _context6.t2 = calculateBalance;\n              _context6.next = 22;\n              return cloneContract.balanceOf(account);\n\n            case 22:\n              _context6.t3 = _context6.sent.toNumber();\n              _context6.t4 = decimals;\n              _context6.t1 = (0, _context6.t2)(_context6.t3, _context6.t4);\n              _context6.next = 35;\n              break;\n\n            case 27:\n              if (!(cloneType == \"ERC1155\")) {\n                _context6.next = 33;\n                break;\n              }\n\n              _context6.next = 30;\n              return getERC1155TokenBalance(cloneContract, account);\n\n            case 30:\n              _context6.t5 = _context6.sent;\n              _context6.next = 34;\n              break;\n\n            case 33:\n              _context6.t5 = 0;\n\n            case 34:\n              _context6.t1 = _context6.t5;\n\n            case 35:\n              cloneBalance = _context6.t1;\n\n              if (!(cloneType != \"ERC1155\")) {\n                _context6.next = 40;\n                break;\n              }\n\n              _context6.t6 = false;\n              _context6.next = 43;\n              break;\n\n            case 40:\n              _context6.next = 42;\n              return cloneContract.isSerialized();\n\n            case 42:\n              _context6.t6 = _context6.sent;\n\n            case 43:\n              serializable = _context6.t6;\n              values.push({\n                address: clone,\n                owner: cloneOwner,\n                name: cloneName,\n                type: cloneType,\n                balance: cloneBalance,\n                decimals: decimals,\n                serializable: serializable\n              });\n\n              if (!(index + 1 == _clones.length)) {\n                _context6.next = 49;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", values);\n\n            case 49:\n              return _context6.abrupt(\"return\", getCloneInto(_clones, index + 1, cloneType, values));\n\n            case 50:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _getCloneInto.apply(this, arguments);\n  }\n\n  function getERC1155TokenBalance(_x9, _x10) {\n    return _getERC1155TokenBalance.apply(this, arguments);\n  }\n\n  function _getERC1155TokenBalance() {\n    _getERC1155TokenBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(contract, address) {\n      var ids, myIds, getMyBalanceByIds, _getMyBalanceByIds;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _getMyBalanceByIds = function _getMyBalanceByIds3() {\n                _getMyBalanceByIds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(tokenIds, index, contract, address, values) {\n                  var id, tokenBalance;\n                  return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          id = tokenIds[index];\n                          _context7.next = 3;\n                          return contract.balanceOf(address, id.toNumber());\n\n                        case 3:\n                          tokenBalance = _context7.sent;\n\n                          if (tokenBalance.toNumber() > 0) {// alert(id.toNumber())\n                            // alert(tokenBalance.toNumber())\n                          }\n\n                          if (!(index + 1 == tokenIds.length)) {\n                            _context7.next = 9;\n                            break;\n                          }\n\n                          return _context7.abrupt(\"return\", values);\n\n                        case 9:\n                          return _context7.abrupt(\"return\", getMyBalanceByIds(tokenIds, index + 1, contract, address, values));\n\n                        case 10:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }));\n                return _getMyBalanceByIds.apply(this, arguments);\n              };\n\n              getMyBalanceByIds = function _getMyBalanceByIds2(_x12, _x13, _x14, _x15, _x16) {\n                return _getMyBalanceByIds.apply(this, arguments);\n              };\n\n              _context8.next = 4;\n              return contract.getTokenIds();\n\n            case 4:\n              ids = _context8.sent;\n              myIds = ids.length > 0 ? getMyBalanceByIds(ids, 0, contract, address, []) : [];\n              console.log(\"ids\", ids);\n              return _context8.abrupt(\"return\", ids.length);\n\n            case 8:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _getERC1155TokenBalance.apply(this, arguments);\n  }\n\n  function toggleSerializable(_x11) {\n    return _toggleSerializable.apply(this, arguments);\n  }\n\n  function _toggleSerializable() {\n    _toggleSerializable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(address) {\n      var cloneContract;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              cloneContract = getCloneContract(address, \"ERC1155\");\n              cloneContract.toggleSerialization().then(function (_ref3) {\n                var hash = _ref3.hash;\n                setHash(hash);\n              });\n\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _toggleSerializable.apply(this, arguments);\n  }\n\n  function getCloneContract(address, cloneType) {\n    var abi;\n\n    switch (cloneType) {\n      case \"ERC20\":\n        abi = contractAddresses.erc20Abi;\n        break;\n\n      case \"ERC721\":\n        abi = contractAddresses.erc721Abi;\n        break;\n\n      case \"ERC1155\":\n        abi = contractAddresses.erc1155Abi;\n        break;\n    }\n\n    return new Contract(address, abi, library.getSigner(account).connectUnchecked());\n  }\n\n  function getFactoryContract(address) {\n    return new Contract(address, contractAddresses.clonableFactoryAbi, library.getSigner(account).connectUnchecked());\n  }\n\n  function calculateBalance(balance, decimals) {\n    return balance / Math.pow(10, parseInt(decimals));\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded\n  }, refreshing ? __jsx(Refreshing, null) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10\n  }, __jsx(Stack, {\n    align: \"center\",\n    w: \"100%\"\n  }, __jsx(Button, {\n    onClick: StartRefresh\n  }, \"Refresh Data\"), clones.length > 0 ? clones.map(function (clone, index) {\n    return __jsx(VStack, {\n      key: \"factory-\" + index,\n      p: 2\n    }, __jsx(Box, {\n      w: \"100%\",\n      \"min-width\": \"40px\"\n    }, __jsx(Text, {\n      key: \"address-\" + clone.address,\n      ml: 12\n    }, clone.owner == account ? \"Owned\" : null, \" \", clone.type, \":\", __jsx(Link, {\n      target: \"_blank\",\n      href: location.protocol + \"//\" + EXPLORER_PREFIXES[chainId] + \"/address/\" + clone.address + \"#readContract\"\n    }, \" \", clone.address)), __jsx(Divider, {\n      orientation: \"horizontal\"\n    }), __jsx(Text, {\n      key: \"name-\" + clone.name + index,\n      ml: 12\n    }, \"Name: \", clone.name || \"Not Named\"), __jsx(Divider, {\n      orientation: \"horizontal\"\n    }), __jsx(Text, {\n      key: \"balance-\" + clone.balance + index,\n      ml: 12\n    }, \"Balance: \", clone.balance), __jsx(Divider, {\n      orientation: \"horizontal\"\n    }), __jsx(Text, {\n      key: \"ser-\" + index,\n      ml: 12\n    }, \" Serializable: \", clone.serializable.toString() || \"Not Serializable\", clone.type == \"ERC1155\" ? __jsx(Button, {\n      m: 3,\n      onClick: function onClick() {\n        toggleSerializable(clone.address);\n      }\n    }, \"Toggle\") : null), __jsx(Divider, {\n      orientation: \"horizontal\"\n    }), __jsx(HStack, null, __jsx(Input, {\n      placeholder: \"TokenId\"\n    }), __jsx(Input, {\n      placeholder: \"Amount\"\n    }), __jsx(Button, null, \"Mint\"))));\n  }) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      setHash(null);\n      StartRefresh();\n    }\n  }) : null)));\n}","map":null,"metadata":{},"sourceType":"module"}