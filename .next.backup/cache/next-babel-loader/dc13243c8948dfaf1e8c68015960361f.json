{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft2.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure, Collapse, FormLabel, useColorMode, Tabs, TabList, Tab, TabPanel, TabPanels } from '@chakra-ui/core';\nimport { HStack } from '@chakra-ui/react'; // import TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\n\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport dynamic from 'next/dynamic';\nimport { isETHAddress } from '../utils';\nimport { Contract } from '@ethersproject/contracts';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport CryptoJS from 'crypto-js';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nimport NFTSlideshow from './embed/NFTSlideshow';\nimport CoinBalance from './partials/CoinBalance';\nimport transakSDK from '@transak/transak-sdk';\nimport Attributes from './partials/Attributes';\nimport { generateWallet } from '@stacks/wallet-sdk';\nimport FetchNodeDetails from \"@toruslabs/fetch-node-details\";\nimport TorusUtils from \"@toruslabs/torus.js\";\nconst API_VERSION = '/v2';\nconst AddrModal = dynamic(() => import('./AddrModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./AddrModal')],\n    modules: ['./AddrModal']\n  }\n});\nconst KeysModal = dynamic(() => import('./KeysModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./KeysModal')],\n    modules: ['./KeysModal']\n  }\n});\nconst OfferModal = dynamic(() => import('./OfferModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./OfferModal')],\n    modules: ['./OfferModal']\n  }\n});\nexport default function Nft2() {\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    query\n  } = useRouter();\n  const {\n    0: decimals,\n    1: setDecimals\n  } = useState(null);\n  const {\n    0: allowance,\n    1: setAllowance\n  } = useState(null);\n  const {\n    0: balance,\n    1: setBalance\n  } = useState(null);\n  const {\n    0: price,\n    1: setPrice\n  } = useState(null);\n  const {\n    0: isCovalApproved,\n    1: setIsCovalApproved\n  } = useState(false);\n  const {\n    0: approved,\n    1: setApproved\n  } = useState(false);\n  const {\n    0: useOldMint,\n    1: setUseOldMint\n  } = useState(query.useOldMint);\n  const {\n    0: mintPassword,\n    1: setMintPassword\n  } = useState(query.key);\n  const {\n    0: showOffer,\n    1: setShowOffer\n  } = useState(query.offer || false);\n  const {\n    0: framed,\n    1: setFramed\n  } = useState(query.framed || true);\n  const {\n    0: tokenId,\n    1: setTokenId\n  } = useState(query.id);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    0: noLayout,\n    1: setNoLayout\n  } = useState(query.noLayout);\n  const {\n    0: slideshowOnly,\n    1: setSlideshowOnly\n  } = useState(query.slideshowOnly || false);\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState('');\n  const {\n    0: vaultIPFS,\n    1: setVaultIPFS\n  } = useState('');\n  const {\n    0: vaultImageIPFS,\n    1: setVaultImageIPFS\n  } = useState('');\n  const {\n    0: vaultCiphertextV2,\n    1: setVaultCiphertextV2\n  } = useState('');\n  const {\n    0: vaultDesc,\n    1: setVaultDesc\n  } = useState('');\n  const {\n    0: vaultImage,\n    1: setVaultImage\n  } = useState('');\n  const {\n    0: ownedImage,\n    1: setOwnedImage\n  } = useState('');\n  const {\n    0: vaultValues,\n    1: setVaultValues\n  } = useState([]);\n  const {\n    0: loadedValues,\n    1: setLoadedValues\n  } = useState(false);\n  const {\n    0: vaultDataValues,\n    1: setVaultDataValues\n  } = useState([]);\n  const {\n    0: attributes,\n    1: setAttributes\n  } = useState([]);\n  const {\n    0: vaultAddresses,\n    1: setVaultAddresses\n  } = useState([]);\n  const {\n    0: vaultPrivacy,\n    1: setVaultPrivacy\n  } = useState(false);\n  const {\n    0: vaultTotalValue,\n    1: setVaultTotalValue\n  } = useState(0);\n  const {\n    0: vaultChainId,\n    1: setVaultChainId\n  } = useState(null);\n  const {\n    0: vaultChain,\n    1: setVaultChain\n  } = useState(null);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: currCoin,\n    1: setCurrCoin\n  } = useState('');\n  const {\n    0: currAddr,\n    1: setCurrAddr\n  } = useState('');\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: mine,\n    1: setMine\n  } = useState(false);\n  const {\n    0: claiming,\n    1: setClaiming\n  } = useState(false);\n  const {\n    0: status,\n    1: setStatus\n  } = useState('claimed');\n  const {\n    0: sealed,\n    1: setSealed\n  } = useState(false);\n  const {\n    0: claimedBy,\n    1: setClaimedBy\n  } = useState(null);\n  const {\n    0: mnemonic,\n    1: setMnemonic\n  } = useState('');\n  const {\n    0: privKeyBTC,\n    1: setPrivKeyBTC\n  } = useState('');\n  const {\n    0: privKeyETH,\n    1: setPrivKeyETH\n  } = useState('');\n  const {\n    0: privValues,\n    1: setKeyValues\n  } = useState([]);\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: decryptedEffect,\n    1: setDecryptedEffect\n  } = useState('');\n  const {\n    0: decryptedEffectRunning,\n    1: setDecryptedEffectRunning\n  } = useState(false);\n  const {\n    0: decryptPassword,\n    1: setDecryptPassword\n  } = useState('');\n  const {\n    0: invalidVault,\n    1: setInvalidVault\n  } = useState(false);\n  const {\n    0: hasCheckedNft,\n    1: setHasCheckedNft\n  } = useState(false);\n  const {\n    0: accepting,\n    1: setAccepting\n  } = useState(false);\n  const {\n    0: approving,\n    1: setApproving\n  } = useState(false);\n  const {\n    0: acceptable,\n    1: setAcceptable\n  } = useState(false);\n  const {\n    0: transferPassword,\n    1: setTransferPassword\n  } = useState('');\n  const {\n    0: showTransferPassword,\n    1: setShowTransferPassword\n  } = useState(false);\n  const {\n    0: preTransfering,\n    1: setPreTransfering\n  } = useState(false);\n  const {\n    0: transferToAddress,\n    1: setTransferToAddress\n  } = useState(null);\n  const {\n    0: transfering,\n    1: setTransfering\n  } = useState(false);\n  const {\n    0: owner,\n    1: setOwner\n  } = useState(null); // const [torus, setTorus] = useState(initTorus())\n\n  const {\n    0: live,\n    1: setLive\n  } = useState(false);\n  const {\n    0: nonce,\n    1: setNonce\n  } = useState(null);\n  const {\n    0: mintSignature,\n    1: setMintSignature\n  } = useState(null);\n  const {\n    0: to,\n    1: setTo\n  } = useState(null);\n  const {\n    0: showVerifyingSignature,\n    1: setShowVerifyingSignature\n  } = useState(false);\n  const {\n    0: showMakingVaultMsg,\n    1: setShowMakingVaultMsg\n  } = useState(false);\n  const {\n    0: minting,\n    1: setMinting\n  } = useState(false);\n  const {\n    0: isCrowdSale,\n    1: setIsCrowdSale\n  } = useState(false);\n  const {\n    0: alternateContractAddress,\n    1: setAlternateContractAddress\n  } = useState(null);\n  const {\n    0: targetAsset,\n    1: setTargetAsset\n  } = useState({\n    name: '',\n    image: '',\n    metadata: ''\n  });\n  const {\n    0: targetContract,\n    1: setTargetContract\n  } = useState({\n    name: '',\n    chain: '',\n    4: '',\n    1: '',\n    tokenId: {},\n    serialNumber: {\n      'hex': ''\n    }\n  });\n  const {\n    0: canCuratedMint,\n    1: setCanCuratedMint\n  } = useState(false);\n  const {\n    0: curatedMintingParameters,\n    1: setCuratedMintingParameters\n  } = useState({}); // const [transferImage, setTransferImage] = useState('')\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  const vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  let emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  let covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true);\n  const {\n    isOpen: isOpenAddrModal,\n    onOpen: onOpenAddrModal,\n    onClose: onCloseAddrModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenKeysModal,\n    onOpen: onOpenKeysModal,\n    onClose: onCloseKeysModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenOfferModal,\n    onOpen: onOpenOfferModal,\n    onClose: onCloseOfferModal\n  } = useDisclosure();\n  const {\n    isOpen,\n    onToggle\n  } = useDisclosure();\n  const {\n    isOpen: isManageAddressOpen,\n    onToggle: onManageAddressToggle\n  } = useDisclosure();\n  const {\n    colorMode\n  } = useColorMode();\n  let transak;\n  let transferImage; // async function initTorus() {\n  //   let _torus = new TorusSdk({\n  //     baseUrl: `${window.location.origin}/serviceworker`,\n  //     enableLogging: true,\n  //     network: \"testnet\", // details for test net\n  //   });\n  //   await _torus.init({skipSw: true, skipInit: true, skipPrefetch: true})\n  //   console.log(\"Initialized Torus\")\n  //   return _torus\n  // }\n\n  const getVaultContract = (address = null) => {\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked());\n  };\n\n  const getCuratedContract = (address = null) => {\n    return new Contract(address, contractAddresses.erc1155Abi, library.getSigner(account).connectUnchecked());\n  };\n\n  const getCovalContract = (address = null) => {\n    return new Contract(address, contractAddresses.covalAbi, library.getSigner(account).connectUnchecked());\n  };\n\n  const initializeTransak = (address, coin) => {\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',\n      // Your API Key\n      environment: 'PRODUCTION',\n      // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '',\n      // Your customer's wallet address\n      themeColor: '000000',\n      // App theme color\n      fiatCurrency: 'USD',\n      // INR/GBP\n      // fiatAmount: 350,\n      email: '',\n      // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    }); // To get all the events\n\n    transak.on(transak.ALL_EVENTS, data => {\n      console.log(data);\n    }); // This will trigger when the user marks payment is made.\n\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, orderData => {\n      console.log(orderData);\n      transak.close();\n    });\n    transak.init();\n  };\n\n  const checkLiveliness = (tokenId, targetContract, cb) => {\n    console.log(\"check liveliness next\", targetContract);\n    let endpoint = targetContract.name ? EMBLEM_API + API_VERSION + '/liveliness-curated' : EMBLEM_API + '/liveliness';\n    fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        tokenId: tokenId\n      })\n    }).then(async function (response) {\n      let data = await response.json();\n      setLive(data.live);\n      console.log(\"Liveliness check\", data);\n    });\n    return cb(false);\n  };\n\n  const transferVault = () => {\n    setTransfering(true);\n    emblemContract.transferFrom(account, transferToAddress, tokenId).then(({\n      hash\n    }) => {\n      setHash(hash);\n    }).catch(error => {});\n  };\n\n  const delayedMint = () => {\n    // setCreating(true)\n    console.log(\"Delayed Minting\");\n    setShowVerifyingSignature(false);\n    setShowMakingVaultMsg(true);\n    setMinting(true);\n    console.log('---------@@@@@------', contractAddresses.vaultHandler[chainId]);\n    let cipherTextHash = vaultAddresses.filter(address => {\n      return address.coin == \"ETH\";\n    })[0].address;\n    handlerContract.buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature).then(({\n      hash\n    }) => {\n      setTimeout(() => {\n        setHash(hash);\n        setShowMakingVaultMsg(false);\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      setShowMakingVaultMsg(false); // setMinting(false)\n    });\n  };\n\n  const deleteVault = () => {\n    library.getSigner(account).signMessage('Delete: ' + tokenId).then(signature => {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + API_VERSION + '/delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        location.href = location.href.split(\"/\")[0] + \"/vaults\";\n      });\n    });\n  };\n\n  const lazyMintCurated = () => {\n    library.getSigner(account).signMessage('Curated Minting: ' + tokenId).then(signature => {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + API_VERSION + '/mint-curated', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        console.log(\"WTFFFFF\");\n        console.log(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1);\n        setCuratedMintingParameters(data);\n        vaultHandlerContract.buyWithSignedPrice(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1).then(({\n          hash\n        }) => {\n          setTimeout(() => {\n            setHash(hash);\n            setShowMakingVaultMsg(true);\n            setMinting(true);\n          }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n        }).catch(error => {\n          console.log('ERROR', error);\n          setShowMakingVaultMsg(false);\n          setMinting(false);\n        });\n      });\n    });\n  };\n  /* NOT v2 */\n\n\n  const lazyMint = () => {\n    library.getSigner(account).signMessage('Delayed Minting: ' + tokenId).then(signature => {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + '/lazyMint', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        console.log(\"data\", data.data);\n        setMintSignature(data.data.signature);\n        setNonce(data.data.nonce);\n        setShowVerifyingSignature(true); // setCreating(true)\n\n        setTimeout(() => {\n          delayedMint();\n        }, 500);\n      });\n    });\n  };\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log('responce', responce, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const handleApproveForall = () => {\n    setApproving(true);\n\n    if (targetContract.name) {\n      emblemContract = getCuratedContract(targetContract[chainId]);\n      emblemContract.setApprovalForAll(contractAddresses.vaultHandlerV8[chainId], true).then(({\n        hash\n      }) => {\n        setTimeout(() => {\n          setHash(hash); // setShowMakingVaultMsg(true)\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      }).catch(error => {\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(`tx failed.`, error);\n        } else {\n          setApproving(false); // setShowPreVaultMsg(false)\n        }\n      });\n    } else {\n      emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(({\n        hash\n      }) => {\n        setTimeout(() => {\n          setHash(hash); // setShowMakingVaultMsg(true)\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      }).catch(error => {\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(`tx failed.`, error);\n        } else {\n          setApproving(false); // setShowPreVaultMsg(false)\n        }\n      });\n    }\n  };\n\n  const getVault = async () => {\n    console.log('getvault'); // !slideshowOnly ? loadCache() : null\n\n    const responce = await fetch(EMBLEM_API + API_VERSION + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n\n    if (jsonData.collectionAddress) {\n      setIsCrowdSale(true);\n      setAlternateContractAddress(jsonData.collectionAddress);\n    }\n\n    if (!jsonData.name) {\n      setState({\n        loaded: true\n      });\n      setInvalidVault(true);\n    } else {\n      console.log(\"--------------- states -\", jsonData);\n      setStates(jsonData); // !slideshowOnly? saveCache(jsonData) : null\n\n      setLoadingApi(false);\n      setInvalidVault(false);\n    }\n  };\n\n  const setStates = jsonData => {\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\" + framed : null;\n\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2);\n      console.log(\"ciphertextV2\", jsonData.ciphertextV2);\n    }\n\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setOwnedImage(jsonData.ownedImage || null);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)) : null;\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(item => {\n      return item.trait_type === \"key\";\n    })) : null;\n    jsonData.attributes ? setAttributes(jsonData.attributes) : null;\n    setVaultAddresses(jsonData.addresses);\n    setVaultIPFS(jsonData.ipfs || null);\n    setVaultImageIPFS(jsonData.image_ipfs || null);\n    jsonData.targetAsset ? setTargetAsset(jsonData.targetAsset) : null;\n    jsonData.targetContract ? setTargetContract(jsonData.targetContract) : null;\n    jsonData.values && jsonData.targetAsset && jsonData.values.filter(item => {\n      return item.coin.toLowerCase() == jsonData.targetContract.chain && item.name == jsonData.targetAsset.name && item.project == jsonData.targetContract.name;\n    }).length > 0 ? setCanCuratedMint(true) : null;\n    setLive(jsonData.live == false ? false : true);\n    setNonce(jsonData.nonce);\n    setMintSignature(jsonData.signature);\n    setTo(jsonData.to);\n    setVaultChain(jsonData.network);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"goerli\" ? 5 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : jsonData.network == \"xdai\" ? 100 : jsonData.network == \"bsc\" ? 56 : jsonData.network == \"fantom\" ? 250 : jsonData.network == \"bitcoin\" ? 0 : jsonData.network == \"aurora\" ? 1313161554 : 97);\n\n    if (!jsonData.live) {\n      console.log(\"check liveliness start\");\n      checkLiveliness(tokenId, jsonData.targetContract, isLive => {\n        setLive(isLive);\n      });\n    }\n\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    } // console.log('inside getstates. mine is ', mine)\n\n\n    setState({\n      loaded: true\n    });\n    let isPvt = jsonData.addresses.filter(item => {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n\n    if (jsonData.sealed) {\n      setSealed(true);\n    } else {\n      setSealed(false);\n    }\n  }; // const getEthBalances = async (address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n  //   setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n  //   // console.log('get eth balances', jsonData.values)\n  //   return cb(jsonData.values)\n  // }\n  // const getBtcBalance = async (values, address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // setVaultValues(values.concat(jsonData.values))\n  //   return cb(values.concat(jsonData.values))\n  // }\n  // const getNftBalance = async (values, address, cb) => {\n  //   // console.log(address)\n  //   const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   if (jsonData.length > 0) {\n  //     // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n  //     return cb(values.concat(jsonData))\n  //   } else {\n  //     return cb(values)\n  //   }\n  // }\n  // const getAllBalances = async (values, tokenId, cb) => {\n  //   // console.log(address)\n  //   const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   console.log('responce', responce, jsonData)\n  //   if (jsonData.balances.length > 0) {      \n  //     return cb(values.concat(jsonData.balances))\n  //   } else {\n  //     return cb(values)\n  //   }\n  // }\n\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    // setVaultValues([])\n    // console.log(address)\n    if (loadedValues) {\n      return cb(false);\n    }\n\n    setLoadedValues(true);\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log('responce', responce, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    console.log('responce', responce, jsonData);\n\n    if (jsonData.balances.length > 0) {\n      return cb(values.concat(jsonData.balances));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const saveCache = vault => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  const loadCache = () => {\n    console.log('cache');\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  }; // const getKeys = async (signature, tokenId, cb) => {\n  //   var myHeaders = new Headers()\n  //   myHeaders.append('chainId', chainId.toString())\n  //   myHeaders.append('service', 'evmetadata')\n  //   myHeaders.append('Content-Type', 'application/json')\n  //   var raw = JSON.stringify({ signature: signature })\n  //   const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n  //     method: 'POST',\n  //     headers: myHeaders,\n  //     body: raw,\n  //     redirect: 'follow',\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log('getKeys response is ', jsonData)\n  //   return cb(jsonData)\n  // }\n\n\n  const getSignedJWT = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainid', chainId.toString());\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature,\n      tokenId: tokenId\n    });\n    const responce = await fetch('https://tor-us-signer-vert.vercel.app/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  }; // const getRemoteKey = async (tokenId, token, cb)=> {   \n  //   let error = false\n  //   let keys = await (await torus).getTorusKey(\n  //       \"tor-us-signer-vercel\", \n  //       tokenId,\n  //       { verifier_id: tokenId }, \n  //       token, \n  //     ).catch(err=>{\n  //       error = err.message\n  //     })\n  //     if (error) {\n  //       console.log(\"error\", error)\n  //       return cb(false)\n  //     } else {\n  //       return cb(keys)\n  //     }\n  // }\n\n\n  async function getTorusKeys(verifierId, idToken, cb) {\n    const fetchNodeDetails = new FetchNodeDetails({\n      network: \"https://rpc.ankr.com/eth_ropsten\",\n      proxyAddress: \"0x6258c9d6c12ed3edda59a1a6527e469517744aa7\"\n    });\n    const torusUtils = new TorusUtils({\n      enableOneKey: true,\n      network: \"testnet\"\n    });\n    const {\n      torusNodeEndpoints,\n      torusIndexes\n    } = await fetchNodeDetails.getNodeDetails({\n      verifier: 'tor-us-signer-vercel',\n      verifierId\n    });\n    const {\n      privKey\n    } = await torusUtils.retrieveShares(torusNodeEndpoints, torusIndexes, 'tor-us-signer-vercel', {\n      verifier_id: verifierId\n    }, idToken);\n    return cb({\n      privateKey: privKey\n    });\n  }\n\n  const addAddress = async (signature, tokenId, coin, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature,\n      coin: coin\n    });\n    const responce = await fetch(EMBLEM_API + '/address/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  };\n\n  const decryptEmbed = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature\n    });\n    const responce = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json();\n    return cb(jsonData);\n  };\n\n  const getContractStates = async () => {\n    console.log(\"Contract states\");\n    let owned = false;\n\n    let _owner;\n\n    try {\n      if (targetContract[chainId]) {\n        emblemContract = getCuratedContract(targetContract[chainId]);\n        setDecimals(await covalContract.decimals());\n        setPrice(250 * Math.pow(10, decimals));\n        setAllowance(await covalContract.allowance(account, contractAddresses.vaultHandlerV8[chainId]).then(balance => balance.toString()));\n        setBalance(await covalContract.balanceOf(account).then(balance => balance.toString()));\n\n        if (Number(allowance) >= Number(price)) {\n          setIsCovalApproved(true);\n        } else {\n          setIsCovalApproved(false);\n        }\n\n        _owner = await emblemContract.getOwnerOfSerial(targetContract.serialNumber); // console.log(\"--------------------------- owner\", _owner, approved, account, contractAddresses.vaultHandlerV8[chainId])\n      } else {\n        _owner = await emblemContract.ownerOf(tokenId);\n      }\n\n      finish();\n    } catch (err) {\n      _owner = \"0x0000000000000000000000000000000000000000\";\n      finish();\n    }\n\n    async function finish() {\n      // let acceptable = await handlerContract.getPreTransfer(tokenId)\n      let isApproved;\n\n      if (targetContract[chainId]) {\n        console.log(\"@@@@@@@@@@@@@------- checking approved start\", \"me\", account, \"v8\", contractAddresses.vaultHandlerV8[chainId]);\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId]);\n        setApproved(isApproved);\n        console.log(\"@@@@@@@@@@@@@------- checking approved end\", \"approved\", isApproved, \"acceptable\", acceptable, \"mine\", mine);\n        console.log(\"price\", price, \"decimals\", decimals, \"allowance\", allowance, \"balance\", balance, \"isCovalApproved\", isCovalApproved);\n      } else {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n        setApproved(isApproved);\n      } // setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n\n\n      setOwner(_owner);\n      setMine(_owner === account);\n      loadPasswordFromLocalStorage();\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"mine?\", mine);\n    console.log(\"claiming?\", claiming);\n    console.log(\"accepting?\", accepting);\n    console.log(\"acceptable\", acceptable);\n    console.log(\"-----\", live, to, account, vaultChainId, chainId, status, showMakingVaultMsg, vaultCiphertextV2); // !live && to == account && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg \n  });\n\n  const hasAddress = coin => {\n    console.log(coin, vaultAddresses.filter(address => {\n      return address.coin == coin;\n    }).length > 0);\n    return vaultAddresses.filter(address => {\n      return address.coin == coin;\n    }).length > 0;\n  };\n\n  const onRenew = async name => {\n    library.getSigner(account).signMessage('Renew: ' + tokenId).then(signature => {\n      let address = vaultAddresses.filter(address => {\n        return address.coin == 'NMC';\n      })[0].address;\n      console.log('signature', signature, name);\n      fetch(EMBLEM_API + '/nmc/renew/' + address, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({\n          \"tokenId\": tokenId,\n          \"signature\": signature,\n          \"name\": name\n        })\n      }).then(async function (response) {\n        let data = await response.json();\n        console.log(\"Requested Renew\", data);\n      });\n    });\n  };\n\n  const handleSign = async () => {\n    let serialNumber;\n\n    if (targetContract[chainId]) {\n      emblemContract = getCuratedContract(targetContract[chainId]);\n      serialNumber = targetContract.serialNumber;\n    }\n\n    library.getSigner(account).signMessage('Claim: ' + (targetContract[chainId] ? serialNumber : tokenId)).then(signature => {\n      getSignedJWT(signature, tokenId, token => {\n        getTorusKeys(tokenId, token.token, keys => {\n          var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey);\n          let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n          setKeyValues(payload.values);\n          setMnemonic(payload.phrase);\n          vaultAddresses.forEach(async address => {\n            if (address.coin == 'STX') {\n              address.key = await getSTXKey(address, payload.phrase);\n            } else {\n              address.key = window.phrasePathToKey(payload.phrase, address.path);\n            }\n\n            if (address.coin == 'BTC') setPrivKeyBTC(address.key);\n            if (address.coin == 'ETH') setPrivKeyETH(address.key);\n          }); // setKeyValues(vaultAddresses)\n\n          onOpenKeysModal();\n        });\n      }); // }\n    });\n  };\n\n  const getSTXKey = async (address, phrase) => {\n    const wallet = await generateWallet({\n      secretKey: phrase,\n      password: ''\n    });\n    console.log('------ stacks account -', wallet.accounts[0]);\n    const account = wallet.accounts[0];\n    address.key = account.stxPrivateKey;\n    return address.key;\n  };\n\n  const handleHideAsset = async coin => {\n    library.getSigner(account).signMessage('HideAsset: ' + tokenId).then(signature => {\n      console.log(\"----------------------------------------------------------------\", signature);\n      console.log(coin.name, coin.coin, coin.address);\n      hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, () => {\n        console.log(\"Done hiding coin and getting new balances\");\n      });\n    });\n  };\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/' + tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin ? coin : null,\n        \"address\": address ? address : null,\n        \"name\": name ? name : null,\n        \"signature\": signature ? signature : null\n      })\n    }).then(async function (response) {\n      let data = await response.json();\n      console.log(\"-------\", data);\n      getAllBalances([], tokenId, values => {\n        setVaultValues(values);\n        return cb();\n      });\n    });\n  }\n\n  const handleAddressSign = async coin => {\n    library.getSigner(account).signMessage('Address: ' + tokenId).then(signature => {\n      addAddress(signature, tokenId, coin, result => {\n        getVault();\n      });\n    });\n  };\n\n  const handleOwnedEmbed = async () => {\n    library.getSigner(account).signMessage('Embed: ' + tokenId).then(signature => {\n      decryptEmbed(signature, tokenId, result => {\n        setVaultImage(result.ownedImage);\n      });\n    });\n  };\n\n  const handleClaim = async () => {\n    if (targetContract[chainId]) {\n      // emblemContract = getCuratedContract(targetContract[chainId])\n      // let tokenId = await emblemContract.getTokenIdForSerialNumber(targetContract.serialNumber)\n      vaultHandlerContract.claim(targetContract[chainId], targetContract.tokenId).then(({\n        hash\n      }) => {\n        setClaiming(true);\n        setTimeout(() => {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      });\n    } else {\n      emblemContract.burn(tokenId).then(({\n        hash\n      }) => {\n        setClaiming(true);\n        setTimeout(() => {\n          setHash(hash);\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      });\n    }\n  };\n\n  const pingClaimLogs = cb => {\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId=' + chainId.toString() + '_vercel_no_cache=1', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    }).then(async function (response) {\n      let data = await response.json();\n      console.log(\"Log check\", data);\n      return cb();\n    });\n  };\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return;\n    }\n\n    setDecryptedEffectRunning(true);\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n    var ctnt = 'Decrypting'; // Your text goes here\n\n    var speed = 5; // ms per frame\n\n    var increment = 8; // frames per step. Must be >2\n\n    var clen = ctnt.length;\n    var si = 0;\n    var stri = 0;\n    var block = '';\n    var fixed = '';\n\n    (function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i);\n        } else {\n          setDecryptedEffectRunning(false);\n        }\n\n        nextFrame(i);\n        si = si + 1;\n      }, speed);\n    })(clen * increment + 1);\n\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n        var letter = theLetters.charAt(num);\n        block = block + letter;\n      }\n\n      if (si == increment - 1) {\n        stri++;\n      }\n\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1);\n        si = 0;\n      } // $(\"#output\").html(fixed + block);\n\n\n      setDecryptedEffect(fixed + block);\n      block = '';\n    }\n  };\n\n  useEffect(() => {\n    console.log('----');\n    getVault();\n  }, []);\n  useEffect(() => {\n    account && chainId && vaultChainId && chainId == vaultChainId || query.noLayout && query.noLayout == 'true' || query.slideshowOnly && query.slideshowOnly == 'true' ? getContractStates() : null;\n  });\n\n  function splitDescription(words) {\n    var desc = words ? words.split('\\n\\n\\n\\n') : [\" \"];\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    console.log(vaultAddresses);\n    let ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      let ethAddress = vaultAddresses.filter(item => {\n        return item.coin === 'ETH';\n      })[0].address;\n      let btcAddress = vaultAddresses.filter(item => {\n        return item.coin === 'BTC';\n      })[0].address;\n      console.log(\"SUCCESS\", vaultAddresses);\n      getAllBalancesByAddress([], ethAddress, btcAddress, values => {\n        setVaultValues(values);\n      }); // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {\n      console.log('WTF', err);\n    }\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\");\n    return vaultAddresses;\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(item => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '');\n        item.address = decrypt(cipherText, key);\n      }\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  function visitOpenSeaLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : vaultChainId == 5 ? 'testnets.' : '') + 'opensea.io/assets/' + (vaultChainId == 137 ? 'matic/' : vaultChainId == 5 ? 'goerli/' : '') + (alternateContractAddress ? alternateContractAddress : targetContract[chainId] ? targetContract[chainId] : contractAddresses.emblemVault[vaultChainId]) + '/' + (targetContract ? targetContract.tokenId : tokenId), '_blank');\n  }\n\n  function visitLooksRareLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : vaultChainId == 5 ? 'goerli.' : '') + 'looksrare.org/collections/' + (vaultChainId == 137 ? 'matic/' : '') + (alternateContractAddress ? alternateContractAddress : targetContract ? targetContract[chainId] : contractAddresses.emblemVault[vaultChainId]) + '/' + (targetContract ? targetContract.tokenId : tokenId), '_blank');\n  }\n\n  {\n    alternateContractAddress ? emblemContract = getVaultContract(alternateContractAddress ? alternateContractAddress : null) : null;\n  }\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1128,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1129,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1130,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1131,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1132,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1133,\n      columnNumber: 9\n    }\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              if (localStorage.getItem(\"darkMode\") == 'false') {\n                localStorage.setItem(\"darkMode\",\"true\"); location.href = location.href\n              }\n              `\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1134,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1149,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    privValues: privValues,\n    addresses: vaultAddresses,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1151,\n      columnNumber: 7\n    }\n  }), showOffer ? __jsx(OfferModal, {\n    isOpen: isOpenOfferModal,\n    onClose: onCloseOfferModal,\n    tokenId: tokenId,\n    mine: mine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1161,\n      columnNumber: 9\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1171,\n      columnNumber: 9\n    }\n  }), loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1172,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault && !slideshowOnly ? __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1174,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    className: \"NFT\",\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1175,\n      columnNumber: 15\n    }\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"blue.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1186,\n      columnNumber: 17\n    }\n  }, \"Vault Network: \", CHAIN_ID_NAMES[vaultChainId]), __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\" // textTransform=\"uppercase\"\n    ,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1215,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null), __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1228,\n      columnNumber: 17\n    }\n  }, __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1235,\n      columnNumber: 19\n    }\n  }), mine && ownedImage ? __jsx(Button, {\n    onClick: () => {\n      handleOwnedEmbed();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1237,\n      columnNumber: 21\n    }\n  }, \"(OWNED) Show Full Embed\") : null), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1240,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1241,\n      columnNumber: 19\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1242,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    fontSize: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1243,\n      columnNumber: 23\n    }\n  }, vaultChainId == chainId ? __jsx(Link, {\n    href: \"./vaults?address=\" + owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1245,\n      columnNumber: 25\n    }\n  }, \"Owner: \", owner) : null), __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1250,\n      columnNumber: 23\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1251,\n      columnNumber: 25\n    }\n  }))))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1257,\n      columnNumber: 17\n    }\n  }, __jsx(Tabs, {\n    isFitted: true,\n    variant: \"enclosed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1258,\n      columnNumber: 17\n    }\n  }, __jsx(TabList, {\n    mb: \"1em\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1259,\n      columnNumber: 19\n    }\n  }, __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1260,\n      columnNumber: 21\n    }\n  }, \"Balances\"), __jsx(Tab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1261,\n      columnNumber: 21\n    }\n  }, \"Attributes\")), __jsx(TabPanels, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1263,\n      columnNumber: 19\n    }\n  }, __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1264,\n      columnNumber: 21\n    }\n  }, vaultPrivacy ? __jsx(Box, {\n    mb: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1266,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1267,\n      columnNumber: 27\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: e => tryDecrypt(e.target.value),\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1270,\n      columnNumber: 27\n    }\n  })) : __jsx(Box, {\n    d: \"flex\",\n    backgroundColor: colorMode == \"light\" ? \"gray.100\" : \"gray.700\",\n    alignItems: \"baseline\",\n    className: \"coin-balance-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1278,\n      columnNumber: 25\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1279,\n      columnNumber: 27\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    mt: 2,\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1280,\n      columnNumber: 29\n    }\n  }, \"Current Contents:  \", __jsx(\"button\", {\n    onClick: () => {\n      getAllBalancesLive([], tokenId, v => {\n        setLoadedValues(false);\n        setVaultValues(v);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1282,\n      columnNumber: 50\n    }\n  }, \" [Refresh Balances]\")), __jsx(Text, {\n    as: \"p\",\n    color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1291,\n      columnNumber: 29\n    }\n  }, \"$\", Number(vaultTotalValue.toFixed(4)).toLocaleString()), vaultValues.length ? vaultValues.map(coin => {\n    return __jsx(Stack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1295,\n        columnNumber: 35\n      }\n    }, __jsx(CoinBalance, {\n      colorMode: colorMode,\n      coin: coin,\n      mine: status === 'claimed' && claimedBy === account || mine,\n      onRenew: onRenew,\n      hideAsset: handleHideAsset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1296,\n        columnNumber: 37\n      }\n    }));\n  }) : __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1300,\n      columnNumber: 34\n    }\n  }), vaultDataValues.length ? vaultDataValues.map(data => {\n    return __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1304,\n        columnNumber: 35\n      }\n    }, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1308,\n      columnNumber: 31\n    }\n  }, \"Nothing in here! Fill 'er up!\") : null))), __jsx(TabPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1314,\n      columnNumber: 21\n    }\n  }, __jsx(Attributes, {\n    colorMode: colorMode,\n    attributes: attributes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1315,\n      columnNumber: 23\n    }\n  })))), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1321,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1322,\n      columnNumber: 23\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1323,\n      columnNumber: 25\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1324,\n      columnNumber: 27\n    }\n  }, \"Deposit Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1325,\n      columnNumber: 27\n    }\n  }, vaultAddresses.map(addr => {\n    return __jsx(Button, {\n      className: \"address_nft_button\",\n      ml: 2,\n      mt: 2,\n      \"font-weight\": \"100 !important\",\n      key: addr.address,\n      onClick: () => {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1328,\n        columnNumber: 33\n      }\n    }, addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP' : addr.coin);\n  }))))) : null, !(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 4 || vaultChainId === 5 || vaultChainId === 137) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1352,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"50%\",\n    m: 5,\n    onClick: () => {\n      visitOpenSeaLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1354,\n      columnNumber: 25\n    }\n  }, \"Opensea\"), __jsx(Button, {\n    className: \"nft_button\",\n    width: \"50%\",\n    m: 5,\n    onClick: () => {\n      visitLooksRareLink();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1362,\n      columnNumber: 25\n    }\n  }, \"LooksRare\"), showOffer ? __jsx(Button, {\n    className: \"\",\n    onClick: () => {\n      onOpenOfferModal();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1371,\n      columnNumber: 27\n    }\n  }, mine ? 'My Offers' : 'Make an Offer', \" (NFT\\xB2NFT)\") : null) : null, live && !(status === 'claimed') && mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1379,\n      columnNumber: 22\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1380,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: onToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1381,\n      columnNumber: 27\n    }\n  }, \"Transfer Vault\"), __jsx(Collapse, {\n    isOpen: isOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1382,\n      columnNumber: 27\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1383,\n      columnNumber: 29\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"owner-address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1384,\n      columnNumber: 29\n    }\n  }, \"Address\"), __jsx(Input, {\n    mt: 1,\n    type: \"text\",\n    id: \"transferAddress\",\n    value: transferToAddress || '',\n    onChange: e => {\n      console.log(\"Transfer to\", e.target.value);\n      setTransferToAddress(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1385,\n      columnNumber: 31\n    }\n  })), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1397,\n      columnNumber: 29\n    }\n  }, __jsx(Button, {\n    isDisabled: !isETHAddress(transferToAddress),\n    onClick: () => {\n      onToggle();\n      transferVault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1398,\n      columnNumber: 31\n    }\n  }, \"Transfer Now\")))))) : null, mine && !acceptable && !approved ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1409,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: () => {\n      if (!approved) {\n        return handleApproveForall();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1410,\n      columnNumber: 23\n    }\n  }, \"Approve Claiming\"))) : null, (showTransferPassword || mintPassword) && acceptable ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1421,\n      columnNumber: 23\n    }\n  }, __jsx(Link, {\n    href: location.protocol + '//' + location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1422,\n      columnNumber: 25\n    }\n  }, \"Copy Gift Link\"), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1423,\n      columnNumber: 25\n    }\n  }, \"Password: \", transferPassword || mintPassword)) : null, live && !(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1445,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      handleClaim();\n    },\n    isDisabled: claiming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1446,\n      columnNumber: 23\n    }\n  }, claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)')) // || !live && nonce && mintSignature && vaultCiphertextV2 && to == account\n  : null, status == 'claimed' && claimedBy === account && vaultChainId === chainId ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1459,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1460,\n      columnNumber: 23\n    }\n  }, \"Get Keys\")) : null, !live && to == account && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg ? __jsx(React.Fragment, null, targetContract.name ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: lazyMintCurated,\n    isDisabled: !canCuratedMint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1468,\n      columnNumber: 25\n    }\n  }, \" Mint Vault \") : __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: lazyMint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1470,\n      columnNumber: 25\n    }\n  }, \"Mint Vault \")) : null, (!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: deleteVault,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1475,\n      columnNumber: 19\n    }\n  }, \"Delete Vault \") : null, showVerifyingSignature ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1478,\n      columnNumber: 19\n    }\n  }, \"Verifying Signature ...\") : null, showMakingVaultMsg ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1483,\n      columnNumber: 19\n    }\n  }, \"Minting Vault ...\") : null), vaultIPFS ? __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1489,\n      columnNumber: 19\n    }\n  }, __jsx(HStack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1490,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    target: \"new\",\n    mb: 2,\n    ml: 35,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1491,\n      columnNumber: 23\n    }\n  }, \"View Metadata on IPFS \"), vaultImageIPFS ? __jsx(Link, {\n    mb: 2,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultImageIPFS,\n    isExternal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1493,\n      columnNumber: 25\n    }\n  }, \"View Image on IPFS \") : null)) : null, sealed ? __jsx(Box, {\n    d: \"flex\",\n    mb: 2,\n    ml: 35,\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1499,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1500,\n      columnNumber: 23\n    }\n  }, \"*This vault is sealed forever.\")) : null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1503,\n      columnNumber: 17\n    }\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1504,\n      columnNumber: 42\n    }\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1507,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1508,\n      columnNumber: 21\n    }\n  }), accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving ? \"Handling Approval Flow ...\" : transfering ? \"Transfering Vault ...\" : minting ? \"Minting Vault\" : \"Generating Gift Link ...\") : null)) : vaultValues.length > 0 && slideshowOnly ? __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1515,\n      columnNumber: 11\n    }\n  }, vaultValues.length && vaultValues.filter(item => {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultValues[0].image,\n    items: vaultValues.filter(value => {\n      return value.image !== vaultValues[0].image;\n    }).map(value => {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1517,\n      columnNumber: 17\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1519,\n      columnNumber: 17\n    }\n  })) : invalidVault ? __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1524,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1525,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1529,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1531,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      if (claiming && !accepting && !preTransfering) {\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account);\n        pingClaimLogs(() => {\n          location.href = location.origin + '/nft?id=' + tokenId;\n        });\n      } else if (preTransfering) {\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        setApproving(false);\n        getVault();\n        setHash(null);\n      } else if (transfering) {\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else if (minting) {\n        //checkLiveliness(tokenId, targetContract, (isLive)=>{\n        console.log('GOD SAKES REDIRECT');\n        setMinting(false);\n        setHash(null); // setLive(isLive)\n\n        setShowMakingVaultMsg(false);\n        location.href = location.origin + '/nft?id=' + tokenId; //})\n      } else {\n        console.log('minting', minting);\n        console.log('claiming', claiming);\n        console.log('accepting', accepting);\n        console.log('preTransfering', preTransfering);\n        console.log('approving', approving);\n        console.log(\"Unknown state\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1538,\n      columnNumber: 11\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1586,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft2.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","Link","Alert","AlertIcon","useDisclosure","Collapse","FormLabel","useColorMode","Tabs","TabList","Tab","TabPanel","TabPanels","HStack","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","dynamic","isETHAddress","Contract","TransactionToast","EMBLEM_API","contractAddresses","useContract","CHAIN_ID_NAMES","CryptoJS","ReactMarkdown","gfm","Embed","NFTSlideshow","CoinBalance","transakSDK","Attributes","generateWallet","FetchNodeDetails","TorusUtils","API_VERSION","AddrModal","KeysModal","OfferModal","Nft2","account","chainId","library","query","decimals","setDecimals","allowance","setAllowance","balance","setBalance","price","setPrice","isCovalApproved","setIsCovalApproved","approved","setApproved","useOldMint","setUseOldMint","mintPassword","setMintPassword","key","showOffer","setShowOffer","offer","framed","setFramed","tokenId","setTokenId","id","experimental","setExperimental","noLayout","setNoLayout","slideshowOnly","setSlideshowOnly","vaultName","setVaultName","vaultIPFS","setVaultIPFS","vaultImageIPFS","setVaultImageIPFS","vaultCiphertextV2","setVaultCiphertextV2","vaultDesc","setVaultDesc","vaultImage","setVaultImage","ownedImage","setOwnedImage","vaultValues","setVaultValues","loadedValues","setLoadedValues","vaultDataValues","setVaultDataValues","attributes","setAttributes","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","vaultChain","setVaultChain","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","state","setState","loaded","mine","setMine","claiming","setClaiming","status","setStatus","sealed","setSealed","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","privValues","setKeyValues","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","hasCheckedNft","setHasCheckedNft","accepting","setAccepting","approving","setApproving","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","preTransfering","setPreTransfering","transferToAddress","setTransferToAddress","transfering","setTransfering","owner","setOwner","live","setLive","nonce","setNonce","mintSignature","setMintSignature","to","setTo","showVerifyingSignature","setShowVerifyingSignature","showMakingVaultMsg","setShowMakingVaultMsg","minting","setMinting","isCrowdSale","setIsCrowdSale","alternateContractAddress","setAlternateContractAddress","targetAsset","setTargetAsset","name","image","metadata","targetContract","setTargetContract","chain","serialNumber","canCuratedMint","setCanCuratedMint","curatedMintingParameters","setCuratedMintingParameters","handlerContract","vaultHandler","vaultHandlerAbi","vaultHandlerContract","vaultHandlerV8","vaultHandlerV8Abi","emblemContract","emblemVault","emblemAbi","covalContract","coval","covalAbi","isOpen","isOpenAddrModal","onOpen","onOpenAddrModal","onClose","onCloseAddrModal","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","isOpenOfferModal","onOpenOfferModal","onCloseOfferModal","onToggle","isManageAddressOpen","onManageAddressToggle","colorMode","transak","transferImage","getVaultContract","address","getSigner","connectUnchecked","getCuratedContract","erc1155Abi","getCovalContract","initializeTransak","coin","apiKey","environment","defaultCryptoCurrency","walletAddress","themeColor","fiatCurrency","email","redirectURL","hostURL","window","location","origin","widgetHeight","widgetWidth","on","ALL_EVENTS","data","console","log","EVENTS","TRANSAK_ORDER_SUCCESSFUL","orderData","close","init","checkLiveliness","cb","endpoint","fetch","method","headers","service","chainid","toString","body","JSON","stringify","then","response","json","transferVault","transferFrom","catch","error","delayedMint","cipherTextHash","filter","buyWithSignature","setTimeout","deleteVault","signMessage","signature","href","split","lazyMintCurated","_nftAddress","_payment","_price","_to","_tokenId","_nonce","_signature","buyWithSignedPrice","lazyMint","getAllBalances","values","responce","jsonData","balances","length","concat","handleApproveForall","setApprovalForAll","code","getVault","collectionAddress","setStates","includes","ciphertextV2","description","totalValue","item","trait_type","addresses","ipfs","image_ipfs","toLowerCase","project","network","isLive","isPvt","getAllBalancesLive","getAllBalancesByAddress","ethAddress","btcAddress","saveCache","vault","localStorage","setItem","loadCache","parse","getItem","savePasswordToLocalStorage","loadPasswordFromLocalStorage","storedPw","getSignedJWT","myHeaders","Headers","append","raw","redirect","getTorusKeys","verifierId","idToken","fetchNodeDetails","proxyAddress","torusUtils","enableOneKey","torusNodeEndpoints","torusIndexes","getNodeDetails","verifier","privKey","retrieveShares","verifier_id","privateKey","addAddress","decryptEmbed","getContractStates","owned","_owner","Math","pow","balanceOf","Number","getOwnerOfSerial","ownerOf","finish","err","isApproved","isApprovedForAll","hasAddress","onRenew","handleSign","token","keys","bytes","AES","decrypt","payload","enc","Utf8","phrase","forEach","getSTXKey","phrasePathToKey","path","wallet","secretKey","password","accounts","stxPrivateKey","handleHideAsset","hideAsset","handleAddressSign","result","handleOwnedEmbed","handleClaim","claim","burn","pingClaimLogs","startDecryptEffect","theLetters","ctnt","speed","increment","clen","si","stri","block","fixed","rustle","i","nextFrame","pos","num","floor","random","letter","charAt","splitDescription","words","desc","trim","tryDecrypt","ciphertext","replace","decryptAddresses","getAddresses","cipherText","decryptedData","visitOpenSeaLink","open","visitLooksRareLink","__html","toLocaleString","e","target","value","v","toFixed","map","attribute_key","addr","protocol","host","type","canSwipe"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n  Tooltip,\n  Collapse,\n  FormControl,\n  FormLabel,\n  useColorMode,\n  IconButton,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanel,\n  TabPanels\n} from '@chakra-ui/core'\n\nimport {HStack, VStack, Circle } from '@chakra-ui/react'\n// import TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { isETHAddress, validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\nimport { CHAIN_ID_NAMES } from '../utils'\nimport CryptoJS from 'crypto-js'\nimport { addTokenToWallet, addMany } from '../public/web3'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nimport Embed from './Embed'\nimport NFTSlideshow from './embed/NFTSlideshow'\nimport CoinBalance from './partials/CoinBalance'\nimport { chakra } from '@chakra-ui/system'\nimport transakSDK from '@transak/transak-sdk'\nimport Attributes from './partials/Attributes';\nimport { getStxAddress, generateWallet } from '@stacks/wallet-sdk';\nimport FetchNodeDetails from \"@toruslabs/fetch-node-details\"\nimport TorusUtils from \"@toruslabs/torus.js\"\n\nconst API_VERSION = '/v2'\n\ndeclare global {\n  interface Window { phraseToKey: any, phrasePathToKey: any }\n}\n\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\nconst OfferModal = dynamic(() => import('./OfferModal'))\n\nexport default function Nft2() {\n  \n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [decimals, setDecimals] = useState(null)\n  const [allowance, setAllowance] = useState(null)\n  const [balance, setBalance] = useState(null)\n  const [price, setPrice] = useState(null)\n  const [isCovalApproved, setIsCovalApproved] = useState(false)\n  const [approved, setApproved] = useState(false)\n  const [useOldMint, setUseOldMint] = useState(query.useOldMint)\n  const [mintPassword, setMintPassword] = useState(query.key)\n  const [showOffer, setShowOffer] = useState(query.offer || false)\n  const [framed, setFramed] = useState(query.framed || true)\n  const [tokenId, setTokenId] = useState(query.id)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [noLayout, setNoLayout] = useState(query.noLayout)\n  const [slideshowOnly, setSlideshowOnly] = useState(query.slideshowOnly || false)\n  const [vaultName, setVaultName] = useState('')\n  const [vaultIPFS, setVaultIPFS] = useState('')\n  const [vaultImageIPFS, setVaultImageIPFS] = useState('')\n  const [vaultCiphertextV2, setVaultCiphertextV2] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [ownedImage, setOwnedImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [loadedValues, setLoadedValues] = useState(false)\n  const [vaultDataValues, setVaultDataValues] = useState([])\n  const [attributes, setAttributes] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [vaultChain, setVaultChain] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [sealed, setSealed] = useState(false)\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [privValues, setKeyValues] = useState([])\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [hasCheckedNft, setHasCheckedNft] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n  const [preTransfering, setPreTransfering] = useState(false)\n  const [transferToAddress, setTransferToAddress] = useState(null)\n  const [transfering, setTransfering] = useState(false)\n  const [owner, setOwner] = useState(null)\n  // const [torus, setTorus] = useState(initTorus())\n  const [live, setLive] = useState(false)\n  const [nonce, setNonce] = useState(null)\n  const [mintSignature, setMintSignature] = useState(null)\n  const [to, setTo] = useState(null)\n  const [showVerifyingSignature, setShowVerifyingSignature] = useState(false)\n  const [showMakingVaultMsg, setShowMakingVaultMsg] = useState(false)\n  const [minting, setMinting] = useState(false)\n  const [isCrowdSale, setIsCrowdSale] = useState(false)\n  const [alternateContractAddress, setAlternateContractAddress] = useState(null)\n  const [targetAsset, setTargetAsset] = useState({name: '', image: '', metadata: ''})\n  const [targetContract, setTargetContract] = useState({name: '', chain: '', 4: '', 1: '', tokenId: {}, serialNumber: {'hex':''} })\n  const [canCuratedMint, setCanCuratedMint] = useState(false)\n\n  const [curatedMintingParameters, setCuratedMintingParameters] = useState({})\n  // const [transferImage, setTransferImage] = useState('')\n  \n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n  let emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n  let covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true)\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n  const { isOpen: isOpenOfferModal, onOpen: onOpenOfferModal, onClose: onCloseOfferModal } = useDisclosure()\n  const { isOpen, onToggle } = useDisclosure()\n  const { isOpen: isManageAddressOpen, onToggle: onManageAddressToggle } = useDisclosure()\n\n  const { colorMode } = useColorMode()\n\n  let transak\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  let transferImage;\n\n  // async function initTorus() {\n  //   let _torus = new TorusSdk({\n  //     baseUrl: `${window.location.origin}/serviceworker`,\n  //     enableLogging: true,\n  //     network: \"testnet\", // details for test net\n  //   });\n  //   await _torus.init({skipSw: true, skipInit: true, skipPrefetch: true})\n  //   console.log(\"Initialized Torus\")\n  //   return _torus\n  // }\n\n  const getVaultContract = (address = null) =>{\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  const getCuratedContract = (address = null) =>{\n    return new Contract(address, contractAddresses.erc1155Abi, library.getSigner(account).connectUnchecked())\n  }\n\n  const getCovalContract = (address = null)=>{\n    return new Contract(address, contractAddresses.covalAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  const initializeTransak = (address?: string, coin? : string)=>{\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',  // Your API Key\n      environment: 'PRODUCTION', // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '', // Your customer's wallet address\n      themeColor: '000000', // App theme color\n      fiatCurrency: 'USD', // INR/GBP\n      // fiatAmount: 350,\n      email: '', // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    });\n  \n    // To get all the events\n    transak.on(transak.ALL_EVENTS, (data) => {\n      console.log(data)\n    });\n  \n    // This will trigger when the user marks payment is made.\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, (orderData) => {\n      console.log(orderData);\n      transak.close();\n    });\n  \n    transak.init()\n  }\n\n  const checkLiveliness = (tokenId, targetContract, cb)=>{\n    console.log(\"check liveliness next\", targetContract )\n    let endpoint = targetContract.name ? EMBLEM_API + API_VERSION + '/liveliness-curated' : EMBLEM_API + '/liveliness'\n    fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({tokenId: tokenId}),\n    }).then(async function (response) {\n      let data = await response.json()\n      setLive(data.live)\n      console.log(\"Liveliness check\", data)\n    })\n    return cb(false)\n  }\n\n  const transferVault = () => {\n    setTransfering(true)\n    ;(emblemContract as Contract).transferFrom(account, transferToAddress, tokenId)\n    .then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n    .catch((error: ErrorWithCode) => {})\n  }\n\n  const delayedMint = () => {\n    // setCreating(true)\n      console.log(\"Delayed Minting\")\n      setShowVerifyingSignature(false)\n      setShowMakingVaultMsg(true)\n      setMinting(true)\n      console.log('---------@@@@@------', contractAddresses.vaultHandler[chainId])\n      let cipherTextHash = vaultAddresses.filter(address=>{ return address.coin == \"ETH\"})[0].address\n      ;(handlerContract as Contract)\n      .buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)\n          setShowMakingVaultMsg(false)\n          \n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n          setShowMakingVaultMsg(false)\n          // setMinting(false)\n      })    \n  }\n\n  const deleteVault = () =>{\n    library.getSigner(account)\n      .signMessage('Delete: ' + tokenId)\n      .then((signature) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_API + API_VERSION + '/delete', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata'\n          },\n          body: JSON.stringify({tokenId: tokenId, signature: signature, chainId: chainId.toString()}),\n        }).then(async function (response){\n          let data = await response.json()\n          location.href = location.href.split(\"/\")[0] + \"/vaults\"\n        })\n      })\n  }\n\n  const lazyMintCurated = () =>{\n    library.getSigner(account)\n      .signMessage('Curated Minting: ' + tokenId)\n      .then((signature) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_API + API_VERSION + '/mint-curated', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata'\n          },\n          body: JSON.stringify({tokenId: tokenId, signature: signature, chainId: chainId.toString()}),\n        }).then(async function (response){\n          let data = await response.json()\n          console.log(\"WTFFFFF\")\n          console.log(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1)\n          setCuratedMintingParameters(data)\n          ;(vaultHandlerContract as Contract)\n            .buyWithSignedPrice(data._nftAddress, data._payment, data._price, data._to, data._tokenId, data._nonce, data._signature, data.serialNumber, 1)\n            .then(({ hash }: { hash: string }) => {\n              setTimeout(() => {\n                setHash(hash)\n                setShowMakingVaultMsg(true)\n                setMinting(true)\n              }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n            })\n            .catch((error: ErrorWithCode) => {\n              console.log('ERROR', error)\n                setShowMakingVaultMsg(false)\n                setMinting(false)\n            })\n          \n        })\n      })\n  }\n\n  /* NOT v2 */\n  const lazyMint = () =>{\n      library.getSigner(account)\n      .signMessage('Delayed Minting: ' + tokenId)\n      .then((signature) => {\n        console.log(\"sig\", signature)\n        fetch(EMBLEM_API + '/lazyMint', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata',\n            chainid: chainId.toString()\n          },\n          body: JSON.stringify({tokenId: tokenId, signature: signature}),\n        }).then(async function (response) {\n              let data = await response.json()\n              console.log(\"data\", data.data)\n              setMintSignature(data.data.signature)\n              setNonce(data.data.nonce)\n              setShowVerifyingSignature(true)\n              // setCreating(true)\n              setTimeout(()=>{\n                delayedMint()\n              }, 500)\n        })\n      })\n  }\n\n  const getAllBalances = async (values, tokenId, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const handleApproveForall = () => {\n    setApproving(true)\n    if (targetContract.name) {\n      emblemContract = getCuratedContract(targetContract[chainId])\n      emblemContract.setApprovalForAll(contractAddresses.vaultHandlerV8[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n    } else {\n      (emblemContract as Contract)\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n    }\n  }\n\n  const getVault = async () => {\n    console.log('getvault')\n    // !slideshowOnly ? loadCache() : null\n    const responce = await fetch(EMBLEM_API + API_VERSION + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    if (jsonData.collectionAddress){\n      setIsCrowdSale(true)\n      setAlternateContractAddress(jsonData.collectionAddress)\n    }\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      console.log(\"--------------- states -\", jsonData)\n      setStates(jsonData)\n      // !slideshowOnly? saveCache(jsonData) : null\n      setLoadingApi(false)\n      setInvalidVault(false)\n    }\n  }\n\n  const setStates = (jsonData) => {\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\"+framed : null\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2)\n      console.log(\"ciphertextV2\", jsonData.ciphertextV2)\n    }\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setOwnedImage(jsonData.ownedImage || null)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)): null\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(item=>{return item.trait_type === \"key\"})): null\n    jsonData.attributes ? setAttributes(jsonData.attributes): null\n    setVaultAddresses(jsonData.addresses)\n    setVaultIPFS(jsonData.ipfs || null)\n    setVaultImageIPFS(jsonData.image_ipfs || null)\n    jsonData.targetAsset? setTargetAsset(jsonData.targetAsset) : null\n    jsonData.targetContract? setTargetContract(jsonData.targetContract) : null\n    jsonData.values && jsonData.targetAsset && jsonData.values.filter(item=>{\n      return item.coin.toLowerCase() == jsonData.targetContract.chain && \n      item.name == jsonData.targetAsset.name && \n      item.project == jsonData.targetContract.name\n    }).length > 0 ? setCanCuratedMint(true): null\n \n    setLive(jsonData.live == false ? false : true)\n    \n    setNonce(jsonData.nonce)\n    setMintSignature(jsonData.signature)\n    setTo(jsonData.to)\n    setVaultChain(jsonData.network)\n    setVaultChainId(\n      jsonData.network == 'mainnet' ? 1 : \n      jsonData.network == \"rinkeby\" ? 4 : \n      jsonData.network == \"goerli\" ? 5 : \n      jsonData.network == \"mumbai\" ? 80001 : \n      jsonData.network == \"matic\" ? 137 : \n      jsonData.network == \"xdai\" ? 100 : \n      jsonData.network == \"bsc\" ? 56 : \n      jsonData.network == \"fantom\" ? 250 : \n      jsonData.network == \"bitcoin\" ? 0 : \n      jsonData.network == \"aurora\" ? 1313161554 : \n      97\n    )\n    if (!jsonData.live) {\n      console.log(\"check liveliness start\")\n      checkLiveliness(tokenId, jsonData.targetContract, (isLive)=>{\n        setLive(isLive)\n      })\n    }\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    // console.log('inside getstates. mine is ', mine)\n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)    \n    if (jsonData.sealed) {\n      setSealed(true)\n    } else {\n      setSealed(false)\n    }\n  }\n\n  // const getEthBalances = async (address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n  //   setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n  //   // console.log('get eth balances', jsonData.values)\n  //   return cb(jsonData.values)\n  // }\n\n  // const getBtcBalance = async (values, address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // setVaultValues(values.concat(jsonData.values))\n  //   return cb(values.concat(jsonData.values))\n  // }\n\n  // const getNftBalance = async (values, address, cb) => {\n  //   // console.log(address)\n  //   const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   if (jsonData.length > 0) {\n  //     // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n  //     return cb(values.concat(jsonData))\n  //   } else {\n  //     return cb(values)\n  //   }\n  // }\n\n  // const getAllBalances = async (values, tokenId, cb) => {\n  //   // console.log(address)\n  //   const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId , {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n    \n  //   const jsonData = await responce.json()\n  //   console.log('responce', responce, jsonData)\n  //   if (jsonData.balances.length > 0) {      \n  //     return cb(values.concat(jsonData.balances))\n  //   } else {\n  //     return cb(values)\n  //   }\n  // }\n\n  const getAllBalancesLive = async (values, tokenId, cb) => {\n    // setVaultValues([])\n    // console.log(address)\n    if (loadedValues) {\n      return cb(false)\n    }\n    setLoadedValues(true)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true' , {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const getAllBalancesByAddress = async (values, ethAddress, btcAddress, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    \n    const jsonData = await responce.json()\n    console.log('responce', responce, jsonData)\n    if (jsonData.balances.length > 0) {      \n      return cb(values.concat(jsonData.balances))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const saveCache = (vault) => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)) // Save new state for later\n  }\n\n  const loadCache = () => {\n    console.log('cache')\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')) // Load vaults from storage before updating from server!\n    if (vault) {\n      setState({ loaded: true })\n      setStates(vault)\n      setLoadingApi(true)\n    }\n  }\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword) // Save new state for later\n  }\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword')\n    storedPw && acceptable ? setMintPassword(storedPw) : null //setMintPassword(null)\n  }\n\n  // const getKeys = async (signature, tokenId, cb) => {\n  //   var myHeaders = new Headers()\n  //   myHeaders.append('chainId', chainId.toString())\n  //   myHeaders.append('service', 'evmetadata')\n  //   myHeaders.append('Content-Type', 'application/json')\n\n  //   var raw = JSON.stringify({ signature: signature })\n  //   const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n  //     method: 'POST',\n  //     headers: myHeaders,\n  //     body: raw,\n  //     redirect: 'follow',\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log('getKeys response is ', jsonData)\n  //   return cb(jsonData)\n  // }\n\n  const getSignedJWT = async (signature, tokenId, cb)=>{\n    var myHeaders = new Headers()\n    myHeaders.append('chainid', chainId.toString())\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, tokenId: tokenId })\n    const responce = await fetch('https://tor-us-signer-vert.vercel.app/sign', {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  // const getRemoteKey = async (tokenId, token, cb)=> {   \n  //   let error = false\n  //   let keys = await (await torus).getTorusKey(\n  //       \"tor-us-signer-vercel\", \n  //       tokenId,\n  //       { verifier_id: tokenId }, \n  //       token, \n  //     ).catch(err=>{\n  //       error = err.message\n  //     })\n  //     if (error) {\n  //       console.log(\"error\", error)\n  //       return cb(false)\n  //     } else {\n  //       return cb(keys)\n  //     }\n  // }\n\n  async function getTorusKeys( verifierId, idToken, cb) {\n    const fetchNodeDetails = new FetchNodeDetails({ network: \"https://rpc.ankr.com/eth_ropsten\", proxyAddress: \"0x6258c9d6c12ed3edda59a1a6527e469517744aa7\" });\n    const torusUtils = new TorusUtils({ enableOneKey: true, network: \"testnet\" });\n    const { torusNodeEndpoints, torusIndexes } = await fetchNodeDetails.getNodeDetails({ verifier: 'tor-us-signer-vercel', verifierId });\n    const { privKey } = await torusUtils.retrieveShares(torusNodeEndpoints, torusIndexes, 'tor-us-signer-vercel', { verifier_id: verifierId }, idToken);\n    return cb({privateKey: privKey});\n  }\n\n  const addAddress = async (signature, tokenId, coin, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature, coin: coin })\n    const responce = await fetch(EMBLEM_API + '/address/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const decryptEmbed = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/embed/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    console.log(\"Contract states\")\n    \n    let owned = false\n    let _owner\n    try {\n      if (targetContract[chainId]) {\n        emblemContract = getCuratedContract(targetContract[chainId])\n        setDecimals(await covalContract.decimals())\n        setPrice(250 * Math.pow(10, decimals))\n        setAllowance(\n          await covalContract\n            .allowance(account, contractAddresses.vaultHandlerV8[chainId])\n            .then((balance: { toString: () => string }) => balance.toString())\n        )\n        setBalance(await covalContract.balanceOf(account).then((balance: { toString: () => string }) => balance.toString()))\n        \n        if (Number(allowance) >= Number(price)) {\n          setIsCovalApproved(true)\n        } else {\n          setIsCovalApproved(false)\n        }\n        _owner = await emblemContract.getOwnerOfSerial(targetContract.serialNumber)\n        // console.log(\"--------------------------- owner\", _owner, approved, account, contractAddresses.vaultHandlerV8[chainId])\n      } else {\n        _owner  = await emblemContract.ownerOf(tokenId)\n      }\n      finish()\n    } catch(err){\n      _owner = \"0x0000000000000000000000000000000000000000\"\n      finish()\n    }\n\n    async function finish(){\n      // let acceptable = await handlerContract.getPreTransfer(tokenId)\n      let isApproved\n      if (targetContract[chainId]) {\n        console.log(\"@@@@@@@@@@@@@------- checking approved start\", \"me\", account, \"v8\", contractAddresses.vaultHandlerV8[chainId])\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId])\n        setApproved(isApproved)\n        console.log(\"@@@@@@@@@@@@@------- checking approved end\", \"approved\", isApproved, \"acceptable\", acceptable, \"mine\", mine)\n        console.log(\"price\", price, \"decimals\", decimals, \"allowance\", allowance, \"balance\", balance, \"isCovalApproved\", isCovalApproved)\n      } else {\n        isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId])\n        setApproved(isApproved)\n      }\n      \n      // setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n      setOwner(_owner)\n      setMine(_owner === account)\n      loadPasswordFromLocalStorage()\n    }\n    \n  }\n\n  useEffect(()=>{\n    console.log(\"mine?\", mine)\n    console.log(\"claiming?\", claiming)\n    console.log(\"accepting?\", accepting)\n    console.log(\"acceptable\", acceptable)\n    console.log(\"-----\", live, to, account, vaultChainId, chainId, status, showMakingVaultMsg, vaultCiphertextV2)\n    // !live && to == account && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg \n  })\n\n  const hasAddress = (coin)=>{\n    console.log(coin, vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0)\n    return vaultAddresses.filter(address=>{ return address.coin == coin}).length > 0\n  }\n\n  const onRenew = async (name) => { \n    library\n      .getSigner(account)\n      .signMessage('Renew: ' + tokenId)\n      .then((signature) => {\n        let address = vaultAddresses.filter(address=>{ return address.coin == 'NMC'})[0].address\n        console.log('signature', signature, name)\n        fetch(EMBLEM_API + '/nmc/renew/' + address, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            service: 'evmetadata',\n            chainid: chainId.toString()\n          },\n          body: JSON.stringify({\n                \"tokenId\": tokenId,\n                \"signature\": signature,\n                \"name\": name\n              })\n        }).then(async function (response) {\n          let data = await response.json()\n          console.log(\"Requested Renew\", data)\n          \n        })\n      })\n  }\n  \n  const handleSign = async () => {\n    let serialNumber\n    if (targetContract[chainId]) {      \n      emblemContract = getCuratedContract(targetContract[chainId])\n      serialNumber = targetContract.serialNumber\n    }\n\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + (targetContract[chainId]? serialNumber: tokenId))\n      .then((signature) => {\n        getSignedJWT(signature, tokenId, (token)=>{\n          getTorusKeys(tokenId, token.token, (keys)=>{\n            var bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey)\n            let payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8)) \n            setKeyValues(payload.values)\n            setMnemonic(payload.phrase)\n            vaultAddresses.forEach(async address=>{\n              if (address.coin == 'STX') {\n                address.key = await getSTXKey(address, payload.phrase)\n              } else {\n                address.key = window.phrasePathToKey(payload.phrase, address.path)\n              }\n              if (address.coin == 'BTC') setPrivKeyBTC(address.key)\n              if (address.coin == 'ETH') setPrivKeyETH(address.key)\n            })\n            // setKeyValues(vaultAddresses)\n            onOpenKeysModal()\n          })          \n        })\n      // }\n    })\n  }\n\n  const getSTXKey = async (address: any, phrase: string)=>{\n    const wallet: any = await generateWallet({\n      secretKey: phrase,\n      password: '',\n    })\n    console.log('------ stacks account -', wallet.accounts[0])\n    const account = wallet.accounts[0];\n    address.key = account.stxPrivateKey\n    return address.key\n  }\n\n  const handleHideAsset = async (coin) => {\n    library\n      .getSigner(account)\n      .signMessage('HideAsset: ' + tokenId)\n      .then((signature) => {\n\n        console.log(\"----------------------------------------------------------------\", signature)\n        console.log(coin.name, coin.coin, coin.address)\n        hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, ()=>{\n          console.log(\"Done hiding coin and getting new balances\")\n        })\n      })\n  }\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/'+tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin? coin: null,\n        \"address\": address? address: null,\n        \"name\": name? name: null,\n        \"signature\": signature? signature: null\n      })\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"-------\", data)\n      getAllBalances([], tokenId, (values)=>{\n        setVaultValues(values)\n        return cb()\n      })\n    }) \n  }\n\n  const handleAddressSign = async (coin: string) => {\n    library\n      .getSigner(account)\n      .signMessage('Address: ' + tokenId)\n      .then((signature) => {\n        addAddress(signature, tokenId, coin, (result) => {\n          getVault()\n        })\n      })\n  }\n\n  const handleOwnedEmbed = async () => {\n    library\n      .getSigner(account)\n      .signMessage('Embed: ' + tokenId)\n      .then((signature) => {\n        decryptEmbed(signature, tokenId, (result) => {\n          setVaultImage(result.ownedImage)\n        })        \n      })\n  }\n\n  const handleClaim = async () => {\n    if (targetContract[chainId]) {\n      // emblemContract = getCuratedContract(targetContract[chainId])\n      // let tokenId = await emblemContract.getTokenIdForSerialNumber(targetContract.serialNumber)\n      vaultHandlerContract.claim(targetContract[chainId], targetContract.tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    } else {\n      emblemContract.burn(tokenId).then(({ hash }: { hash: string }) => {\n        setClaiming(true)\n        setTimeout(() => {\n          setHash(hash)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n      })\n    }\n  }\n\n  const pingClaimLogs = (cb)=>{\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId='+chainId.toString()+'_vercel_no_cache=1', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    }).then(async function (response) {\n      let data = await response.json()\n      console.log(\"Log check\", data)\n      return cb()\n    })    \n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random())\n        //Get random letter\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      // $(\"#output\").html(fixed + block);\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    console.log('----')\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    (account && chainId && vaultChainId && chainId == vaultChainId) || ((query.noLayout && query.noLayout == 'true') || (query.slideshowOnly && query.slideshowOnly == 'true')) ? getContractStates() : null\n  })\n\n  function splitDescription(words) {\n    var desc = words? words.split('\\n\\n\\n\\n'): [\" \"]\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    console.log(vaultAddresses)\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      let ethAddress = vaultAddresses.filter((item) => {return item.coin === 'ETH'})[0].address\n      let btcAddress = vaultAddresses.filter((item) => {return item.coin === 'BTC'})[0].address\n      console.log(\"SUCCESS\", vaultAddresses)\n      getAllBalancesByAddress([], ethAddress, btcAddress, (values)=>{\n        setVaultValues(values)\n      })\n      // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {console.log('WTF', err)}\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\")\n    return vaultAddresses\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach((item) => {\n      if (item.address.includes('private')) {\n        let cipherText = item.address.replace('private:', '')\n        item.address = decrypt(cipherText, key)\n      }      \n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  function visitOpenSeaLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' : vaultChainId == 5 ? 'testnets.': '') +\n      'opensea.io/assets/' + \n      (vaultChainId == 137 ? 'matic/' : vaultChainId == 5 ? 'goerli/': '') +\n      (alternateContractAddress? alternateContractAddress : targetContract[chainId]? targetContract[chainId]: contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      (targetContract? targetContract.tokenId: tokenId)\n    , '_blank')\n  }\n\n  function visitLooksRareLink() {\n    window.open(\n      'https://' +\n      (vaultChainId == 4 ? 'rinkeby.' :vaultChainId == 5 ? 'goerli.' : '') +\n      'looksrare.org/collections/' + \n      (vaultChainId == 137 ? 'matic/' : '') +\n      (alternateContractAddress? alternateContractAddress : targetContract? targetContract[chainId]: contractAddresses.emblemVault[vaultChainId]) +\n      '/' +\n      (targetContract? targetContract.tokenId: tokenId) \n    , '_blank')\n  }\n\n  { alternateContractAddress?\n    emblemContract = getVaultContract(alternateContractAddress? alternateContractAddress: null)\n  : null}\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n        <script\n            dangerouslySetInnerHTML={{\n              __html: `\n              // $(\".NFT\").tilt({    \n              //     maxTilt: 3\n              // });\n              $(\".NFT\").trigger('mouseenter');\n              $(\".NFT\").trigger('mouseclick'), '.NFT';\n              if (localStorage.getItem(\"darkMode\") == 'false') {\n                localStorage.setItem(\"darkMode\",\"true\"); location.href = location.href\n              }\n              `,\n            }}\n          />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n        privValues={privValues}\n        addresses={vaultAddresses}\n      />\n      {showOffer ? (\n        <OfferModal\n          isOpen={isOpenOfferModal}\n          onClose={onCloseOfferModal}\n          tokenId={tokenId}\n          mine={mine}\n        />\n      ) : null}\n      \n\n      {/* <Loader loaded={state.loaded}> */}\n        <Box height=\"40px\"></Box>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault && !slideshowOnly ? (\n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                className=\"NFT\" \n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"blue.500\"\n                >\n                  Vault Network: {CHAIN_ID_NAMES[vaultChainId]}\n                </Box>\n                {/* {isCrowdSale ? (\n                  <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                  color=\"red.500\"\n                >\n                  Part of a crowdsale, sealed for 1 week.\n                </Box>\n                ) : null} */}\n                \n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  // textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null}\n                </Box>\n                <Stack className=\"NFT-content\" align=\"center\">\n                  {/* { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                      <NFTSlideshow name={vaultName} image={vaultImage} items={vaultValues.map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n                    ) : (\n                      <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n                    )\n                  } */}\n                  <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n                  {mine && ownedImage ? (\n                    <Button onClick={() => {handleOwnedEmbed()}}>(OWNED) Show Full Embed</Button>\n                  ): null}\n                </Stack>\n                <Stack align=\"center\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                    <Stack>\n                      <Text fontSize=\"xs\">\n                      { vaultChainId == chainId ? (\n                        <Link href={\"./vaults?address=\"+owner}>\n                          Owner: {owner}\n                        </Link>\n                      ) : null }\n                      </Text>\n                      <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" className=\"md\">\n                        <ReactMarkdown plugins={[gfm]} children={splitDescription(vaultDesc)} />\n                      </Text>\n                      \n                    </Stack>                    \n                  </Box>                    \n                </Stack>\n                <Box p=\"6\">\n                <Tabs isFitted variant='enclosed'>\n                  <TabList mb='1em'>\n                    <Tab>Balances</Tab>\n                    <Tab>Attributes</Tab>\n                  </TabList>\n                  <TabPanels>\n                    <TabPanel>\n                      {vaultPrivacy ? (\n                        <Box mb={5}>\n                          <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                            {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                          </Text>\n                          <Input\n                            type=\"password\"\n                            id=\"vault-password\"\n                            onChange={(e) => tryDecrypt(e.target.value)}\n                            aria-describedby=\"password-helper-text\"\n                          />\n                        </Box>\n                      ) : (\n                        <Box d=\"flex\" backgroundColor={colorMode == \"light\"? \"gray.100\": \"gray.700\"} alignItems=\"baseline\" className=\"coin-balance-content\">\n                          <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                            <Text as=\"h4\" mt={2} fontWeight=\"semibold\">\n                            \n                              Current Contents:  <button\n                              onClick={() =>{\n                                getAllBalancesLive([], tokenId, (v)=>{\n                                  setLoadedValues(false)\n                                  setVaultValues(v)\n                                })\n                              }}\n                            > [Refresh Balances]</button>\n                            </Text>\n                            <Text as=\"p\" color={colorMode==\"dark\"? \"lightgreen\": \"forestgreen\"}>${Number(vaultTotalValue.toFixed(4)).toLocaleString()}</Text>\n                            { vaultValues.length ? (\n                              vaultValues.map((coin) => {\n                                return (  \n                                  <Stack> \n                                    <CoinBalance colorMode={colorMode} coin={coin} mine={(status === 'claimed' && claimedBy === account) || mine} onRenew={onRenew} hideAsset={handleHideAsset}/>\n                                  </Stack>\n                                )\n                              })\n                            ) : (<Refreshing /> ) } \n                            { vaultDataValues.length ? (\n                              vaultDataValues.map((data) => {\n                                return (\n                                  <Text>Data: {data.attribute_key}</Text>\n                                )                        \n                              })\n                            ) : !vaultDataValues.length && !vaultValues.length ? (\n                              <Text>Nothing in here! Fill 'er up!</Text>\n                            ) : null}\n                          </Box>\n                        </Box>\n                      )}\n                  </TabPanel>\n                    <TabPanel>\n                      <Attributes colorMode={colorMode} attributes={attributes}/>\n                      </TabPanel>\n                    </TabPanels>\n                  </Tabs>\n                  \n                  {!vaultPrivacy ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <ButtonGroup justifyContent=\"space-between\" spacing={6}>\n                        <Stack>\n                          <Text>Deposit Addresses</Text>\n                          <Flex w=\"340px\" justify=\"center\" flexWrap=\"wrap\">\n                            {vaultAddresses.map((addr) => {\n                              return (\n                                <Button\n                                  className=\"address_nft_button\"\n                                  \n                                  ml={2}\n                                  mt={2}\n                                  font-weight=\"100 !important\"\n                                  key={addr.address}\n                                  onClick={() => {\n                                    setCurrCoin(addr.coin)\n                                    setCurrAddr(addr.address)\n                                    onOpenAddrModal()\n                                  }}\n                                >\n                                  {addr.coin == 'ETH' ? addr.coin + '' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP': addr.coin}\n                                </Button>\n                              )\n                            })}\n                        </Flex>\n                        </Stack>\n                      </ButtonGroup>\n                    </Box>\n                  ) : null}\n\n                  {!(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 4 || vaultChainId === 5 || vaultChainId === 137 )? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      {/* <Stack d=\"flex\" width=\"100%\"> */}\n                        <Button\n                          className=\"nft_button\"\n                          width=\"50%\"\n                          m={5}\n                          onClick={() => {visitOpenSeaLink()}}\n                        >\n                          Opensea\n                        </Button>\n                        <Button\n                          className=\"nft_button\"\n                          width=\"50%\"\n                          m={5}\n                          onClick={() => {visitLooksRareLink()}}\n                        >\n                          LooksRare\n                        </Button>\n                        {showOffer? (\n                          <Button className=\"\" onClick={() => { onOpenOfferModal() }}>{mine? ('My Offers') : ('Make an Offer')} (NFT²NFT)</Button>\n                        ) : null}\n                        \n                      {/* </Stack> */}\n                    </Box>\n                  ) : null}\n                  {live && !(status === 'claimed') && mine && !acceptable?  (\n                    <>\n                     <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\" width=\"100%\">\n                        <Stack direction=\"column\" align=\"center\" width=\"100%\">\n                          <Button className=\"nft_button\" width=\"100%\" onClick={onToggle}>Transfer Vault</Button>\n                          <Collapse isOpen={isOpen}>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                            <FormLabel htmlFor=\"owner-address\">Address</FormLabel>\n                              <Input\n                                mt={1}\n                                type=\"text\"\n                                id=\"transferAddress\"\n                                value={transferToAddress || ''}\n                                onChange={(e) => {                              \n                                  console.log(\"Transfer to\", e.target.value)\n                                  setTransferToAddress(e.target.value)\n                                }}\n                                autoComplete=\"off\"\n                              />\n                            </Box>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                              <Button isDisabled={!isETHAddress(transferToAddress)} onClick={()=>{\n                                onToggle()\n                                transferVault()\n                              }}>Transfer Now</Button> \n                            </Box>\n                          </Collapse>\n                        </Stack>\n                      </Box>\n                    </>\n                  ):null }\n                  {mine && !acceptable && !approved ? (<>\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button \n                        className=\"nft_button\"\n                        width=\"100%\" onClick={() => {\n                        if (!approved) {\n                          return handleApproveForall()\n                        }                                      \n                      }\n                    }>Approve Claiming</Button>\n                    </Box>\n                  </>) : null }\n                  {(showTransferPassword || mintPassword) && acceptable ? (\n                      <Box>\n                        <Link href={location.protocol +'//'+ location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword)}>Copy Gift Link</Link>\n                        <Text>Password: {(transferPassword || mintPassword)}</Text>\n                      </Box>\n                      ) : null}\n                  {/* {acceptable && claimedBy !== account ? (\n                  <>\n                      <Button mt={2} width=\"100%\" onClick={()=>{fireMetaMask()}}>Accept</Button>\n                      <Input\n                        mt={2}\n                        type=\"password\"\n                        id=\"mintPassword\"\n                        minLength={3}\n                        maxLength={200}\n                        value={mintPassword || ''}\n                        onChange={(e) => {\n                          console.log('grrr', e.target.value, mintPassword)\n                          setMintPassword(e.target.value)}\n                        }\n                        autoComplete=\"off\"\n                      />\n                  </>\n                    ) : null} */}\n                  {live && !(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        onClick={() => {\n                          handleClaim()\n                        }}\n                        isDisabled={claiming}\n                      >\n                        {claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)'}\n                      </Button>\n                    </Box>\n                    // || !live && nonce && mintSignature && vaultCiphertextV2 && to == account\n                  ) : null }\n                  {(status == 'claimed' && claimedBy === account && vaultChainId === chainId)  ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={handleSign}>\n                        Get Keys\n                      </Button>\n                    </Box>\n                  ) : null}\n                  {!live && to == account && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg ? (\n                    <>\n                      { targetContract.name ? (\n                        <Button width=\"100%\" mt={5} onClick={lazyMintCurated} isDisabled = {!canCuratedMint}> Mint Vault </Button>\n                      ) : (\n                        <Button width=\"100%\" mt={5} onClick={lazyMint}>Mint Vault </Button>\n                      )}\n                    </>\n                ) : null}\n                {(!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? (\n                  <Button width=\"100%\" mt={5} onClick={deleteVault}>Delete Vault </Button>\n                ) : null}\n                {showVerifyingSignature ? (\n                  <Button isDisabled type=\"submit\">\n                    Verifying Signature ...\n                  </Button>\n                ) : null}\n                {showMakingVaultMsg ? (\n                  <Button isDisabled type=\"submit\">\n                    Minting Vault ...\n                  </Button>\n                ) : null}\n                </Box>\n                {vaultIPFS ? (\n                  <Stack>\n                    <HStack align=\"center\">\n                      <Link target='new' mb={2} ml={35} href={'https://gateway.ipfs.io/ipfs/'+vaultIPFS} isExternal>View Metadata on IPFS </Link>\n                      {vaultImageIPFS? (\n                        <Link mb={2} href={'https://gateway.ipfs.io/ipfs/'+vaultImageIPFS} isExternal>View Image on IPFS </Link>\n                      ) : null}                      \n                    </HStack> \n                  </Stack>\n                ) : null }\n                {sealed ? (\n                    <Box d=\"flex\" mb={2} ml={35} alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Text>*This vault is sealed forever.</Text>\n                    </Box>\n                  ) : null}\n                <Stack direction=\"column\" align=\"center\">\n                  {status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n                {hash ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    { accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving? \"Handling Approval Flow ...\" : transfering? \"Transfering Vault ...\":  minting? \"Minting Vault\" : \"Generating Gift Link ...\"}\n                  </Alert>\n                ) : null}\n              </Box>\n            </Flex>\n        ) : vaultValues.length > 0 && slideshowOnly? (\n          <Stack className=\"NFT-content\" align=\"center\">\n            { vaultValues.length && vaultValues.filter(item=> {return item.type == \"nft\"}).length > 0 ? (\n                <NFTSlideshow name={vaultName} image={vaultValues[0].image} items={vaultValues.filter(value=>{return value.image !== vaultValues[0].image}).map(value=>{return {image: value.image, description: value.description, name: value.name, type: value.type}})} properties = {{'duration': 3000, canSwipe: false}}/>\n              ) : (\n                <Embed className=\"d-block w-100 NFT-image\" url={vaultImage}/>\n              )\n            }\n          </Stack>\n        ) : invalidVault ? (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        ): null}\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              if (claiming && !accepting && !preTransfering) {\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                pingClaimLogs(()=>{\n                  location.href = location.origin + '/nft?id=' + tokenId\n                })\n              } else if (preTransfering) {\n                savePasswordToLocalStorage()\n                setShowTransferPassword(true)\n                setPreTransfering(false)\n                setHash(null)                \n              } else if(accepting) {\n                setAccepting(false)                \n                getVault()\n                setHash(null)\n              } else if(approving) {\n                setApproving(false)\n                getVault()\n                setHash(null)\n              } else if(transfering) {\n                setTransfering(false)\n                getVault()\n                setHash(null)\n              } else if(minting) {\n                //checkLiveliness(tokenId, targetContract, (isLive)=>{\n                  console.log('GOD SAKES REDIRECT')\n                  setMinting(false)\n                  setHash(null)\n                  // setLive(isLive)\n                  setShowMakingVaultMsg(false)\n                  location.href = location.origin + '/nft?id=' + tokenId\n                //})\n              } else {\n                console.log('minting', minting) \n                console.log('claiming', claiming) \n                console.log('accepting', accepting) \n                console.log('preTransfering', preTransfering)\n                console.log('approving', approving)\n                console.log(\"Unknown state\")\n              }\n            }}\n          />\n        ) : null}\n        <Box height=\"40px\"></Box>\n      {/* </Loader> */}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}