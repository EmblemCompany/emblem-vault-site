{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text, Button } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nexport default function Admin() {\n  _s();\n\n  var _this = this;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useState = useState({\n    loaded: true\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(false),\n      loadingApi = _useState2[0],\n      setLoadingApi = _useState2[1];\n\n  var _useState3 = useState([]),\n      stats = _useState3[0],\n      setStats = _useState3[1];\n\n  var _useState4 = useState(query.address || null),\n      address = _useState4[0],\n      setAddress = _useState4[1];\n\n  var _useState5 = useState(0),\n      offset = _useState5[0],\n      setOffset = _useState5[1];\n\n  var _useState6 = useState(10),\n      limit = _useState6[0],\n      setLimit = _useState6[1];\n\n  var _useState7 = useState(address ? true : false),\n      shouldFetchData = _useState7[0],\n      setShouldFetchData = _useState7[1];\n\n  var _useState8 = useState(true),\n      hasMore = _useState8[0],\n      setHasMore = _useState8[1];\n\n  var _useState9 = useState(false),\n      buttonDisabled = _useState9[0],\n      setButtonDisabled = _useState9[1];\n\n  var _useState10 = useState([]),\n      factories = _useState10[0],\n      setFactories = _useState10[1];\n\n  var handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  useEffect(function () {\n    if (state.loaded == false && !loadingApi && address) {\n      setLoadingApi(false); // getPnL()\n    }\n  }, []);\n  useEffect(function () {\n    if (shouldFetchData && address) {\n      console.log(\"Should load api after setting consts\", offset);\n      setShouldFetchData(false); // getPnL()\n    } else {\n      console.log(\"wtf\");\n    }\n  }, [shouldFetchData, offset]);\n\n  var fetchDataForLazyLoad = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('setting new offset to', offset + limit);\n              setOffset(offset + limit);\n              setShouldFetchData(true);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchDataForLazyLoad() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var GetContracts = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var factories;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return handlerContract.getAllRegisteredContractsOfType(8);\n\n            case 2:\n              factories = _context2.sent;\n              console.log(factories, factories);\n              setFactories(factories);\n              setLoadingApi(false); // ;(handlerContract as Contract)\n              //   .buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature)\n              //   .then(({ hash }: { hash: string }) => {\n              //   })\n              //   .catch((error: ErrorWithCode) => {\n              //       console.log(\"AAAAAHHHHHH\", error.code)\n              //       setLoadingApi(false)\n              //       // setMinting(false)\n              //   })\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function GetContracts() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var mockData = {\n    \"handler\": \"0x5B8189BCC7565C03C98994b5D7BfbeB1a4296FfE\"\n  };\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    onClick: GetContracts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Click\"), factories.length > 0 ? factories.map(function (factory) {\n    return __jsx(React.Fragment, null, __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, \"factory: \", factory), __jsx(\"hr\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }));\n  }) : null));\n}\n\n_s(Admin, \"Oi2paUJXpSr9e0yKpO2UpSvLPqo=\", false, function () {\n  return [useRouter, useWeb3React, useContract];\n});\n\n_c = Admin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx"],"names":["Flex","Text","Button","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","contractAddresses","useContract","Admin","query","account","chainId","loaded","state","setState","loadingApi","setLoadingApi","stats","setStats","address","setAddress","offset","setOffset","limit","setLimit","shouldFetchData","setShouldFetchData","hasMore","setHasMore","buttonDisabled","setButtonDisabled","factories","setFactories","handlerContract","vaultHandlerV8","vaultHandlerV8Abi","console","log","fetchDataForLazyLoad","GetContracts","getAllRegisteredContractsOfType","mockData","length","map","factory"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport {HStack, VStack, Circle, Divider } from '@chakra-ui/react'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\n\nimport { Contract } from '@ethersproject/contracts'\n\nexport default function Admin() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  const [state, setState] = useState({ loaded: true })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [stats, setStats] = useState([])\n  const [address, setAddress] = useState(query.address || null)\n  const [offset, setOffset] = useState(0)\n  const [limit, setLimit] = useState(10)\n  const [shouldFetchData, setShouldFetchData] = useState(address? true: false)\n  const [hasMore, setHasMore] = useState(true)\n  const [buttonDisabled, setButtonDisabled] = useState(false)\n\n  const [factories, setFactories] = useState([])\n\n  const handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  useEffect(() => {\n    if (state.loaded == false && !loadingApi && address) {\n      setLoadingApi(false)\n      // getPnL()\n    }\n  }, [])\n\n  useEffect(() => {\n    if (shouldFetchData && address) {\n      console.log(\"Should load api after setting consts\", offset)\n      setShouldFetchData(false)\n      // getPnL()\n    } else {\n      console.log(\"wtf\")\n    }\n  }, [shouldFetchData, offset])\n\n  const fetchDataForLazyLoad = async () =>{    \n    console.log('setting new offset to', offset+limit)\n    setOffset(offset+limit)\n    setShouldFetchData(true)\n  }\n\n  const GetContracts = async ()=>{\n    let factories = await handlerContract.getAllRegisteredContractsOfType(8)\n    console.log(factories, factories)\n    setFactories(factories)\n    setLoadingApi(false)\n    // ;(handlerContract as Contract)\n    //   .buyWithSignature(account, tokenId, cipherTextHash, nonce, mintSignature)\n    //   .then(({ hash }: { hash: string }) => {\n        \n    //   })\n    //   .catch((error: ErrorWithCode) => {\n    //       console.log(\"AAAAAHHHHHH\", error.code)\n    //       setLoadingApi(false)\n    //       // setMinting(false)\n    //   })\n    \n  }\n\n  const mockData = {\n    \"handler\": \"0x5B8189BCC7565C03C98994b5D7BfbeB1a4296FfE\"\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Button onClick={GetContracts}>Click</Button>\n\n        {factories.length > 0? (\n          factories.map(factory=>{\n            return (\n              <>\n                <Text>factory: {factory}</Text>\n                <hr/>\n              </>\n            )\n          })\n          \n        ) : null}\n       \n      </Flex>\n     \n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}