{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/partials/BridgeDeposits.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { useWeb3React } from '@web3-react/core';\nimport { useState } from 'react';\nimport { EMBLEM_API } from '../../constants';\nvar useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  }\n});\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return {\n    name: name,\n    calories: calories,\n    fat: fat,\n    carbs: carbs,\n    protein: protein\n  };\n}\n\nvar rows = [//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  //   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  //   createData('Eclair', 262, 16.0, 24, 6.0),\n  //   createData('Cupcake', 305, 3.7, 67, 4.3),\n  //   createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\nexport default function BridgeDeposits() {\n  _s();\n\n  var _this = this;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useState = useState(false),\n      hasDataRows = _useState[0],\n      setHasDataRows = _useState[1];\n\n  var _useState2 = useState([]),\n      dataRows = _useState2[0],\n      setDataRows = _useState2[1];\n\n  var classes = useStyles();\n  !hasDataRows ? getDeposits(function (deposits) {\n    setHasDataRows(true);\n    setDataRows(deposits);\n  }) : null;\n  return __jsx(TableContainer, {\n    component: Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, __jsx(Table, {\n    className: classes.table,\n    \"aria-label\": \"simple table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }, __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }\n  }, \"Dessert (100g serving) \", chainId), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  }, \"Calories\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  }, \"Fat\\xA0(g)\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }\n  }, \"Carbs\\xA0(g)\"), __jsx(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }, \"Protein\\xA0(g)\"))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, dataRows.map(function (row) {\n    return __jsx(TableRow, {\n      key: row.name,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    }, __jsx(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 29\n      }\n    }, Math.pow(row.returnValues.amount, 10) * 8), __jsx(TableCell, {\n      align: \"right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 29\n      }\n    }, row.blockNumber), __jsx(TableCell, {\n      align: \"right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 29\n      }\n    }, row.transactionHash), __jsx(TableCell, {\n      align: \"right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 29\n      }\n    }, row.carbs), __jsx(TableCell, {\n      align: \"right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 29\n      }\n    }, row.protein));\n  }))));\n\n  function getDeposits(_x) {\n    return _getDeposits.apply(this, arguments);\n  }\n\n  function _getDeposits() {\n    _getDeposits = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(EMBLEM_API + '/transfersOutDb?pending=true', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'chainid': chainId.toString(),\n                  'service': 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context.sent;\n              _context.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context.sent;\n              return _context.abrupt(\"return\", cb(jsonData));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getDeposits.apply(this, arguments);\n  }\n}\n\n_s(BridgeDeposits, \"Z6ZuYvqeek/EwzfcBTHmVeHmC0Y=\", false, function () {\n  return [useWeb3React, useStyles];\n});\n\n_c = BridgeDeposits;\n\nvar _c;\n\n$RefreshReg$(_c, \"BridgeDeposits\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/partials/BridgeDeposits.tsx"],"names":["React","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","useWeb3React","useState","EMBLEM_API","useStyles","table","minWidth","createData","name","calories","fat","carbs","protein","rows","BridgeDeposits","account","chainId","hasDataRows","setHasDataRows","dataRows","setDataRows","classes","getDeposits","deposits","map","row","returnValues","amount","blockNumber","transactionHash","cb","fetch","method","headers","toString","responce","json","jsonData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { useWeb3React } from '@web3-react/core'\nimport { useState } from 'react'\nimport { EMBLEM_API } from '../../constants'\nimport { fromContractValue } from '../../utils'\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\nfunction createData(name: string, calories: number, fat: number, carbs: number, protein: number) {\n    return { name, calories, fat, carbs, protein };\n}\n\n\n\nlet rows = [\n    //   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n    //   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n    //   createData('Eclair', 262, 16.0, 24, 6.0),\n    //   createData('Cupcake', 305, 3.7, 67, 4.3),\n    //   createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\n\nexport default function BridgeDeposits() {\n    const { account, chainId } = useWeb3React()\n    const [hasDataRows, setHasDataRows] = useState(false)\n    const [dataRows, setDataRows] = useState([])\n    const classes = useStyles();\n    !hasDataRows ? (\n        getDeposits(deposits => {\n            setHasDataRows(true)\n            setDataRows(deposits)\n        })\n    ) : null\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Dessert (100g serving) {chainId}</TableCell>\n                        <TableCell align=\"right\">Calories</TableCell>\n                        <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n                        <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n                        <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {dataRows.map((row) => (\n                        <TableRow key={row.name}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {row.returnValues.amount ** 10 * 8}\n                                {/* {fromContractValue(row.returnValues.amount, 'wei')} */}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.blockNumber}</TableCell>\n                            <TableCell align=\"right\">{row.transactionHash}</TableCell>\n                            <TableCell align=\"right\">{row.carbs}</TableCell>\n                            <TableCell align=\"right\">{row.protein}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n\n    async function getDeposits(cb) {\n\n        const responce = await fetch(EMBLEM_API + '/transfersOutDb?pending=true', {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'chainid': chainId.toString(),\n                'service': 'evmetadata',\n            },\n        })\n        const jsonData = await responce.json()\n        return cb(jsonData)\n    }\n}"]},"metadata":{},"sourceType":"module"}