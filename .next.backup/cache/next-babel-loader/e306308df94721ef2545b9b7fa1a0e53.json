{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure, Tooltip, Collapse, FormLabel, Select } from '@chakra-ui/core';\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { isETHAddress, validImage } from '../utils';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport Tilt from 'react-tilt';\nimport CryptoJS from 'crypto-js';\nimport { addTokenToWallet } from '../public/web3';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nconst AddrModal = dynamic(() => import('./AddrModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./AddrModal')],\n    modules: ['./AddrModal']\n  }\n});\nconst KeysModal = dynamic(() => import('./KeysModal'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('./KeysModal')],\n    modules: ['./KeysModal']\n  }\n});\nexport default function Nft() {\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    query\n  } = useRouter();\n  const {\n    0: approved,\n    1: setApproved\n  } = useState(false);\n  const {\n    0: mintPassword,\n    1: setMintPassword\n  } = useState(query.key);\n  const {\n    0: tokenId,\n    1: setTokenId\n  } = useState(query.id);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState('');\n  const {\n    0: vaultDesc,\n    1: setVaultDesc\n  } = useState('');\n  const {\n    0: vaultImage,\n    1: setVaultImage\n  } = useState('');\n  const {\n    0: vaultValues,\n    1: setVaultValues\n  } = useState([]);\n  const {\n    0: vaultDataValues,\n    1: setVaultDataValues\n  } = useState([]);\n  const {\n    0: vaultAddresses,\n    1: setVaultAddresses\n  } = useState([]);\n  const {\n    0: vaultPrivacy,\n    1: setVaultPrivacy\n  } = useState(false);\n  const {\n    0: vaultTotalValue,\n    1: setVaultTotalValue\n  } = useState(0);\n  const {\n    0: vaultChainId,\n    1: setVaultChainId\n  } = useState(null);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: currCoin,\n    1: setCurrCoin\n  } = useState('');\n  const {\n    0: currAddr,\n    1: setCurrAddr\n  } = useState('');\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: mine,\n    1: setMine\n  } = useState(false);\n  const {\n    0: claiming,\n    1: setClaiming\n  } = useState(false);\n  const {\n    0: status,\n    1: setStatus\n  } = useState('claimed');\n  const {\n    0: claimedBy,\n    1: setClaimedBy\n  } = useState(null);\n  const {\n    0: mnemonic,\n    1: setMnemonic\n  } = useState('');\n  const {\n    0: privKeyBTC,\n    1: setPrivKeyBTC\n  } = useState('');\n  const {\n    0: privKeyETH,\n    1: setPrivKeyETH\n  } = useState('');\n  const {\n    0: privValues,\n    1: setKeyValues\n  } = useState([]);\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: decryptedEffect,\n    1: setDecryptedEffect\n  } = useState('');\n  const {\n    0: decryptedEffectRunning,\n    1: setDecryptedEffectRunning\n  } = useState(false);\n  const {\n    0: decryptPassword,\n    1: setDecryptPassword\n  } = useState('');\n  const {\n    0: invalidVault,\n    1: setInvalidVault\n  } = useState(false);\n  const {\n    0: hasCheckedNft,\n    1: setHasCheckedNft\n  } = useState(false);\n  const {\n    0: accepting,\n    1: setAccepting\n  } = useState(false);\n  const {\n    0: approving,\n    1: setApproving\n  } = useState(false);\n  const {\n    0: acceptable,\n    1: setAcceptable\n  } = useState(false);\n  const {\n    0: transferPassword,\n    1: setTransferPassword\n  } = useState('');\n  const {\n    0: showTransferPassword,\n    1: setShowTransferPassword\n  } = useState(false);\n  const {\n    0: preTransfering,\n    1: setPreTransfering\n  } = useState(false);\n  const {\n    0: transferToAddress,\n    1: setTransferToAddress\n  } = useState(null);\n  const {\n    0: transfering,\n    1: setTransfering\n  } = useState(false);\n  const {\n    0: offers,\n    1: setOffers\n  } = useState([]);\n  const {\n    0: offering,\n    1: setOffering\n  } = useState(null); // const [transferImage, setTransferImage] = useState('')\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  const {\n    isOpen: isOpenAddrModal,\n    onOpen: onOpenAddrModal,\n    onClose: onCloseAddrModal\n  } = useDisclosure();\n  const {\n    isOpen: isOpenKeysModal,\n    onOpen: onOpenKeysModal,\n    onClose: onCloseKeysModal\n  } = useDisclosure();\n  const {\n    isOpen,\n    onToggle\n  } = useDisclosure();\n  const {\n    isOpen: isOffersOpen,\n    onToggle: onOffersToggle\n  } = useDisclosure();\n  let transferImage;\n\n  const addOffer = () => {\n    ;\n    handlerContract.addOffer(offering, tokenId).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const acceptOffer = index => {\n    ;\n    handlerContract.acceptOffer(tokenId, index).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const rejectOffer = index => {\n    ;\n    handlerContract.rejectOffer(tokenId, index).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const withdrawOffer = index => {\n    ;\n    handlerContract.withdrawOffer(tokenId, index).then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  };\n\n  const getOffers = async tokenId => {\n    if (offers.length > 0) return;\n    let _offers = [];\n    let offerCount = parseInt(await handlerContract.getOfferCount(tokenId)); // console.log(\"Offer Count\", offerCount)\n\n    await getOffer(0, () => {\n      _offers.length > 0 ? setOffers(_offers) : null; // console.log(\"Done getting offers\", _offers)\n    });\n\n    async function getOffer(index, cb) {\n      // console.log(\"Getting offer index\", index)\n      let offer = await handlerContract.getOffer(tokenId, index);\n\n      if (parseInt(offer.tokenId) !== 0) {\n        _offers.push({\n          index: index,\n          tokenId: parseInt(offer.tokenId),\n          from: offer._from\n        });\n      }\n\n      if (index + 1 === offerCount) {\n        return cb();\n      } else {\n        return getOffer(index + 1, cb);\n      }\n    }\n  };\n\n  const transferVault = () => {\n    setTransfering(true);\n    emblemContract.transferFrom(account, transferToAddress, tokenId).then(({\n      hash\n    }) => {\n      setHash(hash);\n    }).catch(error => {});\n  };\n\n  const fireMetaMask = () => {\n    console.log(mintPassword);\n    setAccepting(true);\n    getWitness(witness => {\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;\n      handlerContract.transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature).then(({\n        hash\n      }) => {\n        setTimeout(() => {\n          setHash(hash); // setShowMakingVaultMsg(true)\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      }).catch(error => {\n        setAccepting(false);\n\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(`tx failed.`, error);\n        } else {// setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      });\n    });\n  };\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\" + transferImage);\n    setPreTransfering(true);\n    handlerContract.addPreTransfer(tokenId, \"0x\" + transferImage).then(({\n      hash\n    }) => {\n      // setTimeout(() => {\n      setHash(hash);\n      console.log(\"Set Pre Transfering True\", preTransfering); // setShowMakingVaultMsg(true)\n      // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      if (error === null || error === void 0 ? void 0 : error.code) {\n        console.log(\"Error?\");\n        setPreTransfering(false);\n        setShowTransferPassword(false);\n        setTransferPassword('');\n      } else {// setShowTransferPassword(!showTransferPassword? true : false)\n        // setPreTransfering(false)\n        // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  const handleApproveForall = () => {\n    setApproving(true);\n    emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(({\n      hash\n    }) => {\n      setTimeout(() => {\n        setHash(hash); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    }).catch(error => {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(`tx failed.`, error);\n      } else {\n        setApproving(false); // setShowPreVaultMsg(false)\n      }\n    });\n  }; // \n\n\n  const getVaults = async () => {\n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/list/' + account + (experimental ? '?experimental=true' : ''), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString()\n        }\n      });\n      const jsonData = await response.json();\n      let _vaults = [];\n      jsonData.forEach(item => {\n        let found = offers.filter(offer => {\n          return offer.tokenId === item.tokenId;\n        }).length > 0;\n\n        if (!found) {\n          _vaults.push(item);\n        }\n\n        console.log(\"Item\", item, found);\n      });\n      setState({\n        loaded: true\n      });\n      setVaults(_vaults);\n      setLoadingApi(false); // console.log(\"Vaults\", _vaults)\n    } catch (error) {}\n  };\n\n  const getVault = async () => {\n    loadCache();\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n    getVaults(); // console.log('vault response was ', jsonData)\n\n    if (!jsonData.name) {\n      setState({\n        loaded: true\n      });\n      setInvalidVault(true);\n    } else {\n      setStates(jsonData);\n      saveCache(jsonData);\n      setLoadingApi(false);\n      setInvalidVault(false);\n    }\n  };\n\n  const getWitness = async cb => {\n    const responce = await fetch(EMBLEM_API + '/witness/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      }\n    });\n    const jsonData = await responce.json(); // console.log('vault response was ', jsonData)\n\n    if (jsonData.signature) {\n      console.log('witness', jsonData);\n      return cb(jsonData);\n    } else {\n      return cb(false);\n    }\n  };\n\n  const setStates = jsonData => {\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    setVaultValues(vaultValues.concat(jsonData.values));\n    setVaultDataValues(jsonData.attributes.filter(item => {\n      return item.trait_type === \"key\";\n    }));\n    setVaultDesc(jsonData.description);\n    setVaultAddresses(jsonData.addresses);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : 97);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    } // console.log('inside getstates. mine is ', mine)\n\n\n    setState({\n      loaded: true\n    });\n    let isPvt = jsonData.addresses.filter(item => {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n    setTimeout(() => {\n      !isPvt ? getNftBalance(jsonData.values, jsonData.addresses.filter(item => {\n        return item.coin === 'ETH';\n      })[0].address, _values => {\n        // console.log(\"Have new values\", _values)\n        setVaultValues(_values);\n      }) : null;\n    }, 5);\n  };\n\n  const getEthBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json(); // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n\n    setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue)); // console.log('get eth balances', jsonData.values)\n\n    return cb(jsonData.values);\n  };\n\n  const getBtcBalance = async (values, address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json(); // setVaultValues(values.concat(jsonData.values))\n\n    return cb(values.concat(jsonData.values));\n  };\n\n  const getNftBalance = async (values, address, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata'\n      }\n    });\n    const jsonData = await responce.json();\n\n    if (jsonData.length > 0) {\n      // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n      return cb(values.concat(jsonData));\n    } else {\n      return cb(values);\n    }\n  };\n\n  const saveCache = vault => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  const loadCache = () => {\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  };\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers();\n    myHeaders.append('chainId', chainId.toString());\n    myHeaders.append('service', 'evmetadata');\n    myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      signature: signature\n    });\n    const responce = await fetch(EMBLEM_API + '/verify/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    });\n    const jsonData = await responce.json(); // console.log('getKeys response is ', jsonData)\n\n    return cb(jsonData);\n  };\n\n  const getContractStates = async () => {\n    let owned = false;\n\n    try {\n      let owner = await emblemContract.ownerOf(tokenId);\n      let acceptable = await handlerContract.getPreTransfer(tokenId);\n      let isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n      setApproved(isApproved);\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\");\n      setMine(owner === account);\n      loadPasswordFromLocalStorage();\n      getOffers(tokenId);\n    } catch (err) {}\n  };\n\n  useEffect(() => {// vaults.length == 0 ? getVaults() : null\n    // console.log(\"Vaults\", vaults.length)\n    // getVaults()\n    // console.log(\"mine?\", mine)\n    // console.log(\"claiming?\", claiming)\n    // console.log(\"accepting?\", accepting)\n    // console.log(\"acceptable\", acceptable)\n  });\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library.getSigner(account).signMessage('Claim: ' + tokenId).then(signature => {\n      getKeys(signature, tokenId, result => {\n        // console.log('HandleSign response is ' + result)\n        setMnemonic(result.decrypted.phrase);\n        setPrivKeyBTC(result.decrypted.keys.filter(key => {\n          return key.coin === 'btc';\n        })[0].privkey);\n        setPrivKeyETH(result.decrypted.keys.filter(key => {\n          return key.coin === 'eth';\n        })[0].privkey);\n        setKeyValues(result.decrypted.values);\n        onOpenKeysModal();\n      });\n    });\n  };\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({\n      hash\n    }) => {\n      setClaiming(true);\n      setTimeout(() => {\n        setHash(hash);\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    });\n  };\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return;\n    }\n\n    setDecryptedEffectRunning(true);\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n    var ctnt = 'Decrypting'; // Your text goes here\n\n    var speed = 5; // ms per frame\n\n    var increment = 8; // frames per step. Must be >2\n\n    var clen = ctnt.length;\n    var si = 0;\n    var stri = 0;\n    var block = '';\n    var fixed = '';\n\n    (function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i);\n        } else {\n          setDecryptedEffectRunning(false);\n        }\n\n        nextFrame(i);\n        si = si + 1;\n      }, speed);\n    })(clen * increment + 1);\n\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n        var letter = theLetters.charAt(num);\n        block = block + letter;\n      }\n\n      if (si == increment - 1) {\n        stri++;\n      }\n\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1);\n        si = 0;\n      } // $(\"#output\").html(fixed + block);\n\n\n      setDecryptedEffect(fixed + block);\n      block = '';\n    }\n  };\n\n  useEffect(() => {\n    getVault();\n  }, []);\n  useEffect(() => {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null; // console.log('in the usefeect that clls getcontractstates')\n  });\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n');\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    let ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      getEthBalances(vaultAddresses.filter(item => {\n        return item.coin === 'ETH';\n      })[0].address, values => {\n        getBtcBalance(values, vaultAddresses.filter(item => {\n          return item.coin === 'BTC';\n        })[0].address, _values => {\n          // console.log(\"Have fucking values\", values)\n          getNftBalance(_values, vaultAddresses.filter(item => {\n            return item.coin === 'ETH';\n          })[0].address, __values => {\n            setVaultValues(__values.concat(vaultValues));\n          });\n        });\n      });\n    } catch (err) {}\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(item => {\n      let cipherText = item.address.replace('private:', '');\n      item.address = decrypt(cipherText, key);\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 8\n    }\n  }, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 9\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 7\n    }\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    privValues: privValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 622,\n      columnNumber: 7\n    }\n  }), __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 7\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 23\n    }\n  }) : '', !invalidVault ? __jsx(Tilt, {\n    className: \"Tilt\",\n    options: {\n      max: experimental ? 0 : 0,\n      scale: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 11\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 15\n    }\n  }, vaultChainId != chainId ? __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"orange.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 19\n    }\n  }, \"BEWARE: Vault is on a different network than you are.\") : null, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 17\n    }\n  }, vaultName, !vaultPrivacy ? ': ~$' + vaultTotalValue : null), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 673,\n      columnNumber: 17\n    }\n  }, __jsx(Image, {\n    src: validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png',\n    width: \"250px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 19\n    }\n  })), __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 680,\n      columnNumber: 19\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 681,\n      columnNumber: 21\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 682,\n      columnNumber: 21\n    }\n  })))), __jsx(Box, {\n    p: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 686,\n      columnNumber: 17\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 19\n    }\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 21\n    }\n  }, __jsx(Text, {\n    as: \"h4\",\n    fontWeight: \"semibold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 23\n    }\n  }, \"Current Contents:\"), vaultPrivacy ? __jsx(React.Fragment, null, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 27\n    }\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: e => tryDecrypt(e.target.value),\n    \"aria-describedby\": \"password-helper-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 697,\n      columnNumber: 27\n    }\n  })) : vaultValues.length ? vaultValues.map(coin => {\n    return __jsx(Text, {\n      key: coin.name,\n      isTruncated: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707,\n        columnNumber: 29\n      }\n    }, coin.address && coin.type !== 'nft' ? __jsx(Tooltip, {\n      \"aria-label\": coin.name,\n      hasArrow: true,\n      label: \"Add \" + coin.symbol + \" to wallet\",\n      placement: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710,\n        columnNumber: 33\n      }\n    }, __jsx(Link, {\n      onClick: () => {\n        addTokenToWallet({\n          address: coin.address,\n          symbol: coin.symbol,\n          decimals: coin.decimals,\n          image: coin.image ? coin.image : null\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 35\n      }\n    }, \"+\")) : null, '(', coin.coin.toLowerCase(), ')', \" \", coin.name, \" :\", ' ', coin.balance ? coin.balance : coin.type == 'nft' ? __jsx(Link, {\n      href: coin.external_url,\n      isExternal: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 33\n      }\n    }, \"View NFT\") : null);\n  }) : null, vaultDataValues.length ? vaultDataValues.map(data => {\n    return __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 29\n      }\n    }, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 736,\n      columnNumber: 25\n    }\n  }, \"Nothing in here! Fill 'er up!\") : null)), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 21\n    }\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 742,\n      columnNumber: 23\n    }\n  }, vaultAddresses.map(addr => {\n    return __jsx(Button, {\n      key: addr.address,\n      onClick: () => {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745,\n        columnNumber: 29\n      }\n    }, \"Put \", addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin, \" In\");\n  }))) : null, !(status === 'claimed') && (vaultChainId === 1 || vaultChainId === 4) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 762,\n      columnNumber: 21\n    }\n  }, __jsx(Button, _extends({\n    width: \"100%\",\n    as: \"a\"\n  }, {\n    href: 'https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + contractAddresses.emblemVault[vaultChainId] + '/' + tokenId,\n    target: '_blank',\n    rel: 'noopener noreferrer'\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 23\n    }\n  }), mine ? 'Sell (Opensea)' : 'Make an Offer (Opensea)')) : null, !(status === 'claimed') && mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 784,\n      columnNumber: 22\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 785,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: onToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 786,\n      columnNumber: 27\n    }\n  }, \"Transfer Vault\"), __jsx(Collapse, {\n    isOpen: isOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 787,\n      columnNumber: 27\n    }\n  }, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 29\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"owner-address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 29\n    }\n  }, \"Address\"), __jsx(Input, {\n    mt: 1,\n    type: \"text\",\n    id: \"transferAddress\",\n    value: transferToAddress || '',\n    onChange: e => {\n      console.log(\"Transfer to\", e.target.value);\n      setTransferToAddress(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 790,\n      columnNumber: 31\n    }\n  })), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"2\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 802,\n      columnNumber: 29\n    }\n  }, __jsx(Button, {\n    isDisabled: !isETHAddress(transferToAddress),\n    onClick: () => {\n      onToggle();\n      transferVault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 803,\n      columnNumber: 31\n    }\n  }, \"Transfer Now\")))))) : null, mine && !acceptable ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 814,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      if (!approved) {\n        return handleApproveForall();\n      } else {\n        let key = CryptoJS.lib.WordArray.random(128 / 8).toString();\n        let sha = CryptoJS.SHA256(key).toString();\n        console.log('plain', key);\n        console.log('sha', sha);\n        setTransferPassword(key);\n        transferImage = sha;\n        setTimeout(() => {\n          addPreTransfer();\n        }, 500);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 815,\n      columnNumber: 23\n    }\n  }, \" \", approved ? \"Get Link (Send Vault Via Link)\" : \"Approve Gifting\", \" \"))) : null, (showTransferPassword || mintPassword) && acceptable ? __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 834,\n      columnNumber: 23\n    }\n  }, __jsx(Link, {\n    href: location.protocol + '//' + location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 835,\n      columnNumber: 25\n    }\n  }, \"Copy Gift Link\"), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 836,\n      columnNumber: 25\n    }\n  }, \"Password: \", transferPassword || mintPassword)) : null, acceptable && claimedBy !== account ? __jsx(React.Fragment, null, __jsx(Button, {\n    mt: 2,\n    width: \"100%\",\n    onClick: () => {\n      fireMetaMask();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 841,\n      columnNumber: 23\n    }\n  }, \"Accept\"), __jsx(Input, {\n    mt: 2,\n    type: \"password\",\n    id: \"mintPassword\",\n    minLength: 3,\n    maxLength: 200,\n    value: mintPassword || '',\n    onChange: e => {\n      console.log('grrr', e.target.value, mintPassword);\n      setMintPassword(e.target.value);\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 842,\n      columnNumber: 23\n    }\n  })) : null, !(status === 'claimed') && account && vaultChainId === chainId && mine ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 859,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: () => {\n      handleClaim();\n    },\n    isDisabled: claiming,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 860,\n      columnNumber: 23\n    }\n  }, claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)')) : status === 'claimed' && claimedBy === account && vaultChainId === chainId ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 871,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 872,\n      columnNumber: 23\n    }\n  }, \"Get Keys\")) : null, status !== 'claimed' ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 878,\n      columnNumber: 21\n    }\n  }, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 879,\n      columnNumber: 23\n    }\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: onOffersToggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 880,\n      columnNumber: 25\n    }\n  }, \"Offers: \", offers.length), __jsx(Collapse, {\n    isOpen: isOffersOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 883,\n      columnNumber: 25\n    }\n  }, offers.map((offer, index) => {\n    return __jsx(Box, {\n      d: \"flex\",\n      alignItems: \"baseline\",\n      justifyContent: \"space-between\",\n      mt: \"4\",\n      key: offer.tokenId + '_' + index + '_key',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 31\n      }\n    }, __jsx(Text, {\n      key: offer.tokenId + '_' + index + '_offer',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887,\n        columnNumber: 33\n      }\n    }, offer.tokenId), __jsx(Button, {\n      key: offer.tokenId + '_' + index + '_accept',\n      m: \"2\",\n      onClick: () => {\n        acceptOffer(offer.index);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888,\n        columnNumber: 33\n      }\n    }, \"Accept\"), __jsx(Button, {\n      key: offer.tokenId + '_' + index + '_reject',\n      m: \"2\",\n      onClick: () => {\n        rejectOffer(offer.index);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889,\n        columnNumber: 33\n      }\n    }, \"Reject\"), offer.from == account ? __jsx(Button, {\n      key: offer.tokenId + '_' + index + '_withdraw',\n      m: \"2\",\n      onClick: () => {\n        withdrawOffer(offer.index);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 891,\n        columnNumber: 35\n      }\n    }, \"Withdraw\") : null);\n  }), __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 896,\n      columnNumber: 27\n    }\n  }, __jsx(Select, {\n    placeholder: \"Select vault\",\n    onChange: e => {\n      setOffering(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 898,\n      columnNumber: 29\n    }\n  }, vaults.length > 0 ? vaults.map((vault, index) => {\n    return __jsx(\"option\", {\n      key: 'vault_' + vault.tokenId + index,\n      value: vault.tokenId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 901,\n        columnNumber: 35\n      }\n    }, vault.name);\n  }) : null), __jsx(Button, {\n    m: \"2\",\n    onClick: () => {\n      addOffer();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 905,\n      columnNumber: 29\n    }\n  }, \"Offer\"))))) : null), __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 912,\n      columnNumber: 17\n    }\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 913,\n      columnNumber: 42\n    }\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 916,\n      columnNumber: 19\n    }\n  }, __jsx(AlertIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 917,\n      columnNumber: 21\n    }\n  }), accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving ? \"Handling Approval Flow ...\" : transfering ? \"Transfering Vault ...\" : \"Generating Gift Link ...\") : null))) : __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 925,\n      columnNumber: 11\n    }\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 926,\n      columnNumber: 13\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 930,\n      columnNumber: 13\n    }\n  }, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 932,\n      columnNumber: 15\n    }\n  }, \"CREATE ONE HERE!\"))), hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      // location.href = location.origin + '/vault?id=' + tokenId\n      if (claiming && !accepting && !preTransfering) {\n        console.log(111111);\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account);\n        handleSign();\n      } else if (preTransfering) {\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        setApproving(false);\n        getVault();\n        setHash(null);\n      } else if (transfering) {\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else {\n        console.log('claiming', claiming);\n        console.log('accepting', accepting);\n        console.log('preTransfering', preTransfering);\n        console.log('approving', approving);\n        console.log(\"Unknown state\");\n        getVault();\n        setHash(null);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 939,\n      columnNumber: 11\n    }\n  }) : null));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Nft.tsx"],"names":["Box","Flex","Image","Text","Stack","Button","ButtonGroup","Input","Link","Alert","AlertIcon","useDisclosure","Tooltip","Collapse","FormLabel","Select","Head","useWeb3React","useEffect","useState","useRouter","Refreshing","Loader","dynamic","isETHAddress","validImage","TransactionToast","EMBLEM_API","BURN_ADDRESS","contractAddresses","useContract","Tilt","CryptoJS","addTokenToWallet","ReactMarkdown","gfm","AddrModal","KeysModal","Nft","account","chainId","library","query","approved","setApproved","mintPassword","setMintPassword","key","tokenId","setTokenId","id","experimental","setExperimental","vaults","setVaults","vaultName","setVaultName","vaultDesc","setVaultDesc","vaultImage","setVaultImage","vaultValues","setVaultValues","vaultDataValues","setVaultDataValues","vaultAddresses","setVaultAddresses","vaultPrivacy","setVaultPrivacy","vaultTotalValue","setVaultTotalValue","vaultChainId","setVaultChainId","hash","setHash","currCoin","setCurrCoin","currAddr","setCurrAddr","state","setState","loaded","mine","setMine","claiming","setClaiming","status","setStatus","claimedBy","setClaimedBy","mnemonic","setMnemonic","privKeyBTC","setPrivKeyBTC","privKeyETH","setPrivKeyETH","privValues","setKeyValues","loadingApi","setLoadingApi","decryptedEffect","setDecryptedEffect","decryptedEffectRunning","setDecryptedEffectRunning","decryptPassword","setDecryptPassword","invalidVault","setInvalidVault","hasCheckedNft","setHasCheckedNft","accepting","setAccepting","approving","setApproving","acceptable","setAcceptable","transferPassword","setTransferPassword","showTransferPassword","setShowTransferPassword","preTransfering","setPreTransfering","transferToAddress","setTransferToAddress","transfering","setTransfering","offers","setOffers","offering","setOffering","handlerContract","vaultHandler","vaultHandlerAbi","emblemContract","emblemVault","emblemAbi","isOpen","isOpenAddrModal","onOpen","onOpenAddrModal","onClose","onCloseAddrModal","isOpenKeysModal","onOpenKeysModal","onCloseKeysModal","onToggle","isOffersOpen","onOffersToggle","transferImage","addOffer","then","acceptOffer","index","rejectOffer","withdrawOffer","getOffers","length","_offers","offerCount","parseInt","getOfferCount","getOffer","cb","offer","push","from","_from","transferVault","transferFrom","catch","error","fireMetaMask","console","log","getWitness","witness","transferWithCode","nonce","signature","setTimeout","code","addPreTransfer","handleApproveForall","setApprovalForAll","getVaults","response","fetch","method","headers","service","toString","jsonData","json","_vaults","forEach","item","found","filter","getVault","loadCache","responce","name","setStates","saveCache","chainid","image","description","totalValue","concat","values","attributes","trait_type","addresses","network","isPvt","address","includes","getNftBalance","coin","_values","getEthBalances","Number","getBtcBalance","vault","localStorage","setItem","JSON","stringify","parse","getItem","savePasswordToLocalStorage","loadPasswordFromLocalStorage","storedPw","getKeys","myHeaders","Headers","append","raw","body","redirect","getContractStates","owned","owner","ownerOf","getPreTransfer","isApproved","isApprovedForAll","err","handleSign","getSigner","signMessage","result","decrypted","phrase","keys","privkey","handleClaim","startDecryptEffect","theLetters","ctnt","speed","increment","clen","si","stri","block","fixed","rustle","i","nextFrame","pos","num","Math","floor","random","letter","charAt","splitDescription","words","desc","split","trim","tryDecrypt","ciphertext","replace","bytes","AES","decrypt","enc","Utf8","decryptAddresses","__values","cipherText","decryptedData","max","scale","e","target","value","map","type","symbol","decimals","toLowerCase","balance","external_url","data","attribute_key","addr","href","rel","lib","WordArray","sha","SHA256","location","protocol","host"],"mappings":";;;;;;AAAA,SACEA,GADF,EAEEC,IAFF,EAGEC,KAHF,EAIEC,IAJF,EAKEC,KALF,EAMEC,MANF,EAOEC,WAPF,EAQEC,KARF,EASEC,IATF,EAUEC,KAVF,EAWEC,SAXF,EAYEC,aAZF,EAaEC,OAbF,EAcEC,QAdF,EAgBEC,SAhBF,EAiBEC,MAjBF,QAkBO,iBAlBP;AAoBA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,UAAzC;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,iBAAnC,QAA4D,cAA5D;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,gBAAT,QAA0C,gBAA1C;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,MAAMC,SAAS,GAAGb,OAAO,CAAC,MAAM,OAAO,aAAP,CAAP;AAAA;AAAA,wCAAc,aAAd;AAAA,cAAc,aAAd;AAAA;AAAA,EAAzB;AACA,MAAMc,SAAS,GAAGd,OAAO,CAAC,MAAM,OAAO,aAAP,CAAP;AAAA;AAAA,wCAAc,aAAd;AAAA,cAAc,aAAd;AAAA;AAAA,EAAzB;AAEA,eAAe,SAASe,GAAT,GAAe;AAC5B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAgCxB,YAAY,EAAlD;AACA,QAAM;AAAEyB,IAAAA;AAAF,MAAYtB,SAAS,EAA3B;AACA,QAAM;AAAA,OAACuB,QAAD;AAAA,OAAWC;AAAX,MAA0BzB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAAC0B,YAAD;AAAA,OAAeC;AAAf,MAAkC3B,QAAQ,CAACuB,KAAK,CAACK,GAAP,CAAhD;AACA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwB9B,QAAQ,CAACuB,KAAK,CAACQ,EAAP,CAAtC;AACA,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCjC,QAAQ,CAACuB,KAAK,CAACS,YAAP,CAAhD;AACA,QAAM;AAAA,OAACE,MAAD;AAAA,OAASC;AAAT,MAAsBnC,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACoC,SAAD;AAAA,OAAYC;AAAZ,MAA4BrC,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAA,OAACsC,SAAD;AAAA,OAAYC;AAAZ,MAA4BvC,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAA,OAACwC,UAAD;AAAA,OAAaC;AAAb,MAA8BzC,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAAC0C,WAAD;AAAA,OAAcC;AAAd,MAAgC3C,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAAC4C,eAAD;AAAA,OAAkBC;AAAlB,MAAwC7C,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM;AAAA,OAAC8C,cAAD;AAAA,OAAiBC;AAAjB,MAAsC/C,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM;AAAA,OAACgD,YAAD;AAAA,OAAeC;AAAf,MAAkCjD,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAA,OAACkD,eAAD;AAAA,OAAkBC;AAAlB,MAAwCnD,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAM;AAAA,OAACoD,YAAD;AAAA,OAAeC;AAAf,MAAkCrD,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM;AAAA,OAACsD,IAAD;AAAA,OAAOC;AAAP,MAAkBvD,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM;AAAA,OAACwD,QAAD;AAAA,OAAWC;AAAX,MAA0BzD,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAAC0D,QAAD;AAAA,OAAWC;AAAX,MAA0B3D,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAAC4D,KAAD;AAAA,OAAQC;AAAR,MAAoB7D,QAAQ,CAAC;AAAE8D,IAAAA,MAAM,EAAE;AAAV,GAAD,CAAlC;AACA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBhE,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM;AAAA,OAACiE,QAAD;AAAA,OAAWC;AAAX,MAA0BlE,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACmE,MAAD;AAAA,OAASC;AAAT,MAAsBpE,QAAQ,CAAC,SAAD,CAApC;AACA,QAAM;AAAA,OAACqE,SAAD;AAAA,OAAYC;AAAZ,MAA4BtE,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAA,OAACuE,QAAD;AAAA,OAAWC;AAAX,MAA0BxE,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACyE,UAAD;AAAA,OAAaC;AAAb,MAA8B1E,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAAC2E,UAAD;AAAA,OAAaC;AAAb,MAA8B5E,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAAC6E,UAAD;AAAA,OAAaC;AAAb,MAA6B9E,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM;AAAA,OAAC+E,UAAD;AAAA,OAAaC;AAAb,MAA8BhF,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAACiF,eAAD;AAAA,OAAkBC;AAAlB,MAAwClF,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM;AAAA,OAACmF,sBAAD;AAAA,OAAyBC;AAAzB,MAAsDpF,QAAQ,CAAC,KAAD,CAApE;AACA,QAAM;AAAA,OAACqF,eAAD;AAAA,OAAkBC;AAAlB,MAAwCtF,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM;AAAA,OAACuF,YAAD;AAAA,OAAeC;AAAf,MAAkCxF,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAA,OAACyF,aAAD;AAAA,OAAgBC;AAAhB,MAAoC1F,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM;AAAA,OAAC2F,SAAD;AAAA,OAAYC;AAAZ,MAA4B5F,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAAC6F,SAAD;AAAA,OAAYC;AAAZ,MAA4B9F,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAAC+F,UAAD;AAAA,OAAaC;AAAb,MAA8BhG,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAACiG,gBAAD;AAAA,OAAmBC;AAAnB,MAA0ClG,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM;AAAA,OAACmG,oBAAD;AAAA,OAAuBC;AAAvB,MAAkDpG,QAAQ,CAAC,KAAD,CAAhE;AACA,QAAM;AAAA,OAACqG,cAAD;AAAA,OAAiBC;AAAjB,MAAsCtG,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM;AAAA,OAACuG,iBAAD;AAAA,OAAoBC;AAApB,MAA4CxG,QAAQ,CAAC,IAAD,CAA1D;AACA,QAAM;AAAA,OAACyG,WAAD;AAAA,OAAcC;AAAd,MAAgC1G,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAA,OAAC2G,MAAD;AAAA,OAASC;AAAT,MAAsB5G,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAAC6G,QAAD;AAAA,OAAWC;AAAX,MAA0B9G,QAAQ,CAAC,IAAD,CAAxC,CA5C4B,CA8C5B;;AAEA,QAAM+G,eAAe,GAAGpG,WAAW,CAACD,iBAAiB,CAACsG,YAAlB,CAA+B3F,OAA/B,CAAD,EAA0CX,iBAAiB,CAACuG,eAA5D,EAA6E,IAA7E,CAAnC;AACA,QAAMC,cAAc,GAAGvG,WAAW,CAACD,iBAAiB,CAACyG,WAAlB,CAA8B9F,OAA9B,CAAD,EAAyCX,iBAAiB,CAAC0G,SAA3D,EAAsE,IAAtE,CAAlC;AAEA,QAAM;AAAEC,IAAAA,MAAM,EAAEC,eAAV;AAA2BC,IAAAA,MAAM,EAAEC,eAAnC;AAAoDC,IAAAA,OAAO,EAAEC;AAA7D,MAAkFlI,aAAa,EAArG;AACA,QAAM;AAAE6H,IAAAA,MAAM,EAAEM,eAAV;AAA2BJ,IAAAA,MAAM,EAAEK,eAAnC;AAAoDH,IAAAA,OAAO,EAAEI;AAA7D,MAAkFrI,aAAa,EAArG;AACA,QAAM;AAAE6H,IAAAA,MAAF;AAAUS,IAAAA;AAAV,MAAuBtI,aAAa,EAA1C;AACA,QAAM;AAAE6H,IAAAA,MAAM,EAAEU,YAAV;AAAwBD,IAAAA,QAAQ,EAAEE;AAAlC,MAAqDxI,aAAa,EAAxE;AAMA,MAAIyI,aAAJ;;AAEA,QAAMC,QAAQ,GAAG,MAAK;AACpB;AAAEnB,IAAAA,eAAD,CACAmB,QADA,CACSrB,QADT,EACmBhF,OADnB,EAEEsG,IAFF,CAEO,CAAC;AAAE7E,MAAAA;AAAF,KAAD,KAAgC;AACpCC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAJF;AAKF,GAND;;AAQA,QAAM8E,WAAW,GAAIC,KAAD,IAAU;AAC5B;AAAEtB,IAAAA,eAAD,CACAqB,WADA,CACYvG,OADZ,EACqBwG,KADrB,EAEEF,IAFF,CAEO,CAAC;AAAE7E,MAAAA;AAAF,KAAD,KAAgC;AACpCC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAJF;AAKF,GAND;;AAQA,QAAMgF,WAAW,GAAID,KAAD,IAAU;AAC5B;AAAEtB,IAAAA,eAAD,CACAuB,WADA,CACYzG,OADZ,EACqBwG,KADrB,EAEEF,IAFF,CAEO,CAAC;AAAE7E,MAAAA;AAAF,KAAD,KAAgC;AACpCC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAJF;AAKF,GAND;;AAQA,QAAMiF,aAAa,GAAIF,KAAD,IAAU;AAC9B;AAAEtB,IAAAA,eAAD,CACAwB,aADA,CACc1G,OADd,EACuBwG,KADvB,EAEEF,IAFF,CAEO,CAAC;AAAE7E,MAAAA;AAAF,KAAD,KAAgC;AACpCC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAJF;AAKF,GAND;;AAQA,QAAMkF,SAAS,GAAG,MAAO3G,OAAP,IAAkB;AAClC,QAAI8E,MAAM,CAAC8B,MAAP,GAAgB,CAApB,EAAuB;AACvB,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,UAAU,GAAGC,QAAQ,CAAC,MAAM7B,eAAe,CAAC8B,aAAhB,CAA8BhH,OAA9B,CAAP,CAAzB,CAHkC,CAIlC;;AACA,UAAMiH,QAAQ,CAAC,CAAD,EAAI,MAAI;AACpBJ,MAAAA,OAAO,CAACD,MAAR,GAAiB,CAAjB,GAAqB7B,SAAS,CAAC8B,OAAD,CAA9B,GAAyC,IAAzC,CADoB,CAEpB;AACD,KAHa,CAAd;;AAIA,mBAAeI,QAAf,CAAwBT,KAAxB,EAA+BU,EAA/B,EAAmC;AACjC;AACA,UAAIC,KAAK,GAAG,MAAMjC,eAAe,CAAC+B,QAAhB,CAAyBjH,OAAzB,EAAkCwG,KAAlC,CAAlB;;AACA,UAAIO,QAAQ,CAACI,KAAK,CAACnH,OAAP,CAAR,KAA4B,CAAhC,EAAmC;AACjC6G,QAAAA,OAAO,CAACO,IAAR,CAAa;AAACZ,UAAAA,KAAK,EAAEA,KAAR;AAAexG,UAAAA,OAAO,EAAE+G,QAAQ,CAACI,KAAK,CAACnH,OAAP,CAAhC;AAAiDqH,UAAAA,IAAI,EAAEF,KAAK,CAACG;AAA7D,SAAb;AACD;;AAED,UAAId,KAAK,GAAG,CAAR,KAAcM,UAAlB,EAA8B;AAC5B,eAAOI,EAAE,EAAT;AACD,OAFD,MAEO;AACL,eAAOD,QAAQ,CAACT,KAAK,GAAE,CAAR,EAAWU,EAAX,CAAf;AACD;AACF;AACF,GAtBD;;AAwBA,QAAMK,aAAa,GAAG,MAAM;AAC1B1C,IAAAA,cAAc,CAAC,IAAD,CAAd;AACEQ,IAAAA,cAAD,CAA6BmC,YAA7B,CAA0CjI,OAA1C,EAAmDmF,iBAAnD,EAAsE1E,OAAtE,EACAsG,IADA,CACK,CAAC;AAAE7E,MAAAA;AAAF,KAAD,KAAgC;AACpCC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAHA,EAIAgG,KAJA,CAIOC,KAAD,IAA0B,CAAE,CAJlC;AAKF,GAPD;;AASA,QAAMC,YAAY,GAAG,MAAM;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYhI,YAAZ;AACAkE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA+D,IAAAA,UAAU,CAACC,OAAO,IAAE;AAClB;AACA;AAAE7C,MAAAA,eAAD,CACA8C,gBADA,CACiBhI,OADjB,EAC0BH,YAD1B,EACwCN,OADxC,EACiDwI,OAAO,CAACE,KADzD,EACgEF,OAAO,CAACG,SADxE,EAEA5B,IAFA,CAEK,CAAC;AAAE7E,QAAAA;AAAF,OAAD,KAAgC;AACpC0G,QAAAA,UAAU,CAAC,MAAM;AACfzG,UAAAA,OAAO,CAACD,IAAD,CAAP,CADe,CAEf;AACD,SAHS,EAGP,GAHO,CAAV,CADoC,CAI5B;AACT,OAPA,EAQAgG,KARA,CAQOC,KAAD,IAA0B;AAC/B3D,QAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,YAAI,CAAA2D,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEU,IAAP,MAAgB,IAApB,EAA0B;AACxBR,UAAAA,OAAO,CAACC,GAAR,CAAa,YAAb,EAA0BH,KAA1B;AACD,SAFD,MAEO,CACL;AACA;AACD;AACF,OAhBA;AAiBF,KAnBS,CAAV;AAqBD,GAxBD;;AA0BA,QAAMW,cAAc,GAAG,MAAM;AAC3BT,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,OAAKzB,aAAlC;AACA3B,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACES,IAAAA,eAAD,CACEmD,cADF,CACiBrI,OADjB,EAC0B,OAAKoG,aAD/B,EAEEE,IAFF,CAEO,CAAC;AAAE7E,MAAAA;AAAF,KAAD,KAAgC;AACpC;AACEC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAmG,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCrD,cAAxC,EAHkC,CAIlC;AACF;AACD,KARF,EASEiD,KATF,CASSC,KAAD,IAA0B;AAC/B,UAAIA,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAEU,IAAX,EAAgB;AACZR,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACApD,QAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAF,QAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACAF,QAAAA,mBAAmB,CAAC,EAAD,CAAnB;AACH,OALD,MAKO,CACL;AACA;AACA;AACD;AACF,KApBF;AAqBF,GAxBD;;AA0BA,QAAMiE,mBAAmB,GAAG,MAAM;AAChCrE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACEoB,IAAAA,cAAD,CACEkD,iBADF,CACoB1J,iBAAiB,CAACsG,YAAlB,CAA+B3F,OAA/B,CADpB,EAC6D,IAD7D,EAEE8G,IAFF,CAEO,CAAC;AAAE7E,MAAAA;AAAF,KAAD,KAAgC;AACpC0G,MAAAA,UAAU,CAAC,MAAM;AACfzG,QAAAA,OAAO,CAACD,IAAD,CAAP,CADe,CAEf;AACD,OAHS,EAGP,GAHO,CAAV,CADoC,CAI5B;AACT,KAPF,EAQEgG,KARF,CAQSC,KAAD,IAA0B;AAC/B,UAAI,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEU,IAAP,MAAgB,IAApB,EAA0B;AACxBR,QAAAA,OAAO,CAACC,GAAR,CAAa,YAAb,EAA0BH,KAA1B;AACD,OAFD,MAEO;AACLzD,QAAAA,YAAY,CAAC,KAAD,CAAZ,CADK,CAEL;AACD;AACF,KAfF;AAgBF,GAlBD,CAnL4B,CAuM5B;;;AAEA,QAAMuE,SAAS,GAAG,YAAY;AAC5B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC/J,UAAU,GAAG,eAAb,GAAgCY,OAAhC,IAA4CY,YAAY,GAAE,oBAAF,GAAyB,EAAjF,CAAD,EAAuF;AACjHwI,QAAAA,MAAM,EAAE,KADyG;AAEjHC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,OAAO,EAAE,YAFF;AAGPrJ,UAAAA,OAAO,EAAEA,OAAO,CAACsJ,QAAR;AAHF;AAFwG,OAAvF,CAA5B;AAQA,YAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAvB;AACA,UAAIC,OAAO,GAAG,EAAd;AACAF,MAAAA,QAAQ,CAACG,OAAT,CAAkBC,IAAD,IAAQ;AACvB,YAAIC,KAAK,GAAGtE,MAAM,CAACuE,MAAP,CAAclC,KAAK,IAAE;AAAC,iBAAOA,KAAK,CAACnH,OAAN,KAAkBmJ,IAAI,CAACnJ,OAA9B;AAAsC,SAA5D,EAA8D4G,MAA9D,GAAuE,CAAnF;;AACA,YAAI,CAACwC,KAAL,EAAY;AACVH,UAAAA,OAAO,CAAC7B,IAAR,CAAa+B,IAAb;AACD;;AACDvB,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBsB,IAApB,EAA0BC,KAA1B;AACD,OAND;AAOApH,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAR;AACA3B,MAAAA,SAAS,CAAC2I,OAAD,CAAT;AACA9F,MAAAA,aAAa,CAAC,KAAD,CAAb,CApBE,CAqBF;AACD,KAtBD,CAsBE,OAAOuE,KAAP,EAAc,CAAE;AACnB,GAxBD;;AA0BA,QAAM4B,QAAQ,GAAG,YAAY;AAC3BC,IAAAA,SAAS;AACT,UAAMC,QAAQ,GAAG,MAAMd,KAAK,CAAC/J,UAAU,GAAG,QAAb,GAAwBqB,OAAxB,GAAkC,oBAAnC,EAAyD;AACnF2I,MAAAA,MAAM,EAAE,KAD2E;AAEnFC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,OAAO,EAAE;AAFF;AAF0E,KAAzD,CAA5B;AAOA,UAAME,QAAQ,GAAG,MAAMS,QAAQ,CAACR,IAAT,EAAvB;AACAR,IAAAA,SAAS,GAVkB,CAW3B;;AACA,QAAI,CAACO,QAAQ,CAACU,IAAd,EAAoB;AAClBzH,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAR;AACA0B,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD,KAHD,MAGO;AACL+F,MAAAA,SAAS,CAACX,QAAD,CAAT;AACAY,MAAAA,SAAS,CAACZ,QAAD,CAAT;AACA5F,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAQ,MAAAA,eAAe,CAAC,KAAD,CAAf;AAED;AACF,GAtBD;;AAwBA,QAAMmE,UAAU,GAAG,MAAOZ,EAAP,IAAc;AAE/B,UAAMsC,QAAQ,GAAG,MAAMd,KAAK,CAAC/J,UAAU,GAAG,WAAb,GAA2BqB,OAA5B,EAAqC;AAC/D2I,MAAAA,MAAM,EAAE,KADuD;AAE/DC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,OAAO,EAAE,YAFF;AAGPe,QAAAA,OAAO,EAAEpK,OAAO,CAACsJ,QAAR;AAHF;AAFsD,KAArC,CAA5B;AAQA,UAAMC,QAAQ,GAAG,MAAMS,QAAQ,CAACR,IAAT,EAAvB,CAV+B,CAW/B;;AACA,QAAID,QAAQ,CAACb,SAAb,EAAwB;AACtBN,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBkB,QAAvB;AACA,aAAO7B,EAAE,CAAC6B,QAAD,CAAT;AACD,KAHD,MAGO;AACL,aAAO7B,EAAE,CAAC,KAAD,CAAT;AACD;AACF,GAlBD;;AAoBA,QAAMwC,SAAS,GAAIX,QAAD,IAAc;AAC9BvI,IAAAA,YAAY,CAACuI,QAAQ,CAACU,IAAV,CAAZ;AACA7I,IAAAA,aAAa,CAACmI,QAAQ,CAACc,KAAV,CAAb;AACAnJ,IAAAA,YAAY,CAACqI,QAAQ,CAACe,WAAV,CAAZ;AACAxI,IAAAA,kBAAkB,CAACyH,QAAQ,CAACgB,UAAT,IAAuB,CAAxB,CAAlB;AACAjJ,IAAAA,cAAc,CAACD,WAAW,CAACmJ,MAAZ,CAAmBjB,QAAQ,CAACkB,MAA5B,CAAD,CAAd;AACAjJ,IAAAA,kBAAkB,CAAC+H,QAAQ,CAACmB,UAAT,CAAoBb,MAApB,CAA2BF,IAAI,IAAE;AAAC,aAAOA,IAAI,CAACgB,UAAL,KAAoB,KAA3B;AAAiC,KAAnE,CAAD,CAAlB;AACAzJ,IAAAA,YAAY,CAACqI,QAAQ,CAACe,WAAV,CAAZ;AACA5I,IAAAA,iBAAiB,CAAC6H,QAAQ,CAACqB,SAAV,CAAjB;AACA5I,IAAAA,eAAe,CAACuH,QAAQ,CAACsB,OAAT,IAAoB,SAApB,GAAgC,CAAhC,GAAoCtB,QAAQ,CAACsB,OAAT,IAAoB,SAApB,GAAgC,CAAhC,GAAoCtB,QAAQ,CAACsB,OAAT,IAAoB,QAApB,GAA+B,KAA/B,GAAuCtB,QAAQ,CAACsB,OAAT,IAAoB,OAApB,GAA8B,GAA9B,GAAmC,EAAnJ,CAAf;AACA9H,IAAAA,SAAS,CAACwG,QAAQ,CAACzG,MAAV,CAAT;;AACA,QAAIA,MAAM,KAAK,SAAf,EAA0B;AACxBG,MAAAA,YAAY,CAACsG,QAAQ,CAACvG,SAAV,CAAZ;AACD,KAb6B,CAc9B;;;AACAR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAD,CAAR;AACA,QAAIqI,KAAK,GACPvB,QAAQ,CAACqB,SAAT,CAAmBf,MAAnB,CAA2BF,IAAD,IAAU;AAClC,aAAOA,IAAI,CAACoB,OAAL,CAAaC,QAAb,CAAsB,UAAtB,CAAP;AACD,KAFD,EAEG5D,MAFH,GAEY,CAHd;AAIAxF,IAAAA,eAAe,CAACkJ,KAAD,CAAf;AACAnC,IAAAA,UAAU,CAAC,MAAM;AACf,OAACmC,KAAD,GACAG,aAAa,CACX1B,QAAQ,CAACkB,MADE,EAEXlB,QAAQ,CAACqB,SAAT,CAAmBf,MAAnB,CAA2BF,IAAD,IAAU;AAClC,eAAOA,IAAI,CAACuB,IAAL,KAAc,KAArB;AACD,OAFD,EAEG,CAFH,EAEMH,OAJK,EAKVI,OAAD,IAAa;AACX;AACA7J,QAAAA,cAAc,CAAC6J,OAAD,CAAd;AACD,OARU,CADb,GAUI,IAVJ;AAWD,KAZS,EAYP,CAZO,CAAV;AAaD,GAlCD;;AAoCA,QAAMC,cAAc,GAAG,OAAOL,OAAP,EAAgBrD,EAAhB,KAAuB;AAC5C,UAAMsC,QAAQ,GAAG,MAAMd,KAAK,CAAC/J,UAAU,GAAG,eAAb,GAA+B4L,OAAhC,EAAyC;AACnE5B,MAAAA,MAAM,EAAE,KAD2D;AAEnEC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,OAAO,EAAE;AAFF;AAF0D,KAAzC,CAA5B;AAOA,UAAME,QAAQ,GAAG,MAAMS,QAAQ,CAACR,IAAT,EAAvB,CAR4C,CAS5C;;AACA1H,IAAAA,kBAAkB,CAACuJ,MAAM,CAACxJ,eAAD,CAAN,GAA0BwJ,MAAM,CAAC9B,QAAQ,CAACgB,UAAV,CAAjC,CAAlB,CAV4C,CAW5C;;AACA,WAAO7C,EAAE,CAAC6B,QAAQ,CAACkB,MAAV,CAAT;AACD,GAbD;;AAeA,QAAMa,aAAa,GAAG,OAAOb,MAAP,EAAeM,OAAf,EAAwBrD,EAAxB,KAA+B;AACnD,UAAMsC,QAAQ,GAAG,MAAMd,KAAK,CAAC/J,UAAU,GAAG,eAAb,GAA+B4L,OAAhC,EAAyC;AACnE5B,MAAAA,MAAM,EAAE,KAD2D;AAEnEC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,OAAO,EAAE;AAFF;AAF0D,KAAzC,CAA5B;AAOA,UAAME,QAAQ,GAAG,MAAMS,QAAQ,CAACR,IAAT,EAAvB,CARmD,CASnD;;AACA,WAAO9B,EAAE,CAAC+C,MAAM,CAACD,MAAP,CAAcjB,QAAQ,CAACkB,MAAvB,CAAD,CAAT;AACD,GAXD;;AAaA,QAAMQ,aAAa,GAAG,OAAOR,MAAP,EAAeM,OAAf,EAAwBrD,EAAxB,KAA+B;AACnD;AACA,UAAMsC,QAAQ,GAAG,MAAMd,KAAK,CAAC/J,UAAU,GAAG,WAAb,GAA2B4L,OAA5B,EAAqC;AAC/D5B,MAAAA,MAAM,EAAE,KADuD;AAE/DC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,OAAO,EAAE;AAFF;AAFsD,KAArC,CAA5B;AAOA,UAAME,QAAQ,GAAG,MAAMS,QAAQ,CAACR,IAAT,EAAvB;;AACA,QAAID,QAAQ,CAACnC,MAAT,GAAkB,CAAtB,EAAyB;AACvB;AACA,aAAOM,EAAE,CAAC+C,MAAM,CAACD,MAAP,CAAcjB,QAAd,CAAD,CAAT;AACD,KAHD,MAGO;AACL,aAAO7B,EAAE,CAAC+C,MAAD,CAAT;AACD;AACF,GAhBD;;AAkBA,QAAMN,SAAS,GAAIoB,KAAD,IAAW;AAC3BC,IAAAA,YAAY,CAACC,OAAb,CAAqB1L,OAAO,GAAG,GAAV,GAAgBC,OAAhB,GAA0B,GAA1B,GAAgCQ,OAAhC,GAA0C,QAA/D,EAAyEkL,IAAI,CAACC,SAAL,CAAeJ,KAAf,CAAzE,EAD2B,CACqE;AACjG,GAFD;;AAIA,QAAMxB,SAAS,GAAG,MAAM;AACtB,QAAIwB,KAAK,GAAGG,IAAI,CAACE,KAAL,CAAWJ,YAAY,CAACK,OAAb,CAAqB9L,OAAO,GAAG,GAAV,GAAgBC,OAAhB,GAA0B,GAA1B,GAAgCQ,OAAhC,GAA0C,QAA/D,CAAX,CAAZ,CADsB,CAC2E;;AACjG,QAAI+K,KAAJ,EAAW;AACT/I,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAR;AACAyH,MAAAA,SAAS,CAACqB,KAAD,CAAT;AACA5H,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GAPD;;AASA,QAAMmI,0BAA0B,GAAG,MAAM;AACvCN,IAAAA,YAAY,CAACC,OAAb,CAAqB1L,OAAO,GAAG,GAAV,GAAgBC,OAAhB,GAA0B,GAA1B,GAAgCQ,OAAhC,GAA0C,eAA/D,EAAgFoE,gBAAhF,EADuC,CAC2D;AACnG,GAFD;;AAIA,QAAMmH,4BAA4B,GAAG,MAAM;AACzC,QAAIC,QAAQ,GAAGR,YAAY,CAACK,OAAb,CAAqB9L,OAAO,GAAG,GAAV,GAAgBC,OAAhB,GAA0B,GAA1B,GAAgCQ,OAAhC,GAA0C,eAA/D,CAAf;AACAwL,IAAAA,QAAQ,IAAItH,UAAZ,GAAyBpE,eAAe,CAAC0L,QAAD,CAAxC,GAAqD,IAArD,CAFyC,CAEiB;AAC3D,GAHD;;AAKA,QAAMC,OAAO,GAAG,OAAOvD,SAAP,EAAkBlI,OAAlB,EAA2BkH,EAA3B,KAAkC;AAChD,QAAIwE,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,SAAjB,EAA4BpM,OAAO,CAACsJ,QAAR,EAA5B;AACA4C,IAAAA,SAAS,CAACE,MAAV,CAAiB,SAAjB,EAA4B,YAA5B;AACAF,IAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AAEA,QAAIC,GAAG,GAAGX,IAAI,CAACC,SAAL,CAAe;AAAEjD,MAAAA,SAAS,EAAEA;AAAb,KAAf,CAAV;AACA,UAAMsB,QAAQ,GAAG,MAAMd,KAAK,CAAC/J,UAAU,GAAG,UAAb,GAA0BqB,OAA3B,EAAoC;AAC9D2I,MAAAA,MAAM,EAAE,MADsD;AAE9DC,MAAAA,OAAO,EAAE8C,SAFqD;AAG9DI,MAAAA,IAAI,EAAED,GAHwD;AAI9DE,MAAAA,QAAQ,EAAE;AAJoD,KAApC,CAA5B;AAMA,UAAMhD,QAAQ,GAAG,MAAMS,QAAQ,CAACR,IAAT,EAAvB,CAbgD,CAchD;;AACA,WAAO9B,EAAE,CAAC6B,QAAD,CAAT;AACD,GAhBD;;AAkBA,QAAMiD,iBAAiB,GAAG,YAAY;AACpC,QAAIC,KAAK,GAAG,KAAZ;;AACA,QAAI;AACF,UAAIC,KAAK,GAAI,MAAM7G,cAAc,CAAC8G,OAAf,CAAuBnM,OAAvB,CAAnB;AACA,UAAIkE,UAAU,GAAG,MAAMgB,eAAe,CAACkH,cAAhB,CAA+BpM,OAA/B,CAAvB;AACA,UAAIqM,UAAU,GAAG,MAAMhH,cAAc,CAACiH,gBAAf,CAAgC/M,OAAhC,EAAyCV,iBAAiB,CAACsG,YAAlB,CAA+B3F,OAA/B,CAAzC,CAAvB;AACAI,MAAAA,WAAW,CAACyM,UAAD,CAAX;AACAlI,MAAAA,aAAa,CAACD,UAAU,CAACoD,KAAX,KAAqB,4CAAtB,CAAb;AACAnF,MAAAA,OAAO,CAAC+J,KAAK,KAAK3M,OAAX,CAAP;AACAgM,MAAAA,4BAA4B;AAC5B5E,MAAAA,SAAS,CAAC3G,OAAD,CAAT;AACD,KATD,CASE,OAAMuM,GAAN,EAAU,CAAE;AAEf,GAbD;;AAeArO,EAAAA,SAAS,CAAC,MAAI,CACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GARQ,CAAT;;AAUA,QAAMsO,UAAU,GAAG,YAAY;AAC7B;AACA/M,IAAAA,OAAO,CACJgN,SADH,CACalN,OADb,EAEGmN,WAFH,CAEe,YAAY1M,OAF3B,EAGGsG,IAHH,CAGS4B,SAAD,IAAe;AACnBuD,MAAAA,OAAO,CAACvD,SAAD,EAAYlI,OAAZ,EAAsB2M,MAAD,IAAY;AACtC;AACAhK,QAAAA,WAAW,CAACgK,MAAM,CAACC,SAAP,CAAiBC,MAAlB,CAAX;AACAhK,QAAAA,aAAa,CACX8J,MAAM,CAACC,SAAP,CAAiBE,IAAjB,CAAsBzD,MAAtB,CAA8BtJ,GAAD,IAAS;AACpC,iBAAOA,GAAG,CAAC2K,IAAJ,KAAa,KAApB;AACD,SAFD,EAEG,CAFH,EAEMqC,OAHK,CAAb;AAKAhK,QAAAA,aAAa,CACX4J,MAAM,CAACC,SAAP,CAAiBE,IAAjB,CAAsBzD,MAAtB,CAA8BtJ,GAAD,IAAS;AACpC,iBAAOA,GAAG,CAAC2K,IAAJ,KAAa,KAApB;AACD,SAFD,EAEG,CAFH,EAEMqC,OAHK,CAAb;AAKA9J,QAAAA,YAAY,CAAC0J,MAAM,CAACC,SAAP,CAAiB3C,MAAlB,CAAZ;AACAlE,QAAAA,eAAe;AAChB,OAfM,CAAP;AAgBD,KApBH;AAqBD,GAvBD;;AAyBA,QAAMiH,WAAW,GAAG,YAAY;AAC9B3H,IAAAA,cAAc,CAACmC,YAAf,CAA4BjI,OAA5B,EAAqCX,YAArC,EAAmDoB,OAAnD,EAA4DsG,IAA5D,CAAiE,CAAC;AAAE7E,MAAAA;AAAF,KAAD,KAAgC;AAC/FY,MAAAA,WAAW,CAAC,IAAD,CAAX;AACA8F,MAAAA,UAAU,CAAC,MAAM;AACfzG,QAAAA,OAAO,CAACD,IAAD,CAAP;AACD,OAFS,EAEP,GAFO,CAAV,CAF+F,CAIvF;AACT,KALD;AAMD,GAPD;;AASA,QAAMwL,kBAAkB,GAAG,YAAY;AACrC,QAAI3J,sBAAJ,EAA4B;AAC1B;AACD;;AACDC,IAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACA,QAAI2J,UAAU,GAAG,4BAAjB,CALqC,CAKS;;AAC9C,QAAIC,IAAI,GAAG,YAAX,CANqC,CAMb;;AACxB,QAAIC,KAAK,GAAG,CAAZ,CAPqC,CAOvB;;AACd,QAAIC,SAAS,GAAG,CAAhB,CARqC,CAQnB;;AAElB,QAAIC,IAAI,GAAGH,IAAI,CAACvG,MAAhB;AACA,QAAI2G,EAAE,GAAG,CAAT;AACA,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,KAAK,GAAG,EAAZ;;AACC,KAAC,SAASC,MAAT,CAAgBC,CAAhB,EAAmB;AACnBzF,MAAAA,UAAU,CAAC,YAAY;AACrB,YAAI,EAAEyF,CAAN,EAAS;AACPD,UAAAA,MAAM,CAACC,CAAD,CAAN;AACD,SAFD,MAEO;AACLrK,UAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACD;;AACDsK,QAAAA,SAAS,CAACD,CAAD,CAAT;AACAL,QAAAA,EAAE,GAAGA,EAAE,GAAG,CAAV;AACD,OARS,EAQPH,KARO,CAAV;AASD,KAVA,EAUEE,IAAI,GAAGD,SAAP,GAAmB,CAVrB;;AAWD,aAASQ,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,WAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,GAAGE,IAA3B,EAAiCI,CAAC,EAAlC,EAAsC;AACpC;AACA,YAAIG,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWf,UAAU,CAACtG,MAAX,GAAoBoH,IAAI,CAACE,MAAL,EAA/B,CAAV,CAFoC,CAGpC;;AACA,YAAIC,MAAM,GAAGjB,UAAU,CAACkB,MAAX,CAAkBL,GAAlB,CAAb;AACAN,QAAAA,KAAK,GAAGA,KAAK,GAAGU,MAAhB;AACD;;AACD,UAAIZ,EAAE,IAAIF,SAAS,GAAG,CAAtB,EAAyB;AACvBG,QAAAA,IAAI;AACL;;AACD,UAAID,EAAE,IAAIF,SAAV,EAAqB;AACnB;AACA;AACAK,QAAAA,KAAK,GAAGA,KAAK,GAAGP,IAAI,CAACiB,MAAL,CAAYZ,IAAI,GAAG,CAAnB,CAAhB;AACAD,QAAAA,EAAE,GAAG,CAAL;AACD,OAhBqB,CAiBtB;;;AACAlK,MAAAA,kBAAkB,CAACqK,KAAK,GAAGD,KAAT,CAAlB;AACAA,MAAAA,KAAK,GAAG,EAAR;AACD;AACF,GA/CD;;AAiDAvP,EAAAA,SAAS,CAAC,MAAM;AACdoL,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAIApL,EAAAA,SAAS,CAAC,MAAM;AACd;AACAqB,IAAAA,OAAO,IAAIC,OAAX,IAAsB+B,YAAtB,IAAsC/B,OAAO,IAAI+B,YAAjD,GAAgEyK,iBAAiB,EAAjF,GAAsF,IAAtF,CAFc,CAGd;AACD,GAJQ,CAAT;;AAMA,WAASqC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,QAAIC,IAAI,GAAGD,KAAK,CAACE,KAAN,CAAY,UAAZ,CAAX;AACA,WAAOD,IAAI,CAAC,CAAD,CAAJ,CAAQE,IAAR,EAAP;AACD;;AAED,WAASC,UAAT,CAAoB3O,GAApB,EAAyB;AACvB,QAAIyD,eAAJ,EAAqB;AACnBzD,MAAAA,GAAG,GAAGyD,eAAN;AACD;;AACDyJ,IAAAA,kBAAkB;AAClB,QAAI0B,UAAU,GAAG1N,cAAc,CAAC,CAAD,CAAd,CAAkBsJ,OAAlB,CAA0BqE,OAA1B,CAAkC,UAAlC,EAA8C,EAA9C,CAAjB;;AACA,QAAI;AACF,UAAIC,KAAK,GAAG7P,QAAQ,CAAC8P,GAAT,CAAaC,OAAb,CAAqBJ,UAArB,EAAiC5O,GAAjC,CAAZ;AACAmL,MAAAA,IAAI,CAACE,KAAL,CAAWyD,KAAK,CAAC/F,QAAN,CAAe9J,QAAQ,CAACgQ,GAAT,CAAaC,IAA5B,CAAX;AACA7N,MAAAA,eAAe,CAAC,KAAD,CAAf;AACAqC,MAAAA,kBAAkB,CAAC1D,GAAD,CAAlB;AACAmB,MAAAA,iBAAiB,CAACgO,gBAAgB,CAACnP,GAAD,CAAjB,CAAjB;AACA6K,MAAAA,cAAc,CACZ3J,cAAc,CAACoI,MAAf,CAAuBF,IAAD,IAAU;AAC9B,eAAOA,IAAI,CAACuB,IAAL,KAAc,KAArB;AACD,OAFD,EAEG,CAFH,EAEMH,OAHM,EAIXN,MAAD,IAAY;AACVa,QAAAA,aAAa,CACXb,MADW,EAEXhJ,cAAc,CAACoI,MAAf,CAAuBF,IAAD,IAAU;AAC9B,iBAAOA,IAAI,CAACuB,IAAL,KAAc,KAArB;AACD,SAFD,EAEG,CAFH,EAEMH,OAJK,EAKVI,OAAD,IAAa;AACX;AACAF,UAAAA,aAAa,CACXE,OADW,EAEX1J,cAAc,CAACoI,MAAf,CAAuBF,IAAD,IAAU;AAC9B,mBAAOA,IAAI,CAACuB,IAAL,KAAc,KAArB;AACD,WAFD,EAEG,CAFH,EAEMH,OAJK,EAKV4E,QAAD,IAAc;AACZrO,YAAAA,cAAc,CAACqO,QAAQ,CAACnF,MAAT,CAAgBnJ,WAAhB,CAAD,CAAd;AACD,WAPU,CAAb;AASD,SAhBU,CAAb;AAkBD,OAvBW,CAAd;AAyBD,KA/BD,CA+BE,OAAO0L,GAAP,EAAY,CAAE;AACjB;;AAED,WAAS2C,gBAAT,CAA0BnP,GAA1B,EAA+B;AAC7BkB,IAAAA,cAAc,CAACiI,OAAf,CAAwBC,IAAD,IAAU;AAC/B,UAAIiG,UAAU,GAAGjG,IAAI,CAACoB,OAAL,CAAaqE,OAAb,CAAqB,UAArB,EAAiC,EAAjC,CAAjB;AACAzF,MAAAA,IAAI,CAACoB,OAAL,GAAewE,OAAO,CAACK,UAAD,EAAarP,GAAb,CAAtB;AACD,KAHD;AAIA,WAAOkB,cAAP;AACD;;AAED,WAAS8N,OAAT,CAAiBK,UAAjB,EAA6BrP,GAA7B,EAAkC;AAChC,QAAI8O,KAAK,GAAG7P,QAAQ,CAAC8P,GAAT,CAAaC,OAAb,CAAqBK,UAArB,EAAiCrP,GAAjC,CAAZ;AACA,QAAIsP,aAAa,GAAGnE,IAAI,CAACE,KAAL,CAAWyD,KAAK,CAAC/F,QAAN,CAAe9J,QAAQ,CAACgQ,GAAT,CAAaC,IAA5B,CAAX,CAApB;AACA,WAAOI,aAAP;AACD;;AAED,SACE,4BACG,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAM,IAAA,IAAI,EAAC,cAAX;AAA0B,IAAA,OAAO,EAAC,qBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAEC;AAAM,IAAA,IAAI,EAAC,cAAX;AAA0B,IAAA,OAAO,EAAC,gBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,EAGC;AAAM,IAAA,IAAI,EAAC,eAAX;AAA2B,IAAA,OAAO,EAAE9O,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHD,EAIC;AAAM,IAAA,IAAI,EAAC,qBAAX;AAAiC,IAAA,OAAO,EAAE8N,gBAAgB,CAAC5N,SAAD,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJD,EAKC;AAAM,IAAA,IAAI,EAAC,eAAX;AAA2B,IAAA,OAAO,EAAEE,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALD,CADH,EAQE,MAAC,SAAD;AAAW,IAAA,MAAM,EAAE8E,eAAnB;AAAoC,IAAA,OAAO,EAAEI,gBAA7C;AAA+D,IAAA,QAAQ,EAAElE,QAAzE;AAAmF,IAAA,QAAQ,EAAEE,QAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EAUE,MAAC,SAAD;AACE,IAAA,MAAM,EAAEiE,eADV;AAEE,IAAA,OAAO,EAAEE,gBAFX;AAGE,IAAA,QAAQ,EAAEtD,QAHZ;AAIE,IAAA,UAAU,EAAEE,UAJd;AAKE,IAAA,UAAU,EAAEE,UALd;AAME,IAAA,UAAU,EAAEE,UANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,EAmBE,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAEjB,KAAK,CAACE,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGiB,UAAU,GAAG,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAoB,EADjC,EAEG,CAACQ,YAAD,GACC,MAAC,IAAD;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAuB,IAAA,OAAO,EAAE;AAAE4L,MAAAA,GAAG,EAAEnP,YAAY,GAAG,CAAH,GAAO,CAA1B;AAA6BoP,MAAAA,KAAK,EAAE;AAApC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAC,QAAzB;AAAkC,IAAA,cAAc,EAAC,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AACE,IAAA,IAAI,EAAC,IADP;AAEE,IAAA,WAAW,EAAC,KAFd;AAGE,IAAA,WAAW,EAAEhO,YAAY,IAAI/B,OAAhB,GAA0B,YAA1B,GAAyC8C,MAAM,IAAI,SAAV,GAAsB,WAAtB,GAAoC,IAH5F;AAIE,IAAA,OAAO,EAAC,IAJV;AAKE,IAAA,QAAQ,EAAC,QALX;AAME,IAAA,UAAU,EAAC,QANb;AAOE,IAAA,IAAI,EAAE,GAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGf,YAAY,IAAI/B,OAAhB,GACC,MAAC,GAAD;AACE,IAAA,EAAE,EAAC,GADL;AAEE,IAAA,UAAU,EAAC,UAFb;AAGE,IAAA,EAAE,EAAC,IAHL;AAIE,IAAA,UAAU,EAAC,OAJb;AAKE,IAAA,CAAC,EAAE,CALL;AAME,IAAA,SAAS,EAAC,QANZ;AAOE,IAAA,aAAa,EAAC,WAPhB;AAQE,IAAA,UAAU,EAAC,QARb;AASE,IAAA,KAAK,EAAC,YATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DADD,GAcG,IAvBN,EAwBE,MAAC,GAAD;AACE,IAAA,EAAE,EAAC,GADL;AAEE,IAAA,UAAU,EAAC,UAFb;AAGE,IAAA,EAAE,EAAC,IAHL;AAIE,IAAA,UAAU,EAAC,OAJb;AAKE,IAAA,CAAC,EAAE,CALL;AAME,IAAA,SAAS,EAAC,QANZ;AAOE,IAAA,aAAa,EAAC,WAPhB;AAQE,IAAA,UAAU,EAAC,QARb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGe,SAVH,EAWG,CAACY,YAAD,GAAgB,SAASE,eAAzB,GAA2C,IAX9C,CAxBF,EAqCE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,GAAG,EAAE5C,UAAU,CAACkC,UAAD,CAAV,GAAyBA,UAAzB,GAAsC,mDAD7C;AAEE,IAAA,KAAK,EAAC,OAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CArCF,EA2CE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAC,GAAR;AAAY,IAAA,EAAE,EAAC,GAAf;AAAmB,IAAA,UAAU,EAAC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,EAAE,EAAE,CAAV;AAAa,IAAA,EAAE,EAAC,IAAhB;AAAqB,IAAA,EAAE,EAAC,GAAxB;AAA4B,IAAA,EAAE,EAAC,GAA/B;AAAmC,IAAA,QAAQ,EAAC,IAA5C;AAAiD,IAAA,SAAS,EAAC,QAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,aAAD;AAAe,IAAA,OAAO,EAAE,CAACxB,GAAD,CAAxB;AAA+B,IAAA,QAAQ,EAAEkP,gBAAgB,CAAC5N,SAAD,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADF,CADF,CA3CF,EAkDE,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,KAAK,EAAC,UAAX;AAAsB,IAAA,aAAa,EAAC,MAApC;AAA2C,IAAA,QAAQ,EAAC,IAApD;AAAyD,IAAA,EAAE,EAAC,GAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,EAAE,EAAC,IAAT;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAIGU,YAAY,GACX,4BACE,MAAC,IAAD;AAAM,IAAA,EAAE,EAAE,CAAV;AAAa,IAAA,KAAK,EAAEiC,eAAe,GAAG,WAAH,GAAiB,IAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,eAAe,GAAGA,eAAH,GAAqB,4CADvC,CADF,EAIE,MAAC,KAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,EAAE,EAAC,gBAFL;AAGE,IAAA,QAAQ,EAAGoM,CAAD,IAAOd,UAAU,CAACc,CAAC,CAACC,MAAF,CAASC,KAAV,CAH7B;AAIE,wBAAiB,sBAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADW,GAYT7O,WAAW,CAAC+F,MAAZ,GACF/F,WAAW,CAAC8O,GAAZ,CAAiBjF,IAAD,IAAU;AACxB,WACE,MAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAI,CAACjB,IAAhB;AAAsB,MAAA,WAAW,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEGiB,IAAI,CAACH,OAAL,IAAgBG,IAAI,CAACkF,IAAL,KAAc,KAA9B,GACC,MAAC,OAAD;AAAS,oBAAYlF,IAAI,CAACjB,IAA1B;AAAgC,MAAA,QAAQ,MAAxC;AAAyC,MAAA,KAAK,EAAE,SAASiB,IAAI,CAACmF,MAAd,GAAuB,YAAvE;AAAqF,MAAA,SAAS,EAAC,KAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,OAAO,EAAE,MAAI;AAAC5Q,QAAAA,gBAAgB,CAAC;AAACsL,UAAAA,OAAO,EAACG,IAAI,CAACH,OAAd;AAAuBsF,UAAAA,MAAM,EAACnF,IAAI,CAACmF,MAAnC;AAA2CC,UAAAA,QAAQ,EAACpF,IAAI,CAACoF,QAAzD;AAAmEjG,UAAAA,KAAK,EAAEa,IAAI,CAACb,KAAL,GAAYa,IAAI,CAACb,KAAjB,GAAyB;AAAnG,SAAD,CAAhB;AAA4H,OAAhJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,CADD,GAOG,IATN,EAUG,GAVH,EAUQa,IAAI,CAACA,IAAL,CAAUqF,WAAV,EAVR,EAUiC,GAVjC,OAUuCrF,IAAI,CAACjB,IAV5C,QAUoD,GAVpD,EAWGiB,IAAI,CAACsF,OAAL,GACCtF,IAAI,CAACsF,OADN,GAEGtF,IAAI,CAACkF,IAAL,IAAa,KAAb,GACF,MAAC,IAAD;AAAM,MAAA,IAAI,EAAElF,IAAI,CAACuF,YAAjB;AAA+B,MAAA,UAAU,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADE,GAIA,IAjBN,CADF;AAqBD,GAtBD,CADE,GAwBA,IAxCN,EAyCIlP,eAAe,CAAC6F,MAAhB,GACA7F,eAAe,CAAC4O,GAAhB,CAAqBO,IAAD,IAAU;AAC5B,WACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAaA,IAAI,CAACC,aAAlB,CADF;AAGD,GAJD,CADA,GAME,CAACpP,eAAe,CAAC6F,MAAjB,IAA2B,CAAC/F,WAAW,CAAC+F,MAAxC,GACF,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADE,GAEA,IAjDN,CADF,CADF,EAsDG,CAACzF,YAAD,GACC,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAoC,IAAA,cAAc,EAAC,eAAnD;AAAmE,IAAA,EAAE,EAAC,GAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAa,IAAA,cAAc,EAAC,eAA5B;AAA4C,IAAA,OAAO,EAAE,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,cAAc,CAAC0O,GAAf,CAAoBS,IAAD,IAAU;AAC5B,WACE,MAAC,MAAD;AACE,MAAA,GAAG,EAAEA,IAAI,CAAC7F,OADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACb3I,QAAAA,WAAW,CAACwO,IAAI,CAAC1F,IAAN,CAAX;AACA5I,QAAAA,WAAW,CAACsO,IAAI,CAAC7F,OAAN,CAAX;AACA5E,QAAAA,eAAe;AAChB,OANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAQOyK,IAAI,CAAC1F,IAAL,IAAa,KAAb,GAAqB0F,IAAI,CAAC1F,IAAL,GAAY,QAAjC,GAA4C0F,IAAI,CAAC1F,IARxD,QADF;AAYD,GAbA,CADH,CADF,CADD,GAmBG,IAzEN,EA2EG,EAAEpI,MAAM,KAAK,SAAb,MAA4Bf,YAAY,KAAK,CAAjB,IAAsBA,YAAY,KAAK,CAAnE,IACC,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAoC,IAAA,cAAc,EAAC,eAAnD;AAAmE,IAAA,EAAE,EAAC,GAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,KAAK,EAAC,MADR;AAEE,IAAA,EAAE,EAAC;AAFL,KAGM;AACF8O,IAAAA,IAAI,EACF,cACC9O,YAAY,IAAI,CAAhB,GAAoB,UAApB,GAAiC,EADlC,IAEA,oBAFA,GAGA1C,iBAAiB,CAACyG,WAAlB,CAA8B/D,YAA9B,CAHA,GAIA,GAJA,GAKAvB,OAPA;AAQFyP,IAAAA,MAAM,EAAE,QARN;AASFa,IAAAA,GAAG,EAAE;AATH,GAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAeGpO,IAAI,GAAG,gBAAH,GAAsB,yBAf7B,CADF,CADD,GAoBG,IA/FN,EAgGG,EAAEI,MAAM,KAAK,SAAb,KAA2BJ,IAA3B,IAAmC,CAACgC,UAApC,GACC,4BACC,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAoC,IAAA,cAAc,EAAC,eAAnD;AAAmE,IAAA,EAAE,EAAC,GAAtE;AAA0E,IAAA,KAAK,EAAC,MAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,QAAjB;AAA0B,IAAA,KAAK,EAAC,QAAhC;AAAyC,IAAA,KAAK,EAAC,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,MAAd;AAAqB,IAAA,OAAO,EAAE+B,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE,MAAC,QAAD;AAAU,IAAA,MAAM,EAAET,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAoC,IAAA,cAAc,EAAC,eAAnD;AAAmE,IAAA,EAAE,EAAC,GAAtE;AAA0E,IAAA,KAAK,EAAC,MAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,SAAD;AAAW,IAAA,OAAO,EAAC,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADA,EAEE,MAAC,KAAD;AACE,IAAA,EAAE,EAAE,CADN;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,EAAE,EAAC,iBAHL;AAIE,IAAA,KAAK,EAAEd,iBAAiB,IAAI,EAJ9B;AAKE,IAAA,QAAQ,EAAG8K,CAAD,IAAO;AACf5H,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B2H,CAAC,CAACC,MAAF,CAASC,KAApC;AACA/K,MAAAA,oBAAoB,CAAC6K,CAAC,CAACC,MAAF,CAASC,KAAV,CAApB;AACD,KARH;AASE,IAAA,YAAY,EAAC,KATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAeE,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAoC,IAAA,cAAc,EAAC,eAAnD;AAAmE,IAAA,EAAE,EAAC,GAAtE;AAA0E,IAAA,KAAK,EAAC,MAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,UAAU,EAAE,CAAClR,YAAY,CAACkG,iBAAD,CAAjC;AAAsD,IAAA,OAAO,EAAE,MAAI;AACjEuB,MAAAA,QAAQ;AACRsB,MAAAA,aAAa;AACd,KAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CAfF,CAFF,CADH,CADD,CADD,GA8BC,IA9HJ,EA+HGrF,IAAI,IAAI,CAACgC,UAAT,GAAuB,4BACtB,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAoC,IAAA,cAAc,EAAC,eAAnD;AAAmE,IAAA,EAAE,EAAC,GAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,MAAd;AAAqB,IAAA,OAAO,EAAE,MAAM;AAClC,UAAI,CAACvE,QAAL,EAAe;AACb,eAAO2I,mBAAmB,EAA1B;AACD,OAFD,MAEO;AACL,YAAIvI,GAAG,GAAGf,QAAQ,CAACuR,GAAT,CAAaC,SAAb,CAAuBtC,MAAvB,CAA8B,MAAI,CAAlC,EAAqCpF,QAArC,EAAV;AACA,YAAI2H,GAAG,GAAGzR,QAAQ,CAAC0R,MAAT,CAAgB3Q,GAAhB,EAAqB+I,QAArB,EAAV;AACAlB,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB9H,GAArB;AACA6H,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmB4I,GAAnB;AACApM,QAAAA,mBAAmB,CAACtE,GAAD,CAAnB;AACAqG,QAAAA,aAAa,GAAGqK,GAAhB;AACAtI,QAAAA,UAAU,CAAC,MAAI;AACbE,UAAAA,cAAc;AACf,SAFS,EAEP,GAFO,CAAV;AAGD;AACF,KAdD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAeE1I,QAAQ,GAAG,gCAAH,GAAsC,iBAfhD,MADF,CADsB,CAAvB,GAmBM,IAlJT,EAmJG,CAAC2E,oBAAoB,IAAIzE,YAAzB,KAA0CqE,UAA1C,GACG,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEyM,QAAQ,CAACC,QAAT,GAAmB,IAAnB,GAAyBD,QAAQ,CAACE,IAAlC,GAAyC,UAAzC,GAAsD7Q,OAAtD,GAAgE,OAAhE,IAA2EoE,gBAAgB,IAAIvE,YAA/F,CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAkBuE,gBAAgB,IAAIvE,YAAtC,CAFF,CADH,GAKO,IAxJV,EAyJGqE,UAAU,IAAI1B,SAAS,KAAKjD,OAA5B,GACD,4BACI,MAAC,MAAD;AAAQ,IAAA,EAAE,EAAE,CAAZ;AAAe,IAAA,KAAK,EAAC,MAArB;AAA4B,IAAA,OAAO,EAAE,MAAI;AAACoI,MAAAA,YAAY;AAAG,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI,MAAC,KAAD;AACE,IAAA,EAAE,EAAE,CADN;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,EAAE,EAAC,cAHL;AAIE,IAAA,SAAS,EAAE,CAJb;AAKE,IAAA,SAAS,EAAE,GALb;AAME,IAAA,KAAK,EAAE9H,YAAY,IAAI,EANzB;AAOE,IAAA,QAAQ,EAAG2P,CAAD,IAAO;AACf5H,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB2H,CAAC,CAACC,MAAF,CAASC,KAA7B,EAAoC7P,YAApC;AACAC,MAAAA,eAAe,CAAC0P,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AAAgC,KATpC;AAWE,IAAA,YAAY,EAAC,KAXf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADC,GAiBK,IA1KR,EA4KG,EAAEpN,MAAM,KAAK,SAAb,KAA2B/C,OAA3B,IAAsCgC,YAAY,KAAK/B,OAAvD,IAAkE0C,IAAlE,GACC,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAoC,IAAA,cAAc,EAAC,eAAnD;AAAmE,IAAA,EAAE,EAAC,GAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,KAAK,EAAC,MADR;AAEE,IAAA,OAAO,EAAE,MAAM;AACb8K,MAAAA,WAAW;AACZ,KAJH;AAKE,IAAA,UAAU,EAAE5K,QALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGA,QAAQ,GAAG,cAAH,GAAoB,0BAP/B,CADF,CADD,GAYGE,MAAM,KAAK,SAAX,IAAwBE,SAAS,KAAKjD,OAAtC,IAAiDgC,YAAY,KAAK/B,OAAlE,GACF,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAoC,IAAA,cAAc,EAAC,eAAnD;AAAmE,IAAA,EAAE,EAAC,GAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,MAAd;AAAqB,IAAA,OAAO,EAAEgN,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CADE,GAMA,IA9LN,EA+LGlK,MAAM,KAAK,SAAX,GACC,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAoC,IAAA,cAAc,EAAC,eAAnD;AAAmE,IAAA,EAAE,EAAC,GAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,QAAjB;AAA0B,IAAA,KAAK,EAAC,QAAhC;AAAyC,IAAA,KAAK,EAAC,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,MAAd;AAAqB,IAAA,OAAO,EAAE6D,cAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACWrB,MAAM,CAAC8B,MADlB,CADF,EAIE,MAAC,QAAD;AAAU,IAAA,MAAM,EAAEV,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGpB,MAAM,CAAC6K,GAAP,CAAW,CAACxI,KAAD,EAAQX,KAAR,KAAgB;AAC1B,WACE,MAAC,GAAD;AAAK,MAAA,CAAC,EAAC,MAAP;AAAc,MAAA,UAAU,EAAC,UAAzB;AAAoC,MAAA,cAAc,EAAC,eAAnD;AAAmE,MAAA,EAAE,EAAC,GAAtE;AAA0E,MAAA,GAAG,EAAEW,KAAK,CAACnH,OAAN,GAAgB,GAAhB,GAAsBwG,KAAtB,GAA8B,MAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,GAAG,EAAEW,KAAK,CAACnH,OAAN,GAAgB,GAAhB,GAAsBwG,KAAtB,GAA8B,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoDW,KAAK,CAACnH,OAA1D,CADF,EAEE,MAAC,MAAD;AAAQ,MAAA,GAAG,EAAEmH,KAAK,CAACnH,OAAN,GAAgB,GAAhB,GAAsBwG,KAAtB,GAA8B,SAA3C;AAAsD,MAAA,CAAC,EAAC,GAAxD;AAA4D,MAAA,OAAO,EAAE,MAAM;AAACD,QAAAA,WAAW,CAACY,KAAK,CAACX,KAAP,CAAX;AAAyB,OAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGE,MAAC,MAAD;AAAQ,MAAA,GAAG,EAAEW,KAAK,CAACnH,OAAN,GAAgB,GAAhB,GAAsBwG,KAAtB,GAA8B,SAA3C;AAAsD,MAAA,CAAC,EAAC,GAAxD;AAA4D,MAAA,OAAO,EAAE,MAAM;AAACC,QAAAA,WAAW,CAACU,KAAK,CAACX,KAAP,CAAX;AAAyB,OAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,EAIGW,KAAK,CAACE,IAAN,IAAc9H,OAAd,GACC,MAAC,MAAD;AAAQ,MAAA,GAAG,EAAE4H,KAAK,CAACnH,OAAN,GAAgB,GAAhB,GAAsBwG,KAAtB,GAA8B,WAA3C;AAAwD,MAAA,CAAC,EAAC,GAA1D;AAA8D,MAAA,OAAO,EAAE,MAAM;AAACE,QAAAA,aAAa,CAACS,KAAK,CAACX,KAAP,CAAb;AAA2B,OAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,GAEG,IANN,CADF;AAUD,GAXA,CADH,EAaE,MAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAc,IAAA,UAAU,EAAC,UAAzB;AAAoC,IAAA,cAAc,EAAC,eAAnD;AAAmE,IAAA,EAAE,EAAC,GAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,MAAC,MAAD;AAAQ,IAAA,WAAW,EAAC,cAApB;AAAmC,IAAA,QAAQ,EAAGgJ,CAAD,IAAK;AAAEvK,MAAAA,WAAW,CAACuK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AAA6B,KAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCrP,MAAM,CAACuG,MAAP,GAAgB,CAAhB,GAAoBvG,MAAM,CAACsP,GAAP,CAAW,CAAC5E,KAAD,EAAQvE,KAAR,KAAgB;AAC5C,WACE;AAAQ,MAAA,GAAG,EAAE,WAASuE,KAAK,CAAC/K,OAAf,GAAuBwG,KAApC;AAA2C,MAAA,KAAK,EAAEuE,KAAK,CAAC/K,OAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmE+K,KAAK,CAACtB,IAAzE,CADF;AAGH,GAJoB,CAApB,GAIG,IALJ,CAFF,EASE,MAAC,MAAD;AAAQ,IAAA,CAAC,EAAC,GAAV;AAAc,IAAA,OAAO,EAAE,MAAI;AAAEpD,MAAAA,QAAQ;AAAI,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aATF,CAbF,CAJF,CADF,CADD,GAiCK,IAhOR,CAlDF,EAoRE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,QAAjB;AAA0B,IAAA,KAAK,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG/D,MAAM,IAAI,SAAV,GAAsB,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAtB,GAA+D,IADlE,CApRF,EAuRGb,IAAI,GACH,MAAC,KAAD;AAAO,IAAA,MAAM,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEIqC,SAAS,GAAG,2BAAH,GAAiC1B,QAAQ,GAAG,yBAAH,GAA+B4B,SAAS,GAAE,4BAAF,GAAiCY,WAAW,GAAE,uBAAF,GAA4B,0BAFtK,CADG,GAKD,IA5RN,CADF,CADF,CADD,GAoSC,MAAC,KAAD;AAAO,IAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,KAAK,EAAC,IADR;AAEE,IAAA,GAAG,EAAC,yHAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAC+C,GAD/C,EAEE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,SAAZ;AAAsB,IAAA,IAAI,EAAC,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF,CALF,CAtSJ,EAmTGnD,IAAI,GACH,MAAC,gBAAD;AACE,IAAA,IAAI,EAAEA,IADR;AAEE,IAAA,UAAU,EAAE,MAAM;AAChB;AACA,UAAIW,QAAQ,IAAI,CAAC0B,SAAb,IAA0B,CAACU,cAA/B,EAA+C;AAC7CoD,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAnG,QAAAA,OAAO,CAAC,IAAD,CAAP;AACAa,QAAAA,SAAS,CAAC,SAAD,CAAT;AACAF,QAAAA,WAAW,CAAC,KAAD,CAAX;AACAI,QAAAA,YAAY,CAAClD,OAAD,CAAZ;AACAiN,QAAAA,UAAU;AACX,OAPD,MAOO,IAAIhI,cAAJ,EAAoB;AACzB8G,QAAAA,0BAA0B;AAC1B/G,QAAAA,uBAAuB,CAAC,IAAD,CAAvB;AACAE,QAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACA/C,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OALM,MAKA,IAAGoC,SAAH,EAAc;AACnBC,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAuF,QAAAA,QAAQ;AACR5H,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAJM,MAIA,IAAGsC,SAAH,EAAc;AACnBC,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAqF,QAAAA,QAAQ;AACR5H,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAJM,MAIA,IAAGkD,WAAH,EAAgB;AACrBC,QAAAA,cAAc,CAAC,KAAD,CAAd;AACAyE,QAAAA,QAAQ;AACR5H,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAJM,MAIA;AACLkG,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBzF,QAAxB;AACAwF,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB/D,SAAzB;AACA8D,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BrD,cAA9B;AACAoD,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB7D,SAAzB;AACA4D,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAyB,QAAAA,QAAQ;AACR5H,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,KArCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,GAwCD,IA3VN,CAnBF,CADF;AAmXD","sourcesContent":["import {\n  Box,\n  Flex,\n  Image,\n  Text,\n  Stack,\n  Button,\n  ButtonGroup,\n  Input,\n  Link,\n  Alert,\n  AlertIcon,\n  useDisclosure,\n  Tooltip,\n  Collapse,\n  FormControl,\n  FormLabel,\n  Select\n} from '@chakra-ui/core'\n\nimport Head from \"next/head\"\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport Refreshing from './Refreshing'\nimport Loader from 'react-loader'\nimport dynamic from 'next/dynamic'\nimport { isETHAddress, validImage } from '../utils'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionToast } from './TransactionToast'\nimport { EMBLEM_API, BURN_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\nimport Tilt from 'react-tilt'\nimport CryptoJS from 'crypto-js'\nimport { addTokenToWallet, addMany } from '../public/web3'\nimport ReactMarkdown from 'react-markdown'\nimport gfm from 'remark-gfm'\nconst AddrModal = dynamic(() => import('./AddrModal'))\nconst KeysModal = dynamic(() => import('./KeysModal'))\n\nexport default function Nft() {\n  const { account, chainId, library } = useWeb3React()\n  const { query } = useRouter()\n  const [approved, setApproved] = useState(false)\n  const [mintPassword, setMintPassword] = useState(query.key)\n  const [tokenId, setTokenId] = useState(query.id)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [vaults, setVaults] = useState([])\n  const [vaultName, setVaultName] = useState('')\n  const [vaultDesc, setVaultDesc] = useState('')\n  const [vaultImage, setVaultImage] = useState('')\n  const [vaultValues, setVaultValues] = useState([])\n  const [vaultDataValues, setVaultDataValues] = useState([])\n  const [vaultAddresses, setVaultAddresses] = useState([])\n  const [vaultPrivacy, setVaultPrivacy] = useState(false)\n  const [vaultTotalValue, setVaultTotalValue] = useState(0)\n  const [vaultChainId, setVaultChainId] = useState(null)\n  const [hash, setHash] = useState(null)\n  const [currCoin, setCurrCoin] = useState('')\n  const [currAddr, setCurrAddr] = useState('')\n  const [state, setState] = useState({ loaded: false })\n  const [mine, setMine] = useState(false)\n  const [claiming, setClaiming] = useState(false)\n  const [status, setStatus] = useState('claimed')\n  const [claimedBy, setClaimedBy] = useState(null)\n  const [mnemonic, setMnemonic] = useState('')\n  const [privKeyBTC, setPrivKeyBTC] = useState('')\n  const [privKeyETH, setPrivKeyETH] = useState('')\n  const [privValues, setKeyValues] = useState([])\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [decryptedEffect, setDecryptedEffect] = useState('')\n  const [decryptedEffectRunning, setDecryptedEffectRunning] = useState(false)\n  const [decryptPassword, setDecryptPassword] = useState('')\n  const [invalidVault, setInvalidVault] = useState(false)\n  const [hasCheckedNft, setHasCheckedNft] = useState(false)\n  const [accepting, setAccepting] = useState(false)\n  const [approving, setApproving] = useState(false)\n  const [acceptable, setAcceptable] = useState(false)\n  const [transferPassword, setTransferPassword] = useState('')\n  const [showTransferPassword, setShowTransferPassword] = useState(false)\n  const [preTransfering, setPreTransfering] = useState(false)\n  const [transferToAddress, setTransferToAddress] = useState(null)\n  const [transfering, setTransfering] = useState(false)\n  const [offers, setOffers] = useState([])\n  const [offering, setOffering] = useState(null)\n  \n  // const [transferImage, setTransferImage] = useState('')\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n\n  const { isOpen: isOpenAddrModal, onOpen: onOpenAddrModal, onClose: onCloseAddrModal } = useDisclosure()\n  const { isOpen: isOpenKeysModal, onOpen: onOpenKeysModal, onClose: onCloseKeysModal } = useDisclosure()\n  const { isOpen, onToggle } = useDisclosure()\n  const { isOpen: isOffersOpen, onToggle: onOffersToggle } = useDisclosure()\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  let transferImage;\n\n  const addOffer = () =>{\n    ;(handlerContract as Contract)\n    .addOffer(offering, tokenId)\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const acceptOffer = (index) =>{\n    ;(handlerContract as Contract)\n    .acceptOffer(tokenId, index)\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const rejectOffer = (index) =>{\n    ;(handlerContract as Contract)\n    .rejectOffer(tokenId, index)\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const withdrawOffer = (index) =>{\n    ;(handlerContract as Contract)\n    .withdrawOffer(tokenId, index)\n      .then(({ hash }: { hash: string }) => {\n        setHash(hash)\n      })\n  }\n\n  const getOffers = async (tokenId) =>{\n    if (offers.length > 0) return\n    let _offers = []\n    let offerCount = parseInt(await handlerContract.getOfferCount(tokenId))\n    // console.log(\"Offer Count\", offerCount)\n    await getOffer(0, ()=>{\n      _offers.length > 0 ? setOffers(_offers): null\n      // console.log(\"Done getting offers\", _offers)\n    })\n    async function getOffer(index, cb) {\n      // console.log(\"Getting offer index\", index)\n      let offer = await handlerContract.getOffer(tokenId, index)\n      if (parseInt(offer.tokenId) !== 0) {\n        _offers.push({index: index, tokenId: parseInt(offer.tokenId), from: offer._from})\n      }\n      \n      if (index + 1 === offerCount) {\n        return cb()\n      } else {\n        return getOffer(index +1, cb)\n      }\n    }\n  }\n\n  const transferVault = () => {\n    setTransfering(true)\n    ;(emblemContract as Contract).transferFrom(account, transferToAddress, tokenId)\n    .then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n    .catch((error: ErrorWithCode) => {})\n  }\n\n  const fireMetaMask = () => {\n    console.log(mintPassword)\n    setAccepting(true)\n    getWitness(witness=>{\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;(handlerContract as Contract)\n      .transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        setAccepting(false)\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          // setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n    })\n    \n  }\n\n  const addPreTransfer = () => {\n    console.log('transferImage', \"0x\"+transferImage)\n    setPreTransfering(true)\n    ;(handlerContract as Contract)\n      .addPreTransfer(tokenId, \"0x\"+transferImage)\n      .then(({ hash }: { hash: string }) => {\n        // setTimeout(() => {\n          setHash(hash)\n          console.log(\"Set Pre Transfering True\", preTransfering)\n          // setShowMakingVaultMsg(true)\n        // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code){   \n            console.log(\"Error?\")       \n            setPreTransfering(false)\n            setShowTransferPassword(false)\n            setTransferPassword('')\n        } else {\n          // setShowTransferPassword(!showTransferPassword? true : false)\n          // setPreTransfering(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  const handleApproveForall = () => {\n    setApproving(true)\n    ;(emblemContract as Contract)\n      .setApprovalForAll(contractAddresses.vaultHandler[chainId], true)\n      .then(({ hash }: { hash: string }) => {\n        setTimeout(() => {\n          setHash(hash)          \n          // setShowMakingVaultMsg(true)\n        }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })\n      .catch((error: ErrorWithCode) => {\n        if (error?.code !== 4001) {\n          console.log(`tx failed.`, error)\n        } else {\n          setApproving(false)\n          // setShowPreVaultMsg(false)\n        }\n      })\n  }\n\n  // \n\n  const getVaults = async () => {    \n    try {\n      const response = await fetch(EMBLEM_API + '/vaults/list/' + (account) + (experimental? '?experimental=true' : ''), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString(),\n        },\n      })\n      const jsonData = await response.json()\n      let _vaults = []\n      jsonData.forEach((item)=>{\n        let found = offers.filter(offer=>{return offer.tokenId === item.tokenId}).length > 0\n        if (!found) {\n          _vaults.push(item)\n        }\n        console.log(\"Item\", item, found)\n      })\n      setState({ loaded: true })\n      setVaults(_vaults)\n      setLoadingApi(false)\n      // console.log(\"Vaults\", _vaults)\n    } catch (error) {}\n  }\n\n  const getVault = async () => {\n    loadCache()\n    const responce = await fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    getVaults()\n    // console.log('vault response was ', jsonData)\n    if (!jsonData.name) {\n      setState({ loaded: true })\n      setInvalidVault(true)\n    } else {\n      setStates(jsonData)\n      saveCache(jsonData)\n      setLoadingApi(false)\n      setInvalidVault(false)\n      \n    }\n  }\n\n  const getWitness = async (cb) => {\n    \n    const responce = await fetch(EMBLEM_API + '/witness/' + tokenId, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log('vault response was ', jsonData)\n    if (jsonData.signature) {\n      console.log('witness', jsonData)\n      return cb(jsonData)\n    } else {\n      return cb(false)\n    }\n  }\n\n  const setStates = (jsonData) => {\n    setVaultName(jsonData.name)\n    setVaultImage(jsonData.image)\n    setVaultDesc(jsonData.description)\n    setVaultTotalValue(jsonData.totalValue || 0)\n    setVaultValues(vaultValues.concat(jsonData.values))\n    setVaultDataValues(jsonData.attributes.filter(item=>{return item.trait_type === \"key\"}))\n    setVaultDesc(jsonData.description)\n    setVaultAddresses(jsonData.addresses)\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137: 97)\n    setStatus(jsonData.status)\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy)\n    }\n    // console.log('inside getstates. mine is ', mine)\n    setState({ loaded: true })\n    let isPvt =\n      jsonData.addresses.filter((item) => {\n        return item.address.includes('private:')\n      }).length > 0\n    setVaultPrivacy(isPvt)\n    setTimeout(() => {\n      !isPvt ?\n      getNftBalance(\n        jsonData.values,\n        jsonData.addresses.filter((item) => {\n          return item.coin === 'ETH'\n        })[0].address,\n        (_values) => {\n          // console.log(\"Have new values\", _values)\n          setVaultValues(_values)\n        }\n      ) : null\n    }, 5)\n  }  \n\n  const getEthBalances = async (address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n    setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n    // console.log('get eth balances', jsonData.values)\n    return cb(jsonData.values)\n  }\n\n  const getBtcBalance = async (values, address, cb) => {\n    const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    // setVaultValues(values.concat(jsonData.values))\n    return cb(values.concat(jsonData.values))\n  }\n\n  const getNftBalance = async (values, address, cb) => {\n    // console.log(address)\n    const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n      },\n    })\n    const jsonData = await responce.json()\n    if (jsonData.length > 0) {\n      // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n      return cb(values.concat(jsonData))\n    } else {\n      return cb(values)\n    }\n  }\n\n  const saveCache = (vault) => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)) // Save new state for later\n  }\n\n  const loadCache = () => {\n    let vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')) // Load vaults from storage before updating from server!\n    if (vault) {\n      setState({ loaded: true })\n      setStates(vault)\n      setLoadingApi(true)\n    }\n  }\n\n  const savePasswordToLocalStorage = () => {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword) // Save new state for later\n  }\n\n  const loadPasswordFromLocalStorage = () => {\n    let storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword')\n    storedPw && acceptable ? setMintPassword(storedPw) : null //setMintPassword(null)\n  }\n\n  const getKeys = async (signature, tokenId, cb) => {\n    var myHeaders = new Headers()\n    myHeaders.append('chainId', chainId.toString())\n    myHeaders.append('service', 'evmetadata')\n    myHeaders.append('Content-Type', 'application/json')\n\n    var raw = JSON.stringify({ signature: signature })\n    const responce = await fetch(EMBLEM_API + '/verify/' + tokenId, {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow',\n    })\n    const jsonData = await responce.json()\n    // console.log('getKeys response is ', jsonData)\n    return cb(jsonData)\n  }\n\n  const getContractStates = async () => {\n    let owned = false\n    try {\n      let owner  = await emblemContract.ownerOf(tokenId)\n      let acceptable = await handlerContract.getPreTransfer(tokenId)\n      let isApproved = await emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId])\n      setApproved(isApproved)\n      setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\")\n      setMine(owner === account)\n      loadPasswordFromLocalStorage()\n      getOffers(tokenId)\n    } catch(err){}\n    \n  }\n\n  useEffect(()=>{\n    // vaults.length == 0 ? getVaults() : null\n    // console.log(\"Vaults\", vaults.length)\n    // getVaults()\n    // console.log(\"mine?\", mine)\n    // console.log(\"claiming?\", claiming)\n    // console.log(\"accepting?\", accepting)\n    // console.log(\"acceptable\", acceptable)\n  })\n\n  const handleSign = async () => {\n    // library. .personal.sign(library.toHex(\"Claim:358746\"),library.eth.defaultAccount, (err,res) => console.log(err,res))\n    library\n      .getSigner(account)\n      .signMessage('Claim: ' + tokenId)\n      .then((signature) => {\n        getKeys(signature, tokenId, (result) => {\n          // console.log('HandleSign response is ' + result)\n          setMnemonic(result.decrypted.phrase)\n          setPrivKeyBTC(\n            result.decrypted.keys.filter((key) => {\n              return key.coin === 'btc'\n            })[0].privkey\n          )\n          setPrivKeyETH(\n            result.decrypted.keys.filter((key) => {\n              return key.coin === 'eth'\n            })[0].privkey\n          )\n          setKeyValues(result.decrypted.values)\n          onOpenKeysModal()\n        })\n      })\n  }\n\n  const handleClaim = async () => {\n    emblemContract.transferFrom(account, BURN_ADDRESS, tokenId).then(({ hash }: { hash: string }) => {\n      setClaiming(true)\n      setTimeout(() => {\n        setHash(hash)\n      }, 100) // Solving State race condition where transaction watcher wouldn't notice we were claiming\n    })\n  }\n\n  const startDecryptEffect = async () => {\n    if (decryptedEffectRunning) {\n      return\n    }\n    setDecryptedEffectRunning(true)\n    var theLetters = 'abcdefghijklmnopqrstuvwxyz' //You can customize what letters it will cycle through\n    var ctnt = 'Decrypting' // Your text goes here\n    var speed = 5 // ms per frame\n    var increment = 8 // frames per step. Must be >2\n\n    var clen = ctnt.length\n    var si = 0\n    var stri = 0\n    var block = ''\n    var fixed = ''\n    ;(function rustle(i) {\n      setTimeout(function () {\n        if (--i) {\n          rustle(i)\n        } else {\n          setDecryptedEffectRunning(false)\n        }\n        nextFrame(i)\n        si = si + 1\n      }, speed)\n    })(clen * increment + 1)\n    function nextFrame(pos) {\n      for (var i = 0; i < clen - stri; i++) {\n        //Random number\n        var num = Math.floor(theLetters.length * Math.random())\n        //Get random letter\n        var letter = theLetters.charAt(num)\n        block = block + letter\n      }\n      if (si == increment - 1) {\n        stri++\n      }\n      if (si == increment) {\n        // Add a letter;\n        // every speed*10 ms\n        fixed = fixed + ctnt.charAt(stri - 1)\n        si = 0\n      }\n      // $(\"#output\").html(fixed + block);\n      setDecryptedEffect(fixed + block)\n      block = ''\n    }\n  }\n\n  useEffect(() => {\n    getVault()\n  }, [])\n\n  useEffect(() => {\n    // console.log('Account chainid = ' + chainId + ' and vaultchainid = ' + vaultChainId)\n    account && chainId && vaultChainId && chainId == vaultChainId ? getContractStates() : null\n    // console.log('in the usefeect that clls getcontractstates')\n  })\n\n  function splitDescription(words) {\n    var desc = words.split('\\n\\n\\n\\n')\n    return desc[0].trim()\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword\n    }\n    startDecryptEffect()\n    let ciphertext = vaultAddresses[0].address.replace('private:', '')\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key)\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n      setVaultPrivacy(false)\n      setDecryptPassword(key)\n      setVaultAddresses(decryptAddresses(key))\n      getEthBalances(\n        vaultAddresses.filter((item) => {\n          return item.coin === 'ETH'\n        })[0].address,\n        (values) => {\n          getBtcBalance(\n            values,\n            vaultAddresses.filter((item) => {\n              return item.coin === 'BTC'\n            })[0].address,\n            (_values) => {\n              // console.log(\"Have fucking values\", values)\n              getNftBalance(\n                _values,\n                vaultAddresses.filter((item) => {\n                  return item.coin === 'ETH'\n                })[0].address,\n                (__values) => {\n                  setVaultValues(__values.concat(vaultValues))\n                }\n              )\n            }\n          )\n        }\n      )\n    } catch (err) {}\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach((item) => {\n      let cipherText = item.address.replace('private:', '')\n      item.address = decrypt(cipherText, key)\n    })\n    return vaultAddresses\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key)\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\n    return decryptedData\n  }\n\n  return (\n    <>\n       <Head>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:site\" content=\"Emblem.Finance\" />\n        <meta name=\"twitter:title\" content={vaultName} />\n        <meta name=\"twitter:description\" content={splitDescription(vaultDesc)} />\n        <meta name=\"twitter:image\" content={vaultImage} />\n      </Head>\n      <AddrModal isOpen={isOpenAddrModal} onClose={onCloseAddrModal} addrCoin={currCoin} addrAddr={currAddr} />\n\n      <KeysModal\n        isOpen={isOpenKeysModal}\n        onClose={onCloseKeysModal}\n        mnemonic={mnemonic}\n        privKeyBTC={privKeyBTC}\n        privKeyETH={privKeyETH}\n        privValues={privValues}\n      />\n\n      <Loader loaded={state.loaded}>\n        {loadingApi ? <Refreshing /> : ''}\n        {!invalidVault ? (\n          <Tilt className=\"Tilt\" options={{ max: experimental ? 0 : 0, scale: 1 }}>\n            <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n              <Box\n                maxW=\"sm\"\n                borderWidth=\"1px\"\n                borderColor={vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null}\n                rounded=\"lg\"\n                overflow=\"hidden\"\n                alignItems=\"center\"\n                minW={390}\n              >\n                {vaultChainId != chainId ? (\n                  <Box\n                    mt=\"1\"\n                    fontWeight=\"semibold\"\n                    as=\"h3\"\n                    lineHeight=\"tight\"\n                    p={2}\n                    textAlign=\"center\"\n                    textTransform=\"uppercase\"\n                    alignItems=\"center\"\n                    color=\"orange.500\"\n                  >\n                    BEWARE: Vault is on a different network than you are.\n                  </Box>\n                ) : null}\n                <Box\n                  mt=\"1\"\n                  fontWeight=\"semibold\"\n                  as=\"h3\"\n                  lineHeight=\"tight\"\n                  p={2}\n                  textAlign=\"center\"\n                  textTransform=\"uppercase\"\n                  alignItems=\"center\"\n                >\n                  {vaultName}\n                  {!vaultPrivacy ? ': ~$' + vaultTotalValue : null}\n                </Box>\n                <Stack align=\"center\">\n                  <Image\n                    src={validImage(vaultImage) ? vaultImage : 'https://circuitsofvalue.com/public/coval-logo.png'}\n                    width=\"250px\"\n                  />\n                </Stack>\n                <Stack align=\"center\">\n                  <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n                    <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" >\n                    <ReactMarkdown plugins={[gfm]} children={splitDescription(vaultDesc)} />\n                    </Text>\n                  </Box>\n                </Stack>\n                <Box p=\"6\">\n                  <Box d=\"flex\" alignItems=\"baseline\">\n                    <Box color=\"gray.500\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                      <Text as=\"h4\" fontWeight=\"semibold\">\n                        Current Contents:\n                      </Text>\n                      {vaultPrivacy ? (\n                        <>\n                          <Text pb={2} color={decryptedEffect ? 'green.500' : null}>\n                            {decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'}\n                          </Text>\n                          <Input\n                            type=\"password\"\n                            id=\"vault-password\"\n                            onChange={(e) => tryDecrypt(e.target.value)}\n                            aria-describedby=\"password-helper-text\"\n                          />\n                        </>\n                      ) : vaultValues.length ? (\n                        vaultValues.map((coin) => {\n                          return (                            \n                            <Text key={coin.name} isTruncated>\n                              {/* <Image width={3} src={coin.image} /> */}\n                              {coin.address && coin.type !== 'nft' ? (\n                                <Tooltip aria-label={coin.name} hasArrow label={\"Add \" + coin.symbol + \" to wallet\"} placement=\"top\" >\n                                  <Link onClick={()=>{addTokenToWallet({address:coin.address, symbol:coin.symbol, decimals:coin.decimals, image: coin.image? coin.image : null })}}>\n                                    + \n                                  </Link>\n                                </Tooltip>\n                                \n                              ) : null}\n                              {'('}{coin.coin.toLowerCase()}{')'} {coin.name} :{' '}\n                              {coin.balance ? (\n                                coin.balance\n                              ) : coin.type == 'nft' ? (\n                                <Link href={coin.external_url} isExternal>\n                                  View NFT\n                                </Link>\n                              ) : null}\n                            </Text>\n                          )\n                        })\n                      ) : null } \n                      { vaultDataValues.length ? (\n                        vaultDataValues.map((data) => {\n                          return (\n                            <Text>Data: {data.attribute_key}</Text>\n                          )                        \n                        })\n                      ) : !vaultDataValues.length && !vaultValues.length ? (\n                        <Text>Nothing in here! Fill 'er up!</Text>\n                      ) : null}\n                    </Box>\n                  </Box>\n                  {!vaultPrivacy ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <ButtonGroup justifyContent=\"space-between\" spacing={6}>\n                        {vaultAddresses.map((addr) => {\n                          return (\n                            <Button\n                              key={addr.address}\n                              onClick={() => {\n                                setCurrCoin(addr.coin)\n                                setCurrAddr(addr.address)\n                                onOpenAddrModal()\n                              }}\n                            >\n                              Put {addr.coin == 'ETH' ? addr.coin + '/ERC20' : addr.coin} In\n                            </Button>\n                          )\n                        })}\n                      </ButtonGroup>\n                    </Box>\n                  ) : null}\n\n                  {!(status === 'claimed') && (vaultChainId === 1 || vaultChainId === 4 )? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        as=\"a\"\n                        {...{\n                          href:\n                            'https://' +\n                            (vaultChainId == 4 ? 'rinkeby.' : '') +\n                            'opensea.io/assets/' +\n                            contractAddresses.emblemVault[vaultChainId] +\n                            '/' +\n                            tokenId,\n                          target: '_blank',\n                          rel: 'noopener noreferrer',\n                        }}\n                      >\n                        {mine ? 'Sell (Opensea)' : 'Make an Offer (Opensea)'}\n                      </Button>\n                    </Box>\n                  ) : null}\n                  {!(status === 'claimed') && mine && !acceptable?  (\n                    <>\n                     <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\" width=\"100%\">\n                        <Stack direction=\"column\" align=\"center\" width=\"100%\">\n                          <Button width=\"100%\" onClick={onToggle}>Transfer Vault</Button>\n                          <Collapse isOpen={isOpen}>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                            <FormLabel htmlFor=\"owner-address\">Address</FormLabel>\n                              <Input\n                                mt={1}\n                                type=\"text\"\n                                id=\"transferAddress\"\n                                value={transferToAddress || ''}\n                                onChange={(e) => {                              \n                                  console.log(\"Transfer to\", e.target.value)\n                                  setTransferToAddress(e.target.value)\n                                }}\n                                autoComplete=\"off\"\n                              />\n                            </Box>\n                            <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"2\" width=\"100%\">\n                              <Button isDisabled={!isETHAddress(transferToAddress)} onClick={()=>{\n                                onToggle()\n                                transferVault()\n                              }}>Transfer Now</Button> \n                            </Box>\n                          </Collapse>\n                        </Stack>\n                      </Box>\n                    </>\n                  ):null }\n                  {mine && !acceptable ? (<>\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={() => {\n                        if (!approved) {\n                          return handleApproveForall()\n                        } else {\n                          let key = CryptoJS.lib.WordArray.random(128/8).toString()\n                          let sha = CryptoJS.SHA256(key).toString()\n                          console.log('plain', key)\n                          console.log('sha', sha)\n                          setTransferPassword(key)\n                          transferImage = sha                          \n                          setTimeout(()=>{\n                            addPreTransfer()\n                          }, 500)\n                        }                                             \n                      }\n                    }> {approved ? \"Get Link (Send Vault Via Link)\" : \"Approve Gifting\" } </Button>\n                    </Box>\n                  </>) : null }\n                  {(showTransferPassword || mintPassword) && acceptable ? (\n                      <Box>\n                        <Link href={location.protocol +'//'+ location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword)}>Copy Gift Link</Link>\n                        <Text>Password: {(transferPassword || mintPassword)}</Text>\n                      </Box>\n                      ) : null}\n                  {acceptable && claimedBy !== account ? (\n                  <>\n                      <Button mt={2} width=\"100%\" onClick={()=>{fireMetaMask()}}>Accept</Button>\n                      <Input\n                        mt={2}\n                        type=\"password\"\n                        id=\"mintPassword\"\n                        minLength={3}\n                        maxLength={200}\n                        value={mintPassword || ''}\n                        onChange={(e) => {\n                          console.log('grrr', e.target.value, mintPassword)\n                          setMintPassword(e.target.value)}\n                        }\n                        autoComplete=\"off\"\n                      />\n                  </>\n                    ) : null}\n\n                  {!(status === 'claimed') && account && vaultChainId === chainId && mine ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button\n                        width=\"100%\"\n                        onClick={() => {\n                          handleClaim()\n                        }}\n                        isDisabled={claiming}\n                      >\n                        {claiming ? 'Claiming ...' : 'Claim (Crack Open Vault)'}\n                      </Button>\n                    </Box>                    \n                  ) : status === 'claimed' && claimedBy === account && vaultChainId === chainId ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Button width=\"100%\" onClick={handleSign}>\n                        Get Keys\n                      </Button>\n                    </Box>\n                  ) : null}\n                  {status !== 'claimed' ? (\n                    <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                      <Stack direction=\"column\" align=\"center\" width=\"100%\">\n                        <Button width=\"100%\" onClick={onOffersToggle}>\n                          Offers: {offers.length}\n                        </Button>\n                        <Collapse isOpen={isOffersOpen}>\n                          {offers.map((offer, index)=>{\n                            return (\n                              <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\" key={offer.tokenId + '_' + index + '_key'}>\n                                <Text key={offer.tokenId + '_' + index + '_offer'}>{offer.tokenId}</Text>\n                                <Button key={offer.tokenId + '_' + index + '_accept'} m=\"2\" onClick={() => {acceptOffer(offer.index)}}>Accept</Button>\n                                <Button key={offer.tokenId + '_' + index + '_reject'} m=\"2\" onClick={() => {rejectOffer(offer.index)}}>Reject</Button>\n                                {offer.from == account ? (\n                                  <Button key={offer.tokenId + '_' + index + '_withdraw'} m=\"2\" onClick={() => {withdrawOffer(offer.index)}}>Withdraw</Button>\n                                ) : null}                                \n                              </Box>\n                            )\n                          })}\n                          <Box d=\"flex\" alignItems=\"baseline\" justifyContent=\"space-between\" mt=\"4\">\n                            \n                            <Select placeholder=\"Select vault\" onChange={(e)=>{ setOffering(e.target.value) }}>\n                            {vaults.length > 0 ? vaults.map((vault, index)=>{\n                                return (\n                                  <option key={'vault_'+vault.tokenId+index} value={vault.tokenId} >{vault.name}</option>\n                                )\n                            }): null}\n                            </Select>\n                            <Button m=\"2\" onClick={()=>{ addOffer() }}>Offer</Button>\n                          </Box>\n                        </Collapse>\n                      </Stack>\n                    </Box>\n                    ) : null }\n                </Box>\n                <Stack direction=\"column\" align=\"center\">\n                  {status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n                {hash ? (\n                  <Alert status=\"info\">\n                    <AlertIcon />\n                    { accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving? \"Handling Approval Flow ...\" : transfering? \"Transfering Vault ...\":  \"Generating Gift Link ...\"}\n                  </Alert>\n                ) : null}\n              </Box>\n            </Flex>\n          </Tilt>\n        ) : (\n          <Stack align=\"center\">\n            <Image\n              width=\"md\"\n              src=\"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n            ></Image>\n            <Text>\n              THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR{' '}\n              <Link color=\"#638cd8\" href=\"../create\">\n                CREATE ONE HERE!\n              </Link>\n            </Text>\n          </Stack>\n        )}\n        {hash ? (\n          <TransactionToast\n            hash={hash}\n            onComplete={() => {\n              // location.href = location.origin + '/vault?id=' + tokenId\n              if (claiming && !accepting && !preTransfering) {\n                console.log(111111)\n                setHash(null)\n                setStatus('claimed')\n                setClaiming(false)\n                setClaimedBy(account)\n                handleSign()\n              } else if (preTransfering) {\n                savePasswordToLocalStorage()\n                setShowTransferPassword(true)\n                setPreTransfering(false)\n                setHash(null)                \n              } else if(accepting) {\n                setAccepting(false)                \n                getVault()\n                setHash(null)\n              } else if(approving) {\n                setApproving(false)\n                getVault()\n                setHash(null)\n              } else if(transfering) {\n                setTransfering(false)\n                getVault()\n                setHash(null)\n              } else {\n                console.log('claiming', claiming) \n                console.log('accepting', accepting) \n                console.log('preTransfering', preTransfering)\n                console.log('approving', approving)\n                console.log(\"Unknown state\")\n                getVault()\n                setHash(null)\n              }\n            }}\n          />\n        ) : null}\n      </Loader>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}