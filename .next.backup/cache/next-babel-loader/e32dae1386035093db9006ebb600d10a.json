{"ast":null,"code":"import { JSBI } from '@uniswap/sdk';\nimport { abi as HandlerABI } from './abi/handler.json';\nimport { abi as SalesABI } from './abi/sales.json';\nimport { abi as CovalABI } from './abi/coval.json';\nimport { abi as EmblemABI } from './abi/emblem.json';\nimport { abi as NftradeABI } from './abi/nftrade.json';\nimport { abi as ClaimedABI } from './abi/claimed.json';\nimport { abi as VaultHandlerV8 } from './abi/VaultHandlerV8.json';\nimport { abi as ClonableFactory } from './abi/ClonableFactory.json';\nimport { abi as ERC20 } from './abi/ConfigurableERC20Upgradable.json';\nimport { abi as ERC721 } from './abi/EmblemVault.json';\nimport { abi as ERC1155 } from './abi/ERC1155Upgradable.json';\nimport { abi as mintVaultQuoteAbi } from './abi/mintVaultQuoteAbi.json';\nimport xcpJson from './curated/xcp.json';\nexport const BG = {\n  light: 'gray.50',\n  dark: 'gray.900'\n};\nexport const COLOR = {\n  light: 'black',\n  dark: 'white'\n};\nexport const isIPFS = process.env.IPFS === 'true';\nexport const isServerSide = true;\nconst {\n  API_OVERLOAD\n} = process.env;\nexport const ADDRESS_ZERO = '0x0000000000000000000000000000000000000000';\nexport const DEFAULT_APPROVE_MAX = true;\nexport const DEFAULT_DEADLINE = 60 * 20;\nexport const DEFAULT_SLIPPAGE = 50;\nexport const GAS_LIMIT_WHEN_MOCKING = 500000; // https://uniswap.org/docs/v2/smart-contracts/router02/\n\nexport const ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'; // https://github.com/NoahZinsmeister/permit-and-call\n\nexport const PERMIT_AND_CALL_ADDRESS = '0xe334094985bB046B95550793EA577F8DC4e6112B';\nexport const ZERO = JSBI.BigInt(0);\nexport const MAX_UINT256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nexport const curatedContracts = [{\n  name: \"Rare Pepe\",\n  1: \"0x7E6027a6A84fC1F6Db6782c523EFe62c923e46ff\",\n  \"chain\": \"xcp\",\n  collectionType: \"ERC1155\",\n  loadTypes: ['select'],\n  description: \"This Curated Emblem Vault contains 1 Rare Pepe NFT that was minted on Bitcoin using the Counterparty protocol. Rare Pepes is a collection of 1,774 unique cards with varying designs and rarities that were created by more than 300 artists from 2016 to 2018. \",\n  purchaseMethod: 'buyWithQuote',\n  allowedName: asset => {\n    let curatedItemFound = xcpJson[\"Rare Pepe\"].filter(item => {\n      return item.name == asset;\n    });\n    return asset && curatedItemFound.length > 0;\n  },\n  showBalance: false\n}, {\n  name: \"Emblem Test\",\n  1: \"0xdcFfa2b5cBf288932B009EBA01C8ca772ec6C993\",\n  \"chain\": \"xcp\",\n  collectionType: \"ERC1155\",\n  loadTypes: ['select'],\n  description: \"Created by Pepe artists Oliver Morris and Zoe Davies, the Emblem Test series of four cards—COMMON, RARE, LEGEND, and EPIC—were made to test Emblem Vault's new curated collection (ERC-1155) contracts. The cards were free and airdropped to Emblem Vault followers in December 2022\",\n  purchaseMethod: 'buyWithQuote',\n  showBalance: false\n}, {\n  name: \"Spells of Genesis\",\n  1: \"0xDCA91409018ea80B71d21E818f00e76072969861\",\n  chain: \"xcp\",\n  collectionType: \"ERC1155\",\n  loadTypes: ['select'],\n  description: \"\",\n  purchaseMethod: 'buyWithQuote',\n  showBalance: false\n}, {\n  name: \"Cursed Ordinal\",\n  1: \"0x769Fdf030A9e176EC8B6D66EFdCB63e8fA69885c\",\n  chain: \"cursedordinalsbtc\",\n  collectionType: \"ERC721\",\n  loadTypes: ['input', 'empty'],\n  description: `Cursed Ordinals are a collection of unindexed or \"bugged\" Ordinals not included initially in the Ord Client. \\n\\nWARNING: The inscription number of this Cursed Ordinal may change. Emblem Vault's dynamic vaults will update the metadata of this vault whenever a new Ord Client upgrade is posted and implemented.`,\n  image: data => {\n    return `https://image-scaler.vercel.app/image?url=https://ordinals.com/content/${data.inscription_id}?size=400`;\n  },\n  loading: () => {\n    let images = [\"https://emblem.finance/ord-loading1.png\", \"https://emblem.finance/ord-loading2.png\"];\n    return images[Math.floor(Math.random() * images.length)]; // Random image\n  },\n  placeholder: () => {\n    let images = [\"https://emblem.finance/ord-error1.png\", \"https://emblem.finance/ord-error2.png\", \"https://emblem.finance/ord-error3.png\", \"https://emblem.finance/ord-error4.png\", \"https://emblem.finance/ord-error5.png\", \"https://emblem.finance/ord-error6.png\"];\n    return images[Math.floor(Math.random() * images.length)]; // Random image\n  },\n  allowed: data => {\n    return true;\n  },\n  allowedName: asset => {\n    let pieces = asset.split(' ');\n    return true;\n  },\n  address: addresses => {\n    return addresses.filter(item => {\n      return item.coin === \"TAP\";\n    })[0].address;\n  },\n  purchaseMethod: 'buyWithQuote',\n  showBalance: true\n}, {\n  name: \"Ethscription\",\n  1: \"0x8C3c0274c33f263F0A55d129cFC8eaa3667A9E8b\",\n  chain: \"ethscription\",\n  collectionType: \"ERC721\",\n  loadTypes: ['empty'],\n  description: `Ethscriptions are on-chain digital artifacts stored on the Ethereum blockchain using transaction calldata. LFG!`,\n  image: data => {\n    return `https://image-scaler.vercel.app/image?url=https://ordinals.com/content/${data.inscription_id}?size=400`;\n  },\n  loading: () => {\n    let images = [\"https://emblem.finance/ethscriptions-loading-1.png\", \"https://emblem.finance/ethscriptions-loading-2.png\", \"https://emblem.finance/ethscriptions-loading-3.png\"];\n    return images[Math.floor(Math.random() * images.length)]; // Random image\n  },\n  placeholder: () => {\n    let images = [];\n    return images[Math.floor(Math.random() * images.length)]; // Random image\n  },\n  allowed: data => {\n    return true;\n  },\n  allowedName: asset => {\n    // let pieces = asset.split(' ')\n    return true; //asset.includes(\"Ethscription\") //&& pieces.length === 3 && Number(pieces.reverse()[0]) < 0\n  },\n  address: addresses => {\n    return addresses.filter(item => {\n      return item.coin === \"ETH\";\n    })[0].address;\n  },\n  purchaseMethod: 'buyWithQuote',\n  showBalance: true\n}];\nexport const curatedAssets = {\n  xcp: xcpJson\n};\nexport const contractAddresses = {\n  salesFactory: {\n    1: '0xfb51bcd2644c20d87e17106c27355732fd485e4e'\n  },\n  salesAbi: SalesABI,\n  vaultHandler: {\n    // 1: '0x1ec6b294902d42fee964d29fa962e5976e71e67d',\n    1: '0xD0C7304156AF0a4be17352D8ce214222Ec66E8ba',\n    4: '0x63B1EB00de17Faf64b33649A5b7592543B010127',\n    5: '0x0349E72c3BFc6232B12FD546a9f9CD1851dD5bDD',\n    80001: '0x5434ba8b4A37755Cb3867C9fde39342C0D382857',\n    137: '0x322ad0007ff961f253d3818c61d912c89752ec3e',\n    100: '0x6e02D718C08b9EBd971B4788fF30308cC997E2Ef',\n    56: '0x34761221dBC6bE70A4f88E2077765dB8F14A1007',\n    250: '0x27B08ADcA39a684961e2cD289f0bEA893eDF0772',\n    1337: '0xe70AbBc99D8eB32124BF022196c493DB4fBc50FD',\n    1313161554: '0x793F3cF97c57798732f3AA36416CaC742223aB20'\n  },\n  vaultHandlerAbi: HandlerABI,\n  emblemVault: {\n    1: '0x82c7a8f707110f5fbb16184a5933e9f78a34c6ab',\n    4: '0xe70AbBc99D8eB32124BF022196c493DB4fBc50FD',\n    80001: '0x8b8407c6184f1f0Fd1082e83d6A3b8349cAcEd12',\n    137: '0x8b8407c6184f1f0Fd1082e83d6A3b8349cAcEd12',\n    100: '0x9058d1A5Fdba852403D5b080abAF31D1379EF653',\n    56: '0x9523022eb4B465Db3e3037d83e4910E3cFF1bD49',\n    250: '0x5434ba8b4A37755Cb3867C9fde39342C0D382857',\n    1337: '0xe70AbBc99D8eB32124BF022196c493DB4fBc50FD',\n    1313161554: '0x14509fCc07892E80eD6BE4cf171407d206A92164'\n  },\n  emblemAbi: EmblemABI,\n  coval: {\n    1: '0x3d658390460295fb963f54dc0899cfb1c30776df',\n    4: '0x44c1a9d7D1F932B4c2811A70eDfFDD6Ae2EB60e6',\n    5: '0x44aA2ae6a29A1434942EB88cB2eD0Fd1De30de83',\n    80001: '0x5cCa9D75DF2dFC117855adD4DD45727dee5287EC',\n    137: '0x4597c8A59Ab28B36840B82B3A674994A279593D0',\n    100: '0x8b8407c6184f1f0Fd1082e83d6A3b8349cAcEd12',\n    56: '0xd15CeE1DEaFBad6C0B3Fd7489677Cc102B141464',\n    250: '0x8b8407c6184f1f0Fd1082e83d6A3b8349cAcEd12',\n    1337: '0xe70AbBc99D8eB32124BF022196c493DB4fBc50FD',\n    1313161554: '0x584039B84b1d36653DAb76DC1246D07b08218706'\n  },\n  covalAbi: CovalABI,\n  nftrade: {\n    137: '0x88f5Cc3624247477bE5f691648A7D1B2631965B9'\n  },\n  nftradeAbi: NftradeABI,\n  claimed: {\n    1: '0xb8D6eB76dABea5b238e999B3145775E54412B2D2',\n    137: '0x62C505E51800901f4B44Ff1f6eD5348c36D37E28',\n    1313161554: '0xE1213fcb2a085B6d26C52f9D8fEc54f0758Fd7b1',\n    5: '0x1342F91DC53B6D222614Ad1f981b5683d4653116'\n  },\n  claimedAbi: ClaimedABI,\n  vaultHandlerV8: {\n    1: \"0x23859b51117dbFBcdEf5b757028B18d7759a4460\",\n    4: \"0xF2eCdFa77C3c8Cabf913529D95081DCB2DE314ec\",\n    5: '0xc15235d210c1b1CdA8643a5eA37687E241B031b0',\n    1337: \"0xfc3A4BBfD522668342bCaDf273a94A46DCe25439\",\n    1313161554: '0xeDb2AC2BfD8d026E4d6C75a04548423936512135'\n  },\n  vaultHandlerV8Abi: VaultHandlerV8,\n  clonableFactoryAbi: ClonableFactory,\n  erc20Abi: ERC20,\n  erc721Abi: ERC721,\n  erc1155Abi: ERC1155,\n  mintVaultQuote: {\n    1: \"0xE5dec92911c78069d727a67C85936EDDbc9B02Cf\"\n  },\n  mintVaultQuoteAbi: mintVaultQuoteAbi\n};\nexport const BURN_ADDRESS = '0x5D152dd902CC9198B97E5b6Cf5fc23a8e4330180';\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\nexport const EMBLEM_API = API_OVERLOAD ? API_OVERLOAD : 'https://api2.emblemvault.io'; //'http://localhost:3001' // \n\nexport const EMBLEM_V2_API = 'https://v2.emblemvault.io'; //'http://localhost:3001' //\n\nexport const SIG_API = 'http://localhost:3002'; //'https://tor-us-signer-coval.vercel.app' //\n\nexport const ORD_API = 'https://api-ord.emblemvault.io/bitcoin/';\nexport let QueryParameters;\n\n(function (QueryParameters) {\n  QueryParameters[\"INPUT\"] = \"input\";\n  QueryParameters[\"OUTPUT\"] = \"output\";\n  QueryParameters[\"CHAIN\"] = \"chain\";\n})(QueryParameters || (QueryParameters = {}));\n\nexport const ERC20_BYTES32 = [{\n  constant: true,\n  inputs: [],\n  name: 'name',\n  outputs: [{\n    internalType: 'bytes32',\n    name: '',\n    type: 'bytes32'\n  }],\n  payable: false,\n  stateMutability: 'pure',\n  type: 'function'\n}, {\n  constant: true,\n  inputs: [],\n  name: 'symbol',\n  outputs: [{\n    internalType: 'bytes32',\n    name: '',\n    type: 'bytes32'\n  }],\n  payable: false,\n  stateMutability: 'pure',\n  type: 'function'\n}];","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/constants.ts"],"names":["JSBI","abi","HandlerABI","SalesABI","CovalABI","EmblemABI","NftradeABI","ClaimedABI","VaultHandlerV8","ClonableFactory","ERC20","ERC721","ERC1155","mintVaultQuoteAbi","xcpJson","BG","light","dark","COLOR","isIPFS","process","env","IPFS","isServerSide","API_OVERLOAD","ADDRESS_ZERO","DEFAULT_APPROVE_MAX","DEFAULT_DEADLINE","DEFAULT_SLIPPAGE","GAS_LIMIT_WHEN_MOCKING","ROUTER_ADDRESS","PERMIT_AND_CALL_ADDRESS","ZERO","BigInt","MAX_UINT256","curatedContracts","name","collectionType","loadTypes","description","purchaseMethod","allowedName","asset","curatedItemFound","filter","item","length","showBalance","chain","image","data","inscription_id","loading","images","Math","floor","random","placeholder","allowed","pieces","split","address","addresses","coin","curatedAssets","xcp","contractAddresses","salesFactory","salesAbi","vaultHandler","vaultHandlerAbi","emblemVault","emblemAbi","coval","covalAbi","nftrade","nftradeAbi","claimed","claimedAbi","vaultHandlerV8","vaultHandlerV8Abi","clonableFactoryAbi","erc20Abi","erc721Abi","erc1155Abi","mintVaultQuote","BURN_ADDRESS","ZERO_ADDRESS","EMBLEM_API","EMBLEM_V2_API","SIG_API","ORD_API","QueryParameters","ERC20_BYTES32","constant","inputs","outputs","internalType","type","payable","stateMutability"],"mappings":"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","sourcesContent":["import { JSBI } from '@uniswap/sdk'\nimport { abi as HandlerABI } from './abi/handler.json'\nimport { abi as SalesABI } from './abi/sales.json'\nimport { abi as CovalABI } from './abi/coval.json'\nimport { abi as EmblemABI } from './abi/emblem.json'\nimport { abi as NftradeABI } from './abi/nftrade.json'\nimport { abi as ClaimedABI } from './abi/claimed.json'\nimport { abi as VaultHandlerV8 } from './abi/VaultHandlerV8.json'\nimport { abi as ClonableFactory } from './abi/ClonableFactory.json'\nimport { abi as ERC20 } from './abi/ConfigurableERC20Upgradable.json'\nimport { abi as ERC721 } from './abi/EmblemVault.json'\nimport { abi as ERC1155 } from './abi/ERC1155Upgradable.json'\nimport { abi as mintVaultQuoteAbi } from './abi/mintVaultQuoteAbi.json'\nimport xcpJson from './curated/xcp.json'\n\nexport const BG = { light: 'gray.50', dark: 'gray.900' }\nexport const COLOR = { light: 'black', dark: 'white' }\n\nexport const isIPFS = process.env.IPFS === 'true'\nexport const isServerSide = typeof window === 'undefined'\nconst { API_OVERLOAD } = process.env;\n\nexport const ADDRESS_ZERO = '0x0000000000000000000000000000000000000000'\n\nexport const DEFAULT_APPROVE_MAX = true\nexport const DEFAULT_DEADLINE = 60 * 20\nexport const DEFAULT_SLIPPAGE = 50\n\nexport const GAS_LIMIT_WHEN_MOCKING = 500000\n\n// https://uniswap.org/docs/v2/smart-contracts/router02/\nexport const ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\n// https://github.com/NoahZinsmeister/permit-and-call\nexport const PERMIT_AND_CALL_ADDRESS = '0xe334094985bB046B95550793EA577F8DC4e6112B'\nexport const ZERO = JSBI.BigInt(0)\nexport const MAX_UINT256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\nexport const curatedContracts = [\n  {\n    name: \"Rare Pepe\",\n    1: \"0x7E6027a6A84fC1F6Db6782c523EFe62c923e46ff\",\n    \"chain\": \"xcp\",\n    collectionType: \"ERC1155\",\n    loadTypes: ['select'],\n    description: \"This Curated Emblem Vault contains 1 Rare Pepe NFT that was minted on Bitcoin using the Counterparty protocol. Rare Pepes is a collection of 1,774 unique cards with varying designs and rarities that were created by more than 300 artists from 2016 to 2018. \",\n    purchaseMethod: 'buyWithQuote',\n    allowedName: (asset: any)=>{\n      let curatedItemFound = xcpJson[\"Rare Pepe\"].filter(item=>{return item.name == asset})\n      return asset && curatedItemFound.length > 0\n    },\n    showBalance: false,\n  },\n  {\n    name: \"Emblem Test\",\n    1: \"0xdcFfa2b5cBf288932B009EBA01C8ca772ec6C993\",\n    \"chain\": \"xcp\",\n    collectionType: \"ERC1155\",\n    loadTypes: ['select'],\n    description: \"Created by Pepe artists Oliver Morris and Zoe Davies, the Emblem Test series of four cards—COMMON, RARE, LEGEND, and EPIC—were made to test Emblem Vault's new curated collection (ERC-1155) contracts. The cards were free and airdropped to Emblem Vault followers in December 2022\",\n    purchaseMethod: 'buyWithQuote',\n    showBalance: false\n  },\n  {\n    name: \"Spells of Genesis\",\n    1: \"0xDCA91409018ea80B71d21E818f00e76072969861\",\n    chain: \"xcp\",\n    collectionType: \"ERC1155\",\n    loadTypes: ['select'],\n    description: \"\",\n    purchaseMethod: 'buyWithQuote',\n    showBalance: false\n  },\n  {\n    name: \"Cursed Ordinal\",\n    1: \"0x769Fdf030A9e176EC8B6D66EFdCB63e8fA69885c\",\n    chain: \"cursedordinalsbtc\",\n    collectionType: \"ERC721\",\n    loadTypes: ['input','empty'],\n    description: `Cursed Ordinals are a collection of unindexed or \"bugged\" Ordinals not included initially in the Ord Client. \\n\\nWARNING: The inscription number of this Cursed Ordinal may change. Emblem Vault's dynamic vaults will update the metadata of this vault whenever a new Ord Client upgrade is posted and implemented.`,\n    image: (data: any)=>{\n      return `https://image-scaler.vercel.app/image?url=https://ordinals.com/content/${data.inscription_id}?size=400`\n    },\n    loading: ()=>{\n      let images = [\n      \"https://emblem.finance/ord-loading1.png\",\n      \"https://emblem.finance/ord-loading2.png\"\n      ]\n      return images[Math.floor(Math.random() * images.length)] // Random image\n    },\n    placeholder: ()=>{\n      let images = [\n        \"https://emblem.finance/ord-error1.png\",\n        \"https://emblem.finance/ord-error2.png\",\n        \"https://emblem.finance/ord-error3.png\",\n        \"https://emblem.finance/ord-error4.png\",\n        \"https://emblem.finance/ord-error5.png\",\n        \"https://emblem.finance/ord-error6.png\"\n      ]\n      return images[Math.floor(Math.random() * images.length)] // Random image\n    },\n    allowed: (data: any)=>{\n      return true\n    },\n    allowedName: (asset: any)=>{\n      let pieces = asset.split(' ')\n      return true\n    },\n    address: (addresses: any[])=>{\n      return addresses.filter(item=>{return item.coin === \"TAP\"})[0].address\n    },\n    purchaseMethod: 'buyWithQuote',\n    showBalance: true\n  },\n  {\n    name: \"Ethscription\",\n    1: \"0x8C3c0274c33f263F0A55d129cFC8eaa3667A9E8b\",\n    chain: \"ethscription\",\n    collectionType: \"ERC721\",\n    loadTypes: ['empty'],\n    description: `Ethscriptions are on-chain digital artifacts stored on the Ethereum blockchain using transaction calldata. LFG!`,\n    image: (data: any)=>{\n      return `https://image-scaler.vercel.app/image?url=https://ordinals.com/content/${data.inscription_id}?size=400`\n    },\n    loading: ()=>{\n      let images = [\n        \"https://emblem.finance/ethscriptions-loading-1.png\",\n        \"https://emblem.finance/ethscriptions-loading-2.png\",\n        \"https://emblem.finance/ethscriptions-loading-3.png\",\n      ]\n      return images[Math.floor(Math.random() * images.length)] // Random image\n    },\n    placeholder: ()=>{\n      let images = []\n      return images[Math.floor(Math.random() * images.length)] // Random image\n    },\n    allowed: (data: any)=>{\n      return true\n    },\n    allowedName: (asset: any)=>{\n      // let pieces = asset.split(' ')\n      return true//asset.includes(\"Ethscription\") //&& pieces.length === 3 && Number(pieces.reverse()[0]) < 0\n    },\n    address: (addresses: any[])=>{\n      return addresses.filter(item=>{return item.coin === \"ETH\"})[0].address\n    },\n    purchaseMethod: 'buyWithQuote',\n    showBalance: true\n  }\n]\nexport const curatedAssets = {\n  xcp: xcpJson\n}\nexport const contractAddresses = {\n  salesFactory: {\n    1: '0xfb51bcd2644c20d87e17106c27355732fd485e4e'\n  },\n  salesAbi: SalesABI,\n  vaultHandler: {\n    // 1: '0x1ec6b294902d42fee964d29fa962e5976e71e67d',\n    1: '0xD0C7304156AF0a4be17352D8ce214222Ec66E8ba',\n    4: '0x63B1EB00de17Faf64b33649A5b7592543B010127',\n    5: '0x0349E72c3BFc6232B12FD546a9f9CD1851dD5bDD',\n    80001: '0x5434ba8b4A37755Cb3867C9fde39342C0D382857',\n    137: '0x322ad0007ff961f253d3818c61d912c89752ec3e',\n    100: '0x6e02D718C08b9EBd971B4788fF30308cC997E2Ef',\n    56: '0x34761221dBC6bE70A4f88E2077765dB8F14A1007',\n    250: '0x27B08ADcA39a684961e2cD289f0bEA893eDF0772',\n    1337: '0xe70AbBc99D8eB32124BF022196c493DB4fBc50FD',\n    1313161554: '0x793F3cF97c57798732f3AA36416CaC742223aB20',\n  },\n  vaultHandlerAbi: HandlerABI,\n  emblemVault: {\n    1: '0x82c7a8f707110f5fbb16184a5933e9f78a34c6ab',\n    4: '0xe70AbBc99D8eB32124BF022196c493DB4fBc50FD',\n    80001: '0x8b8407c6184f1f0Fd1082e83d6A3b8349cAcEd12',\n    137: '0x8b8407c6184f1f0Fd1082e83d6A3b8349cAcEd12',\n    100: '0x9058d1A5Fdba852403D5b080abAF31D1379EF653',\n    56: '0x9523022eb4B465Db3e3037d83e4910E3cFF1bD49',\n    250: '0x5434ba8b4A37755Cb3867C9fde39342C0D382857',\n    1337: '0xe70AbBc99D8eB32124BF022196c493DB4fBc50FD',\n    1313161554: '0x14509fCc07892E80eD6BE4cf171407d206A92164',\n  },\n  emblemAbi: EmblemABI,\n  coval: {\n    1: '0x3d658390460295fb963f54dc0899cfb1c30776df',\n    4: '0x44c1a9d7D1F932B4c2811A70eDfFDD6Ae2EB60e6',\n    5: '0x44aA2ae6a29A1434942EB88cB2eD0Fd1De30de83',\n    80001: '0x5cCa9D75DF2dFC117855adD4DD45727dee5287EC',\n    137: '0x4597c8A59Ab28B36840B82B3A674994A279593D0',\n    100: '0x8b8407c6184f1f0Fd1082e83d6A3b8349cAcEd12',\n    56: '0xd15CeE1DEaFBad6C0B3Fd7489677Cc102B141464',\n    250: '0x8b8407c6184f1f0Fd1082e83d6A3b8349cAcEd12',\n    1337: '0xe70AbBc99D8eB32124BF022196c493DB4fBc50FD',\n    1313161554: '0x584039B84b1d36653DAb76DC1246D07b08218706'\n  },\n  covalAbi: CovalABI,\n  nftrade: {\n    137: '0x88f5Cc3624247477bE5f691648A7D1B2631965B9'\n  },\n  nftradeAbi: NftradeABI,\n  claimed: {\n    1: '0xb8D6eB76dABea5b238e999B3145775E54412B2D2',\n    137: '0x62C505E51800901f4B44Ff1f6eD5348c36D37E28',\n    1313161554: '0xE1213fcb2a085B6d26C52f9D8fEc54f0758Fd7b1',\n    5: '0x1342F91DC53B6D222614Ad1f981b5683d4653116'\n  },\n  claimedAbi: ClaimedABI,\n  vaultHandlerV8: {\n    1: \"0x23859b51117dbFBcdEf5b757028B18d7759a4460\",\n    4: \"0xF2eCdFa77C3c8Cabf913529D95081DCB2DE314ec\",\n    5: '0xc15235d210c1b1CdA8643a5eA37687E241B031b0',\n    1337: \"0xfc3A4BBfD522668342bCaDf273a94A46DCe25439\",\n    1313161554: '0xeDb2AC2BfD8d026E4d6C75a04548423936512135',\n  },\n  vaultHandlerV8Abi: VaultHandlerV8,\n  clonableFactoryAbi: ClonableFactory,\n  erc20Abi: ERC20,\n  erc721Abi: ERC721,\n  erc1155Abi: ERC1155,\n  mintVaultQuote: {\n    1: \"0xE5dec92911c78069d727a67C85936EDDbc9B02Cf\"\n  },\n  mintVaultQuoteAbi: mintVaultQuoteAbi\n}\n\nexport const BURN_ADDRESS = '0x5D152dd902CC9198B97E5b6Cf5fc23a8e4330180'\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\"\nexport const EMBLEM_API = API_OVERLOAD? API_OVERLOAD : 'https://api2.emblemvault.io' //'http://localhost:3001' // \nexport const EMBLEM_V2_API =  'https://v2.emblemvault.io' //'http://localhost:3001' //\nexport const SIG_API = 'http://localhost:3002' //'https://tor-us-signer-coval.vercel.app' //\nexport const ORD_API = 'https://api-ord.emblemvault.io/bitcoin/'\n\nexport enum QueryParameters {\n  INPUT = 'input',\n  OUTPUT = 'output',\n  CHAIN = 'chain',\n}\n\nexport const ERC20_BYTES32 = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'name',\n    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n    payable: false,\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'symbol',\n    outputs: [{ internalType: 'bytes32', name: '', type: 'bytes32' }],\n    payable: false,\n    stateMutability: 'pure',\n    type: 'function',\n  },\n]\n"]},"metadata":{},"sourceType":"module"}