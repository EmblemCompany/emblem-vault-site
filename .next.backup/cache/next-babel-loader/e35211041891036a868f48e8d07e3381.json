{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/contract/ERC1155.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Link, Stack, Button, Input } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from '../Refreshing';\nimport { useRouter } from 'next/router';\nimport { TransactionToast } from '../TransactionToast';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { HStack, VStack, Divider } from '@chakra-ui/react';\nimport { contractAddresses } from '../../constants';\nimport { useContract } from '../../hooks';\nimport { EXPLORER_PREFIXES } from '../../utils';\nimport { Contract } from '@ethersproject/contracts';\nexport default function ERC1155() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: true\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(true);\n  const {\n    0: refreshing,\n    1: setRefreshing\n  } = useState(true);\n  const {\n    0: stats,\n    1: setStats\n  } = useState([]);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address || null);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(0);\n  const {\n    0: limit,\n    1: setLimit\n  } = useState(10);\n  const {\n    0: shouldFetchData,\n    1: setShouldFetchData\n  } = useState(address ? true : false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: buttonDisabled,\n    1: setButtonDisabled\n  } = useState(false);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: factories,\n    1: setFactories\n  } = useState([]);\n  const {\n    0: clones,\n    1: setClones\n  } = useState([]);\n  const {\n    0: contractAddress,\n    1: setContractAddress\n  } = useState(query.address);\n  const {\n    0: contract,\n    1: setContract\n  } = useState();\n  const handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  // useEffect(() => {\n  //   if (state.loaded == false && !loadingApi && address) {\n  //     setLoadingApi(false)\n  //     // getPnL()\n  //   }\n  // }, [])\n  // useEffect(() => {\n  //   if (shouldFetchData && address) {\n  //     console.log(\"Should load api after setting consts\", offset)\n  //     setShouldFetchData(false)\n  //     // getPnL()\n  //   } else {\n  //     console.log(\"wtf\")\n  //   }\n  // }, [shouldFetchData, offset])\n  // const fetchDataForLazyLoad = async () =>{    \n  //   console.log('setting new offset to', offset+limit)\n  //   setOffset(offset+limit)\n  //   setShouldFetchData(true)\n  // }\n  useEffect(() => {\n    if (loadingApi && refreshing && contractAddress) {\n      setLoadingApi(false);\n      setState({\n        loaded: true\n      });\n      setRefreshing(false); // alert(0)\n\n      GetContracts();\n    }\n  });\n\n  const StartRefresh = async () => {\n    setRefreshing(true);\n    setLoadingApi(true);\n  };\n\n  async function createClone(cloneType) {\n    let factory = factories.filter(factory => {\n      return factory.type == cloneType;\n    })[0];\n    let factoryContract = getFactoryContract(factory.address);\n    factoryContract.createClone(account).then(({\n      hash\n    }) => {\n      console.log(\"hash\", hash);\n      setHash(hash);\n    });\n  }\n\n  async function GetContracts() {\n    let contract = getCloneContract(contractAddress, \"ERC1155\");\n    setContract(contract);\n    console.log(\"Contract\", contract.methods);\n  }\n\n  async function getFactoryInto(factories, index, values) {\n    let factory = factories[index];\n    let factoryContract = getFactoryContract(factory);\n    let factoryType = await factoryContract.factoryType();\n    let factoryClones = await factoryContract.getClones();\n    let factoryOwner = await factoryContract.owner();\n    let detailedClones = await getCloneInto(factoryClones, 0, factoryType, []);\n    values.push({\n      type: factoryType,\n      address: factory,\n      clones: detailedClones,\n      owner: factoryOwner\n    });\n\n    if (index + 1 == factories.length) {\n      return values;\n    } else {\n      return getFactoryInto(factories, index + 1, values);\n    }\n  }\n\n  async function getClones() {\n    let erc1155 = await handlerContract.getAllRegisteredContractsOfType(1);\n    console.log(\"---------\", erc1155, erc1155.length);\n    erc1155 = await getCloneInto(erc1155, 0, \"ERC1155\", []);\n    let erc721 = await handlerContract.getAllRegisteredContractsOfType(2);\n    erc721 = await getCloneInto(erc721, 0, \"ERC721\", []);\n    let erc20 = await handlerContract.getAllRegisteredContractsOfType(4);\n    erc20 = await getCloneInto(erc20, 0, \"ERC20\", []);\n    setClones(erc1155.concat(erc721).concat(erc20));\n  }\n\n  async function getCloneInto(_clones, index, cloneType, values) {\n    if (_clones.length == 0) return values;\n    let clone = _clones[index];\n    let cloneContract = getCloneContract(clone, cloneType);\n    let cloneOwner = await cloneContract.owner();\n    let cloneName = await cloneContract.name();\n    let decimals = cloneType == \"ERC20\" ? await cloneContract.decimals() : 0;\n    let cloneBalance = cloneType == \"ERC20\" ? calculateBalance((await cloneContract.balanceOf(account)).toNumber(), decimals) : cloneType == \"ERC1155\" ? await getERC1155TokenBalance(cloneContract, account) : 0;\n    let serializable = cloneType != \"ERC1155\" ? false : await cloneContract.isSerialized();\n    values.push({\n      address: clone,\n      owner: cloneOwner,\n      name: cloneName,\n      type: cloneType,\n      balance: cloneBalance,\n      decimals: decimals,\n      serializable: serializable\n    });\n\n    if (index + 1 == _clones.length) {\n      return values;\n    } else {\n      return getCloneInto(_clones, index + 1, cloneType, values);\n    }\n  }\n\n  async function getERC1155TokenBalance(contract, address) {\n    let ids = await contract.getTokenIds();\n    let myIds = ids.length > 0 ? getMyBalanceByIds(ids, 0, contract, address, []) : [];\n\n    async function getMyBalanceByIds(tokenIds, index, contract, address, values) {\n      let id = tokenIds[index];\n      let tokenBalance = await contract.balanceOf(address, id.toNumber());\n\n      if (tokenBalance.toNumber() > 0) {// alert(id.toNumber())\n        // alert(tokenBalance.toNumber())\n      }\n\n      if (index + 1 == tokenIds.length) {\n        return values;\n      } else {\n        return getMyBalanceByIds(tokenIds, index + 1, contract, address, values);\n      }\n    }\n\n    console.log(\"ids\", ids);\n    return ids.length;\n  }\n\n  async function toggleSerializable(address) {\n    let cloneContract = getCloneContract(address, \"ERC1155\");\n    cloneContract.toggleSerialization().then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  }\n\n  function getCloneContract(address, cloneType) {\n    let abi;\n\n    switch (cloneType) {\n      case \"ERC20\":\n        abi = contractAddresses.erc20Abi;\n        break;\n\n      case \"ERC721\":\n        abi = contractAddresses.erc721Abi;\n        break;\n\n      case \"ERC1155\":\n        abi = contractAddresses.erc1155Abi;\n        break;\n    }\n\n    return new Contract(address, abi, library.getSigner(account).connectUnchecked());\n  }\n\n  function getFactoryContract(address) {\n    return new Contract(address, contractAddresses.clonableFactoryAbi, library.getSigner(account).connectUnchecked());\n  }\n\n  function calculateBalance(balance, decimals) {\n    return balance / Math.pow(10, parseInt(decimals));\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }\n  }, refreshing ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    w: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: StartRefresh,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, \"Refresh Data\"), clones.length > 0 ? clones.map((clone, index) => {\n    return __jsx(VStack, {\n      key: \"factory-\" + index,\n      p: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 15\n      }\n    }, __jsx(Box, {\n      w: \"100%\",\n      \"min-width\": \"40px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }, __jsx(Text, {\n      key: \"address-\" + clone.address,\n      ml: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 19\n      }\n    }, clone.owner == account ? \"Owned\" : null, \" \", clone.type, \":\", __jsx(Link, {\n      target: \"_blank\",\n      href: location.protocol + \"//\" + EXPLORER_PREFIXES[chainId] + \"/address/\" + clone.address + \"#readContract\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }\n    }, \" \", clone.address)), __jsx(Divider, {\n      orientation: \"horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 19\n      }\n    }), __jsx(Text, {\n      key: \"name-\" + clone.name + index,\n      ml: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 19\n      }\n    }, \"Name: \", clone.name || \"Not Named\"), __jsx(Divider, {\n      orientation: \"horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 19\n      }\n    }), __jsx(Text, {\n      key: \"balance-\" + clone.balance + index,\n      ml: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 19\n      }\n    }, \"Balance: \", clone.balance), __jsx(Divider, {\n      orientation: \"horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 19\n      }\n    }), __jsx(Text, {\n      key: \"ser-\" + index,\n      ml: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 19\n      }\n    }, \" Serializable: \", clone.serializable.toString() || \"Not Serializable\", clone.type == \"ERC1155\" ? __jsx(Button, {\n      m: 3,\n      onClick: () => {\n        toggleSerializable(clone.address);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 46\n      }\n    }, \"Toggle\") : null), __jsx(Divider, {\n      orientation: \"horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 19\n      }\n    }), __jsx(HStack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 19\n      }\n    }, __jsx(Input, {\n      placeholder: \"TokenId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }\n    }), __jsx(Input, {\n      placeholder: \"Amount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }\n    }), __jsx(Button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }\n    }, \"Mint\"))));\n  }) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      setHash(null);\n      StartRefresh();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }) : null)));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/contract/ERC1155.tsx"],"names":["Box","Flex","Text","Link","Stack","Button","Input","Loader","Refreshing","useRouter","TransactionToast","useWeb3React","useEffect","useState","HStack","VStack","Divider","contractAddresses","useContract","EXPLORER_PREFIXES","Contract","ERC1155","query","account","chainId","library","state","setState","loaded","loadingApi","setLoadingApi","refreshing","setRefreshing","stats","setStats","address","setAddress","offset","setOffset","limit","setLimit","shouldFetchData","setShouldFetchData","hasMore","setHasMore","buttonDisabled","setButtonDisabled","hash","setHash","factories","setFactories","clones","setClones","contractAddress","setContractAddress","contract","setContract","handlerContract","vaultHandlerV8","vaultHandlerV8Abi","GetContracts","StartRefresh","createClone","cloneType","factory","filter","type","factoryContract","getFactoryContract","then","console","log","getCloneContract","methods","getFactoryInto","index","values","factoryType","factoryClones","getClones","factoryOwner","owner","detailedClones","getCloneInto","push","length","erc1155","getAllRegisteredContractsOfType","erc721","erc20","concat","_clones","clone","cloneContract","cloneOwner","cloneName","name","decimals","cloneBalance","calculateBalance","balanceOf","toNumber","getERC1155TokenBalance","serializable","isSerialized","balance","ids","getTokenIds","myIds","getMyBalanceByIds","tokenIds","id","tokenBalance","toggleSerializable","toggleSerialization","abi","erc20Abi","erc721Abi","erc1155Abi","getSigner","connectUnchecked","clonableFactoryAbi","Math","pow","parseInt","map","location","protocol","toString"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from '../Refreshing'\nimport { useRouter } from 'next/router'\nimport { TransactionToast } from '../TransactionToast'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport {HStack, VStack, Circle, Divider } from '@chakra-ui/react'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses } from '../../constants'\nimport { useContract } from '../../hooks'\nimport { EXPLORER_PREFIXES } from '../../utils'\n\nimport { Contract } from '@ethersproject/contracts'\n\nexport default function ERC1155() {\n  const { query } = useRouter()\n  const { account, chainId, library } = useWeb3React()\n  const [state, setState] = useState({ loaded: true })\n  \n  const [loadingApi, setLoadingApi] = useState(true)\n  const [refreshing, setRefreshing] = useState(true)\n  const [stats, setStats] = useState([])\n  const [address, setAddress] = useState(query.address || null)\n  const [offset, setOffset] = useState(0)\n  const [limit, setLimit] = useState(10)\n  const [shouldFetchData, setShouldFetchData] = useState(address? true: false)\n  const [hasMore, setHasMore] = useState(true)\n  const [buttonDisabled, setButtonDisabled] = useState(false)\n\n  const [hash, setHash] = useState(null)\n  const [factories, setFactories] = useState([])\n  const [clones, setClones] = useState([])\n  const [contractAddress, setContractAddress] = useState(query.address)\n  const [contract, setContract] = useState()\n\n  const handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  // useEffect(() => {\n  //   if (state.loaded == false && !loadingApi && address) {\n  //     setLoadingApi(false)\n  //     // getPnL()\n  //   }\n  // }, [])\n\n  // useEffect(() => {\n  //   if (shouldFetchData && address) {\n  //     console.log(\"Should load api after setting consts\", offset)\n  //     setShouldFetchData(false)\n  //     // getPnL()\n  //   } else {\n  //     console.log(\"wtf\")\n  //   }\n  // }, [shouldFetchData, offset])\n\n  // const fetchDataForLazyLoad = async () =>{    \n  //   console.log('setting new offset to', offset+limit)\n  //   setOffset(offset+limit)\n  //   setShouldFetchData(true)\n  // }\n\n    useEffect(() => {\n      if (loadingApi && refreshing && contractAddress) {\n        setLoadingApi(false)\n        setState({loaded: true})\n        setRefreshing(false)\n        // alert(0)\n        GetContracts()\n      }\n    })\n\n  const StartRefresh = async()=>{\n    setRefreshing(true)\n    setLoadingApi(true)\n  }\n\n  async function createClone(cloneType) {\n    let factory = factories.filter(factory=>{ return factory.type == cloneType})[0]\n    let factoryContract = getFactoryContract(factory.address)\n    factoryContract.createClone(account).then(({ hash }: { hash: string }) => {\n      console.log(\"hash\", hash)\n      setHash(hash)\n    })\n  }\n\n  async function GetContracts() {\n    let contract: any = getCloneContract(contractAddress, \"ERC1155\")\n    setContract(contract)\n    console.log(\"Contract\", contract.methods)\n  }\n\n  async function getFactoryInto(factories, index, values) {\n    let factory = factories[index]\n    let factoryContract = getFactoryContract(factory)\n    let factoryType = await factoryContract.factoryType()\n    let factoryClones = await factoryContract.getClones()\n    let factoryOwner = await factoryContract.owner()\n    let detailedClones = await getCloneInto(factoryClones, 0, factoryType, [])\n    \n    values.push({type: factoryType, address: factory, clones: detailedClones, owner: factoryOwner})\n\n    if (index+1 == factories.length) {\n      return values\n    } else {\n      return getFactoryInto(factories, index +1, values)\n    }\n  }\n\n  async function getClones() {\n    let erc1155 = await handlerContract.getAllRegisteredContractsOfType(1)\n    console.log(\"---------\", erc1155, erc1155.length)\n    erc1155 = await getCloneInto(erc1155, 0, \"ERC1155\", [])\n    let erc721 = await handlerContract.getAllRegisteredContractsOfType(2)\n    erc721 = await getCloneInto(erc721, 0, \"ERC721\", [])\n    let erc20 = await handlerContract.getAllRegisteredContractsOfType(4)\n    erc20 = await getCloneInto(erc20, 0, \"ERC20\", [])\n    setClones(erc1155.concat(erc721).concat(erc20))\n  }\n\n  async function getCloneInto(_clones, index, cloneType, values) {\n    if (_clones.length == 0) return values\n    let clone = _clones[index]\n    let cloneContract = getCloneContract(clone, cloneType)\n    let cloneOwner = await cloneContract.owner()\n    let cloneName = await cloneContract.name()\n    let decimals = cloneType == \"ERC20\"?  await cloneContract.decimals() : 0\n    let cloneBalance = cloneType == \"ERC20\"?  calculateBalance((await cloneContract.balanceOf(account)).toNumber(), decimals) : cloneType == \"ERC1155\" ? await getERC1155TokenBalance(cloneContract, account) : 0\n    let serializable = cloneType != \"ERC1155\"? false : await cloneContract.isSerialized()\n    values.push({address: clone, owner: cloneOwner, name: cloneName, type: cloneType, balance: cloneBalance, decimals: decimals, serializable: serializable})\n\n    if (index+1 == _clones.length) {\n      return values\n    } else {\n      return getCloneInto(_clones, index +1, cloneType, values)\n    }\n  }\n\n  async function getERC1155TokenBalance(contract, address) {\n    let ids = await contract.getTokenIds()\n    let myIds = ids.length > 0 ? getMyBalanceByIds(ids, 0, contract, address, []) : []\n\n  async function getMyBalanceByIds(tokenIds, index, contract, address, values) {\n      let id = tokenIds[index]\n      let tokenBalance = await contract.balanceOf(address, id.toNumber())\n      if (tokenBalance.toNumber() > 0) {\n        // alert(id.toNumber())\n        // alert(tokenBalance.toNumber())\n      }\n      if (index+1 == tokenIds.length) {\n        return values\n      } else {\n        return getMyBalanceByIds(tokenIds, index +1, contract, address, values)\n      }\n    }\n    console.log(\"ids\", ids)\n    return ids.length\n  }\n\n  async function toggleSerializable(address) {\n    let cloneContract = getCloneContract(address, \"ERC1155\")\n    cloneContract.toggleSerialization().then(({ hash }: { hash: string }) => {\n      setHash(hash)\n    })\n  }\n\n  function getCloneContract(address, cloneType) {\n    let abi\n    switch(cloneType) {\n      case \"ERC20\":\n        abi = contractAddresses.erc20Abi\n        break;\n      case \"ERC721\":\n        abi = contractAddresses.erc721Abi\n        break;\n      case \"ERC1155\":\n        abi = contractAddresses.erc1155Abi\n        break;\n    }\n    return new Contract(address, abi, library.getSigner(account).connectUnchecked())\n  }\n\n  function getFactoryContract(address) {\n    return new Contract(address, contractAddresses.clonableFactoryAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  function calculateBalance(balance: number, decimals: string) {\n    return balance / Math.pow(10, parseInt(decimals))\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      {refreshing ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Stack align=\"center\" w={\"100%\"}>\n        \n        <Button onClick={StartRefresh}>Refresh Data</Button>\n        \n        { clones.length > 0? (\n          clones.map((clone, index)=>{\n            return (\n              <VStack key={\"factory-\"+index} p={2} >\n                <Box w=\"100%\" min-width=\"40px\">\n                  <Text key={\"address-\" + clone.address} ml={12}>{clone.owner == account? \"Owned\": null} {clone.type}: \n                    <Link target={\"_blank\"} href={location.protocol + \"//\" + EXPLORER_PREFIXES[chainId] + \"/address/\"+clone.address+\"#readContract\"}> {clone.address}</Link>\n                  </Text>\n                  <Divider orientation=\"horizontal\" />\n                  <Text key={\"name-\" + clone.name + index} ml={12}>Name: {clone.name || \"Not Named\"}</Text>\n                  \n                  <Divider orientation=\"horizontal\" />\n                  <Text key={\"balance-\" + clone.balance + index} ml={12}>Balance: {clone.balance}</Text>\n                  <Divider orientation=\"horizontal\" />\n                  <Text key={\"ser-\"+index} ml={12}> Serializable: {clone.serializable.toString() || \"Not Serializable\"} \n                    {clone.type ==\"ERC1155\"?(<Button m={3} onClick={()=>{toggleSerializable(clone.address)}}>Toggle</Button>):null}\n                  </Text>\n                  <Divider orientation=\"horizontal\" />\n                  <HStack>\n                    <Input placeholder={\"TokenId\"}></Input>\n                    <Input placeholder={\"Amount\"}></Input>\n                    <Button>Mint</Button>\n                  </HStack>\n\n                </Box>\n              </VStack>\n            )\n          })\n        ) : null } \n        { hash? (\n          <TransactionToast\n          hash={hash}\n          onComplete={() => {\n            setHash(null)\n            StartRefresh()          \n          }}\n        />\n        ) : null}\n        \n        \n       </Stack>\n      </Flex>\n     \n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}