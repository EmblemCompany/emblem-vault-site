{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/VaultList.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Link, Image, SimpleGrid } from \"@chakra-ui/core\";\nimport { useWeb3React } from '@web3-react/core';\nimport React, { useEffect } from \"react\";\nexport default function VaultList(props) {\n  _s();\n\n  var _this = this;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      vaults = _React$useState2[0],\n      setVaults = _React$useState2[1];\n\n  var validImage = function validImage(data) {\n    if (data.includes('http')) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  var getVaults = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('https://api.emblemvault.io/vaults/' + account, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'service': 'evmetadata',\n                  'chainId': chainId.toString()\n                }\n              });\n\n            case 2:\n              responce = _context.sent;\n              _context.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context.sent;\n              setVaults(jsonData);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getVaults() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getVaults();\n  }, []);\n  return __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    justifyItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, vaults.length ? vaults.map(function (vault) {\n    var url = './vault/?id=' + vault.tokenId;\n    return (// <Grid key={vault.tokenId} templateColumns=\"repeat(5, 1fr)\" gap={1}>\n      __jsx(SimpleGrid, {\n        minChildWidth: \"24rem\",\n        columns: 2,\n        spacing: 10,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }\n      }, __jsx(Link, {\n        href: url,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 19\n        }\n      }, __jsx(Box, {\n        maxW: \"sm\",\n        borderWidth: \"1px\",\n        rounded: \"lg\",\n        overflow: \"hidden\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }\n      }, __jsx(Box, {\n        mt: \"1\",\n        fontWeight: \"semibold\",\n        as: \"h4\",\n        lineHeight: \"tight\",\n        isTruncated: true,\n        p: 1,\n        textAlign: \"center\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 23\n        }\n      }, vault.name, __jsx(Image, {\n        src: validImage(vault.image) ? vault.image : \"https://circuitsofvalue.com/public/coval-logo.png\",\n        size: \"250px\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }\n      })), __jsx(Box, {\n        p: \"6\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 23\n        }\n      }, __jsx(Box, {\n        d: \"flex\",\n        alignItems: \"baseline\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }\n      }, __jsx(Box, {\n        color: \"gray.500\",\n        fontWeight: \"semibold\",\n        letterSpacing: \"wide\",\n        fontSize: \"xs\",\n        textTransform: \"uppercase\",\n        ml: \"2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 27\n        }\n      }, vault.values.length ? vault.values.map(function (coin) {\n        return __jsx(Text, {\n          key: coin.name,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 35\n          }\n        }, coin.balance, \" \", coin.name);\n      }) : __jsx(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 33\n        }\n      }, \"Nothing in here! Fill 'er up!\"))))))) // </Grid>\n\n    );\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, \"YOU DON'T SEEM TO HAVE ANY VAULTS. \", \" \", __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, \"CREATE ONE HERE!\")));\n}\n\n_s(VaultList, \"159Y1YZHaM8GnKfFlxW8WZvvM5o=\", false, function () {\n  return [useWeb3React];\n});\n\n_c = VaultList;\n\nvar _c;\n\n$RefreshReg$(_c, \"VaultList\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/VaultList.tsx"],"names":["Box","Flex","Text","Link","Image","SimpleGrid","useWeb3React","React","useEffect","VaultList","props","account","chainId","useState","vaults","setVaults","validImage","data","includes","getVaults","fetch","method","headers","toString","responce","json","jsonData","length","map","vault","url","tokenId","name","image","values","coin","balance"],"mappings":"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","sourcesContent":["import {\n    Box,\n    Flex,\n    Grid,\n    Text,\n    Link,\n    Image,\n    SimpleGrid\n} from \"@chakra-ui/core\";\n\nimport { useWeb3React } from '@web3-react/core'\nimport React, { useEffect, useState } from \"react\";\n\nexport default function VaultList(props: any) {\n\n    const { account, chainId } = useWeb3React()\n    const [vaults, setVaults] = React.useState([])\n    const validImage = function(data){\n      if (data.includes('http')) {\n        return true\n      } else {\n        return false\n      }\n    }\n    const getVaults = async () => {\n      // const responce = await fetch('https://api.emblemvault.io/vaults/0x5a63264914a1eCB626e32e8AD683704bA7b0621f', {\n      const responce = await fetch('https://api.emblemvault.io/vaults/' + account, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'service': 'evmetadata',\n          'chainId': chainId.toString()\n        },\n      })\n      const jsonData = await responce.json()\n      setVaults(jsonData)\n    }\n\n    useEffect(() => {\n        getVaults()\n      }, [])\n\n    return (\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\" justifyItems=\"center\">\n        {vaults.length\n          ? vaults.map((vault) => {\n            var url = './vault/?id=' + vault.tokenId\n            return (\n              // <Grid key={vault.tokenId} templateColumns=\"repeat(5, 1fr)\" gap={1}>\n              <SimpleGrid minChildWidth=\"24rem\" columns={2} spacing={10}>\n                  <Link href={url}>\n                    <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\" >\n                      <Box\n                        mt=\"1\"\n                        fontWeight=\"semibold\"\n                        as=\"h4\"\n                        lineHeight=\"tight\"\n                        isTruncated\n                        p={1}\n                        textAlign=\"center\"\n                      >\n                        {vault.name}\n\n                        <Image src={validImage(vault.image)\n                          ? vault.image\n                          : \"https://circuitsofvalue.com/public/coval-logo.png\"\n                        }\n                          size=\"250px\"\n                        />\n                      </Box>\n\n                      <Box p=\"6\">\n                        <Box d=\"flex\" alignItems=\"baseline\">\n                          <Box\n                            color=\"gray.500\"\n                            fontWeight=\"semibold\"\n                            letterSpacing=\"wide\"\n                            fontSize=\"xs\"\n                            textTransform=\"uppercase\"\n                            ml=\"2\"\n                          >\n                            {vault.values.length\n                              ? vault.values.map((coin) => {\n                                return (\n                                  <Text key={coin.name}>\n                                    {coin.balance} {coin.name}\n                                  </Text>\n                                )\n                              })\n                              : <Text>Nothing in here! Fill 'er up!</Text>\n                            }\n                          </Box>\n                        </Box>\n                      </Box>\n                    </Box>\n                  </Link>\n                </SimpleGrid>\n              // </Grid>\n            )\n          })\n          :\n          <Text>\n            YOU DON'T SEEM TO HAVE ANY VAULTS. {\" \"}\n            <Link color=\"#638cd8\" href=\"../create\">\n              CREATE ONE HERE!\n            </Link>\n          </Text>\n        }\n      </Flex>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}