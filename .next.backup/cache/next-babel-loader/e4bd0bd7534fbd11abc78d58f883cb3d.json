{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// import { Box, Flex, Text, Link, Image, Stack, Spinner, useColorMode } from '@chakra-ui/core'\nimport { Box, Flex, Text, Link, Stack, Button, Checkbox, CheckboxGroup, Radio, RadioGroup, Input, Select, useColorMode } from '@chakra-ui/core';\nimport { HStack, VStack } from '@chakra-ui/react';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Embed from './Embed';\nexport default function Find() {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: pagePosition,\n    1: setPagePosition\n  } = useState(Number(query.start) || 0);\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: true\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: experimental,\n    1: setExperimental\n  } = useState(query.experimental);\n  const {\n    colorMode\n  } = useColorMode();\n  const {\n    0: shouldFetchData,\n    1: setShouldFetchData\n  } = useState(false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(0);\n  const {\n    0: q,\n    1: setQ\n  } = useState(query && Object.keys(query).length > 0);\n  const {\n    0: hideClaimed,\n    1: setHideClaimed\n  } = useState(false);\n  const {\n    0: hideUnminted,\n    1: setHideUnminted\n  } = useState(false);\n  const {\n    0: assetName,\n    1: setAssetName\n  } = useState(query.name);\n  const {\n    0: tempAssetName,\n    1: setTempAssetName\n  } = useState(assetName || '');\n  const {\n    0: coin,\n    1: setCoin\n  } = useState(query.coin);\n  const {\n    0: tempCoin,\n    1: setTempCoin\n  } = useState(coin || '');\n  const {\n    0: project,\n    1: setProject\n  } = useState(query.project);\n  const {\n    0: tempProject,\n    1: setTempProject\n  } = useState(project || '');\n  const {\n    0: projects,\n    1: setProjects\n  } = useState([]);\n  const {\n    0: loadedProjects,\n    1: setLoadedProjects\n  } = useState(false);\n  const {\n    0: searchType,\n    1: setSearchType\n  } = useState(query.searchType || 'filter');\n  const {\n    0: tempSearchType,\n    1: setTempSearchType\n  } = useState(searchType.toString());\n  const {\n    0: vaultName,\n    1: setVaultName\n  } = useState(query.vaultName);\n  const {\n    0: tempVaultName,\n    1: setTempVaultName\n  } = useState(vaultName || '');\n  const {\n    0: vaultDescription,\n    1: setVaultDescription\n  } = useState(query.vaultDescription);\n  const {\n    0: tempVaultDescription,\n    1: setTempVaultDescription\n  } = useState(vaultDescription);\n  const {\n    0: network,\n    1: setNetwork\n  } = useState(query.network || null);\n  const {\n    0: balanceChecks,\n    1: setBalanceChecks\n  } = useState(Object.keys(query).filter(key => {\n    return key !== \"vaultName\" && key !== \"vaultDescription\" && key !== \"searchType\";\n  }));\n  const {\n    0: metadataChecks,\n    1: setMetadataChecks\n  } = useState(Object.keys(query).filter(key => {\n    return key !== \"name\" && key !== \"coin\" && key !== \"project\" && key !== \"searchType\";\n  }));\n  const PAGE_SIZE = 20;\n\n  const getProjects = async () => {\n    try {\n      const response = await fetch(EMBLEM_API + '/search/projects', {\n        method: 'GET',\n        headers: {\n          service: 'evmetadata'\n        }\n      });\n      let jsonData = await response.json();\n      setProjects(jsonData);\n    } catch (error) {}\n  };\n\n  const getVaults = async () => {\n    let body = {};\n\n    if (metadataChecks.length > 0) {\n      body.metadata = {};\n      metadataChecks.forEach(key => {\n        if (key == \"vaultDescription\") {\n          body.metadata[\"description\"] = tempVaultDescription;\n        }\n\n        if (key == \"vaultName\") {\n          body.metadata[\"name\"] = tempVaultName;\n        }\n      });\n    }\n\n    if (balanceChecks.length > 0) {\n      body.balance = {};\n      balanceChecks.forEach(key => {\n        if (key == \"name\") {\n          body.balance[\"name\"] = tempAssetName;\n        }\n\n        if (key == \"coin\") {\n          body.balance[\"coin\"] = tempCoin;\n        }\n\n        if (key == \"project\") {\n          body.balance[\"project\"] = tempProject;\n        }\n      });\n    }\n\n    try {\n      const response = await fetch(EMBLEM_API + '/find/' + tempSearchType + '?start=' + offset + '&size=' + PAGE_SIZE, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify(body)\n      });\n      let jsonData = await response.json();\n      console.log('------ vaults', jsonData);\n      jsonData.length == 0 || jsonData.length < PAGE_SIZE ? setHasMore(false) : setHasMore(true);\n      setVaults(vaults.concat(jsonData));\n      setState({\n        loaded: true\n      });\n      setLoadingApi(false);\n    } catch (error) {}\n  };\n\n  const fetchData = async () => {\n    console.log(offset, PAGE_SIZE, offset + PAGE_SIZE);\n    setOffset(offset + PAGE_SIZE);\n    setShouldFetchData(true);\n  };\n\n  const {\n    0: acct,\n    1: setAcct\n  } = useState('');\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [account, acct]);\n  const {\n    0: chain,\n    1: setChain\n  } = useState(chainId);\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    // console.log('here', chainId, chain, account, state)\n    if (!account && !state.loaded) {\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(() => {\n    if (shouldFetchData) {\n      console.log('here 1');\n      setShouldFetchData(false);\n      setLoadingApi(true);\n      getVaults();\n    } else {\n      console.log('no fetch');\n    }\n  }, [shouldFetchData]);\n  useEffect(() => {\n    if (q && vaults.length == 0 && !loadingApi) {\n      console.log('here 2');\n      setShouldFetchData(true); // getVaults()\n    } else {\n      console.log('no fetch', q, vaults);\n    }\n  }, [q, vaults]);\n  useEffect(() => {\n    if (projects.length == 0 && !loadedProjects) {\n      setLoadedProjects(true);\n      getProjects();\n    }\n  }); // useEffect(() => {\n  //   if (query.assetName && !balanceChecks.includes('assetName')) {      \n  //     setBalanceChecks(balanceChecks.concat('assetName'))\n  //   }    \n  // })\n  // useEffect(() => {\n  //   if (query.coin && !balanceChecks.includes('coin')) {      \n  //     setBalanceChecks(balanceChecks.concat('coin'))\n  //   }\n  // })\n\n  function addOrRemoveBalanceFilter(target) {\n    if (balanceChecks.includes(target)) {\n      setBalanceChecks(balanceChecks.filter(item => item !== target));\n    } else {\n      setBalanceChecks(balanceChecks.concat(target));\n    }\n\n    console.log('balance checks', balanceChecks);\n  }\n\n  function addOrRemoveMetadataFilter(target) {\n    if (metadataChecks.includes(target)) {\n      setMetadataChecks(metadataChecks.filter(item => item !== target));\n    } else {\n      setMetadataChecks(metadataChecks.concat(target));\n    }\n\n    console.log('metadata checks', metadataChecks);\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded\n  }, loadingApi ? __jsx(Refreshing, null) : '', __jsx(VStack, {\n    width: \"100%\",\n    align: \"center\",\n    justifyContent: \"center\"\n  }, __jsx(RadioGroup, {\n    onChange: e => {\n      setTempSearchType(e.target.value);\n    },\n    defaultValue: tempSearchType,\n    value: tempSearchType\n  }, __jsx(Stack, {\n    spacing: 4,\n    direction: \"row\"\n  }, __jsx(Radio, {\n    isChecked: tempSearchType == \"filter\" ? true : false,\n    value: \"filter\"\n  }, \"Filter (AND)\"), __jsx(Radio, {\n    isChecked: tempSearchType === \"or\" ? true : false,\n    value: \"or\"\n  }, \"Search (OR)\"))), __jsx(CheckboxGroup, null, __jsx(HStack, null, __jsx(Checkbox, {\n    isDisabled: metadataChecks.length > 0,\n    key: \"check1\",\n    isChecked: balanceChecks.includes('name'),\n    value: \"name\",\n    onChange: e => {\n      addOrRemoveBalanceFilter(e.target.value);\n    }\n  }, \"Asset Name\"), __jsx(Checkbox, {\n    isDisabled: metadataChecks.length > 0,\n    key: \"check2\",\n    isChecked: balanceChecks.includes('coin'),\n    value: \"coin\",\n    onChange: e => {\n      addOrRemoveBalanceFilter(e.target.value);\n    }\n  }, \"Blockchain\"), __jsx(Checkbox, {\n    isDisabled: metadataChecks.length > 0,\n    key: \"check3\",\n    isChecked: balanceChecks.includes('project'),\n    value: \"project\",\n    onChange: e => {\n      addOrRemoveBalanceFilter(e.target.value);\n    }\n  }, \"Project\"), __jsx(Checkbox, {\n    isDisabled: balanceChecks.length > 0,\n    key: \"check4\",\n    isChecked: metadataChecks.includes('vaultName'),\n    value: \"vaultName\",\n    onChange: e => {\n      addOrRemoveMetadataFilter(e.target.value);\n    }\n  }, \"Vault Name\"), __jsx(Checkbox, {\n    isDisabled: balanceChecks.length > 0,\n    key: \"check5\",\n    isChecked: metadataChecks.includes('vaultDescription'),\n    value: \"vaultDescription\",\n    onChange: e => {\n      addOrRemoveMetadataFilter(e.target.value);\n    }\n  }, \"Vault Description\"), __jsx(Checkbox, {\n    isChecked: hideClaimed == true,\n    key: \"check6\",\n    value: \"hideClaimed\",\n    onChange: e => {\n      setHideClaimed(!hideClaimed);\n    }\n  }, \"Hide Claimed\"), __jsx(Checkbox, {\n    isChecked: hideUnminted == true,\n    key: \"check6\",\n    value: \"hideUnminted\",\n    onChange: e => {\n      setHideUnminted(!hideUnminted);\n    }\n  }, \"Hide Un-Minted\"))), balanceChecks.map((check, index) => {\n    return __jsx(VStack, null, __jsx(Text, null, index == 0 ? null : tempSearchType == \"or\" ? \"or\" : \"and\", \" \", check == \"coin\" ? \"from Blockchain\" : check == \"name\" ? \"within balances for the Asset Name of\" : \"of the Project\"), check == \"name\" ? __jsx(Input, {\n      value: tempAssetName,\n      onChange: e => setTempAssetName(e.target.value)\n    }) : check == \"coin\" ? __jsx(Select, {\n      value: tempCoin,\n      onChange: e => {\n        setTempCoin(e.target.value);\n      }\n    }, __jsx(\"option\", {\n      key: \"1\",\n      value: \"POLYGON\"\n    }, \"Polygon (Matic)\"), __jsx(\"option\", {\n      key: \"2\",\n      value: \"XCP\"\n    }, \"Counterparty\"), __jsx(\"option\", {\n      key: \"3\",\n      value: \"BTC\"\n    }, \"Bitcoin\"), __jsx(\"option\", {\n      key: \"4\",\n      value: \"BCH\"\n    }, \"Bitcoin Cash\"), __jsx(\"option\", {\n      key: \"5\",\n      value: \"DGB\"\n    }, \"Digibyte\"), __jsx(\"option\", {\n      key: \"6\",\n      value: \"DOGE\"\n    }, \"Dogecoin\"), __jsx(\"option\", {\n      key: \"7\",\n      value: \"ETH\"\n    }, \"Ethereum\"), __jsx(\"option\", {\n      key: \"8\",\n      value: \"FTM\"\n    }, \"Fantom\"), __jsx(\"option\", {\n      key: \"9\",\n      value: \"LTC\"\n    }, \"Litecoin\"), __jsx(\"option\", {\n      key: \"10\",\n      value: \"NMC\"\n    }, \"Namecoin\"), __jsx(\"option\", {\n      key: \"11\",\n      value: \"OMNI\"\n    }, \"Omni\"), __jsx(\"option\", {\n      key: \"12\",\n      value: \"xDai\"\n    }, \"xDai\"), __jsx(\"option\", {\n      key: \"13\",\n      value: \"OMNI\"\n    }, \"Omni\"), __jsx(\"option\", {\n      key: \"14\",\n      value: \"XDP\"\n    }, \"Doge Party\"), __jsx(\"option\", {\n      key: \"15\",\n      value: \"XMP\"\n    }, \"Mona Party\"), __jsx(\"option\", {\n      key: \"16\",\n      value: \"XTZ\"\n    }, \"Tezos\")) : check == \"project\" ? __jsx(Select, {\n      value: tempProject,\n      onChange: e => {\n        setTempProject(e.target.value);\n      }\n    }, projects.map((project, index) => {\n      return __jsx(\"option\", {\n        key: \"project-\" + index,\n        value: project\n      }, project);\n    })) : null);\n  }), metadataChecks.map((check, index) => {\n    return __jsx(VStack, null, __jsx(Text, null, index == 0 ? null : tempSearchType == \"or\" ? \"or\" : \"and\", \" \", check == \"vaultName\" ? \"within vault name\" : check == \"vaultDescription\" ? \"within vault description\" : null), check == \"vaultName\" ? __jsx(Input, {\n      value: tempVaultName,\n      onChange: e => setTempVaultName(e.target.value)\n    }) : check == \"vaultDescription\" ? __jsx(Input, {\n      value: tempVaultDescription,\n      onChange: e => setTempVaultDescription(e.target.value)\n    }) : null);\n  }), __jsx(Button, {\n    m: 2,\n    isDisabled: balanceChecks.length < 1 && metadataChecks.length < 1,\n    onClick: () => {\n      setOffset(0);\n      setState({\n        loaded: false\n      });\n      setVaults([]);\n      setQ(true);\n      let loc = location.href.split('?')[0] + '?';\n      metadataChecks.forEach(key => {\n        if (key == \"vaultDescription\") {\n          loc = loc + key + '=' + tempVaultDescription + \"&\";\n        }\n\n        if (key == \"vaultName\") {\n          loc = loc + key + '=' + tempVaultName + \"&\";\n        }\n      });\n      balanceChecks.forEach(key => {\n        console.log(key);\n\n        if (key == \"name\") {\n          loc = loc + key + '=' + tempAssetName + \"&\";\n        }\n\n        if (key == \"coin\") {\n          loc = loc + key + '=' + tempCoin + \"&\";\n        }\n\n        if (key == \"project\") {\n          loc = loc + key + '=' + tempProject + \"&\";\n        }\n      });\n\n      if (tempSearchType) {\n        loc = loc + \"searchType=\" + tempSearchType + \"&\";\n      } // let loc = location.href.split('?')[0]+\"?q=\"+temp_q +  \"&network=\" + network\n\n\n      console.log(\"SEARCH\", loc);\n      window.history.pushState('', 'Title', loc);\n    }\n  }, \"Search\")), q ? __jsx(InfiniteScroll, {\n    className: \"infinite-scroll\",\n    scrollableTarget: \"shannon-container\" // height={200}\n    ,\n    dataLength: vaults.length //This is important field to render the next data\n    ,\n    next: fetchData,\n    hasMore: hasMore,\n    loader: __jsx(Refreshing, null),\n    endMessage: __jsx(\"p\", {\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(\"b\", null, \"Yay! You have seen it all\"))\n  }, __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10\n  }, vaults.length ? vaults.map((vault, index) => {\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n    let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId;\n    const flexSettings = {\n      flex: '1',\n      minW: '200px',\n      maxW: '200px',\n      borderWidth: '1px',\n      // color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    const redirect = function () {\n      setLoadingApi(true);\n      location.href = url;\n    };\n\n    if (hideClaimed && vault.status == 'claimed' || hideUnminted && !vault.live) {\n      return null;\n    } else {\n      return __jsx(Link, {\n        href: url,\n        className: \"vaultLink\"\n      }, __jsx(Box, _extends({\n        className: \"NFT newest\",\n        key: index\n      }, flexSettings, {\n        onClick: redirect\n      }), __jsx(Text, {\n        fontWeight: \"semibold\",\n        textAlign: \"center\",\n        mt: 2,\n        pl: 2,\n        isTruncated: true\n      }, vault.name, !vault.private && vault.totalValue > 0 ? ': ~$' + vault.totalValue : null), __jsx(Stack, {\n        align: \"center\"\n      }, __jsx(Embed, {\n        className: \"d-block w-100 NFT-newest-image\",\n        url: vault.image\n      })), __jsx(Box, {\n        d: \"flex\",\n        alignItems: \"baseline\"\n      }), __jsx(Stack, {\n        align: \"center\",\n        mt: 3\n      }, vault.status == 'claimed' ? __jsx(Text, {\n        color: \"green.500\"\n      }, \"CLAIMED\") : null, __jsx(Text, {\n        fontSize: \"xs\"\n      }, \"Id: \", vault.tokenId))));\n    }\n  }) : __jsx(Text, null, \"YOU DON'T SEEM TO HAVE ANY VAULTS.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\"\n  }, \"CREATE ONE HERE!\")))) : null);\n}","map":null,"metadata":{},"sourceType":"module"}