{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text, Link, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nvar _totalValueLocked = 0;\nexport default function LeaderBoard() {\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useState = useState([]),\n      vaults = _useState[0],\n      setVaults = _useState[1];\n\n  var _useState2 = useState({\n    loaded: false\n  }),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(false),\n      loadingApi = _useState3[0],\n      setLoadingApi = _useState3[1];\n\n  var _useState4 = useState(false),\n      loadingOwners = _useState4[0],\n      setLoadingOwners = _useState4[1];\n\n  var _useState5 = useState(query.address),\n      address = _useState5[0],\n      setAddress = _useState5[1];\n\n  var _useState6 = useState([]),\n      owners = _useState6[0],\n      setOwners = _useState6[1];\n\n  var _useState7 = useState(0),\n      calculatedValue = _useState7[0],\n      setCalculatedValue = _useState7[1];\n\n  var _useState8 = useState(0),\n      totalValueLocked = _useState8[0],\n      setTotalValueLocked = _useState8[1];\n\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  var getOwners = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var totalSupply;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setState({\n                loaded: true\n              });\n\n              if (loadingOwners) {\n                _context.next = 6;\n                break;\n              }\n\n              setOwners([]);\n              setLoadingOwners(true);\n              _context.next = 7;\n              break;\n\n            case 6:\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return emblemContract.totalSupply();\n\n            case 9:\n              totalSupply = _context.sent;\n              console.log(totalSupply);\n              getTokensByIndex(Number(totalSupply.toString()), 0, function () {\n                function compare(a, b) {\n                  if (a.value > b.value) return -1;\n                  if (b.value > a.value) return 1;\n                  return 0;\n                }\n\n                console.log('sorted owners', owners.sort(compare));\n                setTotalValueLocked(_totalValueLocked);\n                setLoadingOwners(false);\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getOwners() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getValueForNft = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tokenId, cb) {\n      var response, jsonData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return fetch(EMBLEM_API + '/value/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 3:\n              response = _context2.sent;\n              _context2.next = 6;\n              return response.json();\n\n            case 6:\n              jsonData = _context2.sent;\n              return _context2.abrupt(\"return\", cb(jsonData.value || 0));\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](0);\n              return _context2.abrupt(\"return\", cb(0));\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 10]]);\n    }));\n\n    return function getValueForNft(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  function getTokensByIndex(_x3, _x4, _x5) {\n    return _getTokensByIndex.apply(this, arguments);\n  }\n\n  function _getTokensByIndex() {\n    _getTokensByIndex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(count, index, cb) {\n      var tokenId;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return emblemContract.tokenByIndex(index);\n\n            case 2:\n              tokenId = _context3.sent;\n              console.log('tokenId', tokenId.toString(), index);\n              getOwner(tokenId.toString(), function () {\n                if (count - 1 < index + 1) {\n                  return cb();\n                } else {\n                  return getTokensByIndex(count, index + 1, cb);\n                }\n              });\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _getTokensByIndex.apply(this, arguments);\n  }\n\n  function getOwner(_x6, _x7) {\n    return _getOwner.apply(this, arguments);\n  }\n\n  function _getOwner() {\n    _getOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(tokenId, cb) {\n      var owner;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return emblemContract.ownerOf(tokenId);\n\n            case 2:\n              owner = _context4.sent;\n\n              if (!(owner === '0x0000000000000000000000000000000000000000' || owner.toLowerCase() === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180')) {\n                _context4.next = 5;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", cb());\n\n            case 5:\n              if (owners.filter(function (item) {\n                return item.address === owner;\n              }).length < 1) {\n                getValueForNft(tokenId, function (value) {\n                  _totalValueLocked = _totalValueLocked + value;\n                  setCalculatedValue(value);\n                  console.log(\"tokenId Value\", tokenId, value);\n                  owners.push({\n                    address: owner,\n                    value: value,\n                    vaults: [{\n                      tokenId: tokenId,\n                      value: value\n                    }]\n                  });\n                  setOwners(owners);\n                });\n              } else {\n                getValueForNft(tokenId, function (value) {\n                  _totalValueLocked = _totalValueLocked + value;\n                  setCalculatedValue(value);\n                  console.log(\"tokenId Value\", tokenId, value);\n                  owners.filter(function (item) {\n                    return item.address === owner;\n                  })[0].vaults.push({\n                    address: owner,\n                    tokenId: tokenId.toString(),\n                    value: owners.filter(function (item) {\n                      return item.address === owner;\n                    })[0].value\n                  });\n                  setOwners(owners);\n                });\n              }\n\n              return _context4.abrupt(\"return\", cb());\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _getOwner.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    account && chainId ? getOwners() : setState({\n      loaded: true\n    });\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded\n  }, loadingOwners ? __jsx(Refreshing, null) : '', __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\"\n  }, __jsx(Stack, null, __jsx(Text, null, \"Total Value Locked: \", totalValueLocked === 0 ? \"Calculating...\" : \"$\" + totalValueLocked), owners.map(function (item) {\n    var pieces = location.pathname.split('/');\n    pieces.pop();\n    var url = location.origin + pieces.join('/') + '/vaultlist?address=' + item.address;\n    return __jsx(Link, {\n      href: url,\n      key: item.address,\n      isExternal: true\n    }, \"Address: \", item.address, \" Vaults: \", item.vaults.length, \" TVL: $\", item.value);\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}