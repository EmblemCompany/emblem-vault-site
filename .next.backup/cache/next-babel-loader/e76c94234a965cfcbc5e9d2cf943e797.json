{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Stack, Button } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useState } from 'react';\nimport { VStack, Divider } from '@chakra-ui/react';\nimport { contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nimport { Contract } from '@ethersproject/contracts';\nexport default function Admin() {\n  _s();\n\n  var _this = this;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useState = useState({\n    loaded: true\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(false),\n      loadingApi = _useState2[0],\n      setLoadingApi = _useState2[1];\n\n  var _useState3 = useState([]),\n      stats = _useState3[0],\n      setStats = _useState3[1];\n\n  var _useState4 = useState(query.address || null),\n      address = _useState4[0],\n      setAddress = _useState4[1];\n\n  var _useState5 = useState(0),\n      offset = _useState5[0],\n      setOffset = _useState5[1];\n\n  var _useState6 = useState(10),\n      limit = _useState6[0],\n      setLimit = _useState6[1];\n\n  var _useState7 = useState(address ? true : false),\n      shouldFetchData = _useState7[0],\n      setShouldFetchData = _useState7[1];\n\n  var _useState8 = useState(true),\n      hasMore = _useState8[0],\n      setHasMore = _useState8[1];\n\n  var _useState9 = useState(false),\n      buttonDisabled = _useState9[0],\n      setButtonDisabled = _useState9[1];\n\n  var _useState10 = useState([]),\n      factories = _useState10[0],\n      setFactories = _useState10[1];\n\n  var _useState11 = useState([]),\n      factoryTypes = _useState11[0],\n      setFactoryTypes = _useState11[1];\n\n  var handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n\n  // useEffect(() => {\n  //   if (state.loaded == false && !loadingApi && address) {\n  //     setLoadingApi(false)\n  //     // getPnL()\n  //   }\n  // }, [])\n  // useEffect(() => {\n  //   if (shouldFetchData && address) {\n  //     console.log(\"Should load api after setting consts\", offset)\n  //     setShouldFetchData(false)\n  //     // getPnL()\n  //   } else {\n  //     console.log(\"wtf\")\n  //   }\n  // }, [shouldFetchData, offset])\n  // const fetchDataForLazyLoad = async () =>{    \n  //   console.log('setting new offset to', offset+limit)\n  //   setOffset(offset+limit)\n  //   setShouldFetchData(true)\n  // }\n  var HandleClick = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              GetContracts();\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function HandleClick() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  function GetContracts() {\n    return _GetContracts.apply(this, arguments);\n  }\n\n  function _GetContracts() {\n    _GetContracts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var results, factories, getFactoryInto, _getFactoryInto;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _getFactoryInto = function _getFactoryInto3() {\n                _getFactoryInto = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(index, types) {\n                  var factory, factoryContract, factoryType, clones;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          factory = factories[index];\n                          factoryContract = getFactoryContract(factory);\n                          _context2.next = 4;\n                          return factoryContract.factoryType();\n\n                        case 4:\n                          factoryType = _context2.sent;\n                          _context2.next = 7;\n                          return factoryContract.getClones();\n\n                        case 7:\n                          clones = _context2.sent;\n                          types.push({\n                            type: factoryType,\n                            address: factory,\n                            clones: clones\n                          });\n\n                          if (!(index + 1 == factories.length)) {\n                            _context2.next = 13;\n                            break;\n                          }\n\n                          return _context2.abrupt(\"return\", setFactories(types));\n\n                        case 13:\n                          return _context2.abrupt(\"return\", getFactoryInto(index + 1, types));\n\n                        case 14:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n                return _getFactoryInto.apply(this, arguments);\n              };\n\n              getFactoryInto = function _getFactoryInto2(_x, _x2) {\n                return _getFactoryInto.apply(this, arguments);\n              };\n\n              results = [];\n              _context3.next = 5;\n              return handlerContract.getAllRegisteredContractsOfType(8);\n\n            case 5:\n              factories = _context3.sent;\n              _context3.next = 8;\n              return getFactoryInto(0, []);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _GetContracts.apply(this, arguments);\n  }\n\n  function getFactoryContract(address) {\n    return new Contract(address, contractAddresses.clonableFactoryAbi, library.getSigner(account).connectUnchecked());\n  }\n\n  var mockData = {\n    \"handler\": \"0x5B8189BCC7565C03C98994b5D7BfbeB1a4296FfE\"\n  };\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    w: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: HandleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, \"Click\"), factories.length > 0 ? factories.map(function (factory, index) {\n    return __jsx(VStack, {\n      key: \"factory-\" + index,\n      p: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, __jsx(Box, {\n      className: \"coin-image-container\",\n      w: \"100%\",\n      \"min-width\": \"40px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 19\n      }\n    }, factory.type, \" Factory: \", factory.address), __jsx(Divider, {\n      orientation: \"vertical\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 19\n      }\n    })));\n  }) : null)));\n}\n\n_s(Admin, \"bDosR2wua4OySgP8oBZ+EqR/Cb4=\", false, function () {\n  return [useRouter, useWeb3React, useContract];\n});\n\n_c = Admin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Admin.tsx"],"names":["Box","Flex","Text","Stack","Button","Loader","Refreshing","useRouter","useWeb3React","useState","VStack","Divider","contractAddresses","useContract","Contract","Admin","query","account","chainId","library","loaded","state","setState","loadingApi","setLoadingApi","stats","setStats","address","setAddress","offset","setOffset","limit","setLimit","shouldFetchData","setShouldFetchData","hasMore","setHasMore","buttonDisabled","setButtonDisabled","factories","setFactories","factoryTypes","setFactoryTypes","handlerContract","vaultHandlerV8","vaultHandlerV8Abi","HandleClick","GetContracts","getFactoryInto","index","types","factory","factoryContract","getFactoryContract","factoryType","getClones","clones","push","type","length","results","getAllRegisteredContractsOfType","clonableFactoryAbi","getSigner","connectUnchecked","mockData","map"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Button, BoxProps, Input, Select, Tabs, Tab, TabList, TabPanels, TabPanel } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport {HStack, VStack, Circle, Divider } from '@chakra-ui/react'\nimport { EMBLEM_API, BURN_ADDRESS, ZERO_ADDRESS, contractAddresses } from '../constants'\nimport { useContract } from '../hooks'\n\nimport { Contract } from '@ethersproject/contracts'\n\nexport default function Admin() {\n  const { query } = useRouter()\n  const { account, chainId, library } = useWeb3React()\n  const [state, setState] = useState({ loaded: true })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [stats, setStats] = useState([])\n  const [address, setAddress] = useState(query.address || null)\n  const [offset, setOffset] = useState(0)\n  const [limit, setLimit] = useState(10)\n  const [shouldFetchData, setShouldFetchData] = useState(address? true: false)\n  const [hasMore, setHasMore] = useState(true)\n  const [buttonDisabled, setButtonDisabled] = useState(false)\n\n  const [factories, setFactories] = useState([])\n  const [factoryTypes, setFactoryTypes] = useState([])\n\n  const handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true)\n\n  interface ErrorWithCode extends Error {\n    code?: number\n  }\n\n  // useEffect(() => {\n  //   if (state.loaded == false && !loadingApi && address) {\n  //     setLoadingApi(false)\n  //     // getPnL()\n  //   }\n  // }, [])\n\n  // useEffect(() => {\n  //   if (shouldFetchData && address) {\n  //     console.log(\"Should load api after setting consts\", offset)\n  //     setShouldFetchData(false)\n  //     // getPnL()\n  //   } else {\n  //     console.log(\"wtf\")\n  //   }\n  // }, [shouldFetchData, offset])\n\n  // const fetchDataForLazyLoad = async () =>{    \n  //   console.log('setting new offset to', offset+limit)\n  //   setOffset(offset+limit)\n  //   setShouldFetchData(true)\n  // }\n\n  const HandleClick = async()=>{\n    GetContracts()\n  }\n\n  async function GetContracts() {\n    let results = []\n    let factories = await handlerContract.getAllRegisteredContractsOfType(8)\n    await getFactoryInto(0, [])\n    // let types = []\n    // factories.forEach(async (factory, index)=>{\n    //   let factoryContract = getFactoryContract(factory)\n    //   let factoryType = await factoryContract.factoryType()\n    //   let clones = await factoryContract.getClones()\n    //   console.log(\"clones\", clones)\n    //   types.push({type: factoryType, address: factory, clones: clones})\n    //   if (index+1 == factories.length) {\n    //     setFactories(types)\n    //   }\n    // })\n\n    async function getFactoryInto(index, types) {\n      let factory = factories[index]\n      let factoryContract = getFactoryContract(factory)\n      let factoryType = await factoryContract.factoryType()\n      let clones = await factoryContract.getClones()\n      types.push({type: factoryType, address: factory, clones: clones})\n      \n      if (index+1 == factories.length) {\n        return setFactories(types)\n      } else {\n        return getFactoryInto(index +1, types)\n      }\n    }\n    \n    \n    \n  }\n\n  function getFactoryContract(address) {\n    return new Contract(address, contractAddresses.clonableFactoryAbi, library.getSigner(account).connectUnchecked())\n  }\n\n  const mockData = {\n    \"handler\": \"0x5B8189BCC7565C03C98994b5D7BfbeB1a4296FfE\"\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        <Stack align=\"center\" w={\"100%\"}>\n        \n        <Button onClick={HandleClick}>Click</Button>\n\n        {factories.length > 0? (\n          factories.map((factory, index)=>{\n            return (\n              <VStack key={\"factory-\"+index} p={2} >\n                <Box className=\"coin-image-container\" w=\"100%\" min-width=\"40px\">     \n                  <Text>{factory.type} Factory: {factory.address}</Text>\n                  <Divider orientation=\"vertical\" />\n                </Box>\n              </VStack>\n            )\n          })\n          \n        ) : null}\n       </Stack>\n      </Flex>\n     \n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}