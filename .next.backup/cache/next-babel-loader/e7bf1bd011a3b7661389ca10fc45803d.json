{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Image, Text, Stack, Button, ButtonGroup, Input, Link, Alert, AlertIcon, useDisclosure, Collapse, useColorMode, Tabs, TabList, Tab, TabPanel, TabPanels } from '@chakra-ui/core';\nimport { HStack } from '@chakra-ui/react'; // import TorusSdk from \"@toruslabs/torus-direct-web-sdk\";\n\nimport Head from \"next/head\";\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Refreshing from './Refreshing';\nimport Loader from 'react-loader';\nimport dynamic from 'next/dynamic';\nimport { Contract } from '@ethersproject/contracts';\nimport { TransactionToast } from './TransactionToast';\nimport { EMBLEM_API, contractAddresses, curatedContracts, SIG_API } from '../constants';\nimport { useContract } from '../hooks';\nimport { CHAIN_ID_NAMES } from '../utils';\nimport CryptoJS from 'crypto-js';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nimport NFTSlideshow from './embed/NFTSlideshow';\nimport CoinBalance from './partials/CoinBalance';\nimport transakSDK from '@transak/transak-sdk';\nimport Attributes from './partials/Attributes';\nimport { generateWallet } from '@stacks/wallet-sdk';\nimport FetchNodeDetails from \"@toruslabs/fetch-node-details\";\nimport TorusUtils from \"@toruslabs/torus.js\";\nimport JsonDownloadLink from './JsonDownloadLink';\nvar AddrModal = dynamic(function () {\n  return import('./AddrModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./AddrModal')];\n    },\n    modules: ['./AddrModal']\n  }\n});\nvar KeysModal = dynamic(function () {\n  return import('./KeysModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./KeysModal')];\n    },\n    modules: ['./KeysModal']\n  }\n});\nvar OfferModal = dynamic(function () {\n  return import('./OfferModal');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./OfferModal')];\n    },\n    modules: ['./OfferModal']\n  }\n});\nexport default function Nft() {\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId,\n      library = _useWeb3React.library;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(query.cc == 't'),\n      clearCache = _useState[0],\n      setCache = _useState[1];\n\n  var _useState2 = useState(query.curated == 't'),\n      showMove = _useState2[0],\n      setShowMove = _useState2[1];\n\n  var _useState3 = useState({\n    name: '',\n    chain: ''\n  }),\n      qualifiedCollection = _useState3[0],\n      setQualifiedCollection = _useState3[1];\n\n  var _useState4 = useState(false),\n      moving = _useState4[0],\n      setMoving = _useState4[1];\n\n  var _useState5 = useState(false),\n      approved = _useState5[0],\n      setApproved = _useState5[1];\n\n  var _useState6 = useState(query.useOldMint),\n      useOldMint = _useState6[0],\n      setUseOldMint = _useState6[1];\n\n  var _useState7 = useState(query.key),\n      mintPassword = _useState7[0],\n      setMintPassword = _useState7[1];\n\n  var _useState8 = useState(query.offer || false),\n      showOffer = _useState8[0],\n      setShowOffer = _useState8[1];\n\n  var _useState9 = useState(query.framed || true),\n      framed = _useState9[0],\n      setFramed = _useState9[1];\n\n  var _useState10 = useState(query.id),\n      tokenId = _useState10[0],\n      setTokenId = _useState10[1];\n\n  var _useState11 = useState(query.experimental),\n      experimental = _useState11[0],\n      setExperimental = _useState11[1];\n\n  var _useState12 = useState(query.noLayout),\n      noLayout = _useState12[0],\n      setNoLayout = _useState12[1];\n\n  var _useState13 = useState(query.slideshowOnly || false),\n      slideshowOnly = _useState13[0],\n      setSlideshowOnly = _useState13[1];\n\n  var _useState14 = useState(''),\n      vaultName = _useState14[0],\n      setVaultName = _useState14[1];\n\n  var _useState15 = useState(''),\n      vaultIPFS = _useState15[0],\n      setVaultIPFS = _useState15[1];\n\n  var _useState16 = useState(''),\n      vaultImageIPFS = _useState16[0],\n      setVaultImageIPFS = _useState16[1];\n\n  var _useState17 = useState(''),\n      vaultCiphertextV2 = _useState17[0],\n      setVaultCiphertextV2 = _useState17[1];\n\n  var _useState18 = useState(''),\n      vaultDesc = _useState18[0],\n      setVaultDesc = _useState18[1];\n\n  var _useState19 = useState(''),\n      vaultImage = _useState19[0],\n      setVaultImage = _useState19[1];\n\n  var _useState20 = useState(''),\n      ownedImage = _useState20[0],\n      setOwnedImage = _useState20[1];\n\n  var _useState21 = useState([]),\n      vaultValues = _useState21[0],\n      setVaultValues = _useState21[1];\n\n  var _useState22 = useState(false),\n      loadedValues = _useState22[0],\n      setLoadedValues = _useState22[1];\n\n  var _useState23 = useState([]),\n      vaultDataValues = _useState23[0],\n      setVaultDataValues = _useState23[1];\n\n  var _useState24 = useState([]),\n      attributes = _useState24[0],\n      setAttributes = _useState24[1];\n\n  var _useState25 = useState([]),\n      vaultAddresses = _useState25[0],\n      setVaultAddresses = _useState25[1];\n\n  var _useState26 = useState(false),\n      vaultPrivacy = _useState26[0],\n      setVaultPrivacy = _useState26[1];\n\n  var _useState27 = useState(0),\n      vaultTotalValue = _useState27[0],\n      setVaultTotalValue = _useState27[1];\n\n  var _useState28 = useState(null),\n      vaultChainId = _useState28[0],\n      setVaultChainId = _useState28[1];\n\n  var _useState29 = useState(null),\n      vaultChain = _useState29[0],\n      setVaultChain = _useState29[1];\n\n  var _useState30 = useState(null),\n      hash = _useState30[0],\n      setHash = _useState30[1];\n\n  var _useState31 = useState(''),\n      currCoin = _useState31[0],\n      setCurrCoin = _useState31[1];\n\n  var _useState32 = useState(''),\n      currAddr = _useState32[0],\n      setCurrAddr = _useState32[1];\n\n  var _useState33 = useState({\n    loaded: false\n  }),\n      state = _useState33[0],\n      setState = _useState33[1];\n\n  var _useState34 = useState(false),\n      mine = _useState34[0],\n      setMine = _useState34[1];\n\n  var _useState35 = useState(false),\n      claiming = _useState35[0],\n      setClaiming = _useState35[1];\n\n  var _useState36 = useState('claimed'),\n      status = _useState36[0],\n      setStatus = _useState36[1];\n\n  var _useState37 = useState(false),\n      sealed = _useState37[0],\n      setSealed = _useState37[1];\n\n  var _useState38 = useState(null),\n      claimedBy = _useState38[0],\n      setClaimedBy = _useState38[1];\n\n  var _useState39 = useState(''),\n      mnemonic = _useState39[0],\n      setMnemonic = _useState39[1];\n\n  var _useState40 = useState(''),\n      privKeyBTC = _useState40[0],\n      setPrivKeyBTC = _useState40[1];\n\n  var _useState41 = useState(''),\n      privKeyETH = _useState41[0],\n      setPrivKeyETH = _useState41[1];\n\n  var _useState42 = useState([]),\n      privValues = _useState42[0],\n      setKeyValues = _useState42[1];\n\n  var _useState43 = useState(false),\n      loadingApi = _useState43[0],\n      setLoadingApi = _useState43[1];\n\n  var _useState44 = useState(''),\n      decryptedEffect = _useState44[0],\n      setDecryptedEffect = _useState44[1];\n\n  var _useState45 = useState(false),\n      decryptedEffectRunning = _useState45[0],\n      setDecryptedEffectRunning = _useState45[1];\n\n  var _useState46 = useState(''),\n      decryptPassword = _useState46[0],\n      setDecryptPassword = _useState46[1];\n\n  var _useState47 = useState(false),\n      invalidVault = _useState47[0],\n      setInvalidVault = _useState47[1];\n\n  var _useState48 = useState(false),\n      hasCheckedNft = _useState48[0],\n      setHasCheckedNft = _useState48[1];\n\n  var _useState49 = useState(false),\n      accepting = _useState49[0],\n      setAccepting = _useState49[1];\n\n  var _useState50 = useState(false),\n      approving = _useState50[0],\n      setApproving = _useState50[1];\n\n  var _useState51 = useState(false),\n      acceptable = _useState51[0],\n      setAcceptable = _useState51[1];\n\n  var _useState52 = useState(''),\n      transferPassword = _useState52[0],\n      setTransferPassword = _useState52[1];\n\n  var _useState53 = useState(false),\n      showTransferPassword = _useState53[0],\n      setShowTransferPassword = _useState53[1];\n\n  var _useState54 = useState(false),\n      preTransfering = _useState54[0],\n      setPreTransfering = _useState54[1];\n\n  var _useState55 = useState(null),\n      transferToAddress = _useState55[0],\n      setTransferToAddress = _useState55[1];\n\n  var _useState56 = useState(false),\n      transfering = _useState56[0],\n      setTransfering = _useState56[1];\n\n  var _useState57 = useState(null),\n      owner = _useState57[0],\n      setOwner = _useState57[1]; // const [torus, setTorus] = useState(initTorus())\n\n\n  var _useState58 = useState(false),\n      live = _useState58[0],\n      setLive = _useState58[1];\n\n  var _useState59 = useState(null),\n      nonce = _useState59[0],\n      setNonce = _useState59[1];\n\n  var _useState60 = useState(null),\n      block = _useState60[0],\n      setBlock = _useState60[1];\n\n  var _useState61 = useState(null),\n      mintSignature = _useState61[0],\n      setMintSignature = _useState61[1];\n\n  var _useState62 = useState(null),\n      to = _useState62[0],\n      setTo = _useState62[1];\n\n  var _useState63 = useState(false),\n      showVerifyingSignature = _useState63[0],\n      setShowVerifyingSignature = _useState63[1];\n\n  var _useState64 = useState(false),\n      showMakingVaultMsg = _useState64[0],\n      setShowMakingVaultMsg = _useState64[1];\n\n  var _useState65 = useState(false),\n      minting = _useState65[0],\n      setMinting = _useState65[1];\n\n  var _useState66 = useState(false),\n      isCrowdSale = _useState66[0],\n      setIsCrowdSale = _useState66[1];\n\n  var _useState67 = useState(null),\n      alternateContractAddress = _useState67[0],\n      setAlternateContractAddress = _useState67[1];\n\n  var _useState68 = useState({\n    name: '',\n    image: '',\n    metadata: ''\n  }),\n      targetAsset = _useState68[0],\n      setTargetAsset = _useState68[1];\n\n  var _useState69 = useState({\n    name: '',\n    chain: '',\n    4: '',\n    1: '',\n    tokenId: {},\n    serialNumber: {\n      'hex': ''\n    }\n  }),\n      targetContract = _useState69[0],\n      setTargetContract = _useState69[1]; // const [transferImage, setTransferImage] = useState('')\n\n\n  var _useState70 = useState(false),\n      isCovalApproved = _useState70[0],\n      setIsCovalApproved = _useState70[1];\n\n  var _useState71 = useState(null),\n      decimals = _useState71[0],\n      setDecimals = _useState71[1];\n\n  var _useState72 = useState(null),\n      allowance = _useState72[0],\n      setAllowance = _useState72[1];\n\n  var _useState73 = useState(null),\n      balance = _useState73[0],\n      setBalance = _useState73[1];\n\n  var _useState74 = useState(null),\n      price = _useState74[0],\n      setPrice = _useState74[1];\n\n  var _useState75 = useState(false),\n      mineUnMinted = _useState75[0],\n      setMineUnMinted = _useState75[1];\n\n  var _useState76 = useState(false),\n      mintLockedForever = _useState76[0],\n      setMintLockedForever = _useState76[1];\n\n  var _useState77 = useState({}),\n      rawMetadata = _useState77[0],\n      setRawMetadata = _useState77[1];\n\n  var handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  var vaultHandlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  var emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n  var covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true);\n\n  var _useDisclosure = useDisclosure(),\n      isOpenAddrModal = _useDisclosure.isOpen,\n      onOpenAddrModal = _useDisclosure.onOpen,\n      onCloseAddrModal = _useDisclosure.onClose;\n\n  var _useDisclosure2 = useDisclosure(),\n      isOpenKeysModal = _useDisclosure2.isOpen,\n      onOpenKeysModal = _useDisclosure2.onOpen,\n      onCloseKeysModal = _useDisclosure2.onClose;\n\n  var _useDisclosure3 = useDisclosure(),\n      isOpenOfferModal = _useDisclosure3.isOpen,\n      onOpenOfferModal = _useDisclosure3.onOpen,\n      onCloseOfferModal = _useDisclosure3.onClose;\n\n  var _useDisclosure4 = useDisclosure(),\n      isOpen = _useDisclosure4.isOpen,\n      onToggle = _useDisclosure4.onToggle;\n\n  var _useDisclosure5 = useDisclosure(),\n      isManageAddressOpen = _useDisclosure5.isOpen,\n      onManageAddressToggle = _useDisclosure5.onToggle;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var transak;\n  var transferImage; // async function initTorus() {\n  //   let _torus = new TorusSdk({\n  //     baseUrl: `${window.location.origin}/serviceworker`,\n  //     enableLogging: true,\n  //     network: \"testnet\", // details for test net\n  //   });\n  //   await _torus.init({skipSw: true, skipInit: true, skipPrefetch: true})\n  //   console.log(\"Initialized Torus\")\n  //   return _torus\n  // }\n\n  var getVaultContract = function getVaultContract() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    //return useContract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true)\n    return new Contract(address || contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, library.getSigner(account).connectUnchecked());\n  };\n\n  var getCuratedContract = function getCuratedContract() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return new Contract(address, contractAddresses.erc1155Abi, library.getSigner(account).connectUnchecked());\n  };\n\n  var initializeTransak = function initializeTransak(address, coin) {\n    transak = new transakSDK({\n      apiKey: 'e8bed1bd-6844-4eb1-973a-7a11a48fafab',\n      // Your API Key\n      environment: 'PRODUCTION',\n      // STAGING/PRODUCTION\n      defaultCryptoCurrency: coin || 'ETH',\n      walletAddress: address || '',\n      // Your customer's wallet address\n      themeColor: '000000',\n      // App theme color\n      fiatCurrency: 'USD',\n      // INR/GBP\n      // fiatAmount: 350,\n      email: '',\n      // Your customer's email address\n      redirectURL: '',\n      // paymentMethod: 'neft_bank_transfer',\n      hostURL: window.location.origin,\n      widgetHeight: '550px',\n      widgetWidth: '450px'\n    }); // To get all the events\n\n    transak.on(transak.ALL_EVENTS, function (data) {\n      console.log(data);\n    }); // This will trigger when the user marks payment is made.\n\n    transak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, function (orderData) {\n      console.log(orderData);\n      transak.close();\n    });\n    transak.init();\n  };\n\n  var checkLiveliness = function checkLiveliness(tokenId, cb) {\n    fetch(EMBLEM_API + '/liveliness', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        tokenId: tokenId\n      })\n    }).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context.sent;\n                setLive(data.live);\n                console.log(\"Liveliness check\", data);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    return cb();\n  }; // const transferVault = () => {\n  //   setTransfering(true)\n  //   ;(emblemContract as Contract).transferFrom(account, transferToAddress, tokenId)\n  //   .then(({ hash }: { hash: string }) => {\n  //     setHash(hash)\n  //   })\n  //   .catch((error: ErrorWithCode) => {})\n  // }\n\n\n  var lazyMint = function lazyMint() {\n    library.getSigner(account).signMessage('Delayed Minting: ' + tokenId).then(function (signature) {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + '/lazyMint', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainid: chainId.toString()\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature\n        })\n      }).then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {\n          var data;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return response.json();\n\n                case 2:\n                  data = _context2.sent;\n\n                  if (!data.error && data.data) {\n                    setMintSignature(data.data.signature);\n                    setNonce(data.data.nonce);\n                    setBlock(data.data.block);\n                    setShowVerifyingSignature(true); // setCreating(true)\n\n                    setTimeout(function () {\n                      delayedMint(data.data.nonce, data.data.block, data.data.signature);\n                    }, 1500);\n                  } else {\n                    alert(data.error ? data.msg : 'unknown error');\n                  }\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    });\n  };\n\n  var delayedMint = function delayedMint(nonce, block, sig) {\n    // setCreating(true)\n    console.log(\"Delayed Minting\");\n    setShowVerifyingSignature(false);\n    setShowMakingVaultMsg(true);\n    setMinting(true);\n    var cipherTextHash = vaultAddresses.filter(function (address) {\n      return address.coin == \"ETH\";\n    })[0].address;\n    console.log(\"--------------------------------------------------------Delayed Minting\", account, tokenId, cipherTextHash, nonce, block, sig);\n    handlerContract.buyWithSignature2(account, tokenId, cipherTextHash, nonce, block, sig).then(function (_ref3) {\n      var hash = _ref3.hash;\n      setTimeout(function () {\n        setHash(hash);\n        setShowMakingVaultMsg(false);\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      console.log(\"AAAAAHHHHHH\", error);\n      setShowMakingVaultMsg(false); // setMinting(false)\n    });\n  };\n\n  var fireMetaMask = function fireMetaMask() {\n    console.log(mintPassword);\n    setAccepting(true);\n    getWitness(function (witness) {\n      // console.log(tokenId, mintPassword, witness.nonce, witness.signature, account)\n      ;\n      handlerContract.transferWithCode(tokenId, mintPassword, account, witness.nonce, witness.signature).then(function (_ref4) {\n        var hash = _ref4.hash;\n        setTimeout(function () {\n          setHash(hash); // setShowMakingVaultMsg(true)\n        }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n      })[\"catch\"](function (error) {\n        setAccepting(false);\n\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          console.log(\"tx failed.\", error);\n        } else {// setAccepting(false)\n          // setShowPreVaultMsg(false)\n        }\n      });\n    });\n  };\n\n  var addPreTransfer = function addPreTransfer() {\n    console.log('transferImage', \"0x\" + transferImage);\n    setPreTransfering(true);\n    handlerContract.addPreTransfer(tokenId, \"0x\" + transferImage).then(function (_ref5) {\n      var hash = _ref5.hash;\n      // setTimeout(() => {\n      setHash(hash);\n      console.log(\"Set Pre Transfering True\", preTransfering); // setShowMakingVaultMsg(true)\n      // }, 100) // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      if (error !== null && error !== void 0 && error.code) {\n        console.log(\"Error?\");\n        setPreTransfering(false);\n        setShowTransferPassword(false);\n        setTransferPassword('');\n      } else {// setShowTransferPassword(!showTransferPassword? true : false)\n        // setPreTransfering(false)\n        // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  var handleApproveForall = function handleApproveForall() {\n    setApproving(true);\n    emblemContract.setApprovalForAll(contractAddresses.vaultHandler[chainId], true).then(function (_ref6) {\n      var hash = _ref6.hash;\n      setTimeout(function () {\n        setHash(hash); // setShowMakingVaultMsg(true)\n      }, 100); // Solving State race condition where transaction watcher wouldn't notice we were creating\n    })[\"catch\"](function (error) {\n      if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n        console.log(\"tx failed.\", error);\n      } else {\n        setApproving(false); // setShowPreVaultMsg(false)\n      }\n    });\n  };\n\n  var approveCovalFlow = function approveCovalFlow() {\n    setApproving(true);\n    covalContract.approve(contractAddresses.vaultHandler[chainId], '100000000000000').then(function (_ref7) {\n      var hash = _ref7.hash;\n      setHash(hash);\n    })[\"catch\"](function (error) {\n      if ((error === null || error === void 0 ? void 0 : error.code) == 4001) {\n        setApproving(false);\n      }\n    });\n  };\n\n  var deleteVault = function deleteVault() {\n    library.getSigner(account).signMessage('Delete: ' + tokenId).then(function (signature) {\n      console.log(\"sig\", signature);\n      fetch(EMBLEM_API + '/v2/delete', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        },\n        body: JSON.stringify({\n          tokenId: tokenId,\n          signature: signature,\n          chainId: chainId.toString()\n        })\n      }).then( /*#__PURE__*/function () {\n        var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response) {\n          var data;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return response.json();\n\n                case 2:\n                  data = _context3.sent;\n                  location.href = location.href.split(\"/\")[0] + \"/vaults\";\n\n                case 4:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref8.apply(this, arguments);\n        };\n      }());\n    });\n  };\n\n  var syncAccount = function syncAccount() {\n    var synched = localStorage.getItem(tokenId + '-v');\n\n    if (!synched) {\n      fetch(EMBLEM_API + '/sync/' + tokenId, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        }\n      }).then( /*#__PURE__*/function () {\n        var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(response) {\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  localStorage.setItem(tokenId + '-v', '1');\n                  return _context4.abrupt(\"return\", true);\n\n                case 2:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        return function (_x4) {\n          return _ref9.apply(this, arguments);\n        };\n      }())[\"catch\"](function () {\n        return false;\n      });\n    }\n  };\n\n  var getVault = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // syncAccount()\n              console.log('getvault'); // !slideshowOnly ? loadCache() : null\n              // console.log(\"---------\",EMBLEM_API + '/meta/' + tokenId + '?experimental=true')\n\n              _context5.next = 3;\n              return fetch(EMBLEM_API + '/meta/' + tokenId + '?experimental=true' + (clearCache ? '&_vercel_no_cache=1' : ''), {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  cc: clearCache ? 't' : ''\n                }\n              });\n\n            case 3:\n              responce = _context5.sent;\n              _context5.next = 6;\n              return responce.json();\n\n            case 6:\n              jsonData = _context5.sent;\n              setRawMetadata(jsonData);\n              setStates(jsonData); // console.log('vault response was ', jsonData)\n\n              if (jsonData.image_ipfs) {// getIPFSImage(jsonData.image_ipfs)\n              }\n\n              if (jsonData.collectionAddress) {\n                setIsCrowdSale(true);\n                setAlternateContractAddress(jsonData.collectionAddress);\n              }\n\n              if (!jsonData.name) {\n                setState({\n                  loaded: true\n                });\n                setInvalidVault(true);\n              } else {\n                // setStates(jsonData)\n                // !slideshowOnly? saveCache(jsonData) : null\n                setLoadingApi(false);\n                setInvalidVault(false);\n              }\n\n              !vaultPrivacy && !loadedValues ? getAllBalancesLive([], tokenId, function (v) {\n                if (v) {\n                  setVaultValues(v);\n                }\n              }) : null;\n\n              if (jsonData.targetContract) {\n                setTimeout(function () {\n                  location.href = location.origin + '/nft2?id=' + jsonData.targetContract.tokenId;\n                }, 500);\n              }\n\n            case 14:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function getVault() {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n\n  var getWitness = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return fetch(EMBLEM_API + '/witness/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  cc: 't',\n                  service: 'evmetadata',\n                  chainid: chainId.toString()\n                }\n              });\n\n            case 2:\n              responce = _context6.sent;\n              _context6.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context6.sent;\n\n              if (!jsonData.signature) {\n                _context6.next = 11;\n                break;\n              }\n\n              console.log('witness', jsonData);\n              return _context6.abrupt(\"return\", cb(jsonData));\n\n            case 11:\n              return _context6.abrupt(\"return\", cb(false));\n\n            case 12:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function getWitness(_x5) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  var getMoveableCollections = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var project, projectName, _qualifiedCollection;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              // alert(0)\n              console.log(\"-----------------------------------\", vaultValues.length, attributes.length);\n\n              if (vaultValues.length == 1 && attributes.length > 0) {\n                project = attributes.filter(function (item) {\n                  return item.value == vaultValues[0].name;\n                });\n\n                if (project.length > 0) {\n                  // console.log(project[0].trait_type)\n                  projectName = project[0].trait_type;\n                  _qualifiedCollection = curatedContracts.filter(function (item) {\n                    return item.name == projectName;\n                  });\n\n                  if (_qualifiedCollection.length > 0) {\n                    // console.log('--------- @@@@@@@@@@@ -------------- @@@@@qualified', _qualifiedCollection[0])\n                    setQualifiedCollection(_qualifiedCollection[0]);\n                  }\n                }\n              } else {// setTimeout(()=>{getMoveableCollections()}, 1000)\n              }\n\n            case 2:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function getMoveableCollections() {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  var setStates = function setStates(jsonData) {\n    framed && jsonData.image && !jsonData.image.includes('framed=') && !jsonData.image.includes('http') ? jsonData.image = jsonData.image + \"&framed=\" + framed : null;\n\n    if (jsonData.ciphertextV2) {\n      setVaultCiphertextV2(jsonData.ciphertextV2); // console.log(\"ciphertextV2\", jsonData.ciphertextV2)\n    }\n\n    setMintLockedForever(jsonData.mintLocked && jsonData.mintLockBlock == 0);\n    setVaultName(jsonData.name);\n    setVaultImage(jsonData.image);\n    setOwnedImage(jsonData.ownedImage || null);\n    setVaultDesc(jsonData.description);\n    setVaultTotalValue(jsonData.totalValue || 0);\n    jsonData.values ? setVaultValues(vaultValues.concat(jsonData.values)) : null;\n    jsonData.attributes ? setVaultDataValues(jsonData.attributes.filter(function (item) {\n      return item.trait_type === \"key\";\n    })) : null;\n    jsonData.attributes ? setAttributes(jsonData.attributes) : null;\n    setVaultAddresses(jsonData.addresses);\n    setVaultIPFS(jsonData.ipfs || null);\n    setVaultImageIPFS(jsonData.image_ipfs || null);\n    jsonData.targetAsset ? setTargetAsset(jsonData.targetAsset) : null;\n    jsonData.targetContract ? setTargetContract(jsonData.targetContract) : null;\n\n    if (jsonData.targetContract) {\n      setTimeout(function () {\n        location.href = location.origin + '/nft2?id=' + jsonData.targetContract.tokenId;\n      }, 500);\n    }\n\n    if (jsonData.live == false) {\n      checkLiveliness(jsonData.tokenId, function () {});\n    }\n\n    setLive(jsonData.live == false ? false : true);\n    setNonce(jsonData.nonce);\n    setMintSignature(jsonData.signature);\n    setTo(jsonData.to);\n    setVaultChain(jsonData.network);\n    setVaultChainId(jsonData.network == 'mainnet' ? 1 : jsonData.network == \"rinkeby\" ? 4 : jsonData.network == \"mumbai\" ? 80001 : jsonData.network == \"matic\" ? 137 : jsonData.network == \"xdai\" ? 100 : jsonData.network == \"bsc\" ? 56 : jsonData.network == \"fantom\" ? 250 : jsonData.network == \"bitcoin\" ? 0 : jsonData.network == \"aurora\" ? 1313161554 : 97);\n    setStatus(jsonData.status);\n\n    if (status === 'claimed') {\n      setClaimedBy(jsonData.claimedBy);\n    } // console.log('inside getstates. mine is ', mine)\n\n\n    setState({\n      loaded: true\n    });\n    var isPvt = jsonData.addresses.filter(function (item) {\n      return item.address.includes('private:');\n    }).length > 0;\n    setVaultPrivacy(isPvt);\n\n    if (jsonData.sealed) {\n      setSealed(true);\n    } else {\n      setSealed(false);\n    }\n\n    getMoveableCollections();\n  }; // const getEthBalances = async (address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/eth/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log(Number(vaultTotalValue), Number(jsonData.totalValue))\n  //   setVaultTotalValue(Number(vaultTotalValue) + Number(jsonData.totalValue))\n  //   // console.log('get eth balances', jsonData.values)\n  //   return cb(jsonData.values)\n  // }\n  // const getBtcBalance = async (values, address, cb) => {\n  //   const responce = await fetch(EMBLEM_API + '/btc/balance/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   // setVaultValues(values.concat(jsonData.values))\n  //   return cb(values.concat(jsonData.values))\n  // }\n  // const getNftBalance = async (values, address, cb) => {\n  //   // console.log(address)\n  //   const responce = await fetch(EMBLEM_API + '/eth/nft/' + address, {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //     },\n  //   })\n  //   const jsonData = await responce.json()\n  //   if (jsonData.length > 0) {\n  //     // console.log(\"Fuckling NFT\", jsonData, values.concat(jsonData))\n  //     return cb(values.concat(jsonData))\n  //   } else {\n  //     return cb(values)\n  //   }\n  // }\n\n\n  var getAllBalances = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(values, tokenId, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return fetch(EMBLEM_API + '/vault/balance/' + tokenId, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context8.sent;\n              _context8.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context8.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context8.next = 11;\n                break;\n              }\n\n              return _context8.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 11:\n              return _context8.abrupt(\"return\", cb(values));\n\n            case 12:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function getAllBalances(_x6, _x7, _x8) {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalancesLive = /*#__PURE__*/function () {\n    var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(values, tokenId, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!loadedValues) {\n                _context9.next = 2;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", cb(false));\n\n            case 2:\n              setLoadedValues(true);\n              _context9.next = 5;\n              return fetch(EMBLEM_API + '/vault/balance/' + tokenId + '?live=true&_vercel_no_cache=1', {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 5:\n              responce = _context9.sent;\n              _context9.next = 8;\n              return responce.json();\n\n            case 8:\n              jsonData = _context9.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context9.next = 14;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 14:\n              return _context9.abrupt(\"return\", cb(values));\n\n            case 15:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    return function getAllBalancesLive(_x9, _x10, _x11) {\n      return _ref14.apply(this, arguments);\n    };\n  }();\n\n  var getAllBalancesByAddress = /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(values, ethAddress, btcAddress, cb) {\n      var responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return fetch(EMBLEM_API + '/vault/balance/' + ethAddress + '/' + btcAddress, {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata'\n                }\n              });\n\n            case 2:\n              responce = _context10.sent;\n              _context10.next = 5;\n              return responce.json();\n\n            case 5:\n              jsonData = _context10.sent;\n              console.log('responce', responce, jsonData);\n\n              if (!(jsonData.balances.length > 0)) {\n                _context10.next = 11;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", cb(values.concat(jsonData.balances)));\n\n            case 11:\n              return _context10.abrupt(\"return\", cb(values));\n\n            case 12:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function getAllBalancesByAddress(_x12, _x13, _x14, _x15) {\n      return _ref15.apply(this, arguments);\n    };\n  }();\n\n  var saveCache = function saveCache(vault) {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_vault', JSON.stringify(vault)); // Save new state for later\n  };\n\n  var loadCache = function loadCache() {\n    console.log('cache');\n    var vault = JSON.parse(localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_vault')); // Load vaults from storage before updating from server!\n\n    if (vault) {\n      setState({\n        loaded: true\n      });\n      setStates(vault);\n      setLoadingApi(true);\n    }\n  };\n\n  var savePasswordToLocalStorage = function savePasswordToLocalStorage() {\n    localStorage.setItem(account + '_' + chainId + '_' + tokenId + '_mintPassword', transferPassword); // Save new state for later\n  };\n\n  var loadPasswordFromLocalStorage = function loadPasswordFromLocalStorage() {\n    var storedPw = localStorage.getItem(account + '_' + chainId + '_' + tokenId + '_mintPassword');\n    storedPw && acceptable ? setMintPassword(storedPw) : null; //setMintPassword(null)\n  }; // const getKeys = async (signature, tokenId, cb) => {\n  //   var myHeaders = new Headers()\n  //   myHeaders.append('chainId', chainId.toString())\n  //   myHeaders.append('service', 'evmetadata')\n  //   myHeaders.append('Content-Type', 'application/json')\n  //   var raw = JSON.stringify({ signature: signature })\n  //   const responce = await fetch(EMBLEM_API + '/claim/' + tokenId, {\n  //     method: 'POST',\n  //     headers: myHeaders,\n  //     body: raw,\n  //     redirect: 'follow',\n  //   })\n  //   const jsonData = await responce.json()\n  //   // console.log('getKeys response is ', jsonData)\n  //   return cb(jsonData)\n  // }\n\n\n  var getSignedJWT = /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainid', chainId.toString());\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature,\n                tokenId: tokenId\n              });\n              _context11.next = 6;\n              return fetch(SIG_API + '/sign', {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 6:\n              responce = _context11.sent;\n              _context11.next = 9;\n              return responce.json();\n\n            case 9:\n              jsonData = _context11.sent;\n              return _context11.abrupt(\"return\", cb(jsonData));\n\n            case 11:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n\n    return function getSignedJWT(_x16, _x17, _x18) {\n      return _ref16.apply(this, arguments);\n    };\n  }();\n\n  function getTorusKeys(_x19, _x20, _x21) {\n    return _getTorusKeys.apply(this, arguments);\n  }\n\n  function _getTorusKeys() {\n    _getTorusKeys = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(verifierId, idToken, cb) {\n      var fetchNodeDetails, torusUtils, _yield$fetchNodeDetai, torusNodeEndpoints, torusIndexes, _yield$torusUtils$ret, privKey;\n\n      return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n        while (1) {\n          switch (_context31.prev = _context31.next) {\n            case 0:\n              // const fetchNodeDetails = new FetchNodeDetails({ network: \"https://solemn-restless-diagram.ropsten.discover.quiknode.pro/37fca8f14d3a42d9ec00f50a3f6adc404d5e2a04/\", proxyAddress: \"0x6258c9d6c12ed3edda59a1a6527e469517744aa7\" });\n              // const torusUtils = new TorusUtils({ enableOneKey: true, network: \"testnet\" });\n              fetchNodeDetails = new FetchNodeDetails({\n                network: \"mainnet\"\n              });\n              torusUtils = new TorusUtils({\n                enableOneKey: true,\n                network: \"mainnet\"\n              });\n              _context31.next = 4;\n              return fetchNodeDetails.getNodeDetails({\n                verifier: 'tor-us-signer-vercel',\n                verifierId: verifierId\n              });\n\n            case 4:\n              _yield$fetchNodeDetai = _context31.sent;\n              torusNodeEndpoints = _yield$fetchNodeDetai.torusNodeEndpoints;\n              torusIndexes = _yield$fetchNodeDetai.torusIndexes;\n              _context31.next = 9;\n              return torusUtils.retrieveShares(torusNodeEndpoints, torusIndexes, 'tor-us-signer-vercel', {\n                verifier_id: verifierId\n              }, idToken);\n\n            case 9:\n              _yield$torusUtils$ret = _context31.sent;\n              privKey = _yield$torusUtils$ret.privKey;\n              return _context31.abrupt(\"return\", cb({\n                privateKey: privKey\n              }));\n\n            case 12:\n            case \"end\":\n              return _context31.stop();\n          }\n        }\n      }, _callee31);\n    }));\n    return _getTorusKeys.apply(this, arguments);\n  }\n\n  var addAddress = /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(signature, tokenId, coin, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature,\n                coin: coin\n              });\n              _context12.next = 7;\n              return fetch(EMBLEM_API + '/address/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context12.sent;\n              _context12.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context12.sent;\n              return _context12.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    return function addAddress(_x22, _x23, _x24, _x25) {\n      return _ref17.apply(this, arguments);\n    };\n  }();\n\n  var decryptEmbed = /*#__PURE__*/function () {\n    var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(signature, tokenId, cb) {\n      var myHeaders, raw, responce, jsonData;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append('chainId', chainId.toString());\n              myHeaders.append('service', 'evmetadata');\n              myHeaders.append('Content-Type', 'application/json');\n              raw = JSON.stringify({\n                signature: signature\n              });\n              _context13.next = 7;\n              return fetch(EMBLEM_API + '/embed/' + tokenId, {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n              });\n\n            case 7:\n              responce = _context13.sent;\n              _context13.next = 10;\n              return responce.json();\n\n            case 10:\n              jsonData = _context13.sent;\n              return _context13.abrupt(\"return\", cb(jsonData));\n\n            case 12:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n\n    return function decryptEmbed(_x26, _x27, _x28) {\n      return _ref18.apply(this, arguments);\n    };\n  }();\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n      var owned, _owner, finish, _finish;\n\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _finish = function _finish3() {\n                _finish = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n                  var acceptable, isApproved;\n                  return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n                    while (1) {\n                      switch (_context14.prev = _context14.next) {\n                        case 0:\n                          _context14.next = 2;\n                          return handlerContract.getPreTransfer(tokenId);\n\n                        case 2:\n                          acceptable = _context14.sent;\n\n                          if (!targetContract[chainId]) {\n                            _context14.next = 9;\n                            break;\n                          }\n\n                          _context14.next = 6;\n                          return emblemContract.isApprovedForAll(account, contractAddresses.vaultHandlerV8[chainId]);\n\n                        case 6:\n                          isApproved = _context14.sent;\n                          _context14.next = 12;\n                          break;\n\n                        case 9:\n                          _context14.next = 11;\n                          return emblemContract.isApprovedForAll(account, contractAddresses.vaultHandler[chainId]);\n\n                        case 11:\n                          isApproved = _context14.sent;\n\n                        case 12:\n                          setApproved(isApproved);\n                          setAcceptable(acceptable._from !== \"0x0000000000000000000000000000000000000000\");\n                          setOwner(_owner);\n                          setMine(_owner === account || to === account && _owner === \"0x0000000000000000000000000000000000000000\");\n                          setMineUnMinted(to === account && _owner === \"0x0000000000000000000000000000000000000000\");\n                          loadPasswordFromLocalStorage(); // alert(to == account)\n\n                        case 18:\n                        case \"end\":\n                          return _context14.stop();\n                      }\n                    }\n                  }, _callee14);\n                }));\n                return _finish.apply(this, arguments);\n              };\n\n              finish = function _finish2() {\n                return _finish.apply(this, arguments);\n              };\n\n              // alert(0)\n              console.log(\"Contract states\");\n              owned = false;\n              _context15.prev = 4;\n\n              if (!targetContract[chainId]) {\n                _context15.next = 14;\n                break;\n              }\n\n              console.log(\"Checking owner wth targetContract\");\n              emblemContract = getCuratedContract(targetContract[chainId]);\n              _context15.next = 10;\n              return emblemContract.getOwnerOfSerial(targetContract.serialNumber);\n\n            case 10:\n              _owner = _context15.sent;\n              console.log(\"--------------------------- owner\", _owner, approved, account, contractAddresses.vaultHandlerV8[chainId]);\n              _context15.next = 22;\n              break;\n\n            case 14:\n              if (!live) {\n                _context15.next = 20;\n                break;\n              }\n\n              _context15.next = 17;\n              return emblemContract.ownerOf(tokenId);\n\n            case 17:\n              _context15.t0 = _context15.sent;\n              _context15.next = 21;\n              break;\n\n            case 20:\n              _context15.t0 = \"0x0000000000000000000000000000000000000000\";\n\n            case 21:\n              _owner = _context15.t0;\n\n            case 22:\n              _context15.t1 = setDecimals;\n              _context15.next = 25;\n              return covalContract.decimals();\n\n            case 25:\n              _context15.t2 = _context15.sent;\n              (0, _context15.t1)(_context15.t2);\n              _context15.t3 = setAllowance;\n              _context15.next = 30;\n              return covalContract.allowance(account, contractAddresses.vaultHandler[chainId]).then(function (balance) {\n                return balance.toString();\n              });\n\n            case 30:\n              _context15.t4 = _context15.sent;\n              (0, _context15.t3)(_context15.t4);\n              _context15.t5 = setBalance;\n              _context15.next = 35;\n              return covalContract.balanceOf(account).then(function (balance) {\n                return balance.toString();\n              });\n\n            case 35:\n              _context15.t6 = _context15.sent;\n              (0, _context15.t5)(_context15.t6);\n              _context15.t7 = setPrice;\n              _context15.next = 40;\n              return handlerContract.price().then(function (balance) {\n                return balance.toString();\n              });\n\n            case 40:\n              _context15.t8 = _context15.sent;\n              (0, _context15.t7)(_context15.t8);\n\n              // console.log(\n              //   'balance',\n              //   balance,\n              //   'allowance',\n              //   allowance,\n              //   'price',\n              //   price,\n              //   Number(allowance) >= Number(price),\n              //   Number(balance) > Number(price)\n              // )\n              if (Number(allowance) >= Number(price)) {\n                // alert(true)\n                setIsCovalApproved(true);\n              } else {\n                // alert(false)\n                setIsCovalApproved(false);\n              }\n\n              finish();\n              _context15.next = 51;\n              break;\n\n            case 46:\n              _context15.prev = 46;\n              _context15.t9 = _context15[\"catch\"](4);\n              console.log(\"-------\", _context15.t9); // approveCovalFlow()\n\n              _owner = \"0x0000000000000000000000000000000000000000\";\n              finish();\n\n            case 51:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, null, [[4, 46]]);\n    }));\n\n    return function getContractStates() {\n      return _ref19.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    console.log(\"mine?\", mine);\n    console.log(\"claiming?\", claiming);\n    console.log(\"accepting?\", accepting);\n    console.log(\"acceptable\", acceptable);\n    console.log(\"qualified\", qualifiedCollection);\n    console.log(\"owner\", owner);\n  });\n\n  var hasAddress = function hasAddress(coin) {\n    console.log(coin, vaultAddresses.filter(function (address) {\n      return address.coin == coin;\n    }).length > 0);\n    return vaultAddresses.filter(function (address) {\n      return address.coin == coin;\n    }).length > 0;\n  };\n\n  var onRenew = /*#__PURE__*/function () {\n    var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(name) {\n      return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              library.getSigner(account).signMessage('Renew: ' + tokenId).then(function (signature) {\n                var address = vaultAddresses.filter(function (address) {\n                  return address.coin == 'NMC';\n                })[0].address;\n                console.log('signature', signature, name);\n                fetch(EMBLEM_API + '/nmc/renew/' + address, {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    service: 'evmetadata',\n                    chainid: chainId.toString()\n                  },\n                  body: JSON.stringify({\n                    \"tokenId\": tokenId,\n                    \"signature\": signature,\n                    \"name\": name\n                  })\n                }).then( /*#__PURE__*/function () {\n                  var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(response) {\n                    var data;\n                    return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n                      while (1) {\n                        switch (_context16.prev = _context16.next) {\n                          case 0:\n                            _context16.next = 2;\n                            return response.json();\n\n                          case 2:\n                            data = _context16.sent;\n                            console.log(\"Requested Renew\", data);\n\n                          case 4:\n                          case \"end\":\n                            return _context16.stop();\n                        }\n                      }\n                    }, _callee16);\n                  }));\n\n                  return function (_x30) {\n                    return _ref21.apply(this, arguments);\n                  };\n                }());\n              });\n\n            case 1:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17);\n    }));\n\n    return function onRenew(_x29) {\n      return _ref20.apply(this, arguments);\n    };\n  }();\n\n  var handleSign = /*#__PURE__*/function () {\n    var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n      var serialNumber;\n      return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              if (!targetContract[chainId]) {\n                _context20.next = 5;\n                break;\n              }\n\n              emblemContract = getCuratedContract(targetContract[chainId]);\n              _context20.next = 4;\n              return emblemContract.getSerial(targetContract.tokenId, 0);\n\n            case 4:\n              serialNumber = _context20.sent;\n\n            case 5:\n              library.getSigner(account).signMessage('Claim: ' + (targetContract[chainId] ? serialNumber : tokenId)).then(function (signature) {\n                setState({\n                  loaded: false\n                });\n\n                if (mineUnMinted && status != \"claimed\" && !mintLockedForever) {\n                  setMintLockedForever(true);\n                }\n\n                getSignedJWT(signature, tokenId, function (token) {\n                  getTorusKeys(tokenId, token.token, /*#__PURE__*/function () {\n                    var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(keys) {\n                      var bytes, payload;\n                      return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n                        while (1) {\n                          switch (_context19.prev = _context19.next) {\n                            case 0:\n                              try {\n                                bytes = CryptoJS.AES.decrypt(vaultCiphertextV2, keys.privateKey);\n                                payload = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n                                setKeyValues(payload.values);\n                                setMnemonic(payload.phrase);\n                                vaultAddresses.forEach( /*#__PURE__*/function () {\n                                  var _ref24 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(address) {\n                                    return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n                                      while (1) {\n                                        switch (_context18.prev = _context18.next) {\n                                          case 0:\n                                            if (!(address.coin == 'STX')) {\n                                              _context18.next = 6;\n                                              break;\n                                            }\n\n                                            _context18.next = 3;\n                                            return getSTXKey(address, payload.phrase);\n\n                                          case 3:\n                                            address.key = _context18.sent;\n                                            _context18.next = 7;\n                                            break;\n\n                                          case 6:\n                                            address.key = window.phrasePathToKey(payload.phrase, address.path);\n\n                                          case 7:\n                                            if (address.coin == 'BTC') setPrivKeyBTC(address.key);\n                                            if (address.coin == 'ETH') setPrivKeyETH(address.key);\n\n                                          case 9:\n                                          case \"end\":\n                                            return _context18.stop();\n                                        }\n                                      }\n                                    }, _callee18);\n                                  }));\n\n                                  return function (_x32) {\n                                    return _ref24.apply(this, arguments);\n                                  };\n                                }());\n                              } catch (err) {\n                                // alert('out of sync')\n                                // await syncAccount()\n                                alert(err);\n                                setTimeout(function () {\n                                  location.href = location.href;\n                                }, 2000);\n                              } // setKeyValues(vaultAddresses)\n\n\n                              setState({\n                                loaded: true\n                              });\n                              onOpenKeysModal();\n\n                            case 3:\n                            case \"end\":\n                              return _context19.stop();\n                          }\n                        }\n                      }, _callee19);\n                    }));\n\n                    return function (_x31) {\n                      return _ref23.apply(this, arguments);\n                    };\n                  }());\n                }); // }\n              });\n\n            case 6:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20);\n    }));\n\n    return function handleSign() {\n      return _ref22.apply(this, arguments);\n    };\n  }();\n\n  var getSTXKey = /*#__PURE__*/function () {\n    var _ref25 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(address, phrase) {\n      var wallet, account;\n      return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return generateWallet({\n                secretKey: phrase,\n                password: ''\n              });\n\n            case 2:\n              wallet = _context21.sent;\n              console.log('------ stacks account -', wallet.accounts[0]);\n              account = wallet.accounts[0];\n              address.key = account.stxPrivateKey;\n              return _context21.abrupt(\"return\", address.key);\n\n            case 7:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21);\n    }));\n\n    return function getSTXKey(_x33, _x34) {\n      return _ref25.apply(this, arguments);\n    };\n  }();\n\n  var handleHideAsset = /*#__PURE__*/function () {\n    var _ref26 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(coin) {\n      return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              library.getSigner(account).signMessage('HideAsset: ' + tokenId).then(function (signature) {\n                console.log(\"----------------------------------------------------------------\", signature);\n                console.log(coin.name, coin.coin, coin.address);\n                hideAsset(tokenId, coin.coin, coin.address, coin.name, signature, function () {\n                  console.log(\"Done hiding coin and getting new balances\");\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22);\n    }));\n\n    return function handleHideAsset(_x35) {\n      return _ref26.apply(this, arguments);\n    };\n  }();\n\n  function hideAsset(tokenId, coin, address, name, signature, cb) {\n    fetch(EMBLEM_API + '/hide/' + tokenId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        chainid: chainId.toString()\n      },\n      body: JSON.stringify({\n        \"coin\": coin ? coin : null,\n        \"address\": address ? address : null,\n        \"name\": name ? name : null,\n        \"signature\": signature ? signature : null\n      })\n    }).then( /*#__PURE__*/function () {\n      var _ref27 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context23.sent;\n                console.log(\"-------\", data);\n                getAllBalances([], tokenId, function (values) {\n                  setVaultValues(values);\n                  return cb();\n                });\n\n              case 5:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23);\n      }));\n\n      return function (_x36) {\n        return _ref27.apply(this, arguments);\n      };\n    }());\n  }\n\n  var handleAddressSign = /*#__PURE__*/function () {\n    var _ref28 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(coin) {\n      return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              library.getSigner(account).signMessage('Address: ' + tokenId).then(function (signature) {\n                addAddress(signature, tokenId, coin, function (result) {\n                  getVault();\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, _callee24);\n    }));\n\n    return function handleAddressSign(_x37) {\n      return _ref28.apply(this, arguments);\n    };\n  }();\n\n  var handleOwnedEmbed = /*#__PURE__*/function () {\n    var _ref29 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {\n      return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              library.getSigner(account).signMessage('Embed: ' + tokenId).then(function (signature) {\n                decryptEmbed(signature, tokenId, function (result) {\n                  setVaultImage(result.ownedImage);\n                });\n              });\n\n            case 1:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee25);\n    }));\n\n    return function handleOwnedEmbed() {\n      return _ref29.apply(this, arguments);\n    };\n  }();\n\n  var handleMove = /*#__PURE__*/function () {\n    var _ref30 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {\n      return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              // setMoving(true)\n              getMoveableCollections();\n              console.log('---------- qualified move', qualifiedCollection);\n              fetch(EMBLEM_API + '/v2/move-vault/', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  chainid: chainId.toString()\n                },\n                body: JSON.stringify({\n                  \"chainId\": 1,\n                  \"from\": account,\n                  \"sourceContract\": {\n                    \"1\": \"0x82c7a8f707110f5fbb16184a5933e9f78a34c6ab\"\n                  },\n                  \"targetContract\": {\n                    \"1\": qualifiedCollection[chainId],\n                    \"name\": qualifiedCollection.name,\n                    \"chain\": qualifiedCollection.chain\n                  },\n                  \"targetAsset\": {\n                    \"name\": vaultValues[0].name\n                  },\n                  \"amount\": 1,\n                  \"tokenId\": tokenId\n                })\n              }).then( /*#__PURE__*/function () {\n                var _ref31 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(response) {\n                  var data;\n                  return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n                    while (1) {\n                      switch (_context26.prev = _context26.next) {\n                        case 0:\n                          _context26.next = 2;\n                          return response.json();\n\n                        case 2:\n                          data = _context26.sent;\n\n                          // console.log(\"------------- \",\"0x82c7a8f707110f5fbb16184a5933e9f78a34c6ab\", \"0xDCA91409018ea80B71d21E818f00e76072969861\", \"3523401\",data.tokenId, data.nonce, data.sig, \"0x0000000000000000000000000000000000000000000000000000000000000000\")\n                          if (data.sig) {\n                            vaultHandlerContract.moveVault(\"0x82c7a8f707110f5fbb16184a5933e9f78a34c6ab\", qualifiedCollection[chainId], tokenId, data.tokenId, data.nonce, data.sig, \"0x0000000000000000000000000000000000000000000000000000000000000000\").then(function (hash) {\n                              setHash(hash);\n                              setMoving(false);\n                            });\n                          }\n\n                        case 4:\n                        case \"end\":\n                          return _context26.stop();\n                      }\n                    }\n                  }, _callee26);\n                }));\n\n                return function (_x38) {\n                  return _ref31.apply(this, arguments);\n                };\n              }());\n\n            case 3:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, _callee27);\n    }));\n\n    return function handleMove() {\n      return _ref30.apply(this, arguments);\n    };\n  }();\n\n  var handleClaim = /*#__PURE__*/function () {\n    var _ref32 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28() {\n      return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              if (targetContract[chainId]) {\n                // emblemContract = getCuratedContract(targetContract[chainId])\n                // let tokenId = await emblemContract.getTokenIdForSerialNumber(targetContract.serialNumber)\n                vaultHandlerContract.claim(targetContract[chainId], targetContract.tokenId).then(function (_ref33) {\n                  var hash = _ref33.hash;\n                  setClaiming(true);\n                  setTimeout(function () {\n                    setHash(hash);\n                  }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n                });\n              } else {\n                handlerContract.claimOnChain(tokenId).then(function (_ref34) {\n                  var hash = _ref34.hash;\n                  setClaiming(true);\n                  setTimeout(function () {\n                    setHash(hash);\n                  }, 100); // Solving State race condition where transaction watcher wouldn't notice we were claiming\n                });\n              }\n\n            case 1:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, _callee28);\n    }));\n\n    return function handleClaim() {\n      return _ref32.apply(this, arguments);\n    };\n  }();\n\n  var pingClaimLogs = function pingClaimLogs(cb) {\n    fetch(EMBLEM_API + '/web3/selfClaimLogs?chainId=' + chainId.toString() + '_vercel_no_cache=1', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        service: 'evmetadata',\n        cc: 't'\n      }\n    }).then( /*#__PURE__*/function () {\n      var _ref35 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                _context29.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context29.sent;\n                console.log(\"Log check\", data);\n                return _context29.abrupt(\"return\", cb());\n\n              case 5:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29);\n      }));\n\n      return function (_x39) {\n        return _ref35.apply(this, arguments);\n      };\n    }());\n  };\n\n  var startDecryptEffect = /*#__PURE__*/function () {\n    var _ref36 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30() {\n      var theLetters, ctnt, speed, increment, clen, si, stri, block, fixed, nextFrame;\n      return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n        while (1) {\n          switch (_context30.prev = _context30.next) {\n            case 0:\n              nextFrame = function _nextFrame(pos) {\n                for (var i = 0; i < clen - stri; i++) {\n                  //Random number\n                  var num = Math.floor(theLetters.length * Math.random()); //Get random letter\n\n                  var letter = theLetters.charAt(num);\n                  block = block + letter;\n                }\n\n                if (si == increment - 1) {\n                  stri++;\n                }\n\n                if (si == increment) {\n                  // Add a letter;\n                  // every speed*10 ms\n                  fixed = fixed + ctnt.charAt(stri - 1);\n                  si = 0;\n                } // $(\"#output\").html(fixed + block);\n\n\n                setDecryptedEffect(fixed + block);\n                block = '';\n              };\n\n              if (!decryptedEffectRunning) {\n                _context30.next = 3;\n                break;\n              }\n\n              return _context30.abrupt(\"return\");\n\n            case 3:\n              setDecryptedEffectRunning(true);\n              theLetters = 'abcdefghijklmnopqrstuvwxyz'; //You can customize what letters it will cycle through\n\n              ctnt = 'Decrypting'; // Your text goes here\n\n              speed = 5; // ms per frame\n\n              increment = 8; // frames per step. Must be >2\n\n              clen = ctnt.length;\n              si = 0;\n              stri = 0;\n              block = '';\n              fixed = '';\n\n              (function rustle(i) {\n                setTimeout(function () {\n                  if (--i) {\n                    rustle(i);\n                  } else {\n                    setDecryptedEffectRunning(false);\n                  }\n\n                  nextFrame(i);\n                  si = si + 1;\n                }, speed);\n              })(clen * increment + 1);\n\n            case 14:\n            case \"end\":\n              return _context30.stop();\n          }\n        }\n      }, _callee30);\n    }));\n\n    return function startDecryptEffect() {\n      return _ref36.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    console.log('----');\n    getVault();\n  }, []);\n  useEffect(function () {\n    account && chainId && vaultChainId && chainId == vaultChainId || query.noLayout && query.noLayout == 'true' || query.slideshowOnly && query.slideshowOnly == 'true' ? getContractStates() : null;\n  });\n\n  function splitDescription(words) {\n    var desc = words ? words.split('\\n\\n\\n\\n') : [\" \"];\n    return desc[0].trim();\n  }\n\n  function tryDecrypt(key) {\n    if (decryptPassword) {\n      key = decryptPassword;\n    }\n\n    startDecryptEffect();\n    console.log(vaultAddresses);\n    var ciphertext = vaultAddresses[0].address.replace('private:', '');\n\n    try {\n      var bytes = CryptoJS.AES.decrypt(ciphertext, key);\n      JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n      setVaultPrivacy(false);\n      setDecryptPassword(key);\n      setVaultAddresses(decryptAddresses(key));\n      var ethAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'ETH';\n      })[0].address;\n      var btcAddress = vaultAddresses.filter(function (item) {\n        return item.coin === 'BTC';\n      })[0].address;\n      console.log(\"SUCCESS\", vaultAddresses);\n      getAllBalancesByAddress([], ethAddress, btcAddress, function (values) {\n        setVaultValues(values);\n      }); // getEthBalances(\n      //   vaultAddresses.filter((item) => {\n      //     return item.coin === 'ETH'\n      //   })[0].address,\n      //   (values) => {\n      //     getBtcBalance(\n      //       values,\n      //       vaultAddresses.filter((item) => {\n      //         return item.coin === 'BTC'\n      //       })[0].address,\n      //       (_values) => {\n      //         // console.log(\"Have fucking values\", values)\n      //         getNftBalance(\n      //           _values,\n      //           vaultAddresses.filter((item) => {\n      //             return item.coin === 'ETH'\n      //           })[0].address,\n      //           (__values) => {\n      //             setVaultValues(__values.concat(vaultValues))\n      //           }\n      //         )\n      //       }\n      //     )\n      //   }\n      // )\n    } catch (err) {\n      console.log('WTF', err);\n    }\n  }\n\n  function getAddresses() {\n    console.log(\"Getting Addresses\");\n    return vaultAddresses;\n  }\n\n  function decryptAddresses(key) {\n    vaultAddresses.forEach(function (item) {\n      if (item.address.includes('private')) {\n        var cipherText = item.address.replace('private:', '');\n        item.address = decrypt(cipherText, key);\n      }\n    });\n    return vaultAddresses;\n  }\n\n  function decrypt(cipherText, key) {\n    var bytes = CryptoJS.AES.decrypt(cipherText, key);\n    var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n\n  function visitOpenSeaLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'opensea.io/assets/' + (vaultChainId == 137 ? 'matic/' : '') + (alternateContractAddress ? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) + '/' + tokenId, '_blank');\n  }\n\n  function visitLooksRareLink() {\n    window.open('https://' + (vaultChainId == 4 ? 'rinkeby.' : '') + 'looksrare.org/collections/' + (vaultChainId == 137 ? 'matic/' : '') + (alternateContractAddress ? alternateContractAddress : contractAddresses.emblemVault[vaultChainId]) + '/' + tokenId, '_blank');\n  }\n\n  {\n    alternateContractAddress ? emblemContract = getVaultContract(alternateContractAddress ? alternateContractAddress : null) : null;\n  }\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\"\n  }), __jsx(\"meta\", {\n    name: \"twitter:site\",\n    content: \"Emblem.Finance\"\n  }), __jsx(\"meta\", {\n    name: \"twitter:title\",\n    content: vaultName\n  }), __jsx(\"meta\", {\n    name: \"twitter:description\",\n    content: splitDescription(vaultDesc)\n  }), __jsx(\"meta\", {\n    name: \"twitter:image\",\n    content: vaultImage\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: \"\\n              // $(\\\".NFT\\\").tilt({    \\n              //     maxTilt: 3\\n              // });\\n              $(\\\".NFT\\\").trigger('mouseenter');\\n              $(\\\".NFT\\\").trigger('mouseclick'), '.NFT';\\n              if (localStorage.getItem(\\\"darkMode\\\") == 'false') {\\n                localStorage.setItem(\\\"darkMode\\\",\\\"true\\\"); location.href = location.href\\n              }\\n              \"\n    }\n  })), __jsx(AddrModal, {\n    isOpen: isOpenAddrModal,\n    onClose: onCloseAddrModal,\n    addrCoin: currCoin,\n    addrAddr: currAddr\n  }), __jsx(KeysModal, {\n    isOpen: isOpenKeysModal,\n    onClose: onCloseKeysModal,\n    mnemonic: mnemonic,\n    privKeyBTC: privKeyBTC,\n    privKeyETH: privKeyETH,\n    privValues: privValues,\n    addresses: vaultAddresses\n  }), showOffer ? __jsx(OfferModal, {\n    isOpen: isOpenOfferModal,\n    onClose: onCloseOfferModal,\n    tokenId: tokenId,\n    mine: mine\n  }) : null, __jsx(Loader, {\n    loaded: state.loaded\n  }, __jsx(Box, {\n    height: \"40px\"\n  }), loadingApi ? __jsx(Refreshing, null) : '', !invalidVault && !slideshowOnly ? __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\"\n  }, __jsx(Box, {\n    className: \"NFT\",\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    borderColor: vaultChainId != chainId ? 'orange.500' : status == 'claimed' ? 'green.500' : null,\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    alignItems: \"center\",\n    minW: 390\n  }, __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    color: \"blue.500\"\n  }, \"Vault Network: \", CHAIN_ID_NAMES[vaultChainId]), __jsx(Box, {\n    mt: \"1\",\n    fontWeight: \"semibold\",\n    as: \"h3\",\n    lineHeight: \"tight\",\n    p: 2,\n    textAlign: \"center\" // textTransform=\"uppercase\"\n    ,\n    alignItems: \"center\"\n  }, vaultName, !vaultPrivacy && vaultTotalValue > 0 ? ': ~$' + vaultTotalValue.toLocaleString() : null), __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\"\n  }, vaultValues.length && vaultValues.filter(function (item) {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultImage,\n    items: vaultValues.map(function (value) {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage\n  }), mine && ownedImage ? __jsx(Button, {\n    onClick: function onClick() {\n      handleOwnedEmbed();\n    }\n  }, \"(OWNED) Show Full Embed\") : null), __jsx(Stack, {\n    align: \"center\",\n    maxWidth: \"400px\"\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    maxWidth: \"400px\"\n  }, __jsx(Stack, null, __jsx(Text, {\n    fontSize: \"xs\"\n  }, vaultChainId == chainId ? __jsx(Link, {\n    href: \"./vaults?address=\" + owner\n  }, \"Owner: \", owner) : null), __jsx(Text, {\n    overflowWrap: \"anywhere\",\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\"\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: splitDescription(vaultDesc)\n  }))))), __jsx(Box, {\n    p: \"6\"\n  }, __jsx(Tabs, {\n    isFitted: true,\n    variant: \"enclosed\"\n  }, __jsx(TabList, {\n    mb: \"1em\"\n  }, __jsx(Tab, null, \"Balances\"), __jsx(Tab, null, \"Attributes\")), __jsx(TabPanels, null, __jsx(TabPanel, null, vaultPrivacy ? __jsx(Box, {\n    mb: 5\n  }, __jsx(Text, {\n    pb: 2,\n    color: decryptedEffect ? 'green.500' : null\n  }, decryptedEffect ? decryptedEffect : 'Contents hidden. Enter password to unlock.'), __jsx(Input, {\n    type: \"password\",\n    id: \"vault-password\",\n    onChange: function onChange(e) {\n      return tryDecrypt(e.target.value);\n    },\n    \"aria-describedby\": \"password-helper-text\"\n  })) : __jsx(Box, {\n    d: \"flex\",\n    backgroundColor: colorMode == \"light\" ? \"gray.100\" : \"gray.700\",\n    alignItems: \"baseline\",\n    className: \"coin-balance-content\"\n  }, __jsx(Box, {\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    fontSize: \"sm\",\n    ml: \"2\"\n  }, __jsx(Text, {\n    as: \"h4\",\n    mt: 2,\n    fontWeight: \"semibold\"\n  }, \"Current Contents:  \", __jsx(\"button\", {\n    onClick: function onClick() {\n      getAllBalancesLive([], tokenId, function (v) {\n        setLoadedValues(false);\n        setVaultValues(v);\n      });\n    }\n  }, \" [Refresh Balances]\")), __jsx(Text, {\n    as: \"p\",\n    color: colorMode == \"dark\" ? \"lightgreen\" : \"forestgreen\"\n  }, \"$\", Number(vaultTotalValue.toFixed(4)).toLocaleString()), vaultValues.length ? vaultValues.map(function (coin) {\n    return __jsx(Stack, null, __jsx(CoinBalance, {\n      colorMode: colorMode,\n      coin: coin,\n      mine: status === 'claimed' && claimedBy === account || mine,\n      onRenew: onRenew,\n      hideAsset: handleHideAsset\n    }));\n  }) : __jsx(Refreshing, null), vaultDataValues.length ? vaultDataValues.map(function (data) {\n    return __jsx(Text, null, \"Data: \", data.attribute_key);\n  }) : !vaultDataValues.length && !vaultValues.length ? __jsx(Text, null, \"Nothing in here! Fill 'er up!\") : null))), __jsx(TabPanel, null, __jsx(Attributes, {\n    colorMode: colorMode,\n    attributes: attributes\n  })))), !vaultPrivacy ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\"\n  }, __jsx(ButtonGroup, {\n    justifyContent: \"space-between\",\n    spacing: 6\n  }, __jsx(Stack, null, __jsx(Text, null, \"Deposit Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\"\n  }, vaultAddresses.map(function (addr) {\n    return __jsx(Button, {\n      className: \"address_nft_button\",\n      ml: 2,\n      mt: 2,\n      \"font-weight\": \"100 !important\",\n      key: addr.address,\n      onClick: function onClick() {\n        setCurrCoin(addr.coin);\n        setCurrAddr(addr.address);\n        onOpenAddrModal();\n      }\n    }, addr.coin == 'ETH' ? addr.coin + '/EVM' : addr.coin == 'BTC' ? addr.coin + '/XCP/OMNI' : addr.coin == 'BCH' ? addr.coin + '/SLP' : addr.coin == 'TAP' ? 'TAPROOT' : addr.coin);\n  })), (mine || status === 'claimed') && vaultAddresses.length < 12 ? __jsx(React.Fragment, null, __jsx(\"button\", {\n    className: \"nft_button\",\n    onClick: function onClick() {\n      onManageAddressToggle();\n    }\n  }, \"Manage Addresses\"), __jsx(Flex, {\n    w: \"340px\",\n    justify: \"center\",\n    flexWrap: \"wrap\"\n  }, __jsx(Collapse, {\n    isOpen: isManageAddressOpen\n  }, !hasAddress('DOGE') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('DOGE');\n    }\n  }, \"Add DOGE\") : null, !hasAddress('DGB') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('DGB');\n    }\n  }, \"Add Digibyte\") : null, !hasAddress('NMC') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('NMC');\n    }\n  }, \"Add Namecoin\") : null, !hasAddress('LTC') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('LTC');\n    }\n  }, \"Add Litecoin\") : null, !hasAddress('MONA') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('MONA');\n    }\n  }, \"Add Mona\") : null, !hasAddress('TEZOS') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('TEZOS');\n    }\n  }, \"Add Tezos\") : null, !hasAddress('SOLANA') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('SOLANA');\n    }\n  }, \"Add Solana\") : null, !hasAddress('STX') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('STX');\n    }\n  }, \"Add Stacks\") : null, !hasAddress('TAP') ? __jsx(Button, {\n    className: \"nft_button\",\n    mr: 2,\n    mt: 2,\n    onClick: function onClick() {\n      handleAddressSign('TAP');\n    }\n  }, \"Add Taproot\") : null))) : null))) : null, !(status === 'claimed') && live && (vaultChainId === 1 || vaultChainId === 4 || vaultChainId === 137) ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\"\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"50%\",\n    m: 5,\n    onClick: function onClick() {\n      visitOpenSeaLink();\n    }\n  }, \"Opensea\"), __jsx(Button, {\n    className: \"nft_button\",\n    width: \"50%\",\n    m: 5,\n    onClick: function onClick() {\n      visitLooksRareLink();\n    }\n  }, \"LooksRare\"), showOffer ? __jsx(Button, {\n    className: \"\",\n    onClick: function onClick() {\n      onOpenOfferModal();\n    }\n  }, mine ? 'My Offers' : 'Make an Offer', \" (NFT\\xB2NFT)\") : null) : null, isCovalApproved ? __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    spacing: \"0rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    p: 1,\n    rounded: \"lg\",\n    overflow: \"hidden\"\n  }, __jsx(Text, null, \"Creating a vault spends \", price * Math.pow(10, -decimals), \" Coval from your wallet\"))) : null, mine && !approved ? __jsx(React.Fragment, null, __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\"\n  }, __jsx(Button, {\n    className: \"nft_button\",\n    width: \"100%\",\n    onClick: function onClick() {\n      return handleApproveForall();\n    }\n  }, \" Approve Minting\"))) : null, (showTransferPassword || mintPassword) && acceptable ? __jsx(Box, null, __jsx(Link, {\n    href: location.protocol + '//' + location.host + '/nft?id=' + tokenId + '&key=' + (transferPassword || mintPassword)\n  }, \"Copy Gift Link\"), __jsx(Text, null, \"Password: \", transferPassword || mintPassword)) : null, acceptable && claimedBy !== account ? __jsx(React.Fragment, null, __jsx(Button, {\n    mt: 2,\n    width: \"100%\",\n    onClick: function onClick() {\n      fireMetaMask();\n    }\n  }, \"Accept\"), __jsx(Input, {\n    mt: 2,\n    type: \"password\",\n    id: \"mintPassword\",\n    minLength: 3,\n    maxLength: 200,\n    value: mintPassword || '',\n    onChange: function onChange(e) {\n      console.log('grrr', e.target.value, mintPassword);\n      setMintPassword(e.target.value);\n    },\n    autoComplete: \"off\"\n  })) : null, mine && showMove && qualifiedCollection ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\"\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      handleMove();\n    },\n    isDisabled: moving\n  }, moving ? 'Moving ...' : 'Move Vault')) : null, !live && mine && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg && approved && isCovalApproved ? __jsx(React.Fragment, null, __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    isDisabled: !vaultPrivacy && vaultValues.length < 1 || mintLockedForever,\n    onClick: lazyMint\n  }, mintLockedForever ? 'Mint Locked - keys accessed before mint' : !vaultPrivacy && vaultValues.length < 1 ? 'Please load the vault to mint' : 'Mint Vault')) : null, !(status === 'claimed') && account && vaultChainId === chainId && mine && !sealed && approved && live ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\"\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: function onClick() {\n      handleClaim();\n    },\n    isDisabled: claiming\n  }, claiming ? 'Claiming ...' : 'Unlock Vault (Get Private Keys)')) : vaultChainId === chainId && status == 'claimed' && claimedBy === account || mineUnMinted && status != \"claimed\" ? __jsx(Box, {\n    d: \"flex\",\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\"\n  }, __jsx(Button, {\n    width: \"100%\",\n    onClick: handleSign\n  }, mineUnMinted && status != \"claimed\" && !mintLockedForever ? 'Get Keys (Unlocking will prevent minting)' : 'Get Keys')) : null, mine ? __jsx(JsonDownloadLink, {\n    data: rawMetadata,\n    filename: \"EmblemVault-\".concat(tokenId, \".json\")\n  }) : null, !live && mine && vaultChainId == chainId && status !== 'claimed' && !showMakingVaultMsg && approved && !isCovalApproved ? __jsx(React.Fragment, null, __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: approveCovalFlow\n  }, \"Approve Spending Coval\")) : null, (!live || status == 'claimed') && to == account && vaultChainId == chainId && !showMakingVaultMsg && vaultValues.length < 1 ? __jsx(Button, {\n    width: \"100%\",\n    mt: 5,\n    onClick: deleteVault\n  }, \"Delete Vault \") : null, showVerifyingSignature ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\"\n  }, \"Verifying Signature ...\") : null, showMakingVaultMsg ? __jsx(Button, {\n    isDisabled: true,\n    type: \"submit\"\n  }, \"Minting Vault ...\") : null), vaultIPFS ? // <Stack>\n  __jsx(HStack, {\n    align: \"center\"\n  }, __jsx(Link, {\n    target: \"new\",\n    mb: 2,\n    ml: 35,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultIPFS,\n    isExternal: true\n  }, \"View Metadata on IPFS \"), vaultImageIPFS ? __jsx(Link, {\n    mb: 2,\n    href: 'https://gateway.ipfs.io/ipfs/' + vaultImageIPFS,\n    isExternal: true\n  }, \"View Image on IPFS \") : null) // </Stack>\n  : null, sealed ? __jsx(Box, {\n    d: \"flex\",\n    mb: 2,\n    ml: 35,\n    alignItems: \"baseline\",\n    justifyContent: \"space-between\",\n    mt: \"4\"\n  }, __jsx(Text, null, \"*This vault is sealed forever.\")) : null, __jsx(Stack, {\n    direction: \"column\",\n    align: \"center\"\n  }, status == 'claimed' ? __jsx(Text, {\n    color: \"green.500\"\n  }, \"CLAIMED\") : null), hash ? __jsx(Alert, {\n    status: \"info\"\n  }, __jsx(AlertIcon, null), accepting ? \"Accepting Your Gift Vault\" : claiming ? \"Claiming your Vault ...\" : approving ? \"Handling Approval Flow ...\" : transfering ? \"Transfering Vault ...\" : minting ? \"Minting Vault\" : \"Generating Gift Link ...\") : null)) : vaultValues.length > 0 && slideshowOnly ? __jsx(Stack, {\n    className: \"NFT-content\",\n    align: \"center\"\n  }, vaultValues.length && vaultValues.filter(function (item) {\n    return item.type == \"nft\";\n  }).length > 0 ? __jsx(NFTSlideshow, {\n    name: vaultName,\n    image: vaultValues[0].image,\n    items: vaultValues.filter(function (value) {\n      return value.image !== vaultValues[0].image;\n    }).map(function (value) {\n      return {\n        image: value.image,\n        description: value.description,\n        name: value.name,\n        type: value.type\n      };\n    }),\n    properties: {\n      'duration': 3000,\n      canSwipe: false\n    }\n  }) : __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: vaultImage\n  })) : invalidVault ? __jsx(Stack, {\n    align: \"center\"\n  }, __jsx(Image, {\n    width: \"md\",\n    src: \"https://starwarsblog.starwars.com/wp-content/uploads/2017/06/25-star-wars-quotes-obi-wan-kenobi-identification-tall.jpg\"\n  }), __jsx(Text, null, \"THESE ARE NOT THE VAULTS YOU ARE LOOKING FOR\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\"\n  }, \"CREATE ONE HERE!\"))) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: function onComplete() {\n      if (claiming && !accepting && !preTransfering) {\n        setHash(null);\n        setStatus('claimed');\n        setClaiming(false);\n        setClaimedBy(account); // pingClaimLogs(()=>{\n\n        location.href = location.origin + '/nft?id=' + tokenId + '&cc=t'; // })\n      } else if (preTransfering) {\n        savePasswordToLocalStorage();\n        setShowTransferPassword(true);\n        setPreTransfering(false);\n        setHash(null);\n      } else if (accepting) {\n        setAccepting(false);\n        getVault();\n        setHash(null);\n      } else if (approving) {\n        setApproving(false);\n        getVault();\n        setHash(null);\n        location.href = location.origin + '/nft?id=' + tokenId;\n      } else if (transfering) {\n        setTransfering(false);\n        getVault();\n        setHash(null);\n      } else if (minting) {\n        checkLiveliness(tokenId, function () {\n          setMinting(false);\n          setLive(true);\n          location.href = location.origin + '/nft?id=' + tokenId + '&cc=t'; // setShowMakingVaultMsg(false)\n          // location.href = location.origin + '/nft?id=' + tokenId\n        });\n      } else {\n        location.href = location.origin + '/nft?id=' + tokenId;\n        console.log('minting', minting);\n        console.log('claiming', claiming);\n        console.log('accepting', accepting);\n        console.log('preTransfering', preTransfering);\n        console.log('approving', approving);\n        console.log(\"Unknown state\");\n      }\n    }\n  }) : null, __jsx(Box, {\n    height: \"40px\"\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}