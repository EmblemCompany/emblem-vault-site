{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Link, Stack, Button, Input } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from '../Refreshing';\nimport { useRouter } from 'next/router';\nimport { TransactionToast } from '../TransactionToast';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { HStack, VStack, Divider } from '@chakra-ui/react';\nimport { contractAddresses } from '../../constants';\nimport { useContract } from '../../hooks';\nimport { EXPLORER_PREFIXES } from '../../utils';\nimport { Contract } from '@ethersproject/contracts';\nexport default function ERC1155() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId,\n    library\n  } = useWeb3React();\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: true\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(true);\n  const {\n    0: refreshing,\n    1: setRefreshing\n  } = useState(true);\n  const {\n    0: stats,\n    1: setStats\n  } = useState([]);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address || null);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(0);\n  const {\n    0: limit,\n    1: setLimit\n  } = useState(10);\n  const {\n    0: shouldFetchData,\n    1: setShouldFetchData\n  } = useState(address ? true : false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: buttonDisabled,\n    1: setButtonDisabled\n  } = useState(false);\n  const {\n    0: hash,\n    1: setHash\n  } = useState(null);\n  const {\n    0: factories,\n    1: setFactories\n  } = useState([]);\n  const {\n    0: clones,\n    1: setClones\n  } = useState([]);\n  const {\n    0: contractAddress,\n    1: setContractAddress\n  } = useState(query.address);\n  const {\n    0: contract,\n    1: setContract\n  } = useState();\n  const handlerContract = useContract(contractAddresses.vaultHandlerV8[chainId], contractAddresses.vaultHandlerV8Abi, true);\n  // useEffect(() => {\n  //   if (state.loaded == false && !loadingApi && address) {\n  //     setLoadingApi(false)\n  //     // getPnL()\n  //   }\n  // }, [])\n  // useEffect(() => {\n  //   if (shouldFetchData && address) {\n  //     console.log(\"Should load api after setting consts\", offset)\n  //     setShouldFetchData(false)\n  //     // getPnL()\n  //   } else {\n  //     console.log(\"wtf\")\n  //   }\n  // }, [shouldFetchData, offset])\n  // const fetchDataForLazyLoad = async () =>{    \n  //   console.log('setting new offset to', offset+limit)\n  //   setOffset(offset+limit)\n  //   setShouldFetchData(true)\n  // }\n  useEffect(() => {\n    if (loadingApi && refreshing && contractAddress) {\n      setLoadingApi(false);\n      setState({\n        loaded: true\n      });\n      setRefreshing(false); // alert(0)\n\n      GetContracts();\n    }\n  });\n\n  const StartRefresh = async () => {\n    setRefreshing(true);\n    setLoadingApi(true);\n  };\n\n  async function createClone(cloneType) {\n    let factory = factories.filter(factory => {\n      return factory.type == cloneType;\n    })[0];\n    let factoryContract = getFactoryContract(factory.address);\n    factoryContract.createClone(account).then(({\n      hash\n    }) => {\n      console.log(\"hash\", hash);\n      setHash(hash);\n    });\n  }\n\n  async function GetContracts() {\n    let contract = getCloneContract(contractAddress, \"ERC1155\");\n    setContract(contract);\n    console.log(\"Contract\", Object.keys(contract));\n  }\n\n  async function getFactoryInto(factories, index, values) {\n    let factory = factories[index];\n    let factoryContract = getFactoryContract(factory);\n    let factoryType = await factoryContract.factoryType();\n    let factoryClones = await factoryContract.getClones();\n    let factoryOwner = await factoryContract.owner();\n    let detailedClones = await getCloneInto(factoryClones, 0, factoryType, []);\n    values.push({\n      type: factoryType,\n      address: factory,\n      clones: detailedClones,\n      owner: factoryOwner\n    });\n\n    if (index + 1 == factories.length) {\n      return values;\n    } else {\n      return getFactoryInto(factories, index + 1, values);\n    }\n  }\n\n  async function getClones() {\n    let erc1155 = await handlerContract.getAllRegisteredContractsOfType(1);\n    console.log(\"---------\", erc1155, erc1155.length);\n    erc1155 = await getCloneInto(erc1155, 0, \"ERC1155\", []);\n    let erc721 = await handlerContract.getAllRegisteredContractsOfType(2);\n    erc721 = await getCloneInto(erc721, 0, \"ERC721\", []);\n    let erc20 = await handlerContract.getAllRegisteredContractsOfType(4);\n    erc20 = await getCloneInto(erc20, 0, \"ERC20\", []);\n    setClones(erc1155.concat(erc721).concat(erc20));\n  }\n\n  async function getCloneInto(_clones, index, cloneType, values) {\n    if (_clones.length == 0) return values;\n    let clone = _clones[index];\n    let cloneContract = getCloneContract(clone, cloneType);\n    let cloneOwner = await cloneContract.owner();\n    let cloneName = await cloneContract.name();\n    let decimals = cloneType == \"ERC20\" ? await cloneContract.decimals() : 0;\n    let cloneBalance = cloneType == \"ERC20\" ? calculateBalance((await cloneContract.balanceOf(account)).toNumber(), decimals) : cloneType == \"ERC1155\" ? await getERC1155TokenBalance(cloneContract, account) : 0;\n    let serializable = cloneType != \"ERC1155\" ? false : await cloneContract.isSerialized();\n    values.push({\n      address: clone,\n      owner: cloneOwner,\n      name: cloneName,\n      type: cloneType,\n      balance: cloneBalance,\n      decimals: decimals,\n      serializable: serializable\n    });\n\n    if (index + 1 == _clones.length) {\n      return values;\n    } else {\n      return getCloneInto(_clones, index + 1, cloneType, values);\n    }\n  }\n\n  async function getERC1155TokenBalance(contract, address) {\n    let ids = await contract.getTokenIds();\n    let myIds = ids.length > 0 ? getMyBalanceByIds(ids, 0, contract, address, []) : [];\n\n    async function getMyBalanceByIds(tokenIds, index, contract, address, values) {\n      let id = tokenIds[index];\n      let tokenBalance = await contract.balanceOf(address, id.toNumber());\n\n      if (tokenBalance.toNumber() > 0) {// alert(id.toNumber())\n        // alert(tokenBalance.toNumber())\n      }\n\n      if (index + 1 == tokenIds.length) {\n        return values;\n      } else {\n        return getMyBalanceByIds(tokenIds, index + 1, contract, address, values);\n      }\n    }\n\n    console.log(\"ids\", ids);\n    return ids.length;\n  }\n\n  async function toggleSerializable(address) {\n    let cloneContract = getCloneContract(address, \"ERC1155\");\n    cloneContract.toggleSerialization().then(({\n      hash\n    }) => {\n      setHash(hash);\n    });\n  }\n\n  function getCloneContract(address, cloneType) {\n    let abi;\n\n    switch (cloneType) {\n      case \"ERC20\":\n        abi = contractAddresses.erc20Abi;\n        break;\n\n      case \"ERC721\":\n        abi = contractAddresses.erc721Abi;\n        break;\n\n      case \"ERC1155\":\n        abi = contractAddresses.erc1155Abi;\n        break;\n    }\n\n    return new Contract(address, abi, library.getSigner(account).connectUnchecked());\n  }\n\n  function getFactoryContract(address) {\n    return new Contract(address, contractAddresses.clonableFactoryAbi, library.getSigner(account).connectUnchecked());\n  }\n\n  function calculateBalance(balance, decimals) {\n    return balance / Math.pow(10, parseInt(decimals));\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded\n  }, refreshing ? __jsx(Refreshing, null) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10\n  }, __jsx(Stack, {\n    align: \"center\",\n    w: \"100%\"\n  }, __jsx(Button, {\n    onClick: StartRefresh\n  }, \"Refresh Data\"), clones.length > 0 ? clones.map((clone, index) => {\n    return __jsx(VStack, {\n      key: \"factory-\" + index,\n      p: 2\n    }, __jsx(Box, {\n      w: \"100%\",\n      \"min-width\": \"40px\"\n    }, __jsx(Text, {\n      key: \"address-\" + clone.address,\n      ml: 12\n    }, clone.owner == account ? \"Owned\" : null, \" \", clone.type, \":\", __jsx(Link, {\n      target: \"_blank\",\n      href: location.protocol + \"//\" + EXPLORER_PREFIXES[chainId] + \"/address/\" + clone.address + \"#readContract\"\n    }, \" \", clone.address)), __jsx(Divider, {\n      orientation: \"horizontal\"\n    }), __jsx(Text, {\n      key: \"name-\" + clone.name + index,\n      ml: 12\n    }, \"Name: \", clone.name || \"Not Named\"), __jsx(Divider, {\n      orientation: \"horizontal\"\n    }), __jsx(Text, {\n      key: \"balance-\" + clone.balance + index,\n      ml: 12\n    }, \"Balance: \", clone.balance), __jsx(Divider, {\n      orientation: \"horizontal\"\n    }), __jsx(Text, {\n      key: \"ser-\" + index,\n      ml: 12\n    }, \" Serializable: \", clone.serializable.toString() || \"Not Serializable\", clone.type == \"ERC1155\" ? __jsx(Button, {\n      m: 3,\n      onClick: () => {\n        toggleSerializable(clone.address);\n      }\n    }, \"Toggle\") : null), __jsx(Divider, {\n      orientation: \"horizontal\"\n    }), __jsx(HStack, null, __jsx(Input, {\n      placeholder: \"TokenId\"\n    }), __jsx(Input, {\n      placeholder: \"Amount\"\n    }), __jsx(Button, null, \"Mint\"))));\n  }) : null, hash ? __jsx(TransactionToast, {\n    hash: hash,\n    onComplete: () => {\n      setHash(null);\n      StartRefresh();\n    }\n  }) : null)));\n}","map":null,"metadata":{},"sourceType":"module"}