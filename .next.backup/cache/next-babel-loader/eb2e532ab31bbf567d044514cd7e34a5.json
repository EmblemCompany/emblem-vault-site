{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Search.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Link, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport { Embed } from './Embed';\nexport default function Search() {\n  _s();\n\n  var _this = this;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId;\n\n  var _useState = useState([]),\n      vaults = _useState[0],\n      setVaults = _useState[1];\n\n  var _useState2 = useState({\n    loaded: false\n  }),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(false),\n      loadingApi = _useState3[0],\n      setLoadingApi = _useState3[1];\n\n  var _useState4 = useState(query.q),\n      q = _useState4[0],\n      setQ = _useState4[1];\n\n  var getVaults = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, jsonData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(EMBLEM_API + '/search', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  service: 'evmetadata',\n                  chainId: chainId.toString()\n                },\n                body: JSON.stringify({\n                  q: q\n                })\n              });\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n\n            case 6:\n              jsonData = _context.sent;\n              setState({\n                loaded: true\n              });\n              setVaults(jsonData); // saveCache(jsonData)\n\n              setLoadingApi(false); // console.log(jsonData)\n\n              _context.next = 14;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 12]]);\n    }));\n\n    return function getVaults() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_allvaults')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_allvaults', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n\n  var _useState5 = useState(''),\n      acct = _useState5[0],\n      setAcct = _useState5[1];\n\n  useEffect(function () {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [account, acct]);\n\n  var _useState6 = useState(chainId),\n      chain = _useState6[0],\n      setChain = _useState6[1];\n\n  useEffect(function () {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      });\n      getVaults();\n    }\n  }, [chainId, chain]);\n  useEffect(function () {\n    account && chainId ? getVaults() : setState({\n      loaded: true\n    });\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, vaults.length ? vaults.map(function (vault, index) {\n    var pieces = location.pathname.split('/');\n    pieces.pop();\n    var url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId;\n    var flexSettings = {\n      flex: '1',\n      minW: '300px',\n      maxW: '300px',\n      borderWidth: '1px',\n      color: 'white',\n      mx: '6',\n      mb: '6',\n      rounded: 'lg',\n      overflow: 'hidden',\n      borderColor: vault.status == 'claimed' ? 'green !important' : '',\n      cursor: 'pointer'\n    };\n\n    var redirect = function redirect() {\n      location.href = url;\n    };\n\n    return __jsx(Box, _extends({\n      key: index\n    }, flexSettings, {\n      onClick: redirect,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }), __jsx(Text, {\n      fontWeight: \"semibold\",\n      textAlign: \"center\",\n      mt: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, vault.name), __jsx(Stack, {\n      align: \"center\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, __jsx(Embed, {\n      url: vault.image,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 19\n      }\n    })), __jsx(Box, {\n      d: \"flex\",\n      alignItems: \"baseline\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    }, __jsx(Box, {\n      color: \"gray.500\",\n      fontWeight: \"semibold\",\n      letterSpacing: \"wide\",\n      fontSize: \"sm\",\n      ml: \"2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 19\n      }\n    })), __jsx(Stack, {\n      align: \"center\",\n      mt: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }, vault.status == 'claimed' ? __jsx(Text, {\n      color: \"green.500\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 48\n      }\n    }, \"CLAIMED\") : null));\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, \"Search Resulted in 0 Vaults.\", ' ', __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, \"CREATE ONE HERE!\"))));\n}\n\n_s(Search, \"Aump0SQBP6oiSr2ZXY+P6vzKKfg=\", false, function () {\n  return [useRouter, useWeb3React];\n});\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Search.tsx"],"names":["Box","Flex","Text","Link","Stack","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","EMBLEM_API","Embed","Search","query","account","chainId","vaults","setVaults","loaded","state","setState","loadingApi","setLoadingApi","q","setQ","getVaults","fetch","method","headers","service","toString","body","JSON","stringify","response","json","jsonData","acct","setAcct","chain","setChain","length","map","vault","index","pieces","location","pathname","split","pop","url","origin","join","tokenId","flexSettings","flex","minW","maxW","borderWidth","color","mx","mb","rounded","overflow","borderColor","status","cursor","redirect","href","name","image"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Spinner } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { EMBLEM_API } from '../constants'\nimport { Embed } from './Embed'\n\nexport default function Search() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [q, setQ] = useState(query.q)\n\n  const getVaults = async () => {\n    // loadCache()\n    try {      \n      const response = await fetch(EMBLEM_API + '/search', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata',\n          chainId: chainId.toString(),\n        },\n        body: JSON.stringify({q: q})\n      })\n      const jsonData = await response.json()\n      setState({ loaded: true })\n      setVaults(jsonData)\n      // saveCache(jsonData)\n      setLoadingApi(false)\n      // console.log(jsonData)\n    } catch (error) {}\n  }\n\n  // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_allvaults')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_allvaults', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      getVaults()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    account && chainId ? getVaults() : setState({ loaded: true })\n  }, [])\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\" mt={10}>\n        {vaults.length ? (\n          vaults.map((vault, index) => {\n            let pieces = location.pathname.split('/')\n            pieces.pop()\n            let url = location.origin + pieces.join('/') + '/nft?id=' + vault.tokenId\n            const flexSettings = {\n              flex: '1',\n              minW: '300px',\n              maxW: '300px',\n              borderWidth: '1px',\n              color: 'white',\n              mx: '6',\n              mb: '6',\n              rounded: 'lg',\n              overflow: 'hidden',\n              borderColor: vault.status == 'claimed' ? 'green !important' : '',\n              cursor: 'pointer',\n            }\n            const redirect = function () {\n              location.href = url\n            }\n            return (\n              <Box key={index} {...flexSettings} onClick={redirect}>\n                <Text fontWeight=\"semibold\" textAlign=\"center\" mt={2}>\n                  {vault.name}\n                  {/* {!vault.private ? ': ~$' + vault.totalValue : null} */}\n                </Text>\n                <Stack align=\"center\">\n                  <Embed url={vault.image}/>\n                </Stack>\n                <Box d=\"flex\" alignItems=\"baseline\">\n                  <Box color=\"gray.500\" fontWeight=\"semibold\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                    {/* {vault.private ? (\n                      <>\n                        <Text>Contents hidden. Click to view the vault and unlock values.</Text>\n                      </>\n                    ) : vault.values.length ? (\n                      vault.values.map((coin, index) => {\n                        if (index < 4)\n                          return (\n                            <Text key={coin.name} isTruncated>\n                              {coin.name}: {coin.balance}\n                            </Text>\n                          )\n                        else if (index == 4)\n                          return (\n                            <Text fontWeight=\"bold\" mt={2}>\n                              ... Click to see the rest ...\n                            </Text>\n                          )\n                      })\n                    ) : (\n                      <Text>\n                        Nothing in here! <br />\n                        Click to fill 'er up!\n                      </Text>\n                    )} */}\n                  </Box>\n                </Box>\n                {/* <Box d=\"flex\" alignItems=\"baseline\">\n                  <Box color=\"gray.500\" fontWeight=\"semibold\" letterSpacing=\"wide\" fontSize=\"sm\" ml=\"2\">\n                    <Text>\n                      Total Computable Value: {vault.totalValue}\n                    </Text>\n                  </Box>\n                  </Box> */}\n                <Stack align=\"center\" mt={3}>\n                  {vault.status == 'claimed' ? <Text color=\"green.500\">CLAIMED</Text> : null}\n                </Stack>\n              </Box>\n            )\n          })\n        ) : (\n          <Text>\n            Search Resulted in 0 Vaults.{' '}\n            <Link color=\"#638cd8\" href=\"../create\">\n              CREATE ONE HERE!\n            </Link>\n          </Text>\n        )}\n      </Flex>\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}