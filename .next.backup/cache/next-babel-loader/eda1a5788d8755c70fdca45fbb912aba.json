{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { FormControl, FormLabel, FormHelperText, Input, Stack, Box, Flex, Text, Textarea, Button, Link, Select } from '@chakra-ui/core';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport Loader from 'react-loader';\nimport { usePapaParse } from 'react-papaparse';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nexport default function Batch() {\n  const {\n    query\n  } = useRouter();\n  const {\n    0: status,\n    1: setStatus\n  } = useState('configure');\n  const {\n    0: batches,\n    1: setBatches\n  } = useState([]);\n  const {\n    0: demoIndex,\n    1: setDemoIndex\n  } = useState(-1);\n  const {\n    0: action,\n    1: setAction\n  } = useState(query.action || 'list');\n  const {\n    0: batchVaults,\n    1: setBatchVaults\n  } = useState([]);\n  const {\n    0: batchName,\n    1: setBatchName\n  } = useState(\"\");\n  const {\n    0: imageBaseUrl,\n    1: setImageBaseUrl\n  } = useState(\"\");\n  const {\n    0: inscriptionBaseUrl,\n    1: setInscriptionBaseUrl\n  } = useState(\"\");\n  const {\n    0: addressType,\n    1: setAddressType\n  } = useState(\"\");\n  const {\n    0: titleTemplate,\n    1: setTitleTemplate\n  } = useState(\"\");\n  const {\n    0: descriptionTemplate,\n    1: setDescriptionTemplate\n  } = useState(\"\");\n  const {\n    0: total,\n    1: setTotal\n  } = useState(\"\");\n  const {\n    0: batchData,\n    1: setBatchData\n  } = useState(\"\");\n  const {\n    0: batchDataJson,\n    1: setBatchDataJson\n  } = useState([]);\n  const {\n    0: batchId,\n    1: setBatchId\n  } = useState(query.batch_id || \"\");\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    readString,\n    jsonToCSV\n  } = usePapaParse();\n  useEffect(() => {\n    if (!state.loaded && batchId && !batchName) {\n      getBatch();\n      getVaultsForBatch(batchId.toString());\n    } else if (!state.loaded && !batchId && !batchName && action == 'list') {\n      getBatches();\n    } else {\n      setState({\n        loaded: true\n      });\n    }\n  }, []);\n\n  const getBatch = async () => {\n    var requestOptions = {\n      method: 'GET'\n    };\n    fetch(EMBLEM_API + `/batch?batchId=${batchId}`, requestOptions).then(async response => {\n      let record = await response.json();\n      setState({\n        loaded: true\n      });\n      setBatchName(record.batch_name);\n      setImageBaseUrl(record.image_base_url);\n      setInscriptionBaseUrl(record.inscription_base_url);\n      setAddressType(record.address_type);\n      setStatus(record.status);\n      setTitleTemplate(record.title_template);\n      setDescriptionTemplate(record.description_template);\n      let parsedJson = JSON.parse(record.data);\n      setBatchDataJson(parsedJson);\n      let csvData = jsonToCSV(parsedJson);\n      setBatchData(csvData);\n      setTotal((parsedJson.length - 1).toString());\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const getVaultsForBatch = async batchId => {\n    // alert(0)\n    var requestOptions = {\n      method: 'GET'\n    };\n    fetch(EMBLEM_API + \"/batchVaults/\" + batchId, requestOptions).then(async response => {\n      let records = await response.json();\n      setBatchVaults(records);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const getBatches = async () => {\n    var requestOptions = {\n      method: 'GET'\n    };\n    fetch(EMBLEM_API + `/batches`, requestOptions).then(async response => {\n      let records = await response.json();\n      console.log(records);\n      setBatches(records);\n      setState({\n        loaded: true\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const startBatch = async () => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    var raw = JSON.stringify({\n      \"batchId\": batchId\n    });\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw\n    };\n    fetch(EMBLEM_API + \"/startBatch\", requestOptions).then(async response => {\n      let results = await response.json();\n      location.href = \"/batch?action=view&batch_id=\" + batchId;\n    });\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    let jsonData = await csvToJson(batchData);\n    const serializedForm = {\n      batchName,\n      imageBaseUrl,\n      inscriptionBaseUrl,\n      addressType,\n      titleTemplate,\n      descriptionTemplate,\n      total,\n      batchId,\n      batchData: jsonData.data\n    };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm)\n    }).then(async response => {\n      let data = await response.json();\n\n      if (data.id) {\n        setBatchId(data.id);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  function csvToJson(data) {\n    return new Promise((resolve, reject) => {\n      readString(data, {\n        worker: true,\n        complete: results => {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  function parseTemplate(index, template) {\n    let tokens = listTokens(template);\n    let modifiedTitle = template;\n    tokens.forEach(item => {\n      let value = item == 'batch_name' ? batchName : item == 'asset_number' ? batchDataJson[index][0] : item == 'inscription_number' ? batchDataJson[index][1] : item == 'inscription_base_url' ? inscriptionBaseUrl : item == 'inscription_hash' ? batchDataJson[index][2] : '';\n      modifiedTitle = modifiedTitle.replace(item, value);\n    });\n    modifiedTitle = modifiedTitle.replaceAll('{', '').replaceAll('}', '');\n    return modifiedTitle;\n  }\n\n  function parseImage(index) {\n    return imageBaseUrl + batchDataJson[index][2];\n  }\n\n  function parseTo(index) {\n    return batchDataJson[index][3];\n  }\n\n  function listTokens(str) {\n    let regex = /\\{(.*?)\\}/g;\n    let result;\n    let items = [];\n\n    while (result = regex.exec(str)) {\n      items = items.concat(result[1].split(','));\n    }\n\n    return items;\n  }\n\n  function isValidBatchData() {\n    if (!batchDataJson) return false;\n    let hasRows = batchDataJson.length > 1;\n    if (!hasRows) return false;\n    let correctColumns = batchDataJson[0].length == 4;\n    let correctHeaders = batchDataJson[0][0] == 'asset_number' && batchDataJson[0][1] == 'inscription_number' && batchDataJson[0][2] == 'inscription_hash' && batchDataJson[0][3] == 'to';\n    let batchNotStarted = status == 'configure';\n    return hasRows && correctColumns && correctHeaders && batchNotStarted;\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }\n  }, action && (action == 'edit' || action == 'add') ? __jsx(React.Fragment, null, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }\n  }, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 15\n    }\n  }, __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 15\n    }\n  }, __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 17\n    }\n  }, \" All Batch Jobs\"), batchId ? __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=view&batch_id=\" + batchId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 19\n    }\n  }, \" View Job\") : null), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 19\n    }\n  }, __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"batch-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 23\n    }\n  }, \"Batch Name\"), __jsx(Input, {\n    type: \"text\",\n    id: \"batch-name\",\n    \"aria-describedby\": \"batch-name-text\",\n    value: batchName,\n    onChange: e => setBatchName(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"batch-name-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 23\n    }\n  }, \"Give it a unique name for this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"image-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 23\n    }\n  }, \"Image Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"image-base-url\",\n    \"aria-describedby\": \"image-base-url-text\",\n    value: imageBaseUrl,\n    onChange: e => setImageBaseUrl(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"image-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 23\n    }\n  }, \"Enter the base url for the images in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"inscription-base-url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 23\n    }\n  }, \"Inscription Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"inscription-base-url\",\n    \"aria-describedby\": \"inscription-base-url-text\",\n    value: inscriptionBaseUrl,\n    onChange: e => setInscriptionBaseUrl(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"inscription-base-url-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 23\n    }\n  }, \"Enter the base url for the inscriptions in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"address-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 23\n    }\n  }, \"Address Type\"), __jsx(Input, {\n    type: \"text\",\n    id: \"address-type\",\n    \"aria-describedby\": \"address-type-text\",\n    value: addressType,\n    onChange: e => setAddressType(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"address-type-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 23\n    }\n  }, \"Enter the address type for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"title-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 23\n    }\n  }, \"Title Template\"), __jsx(Textarea, {\n    id: \"title-template\",\n    fontSize: 'xx-small',\n    size: \"lg\",\n    \"aria-describedby\": \"title-template-text\",\n    minLength: 3,\n    maxLength: 4024,\n    value: titleTemplate,\n    onChange: e => setTitleTemplate(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"title-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 23\n    }\n  }, \"Enter the title template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 23\n    }\n  }, \"Description Template\"), __jsx(Textarea, {\n    id: \"description-template\",\n    fontSize: 'xx-small',\n    size: \"lg\",\n    \"aria-describedby\": \"description-template-text\",\n    minLength: 3,\n    maxLength: 1024,\n    value: descriptionTemplate,\n    onChange: e => setDescriptionTemplate(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"description-template-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 23\n    }\n  }, \"Enter the description template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 23\n    }\n  }, \"Total\"), __jsx(Input, {\n    isDisabled: true,\n    type: \"number\",\n    id: \"total\",\n    \"aria-describedby\": \"total-text\",\n    value: total,\n    onChange: e => setTotal(e.target.value),\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"total-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 23\n    }\n  }, \"Enter the total number of items in this batch.\")), __jsx(FormControl, {\n    isRequired: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 21\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 23\n    }\n  }, \"Records\"), __jsx(Textarea, {\n    id: \"records\",\n    size: \"lg\",\n    fontSize: 'xx-small',\n    \"aria-describedby\": \"records-text\",\n    minLength: 3,\n    value: batchData,\n    onChange: async e => {\n      setBatchData(e.target.value);\n      let jsonData = await csvToJson(e.target.value);\n      setBatchDataJson(jsonData.data);\n      setTotal(jsonData.data.length > 1 ? (jsonData.data.length - 1).toString() : '0');\n    },\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 23\n    }\n  }), __jsx(FormHelperText, {\n    id: \"records-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 23\n    }\n  }, \"Enter the CSV rows from the helper spreadsheet\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"15px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 19\n    }\n  }, __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    isDisabled: !isValidBatchData(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 21\n    }\n  }, \"Save Batch Job\"), __jsx(Button, {\n    mt: 4,\n    isDisabled: !isValidBatchData() || status == \"running\",\n    onClick: startBatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 21\n    }\n  }, \"Start Batch Job\")), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"15px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 19\n    }\n  }, isValidBatchData() ? __jsx(Select, {\n    id: \"type-selector\",\n    w: \"100%\",\n    value: demoIndex,\n    onChange: e => {\n      setDemoIndex(Number(e.target.value));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 23\n    }\n  }, __jsx(\"option\", {\n    value: \"-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 25\n    }\n  }, \"Select # to preview\"), batchDataJson.map((item, index) => {\n    console.log(item);\n\n    if (index > 0) {\n      return __jsx(\"option\", {\n        value: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 31\n        }\n      }, parseTemplate(index, titleTemplate));\n    }\n  })) : null), __jsx(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 19\n    }\n  }, demoIndex && demoIndex > -1 ? __jsx(React.Fragment, null, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 25\n    }\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: parseTemplate(demoIndex, descriptionTemplate),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 27\n    }\n  })), __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: parseImage(demoIndex),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 25\n    }\n  }), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 25\n    }\n  }, \"Vault For: \", parseTo(demoIndex))) : null))))) : action == 'list' ? __jsx(Box, {\n    maxW: \"lg\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 11\n    }\n  }, batches.length > 0 ? batches.map((item, index) => {\n    return __jsx(Stack, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }\n    }, __jsx(Link, {\n      margin: \"10px\",\n      href: \"/batch?action=edit&batch_id=\" + item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 19\n      }\n    }, \" \", item.batch_name, \" (\", item.status, \")\"));\n  }) : null, __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 11\n    }\n  }, \" Add New Batch\")) : action == 'view' ? __jsx(Box, {\n    maxW: \"lg\",\n    margin: \"10px\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 11\n    }\n  }, batchVaults.length, \" of \", total, \" \", batchDataJson.length, \" vaults created\", batchDataJson.map((item, index) => {\n    console.log(item);\n\n    if (index > 0) {\n      return __jsx(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 30\n        }\n      }, batchVaults[index]);\n    }\n  })) : null));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx"],"names":["FormControl","FormLabel","FormHelperText","Input","Stack","Box","Flex","Text","Textarea","Button","Link","Select","useRouter","useEffect","useState","EMBLEM_API","Loader","usePapaParse","ReactMarkdown","gfm","Embed","Batch","query","status","setStatus","batches","setBatches","demoIndex","setDemoIndex","action","setAction","batchVaults","setBatchVaults","batchName","setBatchName","imageBaseUrl","setImageBaseUrl","inscriptionBaseUrl","setInscriptionBaseUrl","addressType","setAddressType","titleTemplate","setTitleTemplate","descriptionTemplate","setDescriptionTemplate","total","setTotal","batchData","setBatchData","batchDataJson","setBatchDataJson","batchId","setBatchId","batch_id","state","setState","loaded","readString","jsonToCSV","getBatch","getVaultsForBatch","toString","getBatches","requestOptions","method","fetch","then","response","record","json","batch_name","image_base_url","inscription_base_url","address_type","title_template","description_template","parsedJson","JSON","parse","data","csvData","length","catch","err","console","log","records","startBatch","myHeaders","Headers","append","raw","stringify","headers","body","results","location","href","handleSubmit","event","preventDefault","jsonData","csvToJson","serializedForm","id","Promise","resolve","reject","worker","complete","parseTemplate","index","template","tokens","listTokens","modifiedTitle","forEach","item","value","replace","replaceAll","parseImage","parseTo","str","regex","result","items","exec","concat","split","isValidBatchData","hasRows","correctColumns","correctHeaders","batchNotStarted","e","target","Number","map"],"mappings":"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","sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Stack,\n  Box,\n  Flex,\n  Text,\n  Textarea,\n  Button,\n  Link,\n  Select\n} from '@chakra-ui/core'\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport Loader from 'react-loader'\nimport { usePapaParse } from 'react-papaparse';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm'\nimport Embed from './Embed';\n\nexport default function Batch() {\n  const { query } = useRouter()\n  const [status, setStatus] = useState('configure')\n  const [batches, setBatches] = useState([])\n  const [demoIndex, setDemoIndex] = useState(-1)\n  const [action, setAction] = useState(query.action || 'list')\n  const [batchVaults, setBatchVaults] = useState([])\n  const [batchName, setBatchName] = useState(\"\");\n  const [imageBaseUrl, setImageBaseUrl] = useState(\"\");\n  const [inscriptionBaseUrl, setInscriptionBaseUrl] = useState(\"\");\n  const [addressType, setAddressType] = useState(\"\");\n  const [titleTemplate, setTitleTemplate] = useState(\"\");\n  const [descriptionTemplate, setDescriptionTemplate] = useState(\"\");\n  const [total, setTotal] = useState(\"\");\n  const [batchData, setBatchData] = useState(\"\");\n  const [batchDataJson, setBatchDataJson] = useState([]);\n  const [batchId, setBatchId] = useState(query.batch_id || \"\")\n  const [state, setState] = useState({ loaded: false })\n  const { readString, jsonToCSV } = usePapaParse();\n\n\n  useEffect(() => {\n    if (!state.loaded && batchId && !batchName) {\n      getBatch()\n      getVaultsForBatch(batchId.toString())\n    } else if (!state.loaded && !batchId && !batchName && action == 'list') {\n      getBatches()\n    }  else {\n      setState({ loaded: true })\n    }\n  }, [])\n\n  const getBatch = async () => {\n    var requestOptions: any = {\n      method: 'GET'\n    };\n\n    fetch(EMBLEM_API + `/batch?batchId=${batchId}`, requestOptions).then(async (response) => {\n      let record = await response.json()\n      setState({ loaded: true })\n      setBatchName(record.batch_name)\n      setImageBaseUrl(record.image_base_url)\n      setInscriptionBaseUrl(record.inscription_base_url)\n      setAddressType(record.address_type)\n      setStatus(record.status)\n      setTitleTemplate(record.title_template)\n      setDescriptionTemplate(record.description_template)\n      let parsedJson = JSON.parse(record.data)\n      setBatchDataJson(parsedJson)\n      let csvData = jsonToCSV(parsedJson)\n      setBatchData(csvData)\n      setTotal((parsedJson.length - 1).toString())\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const getVaultsForBatch = async (batchId: string)=>{\n    // alert(0)\n    var requestOptions = {\n      method: 'GET'\n    };\n    \n    fetch(EMBLEM_API + \"/batchVaults/\"+batchId, requestOptions)\n    .then(async (response) => {\n      let records = await response.json()\n      setBatchVaults(records)\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const getBatches = async () => {\n    var requestOptions: any = {\n      method: 'GET'\n    };\n\n    fetch(EMBLEM_API + `/batches`, requestOptions).then(async (response) => {\n      let records = await response.json()\n      console.log(records)\n      setBatches(records)\n      setState({ loaded: true })\n    }).catch(err => {\n      console.log(err)\n    })\n  }\n\n  const startBatch = async () =>{\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    var raw = JSON.stringify({\n      \"batchId\": batchId\n    });\n\n    var requestOptions: any = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n    };\n\n    fetch(EMBLEM_API + \"/startBatch\", requestOptions).then(async (response) => {\n      let results = await response.json()\n      location.href=\"/batch?action=view&batch_id=\"+batchId\n    })\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    let jsonData: any = await csvToJson(batchData)\n    const serializedForm = {\n      batchName,\n      imageBaseUrl,\n      inscriptionBaseUrl,\n      addressType,\n      titleTemplate,\n      descriptionTemplate,\n      total,\n      batchId,\n      batchData: jsonData.data\n\n    };\n    fetch(EMBLEM_API + '/addBatch', {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm),\n    }).then(async (response) => {\n      let data = await response.json()\n      if (data.id) {\n        setBatchId(data.id)\n      }\n    }).catch(err => {\n      console.log(err)\n    })\n  };\n\n  function csvToJson(data) {\n    return new Promise((resolve, reject) => {\n      readString(data, {\n        worker: true,\n        complete: (results: any) => {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  function parseTemplate(index, template){\n    let tokens = listTokens(template)\n    let modifiedTitle = template\n    tokens.forEach((item)=>{\n      let value = \n      item == 'batch_name'? batchName:\n      item == 'asset_number'? batchDataJson[index][0]:\n      item == 'inscription_number'? batchDataJson[index][1]:\n      item == 'inscription_base_url'? inscriptionBaseUrl:\n      item == 'inscription_hash'? batchDataJson[index][2]:\n      ''\n      modifiedTitle = modifiedTitle.replace(item, value)\n    })\n    modifiedTitle = modifiedTitle.replaceAll('{', '').replaceAll('}', '')\n    return modifiedTitle\n  }\n\n  function parseImage(index) {\n    return imageBaseUrl + batchDataJson[index][2]\n  }\n\n  function parseTo(index) {\n    return batchDataJson[index][3]\n  }\n\n  function listTokens(str) {\n    let regex = /\\{(.*?)\\}/g;\n    let result;\n    let items = [];\n    \n    while (result = regex.exec(str)) {\n      items = items.concat(result[1].split(','))\n    }\n  \n    return items;\n  }\n\n  function isValidBatchData() {\n    if (!batchDataJson) return false\n    let hasRows = batchDataJson.length > 1\n    if (!hasRows) return false\n    let correctColumns = batchDataJson[0].length == 4\n    let correctHeaders = batchDataJson[0][0] == 'asset_number' && batchDataJson[0][1] == 'inscription_number' && batchDataJson[0][2] == 'inscription_hash' && batchDataJson[0][3] == 'to'\n    let batchNotStarted = status == 'configure'\n    return hasRows && correctColumns && correctHeaders && batchNotStarted\n  }\n\n  return (\n    <Loader loaded={state.loaded}>\n      <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n        {action && (action == 'edit' || action == 'add') ? (\n          <>\n            <Stack>\n              <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n              <Stack>\n                <Link margin=\"10px\" href={\"/batch?action=list\"}> All Batch Jobs</Link>\n                {batchId? (\n                  <Link margin=\"10px\" href={\"/batch?action=view&batch_id=\"+batchId}> View Job</Link>\n                ): null}                \n              </Stack>\n                <form onSubmit={handleSubmit}>\n                  <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"batch-name\">Batch Name</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"batch-name\"\n                        aria-describedby=\"batch-name-text\"\n                        value={batchName}\n                        onChange={(e) => setBatchName(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"batch-name-text\">Give it a unique name for this batch.</FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"image-base-url\">Image Base Url</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"image-base-url\"\n                        aria-describedby=\"image-base-url-text\"\n                        value={imageBaseUrl}\n                        onChange={(e) => setImageBaseUrl(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"image-base-url-text\">\n                        Enter the base url for the images in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"inscription-base-url\">Inscription Base Url</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"inscription-base-url\"\n                        aria-describedby=\"inscription-base-url-text\"\n                        value={inscriptionBaseUrl}\n                        onChange={(e) => setInscriptionBaseUrl(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"inscription-base-url-text\">\n                        Enter the base url for the inscriptions in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"address-type\">Address Type</FormLabel>\n                      <Input\n                        type=\"text\"\n                        id=\"address-type\"\n                        aria-describedby=\"address-type-text\"\n                        value={addressType}\n                        onChange={(e) => setAddressType(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"address-type-text\">\n                        Enter the address type for the items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"title-template\">Title Template</FormLabel>\n                      <Textarea\n                        id=\"title-template\"\n                        fontSize={'xx-small'}\n                        size=\"lg\"\n                        aria-describedby=\"title-template-text\"\n                        minLength={3}\n                        maxLength={4024}\n                        value={titleTemplate}\n                        onChange={(e) => setTitleTemplate(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"title-template-text\">\n                        Enter the title template for the items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"description-template\">Description Template</FormLabel>\n                      <Textarea\n                        id=\"description-template\"\n                        fontSize={'xx-small'}\n                        size=\"lg\"\n                        aria-describedby=\"description-template-text\"\n                        minLength={3}\n                        maxLength={1024}\n                        value={descriptionTemplate}\n                        onChange={(e) => setDescriptionTemplate(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"description-template-text\">\n                        Enter the description template for the items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"total\">Total</FormLabel>\n                      <Input\n                        isDisabled={true}\n                        type=\"number\"\n                        id=\"total\"\n                        aria-describedby=\"total-text\"\n                        value={total}\n                        onChange={(e) => setTotal(e.target.value)}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"total-text\">\n                        Enter the total number of items in this batch.\n                      </FormHelperText>\n                    </FormControl>\n\n                    <FormControl isRequired>\n                      <FormLabel htmlFor=\"description-template\">Records</FormLabel>\n                      <Textarea\n                        id=\"records\"\n                        size=\"lg\"\n                        fontSize={'xx-small'}\n                        aria-describedby=\"records-text\"\n                        minLength={3}\n                        value={batchData}\n                        onChange={async (e) => {\n                          setBatchData(e.target.value)\n                          let jsonData: any = await csvToJson(e.target.value)\n                          setBatchDataJson(jsonData.data)\n                          setTotal(jsonData.data.length > 1 ? (jsonData.data.length - 1).toString() : '0')\n                        }}\n                        autoComplete=\"off\"\n                      />\n                      <FormHelperText id=\"records-text\">\n                        Enter the CSV rows from the helper spreadsheet\n                      </FormHelperText>\n                    </FormControl>\n                  </Stack>\n                  <Stack direction=\"row\" align=\"flex-start\" padding=\"15px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    <Button mt={4} type=\"submit\" isDisabled={!isValidBatchData()} >\n                      Save Batch Job\n                    </Button>\n                    <Button mt={4} isDisabled={!isValidBatchData() || status == \"running\"} onClick={startBatch}>\n                      Start Batch Job\n                    </Button>\n                  </Stack>\n                  <Stack direction=\"row\" align=\"flex-start\" padding=\"15px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n                    {isValidBatchData()? (\n                      <Select id=\"type-selector\" w=\"100%\" value={demoIndex}\n                      onChange={(e)=>{\n                        setDemoIndex(Number(e.target.value))\n                      }}\n                      >\n                        <option value=\"-1\" >Select # to preview</option>\n                        {batchDataJson.map((item, index)=>{\n                          console.log(item)\n                          if (index > 0) {\n                            return (\n                              <option value={index}>{parseTemplate(index, titleTemplate)}</option> \n                            )\n                          }\n                        })}\n                      </Select>\n                    ): null}                  \n                  </Stack>\n                  <Stack>\n                    {demoIndex && demoIndex > -1 ? (\n                      <>\n                        <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" className=\"md\">\n                          <ReactMarkdown plugins={[gfm]} children={parseTemplate(demoIndex, descriptionTemplate)} />\n                        </Text>\n                        <Embed className=\"d-block w-100 NFT-image\" url={parseImage(demoIndex)}/>\n                        <Text>Vault For: {parseTo(demoIndex)}</Text>\n                      </>\n                    ) : null}\n                  </Stack>\n                </form>\n              </Box>\n            </Stack>\n          </>\n        ) : action == 'list'? (\n          <Box maxW=\"lg\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n            {batches.length> 0 ? batches.map((item, index)=>{\n              return (\n                <Stack>\n                  <Link margin=\"10px\" href={\"/batch?action=edit&batch_id=\"+item.id}> {item.batch_name} ({item.status})</Link>\n                </Stack>\n              )\n            }):null}\n          <Link margin=\"10px\" href={\"/batch?action=add\"}> Add New Batch</Link>\n          </Box>\n        ): action == 'view'? (\n          <Box maxW=\"lg\" margin=\"10px\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n            {batchVaults.length} of {total} {batchDataJson.length} vaults created\n            {batchDataJson.map((item, index)=>{\n                          console.log(item)\n                          if (index > 0) {\n                            return (\n                             <Text>{batchVaults[index]}</Text>\n                            )\n                          }\n                        })}\n          </Box>\n        ): null}\n        \n      </Flex>\n\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}