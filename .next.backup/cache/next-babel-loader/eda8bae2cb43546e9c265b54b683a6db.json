{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nexport default function Stats() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React(); // const [vaults, setVaults] = useState([])\n\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false); // const [approving, setApproving] = useState(false)\n  // const [transfering, setTransfering] = useState(false)\n  // const [balance, setBalance] = useState(null)\n  // const [address, setAddress] = useState(query.address)\n  // const [experimental, setExperimental] = useState(query.experimental)\n  // const [decimals, setDecimals] = useState(null)\n  // const [allowance, setAllowance] = useState(null)\n  // const [transferChain, setTransferChain] = useState(0)\n  // const [covalApprovedFor, setIsCovalApproved] = useState(0)\n  // const [hash, setHash] = useState(null)\n  // const [swapAmount, setSwapAmount] = useState(0)\n  // const [isInvalid, setIsInvalid] = useState(false)\n  // const [transferChainChanged, setTransferChainChanged] = useState(true)\n  // const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  // const covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true)\n\n  // const transferToChain = async () => {\n  //   setTransfering(true)\n  //   ;(handlerContract as Contract)\n  //   .transferToChain(transferChain, swapAmount.toString())\n  //   .then(({ hash }: { hash: string }) => {\n  //     setHash(hash)\n  //   })\n  //   .catch((error: ErrorWithCode) => {\n  //     if (error?.code == 4001) {\n  //       setTransfering(false)\n  //     }\n  //   })\n  // }\n  // const getContractStates = async () => {\n  //   setHash(null)\n  //   setDecimals(await covalContract.decimals())\n  //   setAllowance(\n  //     await covalContract\n  //       .allowance(account, contractAddresses.vaultHandler[chainId])\n  //       .then((balance: { toString: () => string }) => balance.toString())\n  //   )\n  //   setBalance(await covalContract.balanceOf(account).then((balance: { toString: () => string }) => balance.toString()))\n  //   if (Number(allowance) >= Number(0)) {      \n  //     setIsCovalApproved(allowance)\n  //   }\n  //   setState({ loaded: true })\n  // }\n  // const approveCovalFlow = () => {\n  //   setApproving(true)\n  //   ;(covalContract as Contract)\n  //     .approve(contractAddresses.vaultHandler[chainId], 10000000 * Math.pow(10, +decimals) )\n  //     .then(({ hash }: { hash: string }) => {\n  //       setHash(hash)\n  //     })\n  //     .catch((error: ErrorWithCode) => {\n  //       if (error?.code == 4001) {\n  //         setApproving(false)\n  //       }\n  //     })\n  // }\n  // const getTransferLogs = async () =>{\n  //   console.log(\"getting logs\")\n  //   fetch(EMBLEM_API + '/web3/transfersOut', {\n  //     method: 'GET',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       service: 'evmetadata',\n  //       chainid: chainId.toString()\n  //     }\n  //   }).then(async function (response) {\n  //     console.log(\"doing transfers\")\n  //     fetch(EMBLEM_API + '/doTransfers', {\n  //       method: 'GET',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         service: 'evmetadata',\n  //         chainid: chainId.toString()\n  //       }\n  //     }).then(async function (response) {\n  //       getContractStates()\n  //     })\n  //   })\n  // }\n  // function SwapText({ children, ...rest }: BoxProps): JSX.Element {\n  //   return (\n  //     <Text fontSize=\"2xl\" lineHeight={1} py=\"0.3rem\" {...rest}>\n  //       {children}\n  //     </Text>\n  //   )\n  // }\n  // const [acct, setAcct] = useState('')\n  // useEffect(() => {\n  //   if (account && acct != account) {\n  //     setAcct(account)\n  //     setState({ loaded: false })\n  //     getContractStates()\n  //   }\n  // }, [account, acct])\n  // const [chain, setChain] = useState(chainId)\n  // useEffect(() => {\n  //   if (chainId && chain != chainId) {\n  //     setChain(chainId)\n  //     setState({ loaded: false })\n  //     getContractStates()\n  //   }\n  // }, [chainId, chain])\n  useEffect(() => {\n    if (state.loaded == false && !loadingApi) {\n      setLoadingApi(false);\n      getStats();\n    }\n  }, []);\n\n  const getStats = async () => {\n    console.log(\"getting logs\");\n    fetch('https://osautomate.herokuapp.com/earnings', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(async function (response) {\n      setLoadingApi(false);\n      setState({\n        loaded: true\n      });\n      let jsonData = await response.json();\n      console.log(jsonData);\n    });\n  };\n\n  return __jsx(Loader, {\n    loaded: state.loaded\n  }, loadingApi ? __jsx(Refreshing, null) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10\n  }, __jsx(Stack, {\n    align: \"center\"\n  }, __jsx(Text, null, \"Statistics go here\"))));\n}","map":null,"metadata":{},"sourceType":"module"}