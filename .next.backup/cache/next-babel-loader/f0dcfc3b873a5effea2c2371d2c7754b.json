{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/pages/nft/[id].tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport Nft from '../../components/Nft';\nexport var EMBLEM_API = 'https://api.emblemvault.io'; // export async function getProductsFromDatabase() {\n//   const responce = await fetch(EMBLEM_API + '/ids/', {\n//     method: 'GET',\n//     headers: {\n//       'Content-Type': 'application/json',\n//       service: 'evmetadata',\n//     },\n//   })\n//   return await responce.json()\n// }\n// export async function getStaticPaths() {\n//   const records = await getProductsFromDatabase()\n//   console.log(\"Records\", records)\n//   const paths = records.map((product) => ({\n//     params: { id: product.tokenId }\n//   }))\n//   // fallback: false means pages that don’t have the\n//   // correct id will 404.\n//   return { paths, fallback: false }\n// }\n// // params will contain the id for each generated page.\n// export async function getStaticProps({ params }) {\n//   return {\n//     props: {\n//       product: params.id\n//     }\n//   }\n// }\n// export default function Product({ product }) {\n//   // Render product\n// }\n\nexport default function VaultPage() {\n  _s();\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  return __jsx(React.Fragment, null, __jsx(Nft, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }));\n}\n\n_s(VaultPage, \"wby5GzzI23pLfTlf5I7v7XLG1RQ=\", false, function () {\n  return [useRouter];\n});\n\n_c = VaultPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"VaultPage\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/pages/nft/[id].tsx"],"names":["useRouter","Nft","EMBLEM_API","VaultPage","query"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,OAAO,IAAMC,UAAU,GAAG,4BAAnB,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,eAAe,SAASC,SAAT,GAAkC;AAAA;;AAC/C,mBAAkBH,SAAS,EAA3B;AAAA,MAAQI,KAAR,cAAQA,KAAR;;AAEA,SACE,4BACA,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADF;AAKD;;GARuBD,S;UACJH,S;;;KADIG,S","sourcesContent":["import { useRouter } from 'next/router'\nimport Nft from '../../components/Nft'\nimport Head from 'next/head'\nexport const EMBLEM_API = 'https://api.emblemvault.io'\n\n// export async function getProductsFromDatabase() {\n//   const responce = await fetch(EMBLEM_API + '/ids/', {\n//     method: 'GET',\n//     headers: {\n//       'Content-Type': 'application/json',\n//       service: 'evmetadata',\n//     },\n//   })\n//   return await responce.json()\n// }\n// export async function getStaticPaths() {\n//   const records = await getProductsFromDatabase()\n//   console.log(\"Records\", records)\n//   const paths = records.map((product) => ({\n//     params: { id: product.tokenId }\n//   }))\n\n//   // fallback: false means pages that don’t have the\n//   // correct id will 404.\n//   return { paths, fallback: false }\n// }\n\n// // params will contain the id for each generated page.\n// export async function getStaticProps({ params }) {\n//   return {\n//     props: {\n//       product: params.id\n//     }\n//   }\n// }\n\n// export default function Product({ product }) {\n//   // Render product\n// }\nexport default function VaultPage(): JSX.Element {\n  const { query } = useRouter()\n  \n  return (\n    <>\n    <Nft/>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}