{"ast":null,"code":"var _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/VaultList.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Flex, Text, Link, Image } from \"@chakra-ui/core\";\nimport Loader from \"react-loader\";\nimport { useWeb3React } from '@web3-react/core';\nimport React, { useEffect } from \"react\";\nexport default function VaultList(props) {\n  let loaded = false;\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const [vaults, setVaults] = React.useState([]);\n\n  const validImage = function (data) {\n    if (data.includes('http')) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const getVaults = async () => {\n    // const responce = await fetch('https://api.emblemvault.io/vaults/0x5a63264914a1eCB626e32e8AD683704bA7b0621f', {\n    const responce = await fetch('https://api.emblemvault.io/vaults/' + account, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'service': 'evmetadata',\n        'chainId': chainId.toString()\n      }\n    });\n    const jsonData = await responce.json();\n    loaded = true;\n    setVaults(jsonData);\n  };\n\n  useEffect(() => {\n    getVaults();\n  }, []);\n  return __jsx(Loader, {\n    loaded: loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    flexWrap: \"wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, vaults.length ? vaults.map((vault, index) => {\n    var url = './vault/?id=' + vault.tokenId;\n    const flexSettings = {\n      flex: \"1\",\n      minW: \"300px\",\n      maxW: \"300px\",\n      borderWidth: \"1px\",\n      color: \"white\",\n      mx: \"6\",\n      mb: \"6\",\n      rounded: \"lg\",\n      overflow: \"hidden\"\n    };\n\n    const redirect = function () {\n      location.href = url;\n    };\n\n    return __jsx(Box, _extends({\n      key: index\n    }, flexSettings, {\n      onClick: redirect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }), __jsx(Text, {\n      fontWeight: \"semibold\",\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, vault.name), __jsx(Image, {\n      src: validImage(vault.image) ? vault.image : \"https://circuitsofvalue.com/public/coval-logo.png\",\n      p: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }), vault.values.length ? vault.values.map(coin => {\n      return __jsx(Text, {\n        key: coin.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }\n      }, coin.balance, \" \", coin.name);\n    }) : __jsx(Text, {\n      as: \"h2\",\n      textAlign: \"center\",\n      w: \"100%\",\n      p: 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }\n    }, \"Nothing in here! Fill 'er up!\"));\n  }) : __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, \"YOU DON'T SEEM TO HAVE ANY VAULTS. \", \" \", __jsx(Link, {\n    color: \"#638cd8\",\n    href: \"../create\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \"CREATE ONE HERE!\"))));\n}","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/VaultList.tsx"],"names":["Box","Flex","Text","Link","Image","Loader","useWeb3React","React","useEffect","VaultList","props","loaded","account","chainId","vaults","setVaults","useState","validImage","data","includes","getVaults","responce","fetch","method","headers","toString","jsonData","json","length","map","vault","index","url","tokenId","flexSettings","flex","minW","maxW","borderWidth","color","mx","mb","rounded","overflow","redirect","location","href","name","image","values","coin","balance"],"mappings":"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","sourcesContent":["import {\n  Box,\n  Flex,\n  Grid,\n  Text,\n  Link,\n  Image,\n  SimpleGrid\n} from \"@chakra-ui/core\";\nimport Loader from \"react-loader\"\nimport { useWeb3React } from '@web3-react/core'\nimport React, { useEffect, useState } from \"react\";\n\nexport default function VaultList(props: any) {\n  let loaded = false\n  const { account, chainId } = useWeb3React()\n  const [vaults, setVaults] = React.useState([])\n  const validImage = function (data) {\n    if (data.includes('http')) {\n      return true\n    } else {\n      return false\n    }\n  }\n  const getVaults = async () => {\n    // const responce = await fetch('https://api.emblemvault.io/vaults/0x5a63264914a1eCB626e32e8AD683704bA7b0621f', {\n    const responce = await fetch('https://api.emblemvault.io/vaults/' + account, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'service': 'evmetadata',\n        'chainId': chainId.toString()\n      },\n    })\n    const jsonData = await responce.json()\n    loaded = true\n    setVaults(jsonData)\n  }\n\n  useEffect(() => {\n    getVaults()\n  }, [])\n\n  return (\n    <Loader loaded={loaded}>\n      <Flex w=\"100%\" justify=\"center\" flexWrap=\"wrap\">\n      {vaults.length ? vaults.map((vault, index) => {\n        var url = './vault/?id=' + vault.tokenId\n        const flexSettings = {\n          flex: \"1\",\n          minW: \"300px\",\n          maxW: \"300px\",\n          borderWidth: \"1px\",\n          color: \"white\",\n          mx: \"6\",\n          mb: \"6\",\n          rounded: \"lg\",\n          overflow: \"hidden\"\n        };\n        const redirect = function() {\n          location.href = url\n        }\n        return (\n          <Box key={index} {...flexSettings} onClick={redirect} >\n            <Text fontWeight=\"semibold\" textAlign=\"center\">{vault.name}</Text>\n            <Image src={validImage(vault.image) ? vault.image : \"https://circuitsofvalue.com/public/coval-logo.png\"} p={2} />\n            {\n              vault.values.length\n                ? vault.values.map((coin) => {\n                  return (\n                    <Text key={coin.name}>\n                      {coin.balance} {coin.name}\n                    </Text>\n                  )\n                })\n                : <Text as=\"h2\" textAlign=\"center\" w=\"100%\" p={0}>Nothing in here! Fill 'er up!</Text>\n            }\n          </Box>\n        )\n      })\n        :\n        <Text>\n          YOU DON'T SEEM TO HAVE ANY VAULTS. {\" \"}\n          <Link color=\"#638cd8\" href=\"../create\">\n            CREATE ONE HERE!\n            </Link>\n        </Text>\n      }\n    </Flex>\n    </Loader>\n  )\n\n}"]},"metadata":{},"sourceType":"module"}