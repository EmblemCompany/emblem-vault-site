{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Flex, Text, Link, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API, contractAddresses } from '../constants';\nimport { useContract } from '../hooks';\nlet _totalValueLocked = 0;\nexport default function LeaderBoard() {\n  const {\n    query\n  } = useRouter();\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const {\n    0: vaults,\n    1: setVaults\n  } = useState([]);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    loaded: false\n  });\n  const {\n    0: loadingApi,\n    1: setLoadingApi\n  } = useState(false);\n  const {\n    0: loadingOwners,\n    1: setLoadingOwners\n  } = useState(false);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(query.address);\n  const {\n    0: owners,\n    1: setOwners\n  } = useState([]);\n  const {\n    0: calculatedValue,\n    1: setCalculatedValue\n  } = useState(0);\n  const {\n    0: totalValueLocked,\n    1: setTotalValueLocked\n  } = useState(0);\n  const emblemContract = useContract(contractAddresses.emblemVault[chainId], contractAddresses.emblemAbi, true);\n\n  const getOwners = async () => {\n    setState({\n      loaded: true\n    });\n\n    if (!loadingOwners) {\n      setOwners([]);\n      setLoadingOwners(true);\n    } else {\n      return;\n    }\n\n    let totalSupply = await emblemContract.totalSupply();\n    console.log(totalSupply);\n    getTokensByIndex(Number(totalSupply.toString()), 0, () => {\n      function compare(a, b) {\n        if (a.value > b.value) return -1;\n        if (b.value > a.value) return 1;\n        return 0;\n      }\n\n      console.log('sorted owners', owners.sort(compare));\n      setTotalValueLocked(_totalValueLocked);\n      setLoadingOwners(false);\n    });\n  };\n\n  const getValueForNft = async (tokenId, cb) => {\n    try {\n      const response = await fetch(EMBLEM_API + '/value/' + tokenId, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          service: 'evmetadata'\n        }\n      });\n      const jsonData = await response.json();\n      return cb(jsonData.value || 0);\n    } catch (err) {\n      return cb(0);\n    }\n  };\n\n  async function getTokensByIndex(count, index, cb) {\n    let tokenId = await emblemContract.tokenByIndex(index);\n    console.log('tokenId', tokenId.toString(), index);\n    getOwner(tokenId.toString(), () => {\n      if (count - 1 < index + 1) {\n        return cb();\n      } else {\n        return getTokensByIndex(count, index + 1, cb);\n      }\n    });\n  }\n\n  async function getOwner(tokenId, cb) {\n    let owner = await emblemContract.ownerOf(tokenId);\n\n    if (owner === '0x0000000000000000000000000000000000000000' || owner.toLowerCase() === '0x5d152dd902cc9198b97e5b6cf5fc23a8e4330180') {\n      return cb();\n    }\n\n    if (owners.filter(item => {\n      return item.address === owner;\n    }).length < 1) {\n      getValueForNft(tokenId, value => {\n        _totalValueLocked = _totalValueLocked + value;\n        setCalculatedValue(value);\n        console.log(\"tokenId Value\", tokenId, value);\n        owners.push({\n          address: owner,\n          value: value,\n          vaults: [{\n            tokenId: tokenId,\n            value: value\n          }]\n        });\n        setOwners(owners);\n      });\n    } else {\n      getValueForNft(tokenId, value => {\n        _totalValueLocked = _totalValueLocked + value;\n        setCalculatedValue(value);\n        console.log(\"tokenId Value\", tokenId, value);\n        owners.filter(item => {\n          return item.address === owner;\n        })[0].vaults.push({\n          address: owner,\n          tokenId: tokenId.toString(),\n          value: owners.filter(item => {\n            return item.address === owner;\n          })[0].value\n        });\n        setOwners(owners);\n      });\n    }\n\n    return cb();\n  }\n\n  useEffect(() => {\n    account && chainId ? getOwners() : setState({\n      loaded: true\n    });\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded\n  }, loadingOwners ? __jsx(Refreshing, null) : '', __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\"\n  }, __jsx(Stack, null, __jsx(Text, null, \"Total Value Locked: \", totalValueLocked === 0 ? \"Calculating...\" : \"$\" + totalValueLocked), owners.map(item => {\n    let pieces = location.pathname.split('/');\n    pieces.pop();\n    let url = location.origin + pieces.join('/') + '/vaultlist?address=' + item.address;\n    return __jsx(Link, {\n      href: url,\n      key: item.address,\n      isExternal: true\n    }, \"Address: \", item.address, \" Vaults: \", item.vaults.length, \" TVL: $\", item.value);\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}