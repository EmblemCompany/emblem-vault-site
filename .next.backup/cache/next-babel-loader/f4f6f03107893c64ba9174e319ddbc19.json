{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { FormControl, FormLabel, FormHelperText, Input, Stack, Box, Flex, Text, Textarea, Button, Link, Select } from '@chakra-ui/core';\nimport { useRouter } from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nimport Loader from 'react-loader';\nimport { usePapaParse } from 'react-papaparse';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Embed from './Embed';\nexport default function Batch() {\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(false),\n      running = _useState[0],\n      setRunning = _useState[1];\n\n  var _useState2 = useState(Number(query.offset) || 0),\n      offset = _useState2[0],\n      setOffset = _useState2[1];\n\n  var _useState3 = useState('configure'),\n      status = _useState3[0],\n      setStatus = _useState3[1];\n\n  var _useState4 = useState([]),\n      batches = _useState4[0],\n      setBatches = _useState4[1];\n\n  var _useState5 = useState(-1),\n      demoIndex = _useState5[0],\n      setDemoIndex = _useState5[1];\n\n  var _useState6 = useState(query.action || 'list'),\n      action = _useState6[0],\n      setAction = _useState6[1];\n\n  var _useState7 = useState([]),\n      batchVaults = _useState7[0],\n      setBatchVaults = _useState7[1];\n\n  var _useState8 = useState(0),\n      updateCount = _useState8[0],\n      setUpdateCount = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      batchName = _useState9[0],\n      setBatchName = _useState9[1];\n\n  var _useState10 = useState(\"\"),\n      imageBaseUrl = _useState10[0],\n      setImageBaseUrl = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      inscriptionBaseUrl = _useState11[0],\n      setInscriptionBaseUrl = _useState11[1];\n\n  var _useState12 = useState(\"\"),\n      addressType = _useState12[0],\n      setAddressType = _useState12[1];\n\n  var _useState13 = useState(\"\"),\n      titleTemplate = _useState13[0],\n      setTitleTemplate = _useState13[1];\n\n  var _useState14 = useState(\"\"),\n      descriptionTemplate = _useState14[0],\n      setDescriptionTemplate = _useState14[1];\n\n  var _useState15 = useState(\"\"),\n      total = _useState15[0],\n      setTotal = _useState15[1];\n\n  var _useState16 = useState(\"\"),\n      batchData = _useState16[0],\n      setBatchData = _useState16[1];\n\n  var _useState17 = useState([]),\n      batchDataJson = _useState17[0],\n      setBatchDataJson = _useState17[1];\n\n  var _useState18 = useState(query.batch_id || \"\"),\n      batchId = _useState18[0],\n      setBatchId = _useState18[1];\n\n  var _useState19 = useState({\n    loaded: false\n  }),\n      state = _useState19[0],\n      setState = _useState19[1];\n\n  var _useState20 = useState([]),\n      vaultAddresses = _useState20[0],\n      setVaultAddresses = _useState20[1];\n\n  var _usePapaParse = usePapaParse(),\n      readString = _usePapaParse.readString,\n      jsonToCSV = _usePapaParse.jsonToCSV;\n\n  useEffect(function () {\n    if (!state.loaded && batchId && !batchName) {\n      getBatch();\n      getVaultsForBatch(batchId.toString(), function () {});\n    } else if (!state.loaded && !batchId && !batchName && action == 'list') {\n      getBatches();\n    } else {\n      setState({\n        loaded: true\n      });\n    }\n  }, []);\n\n  var getBatch = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/batch?batchId=\".concat(batchId), requestOptions).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n                  var record, parsedJson, csvData;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return response.json();\n\n                        case 2:\n                          record = _context.sent;\n                          setState({\n                            loaded: true\n                          });\n                          setBatchName(record.batch_name);\n                          setImageBaseUrl(record.image_base_url);\n                          setInscriptionBaseUrl(record.inscription_base_url);\n                          setAddressType(record.address_type);\n                          setStatus(record.status);\n                          setTitleTemplate(record.title_template);\n                          setDescriptionTemplate(record.description_template);\n                          parsedJson = JSON.parse(record.data);\n                          setBatchDataJson(parsedJson);\n                          csvData = jsonToCSV(parsedJson);\n                          setBatchData(csvData);\n                          setTotal((parsedJson.length - 1).toString());\n\n                        case 16:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x) {\n                  return _ref2.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getBatch() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getVaultsForBatch = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(batchId, cb) {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              // alert(0)\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/batchVaults/\" + batchId + \"?_vercel_no_cache=1\", requestOptions).then( /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response) {\n                  var records, exported_records, csvData;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return response.json();\n\n                        case 2:\n                          records = _context3.sent;\n                          setBatchVaults(records);\n                          exported_records = records.map(function (record) {\n                            console.log(exported_records);\n                            return {\n                              to: record.to,\n                              tokenId: record.tokenId,\n                              address: record.addresses.filter(function (addy) {\n                                return addy.coin == 'TAP';\n                              })[0].address\n                            };\n                          }); // address: record.addresses.filter(addy=>{return addy.coin == 'LTC'})[0].address, tokenId: record.tokenId, owner: record.to\n                          // let addresses = records.map(record=>{ return {tokenId: record.tokenId}})\n\n                          csvData = jsonToCSV(exported_records.reverse());\n                          setVaultAddresses(csvData);\n                          console.log(csvData);\n                          return _context3.abrupt(\"return\", cb());\n\n                        case 9:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function (_x4) {\n                  return _ref4.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function getVaultsForBatch(_x2, _x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var goUpdateLoop = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(overrideOffset) {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/updateNextBatchItem/\".concat(batchId, \"?offset=\").concat(overrideOffset || offset, \"&_vercel_no_cache=1\"), requestOptions).then( /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(response) {\n                  var record;\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return response.json();\n\n                        case 2:\n                          record = _context5.sent;\n                          setUpdateCount(record.index); // alert(record.index)\n\n                          setOffset(record.index);\n                          goUpdateLoop(record.index);\n\n                        case 6:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n\n                return function (_x6) {\n                  return _ref6.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n                goUpdateLoop(overrideOffset);\n              });\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function goUpdateLoop(_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var goCreateLoop = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/createNextBatchItem?_vercel_no_cache=1\", requestOptions).then( /*#__PURE__*/function () {\n                var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(response) {\n                  return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          // let records = await response.json()\n                          getVaultsForBatch(batchId.toString(), function () {\n                            setTimeout(function () {\n                              goCreateLoop();\n                            }, 10000);\n                          });\n\n                        case 1:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }));\n\n                return function (_x7) {\n                  return _ref8.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n                goCreateLoop();\n              });\n\n            case 2:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    return function goCreateLoop() {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  var getBatches = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/batches\", requestOptions).then( /*#__PURE__*/function () {\n                var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(response) {\n                  var records;\n                  return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          _context9.next = 2;\n                          return response.json();\n\n                        case 2:\n                          records = _context9.sent;\n                          console.log(records);\n                          setBatches(records);\n                          setState({\n                            loaded: true\n                          });\n\n                        case 6:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }));\n\n                return function (_x8) {\n                  return _ref10.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 2:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n\n    return function getBatches() {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n\n  var doRefresh = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(needle, haystack, offset) {\n      var requestOptions;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              requestOptions = {\n                method: 'GET'\n              };\n              fetch(EMBLEM_API + \"/bulkRefresh?needle=\".concat(needle, \"&haystack=\").concat(haystack, \"&start=\").concat(offset), requestOptions).then( /*#__PURE__*/function () {\n                var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(response) {\n                  var record;\n                  return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n                    while (1) {\n                      switch (_context11.prev = _context11.next) {\n                        case 0:\n                          _context11.next = 2;\n                          return response.json();\n\n                        case 2:\n                          record = _context11.sent;\n                          doRefresh(needle, haystack, record.index + 1);\n                          setUpdateCount(record.index);\n                          setState({\n                            loaded: true\n                          });\n\n                        case 6:\n                        case \"end\":\n                          return _context11.stop();\n                      }\n                    }\n                  }, _callee11);\n                }));\n\n                return function (_x12) {\n                  return _ref12.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n                doRefresh(needle, haystack, offset);\n              });\n\n            case 2:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n\n    return function doRefresh(_x9, _x10, _x11) {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  var startBatch = /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n      var myHeaders, raw, requestOptions;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              myHeaders = new Headers();\n              myHeaders.append(\"Content-Type\", \"application/json\");\n              raw = JSON.stringify({\n                \"batchId\": batchId\n              });\n              requestOptions = {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw\n              };\n              fetch(EMBLEM_API + \"/startBatch\", requestOptions).then( /*#__PURE__*/function () {\n                var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(response) {\n                  var results;\n                  return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n                    while (1) {\n                      switch (_context13.prev = _context13.next) {\n                        case 0:\n                          _context13.next = 2;\n                          return response.json();\n\n                        case 2:\n                          results = _context13.sent;\n                          location.href = \"/batch?action=view&batch_id=\" + batchId;\n\n                        case 4:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }\n                  }, _callee13);\n                }));\n\n                return function (_x13) {\n                  return _ref14.apply(this, arguments);\n                };\n              }());\n\n            case 5:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }));\n\n    return function startBatch() {\n      return _ref13.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(event) {\n      var myHeaders, jsonData, serializedForm;\n      return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              event.preventDefault();\n              myHeaders = new Headers();\n              myHeaders.append(\"Content-Type\", \"application/json\");\n              _context16.next = 5;\n              return csvToJson(batchData);\n\n            case 5:\n              jsonData = _context16.sent;\n              serializedForm = {\n                batchName: batchName,\n                imageBaseUrl: imageBaseUrl,\n                inscriptionBaseUrl: inscriptionBaseUrl,\n                addressType: addressType,\n                titleTemplate: titleTemplate,\n                descriptionTemplate: descriptionTemplate,\n                total: total,\n                batchId: batchId,\n                batchData: jsonData.data\n              };\n              fetch(EMBLEM_API + '/addBatch', {\n                method: 'POST',\n                headers: myHeaders,\n                body: JSON.stringify(serializedForm)\n              }).then( /*#__PURE__*/function () {\n                var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(response) {\n                  var data;\n                  return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n                    while (1) {\n                      switch (_context15.prev = _context15.next) {\n                        case 0:\n                          _context15.next = 2;\n                          return response.json();\n\n                        case 2:\n                          data = _context15.sent;\n\n                          if (data.id) {\n                            setBatchId(data.id);\n                          }\n\n                        case 4:\n                        case \"end\":\n                          return _context15.stop();\n                      }\n                    }\n                  }, _callee15);\n                }));\n\n                return function (_x15) {\n                  return _ref16.apply(this, arguments);\n                };\n              }())[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 8:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16);\n    }));\n\n    return function handleSubmit(_x14) {\n      return _ref15.apply(this, arguments);\n    };\n  }();\n\n  function csvToJson(data) {\n    return new Promise(function (resolve, reject) {\n      readString(data, {\n        worker: true,\n        complete: function complete(results) {\n          resolve(results);\n        }\n      });\n    });\n  }\n\n  function parseTemplate(index, template) {\n    var tokens = listTokens(template);\n    var modifiedTitle = template;\n    tokens.forEach(function (item) {\n      var value = item == 'batch_name' ? batchName : item == 'asset_number' ? batchDataJson[index][0] : item == 'inscription_number' ? batchDataJson[index][1] : item == 'inscription_base_url' ? inscriptionBaseUrl : item == 'inscription_hash' ? batchDataJson[index][2] : '';\n      modifiedTitle = modifiedTitle.replace(item, value);\n    });\n    modifiedTitle = modifiedTitle.replaceAll('{', '').replaceAll('}', '');\n    return modifiedTitle;\n  }\n\n  function parseImage(index) {\n    return imageBaseUrl + batchDataJson[index][2];\n  }\n\n  function parseTo(index) {\n    return batchDataJson[index][3];\n  }\n\n  function listTokens(str) {\n    var regex = /\\{(.*?)\\}/g;\n    var result;\n    var items = [];\n\n    while (result = regex.exec(str)) {\n      items = items.concat(result[1].split(','));\n    }\n\n    return items;\n  }\n\n  function isValidBatchData(statusCheck) {\n    if (!batchDataJson) return false;\n    var hasRows = batchDataJson.length > 1;\n    if (!hasRows) return false; // alert(JSON.stringify(batchDataJson))\n\n    var correctColumns = batchDataJson[0].length == 4;\n    var correctHeaders = batchDataJson[0][0] == 'asset_number' && batchDataJson[0][1] == 'inscription_number' && batchDataJson[0][2] == 'inscription_hash' && batchDataJson[0][3] == 'to';\n    var batchNotStarted = status == statusCheck || 'configure';\n    return hasRows && correctColumns && correctHeaders && batchNotStarted;\n  }\n\n  return __jsx(Loader, {\n    loaded: state.loaded\n  }, __jsx(Flex, {\n    width: \"full\",\n    align: \"center\",\n    justifyContent: \"center\"\n  }, action && (action == 'edit' || action == 'add') ? __jsx(React.Fragment, null, __jsx(Stack, null, __jsx(Box, {\n    maxW: \"sm\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\"\n  }, __jsx(Stack, null, __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=list\"\n  }, \" All Batch Jobs\"), batchId ? __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=view&batch_id=\" + batchId\n  }, \" View Job\") : null), __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"25px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"batch-name\"\n  }, \"Batch Name\"), __jsx(Input, {\n    type: \"text\",\n    id: \"batch-name\",\n    \"aria-describedby\": \"batch-name-text\",\n    value: batchName,\n    onChange: function onChange(e) {\n      return setBatchName(e.target.value);\n    },\n    autoComplete: \"off\"\n  }), __jsx(FormHelperText, {\n    id: \"batch-name-text\"\n  }, \"Give it a unique name for this batch.\")), __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"image-base-url\"\n  }, \"Image Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"image-base-url\",\n    \"aria-describedby\": \"image-base-url-text\",\n    value: imageBaseUrl,\n    onChange: function onChange(e) {\n      return setImageBaseUrl(e.target.value);\n    },\n    autoComplete: \"off\"\n  }), __jsx(FormHelperText, {\n    id: \"image-base-url-text\"\n  }, \"Enter the base url for the images in this batch.\")), __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"inscription-base-url\"\n  }, \"Inscription Base Url\"), __jsx(Input, {\n    type: \"text\",\n    id: \"inscription-base-url\",\n    \"aria-describedby\": \"inscription-base-url-text\",\n    value: inscriptionBaseUrl,\n    onChange: function onChange(e) {\n      return setInscriptionBaseUrl(e.target.value);\n    },\n    autoComplete: \"off\"\n  }), __jsx(FormHelperText, {\n    id: \"inscription-base-url-text\"\n  }, \"Enter the base url for the inscriptions in this batch.\")), __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"address-type\"\n  }, \"Address Type\"), __jsx(Input, {\n    type: \"text\",\n    id: \"address-type\",\n    \"aria-describedby\": \"address-type-text\",\n    value: addressType,\n    onChange: function onChange(e) {\n      return setAddressType(e.target.value);\n    },\n    autoComplete: \"off\"\n  }), __jsx(FormHelperText, {\n    id: \"address-type-text\"\n  }, \"Enter the address type for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"title-template\"\n  }, \"Title Template\"), __jsx(Textarea, {\n    id: \"title-template\",\n    fontSize: 'x-small',\n    size: \"lg\",\n    \"aria-describedby\": \"title-template-text\",\n    minLength: 3,\n    maxLength: 4024,\n    value: titleTemplate,\n    onChange: function onChange(e) {\n      return setTitleTemplate(e.target.value);\n    },\n    autoComplete: \"off\"\n  }), __jsx(FormHelperText, {\n    id: \"title-template-text\"\n  }, \"Enter the title template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\"\n  }, \"Description Template\"), __jsx(Textarea, {\n    id: \"description-template\",\n    fontSize: 'x-small',\n    size: \"lg\",\n    \"aria-describedby\": \"description-template-text\",\n    minLength: 3,\n    maxLength: 1024,\n    value: descriptionTemplate,\n    onChange: function onChange(e) {\n      return setDescriptionTemplate(e.target.value);\n    },\n    autoComplete: \"off\"\n  }), __jsx(FormHelperText, {\n    id: \"description-template-text\"\n  }, \"Enter the description template for the items in this batch.\")), __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"total\"\n  }, \"Total\"), __jsx(Input, {\n    isDisabled: true,\n    type: \"number\",\n    id: \"total\",\n    \"aria-describedby\": \"total-text\",\n    value: total,\n    onChange: function onChange(e) {\n      return setTotal(e.target.value);\n    },\n    autoComplete: \"off\"\n  }), __jsx(FormHelperText, {\n    id: \"total-text\"\n  }, \"Enter the total number of items in this batch.\")), __jsx(FormControl, {\n    isRequired: true\n  }, __jsx(FormLabel, {\n    htmlFor: \"description-template\"\n  }, \"Records\"), __jsx(Textarea, {\n    id: \"records\",\n    size: \"lg\",\n    fontSize: 'xx-small',\n    \"aria-describedby\": \"records-text\",\n    minLength: 3,\n    value: batchData,\n    onChange: /*#__PURE__*/function () {\n      var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(e) {\n        var jsonData;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                setBatchData(e.target.value);\n                _context17.next = 3;\n                return csvToJson(e.target.value);\n\n              case 3:\n                jsonData = _context17.sent;\n                setBatchDataJson(jsonData.data);\n                setTotal(jsonData.data.length > 1 ? (jsonData.data.length - 1).toString() : '0');\n\n              case 6:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17);\n      }));\n\n      return function (_x16) {\n        return _ref17.apply(this, arguments);\n      };\n    }(),\n    autoComplete: \"off\"\n  }), __jsx(FormHelperText, {\n    id: \"records-text\"\n  }, \"Enter the CSV rows from the helper spreadsheet\"))), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"15px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    isDisabled: false\n  }, \"Save Batch Job\"), __jsx(Button, {\n    mt: 4,\n    isDisabled: !isValidBatchData('configure') || !isValidBatchData('running'),\n    onClick: startBatch\n  }, \"Start Batch Job\")), __jsx(Stack, {\n    direction: \"row\",\n    align: \"flex-start\",\n    padding: \"15px\",\n    spacing: \"2rem\",\n    flexWrap: \"wrap\",\n    shouldWrapChildren: true\n  }, !isValidBatchData('running') && isValidBatchData('configure') ? __jsx(Select, {\n    id: \"type-selector\",\n    w: \"100%\",\n    value: demoIndex,\n    onChange: function onChange(e) {\n      setDemoIndex(Number(e.target.value));\n    }\n  }, __jsx(\"option\", {\n    value: \"-1\"\n  }, \"Select # to preview\"), batchDataJson.map(function (item, index) {\n    console.log(item);\n\n    if (index > 0) {\n      return __jsx(\"option\", {\n        value: index\n      }, parseTemplate(index, titleTemplate));\n    }\n  })) : null), __jsx(Stack, null, demoIndex && demoIndex > -1 ? __jsx(React.Fragment, null, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    className: \"md\"\n  }, __jsx(ReactMarkdown, {\n    plugins: [gfm],\n    children: parseTemplate(demoIndex, descriptionTemplate)\n  })), __jsx(Embed, {\n    className: \"d-block w-100 NFT-image\",\n    url: parseImage(demoIndex)\n  }), __jsx(Text, null, \"Vault For: \", parseTo(demoIndex))) : null))))) : action == 'list' ? __jsx(Box, {\n    maxW: \"lg\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\"\n  }, batches.length > 0 ? batches.map(function (item, index) {\n    return __jsx(Stack, null, __jsx(Link, {\n      margin: \"10px\",\n      href: \"/batch?action=edit&batch_id=\" + item.id\n    }, \" \", item.batch_name, \" (\", item.status, \")\"));\n  }) : null, __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=add\"\n  }, \" Add New Batch\")) : action == 'view' ? __jsx(Box, {\n    maxW: \"lg\",\n    margin: \"10px\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\"\n  }, __jsx(Stack, null, __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=list\"\n  }, \" All Batch Jobs\"), batchId ? __jsx(Link, {\n    margin: \"10px\",\n    href: \"/batch?action=edit&batch_id=\" + batchId\n  }, \" Edit Job\") : null, __jsx(Text, {\n    padding: \"10px\"\n  }, batchVaults.length, \" of \", total, \" vaults created\"), __jsx(Text, {\n    padding: \"10px\"\n  }, updateCount, \" of \", total, \" vaults updated\"), __jsx(Link, {\n    padding: \"10px\",\n    isDisabled: running,\n    onClick: function onClick() {\n      goCreateLoop();\n      setRunning(true);\n    }\n  }, \"Start Mint Loop - \"), __jsx(Link, {\n    padding: \"10px\",\n    isDisabled: running,\n    onClick: function onClick() {\n      goUpdateLoop(offset);\n    }\n  }, \"Start Update Loop\"), __jsx(Link, {\n    padding: \"10px\",\n    isDisabled: running,\n    onClick: function onClick() {\n      doRefresh(batchName, 'name', offset);\n    }\n  }, \"Start Refresh Loop\"), __jsx(Link, {\n    padding: \"10px\",\n    href: \"\".concat(location.href.replace(\"offset=\".concat(offset), \"offset=\".concat(offset + 600))),\n    isDisabled: running,\n    onClick: function onClick() {}\n  }, \"spawn offset\")), __jsx(Textarea, {\n    id: \"addresses\",\n    size: \"lg\",\n    fontSize: 'xx-small',\n    \"aria-describedby\": \"addresses-text\",\n    minLength: 3,\n    value: JSON.stringify(vaultAddresses),\n    autoComplete: \"off\"\n  }), __jsx(Link, {\n    padding: \"10px\",\n    isDisabled: running,\n    onClick: function onClick() {\n      goCreateLoop();\n      setRunning(true);\n    }\n  }, \"Start Mint Loop\")) : null));\n}","map":null,"metadata":{},"sourceType":"module"}