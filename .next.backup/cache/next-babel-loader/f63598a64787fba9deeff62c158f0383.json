{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Text } from '@chakra-ui/core';\nimport { useRouter } from 'next/router';\nimport { useState } from 'react';\nimport { EMBLEM_API } from '../constants';\nexport default function Batch() {\n  _s();\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(\"\"),\n      batchName = _useState[0],\n      setBatchName = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      imageBaseUrl = _useState2[0],\n      setImageBaseUrl = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      inscriptionBaseUrl = _useState3[0],\n      setInscriptionBaseUrl = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      addressType = _useState4[0],\n      setAddressType = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      titleTemplate = _useState5[0],\n      setTitleTemplate = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      descriptionTemplate = _useState6[0],\n      setDescriptionTemplate = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      total = _useState7[0],\n      setTotal = _useState7[1];\n\n  var _useState8 = useState(query.batch_id || null),\n      batchId = _useState8[0],\n      setBatchId = _useState8[1];\n\n  var _useState9 = useState({\n    loaded: true,\n    \"private\": false\n  }),\n      state = _useState9[0],\n      setState = _useState9[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    var serializedForm = {\n      batchName: batchName,\n      imageBaseUrl: imageBaseUrl,\n      inscriptionBaseUrl: inscriptionBaseUrl,\n      addressType: addressType,\n      titleTemplate: titleTemplate,\n      descriptionTemplate: descriptionTemplate,\n      total: total\n    };\n    var apiSuffix = '/addBatch';\n    fetch(EMBLEM_API + apiSuffix, {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm)\n    }).then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return response.json();\n\n              case 2:\n                data = _context.sent;\n\n                if (data.id) {\n                  setBatchId(data.id);\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }())[\"catch\"](function (err) {\n      console.log(err);\n    });\n  };\n\n  return (//   <Loader loaded={state.loaded}>\n    //   <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n    //   <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n    //       <form onSubmit={handleSubmit}>\n    //     <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n    //       <FormControl isRequired>\n    //         <FormLabel htmlFor=\"batch-name\">Batch Name</FormLabel>\n    //         <Input\n    //           type=\"text\"\n    //           id=\"batch-name\"\n    //           aria-describedby=\"batch-name-text\"\n    //           value={batchName}\n    //           onChange={(e) => setBatchName(e.target.value)}\n    //           autoComplete=\"off\"\n    //         />\n    //         <FormHelperText id=\"batch-name-text\">Give it a unique name for this batch.</FormHelperText>\n    //       </FormControl>\n    //       <FormControl isRequired>\n    //         <FormLabel htmlFor=\"image-base-url\">Image Base Url</FormLabel>\n    //         <Input\n    //           type=\"text\"\n    //           id=\"image-base-url\"\n    //           aria-describedby=\"image-base-url-text\"\n    //           value={imageBaseUrl}\n    //           onChange={(e) => setImageBaseUrl(e.target.value)}\n    //           autoComplete=\"off\"\n    //         />\n    //         <FormHelperText id=\"image-base-url-text\">\n    //           Enter the base url for the images in this batch.\n    //         </FormHelperText>\n    //       </FormControl>\n    //       <FormControl isRequired>\n    //         <FormLabel htmlFor=\"inscription-base-url\">Inscription Base Url</FormLabel>\n    //         <Input\n    //           type=\"text\"\n    //           id=\"inscription-base-url\"\n    //           aria-describedby=\"inscription-base-url-text\"\n    //           value={inscriptionBaseUrl}\n    //           onChange={(e) => setInscriptionBaseUrl(e.target.value)}\n    //           autoComplete=\"off\"\n    //         />\n    //         <FormHelperText id=\"inscription-base-url-text\">\n    //           Enter the base url for the inscriptions in this batch.\n    //         </FormHelperText>\n    //       </FormControl>\n    //       <FormControl isRequired>\n    //         <FormLabel htmlFor=\"address-type\">Address Type</FormLabel>\n    //         <Input\n    //           type=\"text\"\n    //           id=\"address-type\"\n    //           aria-describedby=\"address-type-text\"\n    //           value={addressType}\n    //           onChange={(e) => setAddressType(e.target.value)}\n    //           autoComplete=\"off\"\n    //         />\n    //         <FormHelperText id=\"address-type-text\">\n    //           Enter the address type for the items in this batch.\n    //         </FormHelperText>\n    //       </FormControl>\n    //       <FormControl isRequired>\n    //         <FormLabel htmlFor=\"title-template\">Title Template</FormLabel>\n    //         <Textarea\n    //             id=\"title-template\"\n    //             size=\"lg\"\n    //             aria-describedby=\"title-template-text\"\n    //             minLength={3}\n    //             maxLength={4024}\n    //             value={titleTemplate}\n    //             onChange={(e) => setTitleTemplate(e.target.value)}\n    //             autoComplete=\"off\"\n    //         />\n    //         <FormHelperText id=\"title-template-text\">\n    //           Enter the title template for the items in this batch.\n    //         </FormHelperText>\n    //       </FormControl>\n    //       <FormControl isRequired>\n    //         <FormLabel htmlFor=\"description-template\">Description Template</FormLabel>\n    //         <Textarea\n    //             id=\"description-template\"\n    //             size=\"lg\"\n    //             aria-describedby=\"description-template-text\"\n    //             minLength={3}\n    //             maxLength={1024}\n    //             value={descriptionTemplate}\n    //             onChange={(e) => setDescriptionTemplate(e.target.value)}\n    //             autoComplete=\"off\"\n    //         />\n    //         <FormHelperText id=\"description-template-text\">\n    //           Enter the description template for the items in this batch.\n    //         </FormHelperText>\n    //       </FormControl>\n    //       <FormControl isRequired>\n    //         <FormLabel htmlFor=\"total\">Total</FormLabel>\n    //         <Input\n    //           type=\"number\"\n    //           id=\"total\"\n    //           aria-describedby=\"total-text\"\n    //           value={total}\n    //           onChange={(e) => setTotal(e.target.value)}\n    //           autoComplete=\"off\"\n    //         />\n    //         <FormHelperText id=\"total-text\">\n    //           Enter the total number of items in this batch.\n    //         </FormHelperText>\n    //       </FormControl>\n    //     </Stack>\n    //     <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n    //       <Button mt={4} type=\"submit\">\n    //         Submit\n    //       </Button>\n    //     </Stack>\n    //       </form>\n    //     </Box>\n    //  </Flex>\n    //  </Loader>\n    __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 3\n      }\n    }, \"wtf\")\n  );\n}\n\n_s(Batch, \"Vm57WsKZI+MMxEc+n7M7A0z9qNM=\", false, function () {\n  return [useRouter];\n});\n\n_c = Batch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Batch\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/Batch.tsx"],"names":["Text","useRouter","useState","EMBLEM_API","Batch","query","batchName","setBatchName","imageBaseUrl","setImageBaseUrl","inscriptionBaseUrl","setInscriptionBaseUrl","addressType","setAddressType","titleTemplate","setTitleTemplate","descriptionTemplate","setDescriptionTemplate","total","setTotal","batch_id","batchId","setBatchId","loaded","state","setState","handleSubmit","event","preventDefault","myHeaders","Headers","append","serializedForm","apiSuffix","fetch","method","headers","body","JSON","stringify","then","response","json","data","id","err","console","log"],"mappings":";;;;;;;;AAAA,SAQEA,IARF,QAWO,iBAXP;AAYA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAGA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,mBAAkBH,SAAS,EAA3B;AAAA,MAAQI,KAAR,cAAQA,KAAR;;AACA,kBAAkCH,QAAQ,CAAC,EAAD,CAA1C;AAAA,MAAOI,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAwCL,QAAQ,CAAC,EAAD,CAAhD;AAAA,MAAOM,YAAP;AAAA,MAAqBC,eAArB;;AACA,mBAAoDP,QAAQ,CAAC,EAAD,CAA5D;AAAA,MAAOQ,kBAAP;AAAA,MAA2BC,qBAA3B;;AACA,mBAAsCT,QAAQ,CAAC,EAAD,CAA9C;AAAA,MAAOU,WAAP;AAAA,MAAoBC,cAApB;;AACA,mBAA0CX,QAAQ,CAAC,EAAD,CAAlD;AAAA,MAAOY,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAAsDb,QAAQ,CAAC,EAAD,CAA9D;AAAA,MAAOc,mBAAP;AAAA,MAA4BC,sBAA5B;;AACA,mBAA0Bf,QAAQ,CAAC,EAAD,CAAlC;AAAA,MAAOgB,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAA8BjB,QAAQ,CAACG,KAAK,CAACe,QAAN,IAAkB,IAAnB,CAAtC;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAA0BpB,QAAQ,CAAC;AAAEqB,IAAAA,MAAM,EAAE,IAAV;AAAgB,eAAS;AAAzB,GAAD,CAAlC;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAIC,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AAEA,QAAMC,cAAc,GAAG;AACnB1B,MAAAA,SAAS,EAATA,SADmB;AAEnBE,MAAAA,YAAY,EAAZA,YAFmB;AAGnBE,MAAAA,kBAAkB,EAAlBA,kBAHmB;AAInBE,MAAAA,WAAW,EAAXA,WAJmB;AAKnBE,MAAAA,aAAa,EAAbA,aALmB;AAMnBE,MAAAA,mBAAmB,EAAnBA,mBANmB;AAOnBE,MAAAA,KAAK,EAALA;AAPmB,KAAvB;AASA,QAAIe,SAAS,GAAG,WAAhB;AACAC,IAAAA,KAAK,CAAC/B,UAAU,GAAG8B,SAAd,EAAyB;AAC5BE,MAAAA,MAAM,EAAE,MADoB;AAE5BC,MAAAA,OAAO,EAAEP,SAFmB;AAG5BQ,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,cAAf;AAHsB,KAAzB,CAAL,CAIGQ,IAJH;AAAA,0EAIQ,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACaA,QAAQ,CAACC,IAAT,EADb;;AAAA;AACAC,gBAAAA,IADA;;AAEJ,oBAAIA,IAAI,CAACC,EAAT,EAAa;AACXtB,kBAAAA,UAAU,CAACqB,IAAI,CAACC,EAAN,CAAV;AACD;;AAJG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJR;;AAAA;AAAA;AAAA;AAAA,kBASW,UAAAC,GAAG,EAAE;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAXH;AAYD,GA3BD;;AA6BA,SACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3HA;AA6HD;;GAtKuBzC,K;UACJH,S;;;KADIG,K","sourcesContent":["import {\n  FormControl,\n  FormLabel,\n  FormHelperText,\n  Input,\n  Stack,\n  Box,\n  Flex,\n  Text,\n  Textarea,\n  Button\n} from '@chakra-ui/core'\nimport { useRouter } from 'next/router';\nimport { useState } from 'react'\nimport { EMBLEM_API } from '../constants'\nimport Loader from 'react-loader'\n\nexport default function Batch() {\n  const { query } = useRouter()\n  const [batchName, setBatchName] = useState(\"\");\n  const [imageBaseUrl, setImageBaseUrl] = useState(\"\");\n  const [inscriptionBaseUrl, setInscriptionBaseUrl] = useState(\"\");\n  const [addressType, setAddressType] = useState(\"\");\n  const [titleTemplate, setTitleTemplate] = useState(\"\");\n  const [descriptionTemplate, setDescriptionTemplate] = useState(\"\");\n  const [total, setTotal] = useState(\"\");\n  const [batchId, setBatchId] = useState(query.batch_id || null)\n  const [state, setState] = useState({ loaded: true, private: false })\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    \n    const serializedForm = {\n        batchName,\n        imageBaseUrl,\n        inscriptionBaseUrl,\n        addressType,\n        titleTemplate,\n        descriptionTemplate,\n        total\n      };\n    let apiSuffix = '/addBatch' \n    fetch(EMBLEM_API + apiSuffix, {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify(serializedForm),\n    }).then(async(response)=> {\n        let data = await response.json()\n        if (data.id) {\n          setBatchId(data.id)\n        }\n      }).catch(err=>{\n        console.log(err)\n      })\n  };\n\n  return (\n  //   <Loader loaded={state.loaded}>\n  //   <Flex width=\"full\" align=\"center\" justifyContent=\"center\">\n  //   <Box maxW=\"sm\" borderWidth=\"1px\" rounded=\"lg\" overflow=\"hidden\">\n    \n  //       <form onSubmit={handleSubmit}>\n  //     <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n  //       <FormControl isRequired>\n  //         <FormLabel htmlFor=\"batch-name\">Batch Name</FormLabel>\n  //         <Input\n  //           type=\"text\"\n  //           id=\"batch-name\"\n  //           aria-describedby=\"batch-name-text\"\n  //           value={batchName}\n  //           onChange={(e) => setBatchName(e.target.value)}\n  //           autoComplete=\"off\"\n  //         />\n  //         <FormHelperText id=\"batch-name-text\">Give it a unique name for this batch.</FormHelperText>\n  //       </FormControl>\n        \n  //       <FormControl isRequired>\n  //         <FormLabel htmlFor=\"image-base-url\">Image Base Url</FormLabel>\n  //         <Input\n  //           type=\"text\"\n  //           id=\"image-base-url\"\n  //           aria-describedby=\"image-base-url-text\"\n  //           value={imageBaseUrl}\n  //           onChange={(e) => setImageBaseUrl(e.target.value)}\n  //           autoComplete=\"off\"\n  //         />\n  //         <FormHelperText id=\"image-base-url-text\">\n  //           Enter the base url for the images in this batch.\n  //         </FormHelperText>\n  //       </FormControl>\n\n  //       <FormControl isRequired>\n  //         <FormLabel htmlFor=\"inscription-base-url\">Inscription Base Url</FormLabel>\n  //         <Input\n  //           type=\"text\"\n  //           id=\"inscription-base-url\"\n  //           aria-describedby=\"inscription-base-url-text\"\n  //           value={inscriptionBaseUrl}\n  //           onChange={(e) => setInscriptionBaseUrl(e.target.value)}\n  //           autoComplete=\"off\"\n  //         />\n  //         <FormHelperText id=\"inscription-base-url-text\">\n  //           Enter the base url for the inscriptions in this batch.\n  //         </FormHelperText>\n  //       </FormControl>\n\n  //       <FormControl isRequired>\n  //         <FormLabel htmlFor=\"address-type\">Address Type</FormLabel>\n  //         <Input\n  //           type=\"text\"\n  //           id=\"address-type\"\n  //           aria-describedby=\"address-type-text\"\n  //           value={addressType}\n  //           onChange={(e) => setAddressType(e.target.value)}\n  //           autoComplete=\"off\"\n  //         />\n  //         <FormHelperText id=\"address-type-text\">\n  //           Enter the address type for the items in this batch.\n  //         </FormHelperText>\n  //       </FormControl>\n\n  //       <FormControl isRequired>\n  //         <FormLabel htmlFor=\"title-template\">Title Template</FormLabel>\n  //         <Textarea\n  //             id=\"title-template\"\n  //             size=\"lg\"\n  //             aria-describedby=\"title-template-text\"\n  //             minLength={3}\n  //             maxLength={4024}\n  //             value={titleTemplate}\n  //             onChange={(e) => setTitleTemplate(e.target.value)}\n  //             autoComplete=\"off\"\n  //         />\n  //         <FormHelperText id=\"title-template-text\">\n  //           Enter the title template for the items in this batch.\n  //         </FormHelperText>\n  //       </FormControl>\n\n  //       <FormControl isRequired>\n  //         <FormLabel htmlFor=\"description-template\">Description Template</FormLabel>\n  //         <Textarea\n  //             id=\"description-template\"\n  //             size=\"lg\"\n  //             aria-describedby=\"description-template-text\"\n  //             minLength={3}\n  //             maxLength={1024}\n  //             value={descriptionTemplate}\n  //             onChange={(e) => setDescriptionTemplate(e.target.value)}\n  //             autoComplete=\"off\"\n  //         />\n  //         <FormHelperText id=\"description-template-text\">\n  //           Enter the description template for the items in this batch.\n  //         </FormHelperText>\n  //       </FormControl>\n\n  //       <FormControl isRequired>\n  //         <FormLabel htmlFor=\"total\">Total</FormLabel>\n  //         <Input\n  //           type=\"number\"\n  //           id=\"total\"\n  //           aria-describedby=\"total-text\"\n  //           value={total}\n  //           onChange={(e) => setTotal(e.target.value)}\n  //           autoComplete=\"off\"\n  //         />\n  //         <FormHelperText id=\"total-text\">\n  //           Enter the total number of items in this batch.\n  //         </FormHelperText>\n  //       </FormControl>\n  //     </Stack>\n  //     <Stack direction=\"row\" align=\"flex-start\" padding=\"25px\" spacing=\"2rem\" flexWrap=\"wrap\" shouldWrapChildren>\n  //       <Button mt={4} type=\"submit\">\n  //         Submit\n  //       </Button>\n  //     </Stack>\n  //       </form>\n  //     </Box>\n  //  </Flex>\n  //  </Loader>\n  <Text>wtf</Text>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}