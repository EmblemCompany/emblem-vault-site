{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, Text, Stack, Button, useColorMode } from '@chakra-ui/core';\nimport copy from 'copy-to-clipboard';\nimport { COLOR } from '../constants';\nexport default function KeysModal(_ref) {\n  var isOpen = _ref.isOpen,\n      onClose = _ref.onClose,\n      mnemonic = _ref.mnemonic,\n      privKeyBTC = _ref.privKeyBTC,\n      privKeyETH = _ref.privKeyETH,\n      privValues = _ref.privValues,\n      addresses = _ref.addresses;\n  var phrase = mnemonic;\n  var btcKey = privKeyBTC;\n  var ethKey = privKeyETH;\n  var values = privValues;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _useState = useState(false),\n      phraseCopied = _useState[0],\n      setPhraseCopied = _useState[1];\n\n  useEffect(function () {\n    if (phraseCopied) {\n      var timeout = setTimeout(function () {\n        setPhraseCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [phraseCopied]);\n\n  var _useState2 = useState(false),\n      BTCKeyCopied = _useState2[0],\n      setBTCKeyCopied = _useState2[1];\n\n  useEffect(function () {\n    if (BTCKeyCopied) {\n      var timeout = setTimeout(function () {\n        setBTCKeyCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [BTCKeyCopied]);\n\n  var _useState3 = useState(false),\n      ETHKeyCopied = _useState3[0],\n      setETHKeyCopied = _useState3[1];\n\n  useEffect(function () {\n    if (ETHKeyCopied) {\n      var timeout = setTimeout(function () {\n        setETHKeyCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ETHKeyCopied]);\n\n  var _useState4 = useState(false),\n      BCHKeyCopied = _useState4[0],\n      setBCHKeyCopied = _useState4[1];\n\n  useEffect(function () {\n    if (BCHKeyCopied) {\n      var timeout = setTimeout(function () {\n        setBCHKeyCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [BCHKeyCopied]);\n\n  var _useState5 = useState(false),\n      valueCopied = _useState5[0],\n      setValueCopied = _useState5[1];\n\n  useEffect(function () {\n    if (valueCopied) {\n      var timeout = setTimeout(function () {\n        setValueCopied(false);\n      }, 750);\n      return function () {\n        clearTimeout(timeout);\n      };\n    }\n  }, [valueCopied]);\n\n  function copyWithFlag(content, whichOne) {\n    copy(content);\n    whichOne == 'phrase' ? setPhraseCopied(true) : whichOne == 'BTCKey' ? setBTCKeyCopied(true) : whichOne == 'ETHKey' ? setETHKeyCopied(true) : whichOne == 'BCHKey' ? setBCHKeyCopied(true) : whichOne == 'values' ? setValueCopied(true) : null;\n  }\n\n  return __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    isCentered: true\n  }, __jsx(ModalOverlay, null), __jsx(ModalContent, {\n    color: COLOR[colorMode]\n  }, __jsx(ModalHeader, null, __jsx(Text, null, \"Your Vault Keys\")), __jsx(ModalCloseButton, null), __jsx(ModalBody, null, __jsx(Stack, {\n    direction: \"column\",\n    mb: 10\n  }, __jsx(Stack, {\n    direction: \"row\"\n  }, __jsx(Text, null, \"Your mnemonic phrase (click to copy):\")), __jsx(Stack, {\n    direction: \"row\"\n  }, __jsx(Button, {\n    width: \"100%\",\n    whiteSpace: \"unset\",\n    height: \"unset\",\n    p: 2,\n    onClick: function onClick() {\n      return copyWithFlag(phrase, 'phrase');\n    },\n    isActive: true\n  }, phraseCopied ? __jsx(Text, null, \"Copied!\") : __jsx(Text, null, phrase))), privValues && privValues.length > 0 ? __jsx(React.Fragment, null, __jsx(Stack, {\n    direction: \"row\",\n    mt: 4\n  }, __jsx(Text, null, \"Your Values (click to copy): \")), privValues.map(function (item, index) {\n    return __jsx(Stack, {\n      direction: \"row\",\n      key: index,\n      justify: \"space-between\"\n    }, __jsx(Text, {\n      isTruncated: true\n    }, item.key), __jsx(Button, {\n      whiteSpace: \"unset\",\n      height: \"unset\",\n      p: 2,\n      onClick: function onClick() {\n        return copyWithFlag(item.value, 'values');\n      }\n    }, valueCopied ? __jsx(Text, null, \"Copied!\") : __jsx(Text, {\n      isTruncated: true\n    }, item.value)));\n  })) : null, addresses.length > 0 ? addresses.map(function (item, index) {\n    // if (item.coin == \"BCH\")\n    return __jsx(React.Fragment, null, __jsx(Stack, {\n      direction: \"row\",\n      mt: 4\n    }, __jsx(Text, null, \"Your \", item.coin, \" private key (click to copy):\")), __jsx(Stack, {\n      direction: \"row\",\n      justify: \"space-between\"\n    }, __jsx(Button, {\n      whiteSpace: \"unset\",\n      height: \"unset\",\n      p: 2,\n      onClick: function onClick() {\n        return copyWithFlag(item.key, 'BCHKey');\n      }\n    }, BCHKeyCopied ? __jsx(Text, null, \"Copied!\") : __jsx(Text, {\n      isTruncated: true\n    }, item.key))));\n  }) : null))));\n}","map":null,"metadata":{},"sourceType":"module"}