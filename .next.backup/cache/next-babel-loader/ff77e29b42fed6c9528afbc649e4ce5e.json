{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/SwapChain.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Box, Flex, Text, Stack } from '@chakra-ui/core';\nimport Loader from 'react-loader';\nimport Refreshing from './Refreshing';\nimport { useRouter } from 'next/router';\nimport { useWeb3React } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { useContract } from '../hooks';\nimport { contractAddresses } from '../constants';\nexport default function SwapChain() {\n  _s();\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useWeb3React = useWeb3React(),\n      account = _useWeb3React.account,\n      chainId = _useWeb3React.chainId; // const [vaults, setVaults] = useState([])\n\n\n  var _useState = useState({\n    loaded: false\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState(false),\n      loadingApi = _useState2[0],\n      setLoadingApi = _useState2[1];\n\n  var _useState3 = useState(null),\n      balance = _useState3[0],\n      setBalance = _useState3[1];\n\n  var _useState4 = useState(query.address),\n      address = _useState4[0],\n      setAddress = _useState4[1];\n\n  var _useState5 = useState(query.experimental),\n      experimental = _useState5[0],\n      setExperimental = _useState5[1];\n\n  var _useState6 = useState(null),\n      decimals = _useState6[0],\n      setDecimals = _useState6[1];\n\n  var _useState7 = useState(null),\n      allowance = _useState7[0],\n      setAllowance = _useState7[1];\n\n  var _useState8 = useState(0),\n      covalApprovedFor = _useState8[0],\n      setIsCovalApproved = _useState8[1];\n\n  var handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true);\n  var covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true);\n\n  var getContractStates = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = setDecimals;\n              _context.next = 3;\n              return covalContract.decimals();\n\n            case 3:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              _context.t2 = setAllowance;\n              _context.next = 8;\n              return covalContract.allowance(account, contractAddresses.vaultHandler[chainId]).then(function (balance) {\n                return balance.toString();\n              });\n\n            case 8:\n              _context.t3 = _context.sent;\n              (0, _context.t2)(_context.t3);\n              _context.t4 = setBalance;\n              _context.next = 13;\n              return covalContract.balanceOf(account).then(function (balance) {\n                return balance.toString();\n              });\n\n            case 13:\n              _context.t5 = _context.sent;\n              (0, _context.t4)(_context.t5);\n\n              if (Number(allowance) >= Number(0)) {\n                setIsCovalApproved(allowance);\n              }\n\n              setState({\n                loaded: true\n              });\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getContractStates() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // const getVaults = async () => {\n  //   loadCache()\n  //   try {\n  //     const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental? '?experimental=true' : ''), {\n  //       method: 'GET',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         service: 'evmetadata',\n  //         chainId: chainId.toString(),\n  //       },\n  //     })\n  //     const jsonData = await response.json()\n  //     setState({ loaded: true })\n  //     setVaults(jsonData)\n  //     saveCache(jsonData)\n  //     setLoadingApi(false)\n  //     // console.log(jsonData)\n  //   } catch (error) {}\n  // }\n  // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_vaults')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_vaults', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n\n  var _useState9 = useState(''),\n      acct = _useState9[0],\n      setAcct = _useState9[1];\n\n  useEffect(function () {\n    if (account && acct != account) {\n      setAcct(account);\n      setState({\n        loaded: false\n      });\n      getContractStates();\n    }\n  }, [account, acct]);\n\n  var _useState10 = useState(chainId),\n      chain = _useState10[0],\n      setChain = _useState10[1];\n\n  useEffect(function () {\n    if (chainId && chain != chainId) {\n      setChain(chainId);\n      setState({\n        loaded: false\n      }); // getVaults()\n    }\n  }, [chainId, chain]);\n  useEffect(function () {\n    account && chainId ? setState({\n      loaded: true\n    }) : null;\n  }, []);\n  return __jsx(Loader, {\n    loaded: state.loaded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, loadingApi ? __jsx(Refreshing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }) : '', __jsx(Flex, {\n    w: \"100%\",\n    justify: \"center\",\n    mt: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, __jsx(Stack, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"s\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, \"Transfer Coval from \", chainId == 137 ? \"Matic\" : \"Ethereum\", \" Network to \", chainId == 137 ? \"Etherum\" : \"Matic\", \" Network\")), __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, \"Allowance: \", allowance * Math.pow(10, -decimals))), __jsx(Box, {\n    mt: \"2\",\n    ml: \"4\",\n    lineHeight: \"tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, __jsx(Text, {\n    mt: 2,\n    as: \"h4\",\n    ml: \"4\",\n    mr: \"4\",\n    fontSize: \"xs\",\n    fontStyle: \"italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, \"Balance: \", balance * Math.pow(10, -decimals))))));\n}\n\n_s(SwapChain, \"mqJ4whQE15tp5/kiyo/54OzQ4Lk=\", false, function () {\n  return [useRouter, useWeb3React, useContract, useContract];\n});\n\n_c = SwapChain;\n\nvar _c;\n\n$RefreshReg$(_c, \"SwapChain\");","map":{"version":3,"sources":["/Users/shannoncode/repo/Emblem.Currentwork/emblem-vault-site/components/SwapChain.tsx"],"names":["Box","Flex","Text","Stack","Loader","Refreshing","useRouter","useWeb3React","useEffect","useState","useContract","contractAddresses","SwapChain","query","account","chainId","loaded","state","setState","loadingApi","setLoadingApi","balance","setBalance","address","setAddress","experimental","setExperimental","decimals","setDecimals","allowance","setAllowance","covalApprovedFor","setIsCovalApproved","handlerContract","vaultHandler","vaultHandlerAbi","covalContract","coval","covalAbi","getContractStates","then","toString","balanceOf","Number","acct","setAcct","chain","setChain","Math","pow"],"mappings":"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","sourcesContent":["import { Box, Flex, Text, Link, Image, Stack, Spinner } from '@chakra-ui/core'\nimport Loader from 'react-loader'\nimport Refreshing from './Refreshing'\nimport { useRouter } from 'next/router'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\nimport { validImage } from '../utils'\nimport { useContract } from '../hooks'\nimport { EMBLEM_API, contractAddresses } from '../constants'\n\nexport default function SwapChain() {\n  const { query } = useRouter()\n  const { account, chainId } = useWeb3React()\n  // const [vaults, setVaults] = useState([])\n  const [state, setState] = useState({ loaded: false })\n  const [loadingApi, setLoadingApi] = useState(false)\n  const [balance, setBalance] = useState(null)\n  const [address, setAddress] = useState(query.address)\n  const [experimental, setExperimental] = useState(query.experimental)\n  const [decimals, setDecimals] = useState(null)\n  const [allowance, setAllowance] = useState(null)\n  const [covalApprovedFor, setIsCovalApproved] = useState(0)\n\n  const handlerContract = useContract(contractAddresses.vaultHandler[chainId], contractAddresses.vaultHandlerAbi, true)\n  const covalContract = useContract(contractAddresses.coval[chainId], contractAddresses.covalAbi, true)\n\n\n  const getContractStates = async () => {\n    setDecimals(await covalContract.decimals())\n    setAllowance(\n      await covalContract\n        .allowance(account, contractAddresses.vaultHandler[chainId])\n        .then((balance: { toString: () => string }) => balance.toString())\n    )\n    setBalance(await covalContract.balanceOf(account).then((balance: { toString: () => string }) => balance.toString()))\n    if (Number(allowance) >= Number(0)) {\n      setIsCovalApproved(allowance)\n    }\n    setState({ loaded: true })\n  }\n\n  // const getVaults = async () => {\n  //   loadCache()\n  //   try {\n  //     const response = await fetch(EMBLEM_API + '/vaults/' + (address ? address : account) + (experimental? '?experimental=true' : ''), {\n  //       method: 'GET',\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         service: 'evmetadata',\n  //         chainId: chainId.toString(),\n  //       },\n  //     })\n  //     const jsonData = await response.json()\n  //     setState({ loaded: true })\n  //     setVaults(jsonData)\n  //     saveCache(jsonData)\n  //     setLoadingApi(false)\n  //     // console.log(jsonData)\n  //   } catch (error) {}\n  // }\n\n  // const loadCache = () => {\n  //   let vaults = JSON.parse(localStorage.getItem((address ? address : account) + '_' + chainId + '_vaults')) // Load vaults from storage before updating from server!\n  //   if (vaults) {\n  //     setState({ loaded: true })\n  //     setVaults(vaults)\n  //     setLoadingApi(true)\n  //   }\n  // }\n\n  // const saveCache = (vaults) => {\n  //   localStorage.setItem((address ? address : account) + '_' + chainId + '_vaults', JSON.stringify(vaults)) // Save new state for later\n  // }\n\n  const [acct, setAcct] = useState('')\n  useEffect(() => {\n    if (account && acct != account) {\n      setAcct(account)\n      setState({ loaded: false })\n      getContractStates()\n    }\n  }, [account, acct])\n\n  const [chain, setChain] = useState(chainId)\n  useEffect(() => {\n    if (chainId && chain != chainId) {\n      setChain(chainId)\n      setState({ loaded: false })\n      // getVaults()\n    }\n  }, [chainId, chain])\n\n  useEffect(() => {\n    account && chainId ? setState({ loaded: true }) : null\n  }, [])\n\n  return (\n    <Loader loaded={state.loaded}>\n      {loadingApi ? <Refreshing /> : ''}\n\n      <Flex w=\"100%\" justify=\"center\" mt={10}>\n        {/* <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n          <Text>Transfer Coval from {chainId == 137 ? \"Matic\" : \"Ethereum\"} Network to {chainId == 137 ? \"Etherum\" : \"Matic\"} Network</Text>\n        </Stack>\n        <Stack direction=\"row\" align=\"flex-start\" spacing=\"0rem\" flexWrap=\"wrap\" shouldWrapChildren>\n          <Text>Allowance: {allowance * Math.pow(10, -decimals)}</Text>\n        </Stack> */}\n        <Stack align=\"center\">\n          <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n            <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"s\" fontStyle=\"italic\" >\n            Transfer Coval from {chainId == 137 ? \"Matic\" : \"Ethereum\"} Network to {chainId == 137 ? \"Etherum\" : \"Matic\"} Network\n            </Text>\n          </Box>\n          <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n            <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" >\n            Allowance: {allowance * Math.pow(10, -decimals)}\n            </Text>\n          </Box>\n          <Box mt=\"2\" ml=\"4\" lineHeight=\"tight\">\n            <Text mt={2} as=\"h4\" ml=\"4\" mr=\"4\" fontSize=\"xs\" fontStyle=\"italic\" >\n            Balance: {balance * Math.pow(10, -decimals)}\n            </Text>\n          </Box>\n        </Stack>\n      </Flex>\n    </Loader>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}